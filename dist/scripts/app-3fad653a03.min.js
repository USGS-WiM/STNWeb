!function(){"use strict";{var STNControllers=(angular.module("SettingsControllers",["ngInputModified","ui.validate","angular.filter","xeditable","checklist-model","ngFileUpload"]),angular.module("STNControllers",[]));angular.module("ModalControllers",[])}STNControllers.constant("RegExp",{PASSWORD:/^(((?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]))|((?=.*[a-z])(?=.*[A-Z])(?=.*[!@@?#$%^&_:;-]))|((?=.*[a-z])(?=.*[0-9])(?=.*[!@@?#$%^&_:;-]))|((?=.*[A-Z])(?=.*[0-9])(?=.*[!@@?#$%^&_:;-]))).{8,}$/})}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.directive("barsChart",["$parse",function($parse){var directiveDefinitionObject={restrict:"E",replace:!1,scope:{data:"=elevationData"},link:function(scope,element,attrs){var chart=(attrs.elevationData.split(","),d3.select(element[0]));chart.append("div").attr("class","chart").selectAll("div").data(scope.data).enter().append("div").transition().ease("elastic").style("width",function(d){return d+"%"}).text(function(d){return d+"%"}),scope.$watch("data",function(newValue,oldValue){scope.data=newValue})}};return directiveDefinitionObject}]),STNControllers.directive("siteSearch",function(){return{restrict:"E",scope:{model:"=ngModel",searchBy:"=",searchTerm:"="},replace:!0,template:'<div class="searchnav"><div class="searchby"><b>Search By:</b><div class="searchbyoption"><input type="radio" name="SearchBy" ng-model="searchBy.val" value="bySiteId" />ID</div><div class="searchbyoption"><input type="radio" name="SearchBy" ng-model="searchBy.val" value="bySiteNo" />Number</div><div class="searchbyoption"><input type="radio" name="SearchBy" ng-model="searchBy.val" value="bySiteName" />Name</div></div><div class="search-input"><input ng-focus="goSearch" type="text" ng-model="searchTerm" ng-enter="IndexSearchSites()" placeholder="Search Sites..." /><button type="button" class="borderLess" ng-click="IndexSearchSites()">Search <i class="ion-search"></i></button></div></div>',controller:["$scope","$state","$http","SITE","$uibModal",function($scope,$state,$http,SITE,$uibModal){$scope.searchTerm="",$scope.searchBy={val:"bySiteNo"},$scope.placeholder="...",$scope.IndexSearchSites=function(){if(""!==$scope.searchTerm)switch($http.defaults.headers.common.Accept="application/json",$scope.searchBy.val){case"bySiteNo":SITE.getSearchedSite({bySiteNo:$scope.searchTerm},function(resp){siteSearchResponse(resp)},function(errorResponse){siteSearchResponse(errorResponse)});break;case"bySiteId":SITE.getSearchedSite({bySiteId:$scope.searchTerm},function(resp){siteSearchResponse(resp)},function(errorResponse){siteSearchResponse(errorResponse)});break;case"bySiteName":SITE.getSearchedSite({bySiteName:$scope.searchTerm},function(resp){siteSearchResponse(resp)},function(errorResponse){siteSearchResponse(errorResponse)})}};var siteSearchResponse=function(s){if(void 0!==s.status){var errorModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>No site found. For more site search options, go to the Sites navigation tab to search for sites.</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});errorModal.result.then(function(){$scope.searchTerm="",$scope.searchBy={val:"bySiteNo"}})}else $scope.searchTerm="",$scope.searchBy={val:"bySiteNo"},$state.go("site.dashboard",{id:s.site_id})}}]}}),STNControllers.directive("ngEnter",function(){return function(scope,element,attrs){element.bind("keydown keypress",function(event){13===event.which&&(scope.$apply(function(){scope.$eval(attrs.ngEnter)}),event.preventDefault())})}}),STNControllers.directive("numericOnly",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(inputValue){var transformedInput=inputValue?inputValue.replace(/[^\d.-]/g,""):null;return transformedInput!=inputValue&&(modelCtrl.$setViewValue(transformedInput),modelCtrl.$render()),transformedInput})}}}),STNControllers.directive("datepickerPopup",function(){return{restrict:"EAC",require:"ngModel",link:function(scope,element,attr,controller){controller.$formatters.shift()}}}),STNControllers.directive("focus",function(){return function(scope,element,attributes){element[0].focus()}}),STNControllers.directive("backButton",function(){return{restrict:"A",link:function(scope,element,attrs){function goBack(){history.back(),scope.$apply()}element.bind("click",goBack)}}}),STNControllers.directive("passwordValidate",["RegExp",function(regex){return{require:"ngModel",link:function(scope,elm,attrs,ctrl){elm.unbind("keydown").unbind("change"),elm.bind("blur",function(viewValue){scope.$apply(function(){return regex.PASSWORD.test(viewValue.target.value)?(ctrl.$setValidity("passwordValidate",!0),viewValue):void ctrl.$setValidity("passwordValidate",!1)})})}}}]),STNControllers.directive("sameAs",["$parse",function($parse){return{require:"ngModel",restrict:"A",link:function(scope,elm,attrs,ctrl){elm.unbind("keydown").unbind("change"),elm.bind("blur",function(viewValue){scope.$watch(function(){return $parse(attrs.sameAs)(scope)===ctrl.$modelValue},function(currentValue){ctrl.$setValidity("passwordMismatch",currentValue)})})}}}]),STNControllers.directive("elastic",["$timeout",function($timeout){return{restrict:"A",link:function($scope,element){$scope.initialHeight=$scope.initialHeight||element[0].style.height;var resize=function(){element[0].style.height=$scope.initialHeight,element[0].style.height=""+element[0].scrollHeight+"px"};element.on("input change",resize),$timeout(resize,0)}}}]),STNControllers.directive("myInputMask",function(){return{restrict:"AC",link:function(scope,el,attrs){el.inputmask(scope.$eval(attrs.myInputMask)),el.on("change",function(){scope.$eval(attrs.ngModel+"='"+el.val()+"'")})}}}),STNControllers.directive("fileModel",["$parse",function($parse){return{restrict:"A",link:function(scope,element,attrs){var model=$parse(attrs.fileModel),modelSetter=model.assign;element.bind("change",function(){scope.$apply(function(){modelSetter(scope,element[0].files[0])})})}}}]),STNControllers.directive("inputRestrictor",[function(){return{restrict:"A",require:"ngModel",link:function(scope,element,attr,ngModelCtrl){function fromUser(text){if(!text)return text;var transformedInput=text.replace(pattern,"");return transformedInput!==text&&(ngModelCtrl.$setViewValue(transformedInput),ngModelCtrl.$render()),transformedInput}var pattern=/[^a-zA-Z0-9- _]/g;ngModelCtrl.$parsers.push(fromUser)}}}]),STNControllers.directive("labelLimitLength",function(){return{restrict:"A",link:function(scope,elem,attrs){var limit=parseInt(attrs.labelLimitLength);angular.element(elem).on("keypress",function(e){this.value.length==limit&&e.preventDefault()})}}})}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("siteSearchCtrl",["$scope","$cookies","$rootScope","$location","stateList","sensorTypes","networkNames","SITE",function($scope,$cookies,$rootScope,$location,stateList,sensorTypes,networkNames,SITE){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{if($rootScope.thisPage="Site Search",$rootScope.activeMenu="sites",$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEvent=null!==$cookies.get("SessionEventName")&&void 0!==$cookies.get("SessionEventName")?$cookies.get("SessionEventName"):"All Events"}),$scope.states=stateList,$scope.senTypes=sensorTypes,$scope.netNames=networkNames,$scope.Chosen={},$scope.chosenStates=[],$scope.siteResponse=!1,$scope.checkboxModel={hwmOnly:0,senOnly:0,rdgOnly:0,opDefined:0},$scope.sort_by=function(newSortingOrder){$scope.sortingOrder==newSortingOrder&&($scope.reverse=!$scope.reverse),$scope.sortingOrder=newSortingOrder,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+newSortingOrder+" i").removeClass().addClass($scope.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")},void 0!==$rootScope.searchParams){var thisSearch=$rootScope.searchParams;$scope.sessionEvent=Number(thisSearch.event);for(var i=0;i<$scope.states.length;i++){for(var y=0;y<thisSearch.state.length;y++)thisSearch.state[y]==$scope.states[i].state_abbrev?($scope.states[i].selected=!0,y=thisSearch.state.length):$scope.states[i].selected=!1;0===thisSearch.state.length&&($scope.states[i].selected=!1)}$scope.chosenStates=thisSearch.state,$scope.Chosen.sensor=thisSearch.SensorType,$scope.Chosen.network=thisSearch.NetworkName,$scope.Chosen.survey=thisSearch.HWMSurveyed,$scope.checkboxModel.hwmOnly=thisSearch.HWMOnly,$scope.checkboxModel.senOnly=thisSearch.SensorOnly,$scope.checkboxModel.rdgOnly=thisSearch.RDGOnly,$scope.checkboxModel.opDefined=thisSearch.OPDefined,SITE.getFilteredSites({Event:$scope.sessionEvent,State:$scope.chosenStates.join(),SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined},function(response){$scope.siteList=response,$scope.siteResponse=!0,$rootScope.stateIsLoading.showLoading=!1},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,alert("Error: "+errorResponse.statusText)})}$scope.searchSites=function(){$rootScope.stateIsLoading.showLoading=!0;var stateString=$scope.chosenStates.join();$scope.siteResponse=!1,$scope.siteList=[];var evID=null!==$cookies.get("SessionEventID")&&void 0!==$cookies.get("SessionEventID")?$cookies.get("SessionEventID"):0;$rootScope.searchParams={event:evID,state:$scope.chosenStates,SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined},SITE.getFilteredSites({Event:evID,State:stateString,SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined},function(response){$scope.siteList=response,$scope.siteResponse=!0,$rootScope.stateIsLoading.showLoading=!1},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,alert("Error: "+errorResponse.statusText)})},$scope.stateClick=function(data){if(data.selected===!0&&$scope.chosenStates.push(data.state_abbrev),data.selected===!1){var ind=$scope.chosenStates.indexOf(data.state_abbrev);ind>=0&&$scope.chosenStates.splice(ind,1)}},$scope.clearFilters=function(){$scope.checkboxModel={hwmOnly:0,senOnly:0,rdgOnly:0,opDefined:0},$scope.Chosen={},$scope.chosenStates=[],angular.forEach($scope.states,function(st){st.selected=!1})}}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("siteModalCtrl",["$scope","$rootScope","$cookies","$q","$location","$state","$http","$sce","$timeout","$uibModal","$uibModalInstance","$filter","leafletMarkerEvents","allDropDownParts","fileTypes","agencyList","latlong","thisSiteStuff","allMembers","SITE","SITE_HOUSING","Site_Files","MEMBER","INSTRUMENT","INSTRUMENT_STATUS","LANDOWNER_CONTACT","GEOCODE","FILE_STAMP","FILE","SOURCE","SERVER_URL",function($scope,$rootScope,$cookies,$q,$location,$state,$http,$sce,$timeout,$uibModal,$uibModalInstance,$filter,leafletMarkerEvents,allDropDownParts,fileTypes,agencyList,latlong,thisSiteStuff,allMembers,SITE,SITE_HOUSING,Site_Files,MEMBER,INSTRUMENT,INSTRUMENT_STATUS,LANDOWNER_CONTACT,GEOCODE,FILE_STAMP,FILE,SOURCE,SERVER_URL){$scope.HorizontalDatumList=allDropDownParts[0],$scope.HorCollMethodList=allDropDownParts[1],$scope.StateList=allDropDownParts[2],$scope.AllCountyList=allDropDownParts[3],$scope.stateCountyList=[],$scope.DMS={},$scope.allHousingTypeList=allDropDownParts[4],$scope.DepPriorityList=allDropDownParts[5],$scope.NetNameList=allDropDownParts[6],$scope.NetTypeList=allDropDownParts[7],$scope.ProposedSens=allDropDownParts[8],$scope.SensorDeployment=allDropDownParts[9],$scope.userRole=$cookies.get("usersRole"),$scope.closeSites=0,$scope.showMap=!1,$scope.siteLat=0,$scope.siteLong=0,$scope.htmlDescriptionTip=$sce.trustAsHtml("Required by NWIS. Can be listed as <em>'unknown'</em> or <em>'Atlantic Ocean'</em>"),$scope.mapCenter={lat:$scope.siteLat,lng:$scope.siteLong,zoom:17},$scope.events={mapMarkers:{enable:leafletMarkerEvents.getAvailableEvents()}},$scope.mapMarkers=[];var icons={stn:{type:"div",iconSize:[10,10],className:"stnSiteIcon"},newSTN:{type:"div",iconSize:[10,10],className:"newSiteIcon",iconAnchor:[5,5]}},azimuth=function(deg,min,sec){var azi=0;return 0>deg?(azi=-1*deg+1*min/60+1*sec/3600,(-1*azi).toFixed(5)):(azi=1*deg+1*min/60+1*sec/3600,azi.toFixed(5))};$scope.updateAddressOnly=function(){void 0!==$scope.DMS.LADeg&&($scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)),delete $http.defaults.headers.common.Authorization,$http.defaults.headers.common.Accept="application/json",GEOCODE.getAddressParts({Longitude:$scope.aSite.longitude_dd,Latitude:$scope.aSite.latitude_dd},function(response){if(response.result.geographies.Counties.length>0){var stateFIPS=response.result.geographies.Counties[0].STATE,countyName=response.result.geographies.Counties[0].NAME,thisStateID=$scope.AllCountyList.filter(function(c){return c.state_fip==stateFIPS})[0].state_id,thisState=$scope.StateList.filter(function(s){return s.state_id==thisStateID})[0];void 0!==thisState?($scope.aSite.state=thisState.state_abbrev,$scope.stateCountyList=$scope.AllCountyList.filter(function(c){return c.state_id==thisState.state_id}),$scope.aSite.county=countyName):($rootScope.stateIsLoading.showLoading=!1,toastr.error("The Latitude/Longitude did not return a recognized state. Please choose one from the dropdown."))}else $rootScope.stateIsLoading.showLoading=!1,toastr.error("No location information came back from that lat/long")},function(errorResponse){toastr.error("Error getting location information.")})},$scope.$on("leafletDirectiveMarker.dragend",function(event,args){var dragendLocation=args.model;$scope.aSite.latitude_dd=parseFloat(dragendLocation.lat.toFixed(6)),$scope.aSite.longitude_dd=parseFloat(dragendLocation.lng.toFixed(6));var latDMS=deg_to_dms($scope.aSite.latitude_dd).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.aSite.longitude_dd),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2],$scope.updateAddressOnly()}),$scope.getAddress=function(){if(void 0!==$scope.DMS.LADeg&&($scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)),void 0===$scope.aSite.latitude_dd||void 0===$scope.aSite.longitude_dd||isNaN($scope.aSite.latitude_dd)||isNaN($scope.aSite.longitude_dd)){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please provide a Latitude and Longitude before clicking Verify Location</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}else $scope.mapCenter={lat:parseFloat($scope.aSite.latitude_dd),lng:parseFloat($scope.aSite.longitude_dd),zoom:18},$scope.mapMarkers=[],$rootScope.stateIsLoading.showLoading=!0,$http.defaults.headers.common.Accept="application/json",delete $http.defaults.headers.common.Authorization,GEOCODE.getAddressParts({Longitude:$scope.aSite.longitude_dd,Latitude:$scope.aSite.latitude_dd},function(response){if(response.result.geographies.Counties.length>0){var stateFIPS=response.result.geographies.Counties[0].STATE,countyName=response.result.geographies.Counties[0].NAME,thisStateID=$scope.AllCountyList.filter(function(c){return c.state_fip==stateFIPS})[0].state_id,thisState=$scope.StateList.filter(function(s){return s.state_id==thisStateID})[0];void 0!==thisState?($scope.aSite.state=thisState.state_abbrev,$scope.stateCountyList=$scope.AllCountyList.filter(function(c){return c.state_id==thisState.state_id}),$scope.aSite.county=countyName,SITE.getProximitySites({Latitude:$scope.aSite.latitude_dd,Longitude:$scope.aSite.longitude_dd,Buffer:5e-4},function(response){if($scope.closeSites=response,$scope.closeSites.length>0)for(var i=0;i<$scope.closeSites.length;i++){var a=$scope.closeSites[i];$scope.mapMarkers.push({lat:a.latitude_dd,lng:a.longitude_dd,site_id:a.site_id,site_no:a.site_no,icon:icons.stn,message:a.site_no,focus:!1})}$scope.mapMarkers.push({lat:parseFloat($scope.aSite.latitude_dd),lng:parseFloat($scope.aSite.longitude_dd),icon:icons.newSTN,message:"New draggable STN site",focus:!1,draggable:!0}),$scope.showMap=!0,$rootScope.stateIsLoading.showLoading=!1},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error: "+errorResponse.statusText)}).$promise):($rootScope.stateIsLoading.showLoading=!1,toastr.error("The Latitude/Longitude did not return a recognized state. Please choose one from the dropdown."))}else $rootScope.stateIsLoading.showLoading=!1,toastr.error("Error getting address location.")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},$scope.houseDirty=!1,$scope.netTypeDirty=!1,$scope.siteHouseTypesTable=[],$scope.aSite={},void 0!==latlong&&($scope.aSite.latitude_dd=parseFloat(latlong[0].toFixed(6)),$scope.aSite.longitude_dd=parseFloat(latlong[1].toFixed(6)),$scope.aSite.hdatum_id=4,$scope.aSite.hcollect_method_id=4,$scope.getAddress()),$scope.aSite.decDegORdms="dd",$scope.originalSiteHousings=[],$scope.checked="",$scope.checkedName="Not Defined",$scope.landowner={},$scope.addLandowner=!1,$scope.disableSensorParts=!1,$scope.showSiteHouseTable=!1,$scope.siteHouseTypesTable=[],$scope.siteHousesModel={},$scope.siteHousesToRemove=[],$scope.NetworkNAMEToAdd=[],$scope.NetworkNAMEToRemove=[],$scope.NetworkTYPEToAdd=[],$scope.NetworkTYPEToRemove=[],$scope.siteNetworkNames=[],$scope.siteNetworkTypes=[],$scope.serverURL=SERVER_URL,$scope.fileTypeList=fileTypes.filter(function(ft){return"Photo"===ft.filetype||"Historic Citation"===ft.filetype||"Field Sheets"===ft.filetype||"Level Notes"===ft.filetype||"Site Sketch"===ft.filetype||"Other"===ft.filetype||"Link"===ft.filetype||"Sketch"===ft.filetype||"Landowner Permission Form"===ft.filetype}),$scope.allSFiles=Site_Files.getAllSiteFiles(),$scope.SITEFiles=void 0!==thisSiteStuff?$scope.allSFiles.filter(function(sf){return!(sf.site_id!=thisSiteStuff[0].site_id||void 0!==sf.hwm_id&&0!==sf.hwm_id||void 0!==sf.instrument_id&&0!==sf.instrument_id||void 0!==sf.objective_point_id&&0!==sf.objective_point_id)}):[],$scope.siteImageFiles=$scope.SITEFiles.filter(function(hf){return 1===hf.filetype_id}),$scope.showFileForm=!1,$scope.stamp=FILE_STAMP.getStamp(),$scope.fileItemExists=!0,$scope.saveFileUpload=function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.sFileIsUploading=!0;var fileParts={FileEntity:{file_id:$scope.aFile.file_id,name:$scope.aFile.name,description:$scope.aFile.description,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,file_date:$scope.aFile.file_date,site_id:$scope.aFile.site_id,filetype_id:$scope.aFile.filetype_id,source_id:$scope.aFile.source_id,path:$scope.aFile.path,photo_date:$scope.aFile.photo_date,is_nwis:$scope.aFile.is_nwis},File:void 0!==$scope.aFile.File1?$scope.aFile.File1:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),FILE_STAMP.setStamp(),$scope.stamp=FILE_STAMP.getStamp(),$scope.isPhoto=$scope.aFile.File1.type.indexOf("image")>-1?!0:!1,$scope.aFile.name=fresponse.name,$scope.aFile.path=fresponse.path,void 0!==$scope.aFile.File1&&($scope.aFile.File=$scope.aFile.File1,$scope.aFile.File1=void 0),fresponse.fileBelongsTo="Site File",$scope.SITEFiles.splice($scope.existFileIndex,1),$scope.SITEFiles.push(fresponse),1===fresponse.filetype_id&&($scope.siteImageFiles.splice($scope.existFileIndex,1),$scope.siteImageFiles.push(fresponse)),$scope.allSFiles[$scope.allSFileIndex]=fresponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.sFileIsUploading=!1,$scope.fileItemExists=!0},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})},$scope.showFile=function(file){if($scope.fileTypes=$scope.fileTypeList,$scope.agencies=agencyList,$scope.existFileIndex=-1,$scope.existIMGFileIndex=-1,$scope.allSFileIndex=-1,$scope.aFile={},$scope.aSource={},0!==file){if($scope.existFileIndex=$scope.SITEFiles.indexOf(file),$scope.allSFileIndex=$scope.allSFiles.indexOf(file),$scope.existIMGFileIndex=$scope.siteImageFiles.length>0?$scope.siteImageFiles.indexOf(file):-1,$scope.aFile=angular.copy(file),FILE.getFileItem({id:$scope.aFile.file_id}).$promise.then(function(response){$scope.fileItemExists=response.Length>0?!0:!1}),$scope.aFile.fileType=$scope.fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,void 0!==$scope.aFile.name){var fI=$scope.aFile.name.lastIndexOf("."),fileExt=$scope.aFile.name.substring(fI+1);$scope.isPhoto=fileExt.match(/(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)?!0:!1}$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),null!==file.source_id&&SOURCE.query({id:file.source_id}).$promise.then(function(s){$scope.aSource=s,$scope.aSource.FULLname=$scope.aSource.source_name,$scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name})}else $scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname,$scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name;$scope.showFileForm=!0,$scope.updateAgencyForCaption=function(){1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}},$scope.createFile=function(valid){if(valid){$scope.SITEfileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){if(8!==$scope.aFile.filetype_id){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,photo_date:$scope.aFile.photo_date,description:$scope.aFile.description,site_id:$scope.aSite.site_id,source_id:response.source_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Site File",$scope.SITEFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),1===fresponse.filetype_id&&$scope.siteImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.SITEfileIsUploading=!1},function(errorResponse){$scope.SITEfileIsUploading=!1,toastr.error("Error uploading file: "+errorResponse.statusText)})}else $scope.aFile.source_id=response.source_id,$scope.aFile.site_id=$scope.aSite.site_id,FILE.save($scope.aFile).$promise.then(function(fresponse){toastr.success("Link saved"),fresponse.fileBelongsTo="Site File",$scope.SITEFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.SITEfileIsUploading=!1},function(errorResponse){$scope.SITEfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.SITEfileIsUploading=!1,toastr.error("Error creating Source info: "+errorResponse.statusText)})}},$scope.saveFile=function(valid){if(valid){$scope.SITEfileIsUploading=!0;{$scope.aFile.fileBelongsTo}if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.aSource.source_id){var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){$scope.aFile.source_id=response.source_id,FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="Site File",$scope.SITEFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.SITEfileIsUploading=!1},function(errorResponse){$scope.SITEfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.SITEfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})}}},$scope.deleteFile=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.SITEFiles.splice($scope.existFileIndex,1),$scope.allSFiles.splice($scope.allSFileIndex,1),$scope.siteImageFiles.splice($scope.existIMGFileIndex,1),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelFile=function(){$scope.aFile={},$scope.aSource={},$scope.showFileForm=!1};var openLatModal=function(w){var latModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Latitude must be between 0 and 73.0</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});latModal.result.then(function(fieldFocus){"latlong"==w?$("#latitude_dd").focus():$("#LaDeg").focus()})},openLongModal=function(w){var longModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Longitude must be between -175.0 and -60.0</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});longModal.result.then(function(fieldFocus){"latlong"==w?$("#longitude_dd").focus():$("#LoDeg").focus()})};$scope.checkValue=function(d,direction){"dms"==d?("lat"==direction&&($scope.DMS.LADeg<0||$scope.DMS.LADeg>73||isNaN($scope.DMS.LADeg)&&void 0!==$scope.DMS.LADeg||isNaN($scope.DMS.LAMin)&&void 0!==$scope.DMS.LAMin||isNaN($scope.DMS.LASec)&&void 0!==$scope.DMS.LASec)&&(openLatModal("dms"),isNaN($scope.DMS.LADeg)&&($scope.DMS.LADeg=void 0),isNaN($scope.DMS.LAMin)&&($scope.DMS.LAMin=void 0),isNaN($scope.DMS.LASec)&&($scope.DMS.LASec=void 0)),"long"==direction&&($scope.DMS.LODeg<-175||$scope.DMS.LODeg>-60||isNaN($scope.DMS.LODeg)&&void 0!==$scope.DMS.LODeg||isNaN($scope.DMS.LOMin)&&void 0!==$scope.DMS.LOMin||isNaN($scope.DMS.LOSec)&&void 0!==$scope.DMS.LOSec)&&(openLongModal("dms"),isNaN($scope.DMS.LODeg)&&($scope.DMS.LODeg=void 0),isNaN($scope.DMS.LOMin)&&($scope.DMS.LOMin=void 0),isNaN($scope.DMS.LOSec)&&($scope.DMS.LOSec=void 0))):("lat"==direction&&($scope.aSite.latitude_dd<0||$scope.aSite.latitude_dd>73||isNaN($scope.aSite.latitude_dd))&&(openLatModal("latlong"),isNaN($scope.aSite.latitude_dd)&&($scope.aSite.latitude_dd=void 0)),"long"==direction&&($scope.aSite.longitude_dd<-175||$scope.aSite.longitude_dd>-60||isNaN($scope.aSite.longitude_dd))&&(openLongModal("latlong"),isNaN($scope.aSite.longitude_dd)&&($scope.aSite.longitude_dd=void 0)))};var deg_to_dms=function(deg){0>deg&&(deg=deg.toString(),deg=deg.substring(1));var d=Math.floor(deg),minfloat=60*(deg-d),m=Math.floor(minfloat),s=(60*(minfloat-m)).toFixed(3);return""+d+":"+m+":"+s};$scope.latLongChange=function(){if("dd"==$scope.aSite.decDegORdms)if(void 0!==$scope.DMS.LADeg&&void 0!==$scope.DMS.LAMin&&void 0!==$scope.DMS.LASec&&void 0!==$scope.DMS.LODeg&&void 0!==$scope.DMS.LOMin&&void 0!==$scope.DMS.LOSec)$scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec);else{var DMSModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all three inputs for conversion from DMS to Decimal Degrees to work.</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});DMSModal.result.then(function(){(void 0!==$scope.DMS.LADeg||void 0!==$scope.DMS.LAMin||void 0!==$scope.DMS.LASec)&&$("#LaDeg").focus(),(void 0!==$scope.DMS.LODeg||void 0!==$scope.DMS.LOMin||void 0!==$scope.DMS.LOSec)&&$("#LoDeg").focus(),$scope.aSite.decDegORdms="dms"})}else if(void 0!==$scope.aSite.latitude_dd){var latDMS=deg_to_dms($scope.aSite.latitude_dd).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.aSite.longitude_dd),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2]}},$scope.netTypeChg=function(nt){if(nt.selected){if($scope.NetworkTYPEToAdd.push(nt),
void 0!==$scope.aSite.site_id){var i=$scope.NetworkTYPEToRemove.map(function(e){return e.network_type_id}).indexOf(nt.network_type_id);i>=0&&$scope.NetworkTYPEToRemove.splice(i,1)}}else{var ind=$scope.NetworkTYPEToAdd.map(function(e){return e.network_type_id}).indexOf(nt.network_type_id);ind>=0&&$scope.NetworkTYPEToAdd.splice(ind,1),void 0!==$scope.aSite.site_id&&$scope.NetworkTYPEToRemove.push(nt)}},$scope.whichOne=function(n){if(n.selected){if($scope.NetworkNAMEToAdd.push(n),void 0!==$scope.aSite.site_id){var i=$scope.NetworkNAMEToRemove.map(function(e){return e.network_name_id}).indexOf(n.network_name_id);i>=0&&$scope.NetworkNAMEToRemove.splice(i,1)}}else{var ind=$scope.NetworkNAMEToAdd.map(function(e){return e.network_name_id}).indexOf(n.network_name_id);ind>=0&&$scope.NetworkNAMEToAdd.splice(ind,1),void 0!==$scope.aSite.site_id&&$scope.NetworkNAMEToRemove.push(n)}if("Not Defined"==n.name&&n.selected===!0){for(var nn=0;nn<$scope.NetNameList.length;nn++)"Not Defined"!=$scope.NetNameList[nn].name&&$scope.NetNameList[nn].selected===!0&&($scope.NetworkNAMEToRemove.push($scope.NetNameList[nn]),$scope.NetNameList[nn].selected=!1);$scope.checked="Not Defined"}"Not Defined"==n.name&&n.selected===!1&&($scope.checked="")},$scope.dimAction=function(){if(1==$scope.aSite.sensor_not_appropriate){$scope.disableSensorParts=!0;for(var x=0;x<$scope.ProposedSens.length;x++)$scope.ProposedSens[x].selected=!1;$scope.aSite.is_permanent_housing_installed="No"}else $scope.disableSensorParts=!1},$scope.useSiteAddress,$scope.useAddressforLO=function(){$scope.useSiteAddress?($scope.landowner.address=$scope.aSite.address,$scope.landowner.city=$scope.aSite.city,$scope.landowner.state=$scope.aSite.state,$scope.landowner.zip=$scope.aSite.zip):($scope.landowner.address="",$scope.landowner.city="",$scope.landowner.state="",$scope.landowner.zip="")},$scope.save=function(valid){valid&&($rootScope.stateIsLoading.showLoading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.addLandowner===!0?null!==$scope.aSite.landownercontact_id&&void 0!==$scope.aSite.landownercontact_id&&$scope.aSite.landownercontact_id>0?LANDOWNER_CONTACT.update({id:$scope.aSite.landownercontact_id},$scope.landowner).$promise.then(function(){putSiteAndParts()}):void 0!==$scope.landowner.fname||void 0!==$scope.landowner.lname||void 0!==$scope.landowner.title||void 0!==$scope.landowner.address||void 0!==$scope.landowner.city||void 0!==$scope.landowner.primaryphone?LANDOWNER_CONTACT.save($scope.landowner,function(response){$scope.aSite.landownercontact_id=response.landownercontactid,putSiteAndParts()},function(errorResponse){toastr.error("Error adding Landowner: "+errorResponse.statusText)}):putSiteAndParts():putSiteAndParts())};var putSiteAndParts=function(){void 0!==$scope.DMS.LADeg&&($scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec));var updateSite=angular.copy($scope.aSite);delete updateSite.Creator,delete updateSite.HorizontalCollectMethod,delete updateSite.HorizontalDatum,delete updateSite.PriorityName,delete updateSite.decDegORdms,SITE.update({id:$scope.aSite.site_id},updateSite,function(response){var RemovePromises=($q.defer(),[]),AddPromises=[];angular.forEach($scope.siteHousesToRemove,function(shID){var delSHProm=SITE_HOUSING["delete"]({id:shID}).$promise;RemovePromises.push(delSHProm)}),angular.forEach($scope.NetworkNAMEToRemove,function(nnL){var delNNProm=SITE.deleteSiteNetworkName({siteId:$scope.aSite.site_id,networkNameId:nnL.network_name_id}).$promise;RemovePromises.push(delNNProm)}),angular.forEach($scope.NetworkTYPEToRemove,function(ntL){var delNTProm=SITE.deleteSiteNetworkType({siteId:$scope.aSite.site_id,networkTypeId:ntL.network_type_id}).$promise;RemovePromises.push(delNTProm)}),$scope.houseDirty===!0&&angular.forEach($scope.siteHouseTypesTable,function(ht){var addHtProm;void 0!==ht.site_housing_id?addHtProm=SITE_HOUSING.update({id:ht.site_housing_id},ht).$promise:(ht.site_id=$scope.aSite.site_id,addHtProm=SITE_HOUSING.save(ht).$promise),AddPromises.push(addHtProm)}),angular.forEach($scope.NetworkNAMEToAdd,function(AnnL){$scope.siteNetworkNames.push(AnnL.name);var addNNProm=SITE.postSiteNetworkName({siteId:$scope.aSite.site_id,networkNameId:AnnL.network_name_id}).$promise;AddPromises.push(addNNProm)}),angular.forEach($scope.NetworkTYPEToAdd,function(AnTL){$scope.siteNetworkTypes.push(AnTL.network_type_name);var addNTProm=SITE.postSiteNetworkType({siteId:$scope.aSite.site_id,networkTypeId:AnTL.network_type_id}).$promise;AddPromises.push(addNTProm)}),$q.all(RemovePromises).then(function(){$q.all(AddPromises).then(function(response){$scope.siteNetworkNames=[],$scope.siteNetworkTypes=[],angular.forEach($scope.NetNameList,function(nn){nn.selected===!0&&$scope.siteNetworkNames.push(nn.name)}),angular.forEach($scope.NetTypeList,function(nt){nt.selected===!0&&$scope.siteNetworkTypes.push(nt.network_type_name)});var sendBack=[$scope.aSite,$scope.siteNetworkNames,$scope.siteNetworkTypes];$uibModalInstance.close(sendBack),$rootScope.stateIsLoading.showLoading=!1,toastr.success("Site updated")})["catch"](function(msg){console.error(msg)})})["catch"](function(msg){console.error(msg)})},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error updating Site: "+errorResponse.statusText)})},finishPOST=function(sID){var postPromises=($q.defer(),[]);angular.forEach($scope.siteHouseTypesTable,function(htype){htype.site_id=sID,delete htype.type_name;var hTPromise=SITE_HOUSING.save(htype).$promise;postPromises.push(hTPromise)}),angular.forEach($scope.NetNameList,function(nName){if(nName.selected===!0){var nNPromise=SITE.postSiteNetworkName({siteId:sID,networkNameId:nName.network_name_id}).$promise;postPromises.push(nNPromise)}}),angular.forEach($scope.NetTypeList,function(nType){if(nType.selected===!0){var nTPromise=SITE.postSiteNetworkType({siteId:sID,networkTypeId:nType.network_type_id}).$promise;postPromises.push(nTPromise)}}),$q.all(postPromises).then(function(response){$uibModalInstance.dismiss("cancel"),$rootScope.stateIsLoading.showLoading=!1,$timeout(function(){$state.go("site.dashboard",{id:sID})})})};$scope.create=function(valid){valid&&($rootScope.stateIsLoading.showLoading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",delete $scope.aSite.Creator,delete $scope.aSite.decDegORdms,$scope.addLandowner===!0&&(void 0!==$scope.landowner.fname||void 0!==$scope.landowner.lname||void 0!==$scope.landowner.title||void 0!==$scope.landowner.address||void 0!==$scope.landowner.city||void 0!==$scope.landowner.primaryphone)?LANDOWNER_CONTACT.save($scope.landowner,function(response){$scope.aSite.landownercontact_id=response.landownercontactid,postSiteAndParts()},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error posting landowner: "+errorResponse.statusText)}):postSiteAndParts())};var postSiteAndParts=function(){var createdSiteID=0;void 0!==$scope.DMS.LADeg&&($scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)),SITE.save($scope.aSite,function(response){if(createdSiteID=response.site_id,$scope.disableSensorParts===!1){var selectedProposedSensors=$scope.ProposedSens.filter(function(p){return p.selected===!0});selectedProposedSensors.length>0?angular.forEach(selectedProposedSensors,function(propSens,index){var sID=0;angular.forEach($scope.SensorDeployment,function(sdt){for(var x=0;x<sdt.deploymenttypes.length;x++)sdt.deploymenttypes[x].deployment_type_id==propSens.deployment_type_id&&(sID=sdt.sensor_type_id)});var sensorTypeID=sID,inst={deployment_type_id:propSens.deployment_type_id,site_id:createdSiteID,sensor_type_id:sensorTypeID};INSTRUMENT.save(inst).$promise.then(function(insResponse){var instStat={instrument_id:insResponse.instrument_id,status_type_id:4,member_id:$scope.aSite.member_id,time_stamp:new Date,time_zone:"UTC"};INSTRUMENT_STATUS.save(instStat).$promise.then(function(){index==selectedProposedSensors.length-1&&finishPOST(createdSiteID)},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error adding proposed Sensor: "+errorResponse.statusText)})},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error adding proposed Sensor: "+errorResponse.statusText)})}):finishPOST(createdSiteID)}else finishPOST(createdSiteID)},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error creating site: "+errorResponse.statusText)})};if(void 0!==thisSiteStuff){if($scope.aSite=angular.copy(thisSiteStuff[0]),$scope.aSite.hcollect_method_id<=0&&($scope.aSite.hcollect_method_id=null),$scope.aSite.sensor_not_appropriate>0){$scope.disableSensorParts=!0;for(var x=0;x<$scope.ProposedSens.length;x++)$scope.ProposedSens[x].selected=!1;$scope.aSite.is_permanent_housing_installed="No"}var thisState=$scope.StateList.filter(function(s){return s.state_abbrev==$scope.aSite.state})[0];if($scope.stateCountyList=$scope.AllCountyList.filter(function(c){return c.state_id==thisState.state_id}),thisSiteStuff[1].length>0){$scope.originalSiteHousings=thisSiteStuff[1],$scope.showSiteHouseTable=!0,$scope.siteHouseTypesTable=thisSiteStuff[2],$scope.landowner=thisSiteStuff[5],$scope.addLandowner=void 0!==$scope.landowner.fname||void 0!==$scope.landowner.lname||void 0!==$scope.landowner.address||void 0!==$scope.landowner.primaryphone?!0:!1;for(var ht=0;ht<$scope.allHousingTypeList.length;ht++){for(var y=0;y<$scope.originalSiteHousings.length;y++)$scope.originalSiteHousings[y].housing_type_id==$scope.allHousingTypeList[ht].housing_type_id?($scope.allHousingTypeList[ht].selected=!0,y=$scope.originalSiteHousings.length):$scope.allHousingTypeList[ht].selected=!1;0===$scope.originalSiteHousings.length&&($scope.allHousingTypeList[ht].selected=!1)}}if(thisSiteStuff[3].length>0){for(var projNNames=angular.copy(thisSiteStuff[3]),a=0;a<$scope.NetNameList.length;a++){for(var e=0;e<projNNames.length;e++)projNNames[e].network_name_id==$scope.NetNameList[a].network_name_id?($scope.NetNameList[a].selected=!0,e=projNNames.length):$scope.NetNameList[a].selected=!1;0===projNNames.length&&($scope.NetNameList[a].selected=!1)}$scope.NetNameList[0].selected===!0&&($scope.checked="Not Defined")}if(thisSiteStuff[4].length>0)for(var projNType=angular.copy(thisSiteStuff[4]),ni=0;ni<$scope.NetTypeList.length;ni++){for(var ny=0;ny<projNType.length;ny++)projNType[ny].network_type_id==$scope.NetTypeList[ni].network_type_id?($scope.NetTypeList[ni].selected=!0,ny=projNType.length):$scope.NetTypeList[ni].selected=!1;0===projNType.length&&($scope.NetTypeList[ni].selected=!1)}$scope.s={sOpen:!1,sFileOpen:!1}}else $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.query({id:$cookies.get("mID")},function(response){$scope.aSite.Creator=response.fname+" "+response.lname,$scope.aSite.member_id=response.member_id,$scope.aSite.is_permanent_housing_installed="No",$scope.aSite.access_granted="Not Needed"},function(errorResponse){toastr.error("Error getting Member info: "+errorResponse.statusText)}),$scope.s={sOpen:!0};$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.HouseTypeClick=function(ht){if($scope.houseDirty=!0,ht.selected===!0){var houseT={type_name:ht.type_name,housing_type_id:ht.housing_type_id,length:ht.length,material:ht.material,notes:ht.notes,amount:1};$scope.siteHouseTypesTable.push(houseT),$scope.showSiteHouseTable=!0}if(ht.selected===!1){if(void 0!==$scope.aSite.site_id){var sH_ID=$scope.siteHouseTypesTable.filter(function(h){return h.type_name==ht.type_name})[0].site_housing_id;$scope.siteHousesToRemove.push(sH_ID)}var i=$scope.siteHouseTypesTable.indexOf($scope.siteHouseTypesTable.filter(function(h){return h.type_name==ht.type_name})[0]);$scope.siteHouseTypesTable.splice(i,1),0===$scope.siteHouseTypesTable.length&&($scope.showSiteHouseTable=!1)}},$scope.showLandOwnerPart=function(){$scope.addLandowner=!0},$scope.updateCountyList=function(s){var thisState=$scope.StateList.filter(function(st){return st.state_abbrev==s})[0];$scope.stateCountyList=$scope.AllCountyList.filter(function(c){return c.state_id==thisState.state_id})},$scope.cancel=function(){$rootScope.stateIsLoading.showLoading=!1,$uibModalInstance.dismiss("cancel")},$scope.deleteSite=function(){var thisSite=$scope.aSite,dSiteModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Delete Site</h3></div><div class="modal-body"><p>Are you sure you want to delete site {{siteNo}}?</p></div><div class="modal-footer"><button type="button" class="btn btn-danger" ng-click="deleteIt()">Delete</button><button type="button" class="btn btn-primary" ng-click="ok()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.siteNo=thisSite.site_no,$scope.ok=function(){$uibModalInstance.dismiss("cancel")},$scope.deleteIt=function(){$uibModalInstance.close(thisSite)}}],size:"sm"});dSiteModal.result.then(function(s){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),SITE["delete"]({id:s.site_id}).$promise.then(function(){toastr.success("Site Removed");var sendBack="Deleted";$uibModalInstance.close(sendBack)},function(errorResponse){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>{{message}}</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-click="ok()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.message=errorResponse.headers("usgswim-messages"),$scope.ok=function(){$uibModalInstance.dismiss("cancel")}}],size:"sm"})})},function(){})},$rootScope.stateIsLoading.showLoading=!1}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("siteMapCtrl",["$scope","$rootScope","$cookies","$location","$state","SITE","siteHWMs","deploymentTypes","baroSensors","metSensors","rdgSensors","stormSensors","waveSensors","presTempSensors","thermSensors","webcamSensors","raingageSensors","leafletData","aSite",function($scope,$rootScope,$cookies,$location,$state,SITE,siteHWMs,deploymentTypes,baroSensors,metSensors,rdgSensors,stormSensors,waveSensors,presTempSensors,thermSensors,webcamSensors,raingageSensors,leafletData,aSite){if(void 0!==aSite){$scope.mapStuff="here's the map accordion content",$scope.thisSite=aSite,$scope.allSiteHWMs=siteHWMs,$scope.allSiteBaroSensors=baroSensors.filter(function(bs){return bs.site_id==aSite.site_id}),$scope.allSiteMetSensors=metSensors.filter(function(bs){return bs.site_id==aSite.site_id}),$scope.allSiteRDGSensors=rdgSensors.filter(function(bs){return bs.site_id==aSite.site_id}),$scope.allSiteStormSensors=stormSensors.filter(function(bs){return bs.site_id==aSite.site_id}),$scope.allSiteWaveSensors=waveSensors.filter(function(bs){return bs.site_id==aSite.site_id}),$scope.allSitePresTempSensors=presTempSensors.filter(function(bs){return bs.site_id==aSite.site_id}),$scope.allSiteThermSensors=thermSensors.filter(function(bs){return bs.site_id==aSite.site_id}),$scope.allSiteWebSensors=webcamSensors.filter(function(bs){return bs.site_id==aSite.site_id}),$scope.allSiteRainSensors=raingageSensors.filter(function(bs){return bs.site_id==aSite.site_id}),$scope.allDeploymentTypes=deploymentTypes,$scope.paths={},$scope.markers=[],$scope.$watch(function(){return $cookies.get("SessionEventID")},function(newValue){if($scope.markers=[],getProximitySites(),$scope.markers.push({layer:"stnSites",message:"<div><b>This Site Name:</b> "+$scope.thisSite.site_no+"</div>",lat:$scope.thisSite.latitude_dd,lng:$scope.thisSite.longitude_dd,icon:icons.selected,title:"Site",eventID:0}),void 0!==newValue){for(var h=0;h<$scope.allSiteHWMs.length;h++){var eachHWM=$scope.allSiteHWMs[h];eachHWM.event_id==newValue&&$scope.markers.push({layer:"stnSites",message:"<div><b>HWM:</b> "+eachHWM.hwm_label+"</div>",lat:eachHWM.latitude_dd,lng:eachHWM.longitude_dd,icon:icons.hwmIcon,title:"HWM",eventID:eachHWM.event_id})}addSensors(newValue)}else{for(var noEventH=0;noEventH<$scope.allSiteHWMs.length;noEventH++){var eachnoEHWM=$scope.allSiteHWMs[noEventH];$scope.markers.push({layer:"stnSites",message:"<div><b>HWM:</b> "+eachnoEHWM.hwm_label+"</div>",lat:eachnoEHWM.latitude_dd,lng:eachnoEHWM.longitude_dd,icon:icons.hwmIcon,title:"HWM",eventID:eachnoEHWM.event_id})}addSensors(0)}});var addSensors=function(eventID){if(eventID>0){for(var bs=0;bs<$scope.allSiteBaroSensors.length;bs++){var bSensor=$scope.allSiteBaroSensors[bs];bSensor.event_id==eventID&&$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==bSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+bSensor.status+"</div>",lat:bSensor.latitude_dd,lng:bSensor.longitude_dd,icon:icons.baroIcon,title:"Baro Sensor",eventID:bSensor.event_id})}for(var ms=0;ms<$scope.allSiteMetSensors.length;ms++){var mSensor=$scope.allSiteMetSensors[ms];mSensor.event_id==eventID&&$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==mSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+mSensor.status+"</div>",lat:mSensor.latitude_dd,lng:mSensor.longitude_dd,icon:icons.metIcon,title:"Met Sensor",eventID:mSensor.event_id})}for(var rs=0;rs<$scope.allSiteRDGSensors.length;rs++){var rSensor=$scope.allSiteRDGSensors[rs];rSensor.event_id==eventID&&$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==rSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+rSensor.status+"</div>",lat:rSensor.latitude_dd,lng:rSensor.longitude_dd,icon:icons.rdgIcon,title:"RDG Sensor",eventID:rSensor.event_id})}for(var ss=0;ss<$scope.allSiteStormSensors.length;ss++){var sSensor=$scope.allSiteStormSensors[ss];sSensor.event_id==eventID&&$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==sSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+sSensor.status+"</div>",lat:sSensor.latitude_dd,lng:sSensor.longitude_dd,icon:icons.stormIcon,title:"Stormtide Sensor",eventID:sSensor.event_id})}for(var ws=0;ws<$scope.allSiteWaveSensors.length;ws++){var wSensor=$scope.allSiteWaveSensors[ws];wSensor.event_id==eventID&&$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==wSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+wSensor.status+"</div>",lat:wSensor.latitude_dd,lng:wSensor.longitude_dd,icon:icons.waveIcon,title:"Waveheight Sensor",eventID:wSensor.event_id})}for(var ps=0;ps<$scope.allSitePresTempSensors.length;ps++){var pSensor=$scope.allSitePresTempSensors[ps];pSensor.event_id==eventID&&$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==pSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+pSensor.status+"</div>",lat:pSensor.latitude_dd,lng:pSensor.longitude_dd,icon:icons.pressureIcon,title:"PressureTemp Sensor",eventID:pSensor.event_id})}for(var ts=0;ts<$scope.allSiteThermSensors.length;ts++){var tSensor=$scope.allSiteThermSensors[ts];tSensor.event_id==eventID&&$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==tSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+tSensor.status+"</div>",lat:tSensor.latitude_dd,lng:tSensor.longitude_dd,icon:icons.thermIcon,title:"Thermometer Sensor",eventID:tSensor.event_id})}for(var webs=0;webs<$scope.allSiteWebSensors.length;webs++){var webSensor=$scope.allSiteWebSensors[webs];webSensor.event_id==eventID&&$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==webSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+webSensor.status+"</div>",lat:webSensor.latitude_dd,lng:webSensor.longitude_dd,icon:icons.webcamIcon,title:"Webcam Sensor",eventID:webSensor.event_id})}for(var rains=0;rains<$scope.allSiteRainSensors.length;rains++){var rainSensor=$scope.allSiteRainSensors[rains];rainSensor.event_id==eventID&&$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==rainSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+rainSensor.status+"</div>",lat:rainSensor.latitude_dd,lng:rainSensor.longitude_dd,icon:icons.raingageIcon,title:"Raingage Sensor",eventID:rainSensor.event_id})}}else{for(var noEbs=0;noEbs<$scope.allSiteBaroSensors.length;noEbs++){var noEbSensor=$scope.allSiteBaroSensors[noEbs];$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==noEbSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+noEbSensor.status+"</div>",lat:noEbSensor.latitude_dd,lng:noEbSensor.longitude_dd,icon:icons.baroIcon,title:"Baro Sensor",eventID:noEbSensor.event_id})}for(var noEms=0;noEms<$scope.allSiteMetSensors.length;noEms++){var noEmSensor=$scope.allSiteMetSensors[noEms];$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==noEmSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+noEmSensor.status+"</div>",lat:noEmSensor.latitude_dd,lng:noEmSensor.longitude_dd,icon:icons.metIcon,title:"Met Sensor",eventID:noEmSensor.event_id})}for(var noErs=0;noErs<$scope.allSiteRDGSensors.length;noErs++){var noErSensor=$scope.allSiteRDGSensors[noErs];$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==noErSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+noErSensor.status+"</div>",lat:noErSensor.latitude_dd,lng:noErSensor.longitude_dd,icon:icons.rdgIcon,title:"RDG Sensor",eventID:noErSensor.event_id})}for(var noEss=0;noEss<$scope.allSiteStormSensors.length;noEss++){var noEsSensor=$scope.allSiteStormSensors[noEss];$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==noEsSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+noEsSensor.status+"</div>",lat:noEsSensor.latitude_dd,lng:noEsSensor.longitude_dd,icon:icons.stormIcon,title:"Stormtide Sensor",eventID:noEsSensor.event_id})}for(var noEws=0;noEws<$scope.allSiteWaveSensors.length;noEws++){var noEwSensor=$scope.allSiteWaveSensors[noEws];$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==noEwSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+noEwSensor.status+"</div>",lat:noEwSensor.latitude_dd,lng:noEwSensor.longitude_dd,icon:icons.waveIcon,title:"Waveheight Sensor",eventID:noEwSensor.event_id})}for(var noEps=0;noEps<$scope.allSitePresTempSensors.length;noEps++){var noEpSensor=$scope.allSitePresTempSensors[noEps];$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==noEpSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+noEpSensor.status+"</div>",lat:noEpSensor.latitude_dd,lng:noEpSensor.longitude_dd,icon:icons.pressureIcon,title:"PressureTemp Sensor",eventID:noEpSensor.event_id})}for(var noEts=0;noEts<$scope.allSiteThermSensors.length;noEts++){var noEtSensor=$scope.allSiteThermSensors[noEts];$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==noEtSensor.deployment_type_id})[0].method+"Sensor Status:</b> "+noEtSensor.status+"</div>",lat:noEtSensor.latitude_dd,lng:noEtSensor.longitude_dd,icon:icons.thermIcon,title:"Thermometer Sensor",eventID:noEtSensor.event_id})}for(var noEwebs=0;noEwebs<$scope.allSiteWebSensors.length;noEwebs++){var noEwebSensor=$scope.allSiteWebSensors[noEwebs];$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==noEwebSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+noEwebSensor.status+"</div>",lat:noEwebSensor.latitude_dd,lng:noEwebSensor.longitude_dd,icon:icons.webcamIcon,title:"Webcam Sensor",eventID:noEwebSensor.event_id})}for(var noErains=0;noErains<$scope.allSiteRainSensors.length;noErains++){var noErainSensor=$scope.allSiteRainSensors[noErains];$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==noErainSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+noErainSensor.status+"</div>",lat:noErainSensor.latitude_dd,lng:noErainSensor.longitude_dd,icon:icons.raingageIcon,title:"Raingage Sensor",eventID:noErainSensor.event_id})}}},icons={stn:{type:"div",iconSize:[10,10],className:"stnSiteIcon"},selected:{type:"div",iconSize:[12,12],className:"selectedIcon"},hwmIcon:{type:"div",iconSize:[16,20],className:"stnHWMIcon"},baroIcon:{type:"div",iconSize:[16,20],className:"stnBaroSensorIcon"},metIcon:{type:"div",iconSize:[20,20],className:"stnMetSensorIcon"},rdgIcon:{type:"div",iconSize:[22,20],className:"stnRDGSensorIcon"},stormIcon:{type:"div",iconSize:[20,20],className:"stnStormSensorIcon"},waveIcon:{type:"div",iconSize:[20,20],className:"stnWaveSensorIcon"},pressureIcon:{type:"div",iconSize:[20,20],className:"stnPressureSensorIcon"},thermIcon:{type:"div",iconSize:[16,22],className:"stnThermSensorIcon"},webcamIcon:{type:"div",iconSize:[20,20],className:"stnWebcamSensorIcon"},raingageIcon:{type:"div",iconSize:[20,20],className:"stnRaingageSensorIcon"}};$scope.pathsObj={circleMarker:{type:"circleMarker",radius:20,weight:3,color:"#000099",latlngs:{}}};var addShape=function(){$scope.paths={},$scope.pathsObj.circleMarker.latlngs={lat:$scope.thisSite.latitude_dd,lng:$scope.thisSite.longitude_dd},$scope.paths.circleMarker=$scope.pathsObj.circleMarker};addShape(),angular.extend($scope,{mapCenter:{lat:$scope.thisSite.latitude_dd,lng:$scope.thisSite.longitude_dd,zoom:16,minZoom:16},markers:$scope.markers,markersLatLngArray:[],layers:{baselayers:{topo:{name:"World Topographic",type:"agsBase",layer:"Topographic",visible:!1}},overlays:{stnSites:{type:"markercluster",name:"STN Sites",visible:!0}}}});var getProximitySites=function(){SITE.getProximitySites({Latitude:$scope.thisSite.latitude_dd,Longitude:$scope.thisSite.longitude_dd,Buffer:.05},function(response){if($scope.closeSites=response,$scope.closeSites.length>0)for(var i=0;i<$scope.closeSites.length;i++){var a=$scope.closeSites[i];a.site_id!==$scope.thisSite.site_id&&$scope.markers.push({layer:"stnSites",message:"<div><b>Nearby Site Name:</b> "+a.site_no+"</div>",lat:a.latitude_dd,lng:a.longitude_dd,icon:icons.stn})}},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})}}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("siteCtrl",["$scope","$state","$rootScope","$cookies","$location","$http","$uibModal","$filter","thisSite","latlong","thisSiteNetworkNames","thisSiteNetworkTypes","thisSiteHousings","SITE","MEMBER","FILE_TYPE","AGENCY","allHorDatums","allHorCollMethods","allStates","allCounties","allDeployPriorities","allHousingTypes","allNetworkNames","allNetworkTypes","allDeployTypes","allSensorTypes",function($scope,$state,$rootScope,$cookies,$location,$http,$uibModal,$filter,thisSite,latlong,thisSiteNetworkNames,thisSiteNetworkTypes,thisSiteHousings,SITE,MEMBER,FILE_TYPE,AGENCY,allHorDatums,allHorCollMethods,allStates,allCounties,allDeployPriorities,allHousingTypes,allNetworkNames,allNetworkTypes,allDeployTypes,allSensorTypes){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else if($rootScope.thisPage="Site Dashboard",$scope.aSite={},$scope.status={mapOpen:!1,siteOpen:!0,opOpen:!1,sensorOpen:!1,hwmOpen:!1,filesOpen:!1,peakOpen:!1},$scope.thisSiteHouseTypeModel=[],$scope.openSiteCreate=function(){$rootScope.stateIsLoading.showLoading=!0;var dropdownParts=[allHorDatums,allHorCollMethods,allStates,allCounties,allHousingTypes,allDeployPriorities,allNetworkNames,allNetworkTypes,allDeployTypes,allSensorTypes],siteNNamesToPass=[];if(void 0!==$scope.siteNetworkNames)for(var aNN=0;aNN<allNetworkNames.length;aNN++){var i=$scope.siteNetworkNames.map(function(e){return e}).indexOf(allNetworkNames[aNN].name);i>-1&&siteNNamesToPass.push(allNetworkNames[aNN])}var siteNTypesToPass=[];if(void 0!==$scope.siteNetworkTypes)for(var aNT=0;aNT<allNetworkTypes.length;aNT++){var a=$scope.siteNetworkTypes.map(function(e){return e}).indexOf(allNetworkTypes[aNT].network_type_name);a>-1&&siteNTypesToPass.push(allNetworkTypes[aNT])}var modalInstance=$uibModal.open({templateUrl:"SITEmodal.html",controller:"siteModalCtrl",size:"lg",keyboard:!1,backdrop:"static",windowClass:"rep-dialog",resolve:{allDropDownParts:function(){return dropdownParts},thisSiteStuff:function(){if(void 0!==$scope.aSite.site_id){var origSiteHouses=void 0!==$scope.originalSiteHousings?$scope.originalSiteHousings:[],sHouseTypeModel=$scope.thisSiteHouseTypeModel.length>0?$scope.thisSiteHouseTypeModel:[],sNetNames=siteNNamesToPass.length>0?siteNNamesToPass:[],sNetTypes=siteNTypesToPass.length>0?siteNTypesToPass:[],lo=void 0!==$scope.landowner?$scope.landowner:{},siteRelatedStuff=[$scope.aSite,origSiteHouses,sHouseTypeModel,sNetNames,sNetTypes,lo];return siteRelatedStuff}},fileTypes:function(){return FILE_TYPE.getAll().$promise},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise},agencyList:function(){return AGENCY.getAll().$promise},latlong:function(){return void 0!==latlong?latlong:void 0}}});modalInstance.result.then(function(r){"Deleted"!==r?($scope.aSite=r[0],$scope.aSite.HorizontalDatum=$scope.aSite.hdatum_id>0?allHorDatums.filter(function(hd){return hd.datum_id==$scope.aSite.hdatum_id})[0].datum_name:"---",$scope.aSite.HorizontalCollectMethod=void 0!==$scope.aSite.hcollect_method_id&&$scope.aSite.hcollect_method_id>0?allHorCollMethods.filter(function(hc){return hc.hcollect_method_id==$scope.aSite.hcollect_method_id})[0].hcollect_method:"---",$scope.aSite.PriorityName=void 0!==$scope.aSite.priority_id&&$scope.aSite.priority_id>0?allDeployPriorities.filter(function(dp){return dp.priority_id==$scope.aSite.priority_id})[0].priority_name:"---",$scope.siteNetworkNames=r[1],$scope.siteNetworkTypes=r[2]):($scope.aSite={},$state.go("map")),$rootScope.stateIsLoading.showLoading=!1})},void 0!==thisSite)if(void 0!==thisSite.site_id){if($scope.aSite=thisSite,$scope.aSite.decDegORdms="dd",$scope.aSite.HorizontalDatum=$scope.aSite.hdatum_id>0?allHorDatums.filter(function(hd){return hd.datum_id==$scope.aSite.hdatum_id})[0].datum_name:"---",$scope.aSite.HorizontalCollectMethod=void 0!==$scope.aSite.hcollect_method_id&&$scope.aSite.hcollect_method_id>0?allHorCollMethods.filter(function(hc){return hc.hcollect_method_id==$scope.aSite.hcollect_method_id})[0].hcollect_method:"---",$scope.aSite.PriorityName=void 0!==$scope.aSite.priority_id&&$scope.aSite.priority_id>0?allDeployPriorities.filter(function(dp){return dp.priority_id==$scope.aSite.priority_id})[0].priority_name:"---",thisSiteHousings.length>0){
$scope.originalSiteHousings=angular.copy(thisSiteHousings),$scope.showSiteHouseTable=!0;for(var z=0;z<$scope.originalSiteHousings.length;z++){var houseTypeName=allHousingTypes.filter(function(h){return h.housing_type_id==$scope.originalSiteHousings[z].housing_type_id})[0].type_name,houseT={type_name:houseTypeName,housing_type_id:$scope.originalSiteHousings[z].housing_type_id,site_housing_id:$scope.originalSiteHousings[z].site_housing_id,length:$scope.originalSiteHousings[z].length,material:$scope.originalSiteHousings[z].material,notes:$scope.originalSiteHousings[z].notes,amount:$scope.originalSiteHousings[z].amount};$scope.thisSiteHouseTypeModel.push(houseT)}}if($scope.siteNetworkNames=[],thisSiteNetworkNames.length>0)for(var a=0;a<thisSiteNetworkNames.length;a++){var nn=allNetworkNames.filter(function(n){return n.network_name_id==thisSiteNetworkNames[a].network_name_id})[0];$scope.siteNetworkNames.push(nn.name)}if($scope.siteNetworkTypes=[],thisSiteNetworkTypes.length>0)for(var b=0;b<thisSiteNetworkTypes.length;b++){var nt=allNetworkTypes.filter(function(nt){return nt.network_type_id==thisSiteNetworkTypes[b].network_type_id})[0];$scope.siteNetworkTypes.push(nt.network_type_name)}$scope.sensorNotAppr=void 0!==$scope.aSite.sensor_not_appropriate||$scope.aSite.sensor_not_appropriate>0?"Yes":"No",void 0!==$scope.aSite.member_id&&$scope.aSite.member_id>0?($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.query({id:$scope.aSite.member_id}).$promise.then(function(response){$scope.aSite.Creator=response.fname+" "+response.lname},function(error){$scope.aSite.Creator="Not recorded"}).$promise):$scope.aSite.Creator="Not recorded",null!==$scope.aSite.landownercontact_id&&void 0!==$scope.aSite.landownercontact_id&&$scope.aSite.landownercontact_id>0&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",SITE.getSiteLandOwner({id:$scope.aSite.site_id},function(response){$scope.landowner=response,$scope.addLandowner=!0},function(errorResponse){toastr.error("Error getting Landowner Information: "+errorResponse.statusText)}).$promise)}else toastr.error("This site does not exist"),$location.path("/Home").replace(),$scope.apply;else $scope.openSiteCreate()}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("quickCreateCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$uibModal","$filter","$sce","whichQuick","allHorDatums","allHorCollMethods","allStates","allCounties","allOPTypes","allVertDatums","allVertColMethods","allOPQualities","allHWMTypes","allHWMQualities","allMarkers","allEvents","allSensorTypes","allSensorBrands","allDeployTypes","allHousingTypes","SITE","OBJECTIVE_POINT","HWM","MEMBER","INSTRUMENT","INSTRUMENT_STATUS","OP_MEASURE","OP_CONTROL_IDENTIFIER","GEOCODE",function($scope,$rootScope,$cookies,$location,$state,$http,$uibModal,$filter,$sce,whichQuick,allHorDatums,allHorCollMethods,allStates,allCounties,allOPTypes,allVertDatums,allVertColMethods,allOPQualities,allHWMTypes,allHWMQualities,allMarkers,allEvents,allSensorTypes,allSensorBrands,allDeployTypes,allHousingTypes,SITE,OBJECTIVE_POINT,HWM,MEMBER,INSTRUMENT,INSTRUMENT_STATUS,OP_MEASURE,OP_CONTROL_IDENTIFIER,GEOCODE){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$scope.CreateWhat=whichQuick,$scope.htmlDescriptionTip=$sce.trustAsHtml("Required by NWIS. Can be listed as <em>'unknown'</em> or <em>'Atlantic Ocean'</em>"),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.query({id:$cookies.get("mID")}).$promise.then(function(response){$scope.loggedInMember=response}),$rootScope.thisPage="Quick"+whichQuick,$scope.quickForm={};var makeAdate=function(d){var aDate=new Date;""!==d&&void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};if($scope.decDegORdms={},$scope.EventName=$cookies.get("SessionEventName"),$scope.aSite={member_id:$cookies.get("mID")},$scope.aOP={date_established:makeAdate("")},$scope.status={siteOpen:!0,opOpen:!1,hwmOpen:!1},$scope.removeOPCarray=[],$scope.addedIdentifiers=[],$scope.showControlIDinput=!1,$scope.horDatumList=allHorDatums,$scope.horCollMethodList=allHorCollMethods,$scope.stateList=allStates,$scope.allCountyList=allCounties,$scope.stateCountyList=[],$scope.opTypeList=allOPTypes,$scope.vertDatumList=allVertDatums,$scope.vertCollMethodList=allVertColMethods,$scope.opQualList=allOPQualities,"HWM"==whichQuick&&($scope.aHWM={hwm_label:"hwm-1",hwm_environment:"Riverine",event_id:$cookies.get("SessionEventID"),bank:"N/A",flag_date:makeAdate(""),stillwater:0,flag_member_id:$cookies.get("mID")},$scope.hwmTypeList=allHWMTypes,$scope.hwmQualList=allHWMQualities,$scope.markerList=allMarkers),"Sensor"==whichQuick){var getTimeZoneStamp=function(dsent){var d,sendThis=[];d=void 0!==dsent?new Date(dsent):new Date;var offset=d.toString().substring(35),zone="";switch(offset.substr(0,3)){case"Cen":zone="CST";break;case"Eas":zone="EST";break;case"Mou":zone="MST";break;case"Pac":zone="PST"}return sendThis=[d,zone]};$scope.depTypeList=allDeployTypes,$scope.houseTypeList=allHousingTypes,$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.aSensor={event_id:$cookies.get("SessionEventID")},$scope.aSensStatus={status_type_id:1,member_id:$cookies.get("mID")},$scope.eventList=allEvents,$scope.sensorTypeList=allSensorTypes,$scope.sensorBrandList=allSensorBrands,$scope.IntervalType={type:"Seconds"};var DeptimeParts=getTimeZoneStamp();$scope.aSensStatus.time_stamp=DeptimeParts[0],$scope.aSensStatus.time_zone=DeptimeParts[1],$scope.getDepTypes=function(){$scope.filteredDeploymentTypes=[];var matchingSensDeplist=allSensorTypes.filter(function(sd){return sd.sensor_type_id==$scope.aSensor.sensor_type_id})[0];$scope.filteredDeploymentTypes=matchingSensDeplist.deploymenttypes,1==$scope.filteredDeploymentTypes.length&&($scope.aSensor.deployment_type_id=$scope.filteredDeploymentTypes[0].deployment_type_id)}}$scope.FTorMETER="ft",$scope.FTorCM="ft",$scope.addNewIdentifier=function(){$scope.addedIdentifiers.push({identifier:"",identifier_type:""}),$scope.showControlIDinput=!0};var dealWithTimeStampb4Send=function(){if("UTC"!=$scope.aSensStatus.time_zone){var utcDateTime=new Date($scope.aSensStatus.time_stamp).toUTCString();$scope.aSensStatus.time_stamp=utcDateTime,$scope.aSensStatus.time_zone="UTC"}else{var i=$scope.aSensStatus.time_stamp.toString().indexOf("GMT")+3;$scope.aSensStatus.time_stamp=$scope.aSensStatus.time_stamp.toString().substring(0,i)}};$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.decDegORdms.val="dd",$scope.DMS={};var azimuth=function(deg,min,sec){var azi=0;return 0>deg?(azi=-1*deg+1*min/60+1*sec/3600,(-1*azi).toFixed(5)):(azi=1*deg+1*min/60+1*sec/3600,azi.toFixed(5))},deg_to_dms=function(deg){0>deg&&(deg=deg.toString(),deg=deg.substring(1));var d=Math.floor(deg),minfloat=60*(deg-d),m=Math.floor(minfloat),s=(60*(minfloat-m)).toFixed(3);return""+d+":"+m+":"+s};$scope.latLongChange=function(){if("dd"==$scope.decDegORdms.val)if(void 0!==$scope.DMS.LADeg&&void 0!==$scope.DMS.LAMin&&void 0!==$scope.DMS.LASec&&void 0!==$scope.DMS.LODeg&&void 0!==$scope.DMS.LOMin&&void 0!==$scope.DMS.LOSec)$scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec);else{var DMSModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all three inputs for conversion from DMS to Decimal Degrees to work.</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});DMSModal.result.then(function(){(void 0!==$scope.DMS.LADeg||void 0!==$scope.DMS.LAMin||void 0!==$scope.DMS.LASec)&&$("#LaDeg").focus(),(void 0!==$scope.DMS.LODeg||void 0!==$scope.DMS.LOMin||void 0!==$scope.DMS.LOSec)&&$("#LoDeg").focus(),$scope.decDegORdms.val="dms"})}else if(void 0!==$scope.aSite.latitude_dd){var latDMS=deg_to_dms($scope.aSite.latitude_dd).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.aSite.longitude_dd),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2]}};var openLatModal=function(w){var latModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Latitude must be between 0 and 73.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});latModal.result.then(function(fieldFocus){"latlong"==w?$("#SITE_latitude_dd").focus():$("#LaDeg").focus()})},openLongModal=function(w){var longModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Longitude must be between -175.0 and -60.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});longModal.result.then(function(fieldFocus){"latlong"==w?$("#SITE_longitude_dd").focus():$("#LoDeg").focus()})};$scope.checkValue=function(d,direction){"dms"==d?("lat"==direction&&($scope.DMS.LADeg<0||$scope.DMS.LADeg>73||isNaN($scope.DMS.LADeg)&&void 0!==$scope.DMS.LADeg||isNaN($scope.DMS.LAMin)&&void 0!==$scope.DMS.LAMin||isNaN($scope.DMS.LASec)&&void 0!==$scope.DMS.LASec)&&(openLatModal("dms"),isNaN($scope.DMS.LADeg)&&($scope.DMS.LADeg=void 0),isNaN($scope.DMS.LAMin)&&($scope.DMS.LAMin=void 0),isNaN($scope.DMS.LASec)&&($scope.DMS.LASec=void 0)),"long"==direction&&($scope.DMS.LODeg<-175||$scope.DMS.LODeg>-60||isNaN($scope.DMS.LODeg)&&void 0!==$scope.DMS.LODeg||isNaN($scope.DMS.LOMin)&&void 0!==$scope.DMS.LOMin||isNaN($scope.DMS.LOSec)&&void 0!==$scope.DMS.LOSec)&&(openLongModal("dms"),isNaN($scope.DMS.LODeg)&&($scope.DMS.LODeg=void 0),isNaN($scope.DMS.LOMin)&&($scope.DMS.LOMin=void 0),isNaN($scope.DMS.LOSec)&&($scope.DMS.LOSec=void 0))):("lat"==direction&&($scope.aSite.latitude_dd<0||$scope.aSite.latitude_dd>73||isNaN($scope.aSite.latitude_dd))&&(openLatModal("latlong"),isNaN($scope.aSite.latitude_dd)&&($scope.aSite.latitude_dd=void 0)),"long"==direction&&($scope.aSite.longitude_dd<-175||$scope.aSite.longitude_dd>-60||isNaN($scope.aSite.longitude_dd))&&(openLongModal("latlong"),isNaN($scope.aSite.longitude_dd)&&($scope.aSite.longitude_dd=void 0)))},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.getAddress=function(){if(delete $scope.aSite.address,delete $scope.aSite.city,delete $scope.aSite.state,$scope.stateCountyList=[],delete $scope.aSite.zip,void 0!==$scope.DMS.LADeg&&($scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)),void 0===$scope.aSite.latitude_dd||void 0===$scope.aSite.longitude_dd||isNaN($scope.aSite.latitude_dd)||isNaN($scope.aSite.longitude_dd)){$rootScope.stateIsLoading.showLoading=!1;{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please provide a Latitude and Longitude before clicking Verify Location</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}}else $rootScope.stateIsLoading.showLoading=!0,delete $http.defaults.headers.common.Authorization,$http.defaults.headers.common.Accept="application/json",GEOCODE.getAddressParts({Longitude:$scope.aSite.longitude_dd,Latitude:$scope.aSite.latitude_dd},function(response){if(void 0!==response.result)if(response.result.geographies.Counties.length>0){var stateFIPS=response.result.geographies.Counties[0].STATE,countyName=response.result.geographies.Counties[0].NAME,thisStateID=$scope.allCountyList.filter(function(c){return c.state_fip==stateFIPS})[0].state_id,thisState=$scope.stateList.filter(function(s){return s.state_id==thisStateID})[0];void 0!==thisState?($scope.aSite.state=thisState.state_abbrev,$scope.stateCountyList=$scope.allCountyList.filter(function(c){return c.state_id==thisState.state_id}),$scope.aSite.county=countyName,$rootScope.stateIsLoading.showLoading=!1):($rootScope.stateIsLoading.showLoading=!1,toastr.error("The Latitude/Longitude did not return a recognized state. Please choose one from the dropdown."))}else $rootScope.stateIsLoading.showLoading=!1,toastr.error("No location information came back from that lat/long");else $rootScope.stateIsLoading.showLoading=!1,toastr.error("Error getting address. Choose State and County from dropdowns.")},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error getting address: "+errorResponse.statusText)})},$scope.chooseQuality=function(){if(""!==$scope.aHWM.hwm_uncertainty){var x=Number($scope.aHWM.hwm_uncertainty);$scope.aHWM.hwm_quality_id=$scope.hwmQualList.filter(function(h){return h.min_range<=x&&h.max_range>=x})[0].hwm_quality_id}},$scope.compareToUncertainty=function(){if(""!==$scope.aHWM.hwm_uncertainty&&void 0!==$scope.aHWM.hwm_uncertainty){var x=Number($scope.aHWM.hwm_uncertainty),matchingQualId=$scope.hwmQualList.filter(function(h){return h.min_range<=x&&h.max_range>=x})[0].hwm_quality_id;if($scope.aHWM.hwm_quality_id!==matchingQualId){var incongruentModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Warning</h3></div><div class="modal-body"><p>There is a mismatch between the hwm quality chosen and the hwm uncertainty above. Please correct your hwm uncertainty.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});incongruentModal.result.then(function(){angular.element("[name='hwm_uncertainty']").focus()})}}},$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1}),$scope.updateCountyList=function(s){var thisState=$scope.stateList.filter(function(st){return st.state_abbrev==s})[0];$scope.stateCountyList=$scope.allCountyList.filter(function(c){return c.state_id==thisState.state_id})},$scope.UnquantChecked=function(){1==$scope.aOP.unquantified&&($scope.aOP.uncertainty=null)};var trimOP=function(op){var OBJ_PT={objective_point_id:void 0!==op.objective_point_id?op.objective_point_id:0,name:op.name,description:op.description,elev_ft:void 0!==op.elev_ft?op.elev_ft:null,date_established:op.date_established,op_is_destroyed:void 0!==op.op_is_destroyed?op.op_is_destroyed:0,op_notes:void 0!==op.op_notes?op.op_notes:null,site_id:op.site_id,vdatum_id:void 0!==op.vdatum_id?op.vdatum_id:0,latitude_dd:op.latitude_dd,longitude_dd:op.longitude_dd,hdatum_id:void 0!==op.hdatum_id?op.hdatum_id:0,hcollect_method_id:void 0!==op.hcollect_method_id?op.hcollect_method_id:0,vcollect_method_id:void 0!==op.vcollect_method_id?op.vcollect_method_id:0,op_type_id:op.op_type_id,date_recovered:void 0!==op.date_recovered?op.date_recovered:null,uncertainty:void 0!==op.uncertainty?op.uncertainty:null,unquantified:void 0!==op.unquantified?op.unquantified:null,op_quality_id:void 0!==op.op_quality_id?op.op_quality_id:null};return OBJ_PT};$scope.RemoveID=function(opControl){var i=$scope.addedIdentifiers.indexOf(opControl);void 0!==opControl.op_control_identifier_id?($scope.removeOPCarray.push(opControl),$scope.addedIdentifiers.splice(i,1)):$scope.addedIdentifiers.splice(i,1)};var formatDefaults=function(theOP){"meter"==theOP.FTorMETER&&($scope.aOP.FTorMETER="ft",$scope.aOP.elev_ft=3.2808*$scope.aOP.elev_ft),"cm"==theOP.FTorCM&&($scope.aOP.FTorCM="ft",$scope.aOP.uncertainty=$scope.aOP.uncertainty/30.48)};$scope.tapedown={Open:!1};var showNeedOPfirstModal=function(){var needOPModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">No Datum Location</h3></div><div class="modal-body"><p>In order to add tape down information, please populate the Datum Location section above first.</p><p>The following fields are required for the tape down section: <b>Name</b>, <b>Elevation</b> and <b>Vertical Datum</b>.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});needOPModal.result.then(function(){$scope.tapedown.Open=!1})};$scope.tapeDownTable=[],$scope.removeOP=function(){var removeOPMeas=$uibModal.open({backdrop:"static",keyboard:!1,template:'<div class="modal-header"><h3 class="modal-title">Remove OP Measure</h3></div><div class="modal-body"><p>Are you sure you don\'t want to add this OP Measurement to this quick sensor?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">Yes</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close("remove")},$scope.cancel=function(){$uibModalInstance.close("cancel")}}],size:"sm"});removeOPMeas.result.then(function(yesOrNo){"remove"==yesOrNo&&($scope.tapedown.Open=!1,$scope.tapeDownTable.splice(0,1),$scope.OPsForTapeDown=[],$scope.OPMeasure={},$scope.addTapedown=!1,$scope.aSensStatus.sensor_elevation="",$scope.aSensStatus.ws_elevation="",$scope.aSensStatus.gs_elevation="",$scope.aSensStatus.vdatum_id="")})},$scope.addTapedown=!1,$scope.OPsForTapeDown=[],$scope.showTapedownPart=function(){$scope.tapeDownTable.length<1?void 0!==$scope.aOP.name&&void 0!==$scope.aOP.elev_ft&&void 0!==$scope.aOP.vdatum_id?($scope.OPMeasure={},$scope.OPMeasure.op_name=$scope.aOP.name,$scope.OPMeasure.elevation=$scope.aOP.elev_ft,$scope.OPMeasure.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==$scope.aOP.vdatum_id})[0].datum_abbreviation,$scope.tapeDownTable.push($scope.OPMeasure),$scope.OPsForTapeDown.push($scope.aOP),$scope.addTapedown=!0,$scope.tapedown.Open=!0,$scope.aSensStatus.vdatum_id=$scope.aOP.vdatum_id):showNeedOPfirstModal():($scope.addTapedown=!0,$scope.tapedown.Open=!0)},$scope.siteErrors=!1,$scope.opErrors=!1,$scope.hwmErrors=!1,$scope.create=function(){$rootScope.stateIsLoading.showLoading=!0;var theForm=$scope.quickForm.quick;if($scope.siteErrors=!1,$scope.opErrors=!1,$scope.hwmErrors=!1,theForm.$valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0===$scope.aSite.latitude_dd&&($scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0===$scope.aSite.longitude_dd&&($scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec));var createdSiteID=0;SITE.save($scope.aSite,function(response){createdSiteID=response.site_id,$scope.aOP.site_id=createdSiteID,$scope.aOP.latitude_dd=response.latitude_dd,$scope.aOP.longitude_dd=response.longitude_dd,$scope.aOP.hdatum_id=response.hdatum_id,$scope.aOP.hcollect_method_id=response.hcollect_method_id,"HWM"==$scope.CreateWhat&&($scope.aHWM.site_id=createdSiteID,$scope.aHWM.waterbody=response.waterbody,$scope.aHWM.latitude_dd=response.latitude_dd,$scope.aHWM.longitude_dd=response.longitude_dd,$scope.aHWM.hcollect_method_id=response.hcollect_method_id,$scope.aHWM.hdatum_id=response.hdatum_id,$scope.aHWM.flag_member_id=response.member_id,$scope.aHWM.event_id=$cookies.get("SessionEventID"));var createdOP={};formatDefaults($scope.aOP);var OPtoPOST=trimOP($scope.aOP);OBJECTIVE_POINT.save(OPtoPOST,function(response){if(createdOP=response,$scope.addedIdentifiers.length>0)for(var opc=0;opc<$scope.addedIdentifiers.length;opc++){var thisOPControlID=$scope.addedIdentifiers[opc];thisOPControlID.objective_point_id=response.objective_point_id,OP_CONTROL_IDENTIFIER.save(thisOPControlID).$promise}if("HWM"==$scope.CreateWhat){void 0!==$scope.aHWM.survey_date&&($scope.aHWM.survey_member_id=$scope.aHWM.flag_member_id),void 0!==$scope.aHWM.elev_ft&&(void 0===$scope.aHWM.survey_date&&($scope.aHWM.survey_date=makeAdate("")),$scope.aHWM.survey_member_id=$scope.aHWM.flag_member_id),HWM.save($scope.aHWM).$promise.then(function(response){toastr.success("Quick HWM created"),$rootScope.stateIsLoading.showLoading=!1,$location.path("/Site/"+createdSiteID+"/SiteDashboard").replace(),$scope.apply})}if("Sensor"==$scope.CreateWhat){var createdSensor={};"Minutes"==$scope.IntervalType.type&&($scope.aSensor.interval=60*$scope.aSensor.interval),$scope.aSensor.site_id=createdSiteID,dealWithTimeStampb4Send(),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INSTRUMENT.save($scope.aSensor).$promise.then(function(response){createdSensor=response,$scope.aSensStatus.instrument_id=response.instrument_id,INSTRUMENT_STATUS.save($scope.aSensStatus).$promise.then(function(statResponse){if($scope.tapeDownTable.length>0){var thisTape=$scope.tapeDownTable[0];thisTape.instrument_status_id=statResponse.instrument_status_id,thisTape.objective_point_id=createdOP.objective_point_id,OP_MEASURE.save(thisTape).$promise}toastr.success("Quick Sensor created"),$rootScope.stateIsLoading.showLoading=!1,$location.path("/Site/"+createdSiteID+"/SiteDashboard").replace(),$scope.apply})})}})})}else $rootScope.stateIsLoading.showLoading=!1,$scope.status.siteOpen=!0,$scope.status.opOpen=!0,$scope.status.hwmOpen=!0,angular.element("[name='"+theForm.$name+"']").find(".ng-invalid:visible:first").focus(),(theForm.site_description.$invalid||theForm.latitude_dd.$invalid||theForm.longitude_dd.$invalid||theForm.hdatum_id.$invalid||theForm.hcollect_method_id.$invalid||theForm.waterbody.$invalid||theForm.state.$invalidv||theForm.county.$invalid)&&($scope.siteErrors=!0),(theForm.op_type_id.$invalid||theForm.name.$invalid||theForm.description.$invalid||theForm.de.$invalid)&&($scope.opErrors=!0),(theForm.hwm_type_id.$invalid||theForm.hwm_environment.$invalid||theForm.hwm_quality_id.$invalid||theForm.fd.$invalid)&&($scope.hwmErrors=!0),toastr.error("Quick HWM not created.")}}}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("settingsCtrl",["$scope","$rootScope","$cookies","$location","$state",function($scope,$rootScope,$cookies,$location,$state){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Settings",$rootScope.activeMenu="settings",$scope.settings="Welcome to the new STN Settings Page!!",$scope.changeView=function(view){$state.go(view)})}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("sensorModalCtrl",["$scope","$rootScope","$timeout","$cookies","$http","$sce","$uibModalInstance","$uibModal","SERVER_URL","FILE_STAMP","allDropdowns","agencyList","Site_Files","allDepTypes","thisSensor","SensorSite","siteOPs","allMembers","INSTRUMENT","INSTRUMENT_STATUS","DATA_FILE","FILE","SOURCE","OP_MEASURE",function($scope,$rootScope,$timeout,$cookies,$http,$sce,$uibModalInstance,$uibModal,SERVER_URL,FILE_STAMP,allDropdowns,agencyList,Site_Files,allDepTypes,thisSensor,SensorSite,siteOPs,allMembers,INSTRUMENT,INSTRUMENT_STATUS,DATA_FILE,FILE,SOURCE,OP_MEASURE){$scope.sensorTypeList=allDropdowns[0],$scope.sensorBrandList=allDropdowns[1],$scope.houseTypeList=allDropdowns[2],$scope.eventList=allDropdowns[3],$scope.fileTypeList=allDropdowns[4],$scope.vertDatumList=allDropdowns[5],$scope.depSenfileIsUploading=!1,$scope.allSFiles=Site_Files.getAllSiteFiles(),$scope.DepSensorFiles="empty"!==thisSensor?$scope.allSFiles.filter(function(sf){return sf.instrument_id==thisSensor.instrument_id}):[],$scope.depSensImageFiles=$scope.DepSensorFiles.filter(function(hf){return 1===hf.filetype_id}),$scope.showFileForm=!1,$scope.showNWISFileForm=!1,$scope.OPsPresent=siteOPs.length>0?!0:!1,$scope.OPsForTapeDown=siteOPs,$scope.removeOPList=[],$scope.tapeDownTable=[],$scope.depTypeList=allDepTypes,$scope.filteredDeploymentTypes=[],$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.userRole=$cookies.get("usersRole"),$scope.showEventDD=!1,$scope.adminChanged={},$scope.IntervalType={},$scope.whichButton="",$scope.serverURL=SERVER_URL,$scope.nwisHeaderTip=$sce.trustAsHtml("Connect your transmitting sensor with NWIS via <em>Station ID for USGS gage</em> from the Site details."),$scope.view={DEPval:"detail",RETval:"detail"},$scope.sensorDataNWIS=!1,$scope.s={depOpen:!0,sFileOpen:!1,NWISFileOpen:!1};var getDateTimeParts=function(d){var theDate,isDate="[object Date]"===Object.prototype.toString.call(d);if(isDate===!1){var y=d.substr(0,4),m=d.substr(5,2)-1,da=d.substr(8,2),h=d.substr(11,2),mi=d.substr(14,2),sec=d.substr(17,2);theDate=new Date(y,m,da,h,mi,sec)}else theDate=d;return theDate};$scope.dateOptions={startingDay:1,showWeeks:!1},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.stamp=FILE_STAMP.getStamp(),$scope.fileItemExists=!0,$scope.saveFileUpload=function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.sFileIsUploading=!0;var fileParts={FileEntity:{file_id:$scope.aFile.file_id,name:$scope.aFile.name,description:$scope.aFile.description,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,file_date:$scope.aFile.file_date,hwm_id:$scope.aFile.hwm_id,site_id:$scope.aFile.site_id,filetype_id:$scope.aFile.filetype_id,source_id:$scope.aFile.source_id,path:$scope.aFile.path,data_file_id:$scope.aFile.data_file_id,instrument_id:$scope.aFile.instrument_id,photo_date:$scope.aFile.photo_date,is_nwis:$scope.aFile.is_nwis,objective_point_id:$scope.aFile.objective_point_id},File:void 0!==$scope.aFile.File1?$scope.aFile.File1:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),FILE_STAMP.setStamp(),$scope.stamp=FILE_STAMP.getStamp(),$scope.isPhoto=$scope.aFile.File1.type.indexOf("image")>-1?!0:!1,$scope.aFile.name=fresponse.name,$scope.aFile.path=fresponse.path,void 0!==$scope.aFile.File1&&($scope.aFile.File=$scope.aFile.File1,$scope.aFile.File1=void 0),fresponse.fileBelongsTo=2==$scope.aFile.filetype_id?"DataFile File":"Sensor File",1===fresponse.filetype_id&&($scope.depSensImageFiles.splice($scope.existIMGFileIndex,1),$scope.depSensImageFiles.push(fresponse)),$scope.DepSensorFiles[$scope.existFileIndex]=fresponse,$scope.allSFiles[$scope.allSFileIndex]=fresponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.sFileIsUploading=!1,$scope.fileItemExists=!0},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})},$scope.showFile=function(file){if($scope.fileTypes=$scope.fileTypeList,$scope.agencies=agencyList,$scope.existFileIndex=-1,$scope.existIMGFileIndex=-1,$scope.allSFileIndex=-1,$scope.aFile={},$scope.aSource={},$scope.datafile={},0!==file){if($scope.existFileIndex=$scope.DepSensorFiles.indexOf(file),$scope.allSFileIndex=$scope.allSFiles.indexOf(file),$scope.existIMGFileIndex=$scope.depSensImageFiles.length>0?$scope.depSensImageFiles.indexOf(file):-1,$scope.aFile=angular.copy(file),FILE.getFileItem({id:$scope.aFile.file_id}).$promise.then(function(response){$scope.fileItemExists=response.Length>0?!0:!1}),$scope.aFile.fileType=$scope.fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,void 0!==$scope.aFile.name){var fI=$scope.aFile.name.lastIndexOf("."),fileExt=$scope.aFile.name.substring(fI+1);$scope.isPhoto=fileExt.match(/(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)?!0:!1}$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),void 0!==file.source_id&&SOURCE.query({id:file.source_id}).$promise.then(function(s){$scope.aSource=s,$scope.aSource.FULLname=$scope.aSource.source_name,1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}),void 0!==file.data_file_id&&DATA_FILE.query({id:file.data_file_id}).$promise.then(function(df){$scope.datafile=df,$scope.processor=allMembers.filter(function(m){return m.member_id==$scope.datafile.processor_id})[0],$scope.datafile.collect_date=new Date($scope.datafile.collect_date),$scope.datafile.good_start=getDateTimeParts($scope.datafile.good_start),$scope.datafile.good_end=getDateTimeParts($scope.datafile.good_end)})}else{$scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname,$scope.processor=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0];var dt=getTimeZoneStamp();$scope.datafile.collect_date=dt[0],$scope.datafile.time_zone=dt[1],$scope.datafile.good_start=new Date,$scope.datafile.good_end=new Date}$scope.showFileForm=!0,$scope.updateAgencyForCaption=function(){1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}},$scope.createFile=function(valid){if(2==$scope.aFile.filetype_id){var s=$scope.datafile.good_start,e=$scope.datafile.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',
controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}}if(valid)if($scope.depSenfileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",2==$scope.aFile.filetype_id){if("UTC"!=$scope.datafile.time_zone){var utcStartDateTime=new Date($scope.datafile.good_start).toUTCString(),utcEndDateTime=new Date($scope.datafile.good_end).toUTCString();$scope.datafile.good_start=utcStartDateTime,$scope.datafile.good_end=utcEndDateTime,$scope.datafile.time_zone="UTC"}else{var si=$scope.datafile.good_start.toString().indexOf("GMT")+3,ei=$scope.datafile.good_end.toString().indexOf("GMT")+3;$scope.datafile.good_start=$scope.datafile.good_start.toString().substring(0,si),$scope.datafile.good_end=$scope.datafile.good_end.toString().substring(0,ei)}$scope.datafile.instrument_id=thisSensor.instrument_id,$scope.datafile.processor_id=$cookies.get("mID"),DATA_FILE.save($scope.datafile).$promise.then(function(dfResonse){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,description:$scope.aFile.description,site_id:$scope.thisSensorSite.site_id,data_file_id:dfResonse.data_file_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,instrument_id:thisSensor.instrument_id},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="DataFile File",$scope.DepSensorFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),1===fresponse.filetype_id&&$scope.depSensImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.depSenfileIsUploading=!1},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving Source info: "+errorResponse.statusText)})}else{var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){if(8!==$scope.aFile.filetype_id){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,photo_date:$scope.aFile.photo_date,description:$scope.aFile.description,site_id:$scope.thisSensorSite.site_id,source_id:response.source_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,instrument_id:thisSensor.instrument_id},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Sensor File",$scope.DepSensorFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),1===fresponse.filetype_id&&$scope.depSensImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.depSenfileIsUploading=!1},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})}else $scope.aFile.source_id=response.source_id,$scope.aFile.site_id=$scope.thisSensorSite.site_id,$scope.aFile.instrument_id=thisSensor.instrument_id,FILE.save($scope.aFile).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Sensor File",$scope.DepSensorFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.depSenfileIsUploading=!1},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving Source info: "+errorResponse.statusText)})}},$scope.saveFile=function(valid){if(2==$scope.aFile.filetype_id){var s=$scope.datafile.good_start,e=$scope.datafile.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}}if(valid){$scope.depSenfileIsUploading=!0;{$scope.aFile.fileBelongsTo}if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.datafile.data_file_id){if("UTC"!=$scope.datafile.time_zone){var utcStartDateTime=new Date($scope.datafile.good_start).toUTCString(),utcEndDateTime=new Date($scope.datafile.good_end).toUTCString();$scope.datafile.good_start=utcStartDateTime,$scope.datafile.good_end=utcEndDateTime,$scope.datafile.time_zone="UTC"}else{var si=$scope.datafile.good_start.toString().indexOf("GMT")+3,ei=$scope.datafile.good_end.toString().indexOf("GMT")+3;$scope.datafile.good_start=$scope.datafile.good_start.toString().substring(0,si),$scope.datafile.good_end=$scope.datafile.good_end.toString().substring(0,ei)}DATA_FILE.update({id:$scope.datafile.data_file_id},$scope.datafile).$promise.then(function(){FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="DataFile File",$scope.DepSensorFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.depSenfileIsUploading=!1},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving data file: "+errorResponse.statusText)})}else{var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){$scope.aFile.source_id=response.source_id,FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="Sensor File",$scope.DepSensorFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.depSenfileIsUploading=!1},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving source: "+errorResponse.statusText)})}}},$scope.deleteFile=function(){var DeleteModalInstance=$uibModal.open({backdrop:"static",keyboard:!1,templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.DepSensorFiles.splice($scope.existFileIndex,1),$scope.allSFiles.splice($scope.allSFileIndex,1),$scope.depSensImageFiles.splice($scope.existIMGFileIndex,1),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelFile=function(){$scope.aFile={},$scope.aSource={},$scope.datafile={},$scope.showFileForm=!1},$scope.showNWISFile=function(f){$scope.existFileIndex=-1,$scope.allSFileIndex=-1,0!==f?($scope.existFileIndex=$scope.sensorNWISFiles.indexOf(f),$scope.allSFileIndex=$scope.allSFiles.indexOf(f),$scope.NWISFile=angular.copy(f),$scope.NWISFile.file_date=new Date($scope.NWISFile.file_date),$scope.NWISFile.FileType="Data",DATA_FILE.query({id:f.data_file_id}).$promise.then(function(df){$scope.NWISDF=df,$scope.nwisProcessor=allMembers.filter(function(m){return m.member_id==$scope.NWISDF.processor_id})[0],$scope.NWISDF.collect_date=new Date($scope.NWISDF.collect_date),$scope.NWISDF.good_start=getDateTimeParts($scope.NWISDF.good_start),$scope.NWISDF.good_end=getDateTimeParts($scope.NWISDF.good_end)})):($scope.NWISFile={name:"http://waterdata.usgs.gov/nwis/uv?site_no="+$scope.thisSensorSite.usgs_sid,path:"<link>",file_date:new Date,filetype_id:2,FileType:"Data",site_id:$scope.aSensor.site_id,data_file_id:0,instrument_id:$scope.aSensor.instrument_id,is_nwis:1},$scope.NWISDF={processor_id:$cookies.get("mID"),instrument_id:$scope.aSensor.instrument_id,collect_date:dt[0],time_zone:dt[1],good_start:new Date,good_end:new Date},$scope.nwisProcessor=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0]),$scope.showNWISFileForm=!0};var postApprovalForNWISfile=function(DFid){DATA_FILE.approveNWISDF({id:DFid}).$promise.then(function(approvalResponse){$scope.NWISDF.approval_id=approvalResponse.approval_id})};$scope.createNWISFile=function(valid){var s=$scope.NWISDF.good_start,e=$scope.NWISDF.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}if(valid){if($scope.depNWISSenfileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json","UTC"!=$scope.NWISDF.time_zone){var utcStartDateTime=new Date($scope.NWISDF.good_start).toUTCString(),utcEndDateTime=new Date($scope.NWISDF.good_end).toUTCString();$scope.NWISDF.good_start=utcStartDateTime,$scope.NWISDF.good_end=utcEndDateTime,$scope.NWISDF.time_zone="UTC"}else{var si=$scope.NWISDF.good_start.toString().indexOf("GMT")+3,ei=$scope.NWISDF.good_end.toString().indexOf("GMT")+3;$scope.NWISDF.good_start=$scope.NWISDF.good_start.toString().substring(0,si),$scope.NWISDF.good_end=$scope.NWISDF.good_end.toString().substring(0,ei)}DATA_FILE.save($scope.NWISDF).$promise.then(function(NdfResponse){$scope.NWISDF.data_file_id=NdfResponse.data_file_id,postApprovalForNWISfile(NdfResponse.data_file_id),$scope.NWISFile.data_file_id=NdfResponse.data_file_id,$scope.NWISFile.path="<link>",delete $scope.NWISFile.FileType,FILE.save($scope.NWISFile).$promise.then(function(Fresponse){toastr.success("File Data saved"),Fresponse.fileBelongsTo="DataFile File",$scope.sensorNWISFiles.push(Fresponse),$scope.allSFiles.push(Fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showNWISFileForm=!1,$scope.depNWISSenfileIsUploading=!1},function(errorResponse){$scope.depNWISSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.depNWISSenfileIsUploading=!1,toastr.error("Error saving data file info: "+errorResponse.statusText)})}},$scope.saveNWISFile=function(valid){var s=$scope.NWISDF.good_start,e=$scope.NWISDF.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}if(valid){if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json","UTC"!=$scope.NWISDF.time_zone){var utcStartDateTime=new Date($scope.NWISDF.good_start).toUTCString(),utcEndDateTime=new Date($scope.NWISDF.good_end).toUTCString();$scope.NWISDF.good_start=utcStartDateTime,$scope.NWISDF.good_end=utcEndDateTime,$scope.NWISDF.time_zone="UTC"}else{var si=$scope.NWISDF.good_start.toString().indexOf("GMT")+3,ei=$scope.NWISDF.good_end.toString().indexOf("GMT")+3;$scope.NWISDF.good_start=$scope.NWISDF.good_start.toString().substring(0,si),$scope.NWISDF.good_end=$scope.NWISDF.good_end.toString().substring(0,ei)}DATA_FILE.update({id:$scope.NWISDF.data_file_id},$scope.NWISDF).$promise.then(function(){FILE.update({id:$scope.NWISFile.file_id},$scope.NWISFile).$promise.then(function(fileResponse){toastr.success("File Data Updated"),fileResponse.fileBelongsTo="DataFile File",$scope.sensorNWISFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showNWISFileForm=!1},function(errorResponse){toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){toastr.error("Error saving data: "+errorResponse.statusText)})}},$scope.deleteNWISFile=function(){var DeleteModalInstance=$uibModal.open({backdrop:"static",keyboard:!1,templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.NWISFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.sensorNWISFiles.splice($scope.existFileIndex,1),$scope.allSFiles.splice($scope.allSFileIndex,1),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showNWISFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelNWISFile=function(){$scope.NWISFile={},$scope.NWISDF={},$scope.showNWISFileForm=!1},$scope.OPchosen=function(opChosen){var opI=$scope.OPsForTapeDown.map(function(o){return o.objective_point_id}).indexOf(opChosen.objective_point_id);if(opChosen.selected)$scope.OPMeasure={},$scope.OPMeasure.op_name=opChosen.name,$scope.OPMeasure.elevation=opChosen.elev_ft,$scope.OPMeasure.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==opChosen.vdatum_id})[0].datum_abbreviation,$scope.OPMeasure.objective_point_id=opChosen.objective_point_id,void 0!==$scope.aSensor.instrument_id&&4!==$scope.aSensStatus.status_type_id?($scope.depTapeCopy.push($scope.OPMeasure),$scope.depStuffCopy[1].vdatum_id=opChosen.vdatum_id):($scope.tapeDownTable.push($scope.OPMeasure),$scope.aSensStatus.vdatum_id=opChosen.vdatum_id);else{var removeOPMeas=$uibModal.open({backdrop:"static",keyboard:!1,template:'<div class="modal-header"><h3 class="modal-title">Remove OP Measure</h3></div><div class="modal-body"><p>Are you sure you want to remove this OP Measurement from this sensor?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close("remove")},$scope.cancel=function(){$uibModalInstance.close("cancel")}}],size:"sm"});removeOPMeas.result.then(function(yesOrNo){if("remove"==yesOrNo){var createOrEdit=void 0!==$scope.aSensor.instrument_id&&4!==$scope.aSensStatus.status_type_id?"edit":"create",tapeDownToRemove="edit"==createOrEdit?$scope.depTapeCopy.filter(function(a){return a.objective_point_id==opChosen.objective_point_id})[0]:$scope.tapeDownTable.filter(function(a){return a.objective_point_id==opChosen.objective_point_id})[0],tInd="edit"==createOrEdit?$scope.depTapeCopy.map(function(o){return o.objective_point_id}).indexOf(tapeDownToRemove.objective_point_id):$scope.tapeDownTable.map(function(o){return o.objective_point_id}).indexOf(tapeDownToRemove.objective_point_id);void 0!==tapeDownToRemove.op_measurements_id&&$scope.removeOPList.push(tapeDownToRemove.op_measurements_id),"edit"==createOrEdit?$scope.depTapeCopy.splice(tInd,1):$scope.tapeDownTable.splice(tInd,1),"edit"==createOrEdit?0===$scope.depTapeCopy.length&&($scope.depStuffCopy[1].vdatum_id=0,$scope.depStuffCopy[1].gs_elevation="",$scope.depStuffCopy[1].ws_elevation="",$scope.depStuffCopy[1].sensor_elevation=""):0===$scope.tapeDownTable.length&&($scope.aSensStatus.vdatum_id=0,$scope.aSensStatus.gs_elevation="",$scope.aSensStatus.ws_elevation="",$scope.aSensStatus.sensor_elevation="")}else $scope.OPsForTapeDown[opI].selected=!0})}};var getTimeZoneStamp=function(dsent){var d,sendThis=[];d=void 0!==dsent?new Date(dsent):new Date;var offset=d.toString().substring(35),zone="";switch(offset.substr(0,3)){case"Cen":zone="CST";break;case"Eas":zone="EST";break;case"Mou":zone="MST";break;case"Pac":zone="PST"}return sendThis=[d,zone]};$scope.showChangeEventDD=function(){$scope.showEventDD=!$scope.showEventDD},$scope.ChangeEvent=function(){$scope.EventName=$scope.eventList.filter(function(el){return el.event_id==$scope.adminChanged.event_id})[0].event_name},$scope.getDepTypes=function(){$scope.filteredDeploymentTypes=[];var matchingSensDeplist=$scope.sensorTypeList.filter(function(sd){return sd.sensor_type_id==$scope.aSensor.sensor_type_id})[0];$scope.filteredDeploymentTypes=matchingSensDeplist.deploymenttypes,1==$scope.filteredDeploymentTypes.length&&($scope.aSensor.deployment_type_id=$scope.filteredDeploymentTypes[0].deployment_type_id)},$scope.LoggedInMember=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSensor={},$scope.aSensStatus={},$scope.thisSensorSite=SensorSite,$scope.cancel=function(){$rootScope.stateIsLoading.showLoading=!1;var sensorObjectToSendBack=thisSensor;$timeout(function(){var sendBack=[sensorObjectToSendBack];$uibModalInstance.close(sendBack)})},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())};var dealWithTimeStampb4Send=function(w){if("saving"==w)if("UTC"!=$scope.depStuffCopy[1].time_zone){var utcDateTimeS=new Date($scope.depStuffCopy[1].time_stamp).toUTCString();$scope.depStuffCopy[1].time_stamp=utcDateTimeS,$scope.depStuffCopy[1].time_zone="UTC"}else{var i=$scope.depStuffCopy[1].time_stamp.toString().indexOf("GMT")+3;$scope.depStuffCopy[1].time_stamp=$scope.depStuffCopy[1].time_stamp.toString().substring(0,i)}else if("UTC"!=$scope.aSensStatus.time_zone){var utcDateTimeD=new Date($scope.aSensStatus.time_stamp).toUTCString();$scope.aSensStatus.time_stamp=utcDateTimeD,$scope.aSensStatus.time_zone="UTC"}else{var Di=$scope.aSensStatus.time_stamp.toString().indexOf("GMT")+3;$scope.aSensStatus.time_stamp=$scope.aSensStatus.time_stamp.toString().substring(0,Di)}};if($scope.save=function(valid){if(valid){var updatedSensor={},updatedSenStat={};void 0!==$scope.adminChanged.event_id&&($scope.depStuffCopy[0].event_id=$scope.adminChanged.event_id),"Minutes"==$scope.IntervalType.type&&($scope.depStuffCopy[0].interval=60*$scope.depStuffCopy[0].interval),dealWithTimeStampb4Send("saving"),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INSTRUMENT.update({id:$scope.depStuffCopy[0].instrument_id},$scope.depStuffCopy[0]).$promise.then(function(response){updatedSensor=response,updatedSensor.deploymentType=$scope.depStuffCopy[0].deployment_type_id>0?$scope.depTypeList.filter(function(d){return d.deployment_type_id==$scope.depStuffCopy[0].deployment_type_id})[0].method:"",updatedSensor.housingType=$scope.depStuffCopy[0].housing_type_id>0?$scope.houseTypeList.filter(function(h){return h.housing_type_id==$scope.depStuffCopy[0].housing_type_id})[0].type_name:"",updatedSensor.sensorBrand=$scope.sensorBrandList.filter(function(s){return s.sensor_brand_id==$scope.depStuffCopy[0].sensor_brand_id})[0].brand_name,updatedSensor.sensorType=$scope.sensorTypeList.filter(function(t){return t.sensor_type_id==$scope.depStuffCopy[0].sensor_type_id})[0].sensor,INSTRUMENT_STATUS.update({id:$scope.depStuffCopy[1].instrument_status_id},$scope.depStuffCopy[1]).$promise.then(function(statResponse){for(var rt=0;rt<$scope.removeOPList.length;rt++){var idToRemove=$scope.removeOPList[rt];OP_MEASURE["delete"]({id:idToRemove}).$promise}$scope.tapeDownTable=$scope.depTapeCopy.length>0?[]:$scope.tapeDownTable;for(var at=0;at<$scope.depTapeCopy.length;at++){var DEPthisTape=$scope.depTapeCopy[at];void 0!==DEPthisTape.op_measurements_id?OP_MEASURE.update({id:DEPthisTape.op_measurements_id},DEPthisTape).$promise.then(function(tapeResponse){tapeResponse.op_name=DEPthisTape.op_name,tapeResponse.Vdatum=DEPthisTape.Vdatum,$scope.tapeDownTable.push(tapeResponse)}):(DEPthisTape.instrument_status_id=statResponse.instrument_status_id,OP_MEASURE.save(DEPthisTape).$promise.then(function(tapeResponse){tapeResponse.op_name=DEPthisTape.op_name,tapeResponse.Vdatum=DEPthisTape.Vdatum,$scope.tapeDownTable.push(tapeResponse)}))}updatedSenStat=statResponse,updatedSenStat.status="Deployed";var instrument_statusesHolder=$scope.aSensor.instrument_status;$scope.aSensor=updatedSensor,thisSensor=updatedSensor,thisSensor.instrument_status=instrument_statusesHolder,$scope.aSensStatus=updatedSenStat,$scope.aSensStatus.time_stamp=getDateTimeParts($scope.aSensStatus.time_stamp);var ind=thisSensor.instrument_status.map(function(i){return i.status_type_id}).indexOf(1);thisSensor.instrument_status[ind]=$scope.aSensStatus,$scope.depStuffCopy=[],$scope.IntervalType={type:"Seconds"},$scope.view.DEPval="detail",toastr.success("Sensor Updated")},function(errorResponse){toastr.error("error saving sensor status: "+errorResponse.statusText)})},function(errorResponse){toastr.error("error saving sensor: "+errorResponse.statusText)})}},$scope.deploy=function(){if(this.SensorForm.$valid){"Minutes"==$scope.IntervalType.type&&($scope.aSensor.interval=60*$scope.aSensor.interval),$scope.aSensor.event_id=$cookies.get("SessionEventID"),$scope.aSensor.site_id=SensorSite.site_id,dealWithTimeStampb4Send("deploy"),$scope.aSensStatus.status_type_id=1,$scope.aSensStatus.member_id=$cookies.get("mID");var createdSensor={},depSenStat={};$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.aSensor.instrument_id?INSTRUMENT.update({id:$scope.aSensor.instrument_id},$scope.aSensor).$promise.then(function(response){createdSensor=response,createdSensor.deploymentType=$scope.aSensor.deploymentType,createdSensor.housingType=response.housing_type_id>0?$scope.houseTypeList.filter(function(h){return h.housing_type_id==response.housing_type_id})[0].type_name:"",createdSensor.sensorBrand=$scope.sensorBrandList.filter(function(s){return s.sensor_brand_id==response.sensor_brand_id})[0].brand_name,createdSensor.sensorType=$scope.sensorTypeList.filter(function(t){return t.sensor_type_id==response.sensor_type_id})[0].sensor,$scope.aSensStatus.instrument_id=response.instrument_id,INSTRUMENT_STATUS.save($scope.aSensStatus).$promise.then(function(statResponse){if($scope.tapeDownTable.length>0)for(var t=0;t<$scope.tapeDownTable.length;t++){var thisTape=$scope.tapeDownTable[t];thisTape.instrument_status_id=statResponse.instrument_status_id,OP_MEASURE.save(thisTape).$promise}depSenStat=statResponse,depSenStat.status="Deployed",createdSensor.instrument_status=[depSenStat,$scope.previousStateStatus],$timeout(function(){toastr.success("Sensor deployed");var state="deployP"==$scope.whichButton?"proposedDeployed":"newDeployed",sendBack=[createdSensor,state];$uibModalInstance.close(sendBack)})})}):INSTRUMENT.save($scope.aSensor).$promise.then(function(response){createdSensor=response,createdSensor.deploymentType=null!==response.deployment_type_id&&void 0!==response.deployment_type_id?$scope.depTypeList.filter(function(d){return d.deployment_type_id==response.deployment_type_id})[0].method:"",createdSensor.housingType=null!==response.housing_type_id&&void 0!==response.housing_type_id?$scope.houseTypeList.filter(function(h){return h.housing_type_id==response.housing_type_id})[0].type_name:"",createdSensor.sensorBrand=$scope.sensorBrandList.filter(function(s){return s.sensor_brand_id==response.sensor_brand_id})[0].brand_name,createdSensor.sensorType=$scope.sensorTypeList.filter(function(t){return t.sensor_type_id==response.sensor_type_id})[0].sensor,$scope.aSensStatus.instrument_id=response.instrument_id,INSTRUMENT_STATUS.save($scope.aSensStatus).$promise.then(function(statResponse){if($scope.tapeDownTable.length>0)for(var t=0;t<$scope.tapeDownTable.length;t++){var thisTape=$scope.tapeDownTable[t];thisTape.instrument_status_id=statResponse.instrument_status_id,OP_MEASURE.save(thisTape).$promise}depSenStat=statResponse,depSenStat.status="Deployed",createdSensor.instrument_status=[depSenStat],toastr.success("Sensor deployed");var state="deployP"==$scope.whichButton?"proposedDeployed":"newDeployed",sendBack=[createdSensor,state];$uibModalInstance.close(sendBack)})})}},$scope.deleteS=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",backdrop:"static",keyboard:!1,resolve:{nameToRemove:function(){return $scope.aSensor},what:function(){return"Sensor"}}});DeleteModalInstance.result.then(function(sensorToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),INSTRUMENT["delete"]({id:sensorToRemove.instrument_id}).$promise.then(function(){$scope.DepSensorFiles=[],$scope.depSensImageFiles=[];for(var l=$scope.allSFiles.length;l--;)$scope.allSFiles[l].instrument_id==sensorToRemove.instrument_id&&$scope.allSFiles.splice(l,1);Site_Files.setAllSiteFiles($scope.allSFiles),toastr.success("Sensor Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},"empty"!=thisSensor){if($scope.aSensor=angular.copy(thisSensor),$scope.aSensStatus=angular.copy(thisSensor.instrument_status[0]),$scope.sensorDataNWIS=2==$scope.aSensor.sensor_type_id||5==$scope.aSensor.sensor_type_id||6==$scope.aSensor.sensor_type_id?!0:!1,$scope.getDepTypes(),$scope.IntervalType.type="Seconds",$scope.sensorDataNWIS){$scope.sensorNWISFiles=[];for(var ai=$scope.DepSensorFiles.length-1;ai>=0;ai--)1==$scope.DepSensorFiles[ai].is_nwis&&($scope.sensorNWISFiles.push($scope.DepSensorFiles[ai]),$scope.DepSensorFiles.splice(ai,1));var dt=getTimeZoneStamp();$scope.NWISFile={},$scope.NWISDF={}}if("Proposed"==thisSensor.instrument_status[0].status){$scope.previousStateStatus=angular.copy(thisSensor.instrument_status[0]),$scope.whichButton="deployP",$scope.aSensor.interval=0===$scope.aSensor.interval?null:$scope.aSensor.interval;var timeParts=getTimeZoneStamp();$scope.aSensStatus.time_stamp=timeParts[0],$scope.aSensStatus.time_zone=timeParts[1],$scope.aSensStatus.member_id=$cookies.get("mID"),$scope.EventName=$cookies.get("SessionEventName"),$scope.Deployer=$scope.LoggedInMember}else $scope.whichButton="edit",$scope.aSensor.interval=0===$scope.aSensor.interval?null:$scope.aSensor.interval,$scope.EventName=$scope.eventList.filter(function(e){return e.event_id==$scope.aSensor.event_id})[0].event_name,$scope.aSensStatus.time_stamp=getDateTimeParts($scope.aSensStatus.time_stamp),$scope.Deployer=null!==$scope.aSensStatus.member_id||void 0!==$scope.aSensStatus.member_id?allMembers.filter(function(m){return m.member_id==$scope.aSensStatus.member_id})[0]:{},OP_MEASURE.getInstStatOPMeasures({instrumentStatusId:$scope.aSensStatus.instrument_status_id}).$promise.then(function(response){for(var r=0;r<response.length;r++){var sensMeasures=response[r],whichOP=siteOPs.filter(function(op){return op.objective_point_id==response[r].objective_point_id})[0];sensMeasures.elevation=whichOP.elev_ft,sensMeasures.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==whichOP.vdatum_id})[0].datum_abbreviation,sensMeasures.op_name=whichOP.name,$scope.tapeDownTable.push(sensMeasures)}for(var i=0;i<$scope.OPsForTapeDown.length;i++){for(var y=0;y<response.length;y++)response[y].objective_point_id==$scope.OPsForTapeDown[i].objective_point_id?($scope.OPsForTapeDown[i].selected=!0,y=response.length):$scope.OPsForTapeDown[i].selected=!1;0===response.length&&($scope.OPsForTapeDown[i].selected=!1)}});$rootScope.stateIsLoading.showLoading=!1}else{$scope.whichButton="deploy",$scope.IntervalType.type="Seconds";var DeptimeParts=getTimeZoneStamp();$scope.aSensStatus.time_stamp=DeptimeParts[0],$scope.aSensStatus.time_zone=DeptimeParts[1],$scope.aSensStatus.member_id=$cookies.get("mID"),$scope.EventName=$cookies.get("SessionEventName"),$scope.Deployer=$scope.LoggedInMember,$rootScope.stateIsLoading.showLoading=!1}$scope.myData=[$scope.aSensStatus.sensor_elevation,$scope.aSensStatus.ws_elevation,$scope.aSensStatus.gs_elevation],$scope.wannaEditDep=function(){$scope.view.DEPval="edit",$scope.depStuffCopy=[angular.copy($scope.aSensor),angular.copy($scope.aSensStatus)],$scope.depTapeCopy=angular.copy($scope.tapeDownTable)},$scope.cancelDepEdit=function(){$scope.view.DEPval="detail",$scope.depStuffCopy=[],$scope.depTapeCopy=[];for(var i=0;i<$scope.OPsForTapeDown.length;i++){for(var y=0;y<$scope.tapeDownTable.length;y++)$scope.tapeDownTable[y].objective_point_id==$scope.OPsForTapeDown[i].objective_point_id?($scope.OPsForTapeDown[i].selected=!0,y=$scope.tapeDownTable.length):$scope.OPsForTapeDown[i].selected=!1;0===$scope.tapeDownTable.length&&($scope.OPsForTapeDown[i].selected=!1)}}}]),ModalControllers.controller("sensorRetrievalModalCtrl",["$scope","$rootScope","$timeout","$cookies","$http","$uibModalInstance","$uibModal","thisSensor","SensorSite","siteOPs","allEventList","allVDatumList","allMembers","allStatusTypes","allInstCollCond","INSTRUMENT","INSTRUMENT_STATUS","OP_MEASURE",function($scope,$rootScope,$timeout,$cookies,$http,$uibModalInstance,$uibModal,thisSensor,SensorSite,siteOPs,allEventList,allVDatumList,allMembers,allStatusTypes,allInstCollCond,INSTRUMENT,INSTRUMENT_STATUS,OP_MEASURE){$scope.aSensor=thisSensor,$scope.EventName=allEventList.filter(function(r){return r.event_id==$scope.aSensor.event_id})[0].event_name,$scope.depSensStatus=angular.copy(thisSensor.instrument_status[0]);var isDate="[object Date]"===Object.prototype.toString.call($scope.depSensStatus.time_stamp);if(isDate===!1){var y=$scope.depSensStatus.time_stamp.substr(0,4),m=$scope.depSensStatus.time_stamp.substr(5,2)-1,d=$scope.depSensStatus.time_stamp.substr(8,2),h=$scope.depSensStatus.time_stamp.substr(11,2),mi=$scope.depSensStatus.time_stamp.substr(14,2),sec=$scope.depSensStatus.time_stamp.substr(17,2);$scope.depSensStatus.time_stamp=new Date(y,m,d,h,mi,sec)}void 0!==$scope.depSensStatus.vdatum_id&&$scope.depSensStatus.vdatum_id>0&&($scope.depSensStatus.VDatum=allVDatumList.filter(function(v){return v.datum_id==$scope.depSensStatus.vdatum_id})[0].datum_abbreviation),$scope.OPsForTapeDown=siteOPs,$scope.OPsPresent=siteOPs.length>0?!0:!1,$scope.vertDatumList=allVDatumList,$scope.removeOPList=[],$scope.tapeDownTable=[],$scope.DEPtapeDownTable=[],$scope.Deployer=allMembers.filter(function(m){return m.member_id==$scope.depSensStatus.member_id})[0],$scope.whichButton="Retrieve",$scope.statusTypeList=allStatusTypes.filter(function(s){return"Retrieved"==s.status||"Lost"==s.status;

}),$scope.collectCondList=allInstCollCond,$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.userRole=$cookies.get("usersRole");var getTimeZoneStamp=function(dsent){var d,sendThis=[];d=void 0!==dsent?new Date(dsent):new Date;var offset=d.toString().substring(35),zone="";switch(offset.substr(0,3)){case"Cen":zone="CST";break;case"Eas":zone="EST";break;case"Mou":zone="MST";break;case"Pac":zone="PST"}return sendThis=[d,zone]};$scope.OPchosen=function(opChosen){var opI=$scope.OPsForTapeDown.map(function(o){return o.objective_point_id}).indexOf(opChosen.objective_point_id);if(opChosen.selected)$scope.OPMeasure={},$scope.OPMeasure.op_name=opChosen.name,$scope.OPMeasure.elevation=opChosen.elev_ft,$scope.OPMeasure.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==opChosen.vdatum_id})[0].datum_abbreviation,$scope.OPMeasure.objective_point_id=opChosen.objective_point_id,$scope.tapeDownTable.push($scope.OPMeasure),$scope.aRetrieval.vdatum_id=opChosen.vdatum_id;else{var removeOPMeas=$uibModal.open({backdrop:"static",keyboard:!1,template:'<div class="modal-header"><h3 class="modal-title">Remove OP Measure</h3></div><div class="modal-body"><p>Are you sure you want to remove this OP Measurement from this sensor?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close("remove")},$scope.cancel=function(){$uibModalInstance.close("cancel")}}],size:"sm"});removeOPMeas.result.then(function(yesOrNo){if("remove"==yesOrNo){var tapeDownToRemove=$scope.tapeDownTable.filter(function(a){return a.objective_point_id==opChosen.objective_point_id})[0],tInd=$scope.tapeDownTable.map(function(o){return o.objective_point_id}).indexOf(tapeDownToRemove.objective_point_id);void 0!==tapeDownToRemove.op_measurements_id&&$scope.removeOPList.push(tapeDownToRemove.op_measurements_id),$scope.tapeDownTable.splice(tInd,1),0===$scope.tapeDownTable.length&&($scope.aRetrieval.vdatum_id=0,$scope.aRetrieval.gs_elevation="",$scope.aRetrieval.ws_elevation="",$scope.aRetrieval.sensor_elevation="")}else $scope.OPsForTapeDown[opI].selected=!0})}},OP_MEASURE.getInstStatOPMeasures({instrumentStatusId:$scope.depSensStatus.instrument_status_id}).$promise.then(function(response){for(var r=0;r<response.length;r++){var sensMeasures=response[r],whichOP=siteOPs.filter(function(op){return op.objective_point_id==response[r].objective_point_id})[0];sensMeasures.elevation=whichOP.elev_ft,sensMeasures.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==whichOP.vdatum_id})[0].datum_abbreviation,sensMeasures.op_name=whichOP.name,$scope.DEPtapeDownTable.push(sensMeasures)}});var dtparts=getTimeZoneStamp();$scope.aRetrieval={time_stamp:dtparts[0],time_zone:dtparts[1],instrument_id:$scope.aSensor.instrument_id,member_id:$cookies.get("mID")},$scope.Retriever=allMembers.filter(function(am){return am.member_id==$cookies.get("mID")})[0];var dealWithTimeStampb4Send=function(){if("UTC"!=$scope.aRetrieval.time_zone){var utcDateTime=new Date($scope.aRetrieval.time_stamp).toUTCString();$scope.aRetrieval.time_stamp=utcDateTime,$scope.aRetrieval.time_zone="UTC"}else{var i=$scope.aRetrieval.time_stamp.toString().indexOf("GMT")+3;$scope.aRetrieval.time_stamp=$scope.aRetrieval.time_stamp.toString().substring(0,i)}};$scope.cancel=function(){$rootScope.stateIsLoading.showLoading=!1,$uibModalInstance.dismiss("cancel")};var depTimeStampb4Send=function(){var returnThis,i=$scope.depSensStatus.time_stamp.toString().indexOf("GMT")+3;return returnThis=$scope.depSensStatus.time_stamp.toString().substring(0,i)};$scope.cancel=function(){$rootScope.stateIsLoading.showLoading=!1,$uibModalInstance.dismiss("cancel")},$scope.retrieveS=function(valid){if(valid){dealWithTimeStampb4Send();var depSenTS=depTimeStampb4Send(),retSenTS=angular.copy($scope.aRetrieval.time_stamp.replace(/\,/g,""));if(new Date(retSenTS)<new Date(depSenTS)){var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The retrieval date must be after the deployed date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){$scope.aRetrieval.time_stamp="",$scope.aRetrieval.time_stamp=getTimeZoneStamp()[0],$scope.aRetrieval.time_zone=getTimeZoneStamp()[1],angular.element("#retrievalDate").trigger("focus")})}else{$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var updatedSensor={},createRetSens={};INSTRUMENT.update({id:$scope.aSensor.instrument_id},$scope.aSensor).$promise.then(function(response){updatedSensor=response,updatedSensor.deploymentType=$scope.aSensor.deploymentType,updatedSensor.housingType=$scope.aSensor.housingType,updatedSensor.sensorBrand=$scope.aSensor.sensorBrand,updatedSensor.sensorType=$scope.aSensor.sensorType,updatedSensor.instCollection=$scope.collectCondList.filter(function(i){return i.id===$scope.aSensor.inst_collection_id})[0].condition,INSTRUMENT_STATUS.save($scope.aRetrieval).$promise.then(function(statResponse){if($scope.tapeDownTable.length>0)for(var t=0;t<$scope.tapeDownTable.length;t++){var thisTape=$scope.tapeDownTable[t];thisTape.instrument_status_id=statResponse.instrument_status_id,OP_MEASURE.save(thisTape).$promise}createRetSens=statResponse,createRetSens.status=2==statResponse.status_type_id?"Retrieved":"Lost",updatedSensor.instrument_status=[createRetSens,thisSensor.instrument_status[0]],$timeout(function(){toastr.success("Sensor retrieved");var state="retrieved",sendBack=[updatedSensor,state];$uibModalInstance.close(sendBack)})})})}}},$rootScope.stateIsLoading.showLoading=!1}]),ModalControllers.controller("fullSensorModalCtrl",["$scope","$rootScope","$filter","$timeout","$cookies","$http","$uibModalInstance","$uibModal","SERVER_URL","FILE_STAMP","allDepDropdowns","agencyList","Site_Files","allStatusTypes","allInstCollCond","allEvents","allDepTypes","thisSensor","SensorSite","siteOPs","allMembers","INSTRUMENT","INSTRUMENT_STATUS","DATA_FILE","FILE","SOURCE","OP_MEASURE",function($scope,$rootScope,$filter,$timeout,$cookies,$http,$uibModalInstance,$uibModal,SERVER_URL,FILE_STAMP,allDepDropdowns,agencyList,Site_Files,allStatusTypes,allInstCollCond,allEvents,allDepTypes,thisSensor,SensorSite,siteOPs,allMembers,INSTRUMENT,INSTRUMENT_STATUS,DATA_FILE,FILE,SOURCE,OP_MEASURE){$scope.serverURL=SERVER_URL,$scope.fullSenfileIsUploading=!1,$scope.sensorTypeList=allDepDropdowns[0],$scope.sensorBrandList=allDepDropdowns[1],$scope.houseTypeList=allDepDropdowns[2],$scope.fileTypeList=allDepDropdowns[3],$scope.vertDatumList=allDepDropdowns[4],$scope.allSFiles=Site_Files.getAllSiteFiles(),$scope.sensorFiles="empty"!==thisSensor?$scope.allSFiles.filter(function(sf){return sf.instrument_id==thisSensor.instrument_id}):[],$scope.sensImageFiles=$scope.sensorFiles.filter(function(hf){return 1===hf.filetype_id}),$scope.showFileForm=!1,$scope.showNWISFileForm=!1,$scope.sensorDataNWIS=!1,$scope.collectCondList=allInstCollCond,$scope.OPsPresent=siteOPs.length>0?!0:!1,$scope.DEPOPsForTapeDown=angular.copy(siteOPs),$scope.RETOPsForTapeDown=angular.copy(siteOPs),$scope.depTypeList=allDepTypes,$scope.filteredDeploymentTypes=[],$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.statusTypeList=allStatusTypes.filter(function(s){return"Retrieved"==s.status||"Lost"==s.status}),$scope.IntervalType={type:"Seconds"},$scope.view={DEPval:"detail",RETval:"detail"};var getTimeZoneStamp=function(dsent){var d,sendThis=[];d=void 0!==dsent?new Date(dsent):new Date;var offset=d.toString().substring(35),zone="";switch(offset.substr(0,3)){case"Cen":zone="CST";break;case"Eas":zone="EST";break;case"Mou":zone="MST";break;case"Pac":zone="PST"}return sendThis=[d,zone]},getDateTimeParts=function(d){var theDate,isDate="[object Date]"===Object.prototype.toString.call(d);if(isDate===!1){var y=d.substr(0,4),m=d.substr(5,2)-1,da=d.substr(8,2),h=d.substr(11,2),mi=d.substr(14,2),sec=d.substr(17,2);theDate=new Date(y,m,da,h,mi,sec)}else theDate=d;return theDate};$scope.thisSensorSite=SensorSite,$scope.userRole=$cookies.get("usersRole"),$scope.sensor=angular.copy(thisSensor),$scope.sensorDataNWIS=2==$scope.sensor.sensor_type_id||5==$scope.sensor.sensor_type_id||6==$scope.sensor.sensor_type_id?!0:!1,$scope.DeployedSensorStat=angular.copy(thisSensor.instrument_status.filter(function(inst){return"Deployed"===inst.status})[0]),$scope.DeployedSensorStat.time_stamp=getDateTimeParts($scope.DeployedSensorStat.time_stamp),$scope.Deployer=allMembers.filter(function(m){return m.member_id===$scope.DeployedSensorStat.member_id})[0],$scope.DEPremoveOPList=[],$scope.DEPtapeDownTable=[],$scope.DEPOPchosen=function(DEPopChosen){var opI=$scope.DEPOPsForTapeDown.map(function(o){return o.objective_point_id}).indexOf(DEPopChosen.objective_point_id);if(DEPopChosen.selected)$scope.DEPOPMeasure={},$scope.DEPOPMeasure.op_name=DEPopChosen.name,$scope.DEPOPMeasure.elevation=DEPopChosen.elev_ft,$scope.DEPOPMeasure.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==DEPopChosen.vdatum_id})[0].datum_abbreviation,$scope.DEPOPMeasure.objective_point_id=DEPopChosen.objective_point_id,$scope.depTapeCopy.push($scope.DEPOPMeasure),$scope.depStuffCopy[1].vdatum_id=DEPopChosen.vdatum_id;else{var DEPremoveOPMeas=$uibModal.open({backdrop:"static",keyboard:!1,template:'<div class="modal-header"><h3 class="modal-title">Remove OP Measure</h3></div><div class="modal-body"><p>Are you sure you want to remove this OP Measurement from this deployed sensor?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="DEPok()">OK</button><button class="btn btn-primary" ng-click="DEPcancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.DEPok=function(){$uibModalInstance.close("remove")},$scope.DEPcancel=function(){$uibModalInstance.close("cancel")}}],size:"sm"});DEPremoveOPMeas.result.then(function(yesOrNo){if("remove"==yesOrNo){var DEPtapeDownToRemove=$scope.depTapeCopy.filter(function(a){return a.objective_point_id==DEPopChosen.objective_point_id})[0],DEPtInd=$scope.depTapeCopy.map(function(o){return o.objective_point_id}).indexOf(DEPtapeDownToRemove.objective_point_id);void 0!==DEPtapeDownToRemove.op_measurements_id&&$scope.DEPremoveOPList.push(DEPtapeDownToRemove.op_measurements_id),$scope.depTapeCopy.splice(DEPtInd,1),0===$scope.depTapeCopy.length&&($scope.depStuffCopy[1].vdatum_id=0,$scope.depStuffCopy[1].gs_elevation="",$scope.depStuffCopy[1].ws_elevation="",$scope.depStuffCopy[1].sensor_elevation="")}else $scope.DEPOPsForTapeDown[opI].selected=!0})}},$scope.OPsPresent&&OP_MEASURE.getInstStatOPMeasures({instrumentStatusId:$scope.DeployedSensorStat.instrument_status_id}).$promise.then(function(DEPresponse){for(var r=0;r<DEPresponse.length;r++){var DEPsensMeasures=DEPresponse[r],whichOP=siteOPs.filter(function(op){return op.objective_point_id==DEPresponse[r].objective_point_id})[0];DEPsensMeasures.elevation=whichOP.elev_ft,DEPsensMeasures.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==whichOP.vdatum_id})[0].datum_abbreviation,DEPsensMeasures.op_name=$scope.DEPOPsForTapeDown.filter(function(op){return op.objective_point_id==DEPresponse[r].objective_point_id})[0].name,$scope.DEPtapeDownTable.push(DEPsensMeasures)}for(var i=0;i<$scope.DEPOPsForTapeDown.length;i++){for(var y=0;y<DEPresponse.length;y++)DEPresponse[y].objective_point_id==$scope.DEPOPsForTapeDown[i].objective_point_id?($scope.DEPOPsForTapeDown[i].selected=!0,y=DEPresponse.length):$scope.DEPOPsForTapeDown[i].selected=!1;0===DEPresponse.length&&($scope.DEPOPsForTapeDown[i].selected=!1)}}),$scope.RetrievedSensorStat=angular.copy(thisSensor.instrument_status.filter(function(inst){return"Retrieved"===inst.status})[0]),void 0===$scope.RetrievedSensorStat?($scope.RetrievedSensorStat=angular.copy(thisSensor.instrument_status.filter(function(inst){return"Lost"===inst.status})[0]),$scope.mostRecentStatus="Lost"):$scope.mostRecentStatus="Retrieved",void 0!==$scope.RetrievedSensorStat.vdatum_id&&$scope.RetrievedSensorStat.vdatum_id>0&&($scope.RetrievedSensorStat.vdatumName=$scope.vertDatumList.filter(function(vd){return vd.datum_id==$scope.RetrievedSensorStat.vdatum_id})[0].datum_abbreviation),$scope.RetrievedSensorStat.time_stamp=getDateTimeParts($scope.RetrievedSensorStat.time_stamp),$scope.Retriever=allMembers.filter(function(m){return m.member_id===$scope.RetrievedSensorStat.member_id})[0],$scope.RETremoveOPList=[],$scope.RETtapeDownTable=[],$scope.RETOPchosen=function(RETopChosen){var opI=$scope.RETOPsForTapeDown.map(function(o){return o.objective_point_id}).indexOf(RETopChosen.objective_point_id);if(RETopChosen.selected)$scope.RETOPMeasure={},$scope.RETOPMeasure.op_name=RETopChosen.name,$scope.RETOPMeasure.elevation=RETopChosen.elev_ft,$scope.RETOPMeasure.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==RETopChosen.vdatum_id})[0].datum_abbreviation,$scope.RETOPMeasure.objective_point_id=RETopChosen.objective_point_id,$scope.retTapeCopy.push($scope.RETOPMeasure),$scope.retStuffCopy[1].vdatum_id=RETopChosen.vdatum_id;else{var RETremoveOPMeas=$uibModal.open({backdrop:"static",keyboard:!1,template:'<div class="modal-header"><h3 class="modal-title">Remove OP Measure</h3></div><div class="modal-body"><p>Are you sure you want to remove this OP Measurement from this retrieved sensor?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="RETok()">OK</button><button class="btn btn-primary" ng-click="RETcancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.RETok=function(){$uibModalInstance.close("remove")},$scope.RETcancel=function(){$uibModalInstance.close("cancel")}}],size:"sm"});RETremoveOPMeas.result.then(function(yesOrNo){if("remove"==yesOrNo){var RETtapeDownToRemove=$scope.retTapeCopy.filter(function(a){return a.objective_point_id==RETopChosen.objective_point_id})[0],RETtInd=$scope.retTapeCopy.map(function(o){return o.objective_point_id}).indexOf(RETtapeDownToRemove.objective_point_id);$scope.RETremoveOPList.push(RETtapeDownToRemove.op_measurements_id),$scope.retTapeCopy.splice(RETtInd,1),0===$scope.retTapeCopy.length&&($scope.retStuffCopy[1].vdatum_id=0,$scope.retStuffCopy[1].gs_elevation="",$scope.retStuffCopy[1].ws_elevation="",$scope.retStuffCopy[1].sensor_elevation="")}else $scope.RETOPsForTapeDown[opI].selected=!0})}},$scope.OPsPresent&&OP_MEASURE.getInstStatOPMeasures({instrumentStatusId:$scope.RetrievedSensorStat.instrument_status_id}).$promise.then(function(RETresponse){for(var r=0;r<RETresponse.length;r++){var RETsensMeasures=RETresponse[r],whichOP=siteOPs.filter(function(op){return op.objective_point_id==RETresponse[r].objective_point_id})[0];RETsensMeasures.elevation=whichOP.elev_ft,RETsensMeasures.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==whichOP.vdatum_id})[0].datum_abbreviation,RETsensMeasures.op_name=$scope.RETOPsForTapeDown.filter(function(op){return op.objective_point_id==RETresponse[r].objective_point_id})[0].name,$scope.RETtapeDownTable.push(RETsensMeasures)}for(var i=0;i<$scope.RETOPsForTapeDown.length;i++){for(var y=0;y<RETresponse.length;y++)RETresponse[y].objective_point_id==$scope.RETOPsForTapeDown[i].objective_point_id?($scope.RETOPsForTapeDown[i].selected=!0,y=RETresponse.length):$scope.RETOPsForTapeDown[i].selected=!1;0===RETresponse.length&&($scope.RETOPsForTapeDown[i].selected=!1)}}),$scope.EventName=allEvents.filter(function(e){return e.event_id===$scope.sensor.event_id})[0].event_name,$scope.s={depOpen:!1,retOpen:!0,sFileOpen:!1,NWISFileOpen:!1},$scope.dateOptions={startingDay:1,showWeeks:!1},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.getDepTypes=function(sensType){$scope.filteredDeploymentTypes=[];var matchingSensDeplist=$scope.sensorTypeList.filter(function(sd){return sd.sensor_type_id==sensType.sensor_type_id})[0];$scope.filteredDeploymentTypes=matchingSensDeplist.deploymenttypes},$scope.getDepTypes($scope.sensor),$scope.cancel=function(){$timeout(function(){var sendBack=[thisSensor];$uibModalInstance.close(sendBack)})};var dealWithTimeStampb4Send=function(w){var utcDateTime,i;"deployed"===w?"UTC"!=$scope.depStuffCopy[1].time_zone?(utcDateTime=new Date($scope.depStuffCopy[1].time_stamp).toUTCString(),$scope.depStuffCopy[1].time_stamp=utcDateTime,$scope.depStuffCopy[1].time_zone="UTC"):(i=$scope.depStuffCopy[1].time_stamp.toString().indexOf("GMT")+3,$scope.depStuffCopy[1].time_stamp=$scope.depStuffCopy[1].time_stamp.toString().substring(0,i)):"UTC"!=$scope.retStuffCopy[1].time_zone?(utcDateTime=new Date($scope.retStuffCopy[1].time_stamp).toUTCString(),$scope.retStuffCopy[1].time_stamp=utcDateTime,$scope.retStuffCopy[1].time_zone="UTC"):(i=$scope.retStuffCopy[1].time_stamp.toString().indexOf("GMT")+3,$scope.retStuffCopy[1].time_stamp=$scope.retStuffCopy[1].time_stamp.toString().substring(0,i))};if($scope.wannaEditDep=function(){$scope.view.DEPval="edit",$scope.depStuffCopy=[angular.copy($scope.sensor),angular.copy($scope.DeployedSensorStat)],$scope.depTapeCopy=angular.copy($scope.DEPtapeDownTable)},$scope.saveDeployed=function(valid){if(valid){var updatedSensor={},updatedSenStat={};"Minutes"==$scope.IntervalType.type&&($scope.depStuffCopy[0].interval=60*$scope.depStuffCopy[0].interval),dealWithTimeStampb4Send("deployed"),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INSTRUMENT.update({id:$scope.depStuffCopy[0].instrument_id},$scope.depStuffCopy[0]).$promise.then(function(response){updatedSensor=response,updatedSensor.deploymentType=$scope.depStuffCopy[0].deployment_type_id>0?$scope.depTypeList.filter(function(d){return d.deployment_type_id===$scope.depStuffCopy[0].deployment_type_id})[0].method:"",updatedSensor.housingType=$scope.depStuffCopy[0].housing_type_id>0?$scope.houseTypeList.filter(function(h){return h.housing_type_id===$scope.depStuffCopy[0].housing_type_id})[0].type_name:"",updatedSensor.sensorBrand=$scope.sensorBrandList.filter(function(s){return s.sensor_brand_id===$scope.depStuffCopy[0].sensor_brand_id})[0].brand_name,updatedSensor.sensorType=$scope.sensorTypeList.filter(function(t){return t.sensor_type_id===$scope.depStuffCopy[0].sensor_type_id})[0].sensor,updatedSensor.instCollection=$scope.collectCondList.filter(function(i){return i.id===$scope.depStuffCopy[0].inst_collection_id})[0].condition,INSTRUMENT_STATUS.update({id:$scope.depStuffCopy[1].instrument_status_id},$scope.depStuffCopy[1]).$promise.then(function(statResponse){for(var rt=0;rt<$scope.DEPremoveOPList.length;rt++){var DEPidToRemove=$scope.DEPremoveOPList[rt];OP_MEASURE["delete"]({id:DEPidToRemove}).$promise}$scope.DEPtapeDownTable=$scope.depTapeCopy.length>0?[]:$scope.DEPtapeDownTable;for(var at=0;at<$scope.depTapeCopy.length;at++){var DEPthisTape=$scope.depTapeCopy[at];void 0!==DEPthisTape.op_measurements_id?OP_MEASURE.update({id:DEPthisTape.op_measurements_id},DEPthisTape).$promise.then(function(tapeResponse){tapeResponse.op_name=DEPthisTape.op_name,tapeResponse.Vdatum=DEPthisTape.Vdatum,$scope.DEPtapeDownTable.push(tapeResponse)}):(DEPthisTape.instrument_status_id=statResponse.instrument_status_id,OP_MEASURE.save(DEPthisTape).$promise.then(function(tapeResponse){tapeResponse.op_name=DEPthisTape.op_name,tapeResponse.Vdatum=DEPthisTape.Vdatum,$scope.DEPtapeDownTable.push(tapeResponse)}))}updatedSenStat=statResponse,updatedSenStat.status="Deployed",$scope.sensor=updatedSensor;var allStatusHolder=thisSensor.instrument_status;thisSensor=updatedSensor,$scope.DeployedSensorStat=updatedSenStat,$scope.DeployedSensorStat.time_stamp=getDateTimeParts($scope.DeployedSensorStat.time_stamp),thisSensor.instrument_status=allStatusHolder;var ind=thisSensor.instrument_status.map(function(i){return i.status_type_id}).indexOf(1);thisSensor.instrument_status[ind]=$scope.DeployedSensorStat,$scope.sensor.instrument_status=thisSensor.instrument_status,$scope.depStuffCopy=[],$scope.depTapeCopy=[],$scope.IntervalType={type:"Seconds"},$scope.view.DEPval="detail",toastr.success("Sensor Updated")},function(errorResponse){toastr.error("error saving sensor status: "+errorResponse.statusText)})},function(errorResponse){toastr.error("error saving sensor: "+errorResponse.statusText)})}},$scope.cancelDepEdit=function(){$scope.view.DEPval="detail",$scope.depStuffCopy=[],$scope.depTapeCopy=[];for(var i=0;i<$scope.DEPOPsForTapeDown.length;i++){for(var y=0;y<$scope.DEPtapeDownTable.length;y++)$scope.DEPtapeDownTable[y].objective_point_id==$scope.DEPOPsForTapeDown[i].objective_point_id?($scope.DEPOPsForTapeDown[i].selected=!0,y=$scope.DEPtapeDownTable.length):$scope.DEPOPsForTapeDown[i].selected=!1;0===$scope.DEPtapeDownTable.length&&($scope.DEPOPsForTapeDown[i].selected=!1)}},$scope.wannaEditRet=function(){$scope.view.RETval="edit",$scope.retStuffCopy=[angular.copy($scope.sensor),angular.copy($scope.RetrievedSensorStat)],$scope.retTapeCopy=angular.copy($scope.RETtapeDownTable)},$scope.saveRetrieved=function(valid){if(valid){var updatedRetSensor={};dealWithTimeStampb4Send("retrieved"),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INSTRUMENT.update({id:$scope.retStuffCopy[0].instrument_id},$scope.retStuffCopy[0]).$promise.then(function(response){updatedRetSensor=response,updatedRetSensor.deploymentType=$scope.retStuffCopy[0].deployment_type_id>0?$scope.depTypeList.filter(function(d){return d.deployment_type_id===$scope.retStuffCopy[0].deployment_type_id})[0].method:"",updatedRetSensor.housingType=$scope.retStuffCopy[0].housing_type_id>0?$scope.houseTypeList.filter(function(h){return h.housing_type_id===$scope.retStuffCopy[0].housing_type_id})[0].type_name:"",updatedRetSensor.sensorBrand=$scope.sensorBrandList.filter(function(s){return s.sensor_brand_id===$scope.retStuffCopy[0].sensor_brand_id})[0].brand_name,updatedRetSensor.sensorType=$scope.sensorTypeList.filter(function(t){return t.sensor_type_id===$scope.retStuffCopy[0].sensor_type_id})[0].sensor,updatedRetSensor.instCollection=$scope.collectCondList.filter(function(i){return i.id===$scope.retStuffCopy[0].inst_collection_id})[0].condition,$scope.sensor=updatedRetSensor;var statsHolder=thisSensor.instrument_status;thisSensor=updatedRetSensor,thisSensor.instrument_status=statsHolder,INSTRUMENT_STATUS.update({id:$scope.retStuffCopy[1].instrument_status_id},$scope.retStuffCopy[1]).$promise.then(function(statResponse){$scope.mostRecentStatus=2==statResponse.status_type_id?"Retrieved":"Lost",$scope.RetrievedSensorStat=statResponse,$scope.RetrievedSensorStat.status=2==statResponse.status_type_id?"Retrieved":"Lost",$scope.RetrievedSensorStat.time_stamp=getDateTimeParts($scope.RetrievedSensorStat.time_stamp),thisSensor.instrument_status[0]=$scope.RetrievedSensorStat;for(var rt=0;rt<$scope.RETremoveOPList.length;rt++){var RETidToRemove=$scope.RETremoveOPList[rt];OP_MEASURE["delete"]({id:RETidToRemove}).$promise}$scope.RETtapeDownTable=$scope.retTapeCopy.length>0?[]:$scope.RETtapeDownTable;for(var at=0;at<$scope.retTapeCopy.length;at++){var RETthisTape=$scope.retTapeCopy[at];void 0!==RETthisTape.op_measurements_id?OP_MEASURE.update({id:RETthisTape.op_measurements_id},RETthisTape).$promise.then(function(tapeResponse){tapeResponse.op_name=RETthisTape.op_name,tapeResponse.Vdatum=RETthisTape.Vdatum,$scope.RETtapeDownTable.push(tapeResponse)}):(RETthisTape.instrument_status_id=statResponse.instrument_status_id,OP_MEASURE.save(RETthisTape).$promise.then(function(tapeResponse){tapeResponse.op_name=RETthisTape.op_name,tapeResponse.Vdatum=RETthisTape.Vdatum,$scope.RETtapeDownTable.push(tapeResponse)}))}$scope.retStuffCopy=[],$scope.retTapeCopy=[],$scope.view.RETval="detail",toastr.success("Sensor updated")},function(errorResponse){toastr.error("error saving sensor status: "+errorResponse.statusText)})},function(errorResponse){toastr.error("error saving sensor: "+errorResponse.statusText)})}},$scope.cancelRetEdit=function(){$scope.view.RETval="detail",$scope.retStuffCopy=[],$scope.retTapeCopy=[];for(var i=0;i<$scope.RETOPsForTapeDown.length;i++){for(var y=0;y<$scope.RETtapeDownTable.length;y++)$scope.RETtapeDownTable[y].objective_point_id==$scope.RETOPsForTapeDown[i].objective_point_id?($scope.RETOPsForTapeDown[i].selected=!0,y=$scope.RETtapeDownTable.length):$scope.RETOPsForTapeDown[i].selected=!1;0===$scope.RETtapeDownTable.length&&($scope.RETOPsForTapeDown[i].selected=!1)}},$scope.deleteS=function(){var DeleteModalInstance=$uibModal.open({backdrop:"static",keyboard:!1,templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.sensor},what:function(){return"Sensor"}}});DeleteModalInstance.result.then(function(sensorToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),INSTRUMENT["delete"]({id:sensorToRemove.instrument_id}).$promise.then(function(){$scope.sensorFiles=[],$scope.sensImageFiles=[];for(var l=$scope.allSFiles.length;l--;)$scope.allSFiles[l].instrument_id==sensorToRemove.instrument_id&&$scope.allSFiles.splice(l,1);Site_Files.setAllSiteFiles($scope.allSFiles),toastr.success("Sensor Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.stamp=FILE_STAMP.getStamp(),$scope.fileItemExists=!0,$scope.saveFileUpload=function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.sFileIsUploading=!0;var fileParts={FileEntity:{file_id:$scope.aFile.file_id,name:$scope.aFile.name,description:$scope.aFile.description,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,file_date:$scope.aFile.file_date,hwm_id:$scope.aFile.hwm_id,site_id:$scope.aFile.site_id,filetype_id:$scope.aFile.filetype_id,source_id:$scope.aFile.source_id,path:$scope.aFile.path,data_file_id:$scope.aFile.data_file_id,instrument_id:$scope.aFile.instrument_id,photo_date:$scope.aFile.photo_date,is_nwis:$scope.aFile.is_nwis,objective_point_id:$scope.aFile.objective_point_id},File:void 0!==$scope.aFile.File1?$scope.aFile.File1:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),FILE_STAMP.setStamp(),$scope.stamp=FILE_STAMP.getStamp(),$scope.isPhoto=$scope.aFile.File1.type.indexOf("image")>-1?!0:!1,$scope.aFile.name=fresponse.name,$scope.aFile.path=fresponse.path,void 0!==$scope.aFile.File1&&($scope.aFile.File=$scope.aFile.File1,$scope.aFile.File1=void 0),fresponse.fileBelongsTo=2==$scope.aFile.filetype_id?"DataFile File":"Sensor File",1===fresponse.filetype_id&&($scope.sensImageFiles.splice($scope.existIMGFileIndex,1),$scope.sensImageFiles.push(fresponse)),$scope.sensorFiles[$scope.existFileIndex]=fresponse,$scope.allSFiles[$scope.allSFileIndex]=fresponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.sFileIsUploading=!1,$scope.fileItemExists=!0},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})},$scope.showFile=function(file){if($scope.fileTypes=$scope.fileTypeList,$scope.agencies=agencyList,$scope.existFileIndex=-1,$scope.existIMGFileIndex=-1,$scope.allSFileIndex=-1,$scope.aFile={},$scope.aSource={},$scope.datafile={},0!==file){if($scope.existFileIndex=$scope.sensorFiles.indexOf(file),$scope.allSFileIndex=$scope.allSFiles.indexOf(file),$scope.existIMGFileIndex=$scope.sensImageFiles.length>0?$scope.sensImageFiles.indexOf(file):-1,$scope.aFile=angular.copy(file),FILE.getFileItem({id:$scope.aFile.file_id}).$promise.then(function(response){$scope.fileItemExists=response.Length>0?!0:!1}),$scope.aFile.fileType=$scope.fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,void 0!==$scope.aFile.name){var fI=$scope.aFile.name.lastIndexOf("."),fileExt=$scope.aFile.name.substring(fI+1);$scope.isPhoto=fileExt.match(/(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)?!0:!1}$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),void 0!==file.source_id&&SOURCE.query({id:file.source_id}).$promise.then(function(s){$scope.aSource=s,$scope.aSource.FULLname=$scope.aSource.source_name,1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}),void 0!==file.data_file_id&&($scope.ApprovalInfo={},DATA_FILE.query({id:file.data_file_id}).$promise.then(function(df){$scope.datafile=df,$scope.processor=allMembers.filter(function(m){return m.member_id==$scope.datafile.processor_id})[0],$scope.datafile.collect_date=new Date($scope.datafile.collect_date),$scope.datafile.good_start=getDateTimeParts($scope.datafile.good_start),$scope.datafile.good_end=getDateTimeParts($scope.datafile.good_end),void 0!==df.approval_id&&null!==df.approval_id&&df.approval_id>=1&&DATA_FILE.getDFApproval({id:df.data_file_id},function(approvalResponse){$scope.ApprovalInfo.approvalDate=new Date(approvalResponse.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==approvalResponse.member_id})[0]},function(errorResponse){toastr.error("Error getting data file approval information")})}))}else{$scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname,$scope.processor=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0];var dt=getTimeZoneStamp();$scope.datafile.collect_date=dt[0],$scope.datafile.time_zone=dt[1],$scope.datafile.good_start=new Date,$scope.datafile.good_end=new Date}$scope.showFileForm=!0,$scope.updateAgencyForCaption=function(){1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}},$scope.createFile=function(valid){if(2==$scope.aFile.filetype_id){var s=$scope.datafile.good_start,e=$scope.datafile.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',
controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}}if(valid)if($scope.fullSenfileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",2==$scope.aFile.filetype_id){if("UTC"!=$scope.datafile.time_zone){var utcStartDateTime=new Date($scope.datafile.good_start).toUTCString(),utcEndDateTime=new Date($scope.datafile.good_end).toUTCString();$scope.datafile.good_start=utcStartDateTime,$scope.datafile.good_end=utcEndDateTime,$scope.datafile.time_zone="UTC"}else{var si=$scope.datafile.good_start.toString().indexOf("GMT")+3,ei=$scope.datafile.good_end.toString().indexOf("GMT")+3;$scope.datafile.good_start=$scope.datafile.good_start.toString().substring(0,si),$scope.datafile.good_end=$scope.datafile.good_end.toString().substring(0,ei)}$scope.datafile.instrument_id=thisSensor.instrument_id,$scope.datafile.processor_id=$cookies.get("mID"),DATA_FILE.save($scope.datafile).$promise.then(function(dfResonse){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,description:$scope.aFile.description,site_id:$scope.thisSensorSite.site_id,data_file_id:dfResonse.data_file_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,instrument_id:thisSensor.instrument_id},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="DataFile File",$scope.sensorFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),1===fresponse.filetype_id&&$scope.sensImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.fullSenfileIsUploading=!1},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving data file: "+errorResponse.statusText)})}else{var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,photo_date:$scope.aFile.photo_date,description:$scope.aFile.description,site_id:$scope.thisSensorSite.site_id,source_id:response.source_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,instrument_id:thisSensor.instrument_id},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Sensor File",$scope.sensorFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),1===fresponse.filetype_id&&$scope.sensImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.fullSenfileIsUploading=!1},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving source info: "+errorResponse.statusText)})}},$scope.saveFile=function(valid){if(2==$scope.aFile.filetype_id){var s=$scope.datafile.good_start,e=$scope.datafile.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}}if(valid){$scope.fullSenfileIsUploading=!0;{$scope.aFile.fileBelongsTo}if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.datafile.data_file_id){if("UTC"!=$scope.datafile.time_zone){var utcStartDateTime=new Date($scope.datafile.good_start).toUTCString(),utcEndDateTime=new Date($scope.datafile.good_end).toUTCString();$scope.datafile.good_start=utcStartDateTime,$scope.datafile.good_end=utcEndDateTime,$scope.datafile.time_zone="UTC"}else{var si=$scope.datafile.good_start.toString().indexOf("GMT")+3,ei=$scope.datafile.good_end.toString().indexOf("GMT")+3;$scope.datafile.good_start=$scope.datafile.good_start.toString().substring(0,si),$scope.datafile.good_end=$scope.datafile.good_end.toString().substring(0,ei)}DATA_FILE.update({id:$scope.datafile.data_file_id},$scope.datafile).$promise.then(function(){FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="DataFile File",$scope.sensorFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.fullSenfileIsUploading=!1},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving data file: "+errorResponse.statusText)})}else{var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){$scope.aFile.source_id=response.source_id,FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="Sensor File",$scope.sensorFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.fullSenfileIsUploading=!1},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving source: "+errorResponse.statusText)})}}},$scope.deleteFile=function(){var DeleteModalInstance=$uibModal.open({backdrop:"static",keyboard:!1,templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.sensorFiles.splice($scope.existFileIndex,1),$scope.allSFiles.splice($scope.allSFileIndex,1),$scope.sensImageFiles.splice($scope.existIMGFileIndex,1),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelFile=function(){$scope.aFile={},$scope.aSource={},$scope.datafile={},$scope.showFileForm=!1},$scope.approveDF=function(){var thisDF=$scope.datafile,approveModal=$uibModal.open({template:"<div class='modal-header'><h3 class='modal-title'>Approve Data File</h3></div><div class='modal-body'><p>Are you ready to approve this Data File?</p></div><div class='modal-footer'><button class='btn btn-primary' ng-click='approveIt()'>Approve</button><button class='btn btn-warning' ng-click='cancel()'>Cancel</button></div>",controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.approveIt=function(){$uibModalInstance.close(thisDF)}}],size:"sm"});approveModal.result.then(function(df){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),DATA_FILE.approveDF({id:df.data_file_id}).$promise.then(function(approvalResponse){df.approval_id=approvalResponse.approval_id,$scope.datafile=df,toastr.success("Data File Approved"),$scope.ApprovalInfo.approvalDate=new Date(approvalResponse.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==approvalResponse.member_id})[0]},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.unApproveDF=function(){var thisDF=$scope.datafile,unapproveModal=$uibModal.open({template:"<div class='modal-header'><h3 class='modal-title'>Remove Approval</h3></div><div class='modal-body'><p>Are you sure you wan to unapprove this Data File?</p></div><div class='modal-footer'><button class='btn btn-primary' ng-click='unApproveIt()'>Unapprove</button><button class='btn btn-warning' ng-click='cancel()'>Cancel</button></div>",controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.unApproveIt=function(){$uibModalInstance.close(thisDF)}}],size:"sm"});unapproveModal.result.then(function(df){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),DATA_FILE.unApproveDF({id:df.data_file_id}).$promise.then(function(){df.approval_id=null,$scope.datafile=df,toastr.success("Data File Unapproved"),$scope.ApprovalInfo={}},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.sensorDataNWIS){$scope.sensorNWISFiles=[];for(var ai=$scope.sensorFiles.length-1;ai>=0;ai--)1==$scope.sensorFiles[ai].is_nwis&&($scope.sensorNWISFiles.push($scope.sensorFiles[ai]),$scope.sensorFiles.splice(ai,1));var dt=getTimeZoneStamp();$scope.NWISFile={},$scope.NWISDF={}}$scope.showNWISFile=function(f){$scope.existFileIndex=-1,$scope.allSFileIndex=-1,0!==f?($scope.existFileIndex=$scope.sensorNWISFiles.indexOf(f),$scope.allSFileIndex=$scope.allSFiles.indexOf(f),$scope.NWISFile=angular.copy(f),$scope.NWISFile.file_date=new Date($scope.NWISFile.file_date),$scope.NWISFile.FileType="Data",DATA_FILE.query({id:f.data_file_id}).$promise.then(function(df){$scope.NWISDF=df,$scope.nwisProcessor=allMembers.filter(function(m){return m.member_id==$scope.NWISDF.processor_id})[0],$scope.NWISDF.collect_date=new Date($scope.NWISDF.collect_date),$scope.NWISDF.good_start=getDateTimeParts($scope.NWISDF.good_start),$scope.NWISDF.good_end=getDateTimeParts($scope.NWISDF.good_end)})):($scope.NWISFile={file_date:new Date,filetype_id:2,name:"http://waterdata.usgs.gov/nwis/uv?site_no="+$scope.thisSensorSite.usgs_sid,path:"<link>",FileType:"Data",site_id:$scope.sensor.site_id,data_file_id:0,instrument_id:$scope.sensor.instrument_id,is_nwis:1},$scope.NWISDF={processor_id:$cookies.get("mID"),instrument_id:$scope.sensor.instrument_id,collect_date:dt[0],time_zone:dt[1],good_start:new Date,good_end:new Date},$scope.nwisProcessor=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0]),$scope.showNWISFileForm=!0};var postApprovalForNWISfile=function(DFid){DATA_FILE.approveNWISDF({id:DFid}).$promise.then(function(approvalResponse){$scope.NWISFile.approval_id=approvalResponse.approval_id})};$scope.createNWISFile=function(valid){var s=$scope.NWISDF.good_start,e=$scope.NWISDF.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}if(valid){if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json","UTC"!=$scope.NWISDF.time_zone){var utcStartDateTime=new Date($scope.NWISDF.good_start).toUTCString(),utcEndDateTime=new Date($scope.NWISDF.good_end).toUTCString();$scope.NWISDF.good_start=utcStartDateTime,$scope.NWISDF.good_end=utcEndDateTime,$scope.NWISDF.time_zone="UTC"}else{var si=$scope.NWISDF.good_start.toString().indexOf("GMT")+3,ei=$scope.NWISDF.good_end.toString().indexOf("GMT")+3;$scope.NWISDF.good_start=$scope.NWISDF.good_start.toString().substring(0,si),$scope.NWISDF.good_end=$scope.NWISDF.good_end.toString().substring(0,ei)}DATA_FILE.save($scope.NWISDF).$promise.then(function(NdfResonse){$scope.NWISFile.data_file_id=NdfResonse.data_file_id,postApprovalForNWISfile(NdfResonse.data_file_id),FILE.save($scope.NWISFile).$promise.then(function(Fresponse){toastr.success("File Data saved"),Fresponse.fileBelongsTo="DataFile File",$scope.sensorNWISFiles.push(Fresponse),$scope.allSFiles.push(Fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showNWISFileForm=!1})})}},$scope.saveNWISFile=function(valid){var s=$scope.NWISDF.good_start,e=$scope.NWISDF.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}if(valid){if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json","UTC"!=$scope.NWISDF.time_zone){var utcStartDateTime=new Date($scope.NWISDF.good_start).toUTCString(),utcEndDateTime=new Date($scope.NWISDF.good_end).toUTCString();$scope.NWISDF.good_start=utcStartDateTime,$scope.NWISDF.good_end=utcEndDateTime,$scope.NWISDF.time_zone="UTC"}else{var si=$scope.NWISDF.good_start.toString().indexOf("GMT")+3,ei=$scope.NWISDF.good_end.toString().indexOf("GMT")+3;$scope.NWISDF.good_start=$scope.NWISDF.good_start.toString().substring(0,si),$scope.NWISDF.good_end=$scope.NWISDF.good_end.toString().substring(0,ei)}DATA_FILE.update({id:$scope.NWISDF.data_file_id},$scope.NWISDF).$promise.then(function(){FILE.update({id:$scope.NWISFile.file_id},$scope.NWISFile).$promise.then(function(fileResponse){toastr.success("File Data Updated"),fileResponse.fileBelongsTo="DataFile File",$scope.sensorNWISFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showNWISFileForm=!1})})}},$scope.deleteNWISFile=function(){var DeleteModalInstance=$uibModal.open({backdrop:"static",keyboard:!1,templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.NWISFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.sensorNWISFiles.splice($scope.existFileIndex,1),$scope.allSFiles.splice($scope.allSFileIndex,1),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showNWISFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelNWISFile=function(){$scope.NWISFile={},$scope.NWISDF={},$scope.showNWISFileForm=!1},$rootScope.stateIsLoading.showLoading=!1}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("sensorCtrl",["$scope","$rootScope","$q","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","thisSite","Instrument_Service","thisSiteSensors","allSensorBrands","allAgencies","allVertDatums","allDeployTypes","allSensorTypes","allHousingTypes","allEvents","allFileTypes","INSTRUMENT","INSTRUMENT_STATUS","SITE","MEMBER","DEPLOYMENT_TYPE","STATUS_TYPE","INST_COLL_CONDITION",function($scope,$rootScope,$q,$cookies,$location,$state,$http,$uibModal,$filter,$timeout,thisSite,Instrument_Service,thisSiteSensors,allSensorBrands,allAgencies,allVertDatums,allDeployTypes,allSensorTypes,allHousingTypes,allEvents,allFileTypes,INSTRUMENT,INSTRUMENT_STATUS,SITE,MEMBER,DEPLOYMENT_TYPE,STATUS_TYPE,INST_COLL_CONDITION){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$scope.sensorCount={total:thisSiteSensors.length},$scope.deployTypeList=angular.copy(allDeployTypes);for(var tempDepTypeID=0,d=0;d<$scope.deployTypeList.length;d++)"Temperature"===$scope.deployTypeList[d].method&&(tempDepTypeID=$scope.deployTypeList[d].deployment_type_id,$scope.deployTypeList[d].method="Temperature (Met sensor)");$scope.deployTypeList.push({deployment_type_id:tempDepTypeID,method:"Temperature (Pressure Transducer)"}),$scope.sensDepTypes=allSensorTypes,$scope.showProposed=!1;for(var s=0;s<thisSiteSensors.length;s++){var correctOrderSS=[],sensorStatuses=thisSiteSensors[s].instrument_status;if(sensorStatuses.length>1){var proposedStat=sensorStatuses.filter(function(ps){return"Proposed"==ps.status})[0],deployedStat=sensorStatuses.filter(function(ps){return"Deployed"==ps.status})[0],retLostStat=sensorStatuses.filter(function(ps){return"Retrieved"==ps.status||"Lost"==ps.status})[0];retLostStat&&correctOrderSS.push(retLostStat),deployedStat&&correctOrderSS.push(deployedStat),proposedStat&&correctOrderSS.push(proposedStat)}else correctOrderSS.push(sensorStatuses[0]);thisSiteSensors[s].instrument_status=[],thisSiteSensors[s].instrument_status=correctOrderSS}$scope.SiteSensors=thisSiteSensors,Instrument_Service.setAllSiteSensors($scope.SiteSensors);var SensFileTypes=allFileTypes.filter(function(sft){return"Photo"===sft.filetype||"Data"===sft.filetype||"Historic Citation"===sft.filetype||"Field Sheets"===sft.filetype||"Level Notes"===sft.filetype||"Other"===sft.filetype||"Link"===sft.filetype||"Sketch"===sft.filetype});$scope.showHideProposed=function(){$scope.showProposed=!$scope.showProposed},$scope.AddProposed=function(){for(var Time_STAMP=new Date,dt=0;dt<$scope.deployTypeList.length;dt++)if($scope.deployTypeList[dt].selected===!0){var proposedToAdd={},propStatToAdd={};if("Temp"==$scope.deployTypeList[dt].method.substring(0,4))proposedToAdd={deployment_type_id:$scope.deployTypeList[dt].deployment_type_id,site_id:thisSite.site_id,sensor_type_id:"Temperature (Pressure Transducer)"==$scope.deployTypeList[dt].method?1:2};else{var sID=0;angular.forEach($scope.sensDepTypes,function(sdt){for(var x=0;x<sdt.deploymenttypes.length;x++)sdt.deploymenttypes[x].deployment_type_id==$scope.deployTypeList[dt].deployment_type_id&&(sID=sdt.sensor_type_id)}),proposedToAdd={deployment_type_id:$scope.deployTypeList[dt].deployment_type_id,site_id:thisSite.site_id,sensor_type_id:sID}}$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INSTRUMENT.save(proposedToAdd).$promise.then(function(response){var createdPropSensor={deployment_type_id:response.deployment_type_id,site_id:response.site_id,sensor_type_id:response.sensor_type_id,instrument_id:response.instrument_id,deploymentType:$scope.deployTypeList.filter(function(dtl){return dtl.deployment_type_id==response.deployment_type_id})[0].method,sensorType:$scope.sensDepTypes.filter(function(s){return s.sensor_type_id==response.sensor_type_id})[0].sensor};propStatToAdd={instrument_id:response.instrument_id,status_type_id:4,member_id:$cookies.get("mID"),time_stamp:Time_STAMP,time_zone:"UTC"},INSTRUMENT_STATUS.save(propStatToAdd).$promise.then(function(statResponse){propStatToAdd.status="Proposed",propStatToAdd.instrument_status_id=statResponse.instrument_status_id,createdPropSensor.instrument_status=[propStatToAdd],$scope.SiteSensors.push(createdPropSensor),$scope.sensorCount={total:$scope.SiteSensors.length};for(var dep=0;dep<$scope.deployTypeList.length;dep++)$scope.deployTypeList[dep].selected=!1;$timeout(function(){$scope.showProposed=!1,toastr.success("Proposed sensor created")})},function(errorResponse){toastr.error("Error saving Sensor: "+errorResponse.statusText)})},function(errorResponse){toastr.error("Error saving Sensor: "+errorResponse.statusText)})}},$scope.showRetrieveModal=function(sensorClicked){var indexClicked=$scope.SiteSensors.indexOf(sensorClicked),allindex=thisSiteSensors.indexOf(sensorClicked);$rootScope.stateIsLoading.showLoading=!0;var modalInstance=$uibModal.open({templateUrl:"SensorRetrievalModal.html",controller:"sensorRetrievalModalCtrl",size:"lg",backdrop:"static",windowClass:"rep-dialog",resolve:{thisSensor:function(){return 0!==sensorClicked?sensorClicked:"empty"},SensorSite:function(){return thisSite},allEventList:function(){return allEvents},siteOPs:function(){return SITE.getSiteOPs({id:thisSite.site_id}).$promise},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise},allStatusTypes:function(){return STATUS_TYPE.getAll().$promise},allInstCollCond:function(){return INST_COLL_CONDITION.getAll().$promise},allVDatumList:function(){return allVertDatums}}});modalInstance.result.then(function(retrievedSensor){if("retrieved"==retrievedSensor[1]&&($scope.SiteSensors[indexClicked]=retrievedSensor[0],thisSiteSensors[allindex]=retrievedSensor[0]),"deletedR"==retrievedSensor[1]){var indexClicked1=$scope.SiteSensors.indexOf(sensorClicked);$scope.SiteSensors.splice(indexClicked1,1),$scope.sensorCount.total=$scope.SiteSensors.length}$rootScope.stateIsLoading.showLoading=!1})},$scope.showProposedSensor=function(proposedSensorClicked){var propIndex=$scope.SiteSensors.indexOf(proposedSensorClicked),propModalInstance=$uibModal.open({templateUrl:"ProposedSensor.html",controller:["$scope","$uibModalInstance","proposedSensor",function($scope,$uibModalInstance,proposedSensor){$scope.thisProposedSensor=proposedSensor,$scope.cancel=function(){$uibModalInstance.dismiss()},$scope.deleteProposed=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return"Proposed Sensor"},what:function(){return"Proposed Sensor"}}});DeleteModalInstance.result.then(function(){$uibModalInstance.close("delete")})}}],size:"sm",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{proposedSensor:function(){return proposedSensorClicked}}});propModalInstance.result.then(function(d){"delete"==d&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),INSTRUMENT["delete"]({id:proposedSensorClicked.instrument_id}).$promise.then(function(){thisSiteSensors.splice(propIndex,1),$scope.SiteSensors=thisSiteSensors,$scope.sensorCount.total=$scope.SiteSensors.length,Instrument_Service.setAllSiteSensors($scope.SiteSensors),toastr.success("Proposed sensor deleted")},function(errorResponse){toastr.error("Error deleting proposed sensor. Refresh and try again. Error: "+errorResponse.statusText)}))})},$scope.showSensorModal=function(sensorClicked){var passAllLists=[allSensorTypes,allSensorBrands,allHousingTypes,allEvents,SensFileTypes,allVertDatums],indexClicked=$scope.SiteSensors.indexOf(sensorClicked);$rootScope.stateIsLoading.showLoading=!0;var modalInstance=$uibModal.open({templateUrl:0===sensorClicked||4===sensorClicked.instrument_status[0].status_type_id?"Sensormodal.html":"DepSensormodal.html",controller:"sensorModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{allDropdowns:function(){return passAllLists},allDepTypes:function(){return DEPLOYMENT_TYPE.getAll().$promise},thisSensor:function(){return 0!==sensorClicked?sensorClicked:"empty"},SensorSite:function(){return thisSite},siteOPs:function(){return SITE.getSiteOPs({id:thisSite.site_id}).$promise},agencyList:function(){return allAgencies},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise}}});modalInstance.result.then(function(createdSensor){var i=$scope.SiteSensors.indexOf(sensorClicked),si=thisSiteSensors.indexOf(sensorClicked);"proposedDeployed"==createdSensor[1]&&($scope.SiteSensors[i]=createdSensor[0],thisSiteSensors[si]=createdSensor[0],Instrument_Service.setAllSiteSensors($scope.SiteSensors)),"newDeployed"==createdSensor[1]&&($scope.SiteSensors.push(createdSensor[0]),$scope.sensorCount.total=$scope.SiteSensors.length,Instrument_Service.setAllSiteSensors($scope.SiteSensors)),void 0===createdSensor[1]&&($scope.SiteSensors[indexClicked]=createdSensor[0],$rootScope.stateIsLoading.showLoading=!1),"deleted"==createdSensor[1]&&($scope.SiteSensors.splice(i,1),$scope.sensorCount.total=$scope.SiteSensors.length,Instrument_Service.setAllSiteSensors($scope.SiteSensors)),$rootScope.stateIsLoading.showLoading=!1})},$scope.showFullSensorModal=function(sensorClicked){var deployedStuff=[allSensorTypes,allSensorBrands,allHousingTypes,SensFileTypes,allVertDatums],indexClicked=$scope.SiteSensors.indexOf(sensorClicked);$rootScope.stateIsLoading.showLoading=!0;var modalInstance=$uibModal.open({templateUrl:"fullSensormodal.html",controller:"fullSensorModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{allDepDropdowns:function(){return deployedStuff},allStatusTypes:function(){return STATUS_TYPE.getAll().$promise},allInstCollCond:function(){return INST_COLL_CONDITION.getAll().$promise},allEvents:function(){return allEvents},allDepTypes:function(){return DEPLOYMENT_TYPE.getAll().$promise},thisSensor:function(){return 0!==sensorClicked?sensorClicked:"empty"},SensorSite:function(){return thisSite},siteOPs:function(){return SITE.getSiteOPs({id:thisSite.site_id}).$promise},agencyList:function(){return allAgencies},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise}}});modalInstance.result.then(function(createdSensor){$scope.SiteSensors[indexClicked]=createdSensor[0],$rootScope.stateIsLoading.showLoading=!1})},$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1,void 0!==newValue?($scope.SiteSensors=thisSiteSensors.filter(function(h){return h.event_id==$cookies.get("SessionEventID")||4==h.instrument_status[0].status_type_id}),$scope.sensorCount={total:$scope.SiteSensors.length}):($scope.SiteSensors=thisSiteSensors,$scope.sensorCount={total:$scope.SiteSensors.length})})}}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("resourcesCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$filter","$uibModal","AGENCY","CONTACT_TYPE","DEPLOYMENT_PRIORITY","EVENT_STATUS","EVENT_TYPE","FILE_TYPE","HORIZONTAL_COLL_METHODS","HORIZONTAL_DATUM","HOUSING_TYPE","HWM_QUALITY","HWM_TYPE","INST_COLL_CONDITION","MARKER","NETWORK_NAME","OP_QUALITY","OP_TYPE","SENSOR_BRAND","DEPLOYMENT_TYPE","SENSOR_TYPE","NETWORK_TYPE","STATUS_TYPE","VERTICAL_COLL_METHOD","VERTICAL_DATUM","allStates","allAgencies","allContactTypes","allDeployPriorities","allEventStats","allEventTypes","allFileTypes","allHorCollMethods","allHorDatums","allHouseTypes","allHWMqualities","allHWMtypes","allInstCollectConditions","allMarkers","allNetworkNames","allObjPtQualities","allObjPtTypes","allSensorBrands","allDeploymentTypes","allStatusTypes","allSensorTypes","allNetworkTypes","allVerticalCollMethods","allVerticalDatums",function($scope,$rootScope,$cookies,$location,$state,$http,$filter,$uibModal,AGENCY,CONTACT_TYPE,DEPLOYMENT_PRIORITY,EVENT_STATUS,EVENT_TYPE,FILE_TYPE,HORIZONTAL_COLL_METHODS,HORIZONTAL_DATUM,HOUSING_TYPE,HWM_QUALITY,HWM_TYPE,INST_COLL_CONDITION,MARKER,NETWORK_NAME,OP_QUALITY,OP_TYPE,SENSOR_BRAND,DEPLOYMENT_TYPE,SENSOR_TYPE,NETWORK_TYPE,STATUS_TYPE,VERTICAL_COLL_METHOD,VERTICAL_DATUM,allStates,allAgencies,allContactTypes,allDeployPriorities,allEventStats,allEventTypes,allFileTypes,allHorCollMethods,allHorDatums,allHouseTypes,allHWMqualities,allHWMtypes,allInstCollectConditions,allMarkers,allNetworkNames,allObjPtQualities,allObjPtTypes,allSensorBrands,allDeploymentTypes,allStatusTypes,allSensorTypes,allNetworkTypes,allVerticalCollMethods,allVerticalDatums){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Settings/Resources",$scope.accountRole=$cookies.get("usersRole"),$scope.sort_by=function(newSortingOrder){$scope.sortingOrder==newSortingOrder&&($scope.reverse=!$scope.reverse),$scope.sortingOrder=newSortingOrder,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+newSortingOrder+" i").removeClass().addClass($scope.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")},$scope.lookupForm={},$scope.showAddAgForm=!1,$scope.addAgButtonShowing=!0,$scope.activeMenu="",$scope.stateList=allStates,$scope.agencyList=allAgencies,$scope.showAddAgForm=!1,$scope.addAgButtonShowing=!0,$scope.newAg={},$scope.showAddAgClicked=function(){$scope.showAddAgForm=!0,$scope.addAgButtonShowing=!1},$scope.NeverMindAg=function(){$scope.newAg={},$scope.showAddAgForm=!1,$scope.addAgButtonShowing=!0},$scope.AddAgency=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",AGENCY.save($scope.newAg,function(response){$scope.agencyList.push(response),$scope.newAg={},$scope.showAddAgForm=!1,$scope.addAgButtonShowing=!0,toastr.success("Agency Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveAgency=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",AGENCY.update({id:id},data,function(response){retur=response,toastr.success("Agency Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteAgency=function(ag){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ag},what:function(){return"Agency"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.agencyList.indexOf(ag);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),AGENCY["delete"]({id:ag.agency_id},ag,function(response){$scope.agencyList.splice(index,1),toastr.success("Agency Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.showStateAbbrev=function(a){var selected=[];return a.state&&(selected=$filter("filter")($scope.stateList,{state_abbrev:a.state})),selected.length?selected[0].state_abbrev:""},$scope.contactTypeList=allContactTypes,$scope.showAddCTForm=!1,$scope.addCTButtonShowing=!0,$scope.newCT={},$scope.showAddCTClicked=function(){$scope.showAddCTForm=!0,$scope.addCTButtonShowing=!1},$scope.NeverMindCT=function(){$scope.newCT={},$scope.showAddCTForm=!1,$scope.addCTButtonShowing=!0},$scope.AddContactType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",CONTACT_TYPE.save($scope.newCT,function(response){$scope.contactTypeList.push(response),
$scope.newCT={},$scope.showAddCTForm=!1,$scope.addCTButtonShowing=!0,toastr.success("Contact Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveContactType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",CONTACT_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Contact Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteContactType=function(ct){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ct},what:function(){return"Contact Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.contactTypeList.indexOf(ct);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),CONTACT_TYPE["delete"]({id:ct.contact_type_id},ct,function(response){$scope.contactTypeList.splice(index,1),toastr.success("Contact Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.deployPriorityList=allDeployPriorities,$scope.showAddDPForm=!1,$scope.addDPButtonShowing=!0,$scope.newDP={},$scope.showAddDPClicked=function(){$scope.showAddDPForm=!0,$scope.addDPButtonShowing=!1},$scope.NeverMindDP=function(){$scope.newDP={},$scope.showAddDPForm=!1,$scope.addDPButtonShowing=!0},$scope.AddDepPriority=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",DEPLOYMENT_PRIORITY.save($scope.newDP,function(response){$scope.deployPriorityList.push(response),$scope.newDP={},$scope.showAddDPForm=!1,$scope.addDPButtonShowing=!0,toastr.success("Deployment Priority Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveDepPriority=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",DEPLOYMENT_PRIORITY.update({id:id},data,function(response){retur=response,toastr.success("Deployment Priority Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteDepPriority=function(dp){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return dp},what:function(){return"Deployment Priority"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.deployPriorityList.indexOf(dp);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),DEPLOYMENT_PRIORITY["delete"]({id:dp.priority_id},dp,function(response){$scope.deployPriorityList.splice(index,1),toastr.success("Deployment Priority Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.eventStatList=allEventStats,$scope.showAddESForm=!1,$scope.addESButtonShowing=!0,$scope.newES={},$scope.showAddESClicked=function(){$scope.showAddESForm=!0,$scope.addESButtonShowing=!1},$scope.NeverMindES=function(){$scope.newES={},$scope.showAddESForm=!1,$scope.addESButtonShowing=!0},$scope.AddEventStat=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",EVENT_STATUS.save($scope.newES,function(response){$scope.eventStatList.push(response),$scope.newES={},$scope.showAddESForm=!1,$scope.addESButtonShowing=!0,toastr.success("Event Status Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveEventStat=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",EVENT_STATUS.update({id:id},data,function(response){retur=response,toastr.success("Event Status Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteEventStat=function(es){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return es},what:function(){return"Event Status"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.eventStatList.indexOf(es);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),EVENT_STATUS["delete"]({id:es.event_status_id},es,function(response){$scope.eventStatList.splice(index,1),toastr.success("Event Status Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.eventTypeList=allEventTypes,$scope.showAddETForm=!1,$scope.addETButtonShowing=!0,$scope.newET={},$scope.showAddETClicked=function(){$scope.showAddETForm=!0,$scope.addETButtonShowing=!1},$scope.NeverMindET=function(){$scope.newET={},$scope.showAddETForm=!1,$scope.addETButtonShowing=!0},$scope.AddEventType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",EVENT_TYPE.save($scope.newET,function(response){$scope.eventTypeList.push(response),$scope.newET={},$scope.showAddETForm=!1,$scope.addETButtonShowing=!0,toastr.success("Event Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveEventType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",EVENT_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Event Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteEventType=function(et){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return et},what:function(){return"Event Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.eventTypeList.indexOf(et);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),EVENT_TYPE["delete"]({id:et.event_type_id},et,function(response){$scope.eventTypeList.splice(index,1),toastr.success("Event Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.fileTypeList=allFileTypes,$scope.showAddFTForm=!1,$scope.addFTButtonShowing=!0,$scope.newFT={},$scope.showAddFTClicked=function(){$scope.showAddFTForm=!0,$scope.addFTButtonShowing=!1},$scope.NeverMindFT=function(){$scope.newFT={},$scope.showAddFTForm=!1,$scope.addFTButtonShowing=!0},$scope.AddFileType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",FILE_TYPE.save($scope.newFT,function(response){$scope.fileTypeList.push(response),$scope.newFT={},$scope.showAddFTForm=!1,$scope.addFTButtonShowing=!0,toastr.success("File Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveFileType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",FILE_TYPE.update({id:id},data,function(response){retur=response,toastr.success("File Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteFileType=function(ft){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ft},what:function(){return"File Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.fileTypeList.indexOf(ft);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE_TYPE["delete"]({id:ft.filetype_id},ft,function(response){$scope.fileTypeList.splice(index,1),toastr.success("File Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.horColMethList=allHorCollMethods,$scope.showAddHCMForm=!1,$scope.addHCMButtonShowing=!0,$scope.newHCM={},$scope.showAddHCMClicked=function(){$scope.showAddHCMForm=!0,$scope.addHCMButtonShowing=!1},$scope.NeverMindHCM=function(){$scope.newHCM={},$scope.showAddHCMForm=!1,$scope.addHCMButtonShowing=!0},$scope.AddHorCollMethod=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HORIZONTAL_COLL_METHODS.save($scope.newHCM,function(response){$scope.horColMethList.push(response),$scope.newHCM={},$scope.showAddHCMForm=!1,$scope.addHCMButtonShowing=!0,toastr.success("Horizontal Collection Method Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveHorCollMethod=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HORIZONTAL_COLL_METHODS.update({id:id},data,function(response){retur=response,toastr.success("Horizontal Collection Method Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteHorCollMethod=function(hcm){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return hcm},what:function(){return"Horizontal Collection Method"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.horColMethList.indexOf(hcm);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HORIZONTAL_COLL_METHODS["delete"]({id:hcm.hcollect_method_id},hcm,function(response){$scope.horColMethList.splice(index,1),toastr.success("Horizontal Collection Method Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.horDatList=allHorDatums,$scope.showAddHDForm=!1,$scope.addHDButtonShowing=!0,$scope.newHD={},$scope.showAddHDClicked=function(){$scope.showAddHDForm=!0,$scope.addHDButtonShowing=!1},$scope.NeverMindHD=function(){$scope.newHD={},$scope.showAddHDForm=!1,$scope.addHDButtonShowing=!0},$scope.AddHorDatum=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HORIZONTAL_DATUM.save($scope.newHD,function(response){$scope.horDatList.push(response),$scope.newHD={},$scope.showAddHDForm=!1,$scope.addHDButtonShowing=!0,toastr.success("Horizontal Datum Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveHorDatum=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HORIZONTAL_DATUM.update({id:id},data,function(response){retur=response,toastr.success("Horizontal Datum Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteHorDatum=function(hd){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return hd},what:function(){return"Horizontal Datum"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.horDatList.indexOf(hd);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HORIZONTAL_DATUM["delete"]({id:hd.datum_id},hd,function(response){$scope.horDatList.splice(index,1),toastr.success("Horizontal Datum Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.houseTypeList=allHouseTypes,$scope.showAddHTForm=!1,$scope.addHTButtonShowing=!0,$scope.newHT={},$scope.showAddHTClicked=function(){$scope.showAddHTForm=!0,$scope.addHTButtonShowing=!1},$scope.NeverMindHT=function(){$scope.newHT={},$scope.showAddHTForm=!1,$scope.addHTButtonShowing=!0},$scope.AddHouseType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HOUSING_TYPE.save($scope.newHT,function(response){$scope.houseTypeList.push(response),$scope.newHT={},$scope.showAddHTForm=!1,$scope.addHTButtonShowing=!0,toastr.success("Housing Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveHouseType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HOUSING_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Housing Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteHouseType=function(ht){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ht},what:function(){return"Housing Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.houseTypeList.indexOf(ht);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HOUSING_TYPE["delete"]({id:ht.housing_type_id},ht,function(response){$scope.houseTypeList.splice(index,1),toastr.success("Housing Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.hwmQualList=allHWMqualities,$scope.showAddHWMQForm=!1,$scope.addHWMQButtonShowing=!0,$scope.newHWMQ={},$scope.showAddHWMQClicked=function(){$scope.showAddHWMQForm=!0,$scope.addHWMQButtonShowing=!1},$scope.NeverMindHWMQ=function(){$scope.newHWMQ={},$scope.showAddHWMQForm=!1,$scope.addHWMQButtonShowing=!0},$scope.AddHwmQuality=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM_QUALITY.save($scope.newHWMQ,function(response){$scope.hwmQualList.push(response),$scope.newHWMQ={},$scope.showAddHWMQForm=!1,$scope.addHWMQButtonShowing=!0,toastr.success("HWM Quality Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveHwmQuality=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM_QUALITY.update({id:id},data,function(response){retur=response,toastr.success("HWM Quality Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteHwmQuality=function(hwmq){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return hwmq},what:function(){return"HWM Quality"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.hwmQualList.indexOf(hwmq);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM_QUALITY["delete"]({id:hwmq.hwm_quality_id},hwmq,function(response){$scope.hwmQualList.splice(index,1),toastr.success("HWM Quality Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.hwmTypeList=allHWMtypes,$scope.showAddHWMTForm=!1,$scope.addHWMTButtonShowing=!0,$scope.newHWMT={},$scope.showAddHWMTClicked=function(){$scope.showAddHWMTForm=!0,$scope.addHWMTButtonShowing=!1},$scope.NeverMindHWMT=function(){$scope.newHWMT={},$scope.showAddHWMTForm=!1,$scope.addHWMTButtonShowing=!0},$scope.AddHwmType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM_TYPE.save($scope.newHWMT,function(response){$scope.hwmTypeList.push(response),$scope.newHWMT={},$scope.showAddHWMTForm=!1,$scope.addHWMTButtonShowing=!0,toastr.success("HWM Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveHwmType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM_TYPE.update({id:id},data,function(response){retur=response,toastr.success("HWM Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteHwmType=function(hwmt){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return hwmt},what:function(){return"HWM Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.hwmTypeList.indexOf(hwmt);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM_TYPE["delete"]({id:hwmt.hwm_type_id},hwmt,function(response){$scope.hwmTypeList.splice(index,1),toastr.success("HWM Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.instColCondList=allInstCollectConditions,$scope.showAddICCForm=!1,$scope.addICCButtonShowing=!0,$scope.newICC={},$scope.showAddICCClicked=function(){$scope.showAddICCForm=!0,$scope.addICCButtonShowing=!1},$scope.NeverMindICC=function(){$scope.newICC={},$scope.showAddICCForm=!1,$scope.addICCButtonShowing=!0},$scope.AddInstColCond=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INST_COLL_CONDITION.save($scope.newICC,function(response){$scope.instColCondList.push(response),$scope.newICC={},$scope.showAddICCForm=!1,$scope.addICCButtonShowing=!0,toastr.success("Instrument Collection Condition Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveInstColCond=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INST_COLL_CONDITION.update({id:id},data,function(response){retur=response,toastr.success("Instrument Collection Condition Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteInstColCond=function(icc){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return icc},what:function(){return"Instrument Collection Condition"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.instColCondList.indexOf(icc);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),INST_COLL_CONDITION["delete"]({id:icc.id},icc,function(response){$scope.instColCondList.splice(index,1),toastr.success("Instrument Collection Condition Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.markList=allMarkers,$scope.showAddMForm=!1,$scope.addMButtonShowing=!0,$scope.newM={},$scope.showAddMClicked=function(){$scope.showAddMForm=!0,$scope.addMButtonShowing=!1},$scope.NeverMindM=function(){$scope.newM={},$scope.showAddMForm=!1,$scope.addMButtonShowing=!0},$scope.AddMarker=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MARKER.save($scope.newM,function(response){$scope.markList.push(response),$scope.newM={},$scope.showAddMForm=!1,$scope.addMButtonShowing=!0,toastr.success("Marker Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveMarker=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MARKER.update({id:id},data,function(response){retur=response,toastr.success("Marker Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteMarker=function(m){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return m},what:function(){return"Marker"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.markList.indexOf(m);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),MARKER["delete"]({id:m.marker_id},m,function(response){$scope.markList.splice(index,1),toastr.success("Marker Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.netNameList=allNetworkNames,$scope.showAddNNForm=!1,$scope.addNNButtonShowing=!0,$scope.newNN={},$scope.showAddNNClicked=function(){$scope.showAddNNForm=!0,$scope.addNNButtonShowing=!1},$scope.NeverMindNN=function(){$scope.newNN={},$scope.showAddNNForm=!1,$scope.addNNButtonShowing=!0},$scope.AddNetworkName=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",NETWORK_NAME.save($scope.newNN,function(response){$scope.netNameList.push(response),$scope.newNN={},$scope.showAddNNForm=!1,$scope.addNNButtonShowing=!0,toastr.success("Network Name Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveNetworkName=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",NETWORK_NAME.update({id:id},data,function(response){retur=response,toastr.success("Network Name Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteNetworkName=function(nn){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return nn},what:function(){return"Network Name"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.netNameList.indexOf(nn);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),NETWORK_NAME["delete"]({id:nn.network_name_id},nn,function(response){$scope.netNameList.splice(index,1),toastr.success("Network Name Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.opQualList=allObjPtQualities,$scope.showAddOPQForm=!1,$scope.addOPQButtonShowing=!0,$scope.newOPQ={},$scope.showAddOPQClicked=function(){$scope.showAddOPQForm=!0,$scope.addOPQButtonShowing=!1},$scope.NeverMindOPQ=function(){$scope.newOPQ={},$scope.showAddOPQForm=!1,$scope.addOPQButtonShowing=!0},$scope.AddOPQuality=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",OP_QUALITY.save($scope.newOPQ,function(response){$scope.opQualList.push(response),$scope.newOPQ={},$scope.showAddOPQForm=!1,$scope.addOPQButtonShowing=!0,toastr.success("Objective Point Quality Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveOPQuality=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",OP_QUALITY.update({id:id},data,function(response){retur=response,toastr.success("Objective Point Quality Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteOPQuality=function(opq){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return opq},what:function(){return"Objective Point Quality"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.opQualList.indexOf(opq);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),OP_QUALITY["delete"]({id:opq.op_quality_id},opq,function(response){$scope.opQualList.splice(index,1),toastr.success("Objective Point Quality Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.opTypeList=allObjPtTypes,$scope.showAddOPTForm=!1,$scope.addOPTButtonShowing=!0,$scope.newOPT={},$scope.showAddOPTClicked=function(){$scope.showAddOPTForm=!0,$scope.addOPTButtonShowing=!1},$scope.NeverMindOPT=function(){$scope.newOPT={},$scope.showAddOPTForm=!1,$scope.addOPTButtonShowing=!0},$scope.AddOPType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",OP_TYPE.save($scope.newOPT,function(response){$scope.opTypeList.push(response),$scope.newOPT={},$scope.showAddOPTForm=!1,$scope.addOPTButtonShowing=!0,toastr.success("Objective Point Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveOPType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",OP_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Objective Point Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteOPType=function(opt){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return opt},what:function(){return"Objective Point Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.opTypeList.indexOf(opt);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),OP_TYPE["delete"]({id:opt.objective_point_type_id},opt,function(response){$scope.opTypeList.splice(index,1),toastr.success("Objective Point Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.sensBrandList=allSensorBrands,$scope.showAddSBForm=!1,$scope.addSBButtonShowing=!0,$scope.newSB={},$scope.showAddSBClicked=function(){$scope.showAddSBForm=!0,$scope.addSBButtonShowing=!1},$scope.NeverMindSB=function(){$scope.newSB={},$scope.showAddSBForm=!1,$scope.addSBButtonShowing=!0},$scope.AddSensorBrand=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",SENSOR_BRAND.save($scope.newSB,function(response){$scope.sensBrandList.push(response),$scope.newSB={},$scope.showAddSBForm=!1,$scope.addSBButtonShowing=!0,toastr.success("Sensor Brand Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveSensorBrand=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",SENSOR_BRAND.update({id:id},data,function(response){retur=response,toastr.success("Sensor Brand Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteSensorBrand=function(sb){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return sb},what:function(){return"Sensor Brand"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.sensBrandList.indexOf(sb);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),SENSOR_BRAND["delete"]({id:sb.sensor_brand_id},sb,function(response){$scope.sensBrandList.splice(index,1),toastr.success("Sensor Brand Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.depTypeList=allDeploymentTypes,$scope.showAddDTForm=!1,$scope.addDTButtonShowing=!0,$scope.newDT={},$scope.showAddDTClicked=function(){$scope.showAddDTForm=!0,$scope.addDTButtonShowing=!1},$scope.NeverMindDT=function(){$scope.newDT={},$scope.showAddDTForm=!1,$scope.addDTButtonShowing=!0},$scope.AddDepType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",DEPLOYMENT_TYPE.save($scope.newDT,function(response){$scope.depTypeList.push(response),$scope.newDT={},$scope.showAddDTForm=!1,$scope.addDTButtonShowing=!0,toastr.success("Deployment Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveDepType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",DEPLOYMENT_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Deployment Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteDepType=function(dt){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return dt},what:function(){return"Deployment Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.depTypeList.indexOf(dt);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),DEPLOYMENT_TYPE["delete"]({id:dt.deployment_type_id},dt,function(response){$scope.depTypeList.splice(index,1),toastr.success("Deployment Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.statTypeList=allStatusTypes,$scope.showAddStatTForm=!1,$scope.addStatTButtonShowing=!0,$scope.newStatT={},$scope.showAddStatTClicked=function(){$scope.showAddStatTForm=!0,$scope.addStatTButtonShowing=!1},$scope.NeverMindStatT=function(){$scope.newStatT={},$scope.showAddStatTForm=!1,$scope.addStatTButtonShowing=!0},$scope.AddStatusType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",STATUS_TYPE.save($scope.newStatT,function(response){$scope.statTypeList.push(response),$scope.newStatTT={},$scope.showAddStatTForm=!1,$scope.addStatTButtonShowing=!0,toastr.success("Status Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveStatusType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",STATUS_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Status Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteStatusType=function(statT){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return statT},what:function(){return"Status Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.statTypeList.indexOf(statT);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),STATUS_TYPE["delete"]({id:statT.status_type_id},statT,function(response){$scope.statTypeList.splice(index,1),toastr.success("Status Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.sensTypeList=allSensorTypes,$scope.newDepTypeRelating=[],$scope.commaSepDepMETHODS=[],$scope.formattedSensTypeList=[],$scope.sensTypeList.forEach(function(sensType){SENSOR_TYPE.getSensorDeploymentTypes({id:sensType.sensor_type_id},function(response){var deps=response;sensType.DepTypes=[];var DepMStrings=[];sensType.DepMETHODStrings="",deps.length>0&&deps.forEach(function(d){sensType.DepTypes.push(d.deployment_type_id),DepMStrings.push(d.method),
sensType.DepMETHODStrings=DepMStrings.join(", ")}),$scope.formattedSensTypeList.push(sensType)}).$promise}),$scope.showDepTypes=function(SenT){var selected=[];return angular.forEach($scope.depTypeList,function(s){SenT.DepTypes.indexOf(s.deployment_type_id)>=0&&selected.push(s.method)}),selected.length?selected.join(", "):""},$scope.removeTheseDepTypes=[],$scope.checkListCheck=function(originalChecked,nowChecked){nowChecked.length<originalChecked.length&&angular.forEach(originalChecked,function(oc){if(nowChecked.indexOf(oc)<0){var deleteDep=$scope.depTypeList.filter(function(dt){return dt.deployment_type_id==oc})[0];if($scope.removeTheseDepTypes.length>0)for(var d=0;d<$scope.removeTheseDepTypes.length;d++)$scope.removeTheseDepTypes[d].deployment_type_id==deleteDep.deployment_type_id?d=$scope.newDepTypeRelating.length:$scope.removeTheseDepTypes.push(deleteDep);else $scope.removeTheseDepTypes.push(deleteDep)}})},$scope.showAddSenTForm=!1,$scope.addSenTButtonShowing=!0,$scope.newSenT={},$scope.showAddSenTClicked=function(){$scope.showAddSenTForm=!0,$scope.addSenTButtonShowing=!1},$scope.NeverMindSenT=function(){$scope.newSenT={},$scope.newDepTypeRelating=[],angular.forEach($scope.depTypeList,function(d){d.selected=!1}),$scope.showAddSenTForm=!1,$scope.addSenTButtonShowing=!0},$scope.addDepTypeToNewSenT=function(dt){if(dt.selected===!0){if($scope.newDepTypeRelating.length>0)for(var d=0;d<$scope.newDepTypeRelating.length;d++)$scope.newDepTypeRelating[d].deployment_type_id==dt.deployment_type_id?d=$scope.newDepTypeRelating.length:($scope.newDepTypeRelating.push(dt),d=$scope.newDepTypeRelating.length);0===$scope.newDepTypeRelating.length&&$scope.newDepTypeRelating.push(dt)}},$scope.AddSensorType=function(valid){if(valid){var newSensor={},relatedDeps=[];$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",SENSOR_TYPE.save($scope.newSenT,function(response){newSensor=response,$scope.newSenT={},$scope.showAddSenTForm=!1,$scope.addSenTButtonShowing=!0,$scope.newDepTypeRelating.length>0&&angular.forEach($scope.newDepTypeRelating,function(ndt){delete ndt.selected,relatedDeps.push(ndt.deployment_type_id),SENSOR_TYPE.addSensorDeploymentType({sensorTypeId:newSensor.sensor_type_id,deploymentTypeId:ndt.deployment_type_id},function(response1){},function(errorResponse){errorResponse.statusText})}),newSensor.DepTypes=relatedDeps,$scope.formattedSensTypeList.push(newSensor),toastr.success("Sensor Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})}},$scope.saveSensorType=function(data,id){var retur=!1;$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var DTs=({sensor_type_id:data.sensor_type_id,sensor:data.sensor},[]);return angular.forEach($scope.depTypeList,function(s){if(data.DepTypes.indexOf(s.deployment_type_id)>=0){var thisDT={deployment_type_id:s.deployment_type_id,method:s.method};DTs.push(thisDT)}}),SENSOR_TYPE.update({id:id},data,function(response){retur=response,angular.forEach(DTs,function(dt){SENSOR_TYPE.addSensorDeploymentType({sensorTypeId:id,deploymentTypeId:ndt.deployment_type_id},dt,function(response1){toastr.success("Deployment Type is now related")},function(errorResponse1){errorResponse1.statusText})}),toastr.success("Sensor Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}).$promise.then(angular.forEach($scope.removeTheseDepTypes,function(rdt){SENSOR_TYPE.removeSensorDeploymentType({sensorTypeId:id,DeploymentTypeId:rdt.deployment_type_id},function(response2){toastr.success("Deployment Type is no longer related")},function(errorResponse){errorResponse.statusText})})),retur},$scope.deleteSensorType=function(senT){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return senT},what:function(){return"Sensor Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.formattedSensTypeList.indexOf(senT),ST={sensor_type_id:senT.sensor_type_id,sensor:senT.sensor};$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),angular.forEach($scope.depTypeList,function(s){if(senT.DepTypes.indexOf(s.deployment_type_id)>=0){var thisDT={deployment_type_id:s.deployment_type_id,method:s.method};SENSOR_TYPE.removeSensorDeploymentType({sensorTypeId:ST.sensor_type_id,DeploymentTypeId:thisDT.deployment_type_id},function(response2){})}}),SENSOR_TYPE["delete"]({id:ST.sensor_type_id},ST,function(response){$scope.formattedSensTypeList.splice(index,1),toastr.success("Sensor Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.netTypeList=allNetworkTypes,$scope.showAddNTForm=!1,$scope.addNTButtonShowing=!0,$scope.newNT={},$scope.showAddNTClicked=function(){$scope.showAddNTForm=!0,$scope.addNTButtonShowing=!1},$scope.NeverMindNT=function(){$scope.newNT={},$scope.showAddNTForm=!1,$scope.addNTButtonShowing=!0},$scope.AddNetType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",NETWORK_TYPE.save($scope.newNT,function(response){$scope.netTypeList.push(response),$scope.newNT={},$scope.showAddNTForm=!1,$scope.addNTButtonShowing=!0,toastr.success("Network Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveNetType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",NETWORK_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Network Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteNetType=function(nt){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return nt},what:function(){return"Network Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.netTypeList.indexOf(nt);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),NETWORK_TYPE["delete"]({id:nt.network_type_id},nt,function(response){$scope.netTypeList.splice(index,1),toastr.success("Network Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.vertColMethList=allVerticalCollMethods,$scope.showAddVCMForm=!1,$scope.addVCMButtonShowing=!0,$scope.newVCM={},$scope.showAddVCMClicked=function(){$scope.showAddVCMForm=!0,$scope.addVCMButtonShowing=!1},$scope.NeverMindVCM=function(){$scope.newVCM={},$scope.showAddVCMForm=!1,$scope.addVCMButtonShowing=!0},$scope.AddVertColMeth=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",VERTICAL_COLL_METHOD.save($scope.newVCM,function(response){$scope.vertColMethList.push(response),$scope.newVCM={},$scope.showAddVCMForm=!1,$scope.addVCMButtonShowing=!0,toastr.success("Vertical Collection Method Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveVertColMeth=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",VERTICAL_COLL_METHOD.update({id:id},data,function(response){retur=response,toastr.success("Vertical Collection Method Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteVertColMeth=function(vcm){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return vcm},what:function(){return"Vertical Collection Method"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.vertColMethList.indexOf(vcm);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),VERTICAL_COLL_METHOD["delete"]({id:vcm.vcollect_method_id},vcm,function(response){$scope.vertColMethList.splice(index,1),toastr.success("Vertical Collection Method Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.vertDatList=allVerticalDatums,$scope.showAddVDForm=!1,$scope.addVDButtonShowing=!0,$scope.newVD={},$scope.showAddVDClicked=function(){$scope.showAddVDForm=!0,$scope.addVDButtonShowing=!1},$scope.NeverMindVD=function(){$scope.newVD={},$scope.showAddVDForm=!1,$scope.addVDButtonShowing=!0},$scope.AddVertDatum=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",VERTICAL_DATUM.save($scope.newVD,function(response){$scope.vertDatList.push(response),$scope.newVD={},$scope.showAddVDForm=!1,$scope.addVDButtonShowing=!0,toastr.success("Vertical Datum Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveVertDatum=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",VERTICAL_DATUM.update({id:id},data,function(response){retur=response,toastr.success("Vertical Datum Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteVertDatum=function(vd){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return vd},what:function(){return"Vertical Datum"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.vertDatList.indexOf(vd);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),VERTICAL_DATUM["delete"]({id:vd.datum_id},vd,function(response){$scope.vertDatList.splice(index,1),toastr.success("Vertical Datum Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})})}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("submitReportCtrl",["$scope","$http","$cookies","$uibModal","$state","CONTACT","REPORT",function($scope,$http,$cookies,$uibModal,$state,CONTACT,REPORT){if($scope.$parent.needToComplete!==!0)$scope.$parent.newReport={report_date:new Date};else{var yr=$scope.newReport.report_date.substr(0,4),mo=$scope.newReport.report_date.substr(5,2),day=$scope.newReport.report_date.substr(8,2);$scope.newReport.report_date=new Date(mo+"/"+day+"/"+yr)}$scope.DeployStaff={},$scope.GenStaff={},$scope.InlandStaff={},$scope.CoastStaff={},$scope.WaterStaff={},$scope.status={openContacts:!1,openCounts:!1,openPersonnel:!1};$scope.$parent.needToComplete=!1,void 0===$scope.newReport.reporting_metrics_id&&($scope.disabled=!0),$scope.getEventName=function(evID){var name,thisEvent=$scope.events.filter(function(e){return e.event_id==evID})[0];return name=thisEvent.event_name};var getReportContacts=function(reportID){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",CONTACT.getContactModel({ReportMetric:reportID},function(response){$scope.DeployStaff=response.filter(function(d){return"Deployed Staff"==d.contactType})[0],$scope.GenStaff=response.filter(function(d){return"General"==d.contactType})[0],$scope.InlandStaff=response.filter(function(d){return"Inland Flood"==d.contactType})[0],$scope.CoastStaff=response.filter(function(d){return"Coastal Flood"==d.contactType})[0],$scope.WaterStaff=response.filter(function(d){return"Water Quality"==d.contactType})[0]}).$promise,$scope.disabled=!1},postReportContacts=function(reportID){angular.equals({},$scope.DeployStaff)||void 0===$scope.DeployStaff||REPORT.addReportContact({reportId:reportID,contactTypeId:1},$scope.DeployStaff,function(response1){toastr.success("Deploy Staff Updated")},function(errorResponse1){alert("Error: "+errorResponse1.statusText)}).$promise,angular.equals({},$scope.GenStaff)||void 0===$scope.GenStaff||REPORT.addReportContact({reportId:reportID,contactTypeId:2},$scope.GenStaff,function(response2){toastr.success("General Staff Updated")},function(errorResponse2){alert("Error: "+errorResponse2.statusText)}).$promise,angular.equals({},$scope.InlandStaff)||void 0===$scope.InlandStaff||REPORT.addReportContact({reportId:reportID,contactTypeId:3},$scope.InlandStaff,function(response3){toastr.success("Inland Staff Updated")},function(errorResponse3){alert("Error: "+errorResponse3.statusText)}).$promise,angular.equals({},$scope.CoastStaff)||void 0===$scope.CoastStaff||REPORT.addReportContact({reportId:reportID,contactTypeId:4},$scope.CoastStaff,function(response4){toastr.success("Coastal Staff Updated")},function(errorResponse4){alert("Error: "+errorResponse4.statusText)}).$promise,angular.equals({},$scope.WaterStaff)||void 0===$scope.WaterStaff||REPORT.addReportContact({reportId:reportID,contactTypeId:5},$scope.WaterStaff,function(response5){toastr.success("Water Staff Updated")},function(errorResponse5){alert("Error: "+errorResponse5.statusText)}).$promise},removeIncomplete=function(){for(var index=0,i=0;i<$scope.memberIncompletes.length;i++)$scope.memberIncompletes[i].reporting_metrics_id==$scope.newReport.reporting_metrics_id&&(index=i,i=$scope.memberIncompletes.length);$scope.memberIncompletes.splice(index,1)},PostPutReportAndReportContacts=function(){$scope.newReport.report_date=$scope.newReport.report_date.toDateString(),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.newReport.reporting_metrics_id?REPORT.update({id:$scope.newReport.reporting_metrics_id},$scope.newReport,function(response){toastr.success("Report Updated"),$scope.newReport.event_name=$scope.getEventName($scope.newReport.event_id),1==$scope.newReport.complete&&(removeIncomplete(),$scope.isCompleted=!0),postReportContacts($scope.newReport.reporting_metrics_id)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$scope.fullReportForm.submit.$setPristine(),$scope.fullReportForm.submit.event_id.$viewValue=void 0,$state.go("reporting.reportDash")}):REPORT.save($scope.newReport,function(response){toastr.success("Report Created"),$scope.reports.push(response),1==$scope.newReport.complete?(removeIncomplete(),$scope.isCompleted=!0,$scope.newReport.event_name=$scope.getEventName($scope.newReport.event_id)):$scope.memberIncompletes.push(response),$scope.newReport.reporting_metrics_id=response.reporting_metrics_id,postReportContacts($scope.newReport.reporting_metrics_id)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$scope.fullReportForm.submit.$setPristine(),$scope.fullReportForm.submit.event_id.$viewValue=void 0,$state.go("reporting.reportDash")})};$scope.populateYestTots=function(){if(void 0!==$scope.newReport.report_date&&void 0!==$scope.newReport.state&&void 0!==$scope.newReport.event_id){var formatDate=new Date($scope.newReport.report_date);formatDate.setHours(0,0,0,0),formatDate=formatDate.toISOString().substr(0,10);var myDate=formatDate,theState=$scope.newReport.state,eID=$scope.newReport.event_id;$scope.disabled=!1,$scope.newReport={report_date:$scope.newReport.report_date,state:theState,event_id:eID},$scope.DeployStaff={},$scope.GenStaff={},$scope.InlandStaff={},$scope.CoastStaff={},$scope.WaterStaff={};var previousDay=new Date(myDate);previousDay.setHours(0,0,0,0),previousDay=previousDay.toISOString().substr(0,10);var yesterdayRpt=$scope.reports.filter(function(r){var repDate=r.report_date.toString().substring(0,10);return r.event_id==$scope.newReport.event_id&&r.state==$scope.newReport.state&&repDate==previousDay})[0];$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==yesterdayRpt?($scope.newReport.yest_fieldpers=yesterdayRpt.tod_fieldpers,$scope.newReport.yest_officepers=yesterdayRpt.tod_officepers,getReportContacts(yesterdayRpt.reporting_metrics_id)):($scope.newReport.yest_fieldpers=0,$scope.newReport.yest_officepers=0),REPORT.getDailyReportTots({Date:myDate,Event:$scope.newReport.event_id,State:$scope.newReport.state},function(response6){$scope.newReport.dep_rapdepl_gage=response6.dep_rapdepl_gage,$scope.newReport.rec_rapdepl_gage=response6.rec_rapdepl_gage,$scope.newReport.lost_rapdepl_gage=response6.lost_rapdepl_gage,$scope.newReport.dep_wtrlev_sensor=response6.dep_wtrlev_sensor,$scope.newReport.rec_wtrlev_sensor=response6.rec_wtrlev_sensor,$scope.newReport.lost_wtrlev_sensor=response6.lost_wtrlev_sensor,$scope.newReport.dep_wv_sens=response6.dep_wv_sens,$scope.newReport.rec_wv_sens=response6.rec_wv_sens,$scope.newReport.lost_wv_sens=response6.lost_wv_sens,$scope.newReport.dep_barometric=response6.dep_barometric,$scope.newReport.rec_barometric=response6.rec_barometric,$scope.newReport.lost_barometric=response6.lost_barometric,$scope.newReport.dep_meteorological=response6.dep_meteorological,$scope.newReport.rec_meteorological=response6.rec_meteorological,$scope.newReport.lost_meteorological=response6.lost_meteorological,$scope.newReport.hwm_flagged=response6.hwm_flagged,$scope.newReport.hwm_collected=response6.hwm_collected},function(errorResponse6){alert("Error: "+errorResponse6.statusText)})}else alert("Please choose a date, event and state first.")},$scope.saveReport=function(valid){if(void 0===$scope.newReport.complete||0===$scope.newReport.complete){var modalInstance=$uibModal.open({templateUrl:"saveReportModal.html",controller:"confirmReportModalCtrl",size:"sm"});modalInstance.result.then(function(){$scope.newReport.complete=0,$scope.newReport.member_id=$scope.MemberLoggedIn.member_id,PostPutReportAndReportContacts()})}else valid?($scope.newReport.member_id=$scope.MemberLoggedIn.member_id,PostPutReportAndReportContacts()):($scope.status.openContacts=!0,$scope.status.openCounts=!0,$scope.status.openPersonnel=!0,angular.element("[name='"+$scope.fullReportForm.submit.$name+"']").find(".ng-invalid:visible:first").focus())},$scope.populateDeployer=function(){$scope.DeployStaff=$scope.MemberLoggedIn},$scope.getIncompleteReport=function(){var reportId=this.ir.reporting_metrics_id;REPORT.query({id:reportId},function(response){$scope.newReport=response;var yr=response.report_date.substr(0,4),mo=response.report_date.substr(5,2),day=response.report_date.substr(8,2);$scope.newReport.report_date=new Date(mo+"/"+day+"/"+yr),$scope.fullReportForm.submit.$setDirty(),getReportContacts(reportId)}).$promise},void 0!==$scope.newReport.reporting_metrics_id&&getReportContacts($scope.newReport.reporting_metrics_id)}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("reportModalCtrl",["$scope","$uibModalInstance","report","submitPerson","contacts",function($scope,$uibModalInstance,report,submitPerson,contacts){$scope.ReportView={},$scope.ReportView.Report=report,$scope.ReportView.submitter=submitPerson,$scope.ReportView.deployStaff=contacts.filter(function(d){return"Deployed Staff"==d.contactType})[0],$scope.ReportView.generalStaff=contacts.filter(function(d){return"General"==d.contactType})[0],$scope.ReportView.inlandStaff=contacts.filter(function(d){return"Inland Flood"==d.contactType})[0],$scope.ReportView.coastStaff=contacts.filter(function(d){return"Coastal Flood"==d.contactType})[0],$scope.ReportView.waterStaff=contacts.filter(function(d){return"Water Quality"==d.contactType})[0],$scope.print=function(){window.print()},$scope.ok=function(){$uibModalInstance.dismiss("cancel")}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("reportingDashCtrl",["$scope","$cookies","$filter","$uibModal","$state","$http","CONTACT","MEMBER","allReportsAgain",function($scope,$cookies,$filter,$uibModal,$state,$http,CONTACT,MEMBER,allReportsAgain){$scope.reportsToDate=allReportsAgain,$scope.todayRpts=[],$scope.yesterdayRpts=[],$scope.pickDateRpts=[],$scope.pickAdateReports=!1,$scope.today=new Date,$scope.today.setHours(0,0,0,0),$scope.yesterday=new Date($scope.today),$scope.yesterday.setDate($scope.today.getDate()-1),$scope.today=$scope.today.toISOString().substr(0,10),$scope.yesterday=$scope.yesterday.toISOString().substr(0,10),$scope.THIS_DATE={},$scope.ViewReport=function(r){var modalInstance=$uibModal.open({templateUrl:"ViewReport.html",controller:"reportModalCtrl",size:"lg",windowClass:"rep-dialog",resolve:{report:function(){return r},submitPerson:function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var member={};return MEMBER.query({id:r.member_id},function(response){member.mem=response;var memberAgency=$scope.agencies.filter(function(a){return a.agency_id==member.mem.agency_id})[0];member.agency_name=memberAgency.agency_name,member.agency_address=memberAgency.address+", "+memberAgency.city+" "+memberAgency.state+" "+memberAgency.zip}).$promise,member},contacts:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",CONTACT.getContactModel({ReportMetric:r.reporting_metrics_id}).$promise}}});modalInstance.result.then(function(r){})};var formatReport=function(repList){for(var returnList=[],i=0;i<repList.length;i++){var rep=repList[i],event=$scope.events.filter(function(e){return e.event_id==rep.event_id})[0];rep.event_name=event.event_name,returnList.push(rep)}return returnList},todayReports=$scope.reportsToDate.filter(function(todayrep){var reportDate=todayrep.report_date.toString().substring(0,10);return reportDate==$scope.today});$scope.todayRpts=formatReport(todayReports);var yesterdayReports=$scope.reportsToDate.filter(function(yestrep){var reportDate=yestrep.report_date.toString().substring(0,10);return reportDate==$scope.yesterday});$scope.yesterdayRpts=formatReport(yesterdayReports),$scope.getReportsByDate=function(){if(void 0!==$scope.THIS_DATE.date){var formatDate=new Date($scope.THIS_DATE.date);formatDate.setHours(0,0,0,0),formatDate=formatDate.toISOString().substr(0,10);var thisDateReports=$scope.reportsToDate.filter(function(tdate){var reportDate=tdate.report_date.toString().substring(0,10);return reportDate==formatDate});$scope.pickDateRpts=formatReport(thisDateReports),$scope.pickAdateReports=!0}else alert("Pick a date first.")},$scope.CompleteThisReport=function(rep){$scope.$parent.newReport=rep,$scope.$parent.disabled=!1,$scope.$parent.needToComplete=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",CONTACT.getContactModel({ReportMetric:rep.reporting_metrics_id},function(response){response.length>=1?($scope.$parent.DeployStaff=response.filter(function(d){return"Deployed Staff"==d.contactType})[0],$scope.$parent.GenStaff=response.filter(function(d){return"General"==d.contactType})[0],$scope.$parent.InlandStaff=response.filter(function(d){return"Inland Flood"==d.contactType})[0],$scope.$parent.CoastStaff=response.filter(function(d){return"Coastal Flood"==d.contactType})[0],$scope.$parent.WaterStaff=response.filter(function(d){return"Water Quality"==d.contactType})[0]):($scope.$parent.DeployStaff={},$scope.$parent.GenStaff={},$scope.$parent.InlandStaff={},$scope.$parent.CoastStaff={},$scope.$parent.WaterStaff={})}).$promise.then(function(){$state.go("reporting.submitReport")})},$scope.getProjectAlertText=function(rep){$scope.ProjectAlertParts={},$scope.ProjectAlertParts.Report=rep,$scope.ProjectAlertParts.totYestFieldPers=rep.yest_fieldpers,$scope.ProjectAlertParts.totYestOfficPers=rep.yest_officepers,$scope.ProjectAlertParts.measureCts=rep.tot_discharge_meas;var eventReports=$scope.reportsToDate.filter(function(r){return r.event_id==rep.event_id}),test=$filter("countBy")(eventReports,"state");$scope.ProjectAlertParts.stateCount=0,angular.forEach(test,function(er){$scope.ProjectAlertParts.stateCount++}),$scope.ProjectAlertParts.Event=$scope.events.filter(function(e){return e.event_id==rep.event_id})[0];var modalInstance=$uibModal.open({templateUrl:1==$scope.ProjectAlertParts.Event.event_type_id?"FloodPA.html":"HurricanePA.html",controller:"ProjAlertModalCtrl",size:"md",windowClass:"rep-dialog",resolve:{ProjAlert:function(){return $scope.ProjectAlertParts}}});modalInstance.result.then(function(r){})}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("reportingCtrl",["$scope","$rootScope","$cookies","$location","$http","$uibModal","memberReports","allEvents","allStates","allReports","allEventTypes","allEventStatus","allAgencies","SERVER_URL","REPORT","MEMBER",function($scope,$rootScope,$cookies,$location,$http,$uibModal,memberReports,allEvents,allStates,allReports,allEventTypes,allEventStatus,allAgencies,SERVER_URL,REPORT,MEMBER){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Reporting",$rootScope.activeMenu="report",$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){var formIsPopulated=!1;switch(fromState.url){case"/SubmitReport":void 0!==$scope.fullReportForm.submit&&(formIsPopulated=$scope.fullReportForm.submit.$dirty,formIsPopulated=void 0!==$scope.fullReportForm.submit.event_id.$viewValue?!0:formIsPopulated)}formIsPopulated&&(console.log("toState.name: "+toState.name),console.log("fromState.name: "+fromState.name),confirm("Are you sure you want to leave the Submit Report Tab? Any unsaved information will be lost.")?console.log("go to: "+toState.name):(console.log("stay at state: "+fromState.name),$rootScope.stateIsLoading.showLoading=!1,event.preventDefault()))}),$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.formatDate=function(d){var currentDt=new Date(d),mm=currentDt.getMonth()+1;mm=10>mm?"0"+mm:mm;var dd=currentDt.getDate(),yyyy=currentDt.getFullYear(),date=mm+"/"+dd+"/"+yyyy;return date},$scope.serverURL=SERVER_URL,$scope.fullReportForm={},$scope.newReport={},$scope.DeployStaff={},$scope.GenStaff={},$scope.InlandStaff={},$scope.CoastStaff={},$scope.WaterStaff={},$scope.disabled=!0,$scope.needToComplete=!1,$scope.memberIncompletes=memberReports.filter(function(ir){return 0===ir.complete}),$scope.events=allEvents,$scope.states=allStates,$scope.reports=allReports,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.query({id:$cookies.get("mID")},function(response){$scope.MemberLoggedIn=response;var memberAgency=allAgencies.filter(function(a){return a.agency_id==$scope.MemberLoggedIn.agency_id})[0];$scope.MemberLoggedIn.agency_name=memberAgency.agency_name,$scope.MemberLoggedIn.agency_address=memberAgency.address+", "+memberAgency.city+" "+memberAgency.state+" "+memberAgency.zip}).$promise,MEMBER.getAll().$promise.then(function(response){$scope.members=response}),$scope.agencies=allAgencies,$scope.eventTypes=allEventTypes,$scope.eventStats=allEventStatus,$scope.Statemodel={},$scope.genSummary={},$scope.filteredReports=[],$scope.genRepChange=function(){$scope.EventName=$scope.events.filter(function(e){return e.event_id==$scope.genSummary.event_id})[0];var names=[],abbrevs=[];angular.forEach($scope.Statemodel.value,function(state){names.push(state.state_name),abbrevs.push(state.state_abbrev)}),$scope.StateNames=names.join(","),$scope.StateAbbrevs=abbrevs.join(",")},$scope.MetricDisplayModel=[],$scope.displayMetricSum=function(valid){if(valid){$scope.MetricDisplayModel=[],$scope.GenRepEventModel={},$scope.totalRow={},$scope.totalRow.notAcctForEmps=0,$scope.totalRow.cumPField=0,$scope.totalRow.yesPField=0,$scope.totalRow.todPField=0,$scope.totalRow.tomPField=0,$scope.totalRow.cumPOffice=0,$scope.totalRow.yesPOffice=0,$scope.totalRow.todPOffice=0,$scope.totalRow.tomPOffice=0,$scope.totalRow.truck=0,$scope.totalRow.boat=0,$scope.totalRow.other=0,$scope.totalRow.gageVisits=0,$scope.totalRow.gagesDown=0,$scope.totalRow.disCtoDate=0,$scope.totalRow.disCPlanned=0,$scope.totalRow.CheckMeasToDate=0,$scope.totalRow.CheckMeasPlanned=0,$scope.totalRow.indMeas=0,$scope.totalRow.ratExt=0,$scope.totalRow.peaksOfRec=0,$scope.totalRow.QWGageVis=0,$scope.totalRow.contQWGageVis=0,$scope.totalRow.contQWGageDown=0,$scope.totalRow.disQWSamples=0,$scope.totalRow.sedSamples=0,$scope.totalRow.rdgPlan=0,$scope.totalRow.rdgDep=0,$scope.totalRow.rdgRec=0,$scope.totalRow.rdgLost=0,$scope.totalRow.waterPlan=0,$scope.totalRow.waterDep=0,$scope.totalRow.waterRec=0,$scope.totalRow.waterLost=0,$scope.totalRow.wavePlan=0,$scope.totalRow.waveDep=0,$scope.totalRow.waveRec=0,$scope.totalRow.waveLost=0,$scope.totalRow.baroPlan=0,$scope.totalRow.baroDep=0,$scope.totalRow.baroRec=0,$scope.totalRow.baroLost=0,$scope.totalRow.metPlan=0,$scope.totalRow.metDep=0,$scope.totalRow.metRec=0,$scope.totalRow.metLost=0,$scope.totalRow.hwmFlag=0,$scope.totalRow.hwmCol=0;var abbrevs=[];angular.forEach($scope.Statemodel.value,function(state){abbrevs.push(state.state_abbrev)});var abbrevString=abbrevs.join(","),thisDate=$scope.formatDate($scope.genSummary.sum_date);REPORT.getFilteredReports({Event:$scope.EventName.event_id,States:abbrevString,Date:thisDate}).$promise.then(function(result){for(var x=0;x<result.length;x++){var thisRPModel={};thisRPModel.report=result[x],$scope.totalRow.notAcctForEmps+=thisRPModel.report.sw_fieldpers_notacct+thisRPModel.report.wq_fieldpers_notacct,$scope.totalRow.cumPField+=thisRPModel.report.yest_fieldpers+thisRPModel.report.tod_fieldpers+thisRPModel.report.tmw_fieldpers,$scope.totalRow.yesPField+=thisRPModel.report.yest_fieldpers,$scope.totalRow.todPField+=thisRPModel.report.tod_fieldpers,$scope.totalRow.tomPField+=thisRPModel.report.tmw_fieldpers,$scope.totalRow.cumPOffice+=thisRPModel.report.yest_officepers+thisRPModel.report.tod_officepers+thisRPModel.report.tmw_officepers,$scope.totalRow.yesPOffice+=thisRPModel.report.yest_officepers,$scope.totalRow.todPOffice+=thisRPModel.report.tod_officepers,$scope.totalRow.tomPOffice+=thisRPModel.report.tmw_officepers,$scope.totalRow.gageVisits+=thisRPModel.report.gage_visit,$scope.totalRow.gagesDown+=thisRPModel.report.gage_down,$scope.totalRow.disCtoDate+=thisRPModel.report.tot_discharge_meas,$scope.totalRow.disCPlanned+=thisRPModel.report.plan_discharge_meas,$scope.totalRow.indMeas+=thisRPModel.report.plan_indirect_meas,$scope.totalRow.ratExt+=thisRPModel.report.rating_extens,$scope.totalRow.peaksOfRec+=thisRPModel.report.gage_peak_record,$scope.totalRow.disQWSamples+=thisRPModel.report.qw_discr_samples,$scope.totalRow.sedSamples+=thisRPModel.report.coll_sedsamples,$scope.totalRow.rdgPlan+=thisRPModel.report.plan_rapdepl_gage,$scope.totalRow.rdgDep+=thisRPModel.report.dep_rapdepl_gage,$scope.totalRow.rdgRec+=thisRPModel.report.rec_rapdepl_gage,$scope.totalRow.rdgLost+=thisRPModel.report.lost_rapdepl_gage,$scope.totalRow.waterPlan+=thisRPModel.report.plan_wtrlev_sensor,$scope.totalRow.waterDep+=thisRPModel.report.dep_wtrlev_sensor,$scope.totalRow.waterRec+=thisRPModel.report.rec_wtrlev_sensor,$scope.totalRow.waterLost+=thisRPModel.report.lost_wtrlev_sensor,$scope.totalRow.wavePlan+=thisRPModel.report.plan_wv_sens,$scope.totalRow.waveDep+=thisRPModel.report.dep_wv_sens,$scope.totalRow.waveRec+=thisRPModel.report.rec_wv_sens,$scope.totalRow.waveLost+=thisRPModel.report.lost_wv_sens,$scope.totalRow.baroPlan+=thisRPModel.report.plan_barometric,$scope.totalRow.baroDep+=thisRPModel.report.dep_barometric,$scope.totalRow.baroRec+=thisRPModel.report.rec_barometric,
$scope.totalRow.baroLost+=thisRPModel.report.lost_barometric,$scope.totalRow.metPlan+=thisRPModel.report.plan_meteorological,$scope.totalRow.metDep+=thisRPModel.report.dep_meteorological,$scope.totalRow.metRec+=thisRPModel.report.rec_meteorological,$scope.totalRow.metLost+=thisRPModel.report.lost_meteorological,$scope.totalRow.hwmFlag+=thisRPModel.report.hwm_flagged,$scope.totalRow.hwmCol=thisRPModel.report.hwm_collected,$scope.MetricDisplayModel.push(thisRPModel)}$scope.GenRepEventModel={},$scope.GenRepEventModel.Event=$scope.EventName,$scope.GenRepEventModel.EventType=$scope.eventTypes.filter(function(et){return et.event_type_id==$scope.EventName.event_type_id})[0],$scope.GenRepEventModel.EventStat=$scope.eventStats.filter(function(es){return es.event_status_id==$scope.EventName.event_status_id})[0],$scope.GenRepEventModel.Coordinator=$scope.members.filter(function(m){return m.member_id==$scope.GenRepEventModel.Event.event_coordinator})[0],$scope.GenRepEventModel.CoordAgency=$scope.agencies.filter(function(a){return a.agency_id==$scope.GenRepEventModel.Coordinator.agency_id})[0];var modalInstance=$uibModal.open({templateUrl:"MetricsSummary.html",size:"lg",windowClass:"rep-dialog",resolve:{thisReport:function(){return $scope.MetricDisplayModel},thisEvent:function(){return $scope.GenRepEventModel},theTotalRow:function(){return $scope.totalRow}},controller:["$scope","$uibModalInstance","thisReport","thisEvent","theTotalRow",function($scope,$uibModalInstance,thisReport,thisEvent,theTotalRow){$scope.Report=thisReport,$scope.Event=thisEvent,$scope.totals=theTotalRow,$scope.ok=function(){$uibModalInstance.dismiss("cancel")},$scope.print=function(){window.print()}}]});modalInstance.result.then(function(){})})}},$scope.displayContactsSum=function(valid){if(valid){var abbrevs=[];angular.forEach($scope.Statemodel.value,function(state){abbrevs.push(state.state_abbrev)});var abbrevString=abbrevs.join(","),thisDate=$scope.formatDate($scope.genSummary.sum_date);$scope.reportModel=[],$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",REPORT.getReportwithContacts({Event:$scope.EventName.event_id,States:abbrevString,Date:thisDate}).$promise.then(function(result){for(var x=0;x<result.length;x++){var rep={};rep.repID=result[x].reporting_metrics_id,rep.State=result[x].state,rep.report_date=result[x].report_date;var submitter=$scope.members.filter(function(m){return m.member_id==result[x].member_id})[0],submitterAgency=$scope.agencies.filter(function(a){return a.agency_id==submitter.agency_id})[0],sub={};sub.fname=submitter.fname,sub.lname=submitter.lname,sub.email=submitter.email,sub.phone=submitter.phone,sub.agencyname=submitterAgency.agency_name,sub.agencyadd=submitterAgency.city+" "+submitterAgency.state+" "+submitterAgency.zip,rep.submitter=sub,rep.depC=result[x].ReportContacts.filter(function(x){return"Deployed Staff"==x.type})[0],rep.genC=result[x].ReportContacts.filter(function(x){return"General"==x.type})[0],rep.inlC=result[x].ReportContacts.filter(function(x){return"Inland Flood"==x.type})[0],rep.coastC=result[x].ReportContacts.filter(function(x){return"Coastal Flood"==x.type})[0],rep.waterC=result[x].ReportContacts.filter(function(x){return"Water Quality"==x.type})[0],$scope.reportModel.push(rep)}setTimeout(function(){showModal()},3e3);var showModal=function(){var modalInstance=$uibModal.open({templateUrl:"ContactMetricsSummary.html",size:"lg",windowClass:"rep-dialog",resolve:{theseReports:function(){return $scope.reportModel},thisEvent:function(){return $scope.GenRepEventModel={},$scope.GenRepEventModel.Event=$scope.EventName,$scope.GenRepEventModel.EventType=$scope.eventTypes.filter(function(et){return et.event_type_id==$scope.EventName.event_type_id})[0],$scope.GenRepEventModel.EventStat=$scope.eventStats.filter(function(es){return es.event_status_id==$scope.EventName.event_status_id})[0],$scope.GenRepEventModel.Coordinator=$scope.members.filter(function(m){return m.member_id==$scope.EventName.event_coordinator})[0],$scope.GenRepEventModel.CoordAgency=$scope.agencies.filter(function(a){return a.agency_id==$scope.GenRepEventModel.Coordinator.agency_id})[0],$scope.GenRepEventModel}},controller:["$scope","$http","$uibModalInstance","theseReports","thisEvent",function($scope,$http,$uibModalInstance,theseReports,thisEvent){$scope.Reports=theseReports,$scope.Event=thisEvent,$scope.ok=function(){$uibModalInstance.dismiss("cancel")},$scope.print=function(){window.print()}}]});modalInstance.result.then(function(){})}})}},$scope.getCSVfile=function(valid){valid&&($http.defaults.headers.common.Accept="text/csv",REPORT.getReportsCSV({Event:$scope.genSummary.event_id,States:$scope.StateAbbrevs,Date:$scope.genSummary.sum_date}).$promise.then(function(result){var anchor=angular.element("<a/>"),joinedResponse=result.join(""),file=new Blob([joinedResponse],{type:"application/csv"}),fileURL=URL.createObjectURL(file);anchor.href=fileURL,anchor.download="report.csv",anchor.click()}),function(){console.log("error")})})}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("reportingCtrl",["$scope","$rootScope","$cookies","$location","$http","$uibModal","memberReports","allEvents","allStates","allReports","allEventTypes","allEventStatus","allAgencies","SERVER_URL","REPORT","MEMBER",function($scope,$rootScope,$cookies,$location,$http,$uibModal,memberReports,allEvents,allStates,allReports,allEventTypes,allEventStatus,allAgencies,SERVER_URL,REPORT,MEMBER){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Reporting",$rootScope.activeMenu="report",$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){var formIsPopulated=!1;switch(fromState.url){case"/SubmitReport":void 0!==$scope.fullReportForm.submit&&(formIsPopulated=$scope.fullReportForm.submit.$dirty,formIsPopulated=void 0!==$scope.fullReportForm.submit.event_id.$viewValue?!0:formIsPopulated)}formIsPopulated&&(console.log("toState.name: "+toState.name),console.log("fromState.name: "+fromState.name),confirm("Are you sure you want to leave the Submit Report Tab? Any unsaved information will be lost.")?console.log("go to: "+toState.name):(console.log("stay at state: "+fromState.name),$rootScope.stateIsLoading.showLoading=!1,event.preventDefault()))}),$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.formatDate=function(d){var currentDt=new Date(d),mm=currentDt.getMonth()+1;mm=10>mm?"0"+mm:mm;var dd=currentDt.getDate(),yyyy=currentDt.getFullYear(),date=mm+"/"+dd+"/"+yyyy;return date},$scope.serverURL=SERVER_URL,$scope.fullReportForm={},$scope.newReport={},$scope.DeployStaff={},$scope.GenStaff={},$scope.InlandStaff={},$scope.CoastStaff={},$scope.WaterStaff={},$scope.disabled=!0,$scope.needToComplete=!1,$scope.memberIncompletes=memberReports.filter(function(ir){return 0===ir.complete}),$scope.events=allEvents,$scope.states=allStates,$scope.reports=allReports,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.query({id:$cookies.get("mID")},function(response){$scope.MemberLoggedIn=response;var memberAgency=allAgencies.filter(function(a){return a.agency_id==$scope.MemberLoggedIn.agency_id})[0];$scope.MemberLoggedIn.agency_name=memberAgency.agency_name,$scope.MemberLoggedIn.agency_address=memberAgency.address+", "+memberAgency.city+" "+memberAgency.state+" "+memberAgency.zip}).$promise,MEMBER.getAll().$promise.then(function(response){$scope.members=response}),$scope.agencies=allAgencies,$scope.eventTypes=allEventTypes,$scope.eventStats=allEventStatus,$scope.Statemodel={},$scope.genSummary={},$scope.filteredReports=[],$scope.genRepChange=function(){$scope.EventName=$scope.events.filter(function(e){return e.event_id==$scope.genSummary.event_id})[0];var names=[],abbrevs=[];angular.forEach($scope.Statemodel.value,function(state){names.push(state.state_name),abbrevs.push(state.state_abbrev)}),$scope.StateNames=names.join(","),$scope.StateAbbrevs=abbrevs.join(",")},$scope.MetricDisplayModel=[],$scope.displayMetricSum=function(valid){if(valid){$scope.MetricDisplayModel=[],$scope.GenRepEventModel={},$scope.totalRow={},$scope.totalRow.notAcctForEmps=0,$scope.totalRow.cumPField=0,$scope.totalRow.yesPField=0,$scope.totalRow.todPField=0,$scope.totalRow.tomPField=0,$scope.totalRow.cumPOffice=0,$scope.totalRow.yesPOffice=0,$scope.totalRow.todPOffice=0,$scope.totalRow.tomPOffice=0,$scope.totalRow.truck=0,$scope.totalRow.boat=0,$scope.totalRow.other=0,$scope.totalRow.gageVisits=0,$scope.totalRow.gagesDown=0,$scope.totalRow.disCtoDate=0,$scope.totalRow.disCPlanned=0,$scope.totalRow.CheckMeasToDate=0,$scope.totalRow.CheckMeasPlanned=0,$scope.totalRow.indMeas=0,$scope.totalRow.ratExt=0,$scope.totalRow.peaksOfRec=0,$scope.totalRow.QWGageVis=0,$scope.totalRow.contQWGageVis=0,$scope.totalRow.contQWGageDown=0,$scope.totalRow.disQWSamples=0,$scope.totalRow.sedSamples=0,$scope.totalRow.rdgPlan=0,$scope.totalRow.rdgDep=0,$scope.totalRow.rdgRec=0,$scope.totalRow.rdgLost=0,$scope.totalRow.waterPlan=0,$scope.totalRow.waterDep=0,$scope.totalRow.waterRec=0,$scope.totalRow.waterLost=0,$scope.totalRow.wavePlan=0,$scope.totalRow.waveDep=0,$scope.totalRow.waveRec=0,$scope.totalRow.waveLost=0,$scope.totalRow.baroPlan=0,$scope.totalRow.baroDep=0,$scope.totalRow.baroRec=0,$scope.totalRow.baroLost=0,$scope.totalRow.metPlan=0,$scope.totalRow.metDep=0,$scope.totalRow.metRec=0,$scope.totalRow.metLost=0,$scope.totalRow.hwmFlag=0,$scope.totalRow.hwmCol=0;var abbrevs=[];angular.forEach($scope.Statemodel.value,function(state){abbrevs.push(state.state_abbrev)});var abbrevString=abbrevs.join(","),thisDate=$scope.formatDate($scope.genSummary.sum_date);REPORT.getFilteredReports({Event:$scope.EventName.event_id,States:abbrevString,Date:thisDate}).$promise.then(function(result){for(var x=0;x<result.length;x++){var thisRPModel={};thisRPModel.report=result[x],$scope.totalRow.notAcctForEmps+=thisRPModel.report.sw_fieldpers_notacct+thisRPModel.report.wq_fieldpers_notacct,$scope.totalRow.cumPField+=thisRPModel.report.yest_fieldpers+thisRPModel.report.tod_fieldpers+thisRPModel.report.tmw_fieldpers,$scope.totalRow.yesPField+=thisRPModel.report.yest_fieldpers,$scope.totalRow.todPField+=thisRPModel.report.tod_fieldpers,$scope.totalRow.tomPField+=thisRPModel.report.tmw_fieldpers,$scope.totalRow.cumPOffice+=thisRPModel.report.yest_officepers+thisRPModel.report.tod_officepers+thisRPModel.report.tmw_officepers,$scope.totalRow.yesPOffice+=thisRPModel.report.yest_officepers,$scope.totalRow.todPOffice+=thisRPModel.report.tod_officepers,$scope.totalRow.tomPOffice+=thisRPModel.report.tmw_officepers,$scope.totalRow.gageVisits+=thisRPModel.report.gage_visit,$scope.totalRow.gagesDown+=thisRPModel.report.gage_down,$scope.totalRow.disCtoDate+=thisRPModel.report.tot_discharge_meas,$scope.totalRow.disCPlanned+=thisRPModel.report.plan_discharge_meas,$scope.totalRow.indMeas+=thisRPModel.report.plan_indirect_meas,$scope.totalRow.ratExt+=thisRPModel.report.rating_extens,$scope.totalRow.peaksOfRec+=thisRPModel.report.gage_peak_record,$scope.totalRow.disQWSamples+=thisRPModel.report.qw_discr_samples,$scope.totalRow.sedSamples+=thisRPModel.report.coll_sedsamples,$scope.totalRow.rdgPlan+=thisRPModel.report.plan_rapdepl_gage,$scope.totalRow.rdgDep+=thisRPModel.report.dep_rapdepl_gage,$scope.totalRow.rdgRec+=thisRPModel.report.rec_rapdepl_gage,$scope.totalRow.rdgLost+=thisRPModel.report.lost_rapdepl_gage,$scope.totalRow.waterPlan+=thisRPModel.report.plan_wtrlev_sensor,$scope.totalRow.waterDep+=thisRPModel.report.dep_wtrlev_sensor,$scope.totalRow.waterRec+=thisRPModel.report.rec_wtrlev_sensor,$scope.totalRow.waterLost+=thisRPModel.report.lost_wtrlev_sensor,$scope.totalRow.wavePlan+=thisRPModel.report.plan_wv_sens,$scope.totalRow.waveDep+=thisRPModel.report.dep_wv_sens,$scope.totalRow.waveRec+=thisRPModel.report.rec_wv_sens,$scope.totalRow.waveLost+=thisRPModel.report.lost_wv_sens,$scope.totalRow.baroPlan+=thisRPModel.report.plan_barometric,$scope.totalRow.baroDep+=thisRPModel.report.dep_barometric,$scope.totalRow.baroRec+=thisRPModel.report.rec_barometric,$scope.totalRow.baroLost+=thisRPModel.report.lost_barometric,$scope.totalRow.metPlan+=thisRPModel.report.plan_meteorological,$scope.totalRow.metDep+=thisRPModel.report.dep_meteorological,$scope.totalRow.metRec+=thisRPModel.report.rec_meteorological,$scope.totalRow.metLost+=thisRPModel.report.lost_meteorological,$scope.totalRow.hwmFlag+=thisRPModel.report.hwm_flagged,$scope.totalRow.hwmCol=thisRPModel.report.hwm_collected,$scope.MetricDisplayModel.push(thisRPModel)}$scope.GenRepEventModel={},$scope.GenRepEventModel.Event=$scope.EventName,$scope.GenRepEventModel.EventType=$scope.eventTypes.filter(function(et){return et.event_type_id==$scope.EventName.event_type_id})[0],$scope.GenRepEventModel.EventStat=$scope.eventStats.filter(function(es){return es.event_status_id==$scope.EventName.event_status_id})[0],$scope.GenRepEventModel.Coordinator=$scope.members.filter(function(m){return m.member_id==$scope.GenRepEventModel.Event.event_coordinator})[0],$scope.GenRepEventModel.CoordAgency=$scope.agencies.filter(function(a){return a.agency_id==$scope.GenRepEventModel.Coordinator.agency_id})[0];var modalInstance=$uibModal.open({templateUrl:"MetricsSummary.html",size:"lg",windowClass:"rep-dialog",resolve:{thisReport:function(){return $scope.MetricDisplayModel},thisEvent:function(){return $scope.GenRepEventModel},theTotalRow:function(){return $scope.totalRow}},controller:["$scope","$uibModalInstance","thisReport","thisEvent","theTotalRow",function($scope,$uibModalInstance,thisReport,thisEvent,theTotalRow){$scope.Report=thisReport,$scope.Event=thisEvent,$scope.totals=theTotalRow,$scope.ok=function(){$uibModalInstance.dismiss("cancel")},$scope.print=function(){window.print()}}]});modalInstance.result.then(function(){})})}},$scope.displayContactsSum=function(valid){if(valid){var abbrevs=[];angular.forEach($scope.Statemodel.value,function(state){abbrevs.push(state.state_abbrev)});var abbrevString=abbrevs.join(","),thisDate=$scope.formatDate($scope.genSummary.sum_date);$scope.reportModel=[],$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",REPORT.getReportwithContacts({Event:$scope.EventName.event_id,States:abbrevString,Date:thisDate}).$promise.then(function(result){for(var x=0;x<result.length;x++){var rep={};rep.repID=result[x].reporting_metrics_id,rep.State=result[x].state,rep.report_date=result[x].report_date;var submitter=$scope.members.filter(function(m){return m.member_id==result[x].member_id})[0],submitterAgency=$scope.agencies.filter(function(a){return a.agency_id==submitter.agency_id})[0],sub={};sub.fname=submitter.fname,sub.lname=submitter.lname,sub.email=submitter.email,sub.phone=submitter.phone,sub.agencyname=submitterAgency.agency_name,sub.agencyadd=submitterAgency.city+" "+submitterAgency.state+" "+submitterAgency.zip,rep.submitter=sub,rep.depC=result[x].ReportContacts.filter(function(x){return"Deployed Staff"==x.type})[0],rep.genC=result[x].ReportContacts.filter(function(x){return"General"==x.type})[0],rep.inlC=result[x].ReportContacts.filter(function(x){return"Inland Flood"==x.type})[0],rep.coastC=result[x].ReportContacts.filter(function(x){return"Coastal Flood"==x.type})[0],rep.waterC=result[x].ReportContacts.filter(function(x){return"Water Quality"==x.type})[0],$scope.reportModel.push(rep)}setTimeout(function(){showModal()},3e3);var showModal=function(){var modalInstance=$uibModal.open({templateUrl:"ContactMetricsSummary.html",size:"lg",windowClass:"rep-dialog",resolve:{theseReports:function(){return $scope.reportModel},thisEvent:function(){return $scope.GenRepEventModel={},$scope.GenRepEventModel.Event=$scope.EventName,$scope.GenRepEventModel.EventType=$scope.eventTypes.filter(function(et){return et.event_type_id==$scope.EventName.event_type_id})[0],$scope.GenRepEventModel.EventStat=$scope.eventStats.filter(function(es){return es.event_status_id==$scope.EventName.event_status_id})[0],$scope.GenRepEventModel.Coordinator=$scope.members.filter(function(m){return m.member_id==$scope.EventName.event_coordinator})[0],$scope.GenRepEventModel.CoordAgency=$scope.agencies.filter(function(a){return a.agency_id==$scope.GenRepEventModel.Coordinator.agency_id})[0],$scope.GenRepEventModel}},controller:["$scope","$http","$uibModalInstance","theseReports","thisEvent",function($scope,$http,$uibModalInstance,theseReports,thisEvent){$scope.Reports=theseReports,$scope.Event=thisEvent,$scope.ok=function(){$uibModalInstance.dismiss("cancel")},$scope.print=function(){window.print()}}]});modalInstance.result.then(function(){})}})}},$scope.getCSVfile=function(valid){valid&&($http.defaults.headers.common.Accept="text/csv",REPORT.getReportsCSV({Event:$scope.genSummary.event_id,States:$scope.StateAbbrevs,Date:$scope.genSummary.sum_date}).$promise.then(function(result){var anchor=angular.element("<a/>"),joinedResponse=result.join(""),file=new Blob([joinedResponse],{type:"application/csv"}),fileURL=URL.createObjectURL(file);anchor.href=fileURL,anchor.download="report.csv",anchor.click()}),function(){console.log("error")})})}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("ProjAlertModalCtrl",["$scope","$uibModalInstance","ProjAlert",function($scope,$uibModalInstance,ProjAlert){$scope.ProjAlertParts=ProjAlert,$scope.ok=function(){$uibModalInstance.dismiss("cancel")}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("confirmReportModalCtrl",["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("OPmodalCtrl",["$scope","$rootScope","$cookies","$http","$sce","$uibModalInstance","$uibModal","SERVER_URL","FILE_STAMP","Site_Files","allDropdowns","thisOP","thisOPControls","opSite","agencyList","allMembers","OBJECTIVE_POINT","OP_CONTROL_IDENTIFIER","OP_MEASURE","SOURCE","FILE",function($scope,$rootScope,$cookies,$http,$sce,$uibModalInstance,$uibModal,SERVER_URL,FILE_STAMP,Site_Files,allDropdowns,thisOP,thisOPControls,opSite,agencyList,allMembers,OBJECTIVE_POINT,OP_CONTROL_IDENTIFIER,OP_MEASURE,SOURCE,FILE){$scope.serverURL=SERVER_URL,$scope.view={OPval:"detail"},$scope.fileIsUploading=!1,$scope.dl={dlOpen:!0,dlFileOpen:!1},$scope.OPTypeList=allDropdowns[0],$scope.HDList=allDropdowns[1],$scope.HCollectMethodList=allDropdowns[2],$scope.VDatumList=allDropdowns[3],$scope.VCollectMethodList=allDropdowns[4],$scope.OPQualityList=allDropdowns[5],$scope.fileTypeList=allDropdowns[6],$scope.htmlDescriptionTip=$sce.trustAsHtml("Please describe location and type of mark <em>ie. 'chiseled square on third sidewalk block on the south side of the street'</em>"),$scope.HWMfileIsUploading=!1,$scope.OP={},$scope.removeOPCarray=[],$scope.thisOPsite=opSite,$scope.addedIdentifiers=[],$scope.showControlIDinput=!1,$scope.DMS={},$scope.allSFiles=Site_Files.getAllSiteFiles(),$scope.OPFiles="empty"!==thisOP?$scope.allSFiles.filter(function(sf){return sf.objective_point_id==thisOP.objective_point_id}):[],$scope.opImageFiles=$scope.OPFiles.filter(function(opf){return 1===opf.filetype_id}),$scope.showFileForm=!1,$scope.UnquantChecked=function(){1==$scope.opCopy.unquantified&&($scope.opCopy.uncertainty="")},$scope.stamp=FILE_STAMP.getStamp(),$scope.fileItemExists=!0,$scope.saveFileUpload=function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.sFileIsUploading=!0;var fileParts={FileEntity:{file_id:$scope.aFile.file_id,name:$scope.aFile.name,description:$scope.aFile.description,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,file_date:$scope.aFile.file_date,hwm_id:$scope.aFile.hwm_id,site_id:$scope.aFile.site_id,filetype_id:$scope.aFile.filetype_id,source_id:$scope.aFile.source_id,path:$scope.aFile.path,data_file_id:$scope.aFile.data_file_id,instrument_id:$scope.aFile.instrument_id,photo_date:$scope.aFile.photo_date,is_nwis:$scope.aFile.is_nwis,objective_point_id:$scope.aFile.objective_point_id},File:void 0!==$scope.aFile.File1?$scope.aFile.File1:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Objective Point File",$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),FILE_STAMP.setStamp(),$scope.stamp=FILE_STAMP.getStamp(),$scope.isPhoto=$scope.aFile.File1.type.indexOf("image")>-1?!0:!1,$scope.aFile.name=fresponse.name,$scope.aFile.path=fresponse.path,void 0!==$scope.aFile.File1&&($scope.aFile.File=$scope.aFile.File1,$scope.aFile.File1=void 0),$scope.OPFiles.splice($scope.existFileIndex,1),$scope.OPFiles.push(fresponse),1===fresponse.filetype_id&&($scope.opImageFiles.splice($scope.existFileIndex,1),$scope.opImageFiles.push(fresponse)),$scope.allSFiles[$scope.allSFileIndex]=fresponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.sFileIsUploading=!1,$scope.fileItemExists=!0},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})},$scope.showFile=function(file){if($scope.fileTypes=$scope.fileTypeList,$scope.agencies=agencyList,$scope.existFileIndex=-1,$scope.existIMGFileIndex=-1,$scope.allSFileIndex=-1,$scope.aFile={},$scope.aSource={},0!==file){if($scope.existFileIndex=$scope.OPFiles.indexOf(file),$scope.allSFileIndex=$scope.allSFiles.indexOf(file),$scope.existIMGFileIndex=$scope.opImageFiles.length>0?$scope.opImageFiles.indexOf(file):-1,$scope.aFile=angular.copy(file),$scope.aFile.fileType=$scope.fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,FILE.getFileItem({id:$scope.aFile.file_id}).$promise.then(function(response){$scope.fileItemExists=response.Length>0?!0:!1}),void 0!==$scope.aFile.name){var fI=$scope.aFile.name.lastIndexOf("."),fileExt=$scope.aFile.name.substring(fI+1);$scope.isPhoto=fileExt.match(/(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)?!0:!1}$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),null!==file.source_id&&SOURCE.query({id:file.source_id}).$promise.then(function(s){$scope.aSource=s,$scope.aSource.FULLname=$scope.aSource.source_name,1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)})}else $scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname;$scope.showFileForm=!0,$scope.updateAgencyForCaption=function(){1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}},$scope.createFile=function(valid){if(valid&&($scope.fileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",null!==$scope.aSource.agency_id)){var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,photo_date:$scope.aFile.photo_date,description:$scope.aFile.description,site_id:$scope.thisOPsite.site_id,source_id:response.source_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,objective_point_id:$scope.OP.objective_point_id},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Objective Point File",$scope.OPFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),FILE_STAMP.setStamp(),1===fresponse.filetype_id&&$scope.opImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.fileIsUploading=!1},function(errorResponse){$scope.fileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.fileIsUploading=!1,toastr.error("Error saving Source info: "+errorResponse.statusText)})}},$scope.saveFile=function(valid){if(valid){$scope.fileIsUploading=!0;{$scope.aFile.fileBelongsTo}if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.aSource.source_id){var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){$scope.aFile.source_id=response.source_id,FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="Objective Point File",$scope.OPFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.fileIsUploading=!1},function(errorResponse){$scope.fileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.fileIsUploading=!1,toastr.error("Error saving source: "+errorResponse.statusText)})}}},$scope.deleteFile=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.OPFiles.splice($scope.existFileIndex,1),$scope.allSFiles.splice($scope.allSFileIndex,1),$scope.opImageFiles.splice($scope.existIMGFileIndex,1),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelFile=function(){$scope.aFile={},$scope.aSource={},$scope.showFileForm=!1};var makeAdate=function(d){var aDate=new Date;""!==d&&void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};"empty"!=thisOP?($scope.opModalHeader="Datum Location Information",$scope.createOReditOP="edit",$scope.OP=angular.copy(thisOP),$scope.OP.date_established=makeAdate($scope.OP.date_established),0===$scope.OP.vdatum_id&&delete $scope.OP.vdatum_id,null!==$scope.OP.date_recovered&&($scope.OP.date_recovered=makeAdate($scope.OP.date_recovered)),thisOPControls.length>0&&($scope.addedIdentifiers=thisOPControls,$scope.showControlIDinput=!0),$scope.OP.opType=$scope.OP.op_type_id>0?$scope.OPTypeList.filter(function(t){return t.objective_point_type_id==$scope.OP.op_type_id})[0].op_type:"",$scope.OP.quality=$scope.OP.op_quality_id>0?$scope.OPQualityList.filter(function(q){return q.op_quality_id==$scope.OP.op_quality_id})[0].quality:"",$scope.OP.hdatum=$scope.OP.hdatum_id>0?$scope.HDList.filter(function(hd){return hd.datum_id==$scope.OP.hdatum_id})[0].datum_name:"",$scope.OP.hCollectMethod=$scope.OP.hcollect_method_id>0?$scope.HCollectMethodList.filter(function(hc){return hc.hcollect_method_id==$scope.OP.hcollect_method_id})[0].hcollect_method:"",$scope.OP.vDatum=$scope.OP.vdatum_id>0?$scope.VDatumList.filter(function(vd){return vd.datum_id==$scope.OP.vdatum_id})[0].datum_name:"",$scope.OP.vCollectMethod=$scope.OP.vcollect_method_id>0?$scope.VCollectMethodList.filter(function(vc){return vc.vcollect_method_id==$scope.OP.vcollect_method_id})[0].vcollect_method:""):($scope.opModalHeader="Create new Datum Location",$scope.createOReditOP="create",$scope.OP.latitude_dd=opSite.latitude_dd,$scope.OP.longitude_dd=opSite.longitude_dd,$scope.OP.hdatum_id=opSite.hdatum_id,$scope.OP.date_established=makeAdate("")),$scope.OP.decDegORdms="dd",$scope.OP.FTorMETER="ft",$scope.OP.FTorCM="ft",$scope.addNewIdentifier=function(){"edit"==$scope.createOReditOP?$scope.addedIdentifiersCopy.push({objective_point_id:$scope.OP.objective_point_id,identifier:"",identifier_type:""}):$scope.addedIdentifiers.push({identifier:"",identifier_type:""}),$scope.showControlIDinput=!0},$scope.datepickrs={},$scope.dateOptions={startingDay:1,showWeeks:!1},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())};var azimuth=function(deg,min,sec){var azi=0;return 0>deg?(azi=-1*deg+1*min/60+1*sec/3600,(-1*azi).toFixed(5)):(azi=1*deg+1*min/60+1*sec/3600,azi.toFixed(5))},deg_to_dms=function(deg){0>deg&&(deg=deg.toString(),deg=deg.substring(1));var d=Math.floor(deg),minfloat=60*(deg-d),m=Math.floor(minfloat),s=(60*(minfloat-m)).toFixed(3);return""+d+":"+m+":"+s};$scope.latLongChange=function(){if("edit"==$scope.createOReditOP){if("dd"==$scope.opCopy.decDegORdms)if(void 0!==$scope.DMS.LADeg&&void 0!==$scope.DMS.LAMin&&void 0!==$scope.DMS.LASec&&void 0!==$scope.DMS.LODeg&&void 0!==$scope.DMS.LOMin&&void 0!==$scope.DMS.LOSec)$scope.opCopy.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.opCopy.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),$scope.DMS={};else{var DMSModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all three inputs for conversion from DMS to Decimal Degrees to work.</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});DMSModal.result.then(function(){(void 0!==$scope.DMS.LADeg||void 0!==$scope.DMS.LAMin||void 0!==$scope.DMS.LASec)&&$("#LaDeg").focus(),(void 0!==$scope.DMS.LODeg||void 0!==$scope.DMS.LOMin||void 0!==$scope.DMS.LOSec)&&$("#LoDeg").focus(),$scope.opCopy.decDegORdms="dms"})}else if(void 0!==$scope.opCopy.latitude_dd){var latDMS=deg_to_dms($scope.opCopy.latitude_dd).toString(),ladDMSarray=latDMS.split(":");

$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.opCopy.longitude_dd),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2],$scope.opCopy.latitude_dd=void 0,$scope.opCopy.longitude_dd=void 0}}else if("dd"==$scope.OP.decDegORdms)if(void 0!==$scope.DMS.LADeg&&void 0!==$scope.DMS.LAMin&&void 0!==$scope.DMS.LASec&&void 0!==$scope.DMS.LODeg&&void 0!==$scope.DMS.LOMin&&void 0!==$scope.DMS.LOSec)$scope.OP.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.OP.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),$scope.DMS={};else{var DMSddModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all three inputs for conversion from DMS to Decimal Degrees to work.</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});DMSddModal.result.then(function(){(void 0!==$scope.DMS.LADeg||void 0!==$scope.DMS.LAMin||void 0!==$scope.DMS.LASec)&&$("#LaDeg").focus(),(void 0!==$scope.DMS.LODeg||void 0!==$scope.DMS.LOMin||void 0!==$scope.DMS.LOSec)&&$("#LoDeg").focus(),$scope.OP.decDegORdms="dms"})}else if(void 0!==$scope.OP.latitude_dd){var create_latDMS=deg_to_dms($scope.OP.latitude_dd).toString(),create_ladDMSarray=create_latDMS.split(":");$scope.DMS.LADeg=create_ladDMSarray[0],$scope.DMS.LAMin=create_ladDMSarray[1],$scope.DMS.LASec=create_ladDMSarray[2];var create_longDMS=deg_to_dms($scope.OP.longitude_dd),create_longDMSarray=create_longDMS.split(":");$scope.DMS.LODeg=-1*create_longDMSarray[0],$scope.DMS.LOMin=create_longDMSarray[1],$scope.DMS.LOSec=create_longDMSarray[2],$scope.OP.latitude_dd=void 0,$scope.OP.longitude_dd=void 0}};var trimOP=function(op){var OBJ_PT={name:op.name,description:op.description,elev_ft:void 0!==op.elev_ft?op.elev_ft:null,date_established:op.date_established,op_is_destroyed:void 0!==op.op_is_destroyed?op.op_is_destroyed:0,op_notes:void 0!==op.op_notes?op.op_notes:null,site_id:$scope.thisOPsite.site_id,vdatum_id:void 0!==op.vdatum_id?op.vdatum_id:0,latitude_dd:op.latitude_dd,longitude_dd:op.longitude_dd,hdatum_id:void 0!==op.hdatum_id?op.hdatum_id:0,hcollect_method_id:void 0!==op.hcollect_method_id?op.hcollect_method_id:0,vcollect_method_id:void 0!==op.vcollect_method_id?op.vcollect_method_id:0,op_type_id:op.op_type_id,date_recovered:void 0!==op.date_recovered?op.date_recovered:null,uncertainty:void 0!==op.uncertainty&&""!==op.uncertainty?op.uncertainty:null,unquantified:void 0!==op.unquantified?op.unquantified:null,op_quality_id:void 0!==op.op_quality_id?op.op_quality_id:null};return OBJ_PT};$scope.cancel=function(){$uibModalInstance.close()};var formatDefaults=function(theOP,fromWhere){"create"==fromWhere?("meter"==theOP.FTorMETER&&($scope.OP.FTorMETER="ft",$scope.OP.elev_ft=3.2808*$scope.OP.elev_ft),"cm"==theOP.FTorCM&&($scope.OP.FTorCM="ft",$scope.OP.uncertainty=parseFloat($scope.OP.uncertainty/30.48).toFixed(6)),"dms"==theOP.decDegORdms&&($scope.OP.decDegORdms="dd",$scope.OP.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.OP.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),$scope.DMS={},$scope.OP.site_id=$scope.thisOPsite.site_id)):("meter"==theOP.FTorMETER&&($scope.opCopy.FTorMETER="ft",$scope.opCopy.elev_ft=3.2808*$scope.opCopy.elev_ft),"cm"==theOP.FTorCM&&($scope.opCopy.FTorCM="ft",$scope.opCopy.uncertainty=parseFloat($scope.opCopy.uncertainty/30.48).toFixed(6)),"dms"==theOP.decDegORdms&&($scope.opCopy.decDegORdms="dd",$scope.opCopy.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.opCopy.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),$scope.DMS={},$scope.opCopy.site_id=$scope.thisOPsite.site_id))};$scope.create=function(){if(this.OPForm.$valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var createdOP={};formatDefaults($scope.OP,"create");var OPtoPOST=trimOP($scope.OP);OBJECTIVE_POINT.save(OPtoPOST,function(response){if(toastr.success("Datum Location created"),createdOP=response,$scope.addedIdentifiers.length>0)for(var opc=0;opc<$scope.addedIdentifiers.length;opc++){var thisOne=$scope.addedIdentifiers[opc];thisOne.objective_point_id=response.objective_point_id,OP_CONTROL_IDENTIFIER.save(thisOne).$promise}},function(errorResponse){toastr.error("Error creating Datum Location: "+errorResponse.statusText)}).$promise.then(function(){var sendBack=[createdOP,"created"];$uibModalInstance.close(sendBack)})}},$scope.RemoveID=function(opControl){if(void 0!==$scope.addedIdentifiersCopy){var i=$scope.addedIdentifiersCopy.indexOf(opControl);void 0!==opControl.op_control_identifier_id?($scope.removeOPCarray.push(opControl),$scope.addedIdentifiersCopy.splice(i,1)):$scope.addedIdentifiersCopy.splice(i,1)}else{var ci=$scope.addedIdentifiers.indexOf(opControl);$scope.addedIdentifiers.splice(ci,1)}},$scope.save=function(valid){if(valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.DMS.LADeg&&($scope.opCopy.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.opCopy.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec));if($scope.addedIdentifiersCopy.length>0)for(var i=0;i<$scope.addedIdentifiersCopy.length;i++)if(void 0!==$scope.addedIdentifiersCopy[i].op_control_identifier_id){var existIndex=$scope.addedIdentifiers.map(function(i){return i.op_control_identifier_id}).indexOf($scope.addedIdentifiersCopy[i].op_control_identifier_id);OP_CONTROL_IDENTIFIER.update({id:$scope.addedIdentifiersCopy[i].op_control_identifier_id},$scope.addedIdentifiersCopy[i]).$promise.then(function(response){$scope.addedIdentifiers[existIndex]=response})}else{var thisOPControlID=$scope.addedIdentifiersCopy[i];thisOPControlID.objective_point_id=$scope.OP.objective_point_id,OP_CONTROL_IDENTIFIER.save(thisOPControlID).$promise.then(function(response){$scope.addedIdentifiers.push(response)})}if($scope.removeOPCarray.length>0)for(var r=0;r<$scope.removeOPCarray.length;r++){var deIndex=$scope.addedIdentifiers.map(function(ri){return ri.op_control_identifier_id}).indexOf($scope.removeOPCarray[r].op_control_identifier_id);OP_CONTROL_IDENTIFIER["delete"]({id:$scope.removeOPCarray[r].op_control_identifier_id}).$promise.then(function(){$scope.addedIdentifiers.splice(deIndex,1)})}formatDefaults($scope.opCopy,"edit");var OPtoPOST=trimOP($scope.opCopy);OPtoPOST.objective_point_id=$scope.opCopy.objective_point_id,OBJECTIVE_POINT.update({id:OPtoPOST.objective_point_id},OPtoPOST,function(response){toastr.success("Datum Location updated"),$scope.OP=response,thisOP=response,$scope.OP.date_established=makeAdate($scope.OP.date_established),null!==$scope.OP.date_recovered&&($scope.OP.date_recovered=makeAdate($scope.OP.date_recovered)),$scope.OP.opType=$scope.OP.op_type_id>0?$scope.OPTypeList.filter(function(t){return t.objective_point_type_id==$scope.OP.op_type_id})[0].op_type:"",$scope.OP.quality=$scope.OP.op_quality_id>0?$scope.OPQualityList.filter(function(q){return q.op_quality_id==$scope.OP.op_quality_id})[0].quality:"",$scope.OP.hdatum=$scope.OP.hdatum_id>0?$scope.HDList.filter(function(hd){return hd.datum_id==$scope.OP.hdatum_id})[0].datum_name:"",$scope.OP.hCollectMethod=$scope.OP.hcollect_method_id>0?$scope.HCollectMethodList.filter(function(hc){return hc.hcollect_method_id==$scope.OP.hcollect_method_id})[0].hcollect_method:"",$scope.OP.vDatum=$scope.OP.vdatum_id>0?$scope.VDatumList.filter(function(vd){return vd.datum_id==$scope.OP.vdatum_id})[0].datum_name:"",$scope.OP.vCollectMethod=$scope.OP.vcollect_method_id>0?$scope.VCollectMethodList.filter(function(vc){return vc.vcollect_method_id==$scope.OP.vcollect_method_id})[0].vcollect_method:"",$scope.opCopy={},$scope.addedIdentifiersCopy=[],$scope.view.OPval="detail"},function(errorResponse){toastr.error("Error updating Datum Location: "+errorResponse.statusText)}).$promise}},$scope.deleteOP=function(){OP_MEASURE.getDatumLocationOPMeasures({objectivePointId:$scope.OP.objective_point_id}).$promise.then(function(result){if(result.length>0){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Cannot Delete</h3></div><div class="modal-body"><p>This Datum Location is being used for one or more sensor tape downs. Please delete the tape down before deleting the datum location.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}else{var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.OP},what:function(){return"Objective Point"}}});DeleteModalInstance.result.then(function(opToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),OBJECTIVE_POINT["delete"]({id:opToRemove.objective_point_id},opToRemove).$promise.then(function(){$scope.OPFiles=[],$scope.opImageFiles=[];for(var l=$scope.allSFiles.length;l--;)$scope.allSFiles[l].objective_point_id==opToRemove.objective_point_id&&$scope.allSFiles.splice(l,1);Site_Files.setAllSiteFiles($scope.allSFiles),toastr.success("Datum Location Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})}})};var openLatModal=function(w){var latModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Latitude must be between 0 and 73.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});latModal.result.then(function(fieldFocus){"latlong"==w?$("#latitude_dd").focus():$("#LaDeg").focus()})},openLongModal=function(w){var longModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Longitude must be between -175.0 and -60.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});longModal.result.then(function(fieldFocus){"latlong"==w?$("#longitude_dd").focus():$("#LoDeg").focus()})};$scope.checkValue=function(d){if("dms"==d)($scope.DMS.LADeg<0||$scope.DMS.LADeg>73||isNaN($scope.DMS.LADeg)&&void 0!==$scope.DMS.LADeg||isNaN($scope.DMS.LAMin)&&void 0!==$scope.DMS.LAMin||isNaN($scope.DMS.LASec)&&void 0!==$scope.DMS.LASec)&&(openLatModal("dms"),isNaN($scope.DMS.LADeg)&&($scope.DMS.LADeg=void 0),isNaN($scope.DMS.LAMin)&&($scope.DMS.LAMin=void 0),isNaN($scope.DMS.LASec)&&($scope.DMS.LASec=void 0)),($scope.DMS.LODeg<-175||$scope.DMS.LODeg>-60||isNaN($scope.DMS.LODeg)&&void 0!==$scope.DMS.LODeg||isNaN($scope.DMS.LOMin)&&void 0!==$scope.DMS.LOMin||isNaN($scope.DMS.LOSec)&&void 0!==$scope.DMS.LOSec)&&(openLongModal("dms"),isNaN($scope.DMS.LODeg)&&($scope.DMS.LODeg=void 0),isNaN($scope.DMS.LOMin)&&($scope.DMS.LOMin=void 0),isNaN($scope.DMS.LOSec)&&($scope.DMS.LOSec=void 0));else{var op="edit"==$scope.view.OPval?$scope.opCopy:$scope.OP;(op.latitude_dd<0||op.latitude_dd>73||isNaN(op.latitude_dd))&&(openLatModal("latlong"),isNaN(op.latitude_dd)&&(op.latitude_dd=void 0)),(op.longitude_dd<-175||op.longitude_dd>-60||isNaN(op.longitude_dd))&&(openLongModal("latlong"),isNaN(op.longitude_dd)&&(op.longitude_dd=void 0))}},$scope.wannaEditOP=function(){$scope.view.OPval="edit",$scope.opCopy=angular.copy($scope.OP),$scope.opCopy.decDegORdms="dd",$scope.opCopy.FTorMETER="ft",$scope.opCopy.FTorCM="ft",$scope.addedIdentifiersCopy=angular.copy($scope.addedIdentifiers)},$scope.cancelOPEdit=function(){$scope.view.OPval="detail",$scope.opCopy=[]},$rootScope.stateIsLoading.showLoading=!1}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("objectivePointCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","OBJECTIVE_POINT","MEMBER","thisSite","thisSiteOPs","allOPTypes","allHorDatums","allHorCollMethods","allVertDatums","allVertColMethods","allOPQualities","allFileTypes","allAgencies",function($scope,$rootScope,$cookies,$location,$state,$http,$uibModal,$filter,$timeout,OBJECTIVE_POINT,MEMBER,thisSite,thisSiteOPs,allOPTypes,allHorDatums,allHorCollMethods,allVertDatums,allVertColMethods,allOPQualities,allFileTypes,allAgencies){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($scope.opCount={total:thisSiteOPs.length},$scope.SiteObjectivePoints=thisSiteOPs,$scope.showOPModal=function(OPclicked){$scope.opFileTypes=allFileTypes.filter(function(oft){return"Photo"===oft.filetype||"Field Sheets"===oft.filetype||"Level Notes"===oft.filetype||"Other"===oft.filetype||"NGS Datasheet"===oft.filetype||"Sketch"===oft.filetype});{var passAllLists=[allOPTypes,allHorDatums,allHorCollMethods,allVertDatums,allVertColMethods,allOPQualities,$scope.opFileTypes];$scope.SiteObjectivePoints.indexOf(OPclicked)}$rootScope.stateIsLoading={showLoading:!0};var modalInstance=$uibModal.open({templateUrl:"OPmodal.html",controller:"OPmodalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{allDropdowns:function(){return passAllLists},thisOP:function(){return 0!==OPclicked?OPclicked:"empty"},thisOPControls:function(){return 0!==OPclicked?OBJECTIVE_POINT.getOPControls({id:OPclicked.objective_point_id}).$promise:void 0},opSite:function(){return thisSite},agencyList:function(){return allAgencies},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise}}});modalInstance.result.then(function(createdOP){if($rootScope.stateIsLoading={showLoading:!1},void 0!==createdOP){if("created"==createdOP[1]&&($scope.SiteObjectivePoints.push(createdOP[0]),$scope.opCount.total=$scope.SiteObjectivePoints.length),void 0===createdOP[1]){var iClicked=$scope.SiteObjectivePoints.indexOf(OPclicked);$scope.SiteObjectivePoints[iClicked]=createdOP}if("deleted"==createdOP[1]){var indexClicked1=$scope.SiteObjectivePoints.indexOf(OPclicked);$scope.SiteObjectivePoints.splice(indexClicked1,1),$scope.opCount.total=$scope.SiteObjectivePoints.length}}})})}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("peakModalCtrl",["$scope","$rootScope","$cookies","$http","$uibModalInstance","$uibModal","SERVER_URL","allVertDatums","allCollectConditions","thisPeak","peakSite","allMembers","allEventHWMs","allSiteSensors","allSiteFiles","thisPeakDFs","DATA_FILE","PEAK","HWM",function($scope,$rootScope,$cookies,$http,$uibModalInstance,$uibModal,SERVER_URL,allVertDatums,allCollectConditions,thisPeak,peakSite,allMembers,allEventHWMs,allSiteSensors,allSiteFiles,thisPeakDFs,DATA_FILE,PEAK,HWM){$scope.serverURL=SERVER_URL,$scope.VDatumsList=allVertDatums,$scope.thisSite=peakSite,$scope.memberList=allMembers,$scope.loggedInRole=$cookies.get("usersRole");for(var determineDFPresent=function(f){for(var x=0;x<f.length;x++)if(2==f[x].filetype_id)return!0;return!1},sf=0;sf<allSiteFiles.length;sf++)("DataFile File"==allSiteFiles[sf].fileBelongsTo||"Sensor File"==allSiteFiles[sf].fileBelongsTo)&&(allSiteFiles[sf].selected=!1);for(var s=0;s<allSiteSensors.length;s++){var correctOrderSS=[],sensorStatuses=allSiteSensors[s].instrument_status;if(sensorStatuses.length>1){var proposedStat=sensorStatuses.filter(function(ps){return"Proposed"==ps.status})[0],deployedStat=sensorStatuses.filter(function(ps){return"Deployed"==ps.status})[0],retLostStat=sensorStatuses.filter(function(ps){return"Retrieved"==ps.status||"Lost"==ps.status})[0];retLostStat&&correctOrderSS.push(retLostStat),deployedStat&&correctOrderSS.push(deployedStat),proposedStat&&correctOrderSS.push(proposedStat)}else correctOrderSS.push(sensorStatuses[0]);allSiteSensors[s].instrument_status=[],allSiteSensors[s].instrument_status=correctOrderSS}$scope.eventSiteHWMs=allEventHWMs.filter(function(h){return h.site_id==peakSite.site_id}),angular.forEach($scope.eventSiteHWMs,function(esh){esh.selected=!1,esh.files=allSiteFiles.filter(function(sf){return sf.hwm_id==esh.hwm_id&&"HWM File"==sf.fileBelongsTo})}),$scope.eventSiteSensors=allSiteSensors.filter(function(s){return s.event_id==$cookies.get("SessionEventID")});for(var evSiteSen=0;evSiteSen<$scope.eventSiteSensors.length;evSiteSen++)$scope.eventSiteSensors[evSiteSen].CollectCondition=null!==$scope.eventSiteSensors[evSiteSen].inst_collection_id&&$scope.eventSiteSensors[evSiteSen].inst_collection_id>0?allCollectConditions.filter(function(cc){return cc.id==$scope.eventSiteSensors[evSiteSen].inst_collection_id})[0].condition:"",$scope.eventSiteSensors[evSiteSen].isRetrieved="Retrieved"==$scope.eventSiteSensors[evSiteSen].instrument_status[0].status?!0:!1,$scope.eventSiteSensors[evSiteSen].files=allSiteFiles.filter(function(sf){return sf.instrument_id==$scope.eventSiteSensors[evSiteSen].instrument_id&&("DataFile File"==sf.fileBelongsTo||"Sensor File"==sf.fileBelongsTo)}),(2==$scope.eventSiteSensors[evSiteSen].sensor_type_id||5==$scope.eventSiteSensors[evSiteSen].sensor_type_id||6==$scope.eventSiteSensors[evSiteSen].sensor_type_id)&&(0===$scope.eventSiteSensors[evSiteSen].files.length?$scope.eventSiteSensors[evSiteSen].NeedDF=!0:determineDFPresent($scope.eventSiteSensors[evSiteSen].files)||($scope.eventSiteSensors[evSiteSen].NeedDF=!0));$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.LoggedInMember=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.chosenHWMList=[],$scope.removedChosenHWMList=[],$scope.chosenDFList=[],$scope.removedChosenDFList=[],$scope.hwmDetail=!1,$scope.HWMBox={},$scope.sensorDetail=!1,$scope.SensorBox={},$scope.dataFileDetail=!1,$scope.DFBox={},$scope.aPeak={};var getDateTimeParts=function(d){var y=d.substr(0,4),m=d.substr(5,2)-1,da=d.substr(8,2),h=d.substr(11,2),mi=d.substr(14,2),sec=d.substr(17,2),theDate=new Date(y,m,da,h,mi,sec);return theDate},getTimeZoneStamp=function(dsent){var d,sendThis=[];d=void 0!==dsent?new Date(dsent):new Date;var offset=d.toString().substring(35),zone="";switch(offset.substr(0,3)){case"Cen":zone="CST";break;case"Eas":zone="EST";break;case"Mou":zone="MST";break;case"Pac":zone="PST"}return sendThis=[d,zone]};$scope.dateOptions={startingDay:1,showWeeks:!1},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0};var dealWithTimeStampb4Send=function(){if("UTC"!=$scope.aPeak.time_zone){var utcDateTime=new Date($scope.aPeak.peak_date).toUTCString();$scope.aPeak.peak_date=utcDateTime,$scope.aPeak.time_zone="UTC"}else{var i=$scope.aPeak.peak_date.toString().indexOf("GMT")+3;$scope.aPeak.peak_date=$scope.aPeak.peak_date.toString().substring(0,i)}};if($scope.cancel=function(){$rootScope.stateIsLoading.showLoading=!1,$uibModalInstance.dismiss("cancel")},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},"empty"!=thisPeak){$scope.aPeak=angular.copy(thisPeak),$scope.aPeak.peak_date={date:getDateTimeParts($scope.aPeak.peak_date),time:getDateTimeParts($scope.aPeak.peak_date)},$scope.PeakCreator=allMembers.filter(function(m){return m.member_id==$scope.aPeak.member_id})[0];for(var h=0;h<$scope.eventSiteHWMs.length;h++)$scope.eventSiteHWMs[h].peak_summary_id==$scope.aPeak.peak_summary_id&&($scope.eventSiteHWMs[h].selected=!0);for(var ess=0;ess<$scope.eventSiteSensors.length;ess++)for(var essI=ess,df=0;df<$scope.eventSiteSensors[essI].files.length;df++){var isThere=thisPeakDFs.filter(function(pdf){return pdf.data_file_id==$scope.eventSiteSensors[essI].files[df].data_file_id})[0];void 0!==isThere&&($scope.eventSiteSensors[essI].files[df].selected=!0)}}else{var timeParts=getTimeZoneStamp();$scope.aPeak={peak_date:{date:timeParts[0],time:timeParts[0]},time_zone:timeParts[1],member_id:$cookies.get("mID")},$scope.PeakCreator=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0]}$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})};var formatSelectedHWM=function(h){var fhwm={};return fhwm.approval_id=h.approval_id,fhwm.hwm_label=h.hwm_label,fhwm.bank=h.bank,fhwm.elev_ft=h.elev_ft,fhwm.event_id=h.event_id,fhwm.flag_date=h.flag_date,fhwm.flag_member_id=h.flag_member_id,fhwm.hcollect_method_id=h.hcollect_method_id,fhwm.hdatum_id=h.hdatum_id,fhwm.height_above_gnd=h.height_above_gnd,fhwm.hwm_environment=h.hwm_environment,fhwm.hwm_id=h.hwm_id,fhwm.hwm_locationdescription=h.hwm_locationdescription,fhwm.hwm_notes=h.hwm_notes,fhwm.hwm_uncertainty=h.hwm_uncertainty,fhwm.hwm_quality_id=h.hwm_quality_id,fhwm.hwm_type_id=h.hwm_type_id,fhwm.latitude_dd=h.latitude,fhwm.longitude_dd=h.longitude,fhwm.marker_id=h.marker_id,fhwm.peak_summary_id=h.peak_summary_id,fhwm.site_id=h.site_id,fhwm.stillwater="No"==h.stillwater?0:1,fhwm.survey_date=h.survey_date,fhwm.survey_member_id=h.survey_member_id,fhwm.vcollect_method_id=h.vcollect_method_id,fhwm.vdatum_id=h.vdatum_id,fhwm.waterbody=h.waterbody,fhwm};$scope.addHWM=function(h){var aHWM=formatSelectedHWM(h);if(h.selected===!0)$scope.chosenHWMList.push(aHWM);else if(void 0!==$scope.aPeak.peak_summary_id&&$scope.removedChosenHWMList.push(dataFile),$scope.chosenHWMList.length>0){var ind=$scope.chosenHWMList.map(function(hwm){return hwm.hwm_id}).indexOf(aHWM.hwm_id);$scope.chosenHWMList.splice(ind,1)}},$scope.showHWMDetails=function(h){$scope.hwmDetail=!0,$scope.sensorDetail=!1,$scope.dataFileDetail=!1,$scope.HWMBox=h},$scope.primaryHWM=function(h){var setPrimHWM=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Set as Primary</h3></div><div class="modal-body"><p>Are you sure you want to set this as the Primary HWM? Doing so will populate the Peak Date (not including time), Stage, Vertical Datum and Height Above Ground.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="SetIt()">Set as Primary</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.cancel=function(){$uibModalInstance.dismiss()},$scope.SetIt=function(){$uibModalInstance.close("Yes")}}],size:"sm"});setPrimHWM.result.then(function(setIt){if("Yes"==setIt){$scope.aPeak.peak_date.date=new Date(h.flag_date),$scope.aPeak.peak_stage=h.elev_ft,$scope.aPeak.vdatum_id=h.vdatum_id,$scope.aPeak.height_above_gnd=h.height_above_gnd;var hIndex=$scope.eventSiteHWMs.indexOf(h);$scope.eventSiteHWMs[hIndex].selected=!0}})},$scope.closeDetail=function(){$scope.sensorDetail=!1,$scope.hwmDetail=!1,$scope.dataFileDetail=!1},$scope.addDataFile=function(datafile){var dataFile={};DATA_FILE.query({id:datafile.data_file_id}).$promise.then(function(response){if(dataFile=response,datafile.selected===!0)$scope.chosenDFList.push(dataFile);else if(void 0!==$scope.aPeak.peak_summary_id&&$scope.removedChosenDFList.push(dataFile),$scope.chosenDFList.length>0){var ind=$scope.chosenDFList.map(function(df){return df.data_file_id}).indexOf(datafile.data_file_id);$scope.chosenDFList.splice(ind,1)}})},$scope.showSensorDetails=function(s){$scope.sensorDetail=!0,$scope.hwmDetail=!1,$scope.dataFileDetail=!1,$scope.SensorBox=s},$scope.showDataFileDetails=function(f){DATA_FILE.query({id:f.data_file_id},function(response){$scope.DFBox=response,$scope.DFBox.filePath=f.path,$scope.DFBox.fileID=f.file_id,$scope.DFBox.fileDesc=f.description,$scope.DFBox.processedBy=allMembers.filter(function(m){return m.member_id==response.processor_id})[0],$scope.DFBox.nwisFile=1==f.is_nwis?!0:!1,$scope.DFBox.fileURL=f.name,$scope.dataFileDetail=!0,$scope.hwmDetail=!1,$scope.sensorDetail=!1})},$scope.primaryDataFile=function(f){var setPrimeDF=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Set as Primary</h3></div><div class="modal-body"><p>Are you sure you want to set this as the Primary Data file?</p><p>(Coming soon: Script processing to populate the Peak date, time and time zone, Stage, Vertical Datum and Height above ground)</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="SetIt()">Set as Primary</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.cancel=function(){$uibModalInstance.dismiss()},$scope.SetIt=function(){$uibModalInstance.close("Yes")}}],size:"sm"});setPrimeDF.result.then(function(setIt){if("Yes"==setIt){var sens=$scope.eventSiteSensors.filter(function(s){return s.instrument_id==f.instrument_id})[0],sIndex=$scope.eventSiteSensors.indexOf(sens),fIndex=sens.files.indexOf(f);$scope.eventSiteSensors[sIndex].files[fIndex].selected=!0}})},$scope.savePeak=function(valid){if(valid){var updatedPeak={},datetime=new Date($scope.aPeak.peak_date.date.getFullYear(),$scope.aPeak.peak_date.date.getMonth(),$scope.aPeak.peak_date.date.getDate(),$scope.aPeak.peak_date.time.getHours(),$scope.aPeak.peak_date.time.getMinutes(),$scope.aPeak.peak_date.time.getSeconds());$scope.aPeak.peak_date=datetime,dealWithTimeStampb4Send(),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",PEAK.update({id:$scope.aPeak.peak_summary_id},$scope.aPeak).$promise.then(function(response){if($scope.removedChosenDFList.length>0)for(var remd=0;remd<$scope.removedChosenDFList.length;remd++)$scope.removedChosenDFList[remd].peak_summary_id=null,DATA_FILE.update({id:$scope.removedChosenDFList[remd].data_file_id},$scope.removedChosenDFList[remd]).$promise;if($scope.removedChosenHWMList.length>0)for(var remh=0;remh<$scope.removedChosenHWMList.length;remh++)$scope.removedChosenHWMList[remh].peak_summary_id=null,HWM.update({id:$scope.removedChosenHWMList[remh].data_file_id},$scope.removedChosenHWMList[remh]).$promise;for(var addh=0;addh<$scope.chosenHWMList.length;addh++)$scope.chosenHWMList[addh].peak_summary_id=response.peak_summary_id,HWM.update({id:$scope.chosenHWMList[addh].hwm_id},$scope.chosenHWMList[addh]).$promise;for(var addd=0;addd<$scope.chosenDFList.length;addd++)$scope.chosenDFList[addd].peak_summary_id=response.peak_summary_id,DATA_FILE.update({id:$scope.chosenDFList[addd].data_file_id},$scope.chosenDFList[addd]).$promise;toastr.success("Peak updated"),updatedPeak=response;var sendBack=[updatedPeak,"updated"];$uibModalInstance.close(sendBack)})}};var updateDFwoPeakID=function(df_id){DATA_FILE.query({id:df_id}).$promise.then(function(res){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",res.peak_summary_id=null,DATA_FILE.update({id:res.data_file_id},res).$promise})};$scope.deletePeak=function(){var deletePeakMdl=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Remove Peak</h3></div><div class="modal-body"><p>Are you sure you want to delete this Peak?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="Ok()">OK</button><button class="btn btn-warning" ng-click="cancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.Ok=function(){$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss()}}],size:"sm"});deletePeakMdl.result.then(function(){var datetime=($scope.aPeak.peak_summary_id,new Date($scope.aPeak.peak_date.date.getFullYear(),$scope.aPeak.peak_date.date.getMonth(),$scope.aPeak.peak_date.date.getDate(),$scope.aPeak.peak_date.time.getHours(),$scope.aPeak.peak_date.time.getMinutes(),$scope.aPeak.peak_date.time.getSeconds()));$scope.aPeak.peak_date=datetime,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",PEAK["delete"]({id:$scope.aPeak.peak_summary_id}).$promise.then(function(){for(var i=0;i<$scope.eventSiteSensors.length;i++)for(var thisS=$scope.eventSiteSensors[i],f=0;f<thisS.files.length;f++){var thisF=thisS.files[f];thisF.selected&&updateDFwoPeakID(thisF.data_file_id)}for(var h=0;h<$scope.eventSiteHWMs.length;h++){var thisH=$scope.eventSiteHWMs[h];if(thisH.selected){thisH.peak_summary_id=null;var updateThisHWM=formatSelectedHWM(thisH);HWM.update({id:thisH.hwm_id},updateThisHWM).$promise}}toastr.success("Peak Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.createPeak=function(valid){var isHwmChecked=!1,isDFChecked=!1;if(angular.forEach($scope.eventSiteHWMs,function(shwm){shwm.selected&&(isHwmChecked=!0)}),angular.forEach($scope.eventSiteSensors,function(ssen){for(var fI=0;fI<ssen.files.length;fI++)ssen.files[fI].selected&&(isDFChecked=!0,fI=ssen.files.length)}),isHwmChecked||isDFChecked){if(valid){var createdPeak={},datetime=new Date($scope.aPeak.peak_date.date.getFullYear(),$scope.aPeak.peak_date.date.getMonth(),$scope.aPeak.peak_date.date.getDate(),$scope.aPeak.peak_date.time.getHours(),$scope.aPeak.peak_date.time.getMinutes(),$scope.aPeak.peak_date.time.getSeconds());$scope.aPeak.peak_date=datetime,dealWithTimeStampb4Send(),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",PEAK.save($scope.aPeak).$promise.then(function(response){createdPeak=response;for(var h=0;h<$scope.chosenHWMList.length;h++)$scope.chosenHWMList[h].peak_summary_id=response.peak_summary_id,HWM.update({id:$scope.chosenHWMList[h].hwm_id},$scope.chosenHWMList[h]).$promise;for(var d=0;d<$scope.chosenDFList.length;d++)$scope.chosenDFList[d].peak_summary_id=response.peak_summary_id,DATA_FILE.update({id:$scope.chosenDFList[d].data_file_id},$scope.chosenDFList[d]).$promise;toastr.success("Peak created");var sendBack=[createdPeak,"created"];$uibModalInstance.close(sendBack)})}}else{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>You must choose at least one HWM or Data File to use for interpretation for this Peak Summary.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="Ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.Ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}},$scope.showIncompleteDFInfo=function(){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Incomplete Data File</h3></div><div class="modal-body"><p>All RDGs, Met Station, and Rain Gage sensors require data file information in order to use as primary in the Peak summary.</p><p>Please revisit the Retrieved Sensor and click on NWIS Data Connection to add a link to the NWIS data if you want to use as primary.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="Ok()">OK</button></div>',
controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.Ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})},$scope.showIncompleteHWMInfo=function(){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Incomplete HWM</h3></div><div class="modal-body"><p>Survey date and elevation are required in order to use as primary in the Peak summary.</p><p>Please revisit the HWM and add Survey date and elevation if you want to use as primary.</p><p>The HWM can be used for interpreation withouth a final elevation.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="Ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.Ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})},$scope.showRetrieveInfo=function(){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Deployed Sensor</h3></div><div class="modal-body"><p>This senosr needs to be retrieved before a Peak can be created.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="Ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.Ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})},$rootScope.stateIsLoading.showLoading=!1}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("peakCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","thisSite","Site_Files","thisSitePeaks","allVertDatums","allHWMQualities","allHWMTypes","PEAK","HWM","MEMBER","SITE","INST_COLL_CONDITION",function($scope,$rootScope,$cookies,$location,$state,$http,$uibModal,$filter,$timeout,thisSite,Site_Files,thisSitePeaks,allVertDatums,allHWMQualities,allHWMTypes,PEAK,HWM,MEMBER,SITE,INST_COLL_CONDITION){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($scope.peakCount={total:thisSitePeaks.length},$scope.SitePeaks=thisSitePeaks,$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1,void 0!==newValue?($scope.SitePeaks=thisSitePeaks.filter(function(p){return p.event_name==$scope.sessionEventName}),$scope.peakCount={total:$scope.SitePeaks.length}):($scope.SitePeaks=thisSitePeaks,$scope.peakCount={total:$scope.SitePeaks.length})}),$scope.showPeakModal=function(peakClicked){$rootScope.stateIsLoading.showLoading=!0;var indexClicked=$scope.SitePeaks.indexOf(peakClicked),modalInstance=$uibModal.open({templateUrl:"PEAKmodal.html",controller:"peakModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{allCollectConditions:function(){return INST_COLL_CONDITION.getAll().$promise},allVertDatums:function(){return allVertDatums},thisPeak:function(){return 0!==peakClicked?PEAK.query({id:peakClicked.peak_summary_id}).$promise:"empty"},thisPeakDFs:function(){return 0!==peakClicked?PEAK.getPeakSummaryDFs({id:peakClicked.peak_summary_id}).$promise:void 0},peakSite:function(){return thisSite},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise},allEventHWMs:function(){return HWM.getFilteredHWMs({Event:$cookies.get("SessionEventID"),EventStatus:0}).$promise},allSiteFiles:function(){return Site_Files.getAllSiteFiles()},allSiteSensors:function(){return SITE.getSiteSensors({id:thisSite.site_id}).$promise}}});modalInstance.result.then(function(createdPeak){"created"==createdPeak[1]&&($scope.SitePeaks.push(createdPeak[0]),$scope.peakCount.total=$scope.SitePeaks.length),"updated"==createdPeak[1]&&($scope.SitePeaks[indexClicked]=createdPeak[0]),"deleted"==createdPeak[1]&&($scope.SitePeaks.splice(indexClicked,1),$scope.peakCount.total=$scope.SitePeaks.length),$rootScope.stateIsLoading.showLoading=!1})})}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("memberModalCtrl",["$scope","$rootScope","$cookies","$http","$uibModal","$uibModalInstance","$filter","$sce","roleList","agencyList","thisMember","MEMBER",function($scope,$rootScope,$cookies,$http,$uibModal,$uibModalInstance,$filter,$sce,roleList,agencyList,thisMember,MEMBER){switch($scope.aMember={},$scope.matchingUsers=!0,$scope.usernameTooltip=$sce.trustAsHtml("Active Directory user ID. ie: 'mpeppler' not 'mpeppler@usgs.gov'."),$scope.agencyList=agencyList,$scope.pass={newP:"",confirmP:""},$scope.newPass="",$scope.loggedInUser={},$scope.loggedInUser.Name=$cookies.get("usersName"),$scope.loggedInUser.ID=$cookies.get("mID"),$scope.loggedInUser.Role=$cookies.get("usersRole"),$scope.loggedInUser.Role){case"Admin":$scope.roleList=roleList.filter(function(r){return r.role_id<=3});break;case"Manager":$scope.roleList=roleList.filter(function(r){return 3==r.role_id})}"empty"!=thisMember?($scope.matchingUsers=thisMember.member_id==$scope.loggedInUser.ID?!0:!1,$scope.aMember=angular.copy(thisMember),$scope.aMember.Role=roleList.filter(function(r){return r.role_id==$scope.aMember.role_id})[0].role_name,$scope.changePass=!1,$scope.changeMyPassBtn=function(evt){$scope.changePass=$scope.changePass===!1?!0:!1},$scope.DontChangePass=function(){$scope.changePass=!1}):($scope.aMember={},1==$scope.roleList.length&&($scope.aMember.role_id=$scope.roleList[0].role_id)),$scope.create=function(valid){if(valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.aMember.password=btoa($scope.pass.confirmP);var createdMember={};MEMBER.save($scope.aMember,function(response){toastr.success("Member Created"),createdMember=response;var ag=$scope.agencyList.filter(function(a){return a.agency_id==response.agency_id})[0],ro=roleList.filter(function(r){return r.role_id==response.role_id})[0];createdMember.Agency=ag.agency_name,createdMember.Role=ro.role_name},function(errorResponse){toastr.error("Error creating new member: "+errorResponse.statusText)}).$promise.then(function(){var sendBack=[createdMember,"created"];$uibModalInstance.close(sendBack)})}},$scope.save=function(valid){if(valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",""!==$scope.pass.newP&&($scope.aMember.password=btoa($scope.pass.newP));var updatedMember={},formattedMember=angular.copy($scope.aMember);delete formattedMember.Role,delete formattedMember.Agency,MEMBER.update({id:formattedMember.member_id},formattedMember,function(response){updatedMember=response;var ag=$scope.agencyList.filter(function(a){return a.agency_id==response.agency_id})[0],ro=roleList.filter(function(r){return r.role_id==response.role_id})[0];if(updatedMember.Agency=ag.agency_name,updatedMember.Role=ro.role_name,$scope.loggedInUser.ID==response.member_id){if(void 0!==$scope.aMember.password){var enc=btoa(updatedMember.username.concat(":",$scope.pass.newP)),expireDate=(new Date).addHours(8);$cookies.put("STNCreds",enc,{expires:expireDate})}$cookies.put("STNUsername",updatedMember.username);var usersNAME=updatedMember.fname+" "+updatedMember.lname;$cookies.put("usersName",usersNAME)}toastr.success("Member Updated")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){var sendBack=[updatedMember,"updated"];$uibModalInstance.close(sendBack)})}else{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all required fields.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}},$scope.DeleteMember=function(mem){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return mem},what:function(){return"Member"}}});modalInstance.result.then(function(memToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),MEMBER.deleteMember({id:memToRemove.member_id},function(response){toastr.success("Member Deleted")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$uibModalInstance.close(["de","deleted"])})})},$scope.cancel=function(){$uibModalInstance.close()},$rootScope.stateIsLoading={showLoading:!1}}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("memberInfoCtrl",["$scope","$cookies","$location","$http","$uibModal","$stateParams","$filter","$sce","allRoles","MEMBER","thisMember",function($scope,$cookies,$location,$http,$uibModal,$stateParams,$filter,$sce,allRoles,MEMBER,thisMember){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($scope.aMember={},$scope.matchingUsers=!0,$scope.usernameTooltip=$sce.trustAsHtml("Active Directory user ID. ie: 'mpeppler' not 'mpeppler@usgs.gov'."),$scope.DeleteMember=function(mem){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return mem},what:function(){return"Member"}}});modalInstance.result.then(function(nameToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),MEMBER.deleteMember({id:nameToRemove.member_id},function(response){var delMem={};delMem.member_id=nameToRemove.member_id,delMem.Name=nameToRemove.fname+" "+nameToRemove.lname;var ag=$scope.agencyList.filter(function(a){return a.agency_id==nameToRemove.agency_id})[0],ro=allRoles.filter(function(r){return r.role_id==nameToRemove.role_id})[0];delMem.Agency=ag.agency_name,delMem.Role=ro.role_name,$scope.memberList.splice($scope.memberList.indexOf(delMem),1),toastr.success("Member Deleted")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$location.path("/Members/MembersList").replace()})})},$scope.pass={newP:"",confirmP:""},$scope.newPass="",void 0!==thisMember?($scope.matchingUsers=$stateParams.id==$scope.loggedInUser.ID?!0:!1,$scope.aMember=thisMember,$scope.aMember.Role=allRoles.filter(function(r){return r.role_id==$scope.aMember.role_id})[0].role_name,$scope.changePass=!1,$scope.SaveOnBlur=function(v){if(v)$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.update({id:$scope.aMember.member_id},$scope.aMember,function(response){toastr.success("Member Updated")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)});else{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all required fields.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}},$scope.changeMyPassBtn=function(evt){$scope.changePass=$scope.changePass===!1?!0:!1},$scope.ChangePassword=function(){if(""===$scope.pass.newP||""===$scope.pass.confirmP){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>You must first enter a new password.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}else MEMBER.changePW({username:$scope.aMember.username,newPass:$scope.pass.newP},function(response){if(toastr.success("Password Updated"),$scope.aMember.member_id==$scope.loggedInUser.member_id){var enc=btoa($scope.aMember.username.concat(":",$scope.pass.newP));$cookies.put("STNCreds",enc),$cookies.put("STNUsername",$scope.aMember.username),$cookies.put("usersName",$scope.loggedInUser.Name),$cookies.put("mID",$scope.aMember.member_id);var roleName;switch($scope.aMember.role_id){case 1:roleName="Admin";break;case 2:roleName="Manager";break;case 3:roleName="Field";break;case 4:roleName="Public";break;default:roleName="CitizenManager"}$cookies.put("usersRole",roleName)}$scope.changePass=!1,$scope.pass.newP="",$scope.pass.confirmP=""},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},$scope.DontChangePass=function(){$scope.changePass=!1}):$scope.save=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.addMember({pass:$scope.pass.confirmP},$scope.aMember,function(response){toastr.success("Member Created");var nm={};nm.member_id=response.member_id,nm.Name=response.fname+" "+response.lname;var ag=$scope.agencyList.filter(function(a){return a.agency_id==response.agency_id})[0],ro=allRoles.filter(function(r){return r.role_id==response.role_id})[0];nm.Agency=ag.agency_name,nm.Role=ro.role_name,$scope.memberList.push(nm)}).$promise.then(function(){$location.path("/Members/MembersList").replace()}))})}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("memberCtrl",["$scope","$rootScope","$cookies","$location","$http","$filter","$uibModal","MEMBER","allRoles","allAgencies","userProfileId",function($scope,$rootScope,$cookies,$location,$http,$filter,$uibModal,MEMBER,allRoles,allAgencies,userProfileId){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Settings/Members",$scope.sort_by=function(newSortingOrder){$scope.sortingOrder==newSortingOrder&&($scope.reverse=!$scope.reverse),$scope.sortingOrder=newSortingOrder,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+newSortingOrder+" i").removeClass().addClass($scope.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")},$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getEventPeople({Eventid:"135"}).$promise.then(function(response){console.table(response)}),$scope.showMemberModal=function(memberClicked){var indexClicked=$scope.memberList.indexOf(memberClicked);$rootScope.stateIsLoading={showLoading:!0};var modalInstance=$uibModal.open({templateUrl:"memberModal.html",controller:"memberModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{thisMember:function(){return 0!==memberClicked?memberClicked:"empty"},agencyList:function(){return allAgencies},roleList:function(){return allRoles}}});modalInstance.result.then(function(createdMember){$rootScope.stateIsLoading={showLoading:!1},void 0!==createdMember&&("created"==createdMember[1]&&$scope.memberList.push(createdMember[0]),"updated"===createdMember[1]&&($scope.memberList[indexClicked]=createdMember[0]),"deleted"==createdMember[1]&&$scope.memberList.splice(indexClicked,1))})},$scope.agencyList=allAgencies,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise.then(function(response){$scope.memberList=[];for(var x=0;x<response.length;x++){var eachM=response[x],ag=$scope.agencyList.filter(function(a){return a.agency_id==response[x].agency_id})[0],ro=allRoles.filter(function(r){return r.role_id==response[x].role_id})[0];eachM.Agency=ag.agency_name,eachM.Role=ro.role_name,$scope.memberList.push(eachM)}void 0!==userProfileId&&null!==userProfileId&&MEMBER.query({id:userProfileId}).$promise.then(function(resp){$scope.showMemberModal(resp)})}))}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("MapSiteInfoController",["$scope","$http","$rootScope","$cookies","$location","SITE","leafletMarkerEvents","leafletBoundsHelpers","$state","spinnerService",function($scope,$http,$rootScope,$cookies,$location,SITE,leafletMarkerEvents,leafletBoundsHelpers,$state,spinnerService){$scope.status={siteOpen:!0},$rootScope.$on("mapSiteClickResults",function(event,siteParts){$scope.aSite=siteParts[0],$scope.aSite.latitude_dd=parseFloat($scope.aSite.latitude_dd.toFixed(6)),$scope.aSite.longitude_dd=parseFloat($scope.aSite.longitude_dd.toFixed(6)),spinnerService.hide("siteInfoSpinner")}),$scope.goToSiteDashboard=function(){$state.go("site.dashboard",{id:$scope.aSite.site_id})}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("MapSensorProposeController",["$scope","$http","$timeout","$rootScope","$cookies","$location","SITE","INSTRUMENT","INSTRUMENT_STATUS","allDeployTypes","allSensDeps","leafletMarkerEvents","leafletBoundsHelpers","$state",function($scope,$http,$timeout,$rootScope,$cookies,$location,SITE,INSTRUMENT,INSTRUMENT_STATUS,allDeployTypes,allSensDeps,leafletMarkerEvents,leafletBoundsHelpers,$state){$rootScope.$on("mapSiteClickResults",function(event,siteParts){$scope.thisSite=siteParts[0],$scope.status.sensorOpen=!1,$scope.ProposedSensors4Site=[],$scope.showProposed=!1}),$scope.deployTypeList=angular.copy(allDeployTypes);for(var tempDepTypeID=0,d=0;d<$scope.deployTypeList.length;d++)"Temperature"===$scope.deployTypeList[d].method&&(tempDepTypeID=$scope.deployTypeList[d].deployment_type_id,$scope.deployTypeList[d].method="Temperature (Met sensor)");$scope.deployTypeList.push({deployment_type_id:tempDepTypeID,method:"Temperature (Pressure Transducer)"}),$scope.getProposedSensors=function(){SITE.getSiteSensors({id:$scope.thisSite.site_id}).$promise.then(function(sResponse){for(var s=0;s<sResponse.length;s++){var correctOrderSS=[],sensorStatuses=sResponse[s].instrument_status;if(sensorStatuses.length>1){var proposedStat=sensorStatuses.filter(function(ps){return"Proposed"==ps.status})[0],deployedStat=sensorStatuses.filter(function(ps){return"Deployed"==ps.status})[0],retLostStat=sensorStatuses.filter(function(ps){return"Retrieved"==ps.status||"Lost"==ps.status})[0];retLostStat&&correctOrderSS.push(retLostStat),deployedStat&&correctOrderSS.push(deployedStat),proposedStat&&correctOrderSS.push(proposedStat)}else correctOrderSS.push(sensorStatuses[0]);sResponse[s].instrument_status=[],sResponse[s].instrument_status=correctOrderSS}$scope.ProposedSensors4Site=sResponse.filter(function(ss){return 4==ss.instrument_status[0].status_type_id})})},$scope.sensDepTypes=allSensDeps,$scope.showProposed=!1,$scope.status={sensorOpen:!1},$scope.showHideProposed=function(){$scope.showProposed=!$scope.showProposed},$scope.cancelProposing=function(){$scope.showProposed=!1},$scope.AddProposed=function(){for(var Time_STAMP=new Date,dt=0;dt<$scope.deployTypeList.length;dt++)if($scope.deployTypeList[dt].selected===!0){var proposedToAdd={},propStatToAdd={};if("Temp"==$scope.deployTypeList[dt].method.substring(0,4))proposedToAdd={deployment_type_id:$scope.deployTypeList[dt].deployment_type_id,site_id:$scope.thisSite.site_id,sensor_type_id:"Temperature (Pressure Transducer)"==$scope.deployTypeList[dt].method?1:2};else{var sID=0;angular.forEach($scope.sensDepTypes,function(sdt){for(var x=0;x<sdt.deploymenttypes.length;x++)sdt.deploymenttypes[x].deployment_type_id==$scope.deployTypeList[dt].deployment_type_id&&(sID=sdt.sensor_type_id)}),proposedToAdd={deployment_type_id:$scope.deployTypeList[dt].deployment_type_id,site_id:$scope.thisSite.site_id,sensor_type_id:sID}}$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INSTRUMENT.save(proposedToAdd).$promise.then(function(response){var createdPropSensor={deployment_type_id:response.deployment_type_id,site_id:response.site_id,sensor_type_id:response.sensor_type_id,instrument_id:response.instrument_id,deploymentType:$scope.deployTypeList.filter(function(dtl){return dtl.deployment_type_id==response.deployment_type_id})[0].method,sensorType:$scope.sensDepTypes.filter(function(s){return s.sensor_type_id==response.sensor_type_id})[0].sensor};propStatToAdd={instrument_id:response.instrument_id,status_type_id:4,member_id:$cookies.get("mID"),time_stamp:Time_STAMP,time_zone:"UTC"},INSTRUMENT_STATUS.save(propStatToAdd).$promise.then(function(statResponse){propStatToAdd.status="Proposed",propStatToAdd.instrument_status_id=statResponse.instrument_status_id,createdPropSensor.instrument_status=[propStatToAdd],$scope.ProposedSensors4Site.push(createdPropSensor);for(var dep=0;dep<$scope.deployTypeList.length;dep++)$scope.deployTypeList[dep].selected=!1;$timeout(function(){$scope.showProposed=!1,toastr.success("Proposed sensor created")})},function(errorResponse){toastr.error("Error creating proposed instrument: "+errorResponse.statusText)})},function(errorResponse){toastr.error("Error creating proposed instrument: "+errorResponse.statusText)})}}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("MapPeaksController",["$scope","$rootScope","$http","$cookies","$location","leafletMarkerEvents","leafletBoundsHelpers","$state",function($scope,$rootScope,$http,$cookies,$location,leafletMarkerEvents,leafletBoundsHelpers,$state){$rootScope.$on("mapSiteClickResults",function(event,siteParts){$scope.sitePeaks=[];for(var allSitePeaks=siteParts[1],p=0;p<allSitePeaks.length;p++)allSitePeaks[p].event_name==$cookies.get("SessionEventName")&&$scope.sitePeaks.push(allSitePeaks[p]);$scope.showPeaks=!0}),$scope.showPeaks=!1}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("MapFiltersController",["$scope","$http","$rootScope","$cookies","$location","SITE","EVENT","Map_Filter","$state","stateList","sensorTypes","networkNames","spinnerService",function($scope,$http,$rootScope,$cookies,$location,SITE,EVENT,Map_Filter,$state,stateList,sensorTypes,networkNames,spinnerService){$scope.status={siteOpen:!0},$scope.states=stateList,$scope.senTypes=sensorTypes,$scope.netNames=networkNames,$scope.surveyOptions=[{id:!0,value:"Surveyed HWMs"},{id:!1,value:"Unsurveyed HWMs"}],$scope.Chosen={network:null,sensor:null,survey:null},$scope.chosenStates=[],$scope.siteResponse=!1,$scope.checkboxModel={eventSitesOnly:"1",hwmOnly:"0",senOnly:"0",rdgOnly:"0",opDefined:"0"},$scope.searchSites=function(){if(spinnerService.show("mapSpinner"),"1"===$scope.checkboxModel.eventSitesOnly&&$scope.sessionEventExists===!0){var stateString=$scope.chosenStates.join();$scope.siteResponse=!1,$scope.siteList=[];var evID=null!==$cookies.get("SessionEventID")&&void 0!==$cookies.get("SessionEventID")?$cookies.get("SessionEventID"):0;$rootScope.searchParams={event:evID,state:$scope.chosenStates,SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined},SITE.getFilteredSites({Event:evID,State:stateString,SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined},function(response){spinnerService.hide("mapSpinner"),Map_Filter.setFilteredSites(response)},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,alert("Error: "+errorResponse.statusText)})}else if("0"===$scope.checkboxModel.eventSitesOnly||$scope.sessionEventExists===!1){var stateString=$scope.chosenStates.join();$scope.siteResponse=!1,$scope.siteList=[],$rootScope.searchParams={state:$scope.chosenStates,SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined};var sp=$rootScope.searchParams;if("0"===sp.HWMOnly&&null===sp.HWMSurveyed&&null===sp.NetworkName&&"0"===sp.OPDefined&&"0"===sp.RDGOnly&&"0"===sp.SensorOnly&&null===sp.SensorType&&0===sp.state.length)return spinnerService.hide("mapSpinner"),toastr.options.positionClass="toast-bottom-right",void toastr.warning("Please select at least one search parameter.","Map Filters");SITE.getFilteredSites({State:stateString,SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined},function(response){spinnerService.hide("mapSpinner"),Map_Filter.setFilteredSites(response)},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,alert("Error: "+errorResponse.statusText)})}},$scope.stateClick=function(data){if(data.selected===!0&&$scope.chosenStates.push(data.state_abbrev),data.selected===!1){var ind=$scope.chosenStates.indexOf(data.state_abbrev);ind>=0&&$scope.chosenStates.splice(ind,1)}},$scope.clearFilters=function(){spinnerService.show("mapSpinner"),$scope.checkboxModel={eventSitesOnly:1,hwmOnly:0,senOnly:0,rdgOnly:0,opDefined:0},$scope.Chosen={},$scope.chosenStates=[],angular.forEach($scope.states,function(st){st.selected=!1});var evID=null!==$cookies.get("SessionEventID")&&void 0!==$cookies.get("SessionEventID")?$cookies.get("SessionEventID"):0;$scope.sitesPromise=EVENT.getEventSites({id:evID},function(response){Map_Filter.setFilteredSites(response),spinnerService.hide("mapSpinner")},function(errorResponse){})}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("MapController",["$scope","$http","$rootScope","$cookies","$location","SITE","EVENT","Map_Site","leafletMarkerEvents","leafletBoundsHelpers","leafletData","$state","spinnerService",function($scope,$http,$rootScope,$cookies,$location,SITE,EVENT,Map_Site,leafletMarkerEvents,leafletBoundsHelpers,leafletData,$state,spinnerService){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$rootScope.thisPage="Map",$rootScope.activeMenu="map",$scope.message="Many of the supplemental GIS data layers found in the map are from a range of sources and are not maintained by WiM. We offer these map layers as a decision support supplement to the STN sites layer, but we cannot guarantee their performance and availability. Many of these externally maintained layers are large datasets and may load slowly depending on network latency. In some cases they may fail to load entirely when network latency is high.",$rootScope.$on("filterSitesClick",function(event,filteredSitesArray){filteredSitesArray.length>0?($scope.paths={},$scope.selectedMarkerNum=0,showEventSites(filteredSitesArray)):(toastr.options.positionClass="toast-bottom-right",toastr.warning("Your filter returned no results.","Map Filters"))});var icons={stn:{type:"div",iconSize:[10,10],className:"stnSiteIcon"},stnGray:{type:"div",iconSize:[10,10],className:"stnSiteGray"},newSite:{type:"div",iconSize:[10,10],className:"newSiteIcon",iconAnchor:[5,5]},selected:{type:"div",iconSize:[12,12],className:"selectedIcon"},nwis:L.divIcon({iconSize:[10,10],className:"arrow-up"}),action:L.icon({iconUrl:"images/action.png",popupAnchor:[10,10]}),low_threshold:L.icon({iconUrl:"images/low_threshold.png",popupAnchor:[10,10]}),major:L.icon({iconUrl:"images/major.png",popupAnchor:[10,10]}),minor:L.icon({iconUrl:"images/minor.png",popupAnchor:[10,10]}),moderate:L.icon({iconUrl:"images/moderate.png",popupAnchor:[10,10]}),no_flooding:L.icon({iconUrl:"images/no_flooding.png",popupAnchor:[10,10]}),not_defined:L.icon({iconUrl:"images/not_defined.png",popupAnchor:[10,10]}),obs_not_current:L.icon({iconUrl:"images/obs_not_current.png",popupAnchor:[10,10]}),out_of_service:L.icon({iconUrl:"images/out_of_service.png",popupAnchor:[10,10]})},showEventSites=function(response){var sitesArray=response;$scope.sites=sitesArray,$scope.markers=[],$scope.markersLatLngArray=[],leafletData.getDirectiveControls().then(function(controls){controls.markers.create({},$scope.markers);for(var markers=[],i=0;i<sitesArray.length;i++){var a=sitesArray[i];markers.push({layer:"stnSites",lat:a.latitude_dd,lng:a.longitude_dd,site_id:a.site_id,title:"STN Site",icon:icons.stn}),$scope.markersLatLngArray.push([a.latitude_dd,a.longitude_dd])}controls.markers.create(markers,$scope.markers),$scope.markers=markers})};$scope.pathsObj={circleMarker:{type:"circleMarker",radius:20,weight:3,color:"#000099",latlngs:{}}},$scope.selectedMarkerNum=0,$scope.$on("leafletDirectiveMarker.click",function(event,args){if("newSite"!=args.model.site_id){spinnerService.show("siteInfoSpinner"),$scope.markers[$scope.selectedMarkerNum].icon=icons.stn,delete $scope.markers[$scope.selectedMarkerNum].label;var siteID=args.model.site_id;Map_Site.setMapSiteParts(siteID),$scope.selectedMarkerNum=parseInt(args.modelName),$scope.markers[$scope.selectedMarkerNum].icon=icons.selected,$scope.markers[$scope.selectedMarkerNum].label={message:"Site "+siteID,options:{noHide:!0,offset:[25,-15],className:"siteLabel"}},$scope.mapCenter.zoom<=9?$scope.mapCenter={lat:args.model.lat,lng:args.model.lng,zoom:10}:$scope.mapCenter.zoom>=10&&($scope.mapCenter={lat:args.model.lat,lng:args.model.lng,zoom:$scope.mapCenter.zoom});var addShape=function(){$scope.paths={},$scope.pathsObj.circleMarker.latlngs={lat:args.model.lat,lng:args.model.lng},$scope.paths.circleMarker=$scope.pathsObj.circleMarker};addShape()}}),$scope.$watch(function(){return $cookies.get("SessionEventID")},function(newValue){if(void 0===newValue)return toastr.options.positionClass="toast-bottom-right",toastr.options.timeOut="8000",toastr.options.closeButton=!0,void toastr.warning("No sites are showing because you have no filters applied. Please select at least one search parameter.","Map Filters");$scope.sessionEvent=null!==$cookies.get("SessionEventName")&&void 0!==$cookies.get("SessionEventName")?$cookies.get("SessionEventName"):"All Events";var evID=newValue;spinnerService.show("mapSpinner"),$scope.selectedMarkerNum=0,$scope.paths={},$scope.sitesPromise=EVENT.getEventSites({id:evID},function(response){spinnerService.hide("mapSpinner"),showEventSites(response)},function(errorResponse){$scope.error="Could not fetch sites"})}),$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1});$scope.$on("leafletDirectiveMap.click",function(event,args){if($scope.createSiteModeActive===!0){removeUserCreatedSite();var leafEvent=args.leafletEvent;$scope.userCreatedSite={latitude:leafEvent.latlng.lat,longitude:leafEvent.latlng.lng},$scope.markers.push({layer:"newSite",lat:$scope.userCreatedSite.latitude,lng:$scope.userCreatedSite.longitude,site_id:"newSite",icon:icons.newSite,message:"New draggable STN site",draggable:!0,focus:!1,label:{message:"New Site",options:{noHide:!0,className:"newSiteLabel"}}})}});var removeUserCreatedSite=function(){var createdSiteIndex=$scope.markers.map(function(obj){return obj.site_id}).indexOf("newSite");createdSiteIndex>-1&&($scope.markers.splice(createdSiteIndex,1),$scope.userCreatedSite={})};$scope.$on("leafletDirectiveMarker.dragend",function(event,args){var dragendLocation=args.model;$scope.userCreatedSite={latitude:dragendLocation.lat,longitude:dragendLocation.lng}}),$scope.$watch("createSiteModeActive",function(){$scope.createSiteButtonText=$scope.createSiteModeActive?"Cancel Create Site Mode":"Create New Site on Map",
$scope.mapStyle=$scope.createSiteModeActive?{cursor:"crosshair"}:{cursor:"grab"},$scope.createSiteModeActive||removeUserCreatedSite()}),$scope.createSiteFromMap=function(){void 0!==$scope.userCreatedSite.latitude&&void 0!==$scope.userCreatedSite.longitude?$state.go("site.dashboard",{id:0,latitude:$scope.userCreatedSite.latitude,longitude:$scope.userCreatedSite.longitude}):alert("Please click a location on the map to create a site this way.")},leafletData.getMap().then(function(map){var geoSearchControl=new L.Control.GeoSearch({provider:new L.GeoSearch.Provider.Esri,position:"topleft",zoomLevel:15});geoSearchControl.addTo(map)}),delete $http.defaults.headers.common.Authorization,angular.extend($scope,{events:{markers:{enable:leafletMarkerEvents.getAvailableEvents()}},mapCenter:{lat:41.278,lng:-92.336,zoom:4,minZoom:4},controls:{},markersWatchOptions:{doWatch:!0,isDeep:!0,individual:{doWatch:!0,isDeep:!1}},paths:{},markers:[],markersLatLngArray:[],createSiteModeActive:!1,userCreatedSite:{},layers:{baselayers:{gray:{name:"Gray",type:"agsBase",layer:"Gray",visible:!1},streets:{name:"Streets",type:"agsBase",layer:"Streets",visible:!1},topo:{name:"World Topographic",type:"agsBase",layer:"Topographic",visible:!1},national:{name:"National Geographic",type:"agsBase",layer:"NationalGeographic",visible:!1},oceans:{name:"Oceans",type:"agsBase",layer:"Oceans",visible:!1},darkgray:{name:"DarkGray",type:"agsBase",layer:"DarkGray",visible:!1},imagery:{name:"Imagery",type:"agsBase",layer:"Imagery",visible:!1},shadedrelief:{name:"Shaded Relief",type:"agsBase",layer:"ShadedRelief",visible:!1},terrain:{name:"Terrain",type:"agsBase",layer:"Terrain",visible:!1}},overlays:{stnSites:{type:"group",name:"STN Sites",visible:!0},stnSitesAll:{type:"group",name:"STN Sites All",visible:!0},newSite:{type:"group",name:"newSite",visible:!0,layerParams:{showOnSelector:!1}},nwis:{name:"USGS real-time streamgages",type:"agsFeature",url:"https://stnmapservices.wim.usgs.gov:6443/arcgis/rest/services/STN/STN_nwis_rt/MapServer/0",visible:!1,layerOptions:{pointToLayer:function(geojson,latlng){return L.marker(latlng,{icon:icons.nwis})},onEachFeature:function(feature,layer){layer.bindPopup(feature.properties.PopupInfo+'<br><img style="width: 350px" src="http://waterdata.usgs.gov/nwisweb/graph?agency_cd=USGS&site_no='+feature.properties.Name+'&parm_cd=00065&period=7">')}}},ahps:{name:"AHPS Gages",type:"agsFeature",url:"https://idpgis.ncep.noaa.gov/arcgis/rest/services/NWS_Observations/ahps_riv_gauges/MapServer/0",visible:!1,layerOptions:{opacity:1,pointToLayer:function(geojson,latlng){return L.marker(latlng,{icon:icons[geojson.properties.status]})},onEachFeature:function(feature,layer){var graphURL="https://water.weather.gov/resources/hydrographs/"+feature.properties.gaugelid.toLowerCase()+"_hg.png";layer.bindPopup("<b>Gage ID: </b>"+feature.properties.gaugelid+"</br><a target='_blank' href='"+feature.properties.url+"'><img title='Click for details page' width=300 src='"+graphURL+"'/></a>")}}},radar:{name:"Weather Radar",type:"agsDynamic",url:"https://idpgis.ncep.noaa.gov/arcgis/rest/services/NWS_Observations/radar_base_reflectivity/MapServer",visible:!1,layerOptions:{layers:[0],opacity:1}},watchWarn:{name:"NWS Watches & Warnings",type:"agsDynamic",url:"https://idpgis.ncep.noaa.gov/arcgis/rest/services/NWS_Forecasts_Guidance_Warnings/watch_warn_adv/MapServer",visible:!1,layerOptions:{layers:[1],opacity:1}},lmwa:{name:"Limit Moderate Wave Action",type:"agsDynamic",url:"https://hazards.fema.gov/gis/nfhl/rest/services/public/NFHL/MapServer",visible:!1,layerOptions:{layers:[19],opacity:1}},floodBounds:{name:"Flood Hazard Boundaries",type:"agsDynamic",url:"https://hazards.fema.gov/gis/nfhl/rest/services/public/NFHL/MapServer",visible:!1,layerOptions:{layers:[27],opacity:1}},floodZones:{name:"Flood Hazard Zones",type:"agsDynamic",url:"https://hazards.fema.gov/gis/nfhl/rest/services/public/NFHL/MapServer",visible:!1,layerOptions:{layers:[28],opacity:.7}}}}})}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("mainCtrl",["$scope","$rootScope","$document","$cookies","$uibModal","$location","$state",function($scope,$rootScope,$document,$cookies,$uibModal,$location,$state){if($rootScope.isAuth={},$rootScope.activeMenu="home",void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")||void 0===$cookies.get("STNUsername"))$rootScope.isAuth.val=!1,$location.path("/login");else{if(void 0!==$document[0].documentMode){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Warning</h3></div><div class="modal-body"><p>This application uses functionality that is not completely supported by Internet Explorer. The preferred browser is Chrome (bison connect).</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}$rootScope.isAuth.val=!0,$rootScope.usersName=$cookies.get("usersName"),$rootScope.userID=$cookies.get("mID"),$rootScope.userRole=$cookies.get("usersRole");var EventName=$cookies.get("SessionEventName");null!==EventName&&void 0!==EventName&&($rootScope.sessionEvent="Session Event: "+EventName+"."),$state.go("map")}}])}(),function(){"use strict";var LogInOutController=angular.module("LogInOutController",[]);LogInOutController.controller("loginCtrl",["$scope","$state","$location","$uibModal","$http","$cookies","$rootScope","$document","SERVER_URL","ENVIRONMENT","Login",function($scope,$state,$location,$uibModal,$http,$cookies,$rootScope,$document,SERVER_URL,ENVIRONMENT,Login){if($("[type=password]").keypress(function(e){var $password=$(this),tooltipVisible=$(".tooltip").is(":visible"),s=String.fromCharCode(e.which);s.toUpperCase()!==s||s.toLowerCase()===s||e.shiftKey?tooltipVisible&&$password.tooltip("hide"):tooltipVisible||$password.tooltip("show"),$password.blur(function(e){$password.tooltip("hide")})}),void 0!==$document[0].documentMode){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Warning</h3></div><div class="modal-body"><p>This application uses functionality that is not completely supported by Internet Explorer. The preferred browser is Chrome (bison connect).</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}Date.prototype.addHours=function(h){return this.setHours(this.getHours()+h),this},$scope.serverURL=SERVER_URL,$rootScope.environment=ENVIRONMENT,$scope.submit=function(){$rootScope.stateIsLoading.showLoading=!0;var up=({username:$scope.username,password:$scope.password},$scope.username+":"+$scope.password);$http.defaults.headers.common.Authorization="Basic "+btoa(up),$http.defaults.headers.common.Accept="application/json",Login.login({},function(response){var user=response;if(void 0!==user){var usersNAME=user.fname+" "+user.lname,enc=btoa($scope.username.concat(":",$scope.password)),expireDate=(new Date).addHours(8);$cookies.put("STNCreds",enc,{expires:expireDate}),$cookies.put("STNUsername",$scope.username),$cookies.put("usersName",usersNAME),$cookies.put("mID",user.member_id);var roleName;switch(user.role_id){case 1:roleName="Admin";break;case 2:roleName="Manager";break;case 3:roleName="Field";break;case 4:roleName="Public";break;default:roleName="CitizenManager"}$cookies.put("usersRole",roleName),$rootScope.isAuth.val=!0,$rootScope.usersName=usersNAME,$rootScope.userID=user.member_id,$rootScope.userRole=$cookies.get("usersRole"),void 0!==$rootScope.returnToState?$state.go($rootScope.returnToState,{id:$rootScope.returnToStateParams}):$state.go("map")}else $rootScope.stateIsLoading.showLoading=!1,$scope.error="Login Failed"},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1;var modalInstance=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>There was an error.</p><p>Error: {{status}} - {{statusText}}</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.status=errorResponse.status,$scope.statusText=errorResponse.statusText}],size:"sm"});modalInstance.result.then(function(fieldFocus){$location.path("/login")})})}}]),LogInOutController.controller("logoutCtrl",["$scope","$rootScope","$cookies","$location",function($scope,$rootScope,$cookies,$location){$scope.logout=function(){$cookies.remove("STNCreds"),$cookies.remove("STNUsername"),$cookies.remove("usersName"),$cookies.remove("usersRole"),$cookies.remove("mID"),$cookies.remove("SessionEventID"),$cookies.remove("SessionEventName"),$rootScope.thisPage=void 0,$rootScope.returnToState=void 0,$rootScope.returnToStateParams=void 0,$rootScope.stateIsLoading=void 0,$rootScope.activeMenu=void 0,$rootScope.sessionEvent=void 0,$rootScope.isAuth=void 0,$rootScope.searchTerm=void 0,$rootScope.searchParams=void 0,$rootScope.approvalSearch=void 0,$rootScope.userID=void 0,$rootScope.userRole=void 0,$rootScope.usersName=void 0,$rootScope.environment=void 0,$location.path("/login")}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("quickHWMCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$uibModal","$filter","allHorDatums","allHorCollMethods","allStates","allCounties","allOPTypes","allVertDatums","allVertColMethods","allOPQualities","allHWMTypes","allHWMQualities","allMarkers","SITE","OBJECTIVE_POINT","HWM",function($scope,$rootScope,$cookies,$location,$state,$http,$uibModal,$filter,allHorDatums,allHorCollMethods,allStates,allCounties,allOPTypes,allVertDatums,allVertColMethods,allOPQualities,allHWMTypes,allHWMQualities,allMarkers,SITE,OBJECTIVE_POINT,HWM){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$rootScope.thisPage="Quick HWM",$scope.qhwmForm={};var makeAdate=function(d){var aDate=new Date;""!==d&&void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};$scope.decDegORdms={},$scope.aSite={MEMBER_ID:$cookies.get("mID")},$scope.aOP={DATE_ESTABLISHED:makeAdate("")},$scope.aHWM={HWM_ENVIRONMENT:"Riverine",BANK:"N/A",FLAG_DATE:makeAdate(""),STILLWATER:0},$scope.status={siteOpen:!0,opOpen:!1,hwmOpen:!1},$scope.removeOPCarray=[],$scope.addedIdentifiers=[],$scope.showControlIDinput=!1,$scope.horDatumList=allHorDatums,$scope.horCollMethodList=allHorCollMethods,$scope.stateList=allStates,$scope.allCountyList=allCounties,$scope.stateCountyList=[],$scope.opTypeList=allOPTypes,$scope.vertDatumList=allVertDatums,$scope.vertCollMethodList=allVertColMethods,$scope.opQualList=allOPQualities,$scope.hwmTypeList=allHWMTypes,$scope.hwmQualList=allHWMQualities,$scope.markerList=allMarkers,$scope.FTorMETER="ft",$scope.FTorCM="ft",$scope.addNewIdentifier=function(){$scope.addedIdentifiers.push({OBJECTIVE_POINT_ID:$scope.aOP.OBJECTIVE_POINT_ID,IDENTIFIER:"",IDENTIFIER_TYPE:""}),$scope.showControlIDinput=!0},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.decDegORdms.val="dd",$scope.DMS={};var azimuth=function(deg,min,sec){var azi=0;return 0>deg?(azi=-1*deg+1*min/60+1*sec/3600,(-1*azi).toFixed(5)):(azi=1*deg+1*min/60+1*sec/3600,azi.toFixed(5))},deg_to_dms=function(deg){0>deg&&(deg=deg.toString(),deg=deg.substring(1));var d=Math.floor(deg),minfloat=60*(deg-d),m=Math.floor(minfloat),s=(60*(minfloat-m)).toFixed(3);return""+d+":"+m+":"+s};$scope.latLongChange=function(){if("dd"==$scope.decDegORdms.val){if(void 0!==$scope.DMS.LADeg){$scope.aSite.LATITUDE_DD=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.aSite.LONGITUDE_DD=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)}}else if(void 0!==$scope.aSite.LATITUDE_DD){var latDMS=deg_to_dms($scope.aSite.LATITUDE_DD).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.aSite.LONGITUDE_DD),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2]}},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.getAddress=function(){delete $scope.aSite.ADDRESS,delete $scope.aSite.CITY,delete $scope.aSite.STATE,$scope.stateCountyList=[],delete $scope.aSite.ZIP,$rootScope.stateIsLoading.showLoading=!0;var geocoder=new google.maps.Geocoder,latlng=new google.maps.LatLng($scope.aSite.LATITUDE_DD,$scope.aSite.LONGITUDE_DD);geocoder.geocode({latLng:latlng},function(results,status){if(status==google.maps.GeocoderStatus.OK){var address_components=results[0].address_components,components={};$.each(address_components,function(k,v1){$.each(v1.types,function(k2,v2){components[v2]=v1.long_name})}),$scope.aSite.ADDRESS=void 0!==components.street_number?components.street_number+" "+components.route:components.route,$scope.aSite.CITY=components.locality;var thisState=$scope.stateList.filter(function(s){return s.STATE_NAME==components.administrative_area_level_1})[0];void 0!==thisState?($scope.aSite.STATE=thisState.STATE_ABBREV,$scope.stateCountyList=$scope.allCountyList.filter(function(c){return c.STATE_ID==thisState.STATE_ID}),$scope.aSite.COUNTY=components.administrative_area_level_2,$scope.aSite.ZIP=components.postal_code,$rootScope.stateIsLoading.showLoading=!1,$scope.$apply()):($rootScope.stateIsLoading.showLoading=!1,toastr.error("The Latitude/Longitude did not return a location within the U.S."))}else $rootScope.stateIsLoading.showLoading=!1,toastr.error("There was an error getting address. Please try again.")})},$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1}),$scope.updateCountyList=function(s){var thisState=$scope.stateList.filter(function(st){return st.STATE_ABBREV==s})[0];$scope.stateCountyList=$scope.allCountyList.filter(function(c){return c.STATE_ID==thisState.STATE_ID})},$scope.UnquantChecked=function(){1==$scope.aOP.UNQUANTIFIED&&($scope.aOP.UNCERTAINTY=null)};var trimOP=function(op){var OBJ_PT={OBJECTIVE_POINT_ID:void 0!==op.OBJECTIVE_POINT_ID?op.OBJECTIVE_POINT_ID:0,NAME:op.NAME,DESCRIPTION:op.DESCRIPTION,ELEV_FT:void 0!==op.ELEV_FT?op.ELEV_FT:null,DATE_ESTABLISHED:op.DATE_ESTABLISHED,OP_IS_DESTROYED:void 0!==op.OP_IS_DESTROYED?op.OP_IS_DESTROYED:0,OP_NOTES:void 0!==op.OP_NOTES?op.OP_NOTES:null,SITE_ID:op.SITE_ID,VDATUM_ID:void 0!==op.VDATUM_ID?op.VDATUM_ID:0,LATITUDE_DD:op.LATITUDE_DD,LONGITUDE_DD:op.LONGITUDE_DD,HDATUM_ID:void 0!==op.HDATUM_ID?op.HDATUM_ID:0,HCOLLECT_METHOD_ID:void 0!==op.HCOLLECT_METHOD_ID?op.HCOLLECT_METHOD_ID:0,VCOLLECT_METHOD_ID:void 0!==op.VCOLLECT_METHOD_ID?op.VCOLLECT_METHOD_ID:0,OP_TYPE_ID:op.OP_TYPE_ID,DATE_RECOVERED:void 0!==op.DATE_RECOVERED?op.DATE_RECOVERED:null,UNCERTAINTY:void 0!==op.UNCERTAINTY?op.UNCERTAINTY:null,UNQUANTIFIED:void 0!==op.UNQUANTIFIED?op.UNQUANTIFIED:null,OP_QUALITY_ID:void 0!==op.OP_QUALITY_ID?op.OP_QUALITY_ID:null};return OBJ_PT},formatDefaults=function(theOP){"meter"==theOP.FTorMETER&&($scope.aOP.FTorMETER="ft",$scope.aOP.ELEV_FT=3.2808*$scope.aOP.ELEV_FT),"cm"==theOP.FTorCM&&($scope.aOP.FTorCM="ft",$scope.aOP.UNCERTAINTY=$scope.aOP.UNCERTAINTY/30.48)};$scope.siteErrors=!1,$scope.opErrors=!1,$scope.hwmErrors=!1,$scope.create=function(){$rootScope.stateIsLoading.showLoading=!0;var theForm=$scope.qhwmForm.quickHWM;if($scope.siteErrors=!1,$scope.opErrors=!1,$scope.hwmErrors=!1,theForm.$valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var createdSiteID=0;$scope.aSite.LONGITUDE_DD>0&&($scope.aSite.LONGITUDE_DD=-1*$scope.aSite.LONGITUDE_DD),SITE.save($scope.aSite,function(response){createdSiteID=response.SITE_ID,$scope.aOP.SITE_ID=createdSiteID,$scope.aOP.LATITUDE_DD=response.LATITUDE_DD,$scope.aOP.LONGITUDE_DD=response.LONGITUDE_DD,$scope.aOP.HDATUM_ID=response.HDATUM_ID,$scope.aOP.HCOLLECT_METHOD_ID=response.HCOLLECT_METHOD_ID,$scope.aHWM.SITE_ID=createdSiteID,$scope.aHWM.WATERBODY=response.WATERBODY,$scope.aHWM.LATITUDE_DD=response.LATITUDE_DD,$scope.aHWM.LONGITUDE_DD=response.LONGITUDE_DD,$scope.aHWM.HCOLLECT_METHOD_ID=response.HCOLLECT_METHOD_ID,$scope.aHWM.HDATUM_ID=response.HDATUM_ID,$scope.aHWM.FLAG_TEAM_ID=response.MEMBER_ID,$scope.aHWM.EVENT_ID=$cookies.get("SessionEventID");var createdOP={};formatDefaults($scope.aOP);var OPtoPOST=trimOP($scope.aOP);OBJECTIVE_POINT.save(OPtoPOST,function(response){if(createdOP=response,$scope.addedIdentifiers.length>0)for(var opc=0;opc<$scope.addedIdentifiers.length;opc++)OBJECTIVE_POINT.createOPControlID({id:response.OBJECTIVE_POINT_ID},$scope.addedIdentifiers[opc]).$promise;void 0!==$scope.aHWM.SURVEY_DATE&&($scope.aHWM.SURVEY_TEAM_ID=$scope.aHWM.FLAG_TEAM_ID),void 0!==$scope.aHWM.ELEV_FT&&(void 0===$scope.aHWM.SURVEY_DATE&&($scope.aHWM.SURVEY_DATE=makeAdate("")),$scope.aHWM.SURVEY_TEAM_ID=$scope.aHWM.FLAG_TEAM_ID),HWM.save($scope.aHWM).$promise.then(function(response){toastr.success("Quick HWM created"),$rootScope.stateIsLoading.showLoading=!1,$location.path("/Site/"+createdSiteID+"/SiteDashboard").replace(),$scope.apply})})})}else $rootScope.stateIsLoading.showLoading=!1,$scope.status.siteOpen=!0,$scope.status.opOpen=!0,$scope.status.hwmOpen=!0,angular.element("[name='"+theForm.$name+"']").find(".ng-invalid:visible:first").focus(),(theForm.SITE_DESCRIPTION.$invalid||theForm.LATITUDE_DD.$invalid||theForm.LONGITUDE_DD.$invalid||theForm.HDATUM_ID.$invalid||theForm.HCOLLECT_METHOD_ID.$invalid||theForm.WATERBODY.$invalid||theForm.STATE.$invalidv||theForm.COUNTY.$invalid)&&($scope.siteErrors=!0),(theForm.OP_TYPE_ID.$invalid||theForm.NAME.$invalid||theForm.DESCRIPTION.$invalid||theForm.de.$invalid)&&($scope.opErrors=!0),(theForm.HWM_TYPE_ID.$invalid||theForm.HWM_ENVIRONMENT.$invalid||theForm.HWM_QUALITY_ID.$invalid||theForm.fd.$invalid)&&($scope.hwmErrors=!0),toastr.error("Quick HWM not created.")}}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("hwmModalCtrl",["$scope","$rootScope","$cookies","$http","$sce","$uibModalInstance","$uibModal","SERVER_URL","FILE_STAMP","allDropdowns","Site_Files","thisHWM","allSiteHWMs","hwmApproval","agencyList","hwmSite","allMembers","HWM","SOURCE","FILE",function($scope,$rootScope,$cookies,$http,$sce,$uibModalInstance,$uibModal,SERVER_URL,FILE_STAMP,allDropdowns,Site_Files,thisHWM,allSiteHWMs,hwmApproval,agencyList,hwmSite,allMembers,HWM,SOURCE,FILE){$scope.view={HWMval:"detail"},$scope.h={hOpen:!0,hFileOpen:!1},$scope.hwmTypeList=allDropdowns[0],$scope.hwmQualList=allDropdowns[1],$scope.HDatumsList=allDropdowns[2],$scope.hCollMList=allDropdowns[3],$scope.VDatumsList=allDropdowns[4],$scope.vCollMList=allDropdowns[5],$scope.markerList=allDropdowns[6],$scope.eventList=allDropdowns[7],$scope.fileTypeList=allDropdowns[8],$scope.allSFiles=Site_Files.getAllSiteFiles(),$scope.HWMFiles="empty"!==thisHWM?$scope.allSFiles.filter(function(sf){return sf.hwm_id==thisHWM.hwm_id}):[],$scope.hwmImageFiles=$scope.HWMFiles.filter(function(hf){return 1===hf.filetype_id}),$scope.showFileForm=!1,$scope.userRole=$cookies.get("usersRole"),$scope.FlagMember="",$scope.showEventDD=!1,$scope.adminChanged={},$scope.serverURL=SERVER_URL,$scope.showChangeEventDD=function(){$scope.showEventDD=!$scope.showEventDD},$scope.ChangeEvent=function(){$scope.EventName=$scope.eventList.filter(function(el){return el.event_id==$scope.adminChanged.event_id})[0].event_name},$scope.LoggedInMember=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aHWM={},$scope.DMS={},$scope.thisHWMsite=hwmSite,$scope.ApprovalInfo={},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0};var azimuth=function(deg,min,sec){var azi=0;return 0>deg?(azi=-1*deg+1*min/60+1*sec/3600,(-1*azi).toFixed(5)):(azi=1*deg+1*min/60+1*sec/3600,azi.toFixed(5))},deg_to_dms=function(deg){0>deg&&(deg=deg.toString(),deg=deg.substring(1));var d=Math.floor(deg),minfloat=60*(deg-d),m=Math.floor(minfloat),s=(60*(minfloat-m)).toFixed(3);return""+d+":"+m+":"+s};$scope.latLongChange=function(){if("edit"==$scope.createOReditHWM){if("dd"==$scope.hwmCopy.decDegORdms)if(void 0!==$scope.DMS.LADeg&&void 0!==$scope.DMS.LAMin&&void 0!==$scope.DMS.LASec&&void 0!==$scope.DMS.LODeg&&void 0!==$scope.DMS.LOMin&&void 0!==$scope.DMS.LOSec)$scope.hwmCopy.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.hwmCopy.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),$scope.DMS={};else{var DMSddModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all three inputs for conversion from DMS to Decimal Degrees to work.</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});DMSddModal.result.then(function(){(void 0!==$scope.DMS.LADeg||void 0!==$scope.DMS.LAMin||void 0!==$scope.DMS.LASec)&&$("#LaDeg").focus(),(void 0!==$scope.DMS.LODeg||void 0!==$scope.DMS.LOMin||void 0!==$scope.DMS.LOSec)&&$("#LoDeg").focus(),$scope.hwmCopy.decDegORdms="dms"})}else if(void 0!==$scope.hwmCopy.latitude_dd){var latDMS=deg_to_dms($scope.hwmCopy.latitude_dd).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.hwmCopy.longitude_dd),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2],$scope.hwmCopy.latitude_dd=void 0,$scope.hwmCopy.longitude_dd=void 0}}else if("dd"==$scope.aHWM.decDegORdms)if(void 0!==$scope.DMS.LADeg&&void 0!==$scope.DMS.LAMin&&void 0!==$scope.DMS.LASec&&void 0!==$scope.DMS.LODeg&&void 0!==$scope.DMS.LOMin&&void 0!==$scope.DMS.LOSec)$scope.aHWM.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.aHWM.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),$scope.DMS={};else{var DMSModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all three inputs for conversion from DMS to Decimal Degrees to work.</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});DMSModal.result.then(function(){(void 0!==$scope.DMS.LADeg||void 0!==$scope.DMS.LAMin||void 0!==$scope.DMS.LASec)&&$("#LaDeg").focus(),(void 0!==$scope.DMS.LODeg||void 0!==$scope.DMS.LOMin||void 0!==$scope.DMS.LOSec)&&$("#LoDeg").focus(),$scope.aHWM.decDegORdms="dms"})}else if(void 0!==$scope.aHWM.latitude_dd){var create_latDMS=deg_to_dms($scope.aHWM.latitude_dd).toString(),create_ladDMSarray=create_latDMS.split(":");$scope.DMS.LADeg=create_ladDMSarray[0],$scope.DMS.LAMin=create_ladDMSarray[1],$scope.DMS.LASec=create_ladDMSarray[2];var create_longDMS=deg_to_dms($scope.aHWM.longitude_dd),create_longDMSarray=create_longDMS.split(":");$scope.DMS.LODeg=-1*create_longDMSarray[0],$scope.DMS.LOMin=create_longDMSarray[1],$scope.DMS.LOSec=create_longDMSarray[2],$scope.aHWM.latitude_dd=void 0,$scope.aHWM.longitude_dd=void 0}};var openLatModal=function(w,message){var latModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>{{message}}</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',resolve:{show:function(){return message}},controller:["$scope","$uibModalInstance","show",function($scope,$uibModalInstance,show){$scope.ok=function(){$uibModalInstance.close()},"range"==show&&($scope.message="The Latitude must be between 0 and 73.0"),"distance"==show&&($scope.message="Latitude places the HWM more than 232 ft from the site's latitude. Please verify before continuing.")}],size:"sm"});latModal.result.then(function(fieldFocus){"latlong"==w?$("#latitude_dd").focus():$("#LaDeg").focus()})},openLongModal=function(w,message){var longModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>{{message}}</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',resolve:{show:function(){return message}},controller:["$scope","$uibModalInstance","show",function($scope,$uibModalInstance,show){$scope.ok=function(){$uibModalInstance.close()},"range"==show&&($scope.message="The Longitude must be between -175.0 and -60.0"),"distance"==show&&($scope.message="Longitude places the HWM more than 232 ft from the site's longitude. Please verify before continuing")}],size:"sm"});longModal.result.then(function(fieldFocus){"latlong"==w?$("#longitude_dd").focus():$("#LoDeg").focus()})};$scope.checkValue=function(d){if("dms"==d){if($scope.DMS.LADeg<0||$scope.DMS.LADeg>73||isNaN($scope.DMS.LADeg)&&void 0!==$scope.DMS.LADeg||isNaN($scope.DMS.LAMin)&&void 0!==$scope.DMS.LAMin||isNaN($scope.DMS.LASec)&&void 0!==$scope.DMS.LASec)openLatModal("dms","range"),isNaN($scope.DMS.LADeg)&&($scope.DMS.LADeg=void 0),isNaN($scope.DMS.LAMin)&&($scope.DMS.LAMin=void 0),isNaN($scope.DMS.LASec)&&($scope.DMS.LASec=void 0);else{var lat=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),latDis=hwmSite.latitude_dd-lat;Math.abs(latDis)>5e-4&&openLatModal("dms","distance")}if($scope.DMS.LODeg<-175||$scope.DMS.LODeg>-60||isNaN($scope.DMS.LODeg)&&void 0!==$scope.DMS.LODeg||isNaN($scope.DMS.LOMin)&&void 0!==$scope.DMS.LOMin||isNaN($scope.DMS.LOSec)&&void 0!==$scope.DMS.LOSec)openLongModal("dms","range"),isNaN($scope.DMS.LODeg)&&($scope.DMS.LODeg=void 0),isNaN($scope.DMS.LOMin)&&($scope.DMS.LOMin=void 0),isNaN($scope.DMS.LOSec)&&($scope.DMS.LOSec=void 0);else{var lo=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),loDis=hwmSite.longitude_dd-lo;Math.abs(loDis)>5e-4&&openLongModal("dms","distance")}}else{var h="edit"==$scope.view.HWMval?$scope.hwmCopy:$scope.aHWM;if(h.latitude_dd<0||h.latitude_dd>73||isNaN(h.latitude_dd))openLatModal("latlong","range"),isNaN(h.latitude_dd)&&(h.latitude_dd=void 0);else{var latDistance=hwmSite.latitude_dd-h.latitude_dd;Math.abs(latDistance)>5e-4&&openLatModal("latlong","distance")}if(h.longitude_dd<-175||h.longitude_dd>-60||isNaN(h.longitude_dd))openLongModal("latlong","range"),isNaN(h.longitude_dd)&&(h.longitude_dd=void 0);else{var longDistance=hwmSite.longitude_dd-h.longitude_dd;Math.abs(longDistance)>5e-4&&openLongModal("latlong","distance")}}},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.chooseQuality=function(){var h="edit"==$scope.view.HWMval?$scope.hwmCopy:$scope.aHWM;if(""!==h.hwm_uncertainty){var x=Number(h.hwm_uncertainty);h.hwm_quality_id=$scope.hwmQualList.filter(function(h){return h.min_range<=x&&h.max_range>=x})[0].hwm_quality_id}},$scope.compareToUncertainty=function(){var h="edit"==$scope.view.HWMval?$scope.hwmCopy:$scope.aHWM;if(""!==h.hwm_uncertainty&&void 0!==h.hwm_uncertainty){var x=Number(h.hwm_uncertainty),matchingQualId=$scope.hwmQualList.filter(function(h){return h.min_range<=x&&h.max_range>=x})[0].hwm_quality_id;if(h.hwm_quality_id!==matchingQualId){var incongruentModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Warning</h3></div><div class="modal-body"><p>There is a mismatch between the hwm quality chosen and the hwm uncertainty above. Please correct your hwm uncertainty.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});incongruentModal.result.then(function(){angular.element("[name='hwm_uncertainty']").focus()})}}};var makeAdate=function(d){var aDate=new Date;""!==d&&void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};"empty"!=thisHWM?($scope.createOReditHWM="edit",$scope.aHWM=angular.copy(thisHWM),$scope.aHWM.hwm_type=$scope.hwmTypeList.filter(function(ht){return ht.hwm_type_id==$scope.aHWM.hwm_type_id})[0].hwm_type,null!==$scope.aHWM.stillwater&&($scope.aHWM.Tranquil=$scope.aHWM.stillwater>0?"Yes":"No"),$scope.aHWM.Marker=$scope.aHWM.marker_id>0?$scope.markerList.filter(function(m){return m.marker_id==$scope.aHWM.marker_id})[0].marker1:"",$scope.aHWM.Quality=$scope.aHWM.hwm_quality_id>0?$scope.hwmQualList.filter(function(hq){return hq.hwm_quality_id==$scope.aHWM.hwm_quality_id})[0].hwm_quality:"",$scope.aHWM.hdatum=$scope.aHWM.hdatum_id>0?$scope.HDatumsList.filter(function(hd){return hd.datum_id==$scope.aHWM.hdatum_id})[0].datum_name:"",$scope.aHWM.hCollectMethod=$scope.aHWM.hcollect_method_id>0?$scope.hCollMList.filter(function(hc){return hc.hcollect_method_id==$scope.aHWM.hcollect_method_id})[0].hcollect_method:"",$scope.aHWM.vDatum=$scope.aHWM.vdatum_id>0?$scope.VDatumsList.filter(function(vd){return vd.datum_id==$scope.aHWM.vdatum_id})[0].datum_name:"",$scope.aHWM.vCollectMethod=$scope.aHWM.vcollect_method_id>0?$scope.vCollMList.filter(function(vc){return vc.vcollect_method_id==$scope.aHWM.vcollect_method_id})[0].vcollect_method:"",void 0!==$scope.aHWM.approval_id&&HWM.getHWMApproval({id:$scope.aHWM.hwm_id}).$promise.then(function(response){$scope.ApprovalInfo.approvalDate=new Date(response.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==response.member_id})[0]}),$scope.hwmModalHeader="HWM Information",$scope.EventName=$scope.aHWM.event_id>0?$scope.eventList.filter(function(e){return e.event_id==$scope.aHWM.event_id})[0].event_name:"None provided",$scope.aHWM.flag_date=makeAdate($scope.aHWM.flag_date),null!==$scope.aHWM.survey_date&&void 0!==$scope.aHWM.survey_date&&($scope.aHWM.survey_date=makeAdate($scope.aHWM.survey_date),$scope.SurveyMember=allMembers.filter(function(m){return m.member_id==$scope.aHWM.survey_member_id})[0]),$scope.FlagMember=allMembers.filter(function(m){return m.member_id==$scope.aHWM.flag_member_id})[0]):($scope.hwmModalHeader="Create new HWM",$scope.createOReditHWM="create",$scope.aHWM={site_id:$scope.thisHWMsite.site_id,event_id:$cookies.get("SessionEventID"),hwm_environment:"Riverine",bank:"N/A",hwm_label:"no_label",stillwater:0,latitude_dd:hwmSite.latitude_dd,longitude_dd:hwmSite.longitude_dd,waterbody:hwmSite.waterbody,hdatum_id:hwmSite.hdatum_id,hcollect_method_id:hwmSite.hcollect_method_id,
flag_date:makeAdate(""),flag_member_id:$scope.LoggedInMember.member_id},$scope.EventName=$cookies.get("SessionEventName"),$scope.FlagMember=$scope.LoggedInMember),$scope.aHWM.decDegORdms="dd",$scope.aHWM.FTorCM="ft",$scope.create=function(valid){if(valid){var createdHWM={};void 0!==$scope.DMS.LADeg&&($scope.aHWM.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.aHWM.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)),void 0!==$scope.aHWM.survey_date&&null!==$scope.aHWM.survey_date&&($scope.aHWM.survey_member_id=$scope.flag_member_id),"cm"==$scope.aHWM.FTorCM&&($scope.aHWM.FTorCM="ft",void 0!==$scope.aHWM.uncertainty&&($scope.aHWM.uncertainty=parseFloat($scope.aHWM.uncertainty/30.48).toFixed(6))),void 0!==$scope.aHWM.elev_ft&&null!==$scope.aHWM.elev_ft&&(void 0===$scope.aHWM.survey_date&&($scope.aHWM.survey_date=makeAdate("")),$scope.aHWM.survey_member_id=$scope.aHWM.flag_member_id),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM.save($scope.aHWM).$promise.then(function(response){createdHWM=response,toastr.success("HWM created");var sendBack=[createdHWM,"created"];$uibModalInstance.close(sendBack)})}},$scope.approveHWM=function(){var thisHWM=$scope.aHWM,approveModal=$uibModal.open({template:"<div class='modal-header'><h3 class='modal-title'>Approve HWM</h3></div><div class='modal-body'><p>Are you ready to approve this HWM?</p><p>The surveyed elevation is {{approveHWM.elev_ft || '---'}}</p><p>The height above ground is {{approveHWM.height_above_gnd || '---'}}</p></div><div class='modal-footer'><button class='btn btn-primary' ng-click='approveIt()'>Approve</button><button class='btn btn-warning' ng-click='cancel()'>Cancel</button></div>",controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.approveHWM=thisHWM,$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.approveIt=function(){$uibModalInstance.close(thisHWM)}}],size:"sm"});approveModal.result.then(function(h){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM.approveHWM({id:h.hwm_id}).$promise.then(function(approvalResponse){h.approval_id=approvalResponse.approval_id,toastr.success("HWM Approved"),$scope.ApprovalInfo.approvalDate=new Date(approvalResponse.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==approvalResponse.member_id})[0]},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.unApproveHWM=function(){var thisHWM=$scope.aHWM,unapproveModal=$uibModal.open({template:"<div class='modal-header'><h3 class='modal-title'>Remove Approval</h3></div><div class='modal-body'><p>Are you sure you wan to unapprove this HWM?</p></div><div class='modal-footer'><button class='btn btn-primary' ng-click='unApproveIt()'>Unapprove</button><button class='btn btn-warning' ng-click='cancel()'>Cancel</button></div>",controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.approveHWM=thisHWM,$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.unApproveIt=function(){$uibModalInstance.close(thisHWM)}}],size:"sm"});unapproveModal.result.then(function(h){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM.unApproveHWM({id:h.hwm_id}).$promise.then(function(){h.approval_id=null,toastr.success("HWM Unapproved"),$scope.ApprovalInfo={}},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})};var formatHWM=function(h){var formattedHWM={hwm_id:h.hwm_id,waterbody:h.waterbody,site_id:h.site_id,event_id:h.event_id,hwm_type_id:h.hwm_type_id,hwm_quality_id:h.hwm_quality_id,hwm_locationdescription:h.hwm_locationdescription,latitude_dd:h.latitude_dd,longitude_dd:h.longitude_dd,survey_date:h.survey_date,elev_ft:h.elev_ft,vdatum_id:h.vdatum_id,vcollect_method_id:h.vcollect_method_id,bank:h.bank,approval_id:h.approval_id,marker_id:h.marker_id,height_above_gnd:h.height_above_gnd,hcollect_method_id:h.hcollect_method_id,peak_summary_id:h.peak_summary_id,hwm_notes:h.hwm_notes,hwm_environment:h.hwm_environment,flag_date:h.flag_date,stillwater:h.stillwater,hdatum_id:h.hdatum_id,flag_member_id:h.flag_member_id,survey_member_id:h.survey_member_id,uncertainty:h.uncertainty,hwm_uncertainty:h.hwm_uncertainty,hwm_label:h.hwm_label};return formattedHWM};$scope.save=function(valid){if(valid){void 0!==$scope.DMS.LADeg&&($scope.hwmCopy.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.hwmCopy.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)),void 0!==$scope.adminChanged.event_id&&($scope.hwmCopy.event_id=$scope.adminChanged.event_id),void 0!==$scope.hwmCopy.survey_date&&void 0===$scope.hwmCopy.survey_member_id&&($scope.hwmCopy.survey_member_id=$cookies.get("mID")),"cm"==$scope.hwmCopy.FTorCM&&($scope.hwmCopy.FTorCM="ft",void 0!==$scope.hwmCopy.uncertainty&&($scope.hwmCopy.uncertainty=parseFloat($scope.hwmCopy.uncertainty/30.48).toFixed(6))),void 0!==$scope.hwmCopy.elev_ft&&null!==$scope.hwmCopy.elev_ft&&(void 0===$scope.hwmCopy.survey_date&&($scope.hwmCopy.survey_date=makeAdate("")),void 0===$scope.hwmCopy.survey_member_id&&($scope.hwmCopy.survey_member_id=$cookies.get("mID"))),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var cleanHWM=formatHWM($scope.hwmCopy);HWM.update({id:cleanHWM.hwm_id},cleanHWM).$promise.then(function(response){toastr.success("HWM updated"),$scope.aHWM=response,thisHWM=response,$scope.aHWM.hwm_type=$scope.hwmTypeList.filter(function(ht){return ht.hwm_type_id==$scope.aHWM.hwm_type_id})[0].hwm_type,null!==$scope.aHWM.stillwater&&($scope.aHWM.Tranquil=$scope.aHWM.stillwater>0?"Yes":"No"),$scope.aHWM.Marker=$scope.aHWM.marker_id>0?$scope.markerList.filter(function(m){return m.marker_id==$scope.aHWM.marker_id})[0].marker1:"",$scope.aHWM.Quality=$scope.aHWM.hwm_quality_id>0?$scope.hwmQualList.filter(function(hq){return hq.hwm_quality_id==$scope.aHWM.hwm_quality_id})[0].hwm_quality:"",$scope.aHWM.hdatum=$scope.aHWM.hdatum_id>0?$scope.HDatumsList.filter(function(hd){return hd.datum_id==$scope.aHWM.hdatum_id})[0].datum_name:"",$scope.aHWM.hCollectMethod=$scope.aHWM.hcollect_method_id>0?$scope.hCollMList.filter(function(hc){return hc.hcollect_method_id==$scope.aHWM.hcollect_method_id})[0].hcollect_method:"",$scope.aHWM.vDatum=$scope.aHWM.vdatum_id>0?$scope.VDatumsList.filter(function(vd){return vd.datum_id==$scope.aHWM.vdatum_id})[0].datum_name:"",$scope.aHWM.vCollectMethod=$scope.aHWM.vcollect_method_id>0?$scope.vCollMList.filter(function(vc){return vc.vcollect_method_id==$scope.aHWM.vcollect_method_id})[0].vcollect_method:"",$scope.aHWM.flag_date=makeAdate($scope.aHWM.flag_date),void 0!==hwmApproval&&($scope.ApprovalInfo.approvalDate=new Date(hwmApproval.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==hwmApproval.member_id})[0]),null!==$scope.aHWM.survey_date&&void 0!==$scope.aHWM.survey_date&&($scope.aHWM.survey_date=makeAdate($scope.aHWM.survey_date),$scope.SurveyMember=allMembers.filter(function(m){return m.member_id==$scope.aHWM.survey_member_id})[0]),$scope.FlagMember=allMembers.filter(function(m){return m.member_id==$scope.aHWM.flag_member_id})[0],$scope.hwmCopy={},$scope.view.HWMval="detail"})}},$scope.deleteHWM=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aHWM},what:function(){return"HWM"}}});DeleteModalInstance.result.then(function(hwmToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM["delete"]({id:hwmToRemove.hwm_id},hwmToRemove).$promise.then(function(){$scope.HWMFiles=[],$scope.hwmImageFiles=[];for(var l=$scope.allSFiles.length;l--;)$scope.allSFiles[l].hwm_id==hwmToRemove.hwm_id&&$scope.allSFiles.splice(l,1);Site_Files.setAllSiteFiles($scope.allSFiles),toastr.success("HWM Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.cancel=function(){$rootScope.stateIsLoading.showLoading=!1;var sendBack=$scope.aHWM;$uibModalInstance.close(sendBack)},$scope.wannaEditHWM=function(){$scope.view.HWMval="edit",$scope.hwmCopy=angular.copy($scope.aHWM),$scope.hwmCopy.decDegORdms="dd",$scope.hwmCopy.FTorCM="ft"},$scope.cancelHWMEdit=function(){$scope.view.HWMval="detail",$scope.hwmCopy=[],$scope.adminChanged={},$scope.EventName=$scope.eventList.filter(function(e){return e.event_id==$scope.aHWM.event_id})[0].event_name},$scope.stamp=FILE_STAMP.getStamp(),$scope.fileItemExists=!0,$scope.saveFileUpload=function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.sFileIsUploading=!0;var fileParts={FileEntity:{file_id:$scope.aFile.file_id,name:$scope.aFile.name,description:$scope.aFile.description,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,file_date:$scope.aFile.file_date,hwm_id:$scope.aFile.hwm_id,site_id:$scope.aFile.site_id,filetype_id:$scope.aFile.filetype_id,source_id:$scope.aFile.source_id,path:$scope.aFile.path,data_file_id:$scope.aFile.data_file_id,instrument_id:$scope.aFile.instrument_id,photo_date:$scope.aFile.photo_date,is_nwis:$scope.aFile.is_nwis,objective_point_id:$scope.aFile.objective_point_id},File:void 0!==$scope.aFile.File1?$scope.aFile.File1:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),FILE_STAMP.setStamp(),$scope.stamp=FILE_STAMP.getStamp(),$scope.isPhoto=$scope.aFile.File1.type.indexOf("image")>-1?!0:!1,$scope.aFile.name=fresponse.name,$scope.aFile.path=fresponse.path,void 0!==$scope.aFile.File1&&($scope.aFile.File=$scope.aFile.File1,$scope.aFile.File1=void 0),fresponse.fileBelongsTo="HWM File",$scope.HWMFiles.splice($scope.existFileIndex,1),$scope.HWMFiles.push(fresponse),1===fresponse.filetype_id&&($scope.hwmImageFiles.splice($scope.existFileIndex,1),$scope.hwmImageFiles.push(fresponse)),$scope.allSFiles[$scope.allSFileIndex]=fresponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.sFileIsUploading=!1,$scope.fileItemExists=!0},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})},$scope.showFile=function(file){if($scope.fileTypes=$scope.fileTypeList,$scope.agencies=agencyList,$scope.existFileIndex=-1,$scope.existIMGFileIndex=-1,$scope.allSFileIndex=-1,$scope.aFile={},$scope.aSource={},0!==file){if($scope.existFileIndex=$scope.HWMFiles.indexOf(file),$scope.allSFileIndex=$scope.allSFiles.indexOf(file),$scope.existIMGFileIndex=$scope.hwmImageFiles.length>0?$scope.hwmImageFiles.indexOf(file):-1,$scope.aFile=angular.copy(file),FILE.getFileItem({id:$scope.aFile.file_id}).$promise.then(function(response){$scope.fileItemExists=response.Length>0?!0:!1}),$scope.aFile.fileType=$scope.fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,void 0!==$scope.aFile.name){var fI=$scope.aFile.name.lastIndexOf("."),fileExt=$scope.aFile.name.substring(fI+1);$scope.isPhoto=fileExt.match(/(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)?!0:!1}$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),null!==file.source_id&&SOURCE.query({id:file.source_id}).$promise.then(function(s){$scope.aSource=s,$scope.aSource.FULLname=$scope.aSource.source_name,$scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name})}else $scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname,$scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name;$scope.showFileForm=!0,$scope.updateAgencyForCaption=function(){1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}},$scope.createFile=function(valid){if(valid){$scope.HWMfileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){if(8!==$scope.aFile.filetype_id){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,photo_date:$scope.aFile.photo_date,description:$scope.aFile.description,site_id:$scope.thisHWMsite.site_id,source_id:response.source_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,hwm_id:$scope.aHWM.hwm_id},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="HWM File",$scope.HWMFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),1===fresponse.filetype_id&&$scope.hwmImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.HWMfileIsUploading=!1},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error uploading file: "+errorResponse.statusText)})}else $scope.aFile.source_id=response.source_id,$scope.aFile.site_id=$scope.thisHWMsite.site_id,$scope.aFile.hwm_id=$scope.aHWM.hwm_id,FILE.save($scope.aFile).$promise.then(function(fresponse){toastr.success("Link saved"),fresponse.fileBelongsTo="HWM File",$scope.HWMFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.HWMfileIsUploading=!1},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error creating Source info: "+errorResponse.statusText)})}},$scope.saveFile=function(valid){if(valid){$scope.HWMfileIsUploading=!0;{$scope.aFile.fileBelongsTo}if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.aSource.source_id){var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){$scope.aFile.source_id=response.source_id,FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="HWM File",$scope.HWMFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.HWMfileIsUploading=!1},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})}}},$scope.deleteFile=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.HWMFiles.splice($scope.existFileIndex,1),$scope.allSFiles.splice($scope.allSFileIndex,1),$scope.hwmImageFiles.splice($scope.existIMGFileIndex,1),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelFile=function(){$scope.aFile={},$scope.aSource={},$scope.showFileForm=!1},$rootScope.stateIsLoading.showLoading=!1}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("hwmCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","thisSite","thisSiteHWMs","HWM_Service","allAgencies","allHWMTypes","allHWMQualities","allHorDatums","allMarkers","allHorCollMethods","allVertDatums","allVertColMethods","allEvents","allFileTypes","MEMBER","HWM",function($scope,$rootScope,$cookies,$location,$state,$http,$uibModal,$filter,$timeout,thisSite,thisSiteHWMs,HWM_Service,allAgencies,allHWMTypes,allHWMQualities,allHorDatums,allMarkers,allHorCollMethods,allVertDatums,allVertColMethods,allEvents,allFileTypes,MEMBER,HWM){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($scope.hwmCount={total:thisSiteHWMs.length},$scope.SiteHWMs=thisSiteHWMs,HWM_Service.setAllSiteHWMs($scope.SiteHWMs),$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1,void 0!==newValue?($scope.SiteHWMs=thisSiteHWMs.filter(function(h){return h.event_id==$cookies.get("SessionEventID")}),$scope.hwmCount={total:$scope.SiteHWMs.length}):($scope.SiteHWMs=thisSiteHWMs,$scope.hwmCount={total:$scope.SiteHWMs.length})}),$scope.showHWMModal=function(HWMclicked){{var hwmFileTypes=allFileTypes.filter(function(hft){return"Photo"===hft.filetype||"Historic Citation"===hft.filetype||"Field Sheets"===hft.filetype||"Level Notes"===hft.filetype||"Other"===hft.filetype||"Link"===hft.filetype||"Sketch"===hft.filetype}),passAllLists=[allHWMTypes,allHWMQualities,allHorDatums,allHorCollMethods,allVertDatums,allVertColMethods,allMarkers,allEvents,hwmFileTypes];$scope.SiteHWMs.indexOf(HWMclicked)}$rootScope.stateIsLoading.showLoading=!0;var modalInstance=$uibModal.open({templateUrl:"HWMmodal.html",controller:"hwmModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{allDropdowns:function(){return passAllLists},thisHWM:function(){return 0!==HWMclicked?HWMclicked:"empty"},allSiteHWMs:function(){return $scope.SiteHWMs},hwmApproval:function(){return 0!==HWMclicked&&void 0!==HWMclicked.approval_id&&HWMclicked.approval_id>0?HWM.getHWMApproval({id:HWMclicked.hwm_id}).$promise:void 0},hwmSite:function(){return thisSite},agencyList:function(){return allAgencies},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise}}});modalInstance.result.then(function(createdHWM){if("created"==createdHWM[1]&&($scope.SiteHWMs.push(createdHWM[0]),HWM_Service.setAllSiteHWMs($scope.SiteHWMs),$scope.hwmCount.total=$scope.SiteHWMs.length),void 0===createdHWM[1]){var indexClicked=$scope.SiteHWMs.indexOf(HWMclicked);$scope.SiteHWMs[indexClicked]=createdHWM,HWM_Service.setAllSiteHWMs($scope.SiteHWMs)}if("deleted"==createdHWM[1]){var indexClicked1=$scope.SiteHWMs.indexOf(HWMclicked);$scope.SiteHWMs.splice(indexClicked1,1),$scope.hwmCount.total=$scope.SiteHWMs.length,HWM_Service.setAllSiteHWMs($scope.SiteHWMs)}})})}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("historicHWMCtrl",["$scope","$rootScope","$cookies","$location","$http","$filter","$uibModal","SITE","HWM","OBJECTIVE_POINT","GEOCODE","thisEvent","HDatums","HCollectMeths","States","Counties","OPTypes","VDatums","HTypes","HWMQuals",function($scope,$rootScope,$cookies,$location,$http,$filter,$uibModal,SITE,HWM,OBJECTIVE_POINT,GEOCODE,thisEvent,HDatums,HCollectMeths,States,Counties,OPTypes,VDatums,HTypes,HWMQuals){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$scope.showLoading=!1,$scope.dynamic=0,$scope.max=0,$scope.hotInstance,$scope.columnWidths=[140,76,84,220,220,100,150,120,120,180,120,140,140,120,140,140,140,120],$scope.Changes=[],$scope.invalids=[],$scope.event=thisEvent,$scope.hDatumList=HDatums,$scope.hDatumArray=[],$scope.hCollectList=HCollectMeths,$scope.hcollectArray=[],$scope.stateList=States,$scope.stateArray=[],$scope.countyList=Counties,$scope.countyArray=[],$scope.opTypeList=OPTypes,$scope.opTypeArray=[],$scope.vDatumList=VDatums,$scope.vDatumArray=[],$scope.hwmTypeList=HTypes,$scope.hwmTypeArray=[],$scope.hwmEnvirList=["Coastal","Riverine"],$scope.hwmQualityList=HWMQuals,$scope.hwmQualityArray=[],$scope.historicHWMs=[],angular.forEach($scope.hDatumList,function(l){$scope.hDatumArray.push(l.datum_name)}),angular.forEach($scope.hCollectList,function(l){$scope.hcollectArray.push(l.hcollect_method)}),angular.forEach($scope.stateList,function(l){$scope.stateArray.push(l.state_name)}),angular.forEach($scope.countyList,function(l){$scope.countyArray.push(l.county_name)}),angular.forEach($scope.opTypeList,function(l){$scope.opTypeArray.push(l.op_type)}),angular.forEach($scope.vDatumList,function(l){$scope.vDatumArray.push(l.datum_abbreviation)}),angular.forEach($scope.hwmTypeList,function(l){$scope.hwmTypeArray.push(l.hwm_type)}),angular.forEach($scope.hwmQualityList,function(l){$scope.hwmQualityArray.push(l.hwm_quality)}),$scope.getStateCo=function(c,r){var rowValues=$scope.hotInstance.getDataAtRow(r);if(""!==rowValues[1]&&null!==rowValues[1]&&""!==rowValues[2]&&null!==rowValues[2])$rootScope.stateIsLoading.showLoading=!0,$http.defaults.headers.common.Accept="application/json",delete $http.defaults.headers.common.Authorization,GEOCODE.getAddressParts({Longitude:rowValues[2],Latitude:rowValues[1]},function(response){if(response.result.geographies.Counties.length>0){var stateFIPS=response.result.geographies.Counties[0].STATE,countyName=response.result.geographies.Counties[0].NAME,thisStateID=$scope.countyList.filter(function(c){return c.state_fip==stateFIPS})[0].state_id,thisState=$scope.stateList.filter(function(s){return s.state_id==thisStateID})[0];if(void 0!==thisState){$scope.hotInstance.setDataAtCell(r,7,thisState.state_name);var stateCountyList=$scope.countyList.filter(function(c){return c.state_id==thisState.state_id});$scope.countyArray=[],angular.forEach(stateCountyList,function(l){$scope.countyArray.push(l.county_name)}),$scope.hotInstance.setCellMeta(r,8,"source",$scope.countyArray),$scope.hotInstance.setDataAtCell(r,8,countyName),$rootScope.stateIsLoading.showLoading=!1}else $rootScope.stateIsLoading.showLoading=!1,toastr.error("The Latitude/Longitude did not return a recognized state. Please choose one from the dropdown.")}else $rootScope.stateIsLoading.showLoading=!1,toastr.error("Error getting address location.")},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error: "+errorResponse.statusText)});else{$rootScope.stateIsLoading.showLoading=!1;{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please provide a Latitude and Longitude before clicking Get State/County</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}}},$scope.UpdateCounties=function(theChange){var thisState=$scope.stateList.filter(function(s){return s.state_name==theChange[3]})[0],stateCountyList=$scope.countyList.filter(function(c){return c.state_id==thisState.state_id});$scope.countyArray=[],angular.forEach(stateCountyList,function(l){$scope.countyArray.push(l.county_name)}),$scope.hotInstance.setCellMeta(theChange[0],8,"source",$scope.countyArray)};var requiredModal=function(){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>This field is required.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',backdrop:"static",keyboard:!1,controller:function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}},size:"sm"})};$scope.latValidator=function(value,callback){if(0>value||isNaN(value)){{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Latitude must be greater than 0.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}callback(!1)}else value?callback(!0):(requiredModal(),callback(!1))},$scope.longValidator=function(value,callback){if(value>0||isNaN(value)){{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Longitude must be less than 0.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}callback(!1)}else value?callback(!0):(requiredModal(),callback(!1))};var colorRenderer=function(instance,td,row,col,prop,value,cellProperties){var $button=$('<button type="button" class="btn bnt-primary"></button>');return $button.html("Get State/County"),$(td).empty().append($button),td};$scope.requiredValidator=function(value,callback){value?callback(!0):(requiredModal(),callback(!1))},$scope.reset=function(){var resetModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title"></h3></div><div class="modal-body"><p>Are you sure you want to clear the table?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss()}}],size:"sm"});resetModal.result.then(function(){$scope.historicHWMs=[],$scope.invalids=[]})},$scope.tableSettings={colHeaders:!0,rowHeaders:!0,contextMenu:["row_above","row_below","remove_row"],minSpareRows:3,afterInit:function(){$scope.hotInstance=this},manualColumnResize:!0,manualRowResize:!0,wordWrap:!1,viewportColumnRenderingOffsetNumber:1,colWidths:$scope.columnWidths,cells:function(row,col,prop){if(6==col){var cellprops={};return cellprops.renderer=colorRenderer,cellprops}},onBeforeChange:function(data){for(var i=0;i<data.length;i++)"state"==data[i][1]&&data[i][3]!==data[i][2]&&$scope.UpdateCounties(data[i])},onAfterChange:function(change,source){if("loadData"!=source)for(var i=0;i<change.length;i++)change[i][2]!==change[i][3]&&$scope.Changes.push(change[i])},afterOnCellMouseDown:function(event,coords,td){6==coords.col&&$scope.getStateCo(coords.col,coords.row)},onAfterValidate:function(isValid,value,row,prop,souce){if(isValid||$scope.invalids.push({isValid:isValid,row:row,prop:prop}),isValid){for(var vIndex=-1,vI=0;vI<$scope.invalids.length;vI++)if($scope.invalids[vI].row==row&&$scope.invalids[vI].prop==prop){vIndex=vI;break}vIndex>-1&&$scope.invalids.splice(vIndex,1)}},rowHeights:50}}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("bulkHWMCtrl",["$scope","$state","$rootScope","$cookies","$http","$q","$filter","$uibModal","SITE","HWM","MEMBER","FILE","INST_COLL_CONDITION","PEAK","SOURCE","SERVER_URL","eventList","stateList","countyList","hwmTypeList","markerList","hwmQualList","horizDatumList","horCollMethList","vertDatumList","vertCollMethList","fileTypesList","agenciesList",function($scope,$state,$rootScope,$cookies,$http,$q,$filter,$uibModal,SITE,HWM,MEMBER,FILE,INST_COLL_CONDITION,PEAK,SOURCE,SERVER_URL,eventList,stateList,countyList,hwmTypeList,markerList,hwmQualList,horizDatumList,horCollMethList,vertDatumList,vertCollMethList,fileTypesList,agenciesList){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$scope.showTips=!0,$scope.status={hwmOpen:!0},$scope.serverURL=SERVER_URL,$scope.hwmTypes=hwmTypeList,$scope.markers=markerList,$scope.hwmQuals=hwmQualList,$scope.horDatums=horizDatumList,$scope.horCollMeths=horCollMethList,$scope.vertDatums=vertDatumList,$scope.vertCollMeths=vertCollMethList,$scope.states=stateList,$scope.counties=countyList,$scope.showLoading=!1,$scope.max=0,$scope.dynamic=0,$scope.showProgressBar=!1,$scope.hotInstance,$scope.columnWidths=[180,150,180,180,150,170,180,100,200,140,150,180,220,100,130,120,130,160,190,160,200,200,120],$scope.siteNoArrowClicked=!1,$scope.uploadHWMs=[],$scope.postedHWMs=[],$scope.invalids=[],$scope.events=eventList,$scope.notValid=!0,$scope.hwmTypeArray=[],angular.forEach(hwmTypeList,function(ht){$scope.hwmTypeArray.push(ht.hwm_type)}),$scope.envirArray=["Coastal","Riverine"],$scope.markerArray=[],angular.forEach(markerList,function(m){$scope.markerArray.push(m.marker1)}),$scope.qualArray=[],angular.forEach(hwmQualList,function(hq){$scope.qualArray.push(hq.hwm_quality)}),$scope.bankArray=["Left","Right","N/A"],$scope.hdatumArray=[],angular.forEach(horizDatumList,function(hd){$scope.hdatumArray.push(hd.datum_name)}),$scope.hcollMethArray=[],angular.forEach(horCollMethList,function(hcm){$scope.hcollMethArray.push(hcm.hcollect_method)}),$scope.vdatumArray=[],angular.forEach(vertDatumList,function(vd){$scope.vdatumArray.push(vd.datum_abbreviation)}),$scope.vcollMethArray=[],angular.forEach(vertCollMethList,function(vcm){$scope.vcollMethArray.push(vcm.vcollect_method)}),$scope.tranqArray=["Yes","No"],$scope.chosenEvent=0,$scope.chosenEventName="",$scope.delIndex=-1,$scope.sitePeakarray=[],$scope.addApprovalFile=function(){var approvedFILEmodal=$uibModal.open({templateUrl:"BulkApprovalFILE_modal.html",controller:["$scope","$cookies","$uibModal","$uibModalInstance","fileTypeList","agencyList","thisMember",function($scope,$cookies,$uibModal,$uibModalInstance,fileTypeList,agencyList,thisMember){$scope.hwmFileTypes=fileTypeList.filter(function(hft){return"Photo"===hft.filetype||"Historic Citation"===hft.filetype||"Field Sheets"===hft.filetype||"Level Notes"===hft.filetype||"Other"===hft.filetype||"Link"===hft.filetype||"Sketch"===hft.filetype}),$scope.aFile={},$scope.aFile.filetype_id=7,$scope.aFile.description="PDF of Approval Memo",$scope.aSource={},$scope.agencies=agencyList,$scope.approval_type=7,$scope.updateFileType=function(){
$scope.aFile.filetype_id=Number($scope.approval_type),$scope.aFile.description="7"==$scope.approval_type?"PDF of Approval Memo":"Report Link"},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=thisMember,$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname,$scope.addFile=function(valid){if(valid)if($scope.aFile.name||$scope.aFile.File){var fileParts=[$scope.aFile,$scope.aSource];$uibModalInstance.close(fileParts)}else{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>You must upload a File for Approval Memo or a File URL for Report Link.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}},$scope.cancelFile=function(){$uibModalInstance.dismiss()}}],size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{fileTypeList:function(){return fileTypesList},agencyList:function(){return agenciesList},thisMember:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.query({id:$cookies.get("mID")}).$promise}}});approvedFILEmodal.result.then(function(createdFile){$scope.approvalFile=createdFile[0],$scope.approvalSource=createdFile[1]})};var getFindSiteModal=function(r,c,hwmParts){angular.element("#loadingDiv").removeClass("noShow");var dataAtRow=$scope.hotInstance.getDataAtRow(r);if(setTimeout(function(){$scope.hotInstance.deselectCell()},100),""!==dataAtRow[9]&&""!==dataAtRow[10]&&null!==dataAtRow[9]&&null!==dataAtRow[10]){angular.element("#loadingDiv").addClass("noShow");var siteModal=$uibModal.open({templateUrl:"associateSitemodal.html",backdrop:"static",keyboard:!1,resolve:{nearBySites:function(){return SITE.getProximitySites({Latitude:dataAtRow[9],Longitude:dataAtRow[10],Buffer:5e-4}).$promise},HWMparts:function(){return hwmParts},siteNoAlreadyThere:function(){return dataAtRow[22]},hdatums:function(){return $scope.horDatums},hcolMeths:function(){return $scope.horCollMeths},vdatums:function(){return $scope.vertDatums},vcolMeths:function(){return $scope.vertCollMeths},states:function(){return $scope.states},counties:function(){return $scope.counties}},controller:"hwmSiteModalCtrl",size:"sm"});siteModal.result.then(function(thisSite){angular.element("#loadingDiv").addClass("noShow"),void 0!==thisSite&&$scope.hotInstance.setDataAtCell(r,c,thisSite.site_no)})}else{angular.element("#loadingDiv").addClass("noShow");{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate this row\'s latitude and longitude before finding a site to associate.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}}};$scope.requiredValidator=function(value,callback){if($scope.siteNoArrowClicked)$scope.siteNoArrowClicked=!1,callback(!0);else{var row=this.row,col=this.col,dataAtRow=$scope.hotInstance.getDataAtRow(row),otherDataInRow=!1;if(angular.forEach(dataAtRow,function(d,index){null!==d&&""!==d&&index!==col&&(otherDataInRow=!0)}),!value&&otherDataInRow){var whichOne=$scope.hotInstance.getColHeader(col);toastr.options.timeOut="6000",toastr.options.closeButton=!0,toastr.error(whichOne+" is a required field."),callback(!1)}else callback(!0)}},$scope.latValidator=function(value,callback){var row=this.row,col=this.col,dataAtRow=$scope.hotInstance.getDataAtRow(row),otherDataInRow=!1;if(angular.forEach(dataAtRow,function(d,index){null!==d&&""!==d&&index!==col&&(otherDataInRow=!0)}),(22>value||value>55||isNaN(value))&&otherDataInRow)setTimeout(function(){$scope.hotInstance.deselectCell()},100),toastr.options.timeOut="6000",toastr.options.closeButton=!0,toastr.error("Latitude must be between 22.0 and 55.0 (dec deg)."),callback(!1);else if(!value&&otherDataInRow){var whichOne=$scope.hotInstance.getColHeader(col);toastr.options.timeOut="6000",toastr.options.closeButton=!0,toastr.error(whichOne+" is a required field."),callback(!1)}else callback(!0)},$scope.longValidator=function(value,callback){var row=this.row,col=this.col,dataAtRow=$scope.hotInstance.getDataAtRow(row),otherDataInRow=!1;if(angular.forEach(dataAtRow,function(d,index){null!==d&&""!==d&&index!==col&&(otherDataInRow=!0)}),(-130>value||value>-55||isNaN(value))&&otherDataInRow)setTimeout(function(){$scope.hotInstance.deselectCell()},100),toastr.options.timeOut="6000",toastr.options.closeButton=!0,toastr.error("Longitude must be between -130.0 and -55.0 (dec deg)."),callback(!1);else if(!value&&otherDataInRow){var whichOne=$scope.hotInstance.getColHeader(col);toastr.options.timeOut="6000",toastr.options.closeButton=!0,toastr.error(whichOne+" is a required field."),callback(!1)}else callback(!0)},$scope.numericValidator=function(value,callback){var whichOne=$scope.hotInstance.getColHeader(this.col);if(""!==value&&null!==value&&isNaN(Number(value)))setTimeout(function(){$scope.hotInstance.deselectCell()},100),toastr.options.timeOut="6000",toastr.options.closeButton=!0,toastr.error(whichOne+" must be an numeric value (ex: 0.03)."),callback(!1);else if("HWM Uncertainty (ft)"==whichOne&&""!==value&&null!==value){var hwmQualValue=$scope.hotInstance.getDataAtCell(this.row,6);if(null!==hwmQualValue&&""!==hwmQualValue){var appropriateHWMQual="";appropriateHWMQual=value>.4?"VP: > 0.40 ft":.05>value?"Excellent: +/- 0.05 ft":$scope.hwmQuals.filter(function(h){return h.min_range<=value&&h.max_range>=value})[0].hwm_quality,appropriateHWMQual!==hwmQualValue?(toastr.options.timeOut="6000",toastr.options.closeButton=!0,toastr.error(whichOne+" does not have a matching HWM Quality for row "+Number(this.row+1)),callback(!1)):callback(!0)}else callback(!0)}else callback(!0)},$scope.matchingDDValue=function(value,callback){var row=this.row,col=this.col,dataAtRow=$scope.hotInstance.getDataAtRow(row),otherDataInRow=!1;if(angular.forEach(dataAtRow,function(d,index){null!==d&&""!==d&&index!==col&&(otherDataInRow=!0)}),""!==value&&null!==value&&otherDataInRow){var prop=this.prop,hasError=!1;switch(prop){case"hwm_type_id":hwmTypeList.map(function(hwT){return hwT.hwm_type}).indexOf(value)<0&&(hasError=!0);break;case"hwm_environment":$scope.envirArray.map(function(hwE){return hwE}).indexOf(value)<0&&(hasError=!0);break;case"hwm_quality_id":hwmQualList.map(function(hwQ){return hwQ.hwm_quality}).indexOf(value)<0&&(hasError=!0);break;case"hdatum_id":horizDatumList.map(function(hD){return hD.datum_name}).indexOf(value)<0&&(hasError=!0);break;case"hcollect_method_id":horCollMethList.map(function(hC){return hC.hcollect_method}).indexOf(value)<0&&(hasError=!0)}if(hasError)callback(!1);else if("hwm_quality_id"==prop){var uncertValue=$scope.hotInstance.getDataAtCell(row,5);if(null!==uncertValue&&""!==uncertValue){var appropriatequal="";appropriatequal=uncertValue>.4?"VP: > 0.40 ft":.05>uncertValue?"Excellent: +/- 0.05 ft":$scope.hwmQuals.filter(function(h){return h.min_range<=uncertValue&&h.max_range>=uncertValue})[0].hwm_quality,appropriatequal!==value?(toastr.options.timeOut="6000",toastr.options.closeButton=!0,toastr.error("HWM Quality does not have a matching HWM uncertainty range value for row "+Number(row+1)),callback(!1)):callback(!0)}else callback(!0)}else callback(!0)}else if(!value&&otherDataInRow){var whichOne=$scope.hotInstance.getColHeader(col);toastr.options.timeOut="6000",toastr.options.closeButton=!0,toastr.error(whichOne+" is a required field."),callback(!1)}else callback(!0)};var removeThisUploadHWM=function(successfulHWM){for(var spliceIndex=-1,bank=successfulHWM.bank,hcmName=horCollMethList.filter(function(hcm){return hcm.hcollect_method_id==successfulHWM.hcollect_method_id})[0].hcollect_method,hdName=horizDatumList.filter(function(hd){return hd.datum_id==successfulHWM.hdatum_id})[0].datum_name,hwmQName=hwmQualList.filter(function(hq){return hq.hwm_quality_id==successfulHWM.hwm_quality_id})[0].hwm_quality,hwmTName=hwmTypeList.filter(function(ht){return ht.hwm_type_id==successfulHWM.hwm_type_id})[0].hwm_type,mark=void 0!==successfulHWM.marker_id?markerList.filter(function(m){return m.marker_id==successfulHWM.marker_id})[0].marker1:void 0,vcmName=void 0!==successfulHWM.vcollect_method_id?vertCollMethList.filter(function(vcm){return vcm.vcollect_method_id==successfulHWM.vcollect_method_id})[0].vcollect_method:void 0,vdName=void 0!==successfulHWM.vdatum_id?vertDatumList.filter(function(vd){return vd.datum_id==successfulHWM.vdatum_id})[0].datum_abbreviation:void 0,hag=void 0!==successfulHWM.height_above_gnd?Number(successfulHWM.height_above_gnd):void 0,elFt=void 0!==successfulHWM.elev_ft?Number(successfulHWM.elev_ft):void 0,unc=void 0!==successfulHWM.uncertainty?Number(successfulHWM.uncertainty):void 0,hwmUnc=void 0!==successfulHWM.hwm_uncertainty?Number(successfulHWM.hwm_uncertainty):void 0,hwmI=0;hwmI<$scope.uploadHWMs.length;hwmI++){if(void 0!==$scope.uploadHWMs[hwmI].site_no){var upload_hwmUnc=""!==$scope.uploadHWMs[hwmI].hwm_uncertainty&&void 0!==$scope.uploadHWMs[hwmI].hwm_uncertainty?Number($scope.uploadHWMs[hwmI].hwm_uncertainty):void 0,upload_mark=""!==$scope.uploadHWMs[hwmI].marker_id&&void 0!==$scope.uploadHWMs[hwmI].marker_id?$scope.uploadHWMs[hwmI].marker_id:void 0,upload_unc=""!==$scope.uploadHWMs[hwmI].uncertainty&&void 0!==$scope.uploadHWMs[hwmI].uncertainty?Number($scope.uploadHWMs[hwmI].uncertainty):void 0,upload_hag=""!==$scope.uploadHWMs[hwmI].height_above_gnd&&void 0!==$scope.uploadHWMs[hwmI].height_above_gnd?Number($scope.uploadHWMs[hwmI].height_above_gnd):void 0,upload_elFt=""!==$scope.uploadHWMs[hwmI].elev_ft&&void 0!==$scope.uploadHWMs[hwmI].elev_ft?Number($scope.uploadHWMs[hwmI].elev_ft):void 0,upload_vcollMeth=""!==$scope.uploadHWMs[hwmI].vcollect_method_id&&void 0!==$scope.uploadHWMs[hwmI].vcollect_method_id?$scope.uploadHWMs[hwmI].vcollect_method_id:void 0,upload_vdat=""!==$scope.uploadHWMs[hwmI].vdatum_id&&void 0!==$scope.uploadHWMs[hwmI].vdatum_id?$scope.uploadHWMs[hwmI].vdatum_id:void 0;$scope.uploadHWMs[hwmI].site_no==successfulHWM.site_no&&$scope.uploadHWMs[hwmI].waterbody==successfulHWM.waterbody&&upload_hwmUnc==hwmUnc&&$scope.uploadHWMs[hwmI].bank==bank&&$scope.uploadHWMs[hwmI].hwm_locationdescription==successfulHWM.hwm_locationdescription&&Number($scope.uploadHWMs[hwmI].latitude_dd)==successfulHWM.latitude_dd&&Number($scope.uploadHWMs[hwmI].longitude_dd)==successfulHWM.longitude_dd&&upload_hag==hag&&$scope.uploadHWMs[hwmI].hcollect_method_id==hcmName&&$scope.uploadHWMs[hwmI].hdatum_id==hdName&&$scope.uploadHWMs[hwmI].hwm_quality_id==hwmQName&&$scope.uploadHWMs[hwmI].hwm_type_id==hwmTName&&upload_mark==mark&&upload_vcollMeth==vcmName&&upload_vdat==vdName&&upload_elFt==elFt&&upload_unc==unc&&$scope.uploadHWMs[hwmI].hwm_notes==successfulHWM.hwm_notes&&(spliceIndex=hwmI)}spliceIndex>=0&&($scope.uploadHWMs.splice(spliceIndex,1),hwmI=$scope.uploadHWMs.length)}$scope.dynamic==$scope.max&&($scope.showProgressBar=!1),$scope.showLoading="false"};$scope.validateTable=function(){$scope.showLoading=!0,angular.element("#loadingDiv").removeClass("noShow");var haveData=$scope.hotInstance.getDataAtCell(0,2);if(null!==haveData)$scope.hotInstance.validateCells(function(valid){if(valid){{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Valid</h3></div><div class="modal-body"><p>Validation successful!</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$rootScope","$uibModalInstance",function($scope,$rootScope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()},$scope.showLoading=!1,angular.element("#loadingDiv").addClass("noShow")}],size:"sm"})}$scope.notValid=!1}else{$scope.notValid=!0;{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Invalid!</h3></div><div class="modal-body"><p>The table is not valid. Please correct red cells and try again.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$rootScope","$uibModalInstance",function($scope,$rootScope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()},$scope.showLoading=!1,angular.element("#loadingDiv").addClass("noShow")}],size:"sm"})}angular.element("#loadingDiv").addClass("noShow")}});else{angular.element("#loadingDiv").addClass("noShow"),$scope.showLoading=!1;{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Not enough data in the table to validate.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}}},$scope.save=function(){$scope.dynamic=0,$scope.chosenEventName=$scope.events.filter(function(e){return e.event_id==$scope.chosenEvent})[0].event_name;for(var pastedHWMs=angular.copy($scope.uploadHWMs),i=pastedHWMs.length;i--;)(void 0===pastedHWMs[i].site_no||null===pastedHWMs[i].site_no||""===pastedHWMs[i].site_no)&&pastedHWMs.splice(i,1);$scope.max=pastedHWMs.length,$scope.showLoading="true",$scope.notValid=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.showProgressBar=!0,angular.forEach(pastedHWMs,function(hwm,index){SITE.getSearchedSite({bySiteNo:hwm.site_no}).$promise.then(function(response){SITE.getSitePeaks({id:response.site_id},function(peakResponse){for(var p=0;p<peakResponse.length;p++)peakResponse[p].event_name==$scope.chosenEventName&&$scope.sitePeakarray.push([response.site_id,peakResponse[p].peak_summary_id]);hwm.site_id=response.site_id,hwm.event_id=$scope.chosenEvent,hwm.flag_member_id=$scope.$parent.userID,hwm.hcollect_method_id=horCollMethList.filter(function(hcm){return hcm.hcollect_method==hwm.hcollect_method_id})[0].hcollect_method_id,hwm.hdatum_id=horizDatumList.filter(function(hd){return hd.datum_name==hwm.hdatum_id})[0].datum_id,hwm.hwm_quality_id=hwmQualList.filter(function(hq){return hq.hwm_quality==hwm.hwm_quality_id})[0].hwm_quality_id,hwm.hwm_type_id=hwmTypeList.filter(function(ht){return ht.hwm_type==hwm.hwm_type_id})[0].hwm_type_id,hwm.marker_id=""!==hwm.marker_id&&void 0!==hwm.marker_id?markerList.filter(function(m){return m.marker1==hwm.marker_id})[0].marker_id:void 0,""!==hwm.stillwater&&void 0!==hwm.stillwater&&(hwm.stillwater="No"==hwm.stillwater?"0":"1"),hwm.vcollect_method_id=""!==hwm.vcollect_method_id&&void 0!==hwm.vcollect_method_id?vertCollMethList.filter(function(vcm){return vcm.vcollect_method==hwm.vcollect_method_id})[0].vcollect_method_id:void 0,hwm.vdatum_id=""!==hwm.vdatum_id&&void 0!==hwm.vdatum_id?vertDatumList.filter(function(vd){return vd.datum_abbreviation==hwm.vdatum_id})[0].datum_id:void 0,""!==hwm.survey_date&&void 0!==hwm.survey_date&&(hwm.survey_member_id=$scope.$parent.userID);var siteNo=hwm.site_no;delete hwm.site_no,HWM.save(hwm).$promise.then(function(hwmResponse){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM.approveHWM({id:hwmResponse.hwm_id}).$promise.then(function(approvalResponse){hwmResponse.approval_id=approvalResponse.approval_id,hwmResponse.site_no=siteNo,hwmResponse.stillwater=void 0!==hwmResponse.stillwater?hwmResponse.stillwater>0?"Yes":"No":"";var sitePeakId=$scope.sitePeakarray.filter(function(sp){return sp[0]==hwmResponse.site_id})[0];void 0!==sitePeakId&&(hwmResponse.PeakSummary=sitePeakId);var theSource={source_name:$scope.approvalSource.FULLname,agency_id:$scope.approvalSource.agency_id};SOURCE.save(theSource).$promise.then(function(sourceResponse){if(8!==$scope.approvalFile.filetype_id){var fileParts={FileEntity:{filetype_id:$scope.approvalFile.filetype_id,name:$scope.approvalFile.File.name,file_date:$scope.approvalFile.file_date,photo_date:$scope.approvalFile.photo_date,description:$scope.approvalFile.description,site_id:hwmResponse.site_id,source_id:sourceResponse.source_id,photo_direction:$scope.approvalFile.photo_direction,latitude_dd:$scope.approvalFile.latitude_dd,longitude_dd:$scope.approvalFile.longitude_dd,hwm_id:hwmResponse.hwm_id},File:$scope.approvalFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){hwmResponse.HWMFiles=[],hwmResponse.HWMFiles.push(fresponse),$scope.postedHWMs.map(function(p){return p.hwm_id}).indexOf(hwmResponse.hwm_id)<0?(toastr.success("HWM uploaded: hwm_id:"+hwmResponse.hwm_id),$scope.postedHWMs.push(hwmResponse)):toastr.error("HWM "+hwmResponse.hwm_id+" is already in the successfully uploaded list below."),$scope.dynamic++,removeThisUploadHWM(hwmResponse)},function(errorResponse){$scope.showProgressBar=!1,toastr.error("Error uploading file: "+errorResponse.statusText)})}else $scope.approvalFile.source_id=sourceResponse.source_id,$scope.approvalFile.site_id=hwmResponse.site_id,$scope.approvalFile.hwm_id=hwmResponse.hwm_id,$scope.approvalFile.path="<link>",FILE.save($scope.approvalFile).$promise.then(function(fresponse){hwmResponse.HWMFiles=[],hwmResponse.HWMFiles.push(fresponse),$scope.postedHWMs.map(function(p){return p.hwm_id}).indexOf(hwmResponse.hwm_id)<0?(toastr.success("HWM uploaded: hwm_id:"+hwmResponse.hwm_id),$scope.postedHWMs.push(hwmResponse)):toastr.error("HWM "+hwmResponse.hwm_id+" is already in the successfully uploaded list below."),$scope.dynamic++,removeThisUploadHWM(hwmResponse)},function(errorResponse){$scope.HWMfileIsUploading=!1,$scope.showProgressBar=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(sourceError){$scope.showLoading="false",toastr.options.timeOut="0",toastr.options.closeButton=!0,$scope.showProgressBar=!1,toastr.error("Error uploading approval File Source: "+sourceError.statusText)})},function(approveError){$scope.showLoading="false",toastr.options.timeOut="0",toastr.options.closeButton=!0,$scope.showProgressBar=!1,toastr.error("Error approving hwm: "+approveError.statusText)})},function(hwmSaveError){$scope.showLoading="false",toastr.options.timeOut="0",toastr.options.closeButton=!0,$scope.showProgressBar=!1,toastr.error("Error uploading hwm: "+hwmSaveError.statusText)})},function(getSitePeakError){$scope.showProgressBar=!1,toastr.error("Something went wrong getting sitePeak")})},function(getHwmSiteError){$scope.showLoading="false",toastr.options.timeOut="0",toastr.options.closeButton=!0,$scope.showProgressBar=!1,toastr.error("Error getting site information for "+hwm.site_no+". Site does not exist.")})})},$scope.clearTable=function(){var resetModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title"></h3></div><div class="modal-body"><p>Warning! This will remove all hwms from the table.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss()}}],size:"sm"});resetModal.result.then(function(){$scope.uploadHWMs=[],$scope.invalids=[],$scope.notValid=!0})},$scope.sort_by=function(newSortingOrder){$scope.sortingOrder==newSortingOrder&&($scope.reverse=!$scope.reverse),$scope.sortingOrder=newSortingOrder,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+newSortingOrder+" i").removeClass().addClass($scope.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")},$scope.goToSiteDash=function(siteID){var warningModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Warning!</h3></div><div class="modal-body"><p>You are about to leave the Bulk HWM Uploader.<br />In doing so, you will no longer be able to see the list of successfully uploaded HWMs.</p><p>Are you sure you want to leave this page?</p></div><div class="modal-footer"><button class="btn btn-warning" ng-enter="ok()" ng-click="ok()">Yes</button><button class="btn btn-primary" ng-enter="cancel()" ng-click="cancel()">Cancel</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.cancel=function(){$uibModalInstance.dismiss()},$scope.ok=function(){$uibModalInstance.close(siteID)}}],size:"sm"});warningModal.result.then(function(siteId){$state.go("site.dashboard",{id:siteId})})},$scope.DeleteHWM=function(hwm){$scope.delIndex=$scope.postedHWMs.indexOf(hwm);var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return hwm},what:function(){return"HWM"}}});DeleteModalInstance.result.then(function(hwmToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM["delete"]({id:hwmToRemove.hwm_id},hwmToRemove).$promise.then(function(){$scope.HWMFiles=[],toastr.success("HWM Removed"),$scope.postedHWMs.splice($scope.delIndex,1),$scope.delIndex=-1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.OpenHWMEdit=function(HWMclicked){var passAllLists=[hwmTypeList,hwmQualList,horizDatumList,horCollMethList,vertDatumList,vertCollMethList,markerList,eventList],indexClicked=$scope.postedHWMs.indexOf(HWMclicked),siteNo=HWMclicked.site_no;$rootScope.stateIsLoading.showLoading=!0;var hwmEditInstance=$uibModal.open({templateUrl:"HWM_Modal.html",size:"sm",backdrop:"static",keyboard:!1,resolve:{allDropdowns:function(){return passAllLists},thisHWM:function(){return HWMclicked},siteHMWs:function(){return HWM.getEventSiteHWMs({siteId:HWMclicked.site_id,Event:HWMclicked.event_id}).$promise},hwmSite:function(){return SITE.query({id:HWMclicked.site_id}).$promise},agencyList:function(){return agenciesList},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise},fileTypes:function(){return fileTypesList}},controller:"hwmEditModalCtrl"});hwmEditInstance.result.then(function(hwmUpdatedANDFileCnt){var h=hwmUpdatedANDFileCnt[0],files=hwmUpdatedANDFileCnt[1];h.site_no=siteNo,h.HWMFiles=files,h.stillwater=void 0!==h.stillwater?h.stillwater>0?"Yes":"No":"",$scope.postedHWMs[indexClicked]=h})},$scope.OpenPeakEdit=function(peakId,siteId,eventId){$rootScope.stateIsLoading.showLoading=!0;var peakEditInstance=$uibModal.open({templateUrl:"PeakEdit_Modal.html",size:"sm",backdrop:"static",keyboard:!1,resolve:{allCollectConditions:function(){return INST_COLL_CONDITION.getAll().$promise},allVertDatums:function(){return vertDatumList},thisPeak:function(){return PEAK.query({id:peakId}).$promise},thisPeakDFs:function(){return PEAK.getPeakSummaryDFs({id:peakId}).$promise},peakSite:function(){return SITE.query({id:siteId}).$promise},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise},allEventHWMs:function(){return HWM.getFilteredHWMs({Event:$scope.chosenEvent,EventStatus:0}).$promise},allSiteFiles:function(){return SITE.getSiteFiles({id:siteId})},allSiteSensors:function(){return SITE.getSiteSensors({id:siteId}).$promise}},controller:"peakModalCtrl"});peakEditInstance.result.then(function(updated){})},$scope.OpenPeakCreate=function(siteId,eventId){$rootScope.stateIsLoading.showLoading=!0;var peakCreateInstance=$uibModal.open({templateUrl:"PeakEdit_Modal.html",size:"sm",backdrop:"static",keyboard:!1,resolve:{allCollectConditions:function(){return INST_COLL_CONDITION.getAll().$promise},allVertDatums:function(){return vertDatumList},thisPeak:function(){return"empty"},thisPeakDFs:function(){return"empty"},peakSite:function(){return SITE.query({id:siteId}).$promise},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise},allEventHWMs:function(){return HWM.getFilteredHWMs({Event:$scope.chosenEvent,EventStatus:0}).$promise},allSiteFiles:function(){return SITE.getSiteFiles({id:siteId})},allSiteSensors:function(){return SITE.getSiteSensors({id:siteId}).$promise}},controller:"peakModalCtrl"});peakCreateInstance.result.then(function(createdPk){angular.forEach($scope.postedHWMs,function(pHWM){pHWM.site_id==siteId&&(pHWM.PeakSummary=[siteId,createdPk[0].peak_summary_id])})})},$scope.tableSettings={colHeaders:['<span title="Required">Waterbody *</span>','<span title="Identifying Label. If left blank, defaults to &quot;no_label&quot;">HWM Label</span>','<span title="Required">HWM Type *</span>',"Marker",'<span title="Required">HWM Environment *</span>',"HWM Uncertainty (ft)",'<span title="Required">HWM Quality *</span>',"Bank","Loc. Description",'<span title="Required">HWM Latitude *</span>','<span title="Required">HWM Longitude *</span>','<span title="Required">Horizontal Datum *</span>','<span title="Required">Horizontal Collect Method *</span>','<span title="Height above ground">HAG (ft)</span>','<span title="Required">Flag/Found Date *</span>',"Survey Date","Surveyed Elev (ft)","Vertical Datum","Vertical Collect Method","Survey Uncertainty (ft)","Notes","Tranquil/Stillwater",'<span title="Site Number, Required"> Site No *</span>'],rowHeaders:!0,minSpareRows:10,maxRows:10,afterInit:function(){$scope.hotInstance=this},columnSorting:!1,manualColumnResize:!0,manualRowResize:!0,wordWrap:!1,preventOverflow:"horizontal",viewportColumnRenderingOffsetNumber:1,colWidths:$scope.columnWidths,afterOnCellMouseDown:function(event,coords,td){if(22===coords.col&&"htAutocompleteArrow"==event.realTarget.className){$scope.siteNoArrowClicked=!0;var passHWMvals=[];passHWMvals.push($scope.hotInstance.getDataAtCell(coords.row,0)),passHWMvals.push($scope.hotInstance.getDataAtCell(coords.row,9)),passHWMvals.push($scope.hotInstance.getDataAtCell(coords.row,10)),passHWMvals.push($scope.hotInstance.getDataAtCell(coords.row,11)),passHWMvals.push($scope.hotInstance.getDataAtCell(coords.row,12)),getFindSiteModal(coords.row,coords.col,passHWMvals)}},contextMenu:["remove_row"],onAfterValidate:function(isValid,value,row,prop,source){if(isValid||$scope.invalids.push({isValid:isValid,row:row,prop:prop}),isValid){for(var vIndex=-1,vI=0;vI<$scope.invalids.length;vI++)if($scope.invalids[vI].row==row&&$scope.invalids[vI].prop==prop){vIndex=vI;break}vIndex>-1&&$scope.invalids.splice(vIndex,1)}},onAfterChange:function(change,source){if("loadData"!=source)for(var i=0;i<change.length;i++)change[i][2]!==change[i][3]&&$scope.notValid===!1&&($scope.notValid=!0)},onAfterRemoveRow:function(index,amount){var selected=$scope.hotInstance.getSelected();if(amount>1){var eachRowIndexArray=[],cnt=selected[2]-selected[0]+1;eachRowIndexArray.push(selected[0]);for(var c=1;cnt>c;c++)eachRowIndexArray.push(selected[0]+1);for(var Mi=$scope.invalids.length;Mi--;)eachRowIndexArray.indexOf($scope.invalids[Mi].row)>-1&&$scope.invalids.splice(Mi,1)}else for(var i=$scope.invalids.length;i--;)$scope.invalids[i].row==index&&$scope.invalids.splice(i,1)}}}}]),STNControllers.controller("hwmSiteModalCtrl",["$scope","$rootScope","$http","$cookies","$uibModalInstance","nearBySites","HWMparts","siteNoAlreadyThere","hdatums","hcolMeths","vdatums","vcolMeths","states","counties","leafletData","leafletMarkerEvents","GEOCODE","SITE",function($scope,$rootScope,$http,$cookies,$uibModalInstance,nearBySites,HWMparts,siteNoAlreadyThere,hdatums,hcolMeths,vdatums,vcolMeths,states,counties,leafletData,leafletMarkerEvents,GEOCODE,SITE){$scope.localSites=nearBySites,$scope.horDatums=hdatums,$scope.horCollMeths=hcolMeths,$scope.vertDatums=vdatums,$scope.vertCollMeths=vcolMeths,$scope.states=states,$scope.counties=counties,$scope.showSiteCreateArea=!1,$scope.disableOK=!1,$scope.createChecked="0",$scope.showMap=!1,$scope.showHideMap="Show",$scope.showHideCreateSiteDiv=function(){$scope.showSiteCreateArea=!$scope.showSiteCreateArea,angular.forEach($scope.localSites,function(s){delete s.selected}),$scope.showSiteCreateArea?($scope.disableOK=!0,$scope.showMap=!1,$scope.showHideMap="Show"==$scope.showHideMap?"Hide":"Show",$scope.newSite.waterbody=""!==HWMparts[0]&&null!==HWMparts[0]?HWMparts[0]:"",$scope.newSite.latitude_dd=""!==HWMparts[1]&&null!==HWMparts[1]?HWMparts[1]:"",$scope.newSite.longitude_dd=""!==HWMparts[2]&&null!==HWMparts[2]?HWMparts[2]:"",$scope.newSite.hdatum_id=""!==HWMparts[3]&&null!==HWMparts[3]?$scope.horDatums.filter(function(hd){return hd.datum_name==HWMparts[3]})[0].datum_id:"",$scope.newSite.hcollect_method_id=""!==HWMparts[4]&&null!==HWMparts[4]?$scope.horCollMeths.filter(function(hd){return hd.hcollect_method==HWMparts[4]})[0].hcollect_method_id:"",$scope.getAddress()):$scope.disableOK=!1,angular.forEach($scope.markers,function(mm){"stnSites"==mm.layer&&(mm.icon=icons.stn)})},$scope.unchkCreate=function(checkedSite){$scope.createChecked="0",$scope.showSiteCreateArea=!1,angular.forEach($scope.markers,function(m){"stnSites"==m.layer&&(m.lat==checkedSite.latitude_dd&&m.lng==checkedSite.longitude_dd?(delete m.icon,m.icon=icons.selectedStn):m.icon=icons.stn)}),$scope.disableOK=!1},$scope.showSitesOnMap=function(){$scope.showMap=!$scope.showMap,$scope.showHideMap="Show"==$scope.showHideMap?"Hide":"Show",$scope.showMap&&fitMapBounds()},$scope.markers=[];for(var icons={stn:{type:"div",iconSize:[10,10],className:"stnSiteIcon"},selectedStn:{type:"div",iconSize:[14,14],className:"newSiteIcon"},hwmIcon:{type:"div",iconSize:[16,20],className:"stnHWMIcon"}},i=0;i<$scope.localSites.length;i++){var a=$scope.localSites[i];$scope.markers.push({layer:"stnSites",message:"<div><b>Site Number:</b> "+a.site_no+"<br /><b>Site Name:</b> "+a.site_name+"<br /><b>Waterbody:</b> "+a.waterbody+"<br /><b>Latitude/Longitude:</b> "+a.latitude_dd+" "+a.longitude_dd+"<br /></div>",lat:a.latitude_dd,lng:a.longitude_dd,site_id:a.site_id,title:a.site_no,icon:icons.stn})}$scope.markers.push({layer:"stnHWM",message:"<div><b>HWM</b><br/><b>Latitude:</b> "+HWMparts[1]+"<br/><b>Lontitude:</b> "+HWMparts[2]+"<br/></div>",lat:Number(HWMparts[1]),lng:Number(HWMparts[2]),title:"HWM",icon:icons.hwmIcon});var bounds=[];angular.forEach($scope.localSites,function(s){bounds.push([s.latitude_dd,s.longitude_dd])});var fitMapBounds=function(){leafletData.getMap("associatedSiteMap").then(function(map){map.fitBounds(bounds,{padding:[20,20]})})};fitMapBounds(),angular.extend($scope,{markers:$scope.markers,layers:{baselayers:{topo:{name:"World Topographic",type:"agsBase",layer:"Topographic",visible:!1}},overlays:{stnSites:{type:"group",name:"STN Sites",visible:!0},stnHWM:{type:"group",name:"HWM",visible:!0}}}}),""!==siteNoAlreadyThere&&null!==siteNoAlreadyThere&&angular.forEach($scope.localSites,function(s){if(s.site_no==siteNoAlreadyThere){s.selected="true";var selectedMarker=$scope.markers.filter(function(m){return m.lat==s.latitude_dd&&m.lng==s.longitude_dd})[0];selectedMarker.icon=icons.selectedStn}}),$scope.newSite={};var openLatModal=function(w){var latModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Latitude must be between 0 and 73.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',
controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});latModal.result.then(function(fieldFocus){"latlong"==w?$("#SITE_latitude_dd").focus():$("#LaDeg").focus()})},openLongModal=function(w){var longModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Longitude must be between -175.0 and -60.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});longModal.result.then(function(fieldFocus){"latlong"==w?$("#SITE_longitude_dd").focus():$("#LoDeg").focus()})};$scope.checkValue=function(direction){"lat"==direction&&($scope.newSite.latitude_dd<0||$scope.newSite.latitude_dd>73||isNaN($scope.newSite.latitude_dd))&&(openLatModal("latlong"),isNaN($scope.newSite.latitude_dd)&&($scope.newSite.latitude_dd=void 0)),"long"==direction&&($scope.newSite.longitude_dd<-175||$scope.newSite.longitude_dd>-60||isNaN($scope.newSite.longitude_dd))&&(openLongModal("latlong"),isNaN($scope.newSite.longitude_dd)&&($scope.newSite.longitude_dd=void 0))},$scope.updateCountyList=function(s){var thisState=$scope.states.filter(function(st){return st.state_abbrev==s})[0];$scope.stateCountyList=$scope.counties.filter(function(c){return c.state_id==thisState.state_id})},$scope.getAddress=function(){if(delete $scope.newSite.address,delete $scope.newSite.city,delete $scope.newSite.state,$scope.stateCountyList=[],delete $scope.newSite.zip,void 0===$scope.newSite.latitude_dd||void 0===$scope.newSite.longitude_dd||isNaN($scope.newSite.latitude_dd)||isNaN($scope.newSite.longitude_dd)){$rootScope.stateIsLoading.showLoading=!1;{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please provide a Latitude and Longitude before clicking Verify Location</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}}else $rootScope.stateIsLoading.showLoading=!0,delete $http.defaults.headers.common.Authorization,$http.defaults.headers.common.Accept="application/json",GEOCODE.getAddressParts({Longitude:$scope.newSite.longitude_dd,Latitude:$scope.newSite.latitude_dd},function(response){if(void 0!==response.result)if(response.result.geographies.Counties.length>0){var stateFIPS=response.result.geographies.Counties[0].STATE,countyName=response.result.geographies.Counties[0].NAME,thisStateID=$scope.counties.filter(function(c){return c.state_fip==stateFIPS})[0].state_id,thisState=$scope.states.filter(function(s){return s.state_id==thisStateID})[0];void 0!==thisState?($scope.newSite.state=thisState.state_abbrev,$scope.stateCountyList=$scope.counties.filter(function(c){return c.state_id==thisState.state_id}),$scope.newSite.county=countyName,$rootScope.stateIsLoading.showLoading=!1):($rootScope.stateIsLoading.showLoading=!1,toastr.error("The Latitude/Longitude did not return a recognized state. Please choose one from the dropdown."))}else $rootScope.stateIsLoading.showLoading=!1,toastr.error("No location information came back from that lat/long");else $rootScope.stateIsLoading.showLoading=!1,toastr.error("Error getting address. Choose State and County from dropdowns.")},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error getting address: "+errorResponse.statusText)})},$scope.createNewSite=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.newSite.member_id=$scope.$parent.userID,SITE.save($scope.newSite,function(response){$uibModalInstance.close(response)},function(errorResponse){toastr.error("Error creating Site.")}))},$scope.ok=function(){var selectedSite=nearBySites.filter(function(s){return"true"==s.selected})[0];$uibModalInstance.close(selectedSite)},$scope.cancel=function(){$uibModalInstance.dismiss()}}]),STNControllers.controller("hwmEditModalCtrl",["$scope","$rootScope","$http","$cookies","$uibModal","$uibModalInstance","allDropdowns","thisHWM","siteHMWs","agencyList","allMembers","fileTypes","hwmSite","SERVER_URL","HWM","FILE","SOURCE","FILE_STAMP",function($scope,$rootScope,$http,$cookies,$uibModal,$uibModalInstance,allDropdowns,thisHWM,siteHMWs,agencyList,allMembers,fileTypes,hwmSite,SERVER_URL,HWM,FILE,SOURCE,FILE_STAMP){$scope.view={HWMval:"detail"},$scope.h={hOpen:!0,hFileOpen:!1},$scope.hwmTypeList=allDropdowns[0],$scope.hwmQualList=allDropdowns[1],$scope.HDatumsList=allDropdowns[2],$scope.hCollMList=allDropdowns[3],$scope.VDatumsList=allDropdowns[4],$scope.vCollMList=allDropdowns[5],$scope.markerList=allDropdowns[6],$scope.eventList=allDropdowns[7],$scope.thisHWMsite=hwmSite,$scope.fileTypeList=fileTypes.filter(function(hft){return"Photo"===hft.filetype||"Historic Citation"===hft.filetype||"Field Sheets"===hft.filetype||"Level Notes"===hft.filetype||"Other"===hft.filetype||"Link"===hft.filetype||"Sketch"===hft.filetype}),$scope.hwmImageFiles=[],$scope.showFileForm=!1,$scope.userRole=$cookies.get("usersRole"),$scope.showEventDD=!1,$scope.adminChanged={},$scope.serverURL=SERVER_URL,$scope.showChangeEventDD=function(){$scope.showEventDD=!$scope.showEventDD},$scope.LoggedInMember=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aHWM={},$scope.HWMFiles=[],$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0};var openLatModal=function(w){var latModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Latitude must be between 0 and 73.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});latModal.result.then(function(fieldFocus){"latlong"==w?$("#latitude_dd").focus():$("#LaDeg").focus()})},openLongModal=function(w){var longModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Longitude must be between -175.0 and -60.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});longModal.result.then(function(fieldFocus){"latlong"==w?$("#longitude_dd").focus():$("#LoDeg").focus()})};$scope.checkValue=function(){var h="edit"==$scope.view.HWMval?$scope.hwmCopy:$scope.aHWM;(h.latitude_dd<0||h.latitude_dd>73||isNaN(h.latitude_dd))&&(openLatModal("latlong"),isNaN(h.latitude_dd)&&(h.latitude_dd=void 0)),(h.longitude_dd<-175||h.longitude_dd>-60||isNaN(h.longitude_dd))&&(openLongModal("latlong"),isNaN(h.longitude_dd)&&(h.longitude_dd=void 0))},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.chooseQuality=function(){var h="edit"==$scope.view.HWMval?$scope.hwmCopy:$scope.aHWM;if(""!==h.hwm_uncertainty){var x=Number(h.hwm_uncertainty);h.hwm_quality_id=x>.4?5:.05>x?1:$scope.hwmQualList.filter(function(h){return h.min_range<=x&&h.max_range>=x})[0].hwm_quality_id}},$scope.compareToUncertainty=function(){var h="edit"==$scope.view.HWMval?$scope.hwmCopy:$scope.aHWM;if(""!==h.hwm_uncertainty&&void 0!==h.hwm_uncertainty){var x=Number(h.hwm_uncertainty),matchingQualId=$scope.hwmQualList.filter(function(h){return void 0!==h.min_range?h.min_range<=x&&h.max_range>=x:void 0})[0].hwm_quality_id;if(h.hwm_quality_id!==matchingQualId){var incongruentModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Warning</h3></div><div class="modal-body"><p>There is a mismatch between the hwm quality chosen and the hwm uncertainty above. Please correct your hwm uncertainty.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});incongruentModal.result.then(function(){angular.element("[name='hwm_uncertainty']").focus()})}}};var makeAdate=function(d){var aDate=new Date;""!==d&&void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};if($scope.aHWM=angular.copy(thisHWM),delete $scope.aHWM.site_no,$scope.aHWM.HWMFiles)for(var f=0;f<$scope.aHWM.HWMFiles.length;f++)$scope.HWMFiles.push($scope.aHWM.HWMFiles[f]);delete $scope.aHWM.HWMFiles,$scope.aHWM.flag_date=makeAdate($scope.aHWM.flag_date),null!==$scope.aHWM.survey_date&&void 0!==$scope.aHWM.survey_date&&($scope.aHWM.survey_date=makeAdate($scope.aHWM.survey_date)),$scope.save=function(valid){if(valid){void 0!==$scope.adminChanged.event_id&&($scope.hwmCopy.event_id=$scope.adminChanged.event_id),void 0!==$scope.hwmCopy.survey_date&&null!==$scope.hwmCopy.survey_date&&void 0===$scope.hwmCopy.survey_member_id&&($scope.hwmCopy.survey_member_id=$cookies.get("mID")),void 0!==$scope.hwmCopy.elev_ft&&null!==$scope.hwmCopy.elev_ft&&(void 0===$scope.hwmCopy.survey_date&&($scope.hwmCopy.survey_date=makeAdate("")),void 0===$scope.hwmCopy.survey_member_id&&($scope.hwmCopy.survey_member_id=$cookies.get("mID"))),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM.update({id:$scope.hwmCopy.hwm_id},$scope.hwmCopy).$promise.then(function(response){toastr.success("HWM updated"),$scope.aHWM=response,thisHWM=response,void 0!==$scope.aHWM.stillwater&&($scope.aHWM.Tranquil=$scope.aHWM.stillwater>0?"Yes":"No"),$scope.aHWM.flag_date=makeAdate($scope.aHWM.flag_date),null!==$scope.aHWM.survey_date&&void 0!==$scope.aHWM.survey_date&&($scope.aHWM.survey_date=makeAdate($scope.aHWM.survey_date)),$scope.hwmCopy={},$scope.view.HWMval="detail"})}},$scope.cancel=function(){$rootScope.stateIsLoading.showLoading=!1;var sendBack=[$scope.aHWM,$scope.HWMFiles];$uibModalInstance.close(sendBack)},$scope.wannaEditHWM=function(){$scope.view.HWMval="edit",$scope.hwmCopy=angular.copy($scope.aHWM),$scope.adminChanged.event_id=$scope.aHWM.event_id},$scope.cancelHWMEdit=function(){$scope.view.HWMval="detail",$scope.hwmCopy=[],$scope.adminChanged={},$scope.EventName=$scope.eventList.filter(function(e){return e.event_id==$scope.aHWM.event_id})[0].event_name},$scope.ensurehwmLabelUnique=function(){var h="edit"==$scope.view.HWMval?$scope.hwmCopy:$scope.aHWM;angular.forEach(siteHMWs,function(hwm){if(hwm.hwm_label==h.hwm_label){h.hwm_label=void 0!==h.hwm_id?$scope.aHWM.hwm_label:"hwm-"+(parseFloat(siteHMWs.length)+1);var uniqueModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Warning</h3></div><div class="modal-body"><p>The hwm label must be unique from all other hwms at this site for this event.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});uniqueModal.result.then(function(){angular.element("[name='hwm_label']").focus()})}})},$scope.stamp=FILE_STAMP.getStamp(),$scope.fileItemExists=!0,$scope.saveFileUpload=function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.sFileIsUploading=!0;var fileParts={FileEntity:{file_id:$scope.aFile.file_id,name:$scope.aFile.name,description:$scope.aFile.description,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,file_date:$scope.aFile.file_date,hwm_id:$scope.aFile.hwm_id,site_id:$scope.aFile.site_id,filetype_id:$scope.aFile.filetype_id,source_id:$scope.aFile.source_id,path:$scope.aFile.path,photo_date:$scope.aFile.photo_date},File:void 0!==$scope.aFile.File1?$scope.aFile.File1:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),FILE_STAMP.setStamp(),$scope.stamp=FILE_STAMP.getStamp(),$scope.isPhoto=$scope.aFile.File1.type.indexOf("image")>-1?!0:!1,$scope.aFile.name=fresponse.name,$scope.aFile.path=fresponse.path,void 0!==$scope.aFile.File1&&($scope.aFile.File=$scope.aFile.File1,$scope.aFile.File1=void 0),fresponse.fileBelongsTo="HWM File",$scope.HWMFiles.splice($scope.existFileIndex,1),$scope.HWMFiles.push(fresponse),1===fresponse.filetype_id&&($scope.hwmImageFiles.splice($scope.existFileIndex,1),$scope.hwmImageFiles.push(fresponse)),$scope.fileItemExists=!0},function(errorResponse){toastr.error("Error saving file: "+errorResponse.statusText)})},$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})},$scope.showFile=function(file){if($scope.fileTypes=$scope.fileTypeList,$scope.agencies=agencyList,$scope.existFileIndex=-1,$scope.existIMGFileIndex=-1,$scope.aFile={},$scope.aSource={},0!==file){if($scope.existFileIndex=$scope.HWMFiles.indexOf(file),$scope.existIMGFileIndex=$scope.hwmImageFiles.length>0?$scope.hwmImageFiles.indexOf(file):-1,$scope.aFile=angular.copy(file),8!==file.filetype_id&&FILE.getFileItem({id:$scope.aFile.file_id}).$promise.then(function(response){$scope.fileItemExists=response.Length>0?!0:!1}),$scope.aFile.fileType=$scope.fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,void 0!==$scope.aFile.name){var fI=$scope.aFile.name.lastIndexOf("."),fileExt=$scope.aFile.name.substring(fI+1);$scope.isPhoto=fileExt.match(/(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)?!0:!1}$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),null!==file.source_id&&SOURCE.query({id:file.source_id}).$promise.then(function(s){$scope.aSource=s,$scope.aSource.FULLname=$scope.aSource.source_name,$scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name})}else $scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname,$scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name;$scope.showFileForm=!0,$scope.updateAgencyForCaption=function(){1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}},$scope.createFile=function(valid){if(void 0!==$scope.aFile.File){if(valid){$scope.HWMfileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){if(8!==$scope.aFile.filetype_id){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,photo_date:$scope.aFile.photo_date,description:$scope.aFile.description,site_id:$scope.thisHWMsite.site_id,source_id:response.source_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,hwm_id:$scope.aHWM.hwm_id},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="HWM File",$scope.HWMFiles.push(fresponse),1===fresponse.filetype_id&&$scope.hwmImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.HWMfileIsUploading=!1},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error uploading file: "+errorResponse.statusText)})}else $scope.aFile.source_id=response.source_id,$scope.aFile.site_id=$scope.thisHWMsite.site_id,$scope.aFile.hwm_id=$scope.aHWM.hwm_id,FILE.save($scope.aFile).$promise.then(function(fresponse){toastr.success("Link saved"),fresponse.fileBelongsTo="HWM File",$scope.HWMFiles.push(fresponse),$scope.showFileForm=!1,$scope.HWMfileIsUploading=!1},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error creating Source info: "+errorResponse.statusText)})}}else alert("Need to choose a file first")},$scope.saveFile=function(valid){if(valid){$scope.HWMfileIsUploading=!0;{$scope.aFile.fileBelongsTo}if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.aSource.source_id){var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(sResponse){$scope.aFile.source_id=sResponse.source_id,FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="HWM File",$scope.HWMFiles[$scope.existFileIndex]=fileResponse,$scope.showFileForm=!1,$scope.HWMfileIsUploading=!1},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})}}},$scope.deleteFile=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.HWMFiles.splice($scope.existFileIndex,1),$scope.hwmImageFiles.splice($scope.existIMGFileIndex,1),$scope.showFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelFile=function(){$scope.aFile={},$scope.aSource={},$scope.showFileForm=!1},$rootScope.stateIsLoading.showLoading=!1}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("bulkHWMAdjCtrl",["$scope","$state","$rootScope","$cookies","$http","$filter","$uibModal","SITE","HWM","HWM_Service","eventList","stateList","countyList",function($scope,$state,$rootScope,$cookies,$http,$filter,$uibModal,SITE,HWM,HWM_Service,eventList,stateList,countyList){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$scope.querySearch={},$scope.showLoading=!1,$scope.dynamic=0,$scope.max=0,$scope.hotInstance,$scope.columnWidths=[84,120,120,120,220,120,120,150,130,160,180],$scope.Changes=[],$scope.invalids=[],$scope.events=eventList,$scope.states=stateList,$scope.HWM_params={},$scope.countyList=countyList,$scope.countyArray=[],$scope.result={searchClicked:!1};var makeAdate=function(d){var aDate=new Date;""!==d&&void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["01","02","03","04","05","06","07","08","09","10","11","12"],dateWOtime=monthNames[month]+"/"+day+"/"+year;return dateWOtime};if($scope.adjustHWMs=[],$scope.eventStateHWMs=[],$scope.hwmCount="",$scope.UpdateCounties=function(){if(null!==$scope.HWM_params.state_abbrev){var thisState=$scope.states.filter(function(st){return st.state_abbrev==$scope.HWM_params.state_abbrev})[0];$scope.countyArray=$scope.countyList.filter(function(c){return c.state_id==thisState.state_id})}else $scope.countyArray=[]},$scope.getHWMs=function(valid){if(valid){$scope.result={},$scope.result.searchClicked=!0;var countyNames=[];angular.forEach($scope.HWM_params.counties,function(c){countyNames.push(c.county_name)});var countiesCommaSep=countyNames.join(",");$scope.adjustHWMs=[],$scope.eventStateHWMs=[],$scope.querySearch={},$scope.querySearch.Event=$scope.HWM_params.event_id,$scope.querySearch.State=$scope.HWM_params.state_abbrev,$scope.querySearch.Counties=countiesCommaSep,HWM_Service.setBulkHWMSearch($scope.querySearch),HWM.getFilteredHWMs({Event:$scope.HWM_params.event_id,States:$scope.HWM_params.state_abbrev,County:countiesCommaSep},function(response){$scope.hwmCount=response.length,$scope.result.isResponse=$scope.hwmCount>0?!0:!1;for(var i=0;i<response.length;i++){var one={};one.hwm_id=response[i].hwm_id,one.waterbody=response[i].waterbody,one.hwm_label=response[i].hwm_label,one.site_id=response[i].site_id,one.site_no=response[i].site_no,one.hwm_locationdescription=response[i].hwm_locationdescription,one.latitude_dd=response[i].latitude_dd,one.longitude_dd=response[i].longitude_dd,""!==response[i].survey_date&&(one.survey_date=makeAdate(response[i].survey_date)),one.elev_ft=response[i].elev_ft,one.uncertainty=response[i].uncertainty,one.hwm_notes=response[i].hwm_notes,$scope.adjustHWMs.push(one)}},function(error){toastr.error("Error getting hwms.")})}},!angular.equals({},HWM_Service.getBulkHWMSearch())){var theSearch=HWM_Service.getBulkHWMSearch();if($scope.HWM_params.event_id=theSearch.Event,$scope.HWM_params.state_abbrev=theSearch.State,$scope.UpdateCounties(),""!==theSearch.Counties){var counties=theSearch.Counties.split(",");$scope.HWM_params.counties=[],angular.forEach($scope.countyArray,function(c){counties.map(function(cA){return cA}).indexOf(c.county_name)>-1&&(c.selected=!0,$scope.HWM_params.counties.push(c))})}$scope.getHWMs(!0)}var requiredModal=function(){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>This field is required.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',backdrop:"static",keyboard:!1,controller:function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}},size:"sm"})},colorRenderer=function(instance,td,row,col,prop,value,cellProperties){return Handsontable.renderers.TextRenderer.apply(this,arguments),td.style.background="#F7F5F5",td},siteNoRenderer=function(instance,td,row,col,prop,value,cellProperties){return Handsontable.renderers.TextRenderer.apply(this,arguments),td.innerHTML='<a ng-click="goToSite()">'+value+"</a>",td.style.background="#F7F5F5",td};$scope.requiredValidator=function(value,callback){value?callback(!0):(requiredModal(),callback(!1))},$scope.numberValidator=function(value,callback){callback(!0)},$scope.save=function(){HWM.getEventStateHWMs({eventId:$scope.HWM_params.event_id,state:$scope.HWM_params.state_abbrev}).$promise.then(function(response){$scope.eventStateHWMs=response;for(var updateTheseHWMs=[],evH=0;evH<$scope.eventStateHWMs.length;evH++){var theyHaveItHere=$scope.adjustHWMs.filter(function(a){return a.hwm_id==$scope.eventStateHWMs[evH].hwm_id})[0];void 0!==theyHaveItHere&&($scope.eventStateHWMs[evH].survye_date=theyHaveItHere.survey_date,$scope.eventStateHWMs[evH].elev_ft=theyHaveItHere.elev_ft,$scope.eventStateHWMs[evH].uncertainty=theyHaveItHere.uncertainty,$scope.eventStateHWMs[evH].hwm_notes=theyHaveItHere.hwm_notes,updateTheseHWMs.push($scope.eventStateHWMs[evH]))}$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",angular.forEach(updateTheseHWMs,function(u){HWM.update({id:u.hwm_id},u).$promise.then(function(){toastr.success("HWMs updated"),$scope.adjustHWMs=[],$scope.eventStateHWMs=[],$scope.invalids=[],$scope.getHWMs(!0)},function(error){toastr.error("Error updating HWMs")})})})},$scope.reset=function(){var resetModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title"></h3></div><div class="modal-body"><p>Warning! This will revert the hwm data to the last saved version. All unsaved edits will be lost.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss()}}],size:"sm"});resetModal.result.then(function(){$scope.adjustHWMs=[],HWM_Service.setBulkHWMSearch({}),$scope.invalids=[],$scope.getHWMs(!0)})},$scope.tableSettings={rowHeaders:!0,minSpareRows:0,afterInit:function(){$scope.hotInstance=this},manualColumnResize:!0,manualRowResize:!0,wordWrap:!1,preventOverflow:"horizontal",viewportColumnRenderingOffsetNumber:1,colWidths:$scope.columnWidths,cells:function(row,col,prop){var cellprops={};return 6>=col&&(cellprops.renderer=colorRenderer),3==col&&(cellprops.renderer=siteNoRenderer),cellprops},onBeforeChange:function(data){for(var i=data.length-1;i>=0;i--)if(("elev_ft"==data[i][1]||"uncertainty"==data[i][1])&&""!==data[i][3]&&isNaN(data[i][3])){data.splice(i,1),setTimeout(function(){$scope.hotInstance.deselectCell()},100);{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Value must be a number.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}}},afterOnCellMouseDown:function(event,coords,td){if(3==coords.col){var site_number=$scope.hotInstance.getDataAtCell(coords.row,coords.col),siteId=$scope.adjustHWMs.filter(function(h){return h.site_no==site_number})[0].site_id;$state.go("site.dashboard",{id:siteId})}},onAfterValidate:function(isValid,value,row,prop,souce){if(isValid||$scope.invalids.push({isValid:isValid,row:row,prop:prop}),isValid){for(var vIndex=-1,vI=0;vI<$scope.invalids.length;vI++)if($scope.invalids[vI].row==row&&$scope.invalids[vI].prop==prop){vIndex=vI;break}vIndex>-1&&$scope.invalids.splice(vIndex,1)}},fillHandle:{autoInsertRow:!1},rowHeights:50}}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("helpCtrl",["$scope",function($scope){$scope.helpInfo={},$scope.helpInfo.fact="Some really interesting help will be here."}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("eventSessionModalCtrl",["$scope","$rootScope","$cookies","$uibModalInstance","allEvents","allEventTypes","allStates","EVENT",function($scope,$rootScope,$cookies,$uibModalInstance,allEvents,allEventTypes,allStates,EVENT){$scope.EventList=allEvents,$scope.EventTypeList=allEventTypes,$scope.StateList=allStates;var chosenEv=$cookies.get("SessionEventID");$scope.event={EventChosen:void 0!==chosenEv?Number(chosenEv):""},$scope.filterEvents=function(){var d=null!==$scope.event.DATE&&void 0!==$scope.event.DATE?$scope.event.DATE:null,t=null!==$scope.event.type&&void 0!==$scope.event.type?$scope.event.type:0,s=null!==$scope.event.state&&void 0!==$scope.event.state?$scope.event.state:null;EVENT.getFilteredEvents({Date:d,Type:t,State:s}).$promise.then(function(response){$scope.EventList=response})},$scope.clearFilters=function(){$scope.event={EventChosen:void 0!==chosenEv?Number(chosenEv):""},$scope.EventList=allEvents},$scope.setEvent=function(){if($scope.evID=$scope.event.EventChosen,""!==$scope.evID){var eventName=allEvents.filter(function(x){return x.event_id==$scope.evID})[0];$cookies.put("SessionEventID",$scope.evID),$cookies.put("SessionEventName",eventName.event_name),$rootScope.sessionEvent="Session Event: "+eventName.event_name+".",$uibModalInstance.dismiss("cancel")}else toastr.error("You must choose an Event first.")},$scope.clearEvent=function(){$scope.event={},$cookies.remove("SessionEventID"),$cookies.remove("SessionEventName"),$rootScope.sessionEvent="",$uibModalInstance.dismiss("cancel")},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.close=function(){$uibModalInstance.dismiss("cancel")}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("eventSessionCtrl",["$scope","$rootScope","$cookies","$uibModal","$location","$state","EVENT","EVENT_TYPE","STATE",function($scope,$rootScope,$cookies,$uibModal,$location,$state,EVENT,EVENT_TYPE,STATE){$scope.openEventModal=function(){var modalInstance=$uibModal.open({templateUrl:"ChooseEvent.html",controller:"eventSessionModalCtrl",size:"md",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{allEvents:function(){return EVENT.getAll().$promise},allEventTypes:function(){return EVENT_TYPE.getAll().$promise},allStates:function(){return STATE.getAll().$promise}}});modalInstance.result.then(function(r){})}}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("eventModalCtrl",["$scope","$rootScope","$cookies","$http","$uibModal","$uibModalInstance","$filter","thisEvent","eventTypeList","eventStatusList","adminList","fileTypes","eventSites","allStates","allCounties","EVENT","FILE","SERVER_URL",function($scope,$rootScope,$cookies,$http,$uibModal,$uibModalInstance,$filter,thisEvent,eventTypeList,eventStatusList,adminList,fileTypes,eventSites,allStates,allCounties,EVENT,FILE,SERVER_URL){$scope.serverURL=SERVER_URL,$scope.downloadZipUrl="",$scope.objectChoices=["HWMs","Sensors"],$scope.anEvent={},$scope.eventTypes=eventTypeList,$scope.eventStatuses=eventStatusList,$scope.adminMembers=adminList,$scope.loggedInRole=$cookies.get("usersRole"),$scope.view={EVval:"detail"},$scope.dl={dlOpen:!0,dlFileOpen:!1},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.wannaEditEV=function(){$scope.view.EVval="edit",$scope.evCopy=angular.copy($scope.anEvent)},$scope.cancelEVEdit=function(){$scope.view.EVval="detail",$scope.evCopy=[]};var makeAdate=function(d){var aDate=new Date;void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);

return dateWOtime},dateWOtime=function(d){var year=d.getFullYear(),month=d.getMonth(),day=("0"+d.getDate()).slice(-2),monthNames=["01","02","03","04","05","06","07","08","09","10","11","12"],dateWOtime=monthNames[month]+"/"+day+"/"+year;return dateWOtime};"empty"!==thisEvent?($scope.createOReditEV="edit",$scope.evModalHeader="Event Information",$scope.anEvent=angular.copy(thisEvent),$scope.anEvent.event_start_date=void 0!==$scope.anEvent.event_start_date?makeAdate($scope.anEvent.event_start_date):"",$scope.anEvent.event_end_date=void 0!==$scope.anEvent.event_end_date?makeAdate($scope.anEvent.event_end_date):""):($scope.createOReditEV="create",$scope.anEvent.event_start_date=makeAdate());var compareDates=function(v,sd,ed){if(new Date(ed)<new Date(sd)){v=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The event end date must be after the event start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){v=!1})}else(""===ed||""===sd)&&(v=!1);return v};if($scope.create=function(valid){if(void 0!==$scope.anEvent.event_start_date&&null!==$scope.anEvent.event_start_date&&void 0!==$scope.anEvent.event_end_date&&null!==$scope.anEvent.event_end_date&&(valid=compareDates(valid,$scope.anEvent.event_start_date,$scope.anEvent.event_end_date)),valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var createdEvent={};EVENT.save($scope.anEvent,function(response){toastr.success("Event Created"),createdEvent=response,createdEvent.event_id=response.event_id,createdEvent.Name=response.event_name,createdEvent.Type=$scope.eventTypes.filter(function(a){return a.event_type_id==response.event_type_id})[0].type,createdEvent.Status=$scope.eventStatuses.filter(function(r){return r.event_status_id==response.event_status_id})[0].status;var coord=$scope.adminMembers.filter(function(c){return c.member_id==response.event_coordinator})[0];createdEvent.StartDate=response.event_start_date,createdEvent.EndDate=response.event_end_date,createdEvent.Coord=void 0!==coord?coord.fname+" "+coord.lname:""},function(errorResponse){toastr.error("Error creating new event: "+errorResponse.statusText)}).$promise.then(function(){var sendBack=[createdEvent,"created"];$uibModalInstance.close(sendBack)})}},$scope.save=function(valid){if(void 0!==$scope.evCopy.event_start_date&&null!==$scope.evCopy.event_start_date&&void 0!==$scope.evCopy.event_end_date&&null!==$scope.evCopy.event_end_date&&(valid=compareDates(valid,$scope.evCopy.event_start_date,$scope.evCopy.event_end_date)),valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var updatedEvent={};EVENT.update({id:$scope.evCopy.event_id},$scope.evCopy,function(response){updatedEvent=response,updatedEvent.event_id=response.event_id,updatedEvent.Name=response.event_name,updatedEvent.Type=$scope.eventTypes.filter(function(a){return a.event_type_id==response.event_type_id})[0].type,updatedEvent.Status=$scope.eventStatuses.filter(function(r){return r.event_status_id==response.event_status_id})[0].status;var coord=$scope.adminMembers.filter(function(c){return c.member_id==response.event_coordinator})[0];updatedEvent.StartDate=response.event_start_date,updatedEvent.EndDate=response.event_end_date,updatedEvent.Coord=void 0!==coord?coord.fname+" "+coord.lname:"",toastr.success("Event Updated")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){var sendBack=[updatedEvent,"updated"];$uibModalInstance.close(sendBack)})}},$scope.deleteEV=function(ev){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ev},what:function(){return"Event"}}});modalInstance.result.then(function(eventToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),EVENT["delete"]({id:eventToRemove.event_id},function(response){toastr.success("Event Deleted")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$uibModalInstance.close(["de","deleted"])})})},$scope.cancel=function(){$uibModalInstance.close()},$rootScope.stateIsLoading={showLoading:!1},"empty"!==thisEvent){if($scope.zipFileParams={filesFor:"",stateName:"",countyName:"",fromDate:"",toDate:""},$scope.siteCountyList=[],$scope.countyArray=[],$scope.eventStates=[],void 0!==eventSites)for(var st=0;st<allStates.length;st++)for(var es=0;es<eventSites.length;es++)eventSites[es].state==allStates[st].state_abbrev&&($scope.eventStates.push(allStates[st]),es=eventSites.length);else $scope.eventStates=allStates;for(var ci=0;ci<eventSites.length;ci++)$scope.siteCountyList.map(function(scl){return scl.county_name}).indexOf(eventSites[ci].county)<0&&$scope.siteCountyList.push({state_abbrev:eventSites[ci].state,county_name:eventSites[ci].county,state_id:allStates.filter(function(s){return s.state_abbrev==eventSites[ci].state})[0].state_id});$scope.UpdateCounties=function(){if(void 0!==$scope.zipFileParams.stateName){var thisState=$scope.eventStates.filter(function(st){return st.state_abbrev==$scope.zipFileParams.stateName})[0];$scope.countyArray=$scope.siteCountyList.filter(function(c){return c.state_id==thisState.state_id})}else $scope.countyArray=[]},$scope.HWMfileTypes=fileTypes.filter(function(hft){return"Photo"===hft.filetype||"Historic Citation"===hft.filetype||"Field Sheets"===hft.filetype||"Level Notes"===hft.filetype||"Other"===hft.filetype||"Sketch"===hft.filetype}),$scope.sensorfileTypes=fileTypes.filter(function(sft){return"Photo"===sft.filetype||"Data"===sft.filetype||"Historic Citation"===sft.filetype||"Field Sheets"===sft.filetype||"Level Notes"===sft.filetype||"Other"===sft.filetype||"Sketch"===sft.filetype}),$scope.updatefileTypeChecks=function(){$scope.hwmFileTypesWanted=[];$scope.hwmFileTypesString="",$scope.sensorFileTypesString="",angular.forEach($scope.HWMfileTypes,function(hwmFT){hwmFT.selected=!1}),angular.forEach($scope.sensorfileTypes,function(senFT){senFT.selected=!1}),"HWMs"==$scope.zipFileParams.filesFor&&($scope.fileTypeCheckList=$scope.HWMfileTypes),"Sensors"==$scope.zipFileParams.filesFor&&($scope.fileTypeCheckList=$scope.sensorfileTypes),$scope.filesWantedChosen=!0},$scope.checkedFile=function(f){"HWMs"==$scope.zipFileParams.filesFor&&($scope.hwmFileTypesWanted=[],angular.forEach($scope.HWMfileTypes,function(hf){hf.selected&&$scope.hwmFileTypesWanted.push(hf.filetype_id)}),$scope.hwmFileTypesString=$scope.hwmFileTypesWanted.join(",")),"Sensors"==$scope.zipFileParams.filesFor&&($scope.sensorFileTypesWanted=[],angular.forEach($scope.sensorfileTypes,function(sf){sf.selected&&$scope.sensorFileTypesWanted.push(sf.filetype_id)}),$scope.sensorFileTypesString=$scope.sensorFileTypesWanted.join(","))},$scope.DownloadZip=function(){var formattedFromDate="",formattedToDate="";if(""!==$scope.zipFileParams.fromDate&&(formattedFromDate=dateWOtime($scope.zipFileParams.fromDate)),""!==$scope.zipFileParams.toDate&&(formattedToDate=dateWOtime($scope.zipFileParams.toDate)),""!==$scope.zipFileParams.filesFor){var filepath=$scope.serverURL+"/Events/"+$scope.anEvent.event_id+"/EventFileItems?State="+$scope.zipFileParams.stateName+"&County="+$scope.zipFileParams.countyName+"&FromDate="+formattedFromDate+"&ToDate="+formattedToDate+"&FilesFor="+$scope.zipFileParams.filesFor+"&HWMFileType="+$scope.hwmFileTypesString+"&SensorFileTypes="+$scope.sensorFileTypesString,xhr=new XMLHttpRequest;xhr.open("GET",filepath),toastr.options={closeButton:!0,positionClass:"toast-bottom-right",onclick:null,timeOut:"0",extendedTimeOut:"0"},toastr.warning("Zip file is downloading."),xhr.responseType="blob",xhr.setRequestHeader("Content-type","application/*; charset=utf-8"),xhr.setRequestHeader("Authorization","Basic "+$cookies.get("STNCreds")),xhr.onreadystatechange=function(){if(4===xhr.readyState)if("Internal Server Error"!==xhr.statusText){var usgsWiMmessage=xhr.getResponseHeader("usgswim-messages");if("info: FileCount:0,Count: 0"==usgsWiMmessage){toastr.clear();{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">No Files</h3></div><div class="modal-body"><p>There are no files that match your query.</p><p>Please narrow your search and try again.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}}else{var blob=new Blob([xhr.response],{type:"application/octet-stream"}),a=document.createElement("a"),urlCreator=window.URL||window.webkitURL||window.mozURL||window.msURL,fileURL=urlCreator.createObjectURL(blob);a.style="display: none",a.href=fileURL,a.download="EventFileDownload.zip",a.target="_blank",document.body.appendChild(a),a.click(),toastr.clear()}}else{toastr.clear();{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Download was unsuccessful. Possible cause is that the zip file is too large to download.</p><p>Please narrow your search and try again.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}}},xhr.send()}else{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>You must choose either HWM files or Sensor files before a downloaded zip file can be requested.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}}}}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("eventInfoCtrl",["$scope","$cookies","$location","$http","$uibModal","$filter","EVENT","thisEvent",function($scope,$cookies,$location,$http,$uibModal,$filter,EVENT,thisEvent){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.anEvent={},$scope.DeleteEvent=function(ev){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ev},what:function(){return"Event"}}});modalInstance.result.then(function(nameToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),EVENT["delete"]({id:nameToRemove.event_id},function(response){var delEv={};delEv.event_id=nameToRemove.event_id,delEv.Name=nameToRemove.event_name,delEv.Type=$scope.eventTypeList.filter(function(a){return a.event_type_id==nameToRemove.event_type_id})[0].type,delEv.Status=$scope.eventStatList.filter(function(r){return r.event_status_id==nameToRemove.event_status_id})[0].status;var coord=$scope.eventCoordList.filter(function(c){return c.member_id==nameToRemove.event_coordinator})[0];delEv.StartDate=nameToRemove.event_start_date,delEv.EndDate=nameToRemove.event_end_date,delEv.Coord=void 0!==coord?coord.fname+" "+coord.lname:"";for(var index=0,i=0;i<$scope.eventList.length;i++)$scope.eventList[i].event_id==delEv.event_id&&(index=i,i=$scope.eventList.length);$scope.eventList.splice(index,1),toastr.success("Event Deleted")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$location.path("/Events/EventsList").replace()})})};var makeAdate=function(d){var aDate=new Date;void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};if(void 0!==thisEvent){$scope.anEvent=thisEvent,$scope.anEvent.event_start_date=makeAdate($scope.anEvent.event_start_date),$scope.anEvent.event_end_date=makeAdate($scope.anEvent.event_end_date),$scope.thisEventType=$scope.eventTypeList.filter(function(a){return a.event_type_id==thisEvent.event_type_id})[0].type,$scope.thisEventStatus=$scope.eventStatList.filter(function(r){return r.event_status_id==thisEvent.event_status_id})[0].status;var EC=$scope.eventCoordList.filter(function(c){return c.member_id==thisEvent.event_coordinator})[0];$scope.thisEventCoord=void 0!==EC?EC.fname+" "+EC.lname:""}else $scope.anEvent.event_start_date=makeAdate(),$scope.anEvent.event_end_date=makeAdate();$scope.SaveOnBlur=function(v){if(v)$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",EVENT.update({id:$scope.anEvent.event_id},$scope.anEvent,function(response){toastr.success("Event Updated")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)});else{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all required fields.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}},$scope.save=function(valid){valid&&EVENT.save($scope.anEvent,function(response){toastr.success("Event Created");var E={};E.event_id=response.event_id,E.Name=response.event_name,E.Type=$scope.eventTypeList.filter(function(a){return a.event_type_id==response.event_type_id})[0].type,E.Status=$scope.eventStatList.filter(function(r){return r.event_status_id==response.event_status_id})[0].status;var coord=$scope.eventCoordList.filter(function(c){return c.member_id==response.event_coordinator})[0];E.StartDate=response.event_start_date,E.EndDate=response.event_end_date,E.Coord=void 0!==coord?coord.fname+" "+coord.lname:"",$scope.eventList.push(E)}).$promise.then(function(){$location.path("/Events/EventsList").replace()})}}}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("eventCtrl",["$scope","$rootScope","$cookies","$location","$http","$filter","$uibModal","MEMBER","FILE_TYPE","EVENT","STATE","COUNTIES","allCoordMembers","allEvents","allEventTypes","allEventStats",function($scope,$rootScope,$cookies,$location,$http,$filter,$uibModal,MEMBER,FILE_TYPE,EVENT,STATE,COUNTIES,allCoordMembers,allEvents,allEventTypes,allEventStats){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$rootScope.thisPage="Settings/Events",$scope.loggedInRole=$cookies.get("usersRole"),$scope.isAdmin="Admin"==$scope.loggedInRole?!0:!1,$scope.sort_by=function(newSortingOrder){$scope.sortingOrder==newSortingOrder&&($scope.reverse=!$scope.reverse),$scope.sortingOrder=newSortingOrder,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+newSortingOrder+" i").removeClass().addClass($scope.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")};var makeAdate=function(d){var Tindex=d.indexOf("T"),theDate=d.substring(0,Tindex);return theDate};$scope.eventTypeList=allEventTypes,$scope.eventStatList=allEventStats,$scope.eventCoordList=allCoordMembers,$scope.eventList=[];for(var x=0;x<allEvents.length;x++){var E=allEvents[x];E.Name=allEvents[x].event_name,E.Type=$scope.eventTypeList.filter(function(a){return a.event_type_id==allEvents[x].event_type_id})[0].type,E.Status=$scope.eventStatList.filter(function(r){return r.event_status_id==allEvents[x].event_status_id})[0].status;var coord=$scope.eventCoordList.filter(function(c){return c.member_id==allEvents[x].event_coordinator})[0];E.StartDate=void 0!==allEvents[x].event_start_date?makeAdate(allEvents[x].event_start_date):"",E.EndDate=void 0!==allEvents[x].event_end_date?makeAdate(allEvents[x].event_end_date):"",E.Coord=void 0!==coord?coord.fname+" "+coord.lname:"",$scope.eventList.push(E)}$scope.showEventModal=function(eventClicked){var indexClicked=$scope.eventList.indexOf(eventClicked);$rootScope.stateIsLoading={showLoading:!0};var modalInstance=$uibModal.open({templateUrl:"eventModal.html",controller:"eventModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{thisEvent:function(){return 0!==eventClicked?eventClicked:"empty"},eventTypeList:function(){return allEventTypes},eventStatusList:function(){return allEventStats},adminList:function(){return allCoordMembers},fileTypes:function(){return FILE_TYPE.getAll().$promise},eventSites:function(){return 0!==eventClicked?EVENT.getEventSites({id:eventClicked.event_id}).$promise:void 0},allStates:function(){return STATE.getAll().$promise},allCounties:function(){return COUNTIES.getAll().$promise}}});modalInstance.result.then(function(createdEvent){$rootScope.stateIsLoading={showLoading:!1},void 0!==createdEvent&&("created"==createdEvent[1]&&$scope.eventList.push(createdEvent[0]),"updated"===createdEvent[1]&&($scope.eventList[indexClicked]=createdEvent[0]),"deleted"==createdEvent[1]&&$scope.eventList.splice(indexClicked,1))})}}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("siteFileModalCtrl",["$scope","$cookies","$http","$uibModalInstance","$uibModal","SERVER_URL","FILE_STAMP","fileTypeList","thisFile","fileExists","allMembers","fileSource","dataFile","agencyList","fileSite","FILE","SOURCE","DATA_FILE",function($scope,$cookies,$http,$uibModalInstance,$uibModal,SERVER_URL,FILE_STAMP,fileTypeList,thisFile,fileExists,allMembers,fileSource,dataFile,agencyList,fileSite,FILE,SOURCE,DATA_FILE){$scope.serverURL=SERVER_URL,$scope.userRole=$cookies.get("usersRole"),$scope.view={FILEval:"detail"},$scope.sFileIsUploading=!1,$scope.fileTypes=fileTypeList,$scope.agencies=agencyList,$scope.theSite=fileSite,$scope.aFile={},$scope.aSource={},$scope.datafile={},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.fileItemExists=void 0===fileExists||fileExists.Length>0?!0:!1,$scope.datepickrs={},$scope.dateOptions={startingDay:1,showWeeks:!1},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.updateAgencyForCaption=function(){"create"==$scope.createOReditFile?1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name):1==$scope.fileCopy.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.sourceCopy.agency_id})[0].agency_name)};var getDateTimeParts=function(d){var y=d.substr(0,4),m=d.substr(5,2)-1,da=d.substr(8,2),h=d.substr(11,2),mi=d.substr(14,2),sec=d.substr(17,2),theDate=new Date(y,m,da,h,mi,sec);return theDate};if(void 0!==thisFile){if($scope.createOReditFile="edit",$scope.whoseFile=thisFile.fileBelongsTo,"Objective Point File"==$scope.whoseFile&&($scope.whoseFile="Datum Location File"),$scope.aFile=thisFile,$scope.aFile.fileType=fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,void 0!==$scope.aFile.name){var fI=$scope.aFile.name.lastIndexOf("."),fileExt=$scope.aFile.name.substring(fI+1);$scope.isPhoto=fileExt.match(/(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)?!0:!1}if($scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),void 0!==fileSource&&($scope.aSource=fileSource,$scope.aSource.FULLname=$scope.aSource.source_name,$scope.aSource.agencyName=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name,$scope.agencyNameForCap=$scope.aSource.agencyName),void 0!==dataFile){$scope.ApprovalInfo={},$scope.datafile=dataFile,$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.datafile.collect_date=new Date($scope.datafile.collect_date),$scope.datafile.good_start=getDateTimeParts($scope.datafile.good_start),$scope.datafile.good_end=getDateTimeParts($scope.datafile.good_end),void 0!==$scope.datafile.approval_id&&null!==$scope.datafile.approval_id&&$scope.datafile.approval_id>=1&&DATA_FILE.getDFApproval({id:$scope.datafile.data_file_id},function(approvalResponse){$scope.ApprovalInfo.approvalDate=new Date(approvalResponse.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==approvalResponse.member_id})[0]},function(errorResponse){toastr.error("Error getting data file approval information")});var aProcessor=null!==$scope.datafile.processor_id?allMembers.filter(function(amem){return amem.member_id==$scope.datafile.processor_id})[0]:{};$scope.processor=void 0!==aProcessor.fname?aProcessor.fname+" "+aProcessor.lname:""}}else $scope.whoseFile="Site File",$scope.createOReditFile="create",$scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname,$scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name;$scope.cancel=function(){$scope.sFileIsUploading=!1;var sendBack=$scope.aFile;$uibModalInstance.close(sendBack)},$scope.create=function(valid){if(valid){$scope.sFileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){if(8!==$scope.aFile.filetype_id){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,photo_date:$scope.aFile.photo_date,description:$scope.aFile.description,site_id:$scope.theSite.site_id,source_id:response.source_id,photo_direction:$scope.aFile.photo_direction},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Site File";var state="created",sendBack=[fresponse,state];$scope.sFileIsUploading=!1,$uibModalInstance.close(sendBack)},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})}else $scope.aFile.site_id=$scope.theSite.site_id,$scope.aFile.source_id=response.source_id,FILE.save($scope.aFile).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Site File";var state="created",sendBack=[fresponse,state];$scope.sFileIsUploading=!1,$uibModalInstance.close(sendBack)},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving Source info: "+errorResponse.statusText)})}},$scope.changedFileType=function(){},$scope.save=function(valid){if(2==$scope.fileCopy.filetype_id){var s=$scope.dfCopy.good_start,e=$scope.dfCopy.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}}if(valid){$scope.sFileIsUploading=!0;var whatkind=$scope.aFile.fileBelongsTo;if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.sourceCopy.source_id){var theSource={source_name:$scope.sourceCopy.FULLname,agency_id:$scope.sourceCopy.agency_id};SOURCE.save(theSource).$promise.then(function(sResponse){$scope.aSource=sResponse,$scope.aSource.FULLname=$scope.aSource.source_name,$scope.aSource.agencyName=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name,$scope.fileCopy.source_id=sResponse.source_id,FILE.update({id:$scope.fileCopy.file_id},$scope.fileCopy).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo=whatkind,$scope.aFile=fileResponse,$scope.aFile.fileType=fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),$scope.fileCopy={},$scope.sourceCopy={},$scope.view.FILEval="detail",$scope.sFileIsUploading=!1},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving source: "+errorResponse.statusText)})}else{if("UTC"!=$scope.dfCopy.time_zone){var utcStartDateTime=new Date($scope.dfCopy.good_start).toUTCString(),utcEndDateTime=new Date($scope.dfCopy.good_end).toUTCString();$scope.dfCopy.good_start=utcStartDateTime,$scope.dfCopy.good_end=utcEndDateTime,$scope.dfCopy.time_zone="UTC"}else{var si=$scope.dfCopy.good_start.toString().indexOf("GMT")+3,ei=$scope.dfCopy.good_end.toString().indexOf("GMT")+3;$scope.dfCopy.good_start=$scope.dfCopy.good_start.toString().substring(0,si),$scope.dfCopy.good_end=$scope.dfCopy.good_end.toString().substring(0,ei)}DATA_FILE.update({id:$scope.dfCopy.data_file_id},$scope.dfCopy).$promise.then(function(dfResponse){$scope.datafile=dfResponse,$scope.datafile.collect_date=new Date($scope.datafile.collect_date),$scope.datafile.good_start=getDateTimeParts($scope.datafile.good_start),$scope.datafile.good_end=getDateTimeParts($scope.datafile.good_end);var aProcessor=null!==$scope.datafile.processor_id?allMembers.filter(function(amem){return amem.member_id==$scope.datafile.processor_id})[0]:{};$scope.processor=void 0!==aProcessor.fname?aProcessor.fname+" "+aProcessor.lname:"",FILE.update({id:$scope.fileCopy.file_id},$scope.fileCopy).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo=whatkind,$scope.aFile=fileResponse,$scope.aFile.fileType=fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),$scope.fileCopy={},$scope.dfCopy={},$scope.view.FILEval="detail",$scope.sFileIsUploading=!1},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving data file: "+errorResponse.statusText)})}}},$scope.saveFileUpload=function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.sFileIsUploading=!0;var fileParts={FileEntity:{file_id:$scope.aFile.file_id,name:$scope.aFile.name,description:$scope.aFile.description,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,file_date:$scope.aFile.file_date,hwm_id:$scope.aFile.hwm_id,site_id:$scope.aFile.site_id,filetype_id:$scope.aFile.filetype_id,source_id:$scope.aFile.source_id,path:$scope.aFile.path,data_file_id:$scope.aFile.data_file_id,instrument_id:$scope.aFile.instrument_id,photo_date:$scope.aFile.photo_date,is_nwis:$scope.aFile.is_nwis,objective_point_id:$scope.aFile.objective_point_id},File:void 0!==$scope.aFile.File1?$scope.aFile.File1:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),FILE_STAMP.setStamp(),$scope.stamp=FILE_STAMP.getStamp(),$scope.aFile.name=fresponse.name,$scope.aFile.path=fresponse.path,$scope.isPhoto=void 0!==$scope.aFile.File1?$scope.aFile.File1.type.indexOf("image")>-1?!0:!1:$scope.aFile.File.type.indexOf("image")>-1?!0:!1,void 0!==$scope.aFile.File1&&($scope.aFile.File=$scope.aFile.File1,$scope.aFile.File1=void 0),$scope.sFileIsUploading=!1,$scope.fileItemExists=!0},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},$scope.deleteFile=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.wannaEditFILE=function(){$scope.view.FILEval="edit",$scope.fileCopy=angular.copy($scope.aFile),$scope.dfCopy=angular.copy($scope.datafile),$scope.sourceCopy=angular.copy($scope.aSource)},$scope.cancelFILEEdit=function(){$scope.view.FILEval="detail",$scope.fileCopy={},$scope.dfCopy={},$scope.sourceCopy={}},$scope.approveDF=function(){var thisDF=$scope.datafile,approveModal=$uibModal.open({template:"<div class='modal-header'><h3 class='modal-title'>Approve Data File</h3></div><div class='modal-body'><p>Are you ready to approve this Data File?</p></div><div class='modal-footer'><button class='btn btn-primary' ng-click='approveIt()'>Approve</button><button class='btn btn-warning' ng-click='cancel()'>Cancel</button></div>",controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.approveIt=function(){$uibModalInstance.close(thisDF)}}],size:"sm"});approveModal.result.then(function(df){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),DATA_FILE.approveDF({id:df.data_file_id}).$promise.then(function(approvalResponse){df.approval_id=approvalResponse.approval_id,$scope.datafile=df,toastr.success("Data File Approved"),$scope.ApprovalInfo.approvalDate=new Date(approvalResponse.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==approvalResponse.member_id})[0]},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.unApproveDF=function(){var thisDF=$scope.datafile,unapproveModal=$uibModal.open({template:"<div class='modal-header'><h3 class='modal-title'>Remove Approval</h3></div><div class='modal-body'><p>Are you sure you wan to unapprove this Data File?</p></div><div class='modal-footer'><button class='btn btn-primary' ng-click='unApproveIt()'>Unapprove</button><button class='btn btn-warning' ng-click='cancel()'>Cancel</button></div>",
controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.unApproveIt=function(){$uibModalInstance.close(thisDF)}}],size:"sm"});unapproveModal.result.then(function(df){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),DATA_FILE.unApproveDF({id:df.data_file_id}).$promise.then(function(){df.approval_id=null,$scope.datafile=df,toastr.success("Data File Unapproved"),$scope.ApprovalInfo={}},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("fileCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","SERVER_URL","FILE_STAMP","Site_Files","HWM_Service","Instrument_Service","$uibModal","$filter","$timeout","thisSite","thisSiteFiles","allFileTypes","allAgencies","thisSiteSensors","thisSiteOPs","thisSiteHWMs","FILE","DATA_FILE","MEMBER","SOURCE",function($scope,$rootScope,$cookies,$location,$state,$http,SERVER_URL,FILE_STAMP,Site_Files,HWM_Service,Instrument_Service,$uibModal,$filter,$timeout,thisSite,thisSiteFiles,allFileTypes,allAgencies,thisSiteSensors,thisSiteOPs,thisSiteHWMs,FILE,DATA_FILE,MEMBER,SOURCE){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$scope.serverURL=SERVER_URL,$scope.stamp=FILE_STAMP.getStamp(),$rootScope.$on("fileStampSet",function(event,st){$scope.stamp=st}),$scope.siteHWMs=thisSiteHWMs,$scope.siteSensors=thisSiteSensors;for(var sf=0;sf<thisSiteFiles.length;sf++){var whatKindaFile="";if(thisSiteFiles[sf].hwm_id>0&&null!==thisSiteFiles[sf].hwm_id&&(whatKindaFile="HWM File"),thisSiteFiles[sf].data_file_id>0&&null!==thisSiteFiles[sf].data_file_id&&(whatKindaFile="DataFile File"),thisSiteFiles[sf].instrument_id>0&&null!==thisSiteFiles[sf].instrument_id){whatKindaFile="Sensor File";var thisIns=thisSiteSensors.filter(function(s){return s.instrument_id==thisSiteFiles[sf].instrument_id})[0];thisSiteFiles[sf].typeName=thisIns.serial_number}thisSiteFiles[sf].objective_point_id>0&&null!==thisSiteFiles[sf].objective_point_id&&(whatKindaFile="Objective Point File",thisSiteFiles[sf].typeName=thisSiteOPs.filter(function(op){return op.objective_point_id==thisSiteFiles[sf].objective_point_id})[0].name),""===whatKindaFile&&(whatKindaFile="Site File"),thisSiteFiles[sf].fileBelongsTo=whatKindaFile}Site_Files.setAllSiteFiles(thisSiteFiles),$scope.SiteFiles=Site_Files.getAllSiteFiles(),$scope.siteImageFiles=[];for(var s=0;s<$scope.SiteFiles.length;s++){var extI=$scope.SiteFiles[s].name.indexOf("."),extString=$scope.SiteFiles[s].name.substring(extI+1);["jpg","JPG","jpeg","JPEG","png","PNG","gif","GIF"].indexOf(extString)>-1&&$scope.siteImageFiles.push($scope.SiteFiles[s])}$scope.$on("siteFilesUpdated",function(event,sitefiles){$scope.siteHWMs=HWM_Service.getAllSiteHWMs(),$scope.siteSensors=Instrument_Service.getAllSiteSensors(),$scope.SiteFiles=sitefiles.filter(function(h){return"Site File"==h.fileBelongsTo||"Objective Point File"==h.fileBelongsTo}),angular.forEach($scope.SiteFiles,function(sf){"Objective Point File"==sf.fileBelongsTo&&(sf.typeName=thisSiteOPs.filter(function(op){return op.objective_point_id==sf.objective_point_id})[0].name)});var hwmFiles=sitefiles.filter(function(sfiles){return"HWM File"==sfiles.fileBelongsTo}),sensFiles=sitefiles.filter(function(sfi){return sfi.instrument_id>0&&null!==sfi.instrument_id});if(void 0!==$cookies.get("SessionEventID"))for(var Ehf=0;Ehf<hwmFiles.length;Ehf++)for(var Ehwm=0;Ehwm<$scope.siteHWMs.length;Ehwm++)hwmFiles[Ehf].hwm_id==$scope.siteHWMs[Ehwm].hwm_id&&$scope.siteHWMs[Ehwm].event_id==$cookies.get("SessionEventID")&&$scope.SiteFiles.push(hwmFiles[Ehf]);else for(var hf=0;hf<hwmFiles.length;hf++)for(var hwm=0;hwm<$scope.siteHWMs.length;hwm++)hwmFiles[hf].hwm_id==$scope.siteHWMs[hwm].hwm_id&&$scope.SiteFiles.push(hwmFiles[hf]);if(void 0!==$cookies.get("SessionEventID"))for(var Esf=0;Esf<sensFiles.length;Esf++)for(var Einst=0;Einst<$scope.siteSensors.length;Einst++)sensFiles[Esf].instrument_id==$scope.siteSensors[Einst].instrument_id&&$scope.siteSensors[Einst].event_id==$cookies.get("SessionEventID")&&(sensFiles[Esf].typeName=$scope.siteSensors[Einst].serial_number,$scope.SiteFiles.push(sensFiles[Esf]));else for(var sf=0;sf<sensFiles.length;sf++)for(var inst=0;inst<$scope.siteSensors.length;inst++)sensFiles[sf].instrument_id==$scope.siteSensors[inst].instrument_id&&(sensFiles[sf].typeName=$scope.siteSensors[inst].serial_number,$scope.SiteFiles.push(sensFiles[sf]));$scope.siteImageFiles=[],angular.forEach($scope.SiteFiles,function(sf){var extI=sf.name.indexOf("."),extString=sf.name.substring(extI+1);["jpg","JPG","jpeg","JPEG","png","PNG","gif","GIF"].indexOf(extString)>-1&&$scope.siteImageFiles.push(sf)})},!0),$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){if($scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1,void 0!==newValue){$scope.siteHWMs=HWM_Service.getAllSiteHWMs(),$scope.siteSensors=Instrument_Service.getAllSiteSensors(),$scope.SiteFiles=Site_Files.getAllSiteFiles().filter(function(h){return"Site File"==h.fileBelongsTo||"Objective Point File"==h.fileBelongsTo}),angular.forEach($scope.SiteFiles,function(sf){"Objective Point File"==sf.fileBelongsTo&&(sf.typeName=thisSiteOPs.filter(function(op){return op.objective_point_id==sf.objective_point_id})[0].name),$scope.siteImageFiles=[];var extI=sf.name.indexOf("."),extString=sf.name.substring(extI+1);["jpg","JPG","jpeg","JPEG","png","PNG","gif","GIF"].indexOf(extString)>-1&&$scope.siteImageFiles.push(sf)});for(var hwmFiles=Site_Files.getAllSiteFiles().filter(function(sfiles){return"HWM File"==sfiles.fileBelongsTo}),sensFiles=Site_Files.getAllSiteFiles().filter(function(sfi){return sfi.instrument_id>0&&null!==sfi.instrument_id}),hf=0;hf<hwmFiles.length;hf++)for(var hwm=0;hwm<$scope.siteHWMs.length;hwm++)hwmFiles[hf].hwm_id==$scope.siteHWMs[hwm].hwm_id&&$scope.siteHWMs[hwm].event_id==$cookies.get("SessionEventID")&&$scope.SiteFiles.push(hwmFiles[hf]);for(var sf=0;sf<sensFiles.length;sf++)for(var inst=0;inst<$scope.siteSensors.length;inst++)sensFiles[sf].instrument_id==$scope.siteSensors[inst].instrument_id&&$scope.siteSensors[inst].event_id==$cookies.get("SessionEventID")&&(sensFiles[sf].typeName=$scope.siteSensors[inst].serial_number,$scope.SiteFiles.push(sensFiles[sf]))}else $scope.SiteFiles=Site_Files.getAllSiteFiles()},!0),$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})},$scope.showFileModal=function(FileClicked){var SindexClicked=$scope.SiteFiles.indexOf(FileClicked);$scope.siteFileTypes=allFileTypes.filter(function(ft){return"Photo"===ft.filetype||"Historic Citation"===ft.filetype||"Field Sheets"===ft.filetype||"Level Notes"===ft.filetype||"Site Sketch"===ft.filetype||"Other"===ft.filetype||"Link"===ft.filetype||"Sketch"===ft.filetype||"Landowner Permission Form"===ft.filetype}),$scope.hwmFileTypes=allFileTypes.filter(function(hft){return"Photo"===hft.filetype||"Historic Citation"===hft.filetype||"Field Sheets"===hft.filetype||"Level Notes"===hft.filetype||"Other"===hft.filetype||"Link"===hft.filetype||"Sketch"===hft.filetype}),$scope.sensorFileTypes=allFileTypes.filter(function(sft){return"Photo"===sft.filetype||"Data"===sft.filetype||"Historic Citation"===sft.filetype||"Field Sheets"===sft.filetype||"Level Notes"===sft.filetype||"Other"===sft.filetype||"Link"===sft.filetype||"Sketch"===sft.filetype}),$scope.opFileTypes=allFileTypes.filter(function(oft){return"Photo"===oft.filetype||"Field Sheets"===oft.filetype||"Level Notes"===oft.filetype||"Other"===oft.filetype||"NGS Datasheet"===oft.filetype||"Sketch"===oft.filetype});var modalInstance=$uibModal.open({templateUrl:0!==FileClicked?"FILEmodal.html":"FileCreateModal.html",controller:"siteFileModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{fileExists:function(){return 0!==FileClicked?FILE.getFileItem({id:FileClicked.file_id}).$promise:void 0},fileTypeList:function(){if(0===FileClicked)return $scope.siteFileTypes;switch(FileClicked.fileBelongsTo){case"HWM File":return $scope.hwmFileTypes;case"DataFile File":return $scope.sensorFileTypes;case"Sensor File":return $scope.sensorFileTypes;case"Objective Point File":return $scope.opFileTypes;case"Site File":return $scope.siteFileTypes}},agencyList:function(){return allAgencies},thisFile:function(){return 0!==FileClicked?FileClicked:void 0},fileSite:function(){return thisSite},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise},fileSource:function(){return 0!==FileClicked&&void 0!==FileClicked.source_id?SOURCE.query({id:FileClicked.source_id}).$promise:void 0},dataFile:function(){return 0!==FileClicked&&void 0!==FileClicked.data_file_id?DATA_FILE.query({id:FileClicked.data_file_id}).$promise:void 0}}});modalInstance.result.then(function(createdFile){"created"==createdFile[1]&&($scope.SiteFiles.push(createdFile[0]),Site_Files.setAllSiteFiles($scope.SiteFiles)),void 0===createdFile[1]&&($scope.SiteFiles[SindexClicked]=createdFile,Site_Files.setAllSiteFiles($scope.SiteFiles),$scope.stamp=FILE_STAMP.getStamp()),"deleted"==createdFile[1]&&($scope.SiteFiles.splice(SindexClicked,1),Site_Files.setAllSiteFiles($scope.SiteFiles))})}}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("approvalCtrl",["$scope","$cookies","$rootScope","$location","$http","stateList","instrumentList","allSensorTypes","allDepTypes","HWM","DATA_FILE","INSTRUMENT","MEMBER","SITE",function($scope,$cookies,$rootScope,$location,$http,stateList,instrumentList,allSensorTypes,allDepTypes,HWM,DATA_FILE,INSTRUMENT,MEMBER,SITE){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{if($rootScope.thisPage="Approval",$rootScope.activeMenu="approval",$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEvent=null!==$cookies.get("SessionEventName")&&void 0!==$cookies.get("SessionEventName")?$cookies.get("SessionEventName"):"All Events"}),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll(function(response){$scope.allMembers=response}).$promise,$scope.allStates=stateList,$scope.allInstruments=instrumentList,$scope.allSensorTypes=allSensorTypes,$scope.allDeploymentTypes=allDepTypes,$scope.ChosenEvent={},$scope.ChosenState={},$scope.ChosenMember={},$scope.unApprovedHWMs=[],$scope.showHWMbox=!1,$scope.unApprovedDFs=[],$scope.showDFbox=!1,void 0!==$rootScope.approvalSearch){var thisSearch=$rootScope.approvalSearch;$scope.sessionEvent=Number(thisSearch.eventID),$scope.ChosenState.id=thisSearch.stateID,$scope.ChosenMember.id=thisSearch.memberID,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM.getUnapprovedHWMs({IsApproved:"false",Event:thisSearch.eventID,Member:thisSearch.memberID,State:thisSearch.stateID},function(response){$scope.unApprovedHWMs=response,$scope.showHWMbox=!0},function(errorResponse){alert("Error: "+errorResponse.statusText)}),DATA_FILE.getUnapprovedDFs({IsApproved:"false",Event:thisSearch.eventID,Processor:thisSearch.memberID,State:thisSearch.stateID},function(response1){var DFs=response1;angular.forEach(DFs,function(df){var thisdfInst=$scope.allInstruments.filter(function(i){return i.instrument_id==df.instrument_id})[0],formattedDF={},siteID=thisdfInst.site_id;formattedDF.SiteId=siteID,formattedDF.senType=$scope.allSensorTypes.filter(function(s){return s.sensor_type_id==thisdfInst.sensor_type_id})[0].sensor;var depType=$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==thisdfInst.deployment_type_id})[0];formattedDF.depType=void 0!==depType?depType.method:void 0,formattedDF.InstrID=thisdfInst.instrument_id,SITE.query({id:siteID}).$promise.then(function(response2){formattedDF.SiteNo=response2.site_no,$scope.unApprovedDFs.push(formattedDF)})}),$scope.showDFbox=!0},function(errorResponse1){alert("Error: "+errorResponse1.statusText)})}$scope.search=function(){$scope.unApprovedHWMs=[],$scope.showHWMbox=!1,$scope.unApprovedDFs=[],$scope.showDFbox=!1;var evID=null!==$cookies.get("SessionEventID")&&void 0!==$cookies.get("SessionEventID")?$cookies.get("SessionEventID"):0,sID=void 0!==$scope.ChosenState.id?$scope.ChosenState.id:0,mID=void 0!==$scope.ChosenMember.id?$scope.ChosenMember.id:0;$rootScope.approvalSearch={eventID:evID,stateID:sID,memberID:mID},$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM.getUnapprovedHWMs({IsApproved:"false",Event:evID,Member:mID,State:sID},function(response){angular.forEach(response,function(h){SITE.query({id:h.site_id}).$promise.then(function(sresponse){h.site_no=sresponse.site_no,$scope.unApprovedHWMs.push(h)})}),$scope.showHWMbox=!0},function(errorResponse){alert("Error: "+errorResponse.statusText)}),DATA_FILE.getUnapprovedDFs({IsApproved:"false",Event:evID,Processor:mID,State:sID},function(response1){var DFs=response1;angular.forEach(DFs,function(df){var thisdfInst=$scope.allInstruments.filter(function(i){return i.instrument_id==df.instrument_id})[0],formattedDF={},siteID=thisdfInst.site_id;formattedDF.SiteId=siteID,formattedDF.senType=$scope.allSensorTypes.filter(function(s){return s.sensor_type_id==thisdfInst.sensor_type_id})[0].sensor;var depType=$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==thisdfInst.deployment_type_id})[0];formattedDF.depType=void 0!==depType?depType.method:void 0,formattedDF.InstrID=thisdfInst.instrument_id,SITE.query({id:siteID}).$promise.then(function(response2){formattedDF.SiteNo=response2.site_no,$scope.unApprovedDFs.push(formattedDF)})}),$scope.showDFbox=!0},function(errorResponse1){alert("Error: "+errorResponse1.statusText)})}}}])}(),function(){"use strict";var STNResource=angular.module("STNResource",["ngResource"]),rootURL="https://stn.wim.usgs.gov/STNServices";STNResource.factory("GEOCODE",["$resource",function($resource){return $resource(rootURL+"/Geocode/location",{},{getAddressParts:{method:"GET",params:{Latitude:"@Latitude",Longitude:"@Longitude"}}})}]),STNResource.factory("AGENCY",["$resource",function($resource){return $resource(rootURL+"/Agencies/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("CONTACT_TYPE",["$resource",function($resource){return $resource(rootURL+"/ContactTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("CONTACT",["$resource",function($resource){return $resource(rootURL+"/Contacts/:id.json",{},{query:{},getContactModel:{method:"GET",isArray:!0},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("COUNTIES",["$resource",function($resource){return $resource(rootURL+"/Counties/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("DATA_FILE",["$resource",function($resource){return $resource(rootURL+"/DataFiles/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getDFApproval:{method:"GET",cache:!1,isArray:!1,url:rootURL+"/DataFiles/:id/Approval.json"},getUnapprovedDFs:{method:"GET",isArray:!0,cache:!1},approveDF:{method:"POST",cache:!1,isArray:!1,params:{id:"@id"},url:rootURL+"/datafiles/:id/Approve.json"},approveNWISDF:{method:"POST",cache:!1,isArray:!1,params:{id:"@id"},url:rootURL+"/datafiles/:id/NWISApprove.json"},unApproveDF:{method:"DELETE",cache:!1,isArray:!1,url:rootURL+"/datafiles/:id/Unapprove.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("DEPLOYMENT_PRIORITY",["$resource",function($resource){return $resource(rootURL+"/DeploymentPriorities/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("DEPLOYMENT_TYPE",["$resource",function($resource){return $resource(rootURL+"/DeploymentTypes/:id.json",{},{query:{},getDepSensType:{method:"GET",isArray:!1,url:rootURL+"/DeploymentTypes/:id/SensorType.json"},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("EVENT",["$resource",function($resource){return $resource(rootURL+"/Events/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getEventSites:{method:"GET",isArray:!0,url:rootURL+"/Events/:id/Sites.json"},getFilteredEvents:{method:"GET",isArray:!0,url:rootURL+"/Events/FilteredEvents.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("EVENT_STATUS",["$resource",function($resource){return $resource(rootURL+"/EventStatus/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("EVENT_TYPE",["$resource",function($resource){return $resource(rootURL+"/EventTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("FILE",["$resource",function($resource){return $resource(rootURL+"/Files/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getFileItem:{method:"GET",isArray:!1,url:rootURL+"/Files/:id/Item"},update:{method:"PUT",cache:!1,isArray:!1},uploadFile:{method:"POST",url:rootURL+"/Files/bytes",headers:{"Content-Type":void 0},transformRequest:angular.identity,cache:!1,isArray:!1},downloadZip:{method:"GET",responseType:"arraybuffer",cache:!1,url:rootURL+"/Events/:eventId/EventFileItems"},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("FILE_STAMP",["$rootScope",function($rootScope){return{getStamp:function(){var stamp="?"+(new Date).getTime();return stamp},setStamp:function(){var stamp="?"+(new Date).getTime();$rootScope.$broadcast("fileStampSet",stamp)}}}]),STNResource.factory("FILE_TYPE",["$resource",function($resource){return $resource(rootURL+"/FileTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HORIZONTAL_COLL_METHODS",["$resource",function($resource){return $resource(rootURL+"/HorizontalMethods/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HORIZONTAL_DATUM",["$resource",function($resource){return $resource(rootURL+"/HorizontalDatums/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HOUSING_TYPE",["$resource",function($resource){return $resource(rootURL+"/HousingTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HWM",["$resource",function($resource){return $resource(rootURL+"/hwms/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getEventStateHWMs:{method:"GET",isArray:!0,url:rootURL+"/Events/:eventId/stateHWMs.json?State=:state"},getEventSiteHWMs:{method:"GET",isArray:!0,url:rootURL+"/Sites/:siteId/EventHWMs.json"},getFilteredHWMs:{method:"GET",isArray:!0,url:rootURL+"/HWMs/FilteredHWMs.json"},getUnapprovedHWMs:{method:"GET",isArray:!0,cache:!1},getHWMApproval:{method:"GET",cache:!1,isArray:!1,url:rootURL+"/hwms/:id/Approval.json"},approveHWM:{method:"POST",cache:!1,isArray:!1,params:{id:"@id"},url:rootURL+"/hwms/:id/Approve.json"},unApproveHWM:{method:"DELETE",cache:!1,isArray:!1,url:rootURL+"/hwms/:id/Unapprove.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HWM_Service",[function(){var allSiteHWMs=[],bulkSearch={};return{getAllSiteHWMs:function(){return allSiteHWMs},setAllSiteHWMs:function(sh){allSiteHWMs=sh},setBulkHWMSearch:function(searchTerms){bulkSearch=searchTerms},getBulkHWMSearch:function(){return bulkSearch}}}]),STNResource.factory("HWM_QUALITY",["$resource",function($resource){return $resource(rootURL+"/HWMQualities/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HWM_TYPE",["$resource",function($resource){return $resource(rootURL+"/HWMTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("INSTRUMENT",["$resource",function($resource){return $resource(rootURL+"/Instruments/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getSensorView:{method:"GET",isArray:!0,url:rootURL+"/SensorViews.json"},getstatusInstruments:{method:"GET",isArray:!0,url:rootURL+"/Instruments.json"},getFullInstrument:{method:"GET",url:rootURL+"/Instruments/:id/FullInstrument.json"},getInstrumentStatus:{method:"GET",url:rootURL+"/Instruments/:id/InstrumentStatus.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("Instrument_Service",[function(){var allSiteSensors=[];return{getAllSiteSensors:function(){return allSiteSensors},setAllSiteSensors:function(ss){allSiteSensors=ss}}}]),STNResource.factory("INSTRUMENT_STATUS",["$resource",function($resource){return $resource(rootURL+"/InstrumentStatus/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("INST_COLL_CONDITION",["$resource",function($resource){return $resource(rootURL+"/InstrCollectConditions/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("LANDOWNER_CONTACT",["$resource",function($resource){return $resource(rootURL+"/LandOwners/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("Map_Site",["SITE","$rootScope","$cookies",function(SITE,$rootScope,$cookies){var MapSiteParts=[];return{getMapSiteParts:function(){return MapSiteParts},setMapSiteParts:function(siteId){MapSiteParts=[],SITE.query({id:siteId}).$promise.then(function(response){MapSiteParts.push(response),SITE.getSitePeaks({id:siteId}).$promise.then(function(pResponse){MapSiteParts.push(pResponse),$rootScope.$broadcast("mapSiteClickResults",MapSiteParts)})})}}}]),STNResource.factory("Map_Filter",["$rootScope",function($rootScope){var filteredSites=[];return{setFilteredSites:function(sitesArray){filteredSites=sitesArray,$rootScope.$broadcast("filterSitesClick",filteredSites)}}}]),STNResource.factory("MARKER",["$resource",function($resource){return $resource(rootURL+"/Markers/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("MEMBER",["$resource",function($resource){return $resource(rootURL+"/Members/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getRoleMembers:{method:"GET",isArray:!0,url:rootURL+"/Roles/:roleId/Members.json"},getEventPeople:{method:"GET",isArray:!0,url:rootURL+"/Events/:Eventid/Members.json"},changePW:{method:"GET",isArray:!1,url:rootURL+"/Members.json"},addMember:{method:"POST",cache:!1,isArray:!1,url:rootURL+"/Members/:pass/addMember"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},deleteMember:{method:"DELETE",cache:!1,isArray:!1,url:rootURL+"/Members/:id"}})}]),STNResource.factory("NETWORK_NAME",["$resource",function($resource){return $resource(rootURL+"/NetworkNames/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("NETWORK_TYPE",["$resource",function($resource){return $resource(rootURL+"/NetworkTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("OBJECTIVE_POINT",["$resource",function($resource){return $resource(rootURL+"/ObjectivePoints/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},getOPFiles:{method:"GET",isArray:!0,url:rootURL+"/ObjectivePoints/:id/Files"},getOPControls:{method:"GET",cache:!1,isArray:!0,url:rootURL+"/ObjectivePoints/:id/OPControls.json"},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("OP_CONTROL_IDENTIFIER",["$resource",function($resource){return $resource(rootURL+"/OPControlIdentifiers/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("OP_MEASURE",["$resource",function($resource){return $resource(rootURL+"/OPMeasurements/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getInstStatOPMeasures:{method:"GET",isArray:!0,url:rootURL+"/InstrumentStatus/:instrumentStatusId/OPMeasurements"},getDatumLocationOPMeasures:{method:"GET",isArray:!0,url:rootURL+"/ObjectivePoints/:objectivePointId/OPMeasurements"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("OP_QUALITY",["$resource",function($resource){return $resource(rootURL+"/ObjectivePointQualities/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("OP_TYPE",["$resource",function($resource){return $resource(rootURL+"/OPTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("PEAK",["$resource",function($resource){return $resource(rootURL+"/PeakSummaries/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getPeakSummaryDFs:{method:"GET",isArray:!0,cache:!1,url:rootURL+"/PeakSummaries/:id/DataFiles.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("REPORT",["$resource",function($resource){return $resource(rootURL+"/ReportingMetrics/:id.json",{},{query:{},getReportByEvSt:{method:"GET",isArray:!0},getDailyReportTots:{method:"GET",url:rootURL+"/ReportingMetrics/DailyReportTotals"},getMemberReports:{method:"GET",isArray:!0,url:rootURL+"/Members/:memberId/Reports.json"},getFilteredReports:{method:"GET",isArray:!0,url:rootURL+"/ReportingMetrics/FilteredReports.json"},getReportwithContacts:{method:"GET",isArray:!0,url:rootURL+"/ReportResource/FilteredReportModel.json"},getReportsCSV:{method:"GET",url:rootURL+"/ReportingMetrics/FilteredReports.csv"},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},addReportContact:{method:"POST",cache:!1,isArray:!1,params:{ReportId:"@reportId",ContactTypeId:"@contactTypeId"},url:rootURL+"/ReportingMetrics/:reportId/AddContactType/:contactTypeId"},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("ROLE",["$resource",function($resource){return $resource(rootURL+"/Roles/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0}})}]),STNResource.factory("SENSOR_BRAND",["$resource",function($resource){return $resource(rootURL+"/SensorBrands/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("SENSOR_TYPE",["$resource",function($resource){return $resource(rootURL+"/SensorTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getSensorDeploymentTypes:{method:"GET",isArray:!0,url:rootURL+"/SensorTypes/:id/DeploymentTypes.json"},addSensorDeploymentType:{method:"POST",cache:!1,isArray:!0,params:{sensorTypeId:"@sensorTypeId",DeploymentTypeId:"@deploymentTypeId"},url:rootURL+"/SensorTypes/:sensorTypeId/addDeploymentType"},removeSensorDeploymentType:{method:"POST",isArray:!1,params:{sensorTypeId:"@sensorTypeId",DeploymentTypeId:"@deploymentTypeId"},url:rootURL+"/SensorTypes/:sensorTypeId/removeDeploymentType"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("SITE",["$resource",function($resource){return $resource(rootURL+"/Sites/:id.json",{},{query:{},getProximitySites:{method:"GET",isArray:!0,params:{Latitude:"@latitude",Longitude:"@longitude",Buffer:"@buffer"}},getAll:{method:"GET",isArray:!0},getSearchedSite:{method:"GET",isArray:!1,url:rootURL+"/Sites/Search"},getFilteredSites:{method:"GET",isArray:!0,url:rootURL+"/Sites/FilteredSites.json"},getSiteLandOwner:{method:"GET",url:rootURL+"/Sites/:id/LandOwner.json"},getSiteNetworkTypes:{method:"GET",isArray:!0,url:rootURL+"/sites/:id/networkTypes.json"},postSiteNetworkType:{method:"POST",cache:!1,params:{siteId:"@siteId",NetworkTypeId:"@networkTypeId"},isArray:!0,url:rootURL+"/sites/:siteId/AddNetworkType"},deleteSiteNetworkType:{method:"DELETE",cache:!1,isArray:!1,url:rootURL+"/sites/:siteId/removeNetworkType?NetworkTypeId=:networkTypeId"},getSiteNetworkNames:{method:"GET",isArray:!0,url:rootURL+"/sites/:id/networkNames.json"
},postSiteNetworkName:{method:"POST",cache:!1,params:{siteId:"@siteId",NetworkNameId:"@networkNameId"},isArray:!0,url:rootURL+"/sites/:siteId/AddNetworkName"},deleteSiteNetworkName:{method:"DELETE",cache:!1,isArray:!1,url:rootURL+"/sites/:siteId/removeNetworkName?NetworkNameId=:networkNameId"},getSiteHousings:{method:"GET",isArray:!0,url:rootURL+"/sites/:id/SiteHousings.json"},getSiteOPs:{method:"GET",isArray:!0,url:rootURL+"/Sites/:id/ObjectivePoints.json"},getSiteSensors:{method:"GET",isArray:!0,url:rootURL+"/Sites/:id/SiteFullInstrumentList.json"},getSiteHWMs:{method:"GET",isArray:!0,url:rootURL+"/Sites/:id/HWMs.json"},getSiteFiles:{method:"GET",isArray:!0,url:rootURL+"/Sites/:id/Files.json"},getSitePeaks:{method:"GET",isArray:!0,url:rootURL+"/Sites/:id/PeakSummaryView.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("Site_Files",["$cookies","$rootScope",function($cookies,$rootScope){var allSiteFiles=[];return{getAllSiteFiles:function(){return allSiteFiles},setAllSiteFiles:function(sf){allSiteFiles=sf,$rootScope.$broadcast("siteFilesUpdated",allSiteFiles)}}}]),STNResource.factory("STATE",["$resource",function($resource){return $resource(rootURL+"/States/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("SITE_HOUSING",["$resource",function($resource){return $resource(rootURL+"/SiteHousings/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("STATUS_TYPE",["$resource",function($resource){return $resource(rootURL+"/StatusTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("SOURCE",["$resource",function($resource){return $resource(rootURL+"/Sources/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("VERTICAL_COLL_METHOD",["$resource",function($resource){return $resource(rootURL+"/VerticalMethods/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("VERTICAL_DATUM",["$resource",function($resource){return $resource(rootURL+"/VerticalDatums/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("Login",["$resource",function($resource){return $resource(rootURL+"/login",{},{login:{method:"GET",cache:!1,isArray:!1}})}])}(),function(){"use strict";var STNBusinessServices=angular.module("STNBusinessServices",["ngCookies"]);STNBusinessServices.factory("setCreds",["$cookies",function($cookies){return function(un,pw,userName,userRole,userID){var token=un.concat(":",pw);$cookies.STNCreds=token,$cookies.STNUsername=un,$cookies.usersName=userName,$cookies.mID=userID;var roleName;switch(userRole){case 1:roleName="Admin";break;case 2:roleName="Manager";break;case 3:roleName="Field";break;case 4:roleName="Public";break;default:roleName="CitizenManager"}$cookies.usersRole=roleName}}]),STNBusinessServices.factory("setSessionEvent",["$cookies",function($cookies){return function(evId,evName){$cookies.SessionEventID=evId,$cookies.SessionEventName=evName}}]),STNBusinessServices.factory("setSessionTeam",["$cookies",function($cookies){return function(tId,tName){$cookies.SessionTeaID=tId,$cookies.SessionTeamName=tName}}]),STNBusinessServices.factory("setLoggedIn",["$cookies",function($cookies){var loggedIn=!1;return{isLoggedIn:function(){return loggedIn},changeLoggedIn:function(YesOrNo){loggedIn=YesOrNo}}}]),STNBusinessServices.factory("checkCreds",["$cookies",function($cookies){return function(){var returnVal=!1,STNCreds=$cookies.STNCreds;return void 0!==STNCreds&&""!==STNCreds&&(returnVal=!0),returnVal}}]),STNBusinessServices.factory("getCreds",["$cookies",function($cookies){return function(){var returnVal="",STNCreds=$cookies.STNCreds;return void 0!==STNCreds&&""!==STNCreds&&(returnVal=btoa(STNCreds)),returnVal}}]),STNBusinessServices.factory("getUsersNAME",["$cookies",function($cookies){return function(){var returnVal="",usesName=$cookies.usersName;return void 0!==usesName&&""!==usesName&&(returnVal=usesName),returnVal}}]),STNBusinessServices.factory("getUserID",["$cookies",function($cookies){return function(){var returnVal="",userID=$cookies.mID;return void 0!==userID&&""!==userID&&(returnVal=userID),returnVal}}]),STNBusinessServices.factory("getUsername",["$cookies",function($cookies){return function(){var returnVal="",STNUsername=$cookies.STNUsername;return void 0!==STNUsername&&""!==STNUsername&&(returnVal=STNUsername),returnVal}}]),STNBusinessServices.factory("getUserRole",["$cookies",function($cookies){return function(){var returnVal="",userRole=$cookies.usersRole;return void 0!==userRole&&""!==userRole&&(returnVal=userRole),returnVal}}]),STNBusinessServices.factory("deleteCreds",["$cookies",function($cookies){return function(){$cookies.STNCreds="",$cookies.STNUsername="",$cookies.usersName="",$cookies.usersRole=""}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("ConfirmModalCtrl",["$scope","$uibModalInstance","nameToRemove","what",function($scope,$uibModalInstance,nameToRemove,what){switch(what){case"Member":$scope.nameToRmv=nameToRemove.fname+" "+nameToRemove.lname;break;case"Event":$scope.nameToRmv=nameToRemove.event_name;break;case"Agency":$scope.nameToRmv=nameToRemove.agency_name;break;case"Contact Type":$scope.nameToRmv=nameToRemove.type;break;case"Deployment Priority":$scope.nameToRmv=nameToRemove.priority_name;break;case"Event Status":$scope.nameToRmv=nameToRemove.status;break;case"File Type":$scope.nameToRmv=nameToRemove.filetype;break;case"Horizontal Collection Method":$scope.nameToRmv=nameToRemove.hcollect_method;break;case"Horizontal Datum":$scope.nameToRmv=nameToRemove.datum_name;break;case"Housing Type":$scope.nameToRmv=nameToRemove.type_name;break;case"HWM Quality":$scope.nameToRmv=nameToRemove.hwm_quality;break;case"HWM Type":$scope.nameToRmv=nameToRemove.hwm_type;break;case"Instrument Collection Condition":$scope.nameToRmv=nameToRemove.condition;break;case"Marker":$scope.nameToRmv=nameToRemove.marker1;break;case"Network Name":$scope.nameToRmv=nameToRemove.name;break;case"Objective Point Quality":$scope.nameToRmv=nameToRemove.quality;break;case"Objective Point Type":$scope.nameToRmv=nameToRemove.op_type;break;case"Sensor Brand":$scope.nameToRmv=nameToRemove.brand_name;break;case"Deployment Type":$scope.nameToRmv=nameToRemove.method;break;case"Status Type":$scope.nameToRmv=nameToRemove.status;break;case"Sensor Type":$scope.nameToRmv=nameToRemove.sensor;break;case"Network Type":$scope.nameToRmv=nameToRemove.network_type_name;break;case"Vertical Collection Method":$scope.nameToRmv=nameToRemove.vcollect_method;break;case"Vertical Datum":$scope.nameToRmv=nameToRemove.datum_abbreviation;break;case"Objective Point":$scope.nameToRmv=nameToRemove.name;break;case"HWM":var aDate=new Date(nameToRemove.flag_date),year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=monthNames[month]+" "+day+", "+year;$scope.nameToRmv="Flagged on: "+dateWOtime;break;case"Sensor":$scope.nameToRmv=nameToRemove.deploymentType;break;case"Proposed Sensor":$scope.nameToRmv="Proposed Sensor";break;case"File":var f=void 0!==nameToRemove.name||null!==nameToRemove.name?nameToRemove.name:nameToRemove.file_date;f=null!==f||void 0!==f?f:nameToRemove.file_id,$scope.nameToRmv=f;break;case"Peak":$scope.nameToRmv=nameToRemove.peak_summary_id}$scope.what=what,$scope.ok=function(){$uibModalInstance.close(nameToRemove)},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}}])}(),!function($){function Inputmask(alias,options){return this instanceof Inputmask?("object"==typeof alias?options=alias:(options=options||{},options.alias=alias),this.el=void 0,this.opts=$.extend(!0,{},this.defaults,options),this.noMasksCache=options&&void 0!==options.definitions,this.userOptions=options||{},void resolveAlias(this.opts.alias,options,this.opts)):new Inputmask(alias,options)}function isInputEventSupported(eventName){var el=document.createElement("input"),evName="on"+eventName,isSupported=evName in el;return isSupported||(el.setAttribute(evName,"return;"),isSupported="function"==typeof el[evName]),el=null,isSupported}function isInputTypeSupported(inputType){var isSupported="text"===inputType||"tel"===inputType||"password"===inputType;if(!isSupported){var el=document.createElement("input");el.setAttribute("type",inputType),isSupported="text"===el.type,el=null}return isSupported}function resolveAlias(aliasStr,options,opts){var aliasDefinition=opts.aliases[aliasStr];return aliasDefinition?(aliasDefinition.alias&&resolveAlias(aliasDefinition.alias,void 0,opts),$.extend(!0,opts,aliasDefinition),$.extend(!0,opts,options),!0):(null===opts.mask&&(opts.mask=aliasStr),!1)}function importAttributeOptions(npt,opts,userOptions){function importOption(option,optionData){optionData=void 0!==optionData?optionData:npt.getAttribute("data-inputmask-"+option),null!==optionData&&("string"==typeof optionData&&(0===option.indexOf("on")?optionData=window[optionData]:"false"===optionData?optionData=!1:"true"===optionData&&(optionData=!0)),"mask"===option&&0===optionData.indexOf("[")?(userOptions[option]=optionData.replace(/[\s[\]]/g,"").split(","),userOptions[option][0]=userOptions[option][0].replace("'",""),userOptions[option][userOptions[option].length-1]=userOptions[option][userOptions[option].length-1].replace("'","")):userOptions[option]=optionData)}var option,dataoptions,optionData,attrOptions=npt.getAttribute("data-inputmask");attrOptions&&""!==attrOptions&&(attrOptions=attrOptions.replace(new RegExp("'","g"),'"'),dataoptions=JSON.parse("{"+attrOptions+"}"));for(option in opts){if(dataoptions){optionData=void 0;for(var p in dataoptions)if(p.toLowerCase()===option.toLowerCase()){optionData=dataoptions[p];break}}importOption(option,optionData)}if(userOptions.alias){resolveAlias(userOptions.alias,userOptions,opts);for(option in opts)importOption(option)}return $.extend(!0,opts,userOptions),opts}function generateMaskSet(opts,nocache){function analyseMask(mask){function MaskToken(isGroup,isOptional,isQuantifier,isAlternator){this.matches=[],this.isGroup=isGroup||!1,this.isOptional=isOptional||!1,this.isQuantifier=isQuantifier||!1,this.isAlternator=isAlternator||!1,this.quantifier={min:1,max:1}}function insertTestDefinition(mtoken,element,position){var maskdef=opts.definitions[element];position=void 0!==position?position:mtoken.matches.length;var prevMatch=mtoken.matches[position-1];if(maskdef&&!escaped){maskdef.placeholder=$.isFunction(maskdef.placeholder)?maskdef.placeholder(opts):maskdef.placeholder;for(var prevalidators=maskdef.prevalidator,prevalidatorsL=prevalidators?prevalidators.length:0,i=1;i<maskdef.cardinality;i++){var prevalidator=prevalidatorsL>=i?prevalidators[i-1]:[],validator=prevalidator.validator,cardinality=prevalidator.cardinality;mtoken.matches.splice(position++,0,{fn:validator?"string"==typeof validator?new RegExp(validator):new function(){this.test=validator}:new RegExp("."),cardinality:cardinality?cardinality:1,optionality:mtoken.isOptional,newBlockMarker:void 0===prevMatch||prevMatch.def!==(maskdef.definitionSymbol||element),casing:maskdef.casing,def:maskdef.definitionSymbol||element,placeholder:maskdef.placeholder,mask:element}),prevMatch=mtoken.matches[position-1]}mtoken.matches.splice(position++,0,{fn:maskdef.validator?"string"==typeof maskdef.validator?new RegExp(maskdef.validator):new function(){this.test=maskdef.validator}:new RegExp("."),cardinality:maskdef.cardinality,optionality:mtoken.isOptional,newBlockMarker:void 0===prevMatch||prevMatch.def!==(maskdef.definitionSymbol||element),casing:maskdef.casing,def:maskdef.definitionSymbol||element,placeholder:maskdef.placeholder,mask:element})}else mtoken.matches.splice(position++,0,{fn:null,cardinality:0,optionality:mtoken.isOptional,newBlockMarker:void 0===prevMatch||prevMatch.def!==element,casing:null,def:element,placeholder:void 0,mask:element}),escaped=!1}function verifyGroupMarker(lastMatch,isOpenGroup){lastMatch.isGroup&&(lastMatch.isGroup=!1,insertTestDefinition(lastMatch,opts.groupmarker.start,0),isOpenGroup!==!0&&insertTestDefinition(lastMatch,opts.groupmarker.end))}function maskCurrentToken(m,currentToken,lastMatch,extraCondition){currentToken.matches.length>0&&(void 0===extraCondition||extraCondition)&&(lastMatch=currentToken.matches[currentToken.matches.length-1],verifyGroupMarker(lastMatch)),insertTestDefinition(currentToken,m)}function defaultCase(){if(openenings.length>0){if(currentOpeningToken=openenings[openenings.length-1],maskCurrentToken(m,currentOpeningToken,lastMatch,!currentOpeningToken.isAlternator),currentOpeningToken.isAlternator){alternator=openenings.pop();for(var mndx=0;mndx<alternator.matches.length;mndx++)alternator.matches[mndx].isGroup=!1;openenings.length>0?(currentOpeningToken=openenings[openenings.length-1],currentOpeningToken.matches.push(alternator)):currentToken.matches.push(alternator)}}else maskCurrentToken(m,currentToken,lastMatch)}function reverseTokens(maskToken){function reverseStatic(st){return st===opts.optionalmarker.start?st=opts.optionalmarker.end:st===opts.optionalmarker.end?st=opts.optionalmarker.start:st===opts.groupmarker.start?st=opts.groupmarker.end:st===opts.groupmarker.end&&(st=opts.groupmarker.start),st}maskToken.matches=maskToken.matches.reverse();for(var match in maskToken.matches){var intMatch=parseInt(match);if(maskToken.matches[match].isQuantifier&&maskToken.matches[intMatch+1]&&maskToken.matches[intMatch+1].isGroup){var qt=maskToken.matches[match];maskToken.matches.splice(match,1),maskToken.matches.splice(intMatch+1,0,qt)}maskToken.matches[match]=void 0!==maskToken.matches[match].matches?reverseTokens(maskToken.matches[match]):reverseStatic(maskToken.matches[match])}return maskToken}for(var match,m,openingToken,currentOpeningToken,alternator,lastMatch,groupToken,tokenizer=/(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g,escaped=!1,currentToken=new MaskToken,openenings=[],maskTokens=[];match=tokenizer.exec(mask);)if(m=match[0],escaped)defaultCase();else switch(m.charAt(0)){case opts.escapeChar:escaped=!0;break;case opts.optionalmarker.end:case opts.groupmarker.end:if(openingToken=openenings.pop(),void 0!==openingToken)if(openenings.length>0){if(currentOpeningToken=openenings[openenings.length-1],currentOpeningToken.matches.push(openingToken),currentOpeningToken.isAlternator){alternator=openenings.pop();for(var mndx=0;mndx<alternator.matches.length;mndx++)alternator.matches[mndx].isGroup=!1;openenings.length>0?(currentOpeningToken=openenings[openenings.length-1],currentOpeningToken.matches.push(alternator)):currentToken.matches.push(alternator)}}else currentToken.matches.push(openingToken);else defaultCase();break;case opts.optionalmarker.start:openenings.push(new MaskToken(!1,!0));break;case opts.groupmarker.start:openenings.push(new MaskToken(!0));break;case opts.quantifiermarker.start:var quantifier=new MaskToken(!1,!1,!0);m=m.replace(/[{}]/g,"");var mq=m.split(","),mq0=isNaN(mq[0])?mq[0]:parseInt(mq[0]),mq1=1===mq.length?mq0:isNaN(mq[1])?mq[1]:parseInt(mq[1]);if(("*"===mq1||"+"===mq1)&&(mq0="*"===mq1?0:1),quantifier.quantifier={min:mq0,max:mq1},openenings.length>0){var matches=openenings[openenings.length-1].matches;match=matches.pop(),match.isGroup||(groupToken=new MaskToken(!0),groupToken.matches.push(match),match=groupToken),matches.push(match),matches.push(quantifier)}else match=currentToken.matches.pop(),match.isGroup||(groupToken=new MaskToken(!0),groupToken.matches.push(match),match=groupToken),currentToken.matches.push(match),currentToken.matches.push(quantifier);break;case opts.alternatormarker:openenings.length>0?(currentOpeningToken=openenings[openenings.length-1],lastMatch=currentOpeningToken.matches.pop()):lastMatch=currentToken.matches.pop(),lastMatch.isAlternator?openenings.push(lastMatch):(alternator=new MaskToken(!1,!1,!1,!0),alternator.matches.push(lastMatch),openenings.push(alternator));break;default:defaultCase()}for(;openenings.length>0;)openingToken=openenings.pop(),verifyGroupMarker(openingToken,!0),currentToken.matches.push(openingToken);return currentToken.matches.length>0&&(lastMatch=currentToken.matches[currentToken.matches.length-1],verifyGroupMarker(lastMatch),maskTokens.push(currentToken)),opts.numericInput&&reverseTokens(maskTokens[0]),maskTokens}function generateMask(mask,metadata){if(null===mask||""===mask)return void 0;if(1===mask.length&&opts.greedy===!1&&0!==opts.repeat&&(opts.placeholder=""),opts.repeat>0||"*"===opts.repeat||"+"===opts.repeat){var repeatStart="*"===opts.repeat?0:"+"===opts.repeat?1:opts.repeat;mask=opts.groupmarker.start+mask+opts.groupmarker.end+opts.quantifiermarker.start+repeatStart+","+opts.repeat+opts.quantifiermarker.end}var masksetDefinition;return void 0===Inputmask.prototype.masksCache[mask]||nocache===!0?(masksetDefinition={mask:mask,maskToken:analyseMask(mask),validPositions:{},_buffer:void 0,buffer:void 0,tests:{},metadata:metadata},nocache!==!0&&(Inputmask.prototype.masksCache[opts.numericInput?mask.split("").reverse().join(""):mask]=masksetDefinition,masksetDefinition=$.extend(!0,{},Inputmask.prototype.masksCache[opts.numericInput?mask.split("").reverse().join(""):mask]))):masksetDefinition=$.extend(!0,{},Inputmask.prototype.masksCache[opts.numericInput?mask.split("").reverse().join(""):mask]),masksetDefinition}function preProcessMask(mask){return mask=mask.toString()}var ms;if($.isFunction(opts.mask)&&(opts.mask=opts.mask(opts)),$.isArray(opts.mask)){if(opts.mask.length>1){opts.keepStatic=null===opts.keepStatic?!0:opts.keepStatic;var altMask="(";return $.each(opts.numericInput?opts.mask.reverse():opts.mask,function(ndx,msk){altMask.length>1&&(altMask+=")|("),altMask+=preProcessMask(void 0===msk.mask||$.isFunction(msk.mask)?msk:msk.mask)}),altMask+=")",generateMask(altMask,opts.mask)}opts.mask=opts.mask.pop()}return opts.mask&&(ms=void 0===opts.mask.mask||$.isFunction(opts.mask.mask)?generateMask(preProcessMask(opts.mask),opts.mask):generateMask(preProcessMask(opts.mask.mask),opts.mask)),ms}function maskScope(actionObj,maskset,opts){function getMaskTemplate(baseOnInput,minimalPos,includeInput){minimalPos=minimalPos||0;var ndxIntlzr,test,testPos,maskTemplate=[],pos=0;do{if(baseOnInput===!0&&getMaskSet().validPositions[pos]){var validPos=getMaskSet().validPositions[pos];test=validPos.match,ndxIntlzr=validPos.locator.slice(),maskTemplate.push(includeInput===!0?validPos.input:getPlaceholder(pos,test))}else testPos=getTestTemplate(pos,ndxIntlzr,pos-1),test=testPos.match,ndxIntlzr=testPos.locator.slice(),maskTemplate.push(getPlaceholder(pos,test));pos++}while((void 0===maxLength||maxLength>pos-1)&&null!==test.fn||null===test.fn&&""!==test.def||minimalPos>=pos);return maskTemplate.pop(),maskTemplate}function getMaskSet(){return maskset}function resetMaskSet(soft){var maskset=getMaskSet();maskset.buffer=void 0,maskset.tests={},soft!==!0&&(maskset._buffer=void 0,maskset.validPositions={},maskset.p=0)}function getLastValidPosition(closestTo,strict){var maskset=getMaskSet(),lastValidPosition=-1,valids=maskset.validPositions;void 0===closestTo&&(closestTo=-1);var before=lastValidPosition,after=lastValidPosition;for(var posNdx in valids){var psNdx=parseInt(posNdx);valids[psNdx]&&(strict||null!==valids[psNdx].match.fn)&&(closestTo>=psNdx&&(before=psNdx),psNdx>=closestTo&&(after=psNdx))}return lastValidPosition=-1!==before&&closestTo-before>1||closestTo>after?before:after}function setValidPosition(pos,validTest,fromSetValid){if(opts.insertMode&&void 0!==getMaskSet().validPositions[pos]&&void 0===fromSetValid){var i,positionsClone=$.extend(!0,{},getMaskSet().validPositions),lvp=getLastValidPosition();for(i=pos;lvp>=i;i++)delete getMaskSet().validPositions[i];getMaskSet().validPositions[pos]=validTest;var j,valid=!0,vps=getMaskSet().validPositions;for(i=j=pos;lvp>=i;i++){var t=positionsClone[i];if(void 0!==t)for(var posMatch=j,prevPosMatch=-1;posMatch<getMaskLength()&&(null==t.match.fn&&vps[i]&&(vps[i].match.optionalQuantifier===!0||vps[i].match.optionality===!0)||null!=t.match.fn);){if(null===t.match.fn||!opts.keepStatic&&vps[i]&&(void 0!==vps[i+1]&&getTests(i+1,vps[i].locator.slice(),i).length>1||void 0!==vps[i].alternation)?posMatch++:posMatch=seekNext(j),positionCanMatchDefinition(posMatch,t.match.def)){valid=isValid(posMatch,t.input,!0,!0)!==!1,j=posMatch;break}if(valid=null==t.match.fn,prevPosMatch===posMatch)break;prevPosMatch=posMatch}if(!valid)break}if(!valid)return getMaskSet().validPositions=$.extend(!0,{},positionsClone),resetMaskSet(!0),!1}else getMaskSet().validPositions[pos]=validTest;return resetMaskSet(!0),!0}function stripValidPositions(start,end,nocheck,strict){var i,startPos=start;for(getMaskSet().p=start,i=startPos;end>i;i++)void 0!==getMaskSet().validPositions[i]&&(nocheck===!0||opts.canClearPosition(getMaskSet(),i,getLastValidPosition(),strict,opts)!==!1)&&delete getMaskSet().validPositions[i];for(i=startPos+1;i<=getLastValidPosition();){for(;void 0!==getMaskSet().validPositions[startPos];)startPos++;var s=getMaskSet().validPositions[startPos];if(startPos>i&&(i=startPos+1),void 0===getMaskSet().validPositions[i]&&isMask(i)||void 0!==s)i++;else{var t=getTestTemplate(i);positionCanMatchDefinition(startPos,t.match.def)?isValid(startPos,t.input||getPlaceholder(i),!0)!==!1&&(delete getMaskSet().validPositions[i],i++):isMask(i)||(i++,startPos--),startPos++}}var lvp=getLastValidPosition(),ml=getMaskLength();for(strict!==!0&&nocheck!==!0&&void 0!==getMaskSet().validPositions[lvp]&&getMaskSet().validPositions[lvp].input===opts.radixPoint&&delete getMaskSet().validPositions[lvp],i=lvp+1;ml>=i;i++)getMaskSet().validPositions[i]&&delete getMaskSet().validPositions[i];resetMaskSet(!0)}function getTestTemplate(pos,ndxIntlzr,tstPs){var testPos=getMaskSet().validPositions[pos];if(void 0===testPos)for(var testPositions=getTests(pos,ndxIntlzr,tstPs),lvp=getLastValidPosition(),lvTest=getMaskSet().validPositions[lvp]||getTests(0)[0],lvTestAltArr=void 0!==lvTest.alternation?lvTest.locator[lvTest.alternation].toString().split(","):[],ndx=0;ndx<testPositions.length&&(testPos=testPositions[ndx],!(testPos.match&&(opts.greedy&&testPos.match.optionalQuantifier!==!0||(testPos.match.optionality===!1||testPos.match.newBlockMarker===!1)&&testPos.match.optionalQuantifier!==!0)&&(void 0===lvTest.alternation||lvTest.alternation!==testPos.alternation||void 0!==testPos.locator[lvTest.alternation]&&checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(","),lvTestAltArr))));ndx++);return testPos}function getTest(pos){return getMaskSet().validPositions[pos]?getMaskSet().validPositions[pos].match:getTests(pos)[0].match}function positionCanMatchDefinition(pos,def){for(var valid=!1,tests=getTests(pos),tndx=0;tndx<tests.length;tndx++)if(tests[tndx].match&&tests[tndx].match.def===def){valid=!0;break}return valid}function getTests(pos,ndxIntlzr,tstPs,cacheable){function resolveTestFromToken(maskToken,ndxInitializer,loopNdx,quantifierRecurse){function handleMatch(match,loopNdx,quantifierRecurse){if(testPos>1e4)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+getMaskSet().mask;if(testPos===pos&&void 0===match.matches)return matches.push({match:match,locator:loopNdx.reverse()}),!0;if(void 0!==match.matches){if(match.isGroup&&quantifierRecurse!==match){if(match=handleMatch(maskToken.matches[$.inArray(match,maskToken.matches)+1],loopNdx))return!0}else if(match.isOptional){var optionalToken=match;if(match=resolveTestFromToken(match,ndxInitializer,loopNdx,quantifierRecurse)){if(latestMatch=matches[matches.length-1].match,isFirstMatch=0===$.inArray(latestMatch,optionalToken.matches),!isFirstMatch)return!0;insertStop=!0,testPos=pos}}else if(match.isAlternator){var maltMatches,alternateToken=match,malternateMatches=[],currentMatches=matches.slice(),loopNdxCnt=loopNdx.length,altIndex=ndxInitializer.length>0?ndxInitializer.shift():-1;if(-1===altIndex||"string"==typeof altIndex){var currentPos=testPos,ndxInitializerClone=ndxInitializer.slice(),altIndexArr=[];"string"==typeof altIndex&&(altIndexArr=altIndex.split(","));for(var amndx=0;amndx<alternateToken.matches.length;amndx++){if(matches=[],match=handleMatch(alternateToken.matches[amndx],[amndx].concat(loopNdx),quantifierRecurse)||match,match!==!0&&void 0!==match&&altIndexArr[altIndexArr.length-1]<alternateToken.matches.length){var ntndx=maskToken.matches.indexOf(match)+1;maskToken.matches.length>ntndx&&(match=handleMatch(maskToken.matches[ntndx],[ntndx].concat(loopNdx.slice(1,loopNdx.length)),quantifierRecurse),match&&(altIndexArr.push(ntndx.toString()),$.each(matches,function(ndx,lmnt){lmnt.alternation=loopNdx.length-1})))}maltMatches=matches.slice(),testPos=currentPos,matches=[];for(var i=0;i<ndxInitializerClone.length;i++)ndxInitializer[i]=ndxInitializerClone[i];for(var ndx1=0;ndx1<maltMatches.length;ndx1++){var altMatch=maltMatches[ndx1];altMatch.alternation=altMatch.alternation||loopNdxCnt;for(var ndx2=0;ndx2<malternateMatches.length;ndx2++){var altMatch2=malternateMatches[ndx2];if(altMatch.match.mask===altMatch2.match.mask&&("string"!=typeof altIndex||-1!==$.inArray(altMatch.locator[altMatch.alternation].toString(),altIndexArr))){maltMatches.splice(ndx1,1),ndx1--,altMatch2.locator[altMatch.alternation]=altMatch2.locator[altMatch.alternation]+","+altMatch.locator[altMatch.alternation],altMatch2.alternation=altMatch.alternation;break}}}malternateMatches=malternateMatches.concat(maltMatches)}"string"==typeof altIndex&&(malternateMatches=$.map(malternateMatches,function(lmnt,ndx){if(isFinite(ndx)){var mamatch,alternation=lmnt.alternation,altLocArr=lmnt.locator[alternation].toString().split(",");lmnt.locator[alternation]=void 0,lmnt.alternation=void 0;for(var alndx=0;alndx<altLocArr.length;alndx++)mamatch=-1!==$.inArray(altLocArr[alndx],altIndexArr),mamatch&&(void 0!==lmnt.locator[alternation]?(lmnt.locator[alternation]+=",",lmnt.locator[alternation]+=altLocArr[alndx]):lmnt.locator[alternation]=parseInt(altLocArr[alndx]),lmnt.alternation=alternation);if(void 0!==lmnt.locator[alternation])return lmnt}})),matches=currentMatches.concat(malternateMatches),testPos=pos,insertStop=matches.length>0}else match=alternateToken.matches[altIndex]?handleMatch(alternateToken.matches[altIndex],[altIndex].concat(loopNdx),quantifierRecurse):!1;if(match)return!0}else if(match.isQuantifier&&quantifierRecurse!==maskToken.matches[$.inArray(match,maskToken.matches)-1])for(var qt=match,qndx=ndxInitializer.length>0?ndxInitializer.shift():0;qndx<(isNaN(qt.quantifier.max)?qndx+1:qt.quantifier.max)&&pos>=testPos;qndx++){var tokenGroup=maskToken.matches[$.inArray(qt,maskToken.matches)-1];if(match=handleMatch(tokenGroup,[qndx].concat(loopNdx),tokenGroup)){if(latestMatch=matches[matches.length-1].match,latestMatch.optionalQuantifier=qndx>qt.quantifier.min-1,isFirstMatch=0===$.inArray(latestMatch,tokenGroup.matches)){if(qndx>qt.quantifier.min-1){insertStop=!0,testPos=pos;break}return!0}return!0}}else if(match=resolveTestFromToken(match,ndxInitializer,loopNdx,quantifierRecurse))return!0}else testPos++}for(var tndx=ndxInitializer.length>0?ndxInitializer.shift():0;tndx<maskToken.matches.length;tndx++)if(maskToken.matches[tndx].isQuantifier!==!0){var match=handleMatch(maskToken.matches[tndx],[tndx].concat(loopNdx),quantifierRecurse);if(match&&testPos===pos)return match;if(testPos>pos)break}}var latestMatch,isFirstMatch,maskTokens=getMaskSet().maskToken,testPos=ndxIntlzr?tstPs:0,ndxInitializer=ndxIntlzr||[0],matches=[],insertStop=!1;if(cacheable===!0&&getMaskSet().tests[pos])return getMaskSet().tests[pos];if(void 0===ndxIntlzr){for(var test,previousPos=pos-1;void 0===(test=getMaskSet().validPositions[previousPos])&&previousPos>-1&&(!getMaskSet().tests[previousPos]||void 0===(test=getMaskSet().tests[previousPos][0]));)previousPos--;void 0!==test&&previousPos>-1&&(testPos=previousPos,ndxInitializer=test.locator.slice())}for(var mtndx=ndxInitializer.shift();mtndx<maskTokens.length;mtndx++){var match=resolveTestFromToken(maskTokens[mtndx],ndxInitializer,[mtndx]);if(match&&testPos===pos||testPos>pos)break}return(0===matches.length||insertStop)&&matches.push({match:{fn:null,cardinality:0,optionality:!0,casing:null,def:""},locator:[]}),getMaskSet().tests[pos]=$.extend(!0,[],matches),getMaskSet().tests[pos]}function getBufferTemplate(){return void 0===getMaskSet()._buffer&&(getMaskSet()._buffer=getMaskTemplate(!1,1)),getMaskSet()._buffer}function getBuffer(noCache){return(void 0===getMaskSet().buffer||noCache===!0)&&(noCache===!0&&(getMaskSet().test={}),getMaskSet().buffer=getMaskTemplate(!0,getLastValidPosition(),!0)),getMaskSet().buffer}function refreshFromBuffer(start,end,buffer){var i;if(buffer=buffer,start===!0)resetMaskSet(),start=0,end=buffer.length;else for(i=start;end>i;i++)delete getMaskSet().validPositions[i],delete getMaskSet().tests[i];for(i=start;end>i;i++)resetMaskSet(!0),buffer[i]!==opts.skipOptionalPartCharacter&&isValid(i,buffer[i],!0,!0)}function casing(elem,test){switch(test.casing){case"upper":elem=elem.toUpperCase();break;case"lower":elem=elem.toLowerCase()}return elem}function checkAlternationMatch(altArr1,altArr2){for(var altArrC=opts.greedy?altArr2:altArr2.slice(0,1),isMatch=!1,alndx=0;alndx<altArr1.length;alndx++)if(-1!==$.inArray(altArr1[alndx],altArrC)){isMatch=!0;break}return isMatch}function isValid(pos,c,strict,fromSetValid){function _isValid(position,c,strict,fromSetValid){var rslt=!1;return $.each(getTests(position),function(ndx,tst){for(var test=tst.match,loopend=c?1:0,chrs="",i=test.cardinality;i>loopend;i--)chrs+=getBufferElement(position-(i-1));if(c&&(chrs+=c),getBuffer(!0),rslt=null!=test.fn?test.fn.test(chrs,getMaskSet(),position,strict,opts):c!==test.def&&c!==opts.skipOptionalPartCharacter||""===test.def?!1:{c:test.def,pos:position},rslt!==!1){var elem=void 0!==rslt.c?rslt.c:c;elem=elem===opts.skipOptionalPartCharacter&&null===test.fn?test.def:elem;var validatedPos=position,possibleModifiedBuffer=getBuffer();if(void 0!==rslt.remove&&($.isArray(rslt.remove)||(rslt.remove=[rslt.remove]),$.each(rslt.remove.sort(function(a,b){return b-a}),function(ndx,lmnt){stripValidPositions(lmnt,lmnt+1,!0)})),void 0!==rslt.insert&&($.isArray(rslt.insert)||(rslt.insert=[rslt.insert]),$.each(rslt.insert.sort(function(a,b){return a-b}),function(ndx,lmnt){isValid(lmnt.pos,lmnt.c,!0)})),rslt.refreshFromBuffer){var refresh=rslt.refreshFromBuffer;if(strict=!0,refreshFromBuffer(refresh===!0?refresh:refresh.start,refresh.end,possibleModifiedBuffer),void 0===rslt.pos&&void 0===rslt.c)return rslt.pos=getLastValidPosition(),!1;if(validatedPos=void 0!==rslt.pos?rslt.pos:position,validatedPos!==position)return rslt=$.extend(rslt,isValid(validatedPos,elem,!0)),!1}else if(rslt!==!0&&void 0!==rslt.pos&&rslt.pos!==position&&(validatedPos=rslt.pos,refreshFromBuffer(position,validatedPos,getBuffer().slice()),validatedPos!==position))return rslt=$.extend(rslt,isValid(validatedPos,elem,!0)),!1;return rslt!==!0&&void 0===rslt.pos&&void 0===rslt.c?!1:(ndx>0&&resetMaskSet(!0),setValidPosition(validatedPos,$.extend({},tst,{
input:casing(elem,test)}),fromSetValid)||(rslt=!1),!1)}}),rslt}function alternate(pos,c,strict,fromSetValid){for(var lastAlt,alternation,isValidRslt,altPos,i,validPos,validPsClone=$.extend(!0,{},getMaskSet().validPositions),lAlt=getLastValidPosition();lAlt>=0&&(altPos=getMaskSet().validPositions[lAlt],!altPos||void 0===altPos.alternation||(lastAlt=lAlt,alternation=getMaskSet().validPositions[lastAlt].alternation,getTestTemplate(lastAlt).locator[altPos.alternation]===altPos.locator[altPos.alternation]));lAlt--);if(void 0!==alternation){lastAlt=parseInt(lastAlt);for(var decisionPos in getMaskSet().validPositions)if(decisionPos=parseInt(decisionPos),altPos=getMaskSet().validPositions[decisionPos],decisionPos>=lastAlt&&void 0!==altPos.alternation){var altNdxs=getMaskSet().validPositions[lastAlt].locator[alternation].toString().split(","),decisionTaker=altPos.locator[alternation]||altNdxs[0];decisionTaker.length>0&&(decisionTaker=decisionTaker.split(",")[0]);for(var mndx=0;mndx<altNdxs.length;mndx++)if(decisionTaker<altNdxs[mndx]){for(var possibilityPos,possibilities,dp=decisionPos;dp>=0;dp--)if(possibilityPos=getMaskSet().validPositions[dp],void 0!==possibilityPos){possibilities=possibilityPos.locator[alternation],possibilityPos.locator[alternation]=parseInt(altNdxs[mndx]);break}if(decisionTaker!==possibilityPos.locator[alternation]){var validInputs=[],staticInputsBeforePos=0;for(i=decisionPos+1;i<getLastValidPosition()+1;i++)validPos=getMaskSet().validPositions[i],validPos&&(null!=validPos.match.fn?validInputs.push(validPos.input):pos>i&&staticInputsBeforePos++),delete getMaskSet().validPositions[i],delete getMaskSet().tests[i];for(resetMaskSet(!0),opts.keepStatic=!opts.keepStatic,isValidRslt=!0;validInputs.length>0;){var input=validInputs.shift();if(input!==opts.skipOptionalPartCharacter&&!(isValidRslt=isValid(getLastValidPosition()+1,input,!1,!0)))break}if(possibilityPos.alternation=alternation,possibilityPos.locator[alternation]=possibilities,isValidRslt){var targetLvp=getLastValidPosition(pos)+1,staticInputsBeforePosAlternate=0;for(i=decisionPos+1;i<getLastValidPosition()+1;i++)validPos=getMaskSet().validPositions[i],validPos&&null==validPos.match.fn&&pos>i&&staticInputsBeforePosAlternate++;pos+=staticInputsBeforePosAlternate-staticInputsBeforePos,isValidRslt=isValid(pos>targetLvp?targetLvp:pos,c,strict,fromSetValid)}if(opts.keepStatic=!opts.keepStatic,isValidRslt)return isValidRslt;resetMaskSet(),getMaskSet().validPositions=$.extend(!0,{},validPsClone)}}break}}return!1}function trackbackAlternations(originalPos,newPos){for(var vp=getMaskSet().validPositions[newPos],targetLocator=vp.locator,tll=targetLocator.length,ps=originalPos;newPos>ps;ps++)if(!isMask(ps)){var tests=getTests(ps),bestMatch=tests[0],equality=-1;$.each(tests,function(ndx,tst){for(var i=0;tll>i;i++)tst.locator[i]&&checkAlternationMatch(tst.locator[i].toString().split(","),targetLocator[i].toString().split(","))&&i>equality&&(equality=i,bestMatch=tst)}),setValidPosition(ps,$.extend({},bestMatch,{input:bestMatch.match.def}),!0)}}strict=strict===!0;for(var buffer=getBuffer(),pndx=pos-1;pndx>-1&&!getMaskSet().validPositions[pndx];pndx--);for(pndx++;pos>pndx;pndx++)void 0===getMaskSet().validPositions[pndx]&&((!isMask(pndx)||buffer[pndx]!==getPlaceholder(pndx))&&getTests(pndx).length>1||buffer[pndx]===opts.radixPoint||"0"===buffer[pndx]&&$.inArray(opts.radixPoint,buffer)<pndx)&&_isValid(pndx,buffer[pndx],!0);var maskPos=pos,result=!1,positionsClone=$.extend(!0,{},getMaskSet().validPositions);if(maskPos<getMaskLength()&&(result=_isValid(maskPos,c,strict,fromSetValid),(!strict||fromSetValid)&&result===!1)){var currentPosValid=getMaskSet().validPositions[maskPos];if(!currentPosValid||null!==currentPosValid.match.fn||currentPosValid.match.def!==c&&c!==opts.skipOptionalPartCharacter){if((opts.insertMode||void 0===getMaskSet().validPositions[seekNext(maskPos)])&&!isMask(maskPos))for(var nPos=maskPos+1,snPos=seekNext(maskPos);snPos>=nPos;nPos++)if(result=_isValid(nPos,c,strict,fromSetValid),result!==!1){trackbackAlternations(maskPos,nPos),maskPos=nPos;break}}else result={caret:seekNext(maskPos)}}if(result===!1&&opts.keepStatic&&isComplete(buffer)&&(result=alternate(pos,c,strict,fromSetValid)),result===!0&&(result={pos:maskPos}),$.isFunction(opts.postValidation)&&result!==!1&&!strict){var postValidResult=opts.postValidation(getBuffer(!0),opts);if(postValidResult){if(postValidResult.refreshFromBuffer){var refresh=postValidResult.refreshFromBuffer;refreshFromBuffer(refresh===!0?refresh:refresh.start,refresh.end,postValidResult.buffer),resetMaskSet(!0),result=postValidResult}}else resetMaskSet(!0),getMaskSet().validPositions=$.extend(!0,{},positionsClone),result=!1}return result}function isMask(pos){var test=getTest(pos);if(null!=test.fn)return test.fn;if(pos>-1&&!opts.keepStatic&&void 0===getMaskSet().validPositions[pos]){for(var tests=getTests(pos),staticAlternations=!0,i=0;i<tests.length;i++)if(""!==tests[i].match.def&&(void 0===tests[i].alternation||tests[i].locator[tests[i].alternation].length>1)){staticAlternations=!1;break}return staticAlternations}return!1}function getMaskLength(){var maskLength;maxLength=void 0!==el?el.maxLength:void 0,-1===maxLength&&(maxLength=void 0);var pos,lvp=getLastValidPosition(),testPos=getMaskSet().validPositions[lvp],ndxIntlzr=void 0!==testPos?testPos.locator.slice():void 0;for(pos=lvp+1;void 0===testPos||null!==testPos.match.fn||null===testPos.match.fn&&""!==testPos.match.def;pos++)testPos=getTestTemplate(pos,ndxIntlzr,pos-1),ndxIntlzr=testPos.locator.slice();var lastTest=getTest(pos-1);return maskLength=""!==lastTest.def?pos:pos-1,void 0===maxLength||maxLength>maskLength?maskLength:maxLength}function seekNext(pos,newBlock){var maskL=getMaskLength();if(pos>=maskL)return maskL;for(var position=pos;++position<maskL&&(newBlock===!0&&(getTest(position).newBlockMarker!==!0||!isMask(position))||newBlock!==!0&&!isMask(position)&&(opts.nojumps!==!0||opts.nojumpsThreshold>position)););return position}function seekPrevious(pos,newBlock){var position=pos;if(0>=position)return 0;for(;--position>0&&(newBlock===!0&&getTest(position).newBlockMarker!==!0||newBlock!==!0&&!isMask(position)););return position}function getBufferElement(position){return void 0===getMaskSet().validPositions[position]?getPlaceholder(position):getMaskSet().validPositions[position].input}function writeBuffer(input,buffer,caretPos,event,triggerInputEvent){if(event&&$.isFunction(opts.onBeforeWrite)){var result=opts.onBeforeWrite.call(input,event,buffer,caretPos,opts);if(result){if(result.refreshFromBuffer){var refresh=result.refreshFromBuffer;refreshFromBuffer(refresh===!0?refresh:refresh.start,refresh.end,result.buffer||buffer),buffer=getBuffer(!0)}void 0!==caretPos&&(caretPos=void 0!==result.caret?result.caret:caretPos)}}input.inputmask._valueSet(buffer.join("")),void 0===caretPos||void 0!==event&&"blur"===event.type||caret(input,caretPos),triggerInputEvent===!0&&(skipInputEvent=!0,$(input).trigger("input"))}function getPlaceholder(pos,test){if(test=test||getTest(pos),void 0!==test.placeholder)return test.placeholder;if(null===test.fn){if(pos>-1&&!opts.keepStatic&&void 0===getMaskSet().validPositions[pos]){for(var prevTest,tests=getTests(pos),hasAlternations=!1,i=0;i<tests.length;i++){if(prevTest&&""!==tests[i].match.def&&tests[i].match.def!==prevTest.match.def&&(void 0===tests[i].alternation||tests[i].alternation===prevTest.alternation)){hasAlternations=!0;break}tests[i].match.optionality!==!0&&tests[i].match.optionalQuantifier!==!0&&(prevTest=tests[i])}if(hasAlternations)return opts.placeholder.charAt(pos%opts.placeholder.length)}return test.def}return opts.placeholder.charAt(pos%opts.placeholder.length)}function checkVal(input,writeOut,strict,nptvl){function isTemplateMatch(){var isMatch=!1,charCodeNdx=getBufferTemplate().slice(initialNdx,seekNext(initialNdx)).join("").indexOf(charCodes);if(-1!==charCodeNdx&&!isMask(initialNdx)){isMatch=!0;for(var bufferTemplateArr=getBufferTemplate().slice(initialNdx,initialNdx+charCodeNdx),i=0;i<bufferTemplateArr.length;i++)if(" "!==bufferTemplateArr[i]){isMatch=!1;break}}return isMatch}var inputValue=nptvl.slice(),charCodes="",initialNdx=0;if(resetMaskSet(),getMaskSet().p=seekNext(-1),!strict)if(opts.autoUnmask!==!0){var staticInput=getBufferTemplate().slice(0,seekNext(-1)).join(""),matches=inputValue.join("").match(new RegExp("^"+Inputmask.escapeRegex(staticInput),"g"));matches&&matches.length>0&&(inputValue.splice(0,matches.length*staticInput.length),initialNdx=seekNext(initialNdx))}else initialNdx=seekNext(initialNdx);$.each(inputValue,function(ndx,charCode){var keypress=$.Event("keypress");keypress.which=charCode.charCodeAt(0),charCodes+=charCode;var lvp=getLastValidPosition(void 0,!0),lvTest=getMaskSet().validPositions[lvp],nextTest=getTestTemplate(lvp+1,lvTest?lvTest.locator.slice():void 0,lvp);if(!isTemplateMatch()||strict||opts.autoUnmask){var pos=strict?ndx:null==nextTest.match.fn&&nextTest.match.optionality&&lvp+1<getMaskSet().p?lvp+1:getMaskSet().p;keypressEvent.call(input,keypress,!0,!1,strict,pos),initialNdx=pos+1,charCodes=""}else keypressEvent.call(input,keypress,!0,!1,!0,lvp+1)}),writeOut&&writeBuffer(input,getBuffer(),document.activeElement===input?seekNext(getLastValidPosition(0)):void 0,$.Event("checkval"))}function unmaskedvalue(input){if(input&&void 0===input.inputmask)return input.value;var umValue=[],vps=getMaskSet().validPositions;for(var pndx in vps)vps[pndx].match&&null!=vps[pndx].match.fn&&umValue.push(vps[pndx].input);var unmaskedValue=0===umValue.length?null:(isRTL?umValue.reverse():umValue).join("");if(null!==unmaskedValue){var bufferValue=(isRTL?getBuffer().slice().reverse():getBuffer()).join("");$.isFunction(opts.onUnMask)&&(unmaskedValue=opts.onUnMask.call(input,bufferValue,unmaskedValue,opts)||unmaskedValue)}return unmaskedValue}function caret(input,begin,end){function translatePosition(pos){if(isRTL&&"number"==typeof pos&&(!opts.greedy||""!==opts.placeholder)){var bffrLght=getBuffer().join("").length;pos=bffrLght-pos}return pos}var range;if("number"!=typeof begin)return input.setSelectionRange?(begin=input.selectionStart,end=input.selectionEnd):window.getSelection?(range=window.getSelection().getRangeAt(0),(range.commonAncestorContainer.parentNode===input||range.commonAncestorContainer===input)&&(begin=range.startOffset,end=range.endOffset)):document.selection&&document.selection.createRange&&(range=document.selection.createRange(),begin=0-range.duplicate().moveStart("character",-1e5),end=begin+range.text.length),{begin:translatePosition(begin),end:translatePosition(end)};begin=translatePosition(begin),end=translatePosition(end),end="number"==typeof end?end:begin;var scrollCalc=parseInt(((input.ownerDocument.defaultView||window).getComputedStyle?(input.ownerDocument.defaultView||window).getComputedStyle(input,null):input.currentStyle).fontSize)*end;if(input.scrollLeft=scrollCalc>input.scrollWidth?scrollCalc:0,androidchrome||opts.insertMode!==!1||begin!==end||end++,input.setSelectionRange)input.selectionStart=begin,input.selectionEnd=end;else if(window.getSelection){if(range=document.createRange(),void 0===input.firstChild){var textNode=document.createTextNode("");input.appendChild(textNode)}range.setStart(input.firstChild,begin<input.inputmask._valueGet().length?begin:input.inputmask._valueGet().length),range.setEnd(input.firstChild,end<input.inputmask._valueGet().length?end:input.inputmask._valueGet().length),range.collapse(!0);var sel=window.getSelection();sel.removeAllRanges(),sel.addRange(range)}else input.createTextRange&&(range=input.createTextRange(),range.collapse(!0),range.moveEnd("character",end),range.moveStart("character",begin),range.select())}function determineLastRequiredPosition(returnDefinition){var pos,testPos,buffer=getBuffer(),bl=buffer.length,lvp=getLastValidPosition(),positions={},lvTest=getMaskSet().validPositions[lvp],ndxIntlzr=void 0!==lvTest?lvTest.locator.slice():void 0;for(pos=lvp+1;pos<buffer.length;pos++)testPos=getTestTemplate(pos,ndxIntlzr,pos-1),ndxIntlzr=testPos.locator.slice(),positions[pos]=$.extend(!0,{},testPos);var lvTestAlt=lvTest&&void 0!==lvTest.alternation?lvTest.locator[lvTest.alternation]:void 0;for(pos=bl-1;pos>lvp&&(testPos=positions[pos],(testPos.match.optionality||testPos.match.optionalQuantifier||lvTestAlt&&(lvTestAlt!==positions[pos].locator[lvTest.alternation]&&null!=testPos.match.fn||null===testPos.match.fn&&testPos.locator[lvTest.alternation]&&checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(","),lvTestAlt.toString().split(","))&&""!==getTests(pos)[0].def))&&buffer[pos]===getPlaceholder(pos,testPos.match));pos--)bl--;return returnDefinition?{l:bl,def:positions[bl]?positions[bl].match:void 0}:bl}function clearOptionalTail(buffer){for(var rl=determineLastRequiredPosition(),lmib=buffer.length-1;lmib>rl&&!isMask(lmib);lmib--);return buffer.splice(rl,lmib+1-rl),buffer}function isComplete(buffer){if($.isFunction(opts.isComplete))return opts.isComplete.call(el,buffer,opts);if("*"===opts.repeat)return void 0;var complete=!1,lrp=determineLastRequiredPosition(!0),aml=seekPrevious(lrp.l);if(void 0===lrp.def||lrp.def.newBlockMarker||lrp.def.optionality||lrp.def.optionalQuantifier){complete=!0;for(var i=0;aml>=i;i++){var test=getTestTemplate(i).match;if(null!==test.fn&&void 0===getMaskSet().validPositions[i]&&test.optionality!==!0&&test.optionalQuantifier!==!0||null===test.fn&&buffer[i]!==getPlaceholder(i,test)){complete=!1;break}}}return complete}function isSelection(begin,end){return isRTL?begin-end>1||begin-end===1&&opts.insertMode:end-begin>1||end-begin===1&&opts.insertMode}function wrapEventRuler(eventHandler){return function(e){var inComposition=!1,keydownPressed=!1;if(void 0===this.inputmask){var imOpts=$.data(this,"_inputmask_opts");imOpts?new Inputmask(imOpts).mask(this):$(this).off(".inputmask")}else{if("setvalue"===e.type||!(this.disabled||this.readOnly&&!("keydown"===e.type&&e.ctrlKey&&67===e.keyCode||opts.tabThrough===!1&&e.keyCode===Inputmask.keyCode.TAB))){switch(e.type){case"input":if(skipInputEvent===!0||inComposition===!0)return skipInputEvent=!1,e.preventDefault();keydownPressed=!1;break;case"keydown":skipKeyPressEvent=!1,inComposition=!1,keydownPressed=!0;break;case"keypress":if(skipKeyPressEvent===!0)return e.preventDefault();skipKeyPressEvent=!0;break;case"compositionstart":inComposition=!0;break;case"compositionupdate":skipInputEvent=keydownPressed;break;case"compositionend":inComposition=!1,keydownPressed=!1;break;case"cut":skipInputEvent=!0}return eventHandler.apply(this,arguments)}e.preventDefault()}}}function patchValueProperty(npt){function patchValhook(type){if($.valHooks&&(void 0===$.valHooks[type]||$.valHooks[type].inputmaskpatch!==!0)){var valhookGet=$.valHooks[type]&&$.valHooks[type].get?$.valHooks[type].get:function(elem){return elem.value},valhookSet=$.valHooks[type]&&$.valHooks[type].set?$.valHooks[type].set:function(elem,value){return elem.value=value,elem};$.valHooks[type]={get:function(elem){if(elem.inputmask){if(elem.inputmask.opts.autoUnmask)return elem.inputmask.unmaskedvalue();var result=valhookGet(elem),maskset=elem.inputmask.maskset,bufferTemplate=maskset._buffer;return bufferTemplate=bufferTemplate?bufferTemplate.join(""):"",result!==bufferTemplate?result:""}return valhookGet(elem)},set:function(elem,value){var result,$elem=$(elem);return result=valhookSet(elem,value),elem.inputmask&&$elem.trigger("setvalue.inputmask"),result},inputmaskpatch:!0}}}function getter(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():valueGet.call(this)!==getBufferTemplate().join("")?document.activeElement===this&&opts.clearMaskOnLostFocus?(isRTL?clearOptionalTail(getBuffer()).reverse():clearOptionalTail(getBuffer())).join(""):valueGet.call(this):"":valueGet.call(this)}function setter(value){valueSet.call(this,value),this.inputmask&&$(this).trigger("setvalue.inputmask")}function installNativeValueSetFallback(npt){$(npt).on("mouseenter.inputmask",wrapEventRuler(function(event){var $input=$(this),input=this,value=input.inputmask._valueGet();""!==value&&value!==getBuffer().join("")&&$input.trigger("setvalue.inputmask")}))}var valueGet,valueSet;npt.inputmask.__valueGet||(Object.getOwnPropertyDescriptor&&void 0===npt.value?(valueGet=function(){return this.textContent},valueSet=function(value){this.textContent=value},Object.defineProperty(npt,"value",{get:getter,set:setter})):document.__lookupGetter__&&npt.__lookupGetter__("value")?(valueGet=npt.__lookupGetter__("value"),valueSet=npt.__lookupSetter__("value"),npt.__defineGetter__("value",getter),npt.__defineSetter__("value",setter)):(valueGet=function(){return npt.value},valueSet=function(value){npt.value=value},patchValhook(npt.type),installNativeValueSetFallback(npt)),npt.inputmask.__valueGet=valueGet,npt.inputmask._valueGet=function(overruleRTL){return isRTL&&overruleRTL!==!0?valueGet.call(this.el).split("").reverse().join(""):valueGet.call(this.el)},npt.inputmask.__valueSet=valueSet,npt.inputmask._valueSet=function(value,overruleRTL){valueSet.call(this.el,null===value||void 0===value?"":overruleRTL!==!0&&isRTL?value.split("").reverse().join(""):value)})}function handleRemove(input,k,pos,strict){function generalize(){if(opts.keepStatic){resetMaskSet(!0);var lastAlt,validInputs=[],positionsClone=$.extend(!0,{},getMaskSet().validPositions);for(lastAlt=getLastValidPosition();lastAlt>=0;lastAlt--){var validPos=getMaskSet().validPositions[lastAlt];if(validPos&&(null!=validPos.match.fn&&validInputs.push(validPos.input),delete getMaskSet().validPositions[lastAlt],void 0!==validPos.alternation&&validPos.locator[validPos.alternation]===getTestTemplate(lastAlt).locator[validPos.alternation]))break}if(lastAlt>-1)for(;validInputs.length>0;){getMaskSet().p=seekNext(getLastValidPosition());var keypress=$.Event("keypress");keypress.which=validInputs.pop().charCodeAt(0),keypressEvent.call(input,keypress,!0,!1,!1,getMaskSet().p)}else getMaskSet().validPositions=$.extend(!0,{},positionsClone)}}if((opts.numericInput||isRTL)&&(k===Inputmask.keyCode.BACKSPACE?k=Inputmask.keyCode.DELETE:k===Inputmask.keyCode.DELETE&&(k=Inputmask.keyCode.BACKSPACE),isRTL)){var pend=pos.end;pos.end=pos.begin,pos.begin=pend}k===Inputmask.keyCode.BACKSPACE&&(pos.end-pos.begin<1||opts.insertMode===!1)?(pos.begin=seekPrevious(pos.begin),void 0===getMaskSet().validPositions[pos.begin]||getMaskSet().validPositions[pos.begin].input!==opts.groupSeparator&&getMaskSet().validPositions[pos.begin].input!==opts.radixPoint||pos.begin--):k===Inputmask.keyCode.DELETE&&pos.begin===pos.end&&(pos.end=isMask(pos.end)?pos.end+1:seekNext(pos.end)+1,void 0===getMaskSet().validPositions[pos.begin]||getMaskSet().validPositions[pos.begin].input!==opts.groupSeparator&&getMaskSet().validPositions[pos.begin].input!==opts.radixPoint||pos.end++),stripValidPositions(pos.begin,pos.end,!1,strict),strict!==!0&&generalize();var lvp=getLastValidPosition(pos.begin);lvp<pos.begin?(-1===lvp&&resetMaskSet(),getMaskSet().p=seekNext(lvp)):strict!==!0&&(getMaskSet().p=pos.begin)}function keydownEvent(e){var input=this,$input=$(input),k=e.keyCode,pos=caret(input);k===Inputmask.keyCode.BACKSPACE||k===Inputmask.keyCode.DELETE||iphone&&127===k||e.ctrlKey&&88===k&&!isInputEventSupported("cut")?(e.preventDefault(),88===k&&(undoValue=getBuffer().join("")),handleRemove(input,k,pos),writeBuffer(input,getBuffer(),getMaskSet().p,e,undoValue!==getBuffer().join("")),input.inputmask._valueGet()===getBufferTemplate().join("")?$input.trigger("cleared"):isComplete(getBuffer())===!0&&$input.trigger("complete"),opts.showTooltip&&(input.title=opts.tooltip||getMaskSet().mask)):k===Inputmask.keyCode.END||k===Inputmask.keyCode.PAGE_DOWN?setTimeout(function(){var caretPos=seekNext(getLastValidPosition());opts.insertMode||caretPos!==getMaskLength()||e.shiftKey||caretPos--,caret(input,e.shiftKey?pos.begin:caretPos,caretPos)},0):k===Inputmask.keyCode.HOME&&!e.shiftKey||k===Inputmask.keyCode.PAGE_UP?caret(input,0,e.shiftKey?pos.begin:0):(opts.undoOnEscape&&k===Inputmask.keyCode.ESCAPE||90===k&&e.ctrlKey)&&e.altKey!==!0?(checkVal(input,!0,!1,undoValue.split("")),$input.trigger("click")):k!==Inputmask.keyCode.INSERT||e.shiftKey||e.ctrlKey?opts.tabThrough===!0&&k===Inputmask.keyCode.TAB?(e.shiftKey===!0?(null===getTest(pos.begin).fn&&(pos.begin=seekNext(pos.begin)),pos.end=seekPrevious(pos.begin,!0),pos.begin=seekPrevious(pos.end,!0)):(pos.begin=seekNext(pos.begin,!0),pos.end=seekNext(pos.begin,!0),pos.end<getMaskLength()&&pos.end--),pos.begin<getMaskLength()&&(e.preventDefault(),caret(input,pos.begin,pos.end))):opts.insertMode!==!1||e.shiftKey||(k===Inputmask.keyCode.RIGHT?setTimeout(function(){var caretPos=caret(input);caret(input,caretPos.begin)},0):k===Inputmask.keyCode.LEFT&&setTimeout(function(){var caretPos=caret(input);caret(input,isRTL?caretPos.begin+1:caretPos.begin-1)},0)):(opts.insertMode=!opts.insertMode,caret(input,opts.insertMode||pos.begin!==getMaskLength()?pos.begin:pos.begin-1)),opts.onKeyDown(e,getBuffer(),caret(input).begin,opts),ignorable=-1!==$.inArray(k,opts.ignorables)}function keypressEvent(e,checkval,writeOut,strict,ndx){var input=this,$input=$(input),k=e.which||e.charCode||e.keyCode;if(!(checkval===!0||e.ctrlKey&&e.altKey)&&(e.ctrlKey||e.metaKey||ignorable))return k===Inputmask.keyCode.ENTER&&undoValue!==getBuffer().join("")&&(undoValue=getBuffer().join(""),e.preventDefault(),setTimeout(function(){$input.trigger("change")},0)),!0;if(k){46===k&&e.shiftKey===!1&&","===opts.radixPoint&&(k=44);var forwardPosition,pos=checkval?{begin:ndx,end:ndx}:caret(input),c=String.fromCharCode(k),isSlctn=isSelection(pos.begin,pos.end);isSlctn&&(getMaskSet().undoPositions=$.extend(!0,{},getMaskSet().validPositions),handleRemove(input,Inputmask.keyCode.DELETE,pos,!0),pos.begin=getMaskSet().p,opts.insertMode||(opts.insertMode=!opts.insertMode,setValidPosition(pos.begin,strict),opts.insertMode=!opts.insertMode),isSlctn=!opts.multi),getMaskSet().writeOutBuffer=!0;var p=isRTL&&!isSlctn?pos.end:pos.begin,valResult=isValid(p,c,strict);if(valResult!==!1){if(valResult!==!0&&(p=void 0!==valResult.pos?valResult.pos:p,c=void 0!==valResult.c?valResult.c:c),resetMaskSet(!0),void 0!==valResult.caret)forwardPosition=valResult.caret;else{var vps=getMaskSet().validPositions;forwardPosition=!opts.keepStatic&&(void 0!==vps[p+1]&&getTests(p+1,vps[p].locator.slice(),p).length>1||void 0!==vps[p].alternation)?p+1:seekNext(p)}getMaskSet().p=forwardPosition}if(writeOut!==!1){var self=this;if(setTimeout(function(){opts.onKeyValidation.call(self,valResult,opts)},0),getMaskSet().writeOutBuffer&&valResult!==!1){var buffer=getBuffer();writeBuffer(input,buffer,checkval?void 0:opts.numericInput?seekPrevious(forwardPosition):forwardPosition,e,checkval!==!0),checkval!==!0&&setTimeout(function(){isComplete(buffer)===!0&&$input.trigger("complete")},0)}else isSlctn&&(getMaskSet().buffer=void 0,getMaskSet().validPositions=getMaskSet().undoPositions)}else isSlctn&&(getMaskSet().buffer=void 0,getMaskSet().validPositions=getMaskSet().undoPositions);if(opts.showTooltip&&(input.title=opts.tooltip||getMaskSet().mask),checkval&&$.isFunction(opts.onBeforeWrite)){var result=opts.onBeforeWrite(e,getBuffer(),forwardPosition,opts);if(result&&result.refreshFromBuffer){var refresh=result.refreshFromBuffer;refreshFromBuffer(refresh===!0?refresh:refresh.start,refresh.end,result.buffer),resetMaskSet(!0),result.caret&&(getMaskSet().p=result.caret)}}if(e.preventDefault(),checkval)return valResult}}function pasteEvent(e){var input=this,ev=e.originalEvent||e,$input=$(input),inputValue=input.inputmask._valueGet(!0),caretPos=caret(input);if("propertychange"===e.type&&input.inputmask._valueGet().length<=getMaskLength())return!0;if("paste"===e.type){var valueBeforeCaret=inputValue.substr(0,caretPos.begin),valueAfterCaret=inputValue.substr(caretPos.end,inputValue.length);valueBeforeCaret===getBufferTemplate().slice(0,caretPos.begin).join("")&&(valueBeforeCaret=""),valueAfterCaret===getBufferTemplate().slice(caretPos.end).join("")&&(valueAfterCaret=""),window.clipboardData&&window.clipboardData.getData?inputValue=valueBeforeCaret+window.clipboardData.getData("Text")+valueAfterCaret:ev.clipboardData&&ev.clipboardData.getData&&(inputValue=valueBeforeCaret+ev.clipboardData.getData("text/plain")+valueAfterCaret)}var pasteValue=inputValue;if($.isFunction(opts.onBeforePaste)){if(pasteValue=opts.onBeforePaste.call(input,inputValue,opts),pasteValue===!1)return e.preventDefault(),!1;pasteValue||(pasteValue=inputValue)}return checkVal(input,!1,!1,isRTL?pasteValue.split("").reverse():pasteValue.toString().split("")),writeBuffer(input,getBuffer(),void 0,e,!0),$input.trigger("click"),isComplete(getBuffer())===!0&&$input.trigger("complete"),!1}function inputFallBackEvent(e){var input=this;checkVal(input,!0,!1,input.inputmask._valueGet().split("")),isComplete(getBuffer())===!0&&$(input).trigger("complete"),e.preventDefault()}function mobileInputEvent(e){var input=this,caretPos=caret(input),currentValue=input._valueGet();currentValue=currentValue.replace(new RegExp("("+Inputmask.escapeRegex(getBufferTemplate().join(""))+")*"),""),caretPos.begin>currentValue.length&&(caret(input,currentValue.length),caretPos=caret(input)),getBuffer().length-currentValue.length!==1||currentValue.charAt(caretPos.begin)===getBuffer()[caretPos.begin]||currentValue.charAt(caretPos.begin+1)===getBuffer()[caretPos.begin]||isMask(caretPos.begin)?inputFallBackEvent.call(this,e):(e.keyCode=opts.keyCode.BACKSPACE,keydownEvent.call(input,e)),e.preventDefault()}function compositionStartEvent(e){var ev=e.originalEvent||e;undoValue=getBuffer().join(""),""===compositionData||0!==ev.data.indexOf(compositionData)}function compositionUpdateEvent(e){var input=this,ev=e.originalEvent||e;0===ev.data.indexOf(compositionData)&&(resetMaskSet(),getMaskSet().p=seekNext(-1),skipInputEvent=!0);for(var newData=ev.data,i=0;i<newData.length;i++){var keypress=$.Event("keypress");keypress.which=newData.charCodeAt(i),skipKeyPressEvent=!1,ignorable=!1,keypressEvent.call(input,keypress,!0,!1,!1,getMaskSet().p)}setTimeout(function(){var forwardPosition=getMaskSet().p;writeBuffer(input,getBuffer(),opts.numericInput?seekPrevious(forwardPosition):forwardPosition)},0),compositionData=ev.data}function compositionEndEvent(e){}function setValueEvent(e){var input=this,value=input.inputmask._valueGet();checkVal(input,!0,!1,($.isFunction(opts.onBeforeMask)?opts.onBeforeMask.call(input,value,opts)||value:value).split("")),undoValue=getBuffer().join(""),(opts.clearMaskOnLostFocus||opts.clearIncomplete)&&input.inputmask._valueGet()===getBufferTemplate().join("")&&input.inputmask._valueSet("")}function focusEvent(e){var input=this,nptValue=input.inputmask._valueGet();opts.showMaskOnFocus&&(!opts.showMaskOnHover||opts.showMaskOnHover&&""===nptValue)?input.inputmask._valueGet()!==getBuffer().join("")&&writeBuffer(input,getBuffer(),seekNext(getLastValidPosition())):mouseEnter===!1&&caret(input,seekNext(getLastValidPosition())),opts.positionCaretOnTab===!0&&setTimeout(function(){caret(input,seekNext(getLastValidPosition()))},0),undoValue=getBuffer().join("")}function mouseleaveEvent(e){var input=this;if(mouseEnter=!1,opts.clearMaskOnLostFocus){var buffer=getBuffer().slice(),nptValue=input.inputmask._valueGet();document.activeElement!==input&&nptValue!==input.getAttribute("placeholder")&&""!==nptValue&&(-1===getLastValidPosition()&&nptValue===getBufferTemplate().join("")?buffer=[]:clearOptionalTail(buffer),writeBuffer(input,buffer))}}function clickEvent(e){function doRadixFocus(clickPos){if(opts.radixFocus&&""!==opts.radixPoint){var vps=getMaskSet().validPositions;if(void 0===vps[clickPos]||vps[clickPos].input===getPlaceholder(clickPos)){if(clickPos<seekNext(-1))return!0;var radixPos=$.inArray(opts.radixPoint,getBuffer());if(-1!==radixPos){for(var vp in vps)if(vp>radixPos&&vps[vp].input!==getPlaceholder(vp))return!1;return!0}}}return!1}var input=this;if(document.activeElement===input){var selectedCaret=caret(input);if(selectedCaret.begin===selectedCaret.end)if(doRadixFocus(selectedCaret.begin))caret(input,$.inArray(opts.radixPoint,getBuffer()));else{var clickPosition=selectedCaret.begin,lvclickPosition=getLastValidPosition(clickPosition),lastPosition=seekNext(lvclickPosition);lastPosition>clickPosition?caret(input,isMask(clickPosition)||isMask(clickPosition-1)?clickPosition:seekNext(clickPosition)):caret(input,opts.numericInput?0:lastPosition)}}}function dblclickEvent(e){var input=this;setTimeout(function(){caret(input,0,seekNext(getLastValidPosition()))},0)}function cutEvent(e){var input=this,$input=$(input),pos=caret(input),ev=e.originalEvent||e,clipboardData=window.clipboardData||ev.clipboardData,clipData=isRTL?getBuffer().slice(pos.end,pos.begin):getBuffer().slice(pos.begin,pos.end);clipboardData.setData("text",isRTL?clipData.reverse().join(""):clipData.join("")),document.execCommand&&document.execCommand("copy"),handleRemove(input,Inputmask.keyCode.DELETE,pos),writeBuffer(input,getBuffer(),getMaskSet().p,e,undoValue!==getBuffer().join("")),input.inputmask._valueGet()===getBufferTemplate().join("")&&$input.trigger("cleared"),opts.showTooltip&&(input.title=opts.tooltip||getMaskSet().mask)}function blurEvent(e){var $input=$(this),input=this;if(input.inputmask){var nptValue=input.inputmask._valueGet(),buffer=getBuffer().slice();undoValue!==buffer.join("")&&setTimeout(function(){$input.trigger("change"),undoValue=buffer.join("")},0),""!==nptValue&&(opts.clearMaskOnLostFocus&&(-1===getLastValidPosition()&&nptValue===getBufferTemplate().join("")?buffer=[]:clearOptionalTail(buffer)),isComplete(buffer)===!1&&(setTimeout(function(){$input.trigger("incomplete")},0),opts.clearIncomplete&&(resetMaskSet(),buffer=opts.clearMaskOnLostFocus?[]:getBufferTemplate().slice())),writeBuffer(input,buffer,void 0,e))}}function mouseenterEvent(e){var input=this;mouseEnter=!0,document.activeElement!==input&&opts.showMaskOnHover&&input.inputmask._valueGet()!==getBuffer().join("")&&writeBuffer(input,getBuffer())}function mask(elem){if(el=elem,$el=$(el),opts.showTooltip&&(el.title=opts.tooltip||getMaskSet().mask),("rtl"===el.dir||opts.rightAlign)&&(el.style.textAlign="right"),("rtl"===el.dir||opts.numericInput)&&(el.dir="ltr",el.removeAttribute("dir"),el.inputmask.isRTL=!0,isRTL=!0),$el.off(".inputmask"),patchValueProperty(el),("INPUT"===el.tagName&&isInputTypeSupported(el.getAttribute("type"))||el.isContentEditable)&&($(el.form).on("submit",function(){undoValue!==getBuffer().join("")&&$el.trigger("change"),opts.clearMaskOnLostFocus&&-1===getLastValidPosition()&&el.inputmask._valueGet&&el.inputmask._valueGet()===getBufferTemplate().join("")&&el.inputmask._valueSet(""),opts.removeMaskOnSubmit&&(el.inputmask._valueSet(el.inputmask.unmaskedvalue(),!0),setTimeout(function(){writeBuffer(el,getBuffer())},0))}).on("reset",function(){setTimeout(function(){$el.trigger("setvalue.inputmask")},0)}),$el.on("mouseenter.inputmask",wrapEventRuler(mouseenterEvent)).on("blur.inputmask",wrapEventRuler(blurEvent)).on("focus.inputmask",wrapEventRuler(focusEvent)).on("mouseleave.inputmask",wrapEventRuler(mouseleaveEvent)).on("click.inputmask",wrapEventRuler(clickEvent)).on("dblclick.inputmask",wrapEventRuler(dblclickEvent)).on(PasteEventType+".inputmask dragdrop.inputmask drop.inputmask",wrapEventRuler(pasteEvent)).on("cut.inputmask",wrapEventRuler(cutEvent)).on("complete.inputmask",wrapEventRuler(opts.oncomplete)).on("incomplete.inputmask",wrapEventRuler(opts.onincomplete)).on("cleared.inputmask",wrapEventRuler(opts.oncleared)).on("keydown.inputmask",wrapEventRuler(keydownEvent)).on("keypress.inputmask",wrapEventRuler(keypressEvent)),androidfirefox||$el.on("compositionstart.inputmask",wrapEventRuler(compositionStartEvent)).on("compositionupdate.inputmask",wrapEventRuler(compositionUpdateEvent)).on("compositionend.inputmask",wrapEventRuler(compositionEndEvent)),"paste"===PasteEventType&&$el.on("input.inputmask",wrapEventRuler(inputFallBackEvent)),(android||androidfirefox||androidchrome||kindle)&&($el.off("input.inputmask"),
$el.on("input.inputmask",wrapEventRuler(mobileInputEvent)))),$el.on("setvalue.inputmask",wrapEventRuler(setValueEvent)),""!==el.inputmask._valueGet()||opts.clearMaskOnLostFocus===!1){var initialValue=$.isFunction(opts.onBeforeMask)?opts.onBeforeMask.call(el,el.inputmask._valueGet(),opts)||el.inputmask._valueGet():el.inputmask._valueGet();checkVal(el,!0,!1,initialValue.split(""));var buffer=getBuffer().slice();undoValue=buffer.join(""),isComplete(buffer)===!1&&opts.clearIncomplete&&resetMaskSet(),opts.clearMaskOnLostFocus&&(buffer.join("")===getBufferTemplate().join("")?buffer=[]:clearOptionalTail(buffer)),writeBuffer(el,buffer),document.activeElement===el&&caret(el,seekNext(getLastValidPosition()))}}var undoValue,compositionData,el,$el,maxLength,valueBuffer,isRTL=!1,skipKeyPressEvent=!1,skipInputEvent=!1,ignorable=!1,mouseEnter=!0;if(void 0!==actionObj)switch(actionObj.action){case"isComplete":return el=actionObj.el,isComplete(getBuffer());case"unmaskedvalue":return el=actionObj.el,void 0!==el&&void 0!==el.inputmask?(maskset=el.inputmask.maskset,opts=el.inputmask.opts,isRTL=el.inputmask.isRTL,valueBuffer=isRTL?el.inputmask._valueGet().split("").reverse().join(""):el.inputmask._valueGet()):valueBuffer=actionObj.value,opts.numericInput&&(isRTL=!0),valueBuffer=($.isFunction(opts.onBeforeMask)?opts.onBeforeMask(valueBuffer,opts)||valueBuffer:valueBuffer).split(""),checkVal(void 0,!1,!1,isRTL?valueBuffer.reverse():valueBuffer),$.isFunction(opts.onBeforeWrite)&&opts.onBeforeWrite(void 0,getBuffer(),0,opts),unmaskedvalue(el);case"mask":el=actionObj.el,maskset=el.inputmask.maskset,opts=el.inputmask.opts,isRTL=el.inputmask.isRTL,undoValue=getBuffer().join(""),mask(el);break;case"format":return opts.numericInput&&(isRTL=!0),valueBuffer=($.isFunction(opts.onBeforeMask)?opts.onBeforeMask(actionObj.value,opts)||actionObj.value:actionObj.value).split(""),checkVal(void 0,!1,!1,isRTL?valueBuffer.reverse():valueBuffer),$.isFunction(opts.onBeforeWrite)&&opts.onBeforeWrite(void 0,getBuffer(),0,opts),actionObj.metadata?{value:isRTL?getBuffer().slice().reverse().join(""):getBuffer().join(""),metadata:maskScope({action:"getmetadata"},maskset,opts)}:isRTL?getBuffer().slice().reverse().join(""):getBuffer().join("");case"isValid":opts.numericInput&&(isRTL=!0),valueBuffer=actionObj.value.split(""),checkVal(void 0,!1,!0,isRTL?valueBuffer.reverse():valueBuffer);for(var buffer=getBuffer(),rl=determineLastRequiredPosition(),lmib=buffer.length-1;lmib>rl&&!isMask(lmib);lmib--);return buffer.splice(rl,lmib+1-rl),isComplete(buffer)&&actionObj.value===buffer.join("");case"getemptymask":return getBufferTemplate();case"remove":el=actionObj.el,$el=$(el),maskset=el.inputmask.maskset,opts=el.inputmask.opts,el.inputmask._valueSet(unmaskedvalue(el)),$el.off(".inputmask");var valueProperty;Object.getOwnPropertyDescriptor&&(valueProperty=Object.getOwnPropertyDescriptor(el,"value")),valueProperty&&valueProperty.get?el.inputmask.__valueGet&&Object.defineProperty(el,"value",{get:el.inputmask.__valueGet,set:el.inputmask.__valueSet}):document.__lookupGetter__&&el.__lookupGetter__("value")&&el.inputmask.__valueGet&&(el.__defineGetter__("value",el.inputmask.__valueGet),el.__defineSetter__("value",el.inputmask.__valueSet)),el.inputmask=void 0;break;case"getmetadata":if($.isArray(maskset.metadata)){for(var alternation,lvp=getLastValidPosition(),firstAlt=lvp;firstAlt>=0;firstAlt--)if(getMaskSet().validPositions[firstAlt]&&void 0!==getMaskSet().validPositions[firstAlt].alternation){alternation=getMaskSet().validPositions[firstAlt].alternation;break}return void 0!==alternation?maskset.metadata[getMaskSet().validPositions[lvp].locator[alternation]]:maskset.metadata[0]}return maskset.metadata}}Inputmask.prototype={defaults:{placeholder:"_",optionalmarker:{start:"[",end:"]"},quantifiermarker:{start:"{",end:"}"},groupmarker:{start:"(",end:")"},alternatormarker:"|",escapeChar:"\\",mask:null,oncomplete:$.noop,onincomplete:$.noop,oncleared:$.noop,repeat:0,greedy:!0,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,clearIncomplete:!1,aliases:{},alias:null,onKeyDown:$.noop,onBeforeMask:null,onBeforePaste:function(pastedValue,opts){return $.isFunction(opts.onBeforeMask)?opts.onBeforeMask(pastedValue,opts):pastedValue},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:$.noop,skipOptionalPartCharacter:" ",showTooltip:!1,tooltip:void 0,numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",groupSeparator:"",radixFocus:!1,nojumps:!1,nojumpsThreshold:0,keepStatic:null,positionCaretOnTab:!1,tabThrough:!1,supportsInputType:[],definitions:{9:{validator:"[0-9]",cardinality:1,definitionSymbol:"*"},a:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,definitionSymbol:"*"},"*":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",cardinality:1}},ignorables:[8,9,13,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123],isComplete:null,canClearPosition:$.noop,postValidation:null},masksCache:{},mask:function(elems){var that=this;return"string"==typeof elems&&(elems=document.querySelectorAll(elems)),elems=elems.nodeName?[elems]:elems,$.each(elems,function(ndx,el){var scopedOpts=$.extend(!0,{},that.opts);importAttributeOptions(el,scopedOpts,$.extend(!0,{},that.userOptions));var maskset=generateMaskSet(scopedOpts,that.noMasksCache);void 0!==maskset&&(void 0!==el.inputmask&&el.inputmask.remove(),el.inputmask=new Inputmask,el.inputmask.opts=scopedOpts,el.inputmask.noMasksCache=that.noMasksCache,el.inputmask.userOptions=$.extend(!0,{},that.userOptions),el.inputmask.el=el,el.inputmask.maskset=maskset,el.inputmask.isRTL=!1,$.data(el,"_inputmask_opts",scopedOpts),maskScope({action:"mask",el:el}))}),elems?elems[0].inputmask||this:this},option:function(options){return"string"==typeof options?this.opts[options]:"object"==typeof options?($.extend(this.opts,options),$.extend(this.userOptions,options),this.el&&(void 0!==options.mask||void 0!==options.alias?this.mask(this.el):($.data(this.el,"_inputmask_opts",this.opts),maskScope({action:"mask",el:this.el}))),this):void 0},unmaskedvalue:function(value){return maskScope({action:"unmaskedvalue",el:this.el,value:value},this.el&&this.el.inputmask?this.el.inputmask.maskset:generateMaskSet(this.opts,this.noMasksCache),this.opts)},remove:function(){return this.el?(maskScope({action:"remove",el:this.el}),this.el.inputmask=void 0,this.el):void 0},getemptymask:function(){return maskScope({action:"getemptymask"},this.maskset||generateMaskSet(this.opts,this.noMasksCache),this.opts)},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return maskScope({action:"isComplete",el:this.el},this.maskset||generateMaskSet(this.opts,this.noMasksCache),this.opts)},getmetadata:function(){return maskScope({action:"getmetadata"},this.maskset||generateMaskSet(this.opts,this.noMasksCache),this.opts)},isValid:function(value){return maskScope({action:"isValid",value:value},this.maskset||generateMaskSet(this.opts,this.noMasksCache),this.opts)},format:function(value,metadata){return maskScope({action:"format",value:value,metadata:metadata},this.maskset||generateMaskSet(this.opts,this.noMasksCache),this.opts)}},Inputmask.extendDefaults=function(options){$.extend(!0,Inputmask.prototype.defaults,options)},Inputmask.extendDefinitions=function(definition){$.extend(!0,Inputmask.prototype.defaults.definitions,definition)},Inputmask.extendAliases=function(alias){$.extend(!0,Inputmask.prototype.defaults.aliases,alias)},Inputmask.format=function(value,options,metadata){return Inputmask(options).format(value,metadata)},Inputmask.unmask=function(value,options){return Inputmask(options).unmaskedvalue(value)},Inputmask.isValid=function(value,options){return Inputmask(options).isValid(value)},Inputmask.remove=function(elems){$.each(elems,function(ndx,el){el.inputmask&&el.inputmask.remove()})},Inputmask.escapeRegex=function(str){var specials=["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"];return str.replace(new RegExp("(\\"+specials.join("|\\")+")","gim"),"\\$1")},Inputmask.keyCode={ALT:18,BACKSPACE:8,CAPS_LOCK:20,COMMA:188,COMMAND:91,COMMAND_LEFT:91,COMMAND_RIGHT:93,CONTROL:17,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,MENU:93,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SHIFT:16,SPACE:32,TAB:9,UP:38,WINDOWS:91};var ua=navigator.userAgent,iphone=null!==ua.match(new RegExp("iphone","i")),android=null!==ua.match(new RegExp("android.*safari.*","i")),androidchrome=null!==ua.match(new RegExp("android.*chrome.*","i")),androidfirefox=null!==ua.match(new RegExp("android.*firefox.*","i")),kindle=/Kindle/i.test(ua)||/Silk/i.test(ua)||/KFTT/i.test(ua)||/KFOT/i.test(ua)||/KFJWA/i.test(ua)||/KFJWI/i.test(ua)||/KFSOWI/i.test(ua)||/KFTHWA/i.test(ua)||/KFTHWI/i.test(ua)||/KFAPWA/i.test(ua)||/KFAPWI/i.test(ua),PasteEventType=isInputEventSupported("paste")?"paste":isInputEventSupported("input")?"input":"propertychange";return window.Inputmask=Inputmask,Inputmask}(jQuery),function($,Inputmask){return void 0===$.fn.inputmask&&($.fn.inputmask=function(fn,options){var nptmask,input;if(options=options||{},"string"==typeof fn)switch(fn){case"mask":return nptmask=new Inputmask(options),this.each(function(){nptmask.mask(this)});case"unmaskedvalue":return input=this.jquery&&this.length>0?this[0]:this,input.inputmask?input.inputmask.unmaskedvalue():$(input).val();case"remove":return this.each(function(){this.inputmask&&this.inputmask.remove()});case"getemptymask":return input=this.jquery&&this.length>0?this[0]:this,input.inputmask?input.inputmask.getemptymask():"";case"hasMaskedValue":return input=this.jquery&&this.length>0?this[0]:this,input.inputmask?input.inputmask.hasMaskedValue():!1;case"isComplete":return input=this.jquery&&this.length>0?this[0]:this,input.inputmask?input.inputmask.isComplete():!0;case"getmetadata":return input=this.jquery&&this.length>0?this[0]:this,input.inputmask?input.inputmask.getmetadata():void 0;case"setvalue":input=this.jquery&&this.length>0?this[0]:this,$(input).val(options),void 0!==input.inputmask&&$(input).triggerHandler("setvalue.inputmask");break;case"option":if("string"!=typeof options)return this.each(function(){return void 0!==this.inputmask?this.inputmask.option(options):void 0});if(input=this.jquery&&this.length>0?this[0]:this,void 0!==input.inputmask)return input.inputmask.option(options);break;default:return options.alias=fn,nptmask=new Inputmask(options),this.each(function(){nptmask.mask(this)})}else{if("object"==typeof fn)return nptmask=new Inputmask(fn),this.each(void 0===fn.mask&&void 0===fn.alias?function(){return void 0!==this.inputmask?this.inputmask.option(fn):void nptmask.mask(this)}:function(){nptmask.mask(this)});if(void 0===fn)return this.each(function(){nptmask=new Inputmask(options),nptmask.mask(this)})}}),$.fn.inputmask}(jQuery,Inputmask),function($,Inputmask){return Inputmask.extendDefinitions({h:{validator:"[01][0-9]|2[0-3]",cardinality:2,prevalidator:[{validator:"[0-2]",cardinality:1}]},s:{validator:"[0-5][0-9]",cardinality:2,prevalidator:[{validator:"[0-5]",cardinality:1}]},d:{validator:"0[1-9]|[12][0-9]|3[01]",cardinality:2,prevalidator:[{validator:"[0-3]",cardinality:1}]},m:{validator:"0[1-9]|1[012]",cardinality:2,prevalidator:[{validator:"[01]",cardinality:1}]},y:{validator:"(19|20)\\d{2}",cardinality:4,prevalidator:[{validator:"[12]",cardinality:1},{validator:"(19|20)",cardinality:2},{validator:"(19|20)\\d",cardinality:3}]}}),Inputmask.extendAliases({"dd/mm/yyyy":{mask:"1/2/y",placeholder:"dd/mm/yyyy",regex:{val1pre:new RegExp("[0-3]"),val1:new RegExp("0[1-9]|[12][0-9]|3[01]"),val2pre:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|[12][0-9]|3[01])"+escapedSeparator+"[01])")},val2:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|[12][0-9])"+escapedSeparator+"(0[1-9]|1[012]))|(30"+escapedSeparator+"(0[13-9]|1[012]))|(31"+escapedSeparator+"(0[13578]|1[02]))")}},leapday:"29/02/",separator:"/",yearrange:{minyear:1900,maxyear:2099},isInYearRange:function(chrs,minyear,maxyear){if(isNaN(chrs))return!1;var enteredyear=parseInt(chrs.concat(minyear.toString().slice(chrs.length))),enteredyear2=parseInt(chrs.concat(maxyear.toString().slice(chrs.length)));return(isNaN(enteredyear)?!1:enteredyear>=minyear&&maxyear>=enteredyear)||(isNaN(enteredyear2)?!1:enteredyear2>=minyear&&maxyear>=enteredyear2)},determinebaseyear:function(minyear,maxyear,hint){var currentyear=(new Date).getFullYear();if(minyear>currentyear)return minyear;if(currentyear>maxyear){for(var maxYearPrefix=maxyear.toString().slice(0,2),maxYearPostfix=maxyear.toString().slice(2,4);maxYearPrefix+hint>maxyear;)maxYearPrefix--;var maxxYear=maxYearPrefix+maxYearPostfix;return minyear>maxxYear?minyear:maxxYear}return currentyear},onKeyDown:function(e,buffer,caretPos,opts){var $input=$(this);if(e.ctrlKey&&e.keyCode===Inputmask.keyCode.RIGHT){var today=new Date;$input.val(today.getDate().toString()+(today.getMonth()+1).toString()+today.getFullYear().toString()),$input.trigger("setvalue.inputmask")}},getFrontValue:function(mask,buffer,opts){for(var start=0,length=0,i=0;i<mask.length&&"2"!==mask.charAt(i);i++){var definition=opts.definitions[mask.charAt(i)];definition?(start+=length,length=definition.cardinality):length++}return buffer.join("").substr(start,length)},definitions:{1:{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.regex.val1.test(chrs);return strict||isValid||chrs.charAt(1)!==opts.separator&&-1==="-./".indexOf(chrs.charAt(1))||!(isValid=opts.regex.val1.test("0"+chrs.charAt(0)))?isValid:(maskset.buffer[pos-1]="0",{refreshFromBuffer:{start:pos-1,end:pos},pos:pos,c:chrs.charAt(0)})},cardinality:2,prevalidator:[{validator:function(chrs,maskset,pos,strict,opts){var pchrs=chrs;isNaN(maskset.buffer[pos+1])||(pchrs+=maskset.buffer[pos+1]);var isValid=1===pchrs.length?opts.regex.val1pre.test(pchrs):opts.regex.val1.test(pchrs);if(!strict&&!isValid){if(isValid=opts.regex.val1.test(chrs+"0"))return maskset.buffer[pos]=chrs,maskset.buffer[++pos]="0",{pos:pos,c:"0"};if(isValid=opts.regex.val1.test("0"+chrs))return maskset.buffer[pos]="0",pos++,{pos:pos}}return isValid},cardinality:1}]},2:{validator:function(chrs,maskset,pos,strict,opts){var frontValue=opts.getFrontValue(maskset.mask,maskset.buffer,opts);-1!==frontValue.indexOf(opts.placeholder[0])&&(frontValue="01"+opts.separator);var isValid=opts.regex.val2(opts.separator).test(frontValue+chrs);if(!strict&&!isValid&&(chrs.charAt(1)===opts.separator||-1!=="-./".indexOf(chrs.charAt(1)))&&(isValid=opts.regex.val2(opts.separator).test(frontValue+"0"+chrs.charAt(0))))return maskset.buffer[pos-1]="0",{refreshFromBuffer:{start:pos-1,end:pos},pos:pos,c:chrs.charAt(0)};if(opts.mask.indexOf("2")===opts.mask.length-1&&isValid){var dayMonthValue=maskset.buffer.join("").substr(4,4)+chrs;if(dayMonthValue!==opts.leapday)return!0;var year=parseInt(maskset.buffer.join("").substr(0,4),10);return year%4===0?year%100===0?year%400===0?!0:!1:!0:!1}return isValid},cardinality:2,prevalidator:[{validator:function(chrs,maskset,pos,strict,opts){isNaN(maskset.buffer[pos+1])||(chrs+=maskset.buffer[pos+1]);var frontValue=opts.getFrontValue(maskset.mask,maskset.buffer,opts);-1!==frontValue.indexOf(opts.placeholder[0])&&(frontValue="01"+opts.separator);var isValid=1===chrs.length?opts.regex.val2pre(opts.separator).test(frontValue+chrs):opts.regex.val2(opts.separator).test(frontValue+chrs);return strict||isValid||!(isValid=opts.regex.val2(opts.separator).test(frontValue+"0"+chrs))?isValid:(maskset.buffer[pos]="0",pos++,{pos:pos})},cardinality:1}]},y:{validator:function(chrs,maskset,pos,strict,opts){if(opts.isInYearRange(chrs,opts.yearrange.minyear,opts.yearrange.maxyear)){var dayMonthValue=maskset.buffer.join("").substr(0,6);if(dayMonthValue!==opts.leapday)return!0;var year=parseInt(chrs,10);return year%4===0?year%100===0?year%400===0?!0:!1:!0:!1}return!1},cardinality:4,prevalidator:[{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.isInYearRange(chrs,opts.yearrange.minyear,opts.yearrange.maxyear);if(!strict&&!isValid){var yearPrefix=opts.determinebaseyear(opts.yearrange.minyear,opts.yearrange.maxyear,chrs+"0").toString().slice(0,1);if(isValid=opts.isInYearRange(yearPrefix+chrs,opts.yearrange.minyear,opts.yearrange.maxyear))return maskset.buffer[pos++]=yearPrefix.charAt(0),{pos:pos};if(yearPrefix=opts.determinebaseyear(opts.yearrange.minyear,opts.yearrange.maxyear,chrs+"0").toString().slice(0,2),isValid=opts.isInYearRange(yearPrefix+chrs,opts.yearrange.minyear,opts.yearrange.maxyear))return maskset.buffer[pos++]=yearPrefix.charAt(0),maskset.buffer[pos++]=yearPrefix.charAt(1),{pos:pos}}return isValid},cardinality:1},{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.isInYearRange(chrs,opts.yearrange.minyear,opts.yearrange.maxyear);if(!strict&&!isValid){var yearPrefix=opts.determinebaseyear(opts.yearrange.minyear,opts.yearrange.maxyear,chrs).toString().slice(0,2);if(isValid=opts.isInYearRange(chrs[0]+yearPrefix[1]+chrs[1],opts.yearrange.minyear,opts.yearrange.maxyear))return maskset.buffer[pos++]=yearPrefix.charAt(1),{pos:pos};if(yearPrefix=opts.determinebaseyear(opts.yearrange.minyear,opts.yearrange.maxyear,chrs).toString().slice(0,2),opts.isInYearRange(yearPrefix+chrs,opts.yearrange.minyear,opts.yearrange.maxyear)){var dayMonthValue=maskset.buffer.join("").substr(0,6);if(dayMonthValue!==opts.leapday)isValid=!0;else{var year=parseInt(chrs,10);isValid=year%4===0?year%100===0?year%400===0?!0:!1:!0:!1}}else isValid=!1;if(isValid)return maskset.buffer[pos-1]=yearPrefix.charAt(0),maskset.buffer[pos++]=yearPrefix.charAt(1),maskset.buffer[pos++]=chrs.charAt(0),{refreshFromBuffer:{start:pos-3,end:pos},pos:pos}}return isValid},cardinality:2},{validator:function(chrs,maskset,pos,strict,opts){return opts.isInYearRange(chrs,opts.yearrange.minyear,opts.yearrange.maxyear)},cardinality:3}]}},insertMode:!1,autoUnmask:!1},"mm/dd/yyyy":{placeholder:"mm/dd/yyyy",alias:"dd/mm/yyyy",regex:{val2pre:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[13-9]|1[012])"+escapedSeparator+"[0-3])|(02"+escapedSeparator+"[0-2])")},val2:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|1[012])"+escapedSeparator+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+escapedSeparator+"30)|((0[13578]|1[02])"+escapedSeparator+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(e,buffer,caretPos,opts){var $input=$(this);if(e.ctrlKey&&e.keyCode===Inputmask.keyCode.RIGHT){var today=new Date;$input.val((today.getMonth()+1).toString()+today.getDate().toString()+today.getFullYear().toString()),$input.trigger("setvalue.inputmask")}}},"yyyy/mm/dd":{mask:"y/1/2",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",leapday:"/02/29",onKeyDown:function(e,buffer,caretPos,opts){var $input=$(this);if(e.ctrlKey&&e.keyCode===Inputmask.keyCode.RIGHT){var today=new Date;$input.val(today.getFullYear().toString()+(today.getMonth()+1).toString()+today.getDate().toString()),$input.trigger("setvalue.inputmask")}}},"dd.mm.yyyy":{mask:"1.2.y",placeholder:"dd.mm.yyyy",leapday:"29.02.",separator:".",alias:"dd/mm/yyyy"},"dd-mm-yyyy":{mask:"1-2-y",placeholder:"dd-mm-yyyy",leapday:"29-02-",separator:"-",alias:"dd/mm/yyyy"},"mm.dd.yyyy":{mask:"1.2.y",placeholder:"mm.dd.yyyy",leapday:"02.29.",separator:".",alias:"mm/dd/yyyy"},"mm-dd-yyyy":{mask:"1-2-y",placeholder:"mm-dd-yyyy",leapday:"02-29-",separator:"-",alias:"mm/dd/yyyy"},"yyyy.mm.dd":{mask:"y.1.2",placeholder:"yyyy.mm.dd",leapday:".02.29",separator:".",alias:"yyyy/mm/dd"},"yyyy-mm-dd":{mask:"y-1-2",placeholder:"yyyy-mm-dd",leapday:"-02-29",separator:"-",alias:"yyyy/mm/dd"},datetime:{mask:"1/2/y h:s",placeholder:"dd/mm/yyyy hh:mm",alias:"dd/mm/yyyy",regex:{hrspre:new RegExp("[012]"),hrs24:new RegExp("2[0-4]|1[3-9]"),hrs:new RegExp("[01][0-9]|2[0-4]"),ampm:new RegExp("^[a|p|A|P][m|M]"),mspre:new RegExp("[0-5]"),ms:new RegExp("[0-5][0-9]")},timeseparator:":",hourFormat:"24",definitions:{h:{validator:function(chrs,maskset,pos,strict,opts){if("24"===opts.hourFormat&&24===parseInt(chrs,10))return maskset.buffer[pos-1]="0",maskset.buffer[pos]="0",{refreshFromBuffer:{start:pos-1,end:pos},c:"0"};var isValid=opts.regex.hrs.test(chrs);if(!strict&&!isValid&&(chrs.charAt(1)===opts.timeseparator||-1!=="-.:".indexOf(chrs.charAt(1)))&&(isValid=opts.regex.hrs.test("0"+chrs.charAt(0))))return maskset.buffer[pos-1]="0",maskset.buffer[pos]=chrs.charAt(0),pos++,{refreshFromBuffer:{start:pos-2,end:pos},pos:pos,c:opts.timeseparator};if(isValid&&"24"!==opts.hourFormat&&opts.regex.hrs24.test(chrs)){var tmp=parseInt(chrs,10);return 24===tmp?(maskset.buffer[pos+5]="a",maskset.buffer[pos+6]="m"):(maskset.buffer[pos+5]="p",maskset.buffer[pos+6]="m"),tmp-=12,10>tmp?(maskset.buffer[pos]=tmp.toString(),maskset.buffer[pos-1]="0"):(maskset.buffer[pos]=tmp.toString().charAt(1),maskset.buffer[pos-1]=tmp.toString().charAt(0)),{refreshFromBuffer:{start:pos-1,end:pos+6},c:maskset.buffer[pos]}}return isValid},cardinality:2,prevalidator:[{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.regex.hrspre.test(chrs);return strict||isValid||!(isValid=opts.regex.hrs.test("0"+chrs))?isValid:(maskset.buffer[pos]="0",pos++,{pos:pos})},cardinality:1}]},s:{validator:"[0-5][0-9]",cardinality:2,prevalidator:[{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.regex.mspre.test(chrs);return strict||isValid||!(isValid=opts.regex.ms.test("0"+chrs))?isValid:(maskset.buffer[pos]="0",pos++,{pos:pos})},cardinality:1}]},t:{validator:function(chrs,maskset,pos,strict,opts){return opts.regex.ampm.test(chrs+"m")},casing:"lower",cardinality:1}},insertMode:!1,autoUnmask:!1},datetime12:{mask:"1/2/y h:s t\\m",placeholder:"dd/mm/yyyy hh:mm xm",alias:"datetime",hourFormat:"12"},"mm/dd/yyyy hh:mm xm":{mask:"1/2/y h:s t\\m",placeholder:"mm/dd/yyyy hh:mm xm",alias:"datetime12",regex:{val2pre:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[13-9]|1[012])"+escapedSeparator+"[0-3])|(02"+escapedSeparator+"[0-2])")},val2:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|1[012])"+escapedSeparator+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+escapedSeparator+"30)|((0[13578]|1[02])"+escapedSeparator+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(e,buffer,caretPos,opts){var $input=$(this);if(e.ctrlKey&&e.keyCode===Inputmask.keyCode.RIGHT){var today=new Date;$input.val((today.getMonth()+1).toString()+today.getDate().toString()+today.getFullYear().toString()),$input.trigger("setvalue.inputmask")}}},"hh:mm t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"h:s t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"hh:mm:ss":{mask:"h:s:s",placeholder:"hh:mm:ss",alias:"datetime",autoUnmask:!1},"hh:mm":{mask:"h:s",placeholder:"hh:mm",alias:"datetime",autoUnmask:!1},date:{alias:"dd/mm/yyyy"},"mm/yyyy":{mask:"1/y",placeholder:"mm/yyyy",leapday:"donotuse",separator:"/",alias:"mm/dd/yyyy"},shamsi:{regex:{val2pre:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|1[012])"+escapedSeparator+"[0-3])")},val2:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|1[012])"+escapedSeparator+"(0[1-9]|[12][0-9]))|((0[1-9]|1[012])"+escapedSeparator+"30)|((0[1-6])"+escapedSeparator+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},yearrange:{minyear:1300,maxyear:1499},mask:"y/1/2",leapday:"/12/30",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",clearIncomplete:!0}}),Inputmask}(jQuery,Inputmask),function($,Inputmask){return Inputmask.extendDefinitions({A:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,casing:"upper"},"&":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,casing:"upper"},"#":{validator:"[0-9A-Fa-f]",cardinality:1,casing:"upper"}}),Inputmask.extendAliases({url:{mask:"ir",placeholder:"",separator:"",defaultPrefix:"http://",regex:{urlpre1:new RegExp("[fh]"),urlpre2:new RegExp("(ft|ht)"),urlpre3:new RegExp("(ftp|htt)"),urlpre4:new RegExp("(ftp:|http|ftps)"),urlpre5:new RegExp("(ftp:/|ftps:|http:|https)"),urlpre6:new RegExp("(ftp://|ftps:/|http:/|https:)"),urlpre7:new RegExp("(ftp://|ftps://|http://|https:/)"),urlpre8:new RegExp("(ftp://|ftps://|http://|https://)")},definitions:{i:{validator:function(chrs,maskset,pos,strict,opts){return!0},cardinality:8,prevalidator:function(){for(var result=[],prefixLimit=8,i=0;prefixLimit>i;i++)result[i]=function(){var j=i;return{validator:function(chrs,maskset,pos,strict,opts){if(opts.regex["urlpre"+(j+1)]){var k,tmp=chrs;j+1-chrs.length>0&&(tmp=maskset.buffer.join("").substring(0,j+1-chrs.length)+""+tmp);var isValid=opts.regex["urlpre"+(j+1)].test(tmp);if(!strict&&!isValid){for(pos-=j,k=0;k<opts.defaultPrefix.length;k++)maskset.buffer[pos]=opts.defaultPrefix[k],pos++;for(k=0;k<tmp.length-1;k++)maskset.buffer[pos]=tmp[k],pos++;return{pos:pos}}return isValid}return!1},cardinality:j}}();return result}()},r:{validator:".",cardinality:50}},insertMode:!1,autoUnmask:!1},ip:{mask:"i[i[i]].i[i[i]].i[i[i]].i[i[i]]",definitions:{i:{validator:function(chrs,maskset,pos,strict,opts){return pos-1>-1&&"."!==maskset.buffer[pos-1]?(chrs=maskset.buffer[pos-1]+chrs,chrs=pos-2>-1&&"."!==maskset.buffer[pos-2]?maskset.buffer[pos-2]+chrs:"0"+chrs):chrs="00"+chrs,new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(chrs)},cardinality:1}},onUnMask:function(maskedValue,unmaskedValue,opts){return maskedValue}},email:{mask:"*{1,64}[.*{1,64}][.*{1,64}][.*{1,64}]@*{1,64}[.*{2,64}][.*{2,6}][.*{1,2}]",greedy:!1,onBeforePaste:function(pastedValue,opts){return pastedValue=pastedValue.toLowerCase(),pastedValue.replace("mailto:","")},definitions:{"*":{validator:"[0-9A-Za-z!#$%&'*+/=?^_`{|}~-]",cardinality:1,casing:"lower"}},onUnMask:function(maskedValue,unmaskedValue,opts){return maskedValue}},mac:{mask:"##:##:##:##:##:##"}}),Inputmask}(jQuery,Inputmask),function($,Inputmask){return Inputmask.extendAliases({numeric:{mask:function(opts){function autoEscape(txt){for(var escapedTxt="",i=0;i<txt.length;i++)escapedTxt+=opts.definitions[txt.charAt(i)]?"\\"+txt.charAt(i):txt.charAt(i);return escapedTxt}if(0!==opts.repeat&&isNaN(opts.integerDigits)&&(opts.integerDigits=opts.repeat),opts.repeat=0,opts.groupSeparator===opts.radixPoint&&(opts.groupSeparator="."===opts.radixPoint?",":","===opts.radixPoint?".":"")," "===opts.groupSeparator&&(opts.skipOptionalPartCharacter=void 0),opts.autoGroup=opts.autoGroup&&""!==opts.groupSeparator,opts.autoGroup&&("string"==typeof opts.groupSize&&isFinite(opts.groupSize)&&(opts.groupSize=parseInt(opts.groupSize)),isFinite(opts.integerDigits))){var seps=Math.floor(opts.integerDigits/opts.groupSize),mod=opts.integerDigits%opts.groupSize;opts.integerDigits=parseInt(opts.integerDigits)+(0===mod?seps-1:seps),opts.integerDigits<1&&(opts.integerDigits="*")}opts.placeholder.length>1&&(opts.placeholder=opts.placeholder.charAt(0)),opts.radixFocus=opts.radixFocus&&""!==opts.placeholder&&opts.integerOptional===!0,opts.definitions[";"]=opts.definitions["~"],opts.definitions[";"].definitionSymbol="~",opts.numericInput===!0&&(opts.radixFocus=!1,opts.digitsOptional=!1,isNaN(opts.digits)&&(opts.digits=2),opts.decimalProtect=!1);var mask=autoEscape(opts.prefix);return mask+="[+]",mask+=opts.integerOptional===!0?"~{1,"+opts.integerDigits+"}":"~{"+opts.integerDigits+"}",void 0!==opts.digits&&(isNaN(opts.digits)||parseInt(opts.digits)>0)&&(mask+=opts.digitsOptional?"["+(opts.decimalProtect?":":opts.radixPoint)+";{1,"+opts.digits+"}]":(opts.decimalProtect?":":opts.radixPoint)+";{"+opts.digits+"}"),""!==opts.negationSymbol.back&&(mask+="[-]"),mask+=autoEscape(opts.suffix),opts.greedy=!1,mask},placeholder:"",greedy:!1,digits:"*",digitsOptional:!0,radixPoint:".",radixFocus:!0,groupSize:3,groupSeparator:"",autoGroup:!1,allowPlus:!0,allowMinus:!0,negationSymbol:{front:"-",back:""},integerDigits:"+",integerOptional:!0,prefix:"",suffix:"",rightAlign:!0,decimalProtect:!0,min:null,max:null,step:1,insertMode:!0,autoUnmask:!1,unmaskAsNumber:!1,postFormat:function(buffer,pos,reformatOnly,opts){opts.numericInput===!0&&(buffer=buffer.reverse(),isFinite(pos)&&(pos=buffer.join("").length-pos-1));var i,l,suffixStripped=!1;buffer.length>=opts.suffix.length&&buffer.join("").indexOf(opts.suffix)===buffer.length-opts.suffix.length&&(buffer.length=buffer.length-opts.suffix.length,suffixStripped=!0),pos=pos>=buffer.length?buffer.length-1:pos<opts.prefix.length?opts.prefix.length:pos;var needsRefresh=!1,charAtPos=buffer[pos];if(""===opts.groupSeparator||opts.numericInput!==!0&&-1!==$.inArray(opts.radixPoint,buffer)&&pos>$.inArray(opts.radixPoint,buffer)||new RegExp("["+Inputmask.escapeRegex(opts.negationSymbol.front)+"+]").test(charAtPos)){if(suffixStripped)for(i=0,l=opts.suffix.length;l>i;i++)buffer.push(opts.suffix.charAt(i));return{pos:pos}}var cbuf=buffer.slice();charAtPos===opts.groupSeparator&&(cbuf.splice(pos--,1),charAtPos=cbuf[pos]),reformatOnly?charAtPos!==opts.radixPoint&&(cbuf[pos]="?"):cbuf.splice(pos,0,"?");var bufVal=cbuf.join(""),bufValOrigin=bufVal;if(bufVal.length>0&&opts.autoGroup||reformatOnly&&-1!==bufVal.indexOf(opts.groupSeparator)){var escapedGroupSeparator=Inputmask.escapeRegex(opts.groupSeparator);needsRefresh=0===bufVal.indexOf(opts.groupSeparator),bufVal=bufVal.replace(new RegExp(escapedGroupSeparator,"g"),"");var radixSplit=bufVal.split(opts.radixPoint);if(bufVal=""===opts.radixPoint?bufVal:radixSplit[0],bufVal!==opts.prefix+"?0"&&bufVal.length>=opts.groupSize+opts.prefix.length)for(var reg=new RegExp("([-+]?[\\d?]+)([\\d?]{"+opts.groupSize+"})");reg.test(bufVal);)bufVal=bufVal.replace(reg,"$1"+opts.groupSeparator+"$2"),bufVal=bufVal.replace(opts.groupSeparator+opts.groupSeparator,opts.groupSeparator);""!==opts.radixPoint&&radixSplit.length>1&&(bufVal+=opts.radixPoint+radixSplit[1])}for(needsRefresh=bufValOrigin!==bufVal,buffer.length=bufVal.length,i=0,l=bufVal.length;l>i;i++)buffer[i]=bufVal.charAt(i);var newPos=$.inArray("?",buffer);if(-1===newPos&&charAtPos===opts.radixPoint&&(newPos=$.inArray(opts.radixPoint,buffer)),reformatOnly?buffer[newPos]=charAtPos:buffer.splice(newPos,1),!needsRefresh&&suffixStripped)for(i=0,l=opts.suffix.length;l>i;i++)buffer.push(opts.suffix.charAt(i));return newPos=opts.numericInput&&isFinite(pos)?buffer.join("").length-newPos-1:newPos,opts.numericInput&&(buffer=buffer.reverse(),$.inArray(opts.radixPoint,buffer)<newPos&&buffer.join("").length-opts.suffix.length!==newPos&&(newPos-=1)),{pos:newPos,refreshFromBuffer:needsRefresh,buffer:buffer}},onBeforeWrite:function(e,buffer,caretPos,opts){if(e&&("blur"===e.type||"checkval"===e.type)){var maskedValue=buffer.join(""),processValue=maskedValue.replace(opts.prefix,"");if(processValue=processValue.replace(opts.suffix,""),processValue=processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),""),","===opts.radixPoint&&(processValue=processValue.replace(Inputmask.escapeRegex(opts.radixPoint),".")),isFinite(processValue)&&isFinite(opts.min)&&parseFloat(processValue)<parseFloat(opts.min))return $.extend(!0,{refreshFromBuffer:!0,buffer:(opts.prefix+opts.min).split("")},opts.postFormat((opts.prefix+opts.min).split(""),0,!0,opts));if(opts.numericInput!==!0){var tmpBufSplit=""!==opts.radixPoint?buffer.join("").split(opts.radixPoint):[buffer.join("")],matchRslt=tmpBufSplit[0].match(opts.regex.integerPart(opts)),matchRsltDigits=2===tmpBufSplit.length?tmpBufSplit[1].match(opts.regex.integerNPart(opts)):void 0;if(matchRslt){matchRslt[0]!==opts.negationSymbol.front+"0"&&matchRslt[0]!==opts.negationSymbol.front&&"+"!==matchRslt[0]||void 0!==matchRsltDigits&&!matchRsltDigits[0].match(/^0+$/)||buffer.splice(matchRslt.index,1);

var radixPosition=$.inArray(opts.radixPoint,buffer);if(-1!==radixPosition){if(isFinite(opts.digits)&&!opts.digitsOptional){for(var i=1;i<=opts.digits;i++)(void 0===buffer[radixPosition+i]||buffer[radixPosition+i]===opts.placeholder.charAt(0))&&(buffer[radixPosition+i]="0");return{refreshFromBuffer:maskedValue!==buffer.join(""),buffer:buffer}}if(radixPosition===buffer.length-opts.suffix.length-1)return buffer.splice(radixPosition,1),{refreshFromBuffer:!0,buffer:buffer}}}}}if(opts.autoGroup){var rslt=opts.postFormat(buffer,opts.numericInput?caretPos:caretPos-1,!0,opts);return rslt.caret=caretPos<=opts.prefix.length?rslt.pos:rslt.pos+1,rslt}},regex:{integerPart:function(opts){return new RegExp("["+Inputmask.escapeRegex(opts.negationSymbol.front)+"+]?\\d+")},integerNPart:function(opts){return new RegExp("[\\d"+Inputmask.escapeRegex(opts.groupSeparator)+"]+")}},signHandler:function(chrs,maskset,pos,strict,opts){if(!strict&&opts.allowMinus&&"-"===chrs||opts.allowPlus&&"+"===chrs){var matchRslt=maskset.buffer.join("").match(opts.regex.integerPart(opts));if(matchRslt&&matchRslt[0].length>0)return maskset.buffer[matchRslt.index]===("-"===chrs?"+":opts.negationSymbol.front)?"-"===chrs?""!==opts.negationSymbol.back?{pos:matchRslt.index,c:opts.negationSymbol.front,remove:matchRslt.index,caret:pos,insert:{pos:maskset.buffer.length-opts.suffix.length-1,c:opts.negationSymbol.back}}:{pos:matchRslt.index,c:opts.negationSymbol.front,remove:matchRslt.index,caret:pos}:""!==opts.negationSymbol.back?{pos:matchRslt.index,c:"+",remove:[matchRslt.index,maskset.buffer.length-opts.suffix.length-1],caret:pos}:{pos:matchRslt.index,c:"+",remove:matchRslt.index,caret:pos}:maskset.buffer[matchRslt.index]===("-"===chrs?opts.negationSymbol.front:"+")?"-"===chrs&&""!==opts.negationSymbol.back?{remove:[matchRslt.index,maskset.buffer.length-opts.suffix.length-1],caret:pos-1}:{remove:matchRslt.index,caret:pos-1}:"-"===chrs?""!==opts.negationSymbol.back?{pos:matchRslt.index,c:opts.negationSymbol.front,caret:pos+1,insert:{pos:maskset.buffer.length-opts.suffix.length,c:opts.negationSymbol.back}}:{pos:matchRslt.index,c:opts.negationSymbol.front,caret:pos+1}:{pos:matchRslt.index,c:chrs,caret:pos+1}}return!1},radixHandler:function(chrs,maskset,pos,strict,opts){if(!strict&&(-1!==$.inArray(chrs,[",","."])&&(chrs=opts.radixPoint),chrs===opts.radixPoint&&void 0!==opts.digits&&(isNaN(opts.digits)||parseInt(opts.digits)>0))){var radixPos=$.inArray(opts.radixPoint,maskset.buffer),integerValue=maskset.buffer.join("").match(opts.regex.integerPart(opts));if(-1!==radixPos&&maskset.validPositions[radixPos])return maskset.validPositions[radixPos-1]?{caret:radixPos+1}:{pos:integerValue.index,c:integerValue[0],caret:radixPos+1};if(!integerValue||"0"===integerValue[0]&&integerValue.index+1!==pos)return maskset.buffer[integerValue?integerValue.index:pos]="0",{pos:(integerValue?integerValue.index:pos)+1,c:opts.radixPoint}}return!1},leadingZeroHandler:function(chrs,maskset,pos,strict,opts){if(opts.numericInput===!0){if("0"===maskset.buffer[maskset.buffer.length-opts.prefix.length-1])return{pos:pos,remove:maskset.buffer.length-opts.prefix.length-1}}else{var matchRslt=maskset.buffer.join("").match(opts.regex.integerNPart(opts)),radixPosition=$.inArray(opts.radixPoint,maskset.buffer);if(matchRslt&&!strict&&(-1===radixPosition||radixPosition>=pos))if(0===matchRslt[0].indexOf("0")){pos<opts.prefix.length&&(pos=matchRslt.index);var _radixPosition=$.inArray(opts.radixPoint,maskset._buffer),digitsMatch=maskset._buffer&&maskset.buffer.slice(radixPosition).join("")===maskset._buffer.slice(_radixPosition).join("")||0===parseInt(maskset.buffer.slice(radixPosition+1).join("")),integerMatch=maskset._buffer&&maskset.buffer.slice(matchRslt.index,radixPosition).join("")===maskset._buffer.slice(opts.prefix.length,_radixPosition).join("")||"0"===maskset.buffer.slice(matchRslt.index,radixPosition).join("");if(-1===radixPosition||digitsMatch&&integerMatch)return maskset.buffer.splice(matchRslt.index,1),pos=pos>matchRslt.index?pos-1:matchRslt.index,{pos:pos,remove:matchRslt.index};if(matchRslt.index+1===pos||"0"===chrs)return maskset.buffer.splice(matchRslt.index,1),pos=matchRslt.index,{pos:pos,remove:matchRslt.index}}else if("0"===chrs&&pos<=matchRslt.index&&matchRslt[0]!==opts.groupSeparator)return!1}return!0},postValidation:function(buffer,opts){var isValid=!0,maskedValue=buffer.join(""),processValue=maskedValue.replace(opts.prefix,"");return processValue=processValue.replace(opts.suffix,""),processValue=processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),""),","===opts.radixPoint&&(processValue=processValue.replace(Inputmask.escapeRegex(opts.radixPoint),".")),processValue=processValue.replace(new RegExp("^"+Inputmask.escapeRegex(opts.negationSymbol.front)),"-"),processValue=processValue.replace(new RegExp(Inputmask.escapeRegex(opts.negationSymbol.back)+"$"),""),processValue=processValue===opts.negationSymbol.front?processValue+"0":processValue,isFinite(processValue)&&(null!==opts.max&&isFinite(opts.max)&&(isValid=parseFloat(processValue)<=parseFloat(opts.max)),isValid&&null!==opts.min&&isFinite(opts.min)&&(0>=processValue||processValue.toString().length>=opts.min.toString().length)&&(isValid=parseFloat(processValue)>=parseFloat(opts.min),isValid||(isValid=$.extend(!0,{refreshFromBuffer:!0,buffer:(opts.prefix+opts.min).split("")},opts.postFormat((opts.prefix+opts.min).split(""),0,!0,opts)),isValid.refreshFromBuffer=!0))),isValid},definitions:{"~":{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.signHandler(chrs,maskset,pos,strict,opts);if(!isValid&&(isValid=opts.radixHandler(chrs,maskset,pos,strict,opts),!isValid&&(isValid=strict?new RegExp("[0-9"+Inputmask.escapeRegex(opts.groupSeparator)+"]").test(chrs):new RegExp("[0-9]").test(chrs),isValid===!0&&(isValid=opts.leadingZeroHandler(chrs,maskset,pos,strict,opts),isValid===!0)))){var radixPosition=$.inArray(opts.radixPoint,maskset.buffer);isValid=-1!==radixPosition&&opts.digitsOptional===!1&&opts.numericInput!==!0&&pos>radixPosition&&!strict?{pos:pos,remove:pos}:{pos:pos}}return isValid},cardinality:1,prevalidator:null},"+":{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.signHandler(chrs,maskset,pos,strict,opts);return!isValid&&(strict&&opts.allowMinus&&chrs===opts.negationSymbol.front||opts.allowMinus&&"-"===chrs||opts.allowPlus&&"+"===chrs)&&(isValid="-"===chrs?""!==opts.negationSymbol.back?{pos:pos,c:"-"===chrs?opts.negationSymbol.front:"+",caret:pos+1,insert:{pos:maskset.buffer.length,c:opts.negationSymbol.back}}:{pos:pos,c:"-"===chrs?opts.negationSymbol.front:"+",caret:pos+1}:!0),isValid},cardinality:1,prevalidator:null,placeholder:""},"-":{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.signHandler(chrs,maskset,pos,strict,opts);return!isValid&&strict&&opts.allowMinus&&chrs===opts.negationSymbol.back&&(isValid=!0),isValid},cardinality:1,prevalidator:null,placeholder:""},":":{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.signHandler(chrs,maskset,pos,strict,opts);if(!isValid){var radix="["+Inputmask.escapeRegex(opts.radixPoint)+",\\.]";isValid=new RegExp(radix).test(chrs),isValid&&maskset.validPositions[pos]&&maskset.validPositions[pos].match.placeholder===opts.radixPoint&&(isValid={caret:pos+1})}return isValid?{c:opts.radixPoint}:isValid},cardinality:1,prevalidator:null,placeholder:function(opts){return opts.radixPoint}}},onUnMask:function(maskedValue,unmaskedValue,opts){var processValue=maskedValue.replace(opts.prefix,"");return processValue=processValue.replace(opts.suffix,""),processValue=processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),""),opts.unmaskAsNumber?(""!==opts.radixPoint&&-1!==processValue.indexOf(opts.radixPoint)&&(processValue=processValue.replace(Inputmask.escapeRegex.call(this,opts.radixPoint),".")),Number(processValue)):processValue},isComplete:function(buffer,opts){var maskedValue=buffer.join(""),bufClone=buffer.slice();if(opts.postFormat(bufClone,0,!0,opts),bufClone.join("")!==maskedValue)return!1;var processValue=maskedValue.replace(opts.prefix,"");return processValue=processValue.replace(opts.suffix,""),processValue=processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),""),","===opts.radixPoint&&(processValue=processValue.replace(Inputmask.escapeRegex(opts.radixPoint),".")),isFinite(processValue)},onBeforeMask:function(initialValue,opts){if(""!==opts.radixPoint&&isFinite(initialValue))initialValue=initialValue.toString().replace(".",opts.radixPoint);else{var kommaMatches=initialValue.match(/,/g),dotMatches=initialValue.match(/\./g);dotMatches&&kommaMatches?dotMatches.length>kommaMatches.length?(initialValue=initialValue.replace(/\./g,""),initialValue=initialValue.replace(",",opts.radixPoint)):kommaMatches.length>dotMatches.length?(initialValue=initialValue.replace(/,/g,""),initialValue=initialValue.replace(".",opts.radixPoint)):initialValue=initialValue.indexOf(".")<initialValue.indexOf(",")?initialValue.replace(/\./g,""):initialValue=initialValue.replace(/,/g,""):initialValue=initialValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),"")}if(0===opts.digits&&(-1!==initialValue.indexOf(".")?initialValue=initialValue.substring(0,initialValue.indexOf(".")):-1!==initialValue.indexOf(",")&&(initialValue=initialValue.substring(0,initialValue.indexOf(",")))),""!==opts.radixPoint&&isFinite(opts.digits)&&-1!==initialValue.indexOf(opts.radixPoint)){var valueParts=initialValue.split(opts.radixPoint),decPart=valueParts[1].match(new RegExp("\\d*"))[0];if(parseInt(opts.digits)<decPart.toString().length){var digitsFactor=Math.pow(10,parseInt(opts.digits));initialValue=initialValue.replace(Inputmask.escapeRegex(opts.radixPoint),"."),initialValue=Math.round(parseFloat(initialValue)*digitsFactor)/digitsFactor,initialValue=initialValue.toString().replace(".",opts.radixPoint)}}return initialValue.toString()},canClearPosition:function(maskset,position,lvp,strict,opts){var positionInput=maskset.validPositions[position].input,canClear=positionInput!==opts.radixPoint||null!==maskset.validPositions[position].match.fn&&opts.decimalProtect===!1||isFinite(positionInput)||position===lvp||positionInput===opts.groupSeparator||positionInput===opts.negationSymbol.front||positionInput===opts.negationSymbol.back;if(canClear&&isFinite(positionInput)){var matchRslt,radixPos=$.inArray(opts.radixPoint,maskset.buffer),radixInjection=!1;if(void 0===maskset.validPositions[radixPos]&&(maskset.validPositions[radixPos]={input:opts.radixPoint},radixInjection=!0),!strict&&maskset.buffer){matchRslt=maskset.buffer.join("").substr(0,position).match(opts.regex.integerNPart(opts));var pos=position+1,isNull=null==matchRslt||0===parseInt(matchRslt[0].replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),""));if(isNull)for(;maskset.validPositions[pos]&&(maskset.validPositions[pos].input===opts.groupSeparator||"0"===maskset.validPositions[pos].input);)delete maskset.validPositions[pos],pos++}var buffer=[];for(var vp in maskset.validPositions)void 0!==maskset.validPositions[vp].input&&buffer.push(maskset.validPositions[vp].input);if(radixInjection&&delete maskset.validPositions[radixPos],radixPos>0){var bufVal=buffer.join("");if(matchRslt=bufVal.match(opts.regex.integerNPart(opts)))if(radixPos>=position)if(0===matchRslt[0].indexOf("0"))canClear=matchRslt.index!==position||"0"===opts.placeholder;else{var intPart=parseInt(matchRslt[0].replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),"")),radixPart=parseInt(bufVal.split(opts.radixPoint)[1]);10>intPart&&maskset.validPositions[position]&&("0"!==opts.placeholder||radixPart>0)&&(maskset.validPositions[position].input="0",maskset.p=opts.prefix.length+1,canClear=!1)}else 0===matchRslt[0].indexOf("0")&&3===bufVal.length&&(maskset.validPositions={},canClear=!1)}}return canClear},onKeyDown:function(e,buffer,caretPos,opts){var $input=$(this);if(e.ctrlKey)switch(e.keyCode){case Inputmask.keyCode.UP:$input.val(parseFloat(this.inputmask.unmaskedvalue())+parseInt(opts.step)),$input.trigger("setvalue.inputmask");break;case Inputmask.keyCode.DOWN:$input.val(parseFloat(this.inputmask.unmaskedvalue())-parseInt(opts.step)),$input.trigger("setvalue.inputmask")}}},currency:{prefix:"$ ",groupSeparator:",",alias:"numeric",placeholder:"0",autoGroup:!0,digits:2,digitsOptional:!1,clearMaskOnLostFocus:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",digits:0,radixPoint:""},percentage:{alias:"numeric",digits:2,radixPoint:".",placeholder:"0",autoGroup:!1,min:0,max:100,suffix:" %",allowPlus:!1,allowMinus:!1}}),Inputmask}(jQuery,Inputmask),function($,Inputmask){return Inputmask.extendAliases({phone:{url:"phone-codes/phone-codes.js",countrycode:"",mask:function(opts){opts.definitions["#"]=opts.definitions[9];var maskList=[];return $.ajax({url:opts.url,async:!1,dataType:"json",success:function(response){maskList=response},error:function(xhr,ajaxOptions,thrownError){alert(thrownError+" - "+opts.url)}}),maskList=maskList.sort(function(a,b){return(a.mask||a)<(b.mask||b)?-1:1})},keepStatic:!1,nojumps:!0,nojumpsThreshold:1,onBeforeMask:function(value,opts){var processedValue=value.replace(/^0/g,"");return(processedValue.indexOf(opts.countrycode)>1||-1===processedValue.indexOf(opts.countrycode))&&(processedValue="+"+opts.countrycode+processedValue),processedValue}},phonebe:{alias:"phone",url:"phone-codes/phone-be.js",countrycode:"32",nojumpsThreshold:4}}),Inputmask}(jQuery,Inputmask),function($,Inputmask){return Inputmask.extendAliases({Regex:{mask:"r",greedy:!1,repeat:"*",regex:null,regexTokens:null,tokenizer:/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,quantifierFilter:/[0-9]+[^,]/,isComplete:function(buffer,opts){return new RegExp(opts.regex).test(buffer.join(""))},definitions:{r:{validator:function(chrs,maskset,pos,strict,opts){function RegexToken(isGroup,isQuantifier){this.matches=[],this.isGroup=isGroup||!1,this.isQuantifier=isQuantifier||!1,this.quantifier={min:1,max:1},this.repeaterPart=void 0}function analyseRegex(){var match,m,currentToken=new RegexToken,opengroups=[];for(opts.regexTokens=[];match=opts.tokenizer.exec(opts.regex);)switch(m=match[0],m.charAt(0)){case"(":opengroups.push(new RegexToken(!0));break;case")":groupToken=opengroups.pop(),opengroups.length>0?opengroups[opengroups.length-1].matches.push(groupToken):currentToken.matches.push(groupToken);break;case"{":case"+":case"*":var quantifierToken=new RegexToken(!1,!0);m=m.replace(/[{}]/g,"");var mq=m.split(","),mq0=isNaN(mq[0])?mq[0]:parseInt(mq[0]),mq1=1===mq.length?mq0:isNaN(mq[1])?mq[1]:parseInt(mq[1]);if(quantifierToken.quantifier={min:mq0,max:mq1},opengroups.length>0){var matches=opengroups[opengroups.length-1].matches;match=matches.pop(),match.isGroup||(groupToken=new RegexToken(!0),groupToken.matches.push(match),match=groupToken),matches.push(match),matches.push(quantifierToken)}else match=currentToken.matches.pop(),match.isGroup||(groupToken=new RegexToken(!0),groupToken.matches.push(match),match=groupToken),currentToken.matches.push(match),currentToken.matches.push(quantifierToken);break;default:opengroups.length>0?opengroups[opengroups.length-1].matches.push(m):currentToken.matches.push(m)}currentToken.matches.length>0&&opts.regexTokens.push(currentToken)}function validateRegexToken(token,fromGroup){var isvalid=!1;fromGroup&&(regexPart+="(",openGroupCount++);for(var mndx=0;mndx<token.matches.length;mndx++){var matchToken=token.matches[mndx];if(matchToken.isGroup===!0)isvalid=validateRegexToken(matchToken,!0);else if(matchToken.isQuantifier===!0){var crrntndx=$.inArray(matchToken,token.matches),matchGroup=token.matches[crrntndx-1],regexPartBak=regexPart;if(isNaN(matchToken.quantifier.max)){for(;matchToken.repeaterPart&&matchToken.repeaterPart!==regexPart&&matchToken.repeaterPart.length>regexPart.length&&!(isvalid=validateRegexToken(matchGroup,!0)););isvalid=isvalid||validateRegexToken(matchGroup,!0),isvalid&&(matchToken.repeaterPart=regexPart),regexPart=regexPartBak+matchToken.quantifier.max}else{for(var i=0,qm=matchToken.quantifier.max-1;qm>i&&!(isvalid=validateRegexToken(matchGroup,!0));i++);regexPart=regexPartBak+"{"+matchToken.quantifier.min+","+matchToken.quantifier.max+"}"}}else if(void 0!==matchToken.matches)for(var k=0;k<matchToken.length&&!(isvalid=validateRegexToken(matchToken[k],fromGroup));k++);else{var testExp;if("["==matchToken.charAt(0)){testExp=regexPart,testExp+=matchToken;for(var j=0;openGroupCount>j;j++)testExp+=")";var exp=new RegExp("^("+testExp+")$");isvalid=exp.test(bufferStr)}else for(var l=0,tl=matchToken.length;tl>l;l++)if("\\"!==matchToken.charAt(l)){testExp=regexPart,testExp+=matchToken.substr(0,l+1),testExp=testExp.replace(/\|$/,"");for(var j=0;openGroupCount>j;j++)testExp+=")";var exp=new RegExp("^("+testExp+")$");if(isvalid=exp.test(bufferStr))break}regexPart+=matchToken}if(isvalid)break}return fromGroup&&(regexPart+=")",openGroupCount--),isvalid}var groupToken,cbuffer=maskset.buffer.slice(),regexPart="",isValid=!1,openGroupCount=0;null===opts.regexTokens&&analyseRegex(),cbuffer.splice(pos,0,chrs);for(var bufferStr=cbuffer.join(""),i=0;i<opts.regexTokens.length;i++){var regexToken=opts.regexTokens[i];if(isValid=validateRegexToken(regexToken,regexToken.isGroup))break}return isValid},cardinality:1}}}}),Inputmask}(jQuery,Inputmask),function(){"use strict";var app=angular.module("app",["ngResource","ui.router","ngCookies","ui.mask","ui.bootstrap","isteven-multi-select","ngInputModified","ui.validate","cgBusy","angular.filter","xeditable","checklist-model","ngFileUpload","STNResource","ui.bootstrap.datetimepicker","leaflet-directive","ngHandsontable","STNControllers","LogInOutController","ModalControllers","SettingsControllers","WiM.Services","WiM.Event","wim_angular","angularSpinners"]);app.constant("SERVER_URL","https://stn.wim.usgs.gov/STNServices"),app.constant("ENVIRONMENT","Production"),app.run(["$rootScope","$uibModalStack","$cookies","$state","ENVIRONMENT",function($rootScope,$uibModalStack,$cookies,$state,ENVIRONMENT){$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){void 0!==$cookies.get("STNCreds")&&""!==$cookies.get("STNCreds")||!toState.authenticate?($rootScope.stateIsLoading={showLoading:!0},$uibModalStack.dismissAll(),"/"==toState.url&&$("#userNameFocus").focus()):($rootScope.returnToState=toState.name,$rootScope.returnToStateParams=toParams.id,event.preventDefault(),$state.go("entry")),$rootScope.environment=ENVIRONMENT}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams,error){$rootScope.stateIsLoading.showLoading=!1}),$rootScope.$on("$stateChangeError",function(event,toState,toParams,fromState,fromParams,error){$rootScope.stateIsLoading.showLoading=!1,alert("Error occurred: Status"+error.status+", "+error.statusText+". The following request was unsuccessful: "+error.config.url+" Please refresh and try again.")})}]),app.config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("entry",{url:"/",templateUrl:"component/main/mainView.html",controller:"mainCtrl"}).state("map",{url:"/Map",views:{"":{controller:"MapController",templateUrl:"component/map/map.html"},"mapFilters@map":{templateUrl:"component/map/mapFilters.html",controller:"MapFiltersController",resolve:{s:"STATE",stateList:function(s){return s.getAll().$promise},sensT:"SENSOR_TYPE",sensorTypes:function(sensT){return sensT.getAll().$promise},netwN:"NETWORK_NAME",networkNames:function(netwN){return netwN.getAll().$promise}}},"mapSiteInfo@map":{templateUrl:"component/site/mapSiteInfoView.html",controller:"MapSiteInfoController"},"mapPeaksView@map":{templateUrl:"component/peak/mapPeaksView.html",controller:"MapPeaksController"},"mapSensorPropose@map":{templateUrl:"component/sensor/mapSensorPropose.html",resolve:{dt:"DEPLOYMENT_TYPE",allDeployTypes:function(dt){return dt.getAll().$promise},sd:"SENSOR_TYPE",allSensDeps:function(sd){return sd.getAll().$promise}},controller:"MapSensorProposeController"}}}).state("approval",{url:"/Approval",templateUrl:"component/approval/approval.html",controller:"approvalCtrl",authenticate:!0,resolve:{s:"STATE",stateList:function(s){return s.getAll().$promise},i:"INSTRUMENT",instrumentList:function(i){return i.getAll().$promise},st:"SENSOR_TYPE",allSensorTypes:function(st){return st.getAll().$promise},dt:"DEPLOYMENT_TYPE",allDepTypes:function(dt){return dt.getAll().$promise}}}).state("siteSearch",{url:"/SiteSearch",templateUrl:"component/siteSearch/siteSearch.html",controller:"siteSearchCtrl",authenticate:!0,resolve:{s:"STATE",stateList:function(s){return s.getAll().$promise},sensT:"SENSOR_TYPE",sensorTypes:function(sensT){return sensT.getAll().$promise},netwN:"NETWORK_NAME",networkNames:function(netwN){return netwN.getAll().$promise}}}).state("reporting",{url:"/Reporting","abstract":!0,templateUrl:"component/reporting/reporting.html",controller:"reportingCtrl",authenticate:!0,resolve:{e:"EVENT",allEvents:function(e){return e.getAll().$promise},state:"STATE",allStates:function(state){return state.getAll().$promise},r:"REPORT",allReports:function(r){return r.getAll().$promise},et:"EVENT_TYPE",allEventTypes:function(et){return et.getAll().$promise},es:"EVENT_STATUS",allEventStatus:function(es){return es.getAll().$promise},ag:"AGENCY",allAgencies:function(ag){return ag.getAll().$promise},memberReports:function(r,$cookies){var mID=$cookies.get("mID");return r.getMemberReports({memberId:mID}).$promise}}}).state("reporting.reportDash",{url:"/Dashboard",templateUrl:"component/reporting/reportingDashboard.html",controller:"reportingDashCtrl",authenticate:!0,resolve:{r:"REPORT",allReportsAgain:function(r){return r.getAll().$promise}}}).state("reporting.submitReport",{url:"/SubmitReport",templateUrl:"component/reporting/submitReport.html",controller:"submitReportCtrl",authenticate:!0}).state("reporting.generateReport",{url:"/GenerateReport",templateUrl:"component/reporting/generateReport.html",authenticate:!0}).state("settings",{url:"/Settings",templateUrl:"component/settings/settings.html",controller:"settingsCtrl",authenticate:!0}).state("members",{url:"/Members",params:{id:null},"abstract":!0,template:"<div ui-view></div>",controller:"memberCtrl",authenticate:!0,resolve:{r:"ROLE",allRoles:function(r){return r.getAll().$promise},a:"AGENCY",allAgencies:function(a){return a.getAll().$promise},userProfileId:function($stateParams){return void 0!==$stateParams.id?$stateParams.id:void 0}}}).state("members.MembersList",{url:"/MembersList",templateUrl:"component/member/membersList.html",authenticate:!0}).state("events",{url:"/Events","abstract":!0,template:"<div ui-view></div>",controller:"eventCtrl",authenticate:!0,resolve:{e:"EVENT",allEvents:function(e){return e.getAll().$promise},et:"EVENT_TYPE",allEventTypes:function(et){return et.getAll().$promise},es:"EVENT_STATUS",allEventStats:function(es){return es.getAll().$promise},m:"MEMBER",allCoordMembers:function(m,$http,$cookies){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",m.getRoleMembers({roleId:1}).$promise}}}).state("events.EventsList",{url:"/EventsList",templateUrl:"component/event/eventsList.html",authenticate:!0}).state("events.EventInfo",{url:"/eventInfo/:id",templateUrl:"component/event/eventInfo.html",controller:"eventInfoCtrl",authenticate:!0,resolve:{e:"EVENT",thisEvent:function(e,$stateParams){var eventId=$stateParams.id;return eventId>0?e.query({id:eventId}).$promise:void 0}}}).state("resources",{url:"/Resources","abstract":!0,template:"<div ui-view></div>",controller:"resourcesCtrl",authenticate:!0,resolve:{state:"STATE",allStates:function(state){return state.getAll().$promise},ag:"AGENCY",allAgencies:function(ag){return ag.getAll().$promise},c:"CONTACT_TYPE",allContactTypes:function(c){return c.getAll().$promise},d:"DEPLOYMENT_PRIORITY",allDeployPriorities:function(d){return d.getAll().$promise},es:"EVENT_STATUS",allEventStats:function(es){return es.getAll().$promise},et:"EVENT_TYPE",allEventTypes:function(et){return et.getAll().$promise},ft:"FILE_TYPE",allFileTypes:function(ft){return ft.getAll().$promise},hcm:"HORIZONTAL_COLL_METHODS",allHorCollMethods:function(hcm){return hcm.getAll().$promise},hd:"HORIZONTAL_DATUM",allHorDatums:function(hd){return hd.getAll().$promise},ht:"HOUSING_TYPE",allHouseTypes:function(ht){return ht.getAll().$promise},hq:"HWM_QUALITY",allHWMqualities:function(hq){return hq.getAll().$promise},hwmT:"HWM_TYPE",allHWMtypes:function(hwmT){return hwmT.getAll().$promise},icc:"INST_COLL_CONDITION",allInstCollectConditions:function(icc){return icc.getAll().$promise},m:"MARKER",allMarkers:function(m){return m.getAll().$promise},nn:"NETWORK_NAME",allNetworkNames:function(nn){return nn.getAll().$promise},opq:"OP_QUALITY",allObjPtQualities:function(opq){return opq.getAll().$promise},opt:"OP_TYPE",allObjPtTypes:function(opt){return opt.getAll().$promise},sb:"SENSOR_BRAND",allSensorBrands:function(sb){return sb.getAll().$promise},dt:"DEPLOYMENT_TYPE",allDeploymentTypes:function(dt){return dt.getAll().$promise},sstat:"STATUS_TYPE",allStatusTypes:function(sstat){return sstat.getAll().$promise},st:"SENSOR_TYPE",allSensorTypes:function(st){return st.getAll().$promise},nt:"NETWORK_TYPE",allNetworkTypes:function(nt){return nt.getAll().$promise},vcm:"VERTICAL_COLL_METHOD",allVerticalCollMethods:function(vcm){return vcm.getAll().$promise},vd:"VERTICAL_DATUM",allVerticalDatums:function(vd){return vd.getAll().$promise}}}).state("resources.ResourcesList",{url:"/ResourcesList",templateUrl:"component/resources/resourcesList.html",authenticate:!0}).state("resources.ResourcesList.agency",{url:"/Agencies",templateUrl:"component/resources/agency.html",authenticate:!0}).state("resources.ResourcesList.ContactType",{url:"/ContactTypes",templateUrl:"component/resources/contactType.html",authenticate:!0}).state("resources.ResourcesList.DepPriority",{url:"/DeploymentPriorities",templateUrl:"component/resources/deploymentPriority.html",authenticate:!0}).state("resources.ResourcesList.EventStatus",{url:"/EventStatus",templateUrl:"component/resources/eventStatus.html",authenticate:!0}).state("resources.ResourcesList.EventType",{url:"/EventTypes",templateUrl:"component/resources/eventType.html",authenticate:!0}).state("resources.ResourcesList.FileType",{url:"/FileTypes",templateUrl:"component/resources/fileType.html",authenticate:!0}).state("resources.ResourcesList.HorCollMethd",{url:"/HorizontalCollMethods",templateUrl:"component/resources/horizontalCollectionMethod.html",authenticate:!0}).state("resources.ResourcesList.HorDatum",{url:"/HorizontalDatums",templateUrl:"component/resources/horizontalDatum.html",authenticate:!0}).state("resources.ResourcesList.HousingType",{url:"/HousingTypes",templateUrl:"component/resources/housingType.html",authenticate:!0}).state("resources.ResourcesList.HWMQual",{url:"/HWMQualities",templateUrl:"component/resources/hwmQuality.html",authenticate:!0}).state("resources.ResourcesList.HWMType",{url:"/HWMTypes",templateUrl:"component/resources/hwmType.html",authenticate:!0}).state("resources.ResourcesList.InstrCollCondition",{url:"/InstrCollConditions",templateUrl:"component/resources/instrumentCollectionCondition.html",authenticate:!0}).state("resources.ResourcesList.Marker",{url:"/Markers",templateUrl:"component/resources/marker.html",authenticate:!0}).state("resources.ResourcesList.NetworkNames",{url:"/NetworkNames",templateUrl:"component/resources/networkNames.html",authenticate:!0}).state("resources.ResourcesList.OPquality",{url:"/ObjPointQualities",templateUrl:"component/resources/objectivePointQuality.html",authenticate:!0}).state("resources.ResourcesList.OPType",{url:"/ObjPointType",templateUrl:"component/resources/objectivePointType.html",authenticate:!0}).state("resources.ResourcesList.SensorBrand",{url:"/SensorBrands",templateUrl:"component/resources/sensorBrand.html",authenticate:!0}).state("resources.ResourcesList.SenDepType",{url:"/SensorDeploymentTypes",templateUrl:"component/resources/deploymentType.html",authenticate:!0}).state("resources.ResourcesList.StatusType",{url:"/StatusTypes",templateUrl:"component/resources/statusType.html",authenticate:!0}).state("resources.ResourcesList.SensorType",{url:"/SensorTypes",templateUrl:"component/resources/sensorType.html",authenticate:!0}).state("resources.ResourcesList.NetworkType",{url:"/NetworkTypes",templateUrl:"component/resources/networkType.html",authenticate:!0}).state("resources.ResourcesList.VertCollMethod",{url:"/VerticalCollMethods",templateUrl:"component/resources/verticalCollectionMethod.html",authenticate:!0}).state("resources.ResourcesList.VertDatum",{url:"/VerticalDatums",templateUrl:"component/resources/verticalDatum.html",authenticate:!0}).state("bulkHWMAdj",{url:"/BulkHWM_adjustments",templateUrl:"component/hwm/bulkHWMAdj.html",authenticate:!0,controller:"bulkHWMAdjCtrl",resolve:{e:"EVENT",eventList:function(e){return e.getAll().$promise},s:"STATE",stateList:function(s){return s.getAll().$promise},c:"COUNTIES",countyList:function(c){return c.getAll().$promise}}}).state("bulkHWM",{url:"/HistoricHWM_Upload",templateUrl:"component/hwm/bulkHWM.html",authenticate:!0,controller:"bulkHWMCtrl",resolve:{e:"EVENT",eventList:function(e){return e.getAll().$promise},s:"STATE",stateList:function(s){return s.getAll().$promise},c:"COUNTIES",countyList:function(c){return c.getAll().$promise},ht:"HWM_TYPE",hwmTypeList:function(ht){return ht.getAll().$promise},m:"MARKER",markerList:function(m){return m.getAll().$promise},hq:"HWM_QUALITY",hwmQualList:function(hq){return hq.getAll().$promise},hd:"HORIZONTAL_DATUM",horizDatumList:function(hd){return hd.getAll().$promise},hcm:"HORIZONTAL_COLL_METHODS",horCollMethList:function(hcm){return hcm.getAll().$promise},vd:"VERTICAL_DATUM",vertDatumList:function(vd){return vd.getAll().$promise},vcm:"VERTICAL_COLL_METHOD",vertCollMethList:function(vcm){return vcm.getAll().$promise},f:"FILE_TYPE",fileTypesList:function(f){return f.getAll().$promise},a:"AGENCY",agenciesList:function(a){return a.getAll().$promise}}}).state("site",{url:"/Site/:id","abstract":!0,params:{id:null,latitude:{value:null,squash:!0},longitude:{value:null,squash:!0}},templateUrl:"component/site/site.html",authenticate:!0,controller:["$scope","$stateParams",function($scope,$stateParams){$scope.siteID=$stateParams.id}],resolve:{s:"SITE",thisSite:function(s,$stateParams){return $stateParams.id>0?s.query({id:$stateParams.id}).$promise:void 0},latlong:function($stateParams){if($stateParams.latitude){var latlongarray=[$stateParams.latitude,$stateParams.longitude];return latlongarray}},thisSiteNetworkNames:function(s,$stateParams){return $stateParams.id>0?s.getSiteNetworkNames({id:$stateParams.id}).$promise:void 0},thisSiteNetworkTypes:function(s,$stateParams){return $stateParams.id>0?s.getSiteNetworkTypes({id:$stateParams.id}).$promise:void 0},thisSiteHousings:function(s,$stateParams){return $stateParams.id>0?s.getSiteHousings({id:$stateParams.id}).$promise:void 0},thisSiteOPs:function(s,$stateParams){return $stateParams.id>0?s.getSiteOPs({id:$stateParams.id}).$promise:void 0},thisSiteSensors:function(s,$stateParams){return $stateParams.id>0?s.getSiteSensors({id:$stateParams.id}).$promise:void 0},thisSiteHWMs:function(s,$stateParams,$http,$cookies){return $stateParams.id>0?($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",s.getSiteHWMs({id:$stateParams.id}).$promise):void 0},thisSiteFiles:function(s,$stateParams){return $stateParams.id>0?s.getSiteFiles({id:$stateParams.id}).$promise:void 0},thisSitePeaks:function(s,$stateParams){return $stateParams.id>0?s.getSitePeaks({id:$stateParams.id}).$promise:void 0;

},hd:"HORIZONTAL_DATUM",allHorDatums:function(hd){return hd.getAll().$promise},hcm:"HORIZONTAL_COLL_METHODS",allHorCollMethods:function(hcm){return hcm.getAll().$promise},st:"STATE",allStates:function(st){return st.getAll().$promise},c:"COUNTIES",allCounties:function(c){return c.getAll().$promise},ht:"HOUSING_TYPE",allHousingTypes:function(ht){return ht.getAll().$promise},nn:"NETWORK_NAME",allNetworkNames:function(nn){return nn.getAll().$promise},nt:"NETWORK_TYPE",allNetworkTypes:function(nt){return nt.getAll().$promise},dt:"DEPLOYMENT_TYPE",allDeployTypes:function(dt){return dt.getAll().$promise},dp:"DEPLOYMENT_PRIORITY",allDeployPriorities:function(dp){return dp.getAll().$promise},opt:"OP_TYPE",allOPTypes:function(opt){return opt.getAll().$promise},vertDats:"VERTICAL_DATUM",allVertDatums:function(vertDats){return vertDats.getAll().$promise},vertColMet:"VERTICAL_COLL_METHOD",allVertColMethods:function(vertColMet){return vertColMet.getAll().$promise},opQual:"OP_QUALITY",allOPQualities:function(opQual){return opQual.getAll().$promise},e:"EVENT",allEvents:function(e){return e.getAll().$promise},sent:"SENSOR_TYPE",allSensorTypes:function(sent){return sent.getAll().$promise},sb:"SENSOR_BRAND",allSensorBrands:function(sb){return sb.getAll().$promise},hwmt:"HWM_TYPE",allHWMTypes:function(hwmt){return hwmt.getAll().$promise},hq:"HWM_QUALITY",allHWMQualities:function(hq){return hq.getAll().$promise},m:"MARKER",allMarkers:function(m){return m.getAll().$promise},ft:"FILE_TYPE",allFileTypes:function(ft){return ft.getAll().$promise},a:"AGENCY",allAgencies:function(a){return a.getAll().$promise}}}).state("site.dashboard",{url:"/SiteDashboard",authenticate:!0,views:{siteNo:{controller:["$scope","$cookies","thisSite",function($scope,$cookies,thisSite){void 0!==thisSite&&($scope.SiteNo=thisSite.site_no),$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEvent=null!==$cookies.get("SessionEventName")&&void 0!==$cookies.get("SessionEventName")?$cookies.get("SessionEventName"):"All Events"})}],template:'<div><h2 style="margin-top:0">Site {{SiteNo}} - For {{sessionEvent}}</h2></div><hr />'},aMap:{controller:"siteMapCtrl",templateUrl:"component/site/siteMapView.html",resolve:{aSite:function(thisSite){return void 0!==thisSite?thisSite:void 0},dt:"DEPLOYMENT_TYPE",deploymentTypes:function(thisSite,dt){return void 0!==thisSite?dt.getAll().$promise:void 0},s:"SITE",siteHWMs:function(thisSite,s){return void 0!==thisSite?s.getSiteHWMs({id:thisSite.site_id}).$promise:void 0},i:"INSTRUMENT",baroSensors:function(thisSite,i){return void 0!==thisSite?i.getSensorView({ViewType:"baro_view"}).$promise:void 0},metSensors:function(thisSite,i){return void 0!==thisSite?i.getSensorView({ViewType:"met_view"}).$promise:void 0},rdgSensors:function(thisSite,i){return void 0!==thisSite?i.getSensorView({ViewType:"rdg_view"}).$promise:void 0},stormSensors:function(thisSite,i){return void 0!==thisSite?i.getSensorView({ViewType:"stormtide_view"}).$promise:void 0},waveSensors:function(thisSite,i){return void 0!==thisSite?i.getSensorView({ViewType:"waveheight_view"}).$promise:void 0},presTempSensors:function(thisSite,i){return void 0!==thisSite?i.getSensorView({ViewType:"pressuretemp_view"}).$promise:void 0},thermSensors:function(thisSite,i){return void 0!==thisSite?i.getSensorView({ViewType:"therm_view"}).$promise:void 0},webcamSensors:function(thisSite,i){return void 0!==thisSite?i.getSensorView({ViewType:"webcam_view"}).$promise:void 0},raingageSensors:function(thisSite,i){return void 0!==thisSite?i.getSensorView({ViewType:"raingage_view"}).$promise:void 0}}},aSite:{controller:"siteCtrl",templateUrl:"component/site/siteInfoView.html"},op:{controller:"objectivePointCtrl",templateUrl:"component/objectivePoint/objectivePointList.html"},sensor:{controller:"sensorCtrl",templateUrl:"component/sensor/sensorList.html"},hwm:{controller:"hwmCtrl",templateUrl:"component/hwm/hwmList.html"},file:{controller:"fileCtrl",templateUrl:"component/file/fileList.html"},peak:{controller:"peakCtrl",templateUrl:"component/peak/peakList.html"}}}).state("quickCreate",{url:"/QuickCreate/:id",templateUrl:"component/site/quickCreate.html",controller:"quickCreateCtrl",authenticate:!0,resolve:{whichQuick:function($stateParams){return $stateParams.id},hd:"HORIZONTAL_DATUM",allHorDatums:function(hd){return hd.getAll().$promise},hcm:"HORIZONTAL_COLL_METHODS",allHorCollMethods:function(hcm){return hcm.getAll().$promise},st:"STATE",allStates:function(st){return st.getAll().$promise},c:"COUNTIES",allCounties:function(c){return c.getAll().$promise},opt:"OP_TYPE",allOPTypes:function(opt){return opt.getAll().$promise},vertDats:"VERTICAL_DATUM",allVertDatums:function(vertDats){return vertDats.getAll().$promise},vertColMet:"VERTICAL_COLL_METHOD",allVertColMethods:function(vertColMet){return vertColMet.getAll().$promise},opQual:"OP_QUALITY",allOPQualities:function(opQual){return opQual.getAll().$promise},hwmt:"HWM_TYPE",allHWMTypes:function(hwmt,$stateParams){return"HWM"==$stateParams.id?hwmt.getAll().$promise:void 0},hq:"HWM_QUALITY",allHWMQualities:function(hq,$stateParams){return"HWM"==$stateParams.id?hq.getAll().$promise:void 0},m:"MARKER",allMarkers:function(m,$stateParams){return"HWM"==$stateParams.id?m.getAll().$promise:void 0},dt:"DEPLOYMENT_TYPE",allDeployTypes:function(dt){return dt.getAll().$promise},e:"EVENT",allEvents:function(e,$stateParams){return"Sensor"==$stateParams.id?e.getAll().$promise:void 0},sent:"SENSOR_TYPE",allSensorTypes:function(sent,$stateParams){return"Sensor"==$stateParams.id?sent.getAll().$promise:void 0},sb:"SENSOR_BRAND",allSensorBrands:function(sb,$stateParams){return"Sensor"==$stateParams.id?sb.getAll().$promise:void 0},ht:"HOUSING_TYPE",allHousingTypes:function(ht){return ht.getAll().$promise}}})}])}();
//# sourceMappingURL=data:application/json;base64,
