!function(){"use strict";{var STNControllers=(angular.module("SettingsControllers",["ngInputModified","ui.validate","angular.filter","xeditable","checklist-model","ngFileUpload"]),angular.module("STNControllers",[]));angular.module("ModalControllers",[])}STNControllers.constant("RegExp",{PASSWORD:/^(((?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]))|((?=.*[a-z])(?=.*[A-Z])(?=.*[!@@?#$%^&_:;-]))|((?=.*[a-z])(?=.*[0-9])(?=.*[!@@?#$%^&_:;-]))|((?=.*[A-Z])(?=.*[0-9])(?=.*[!@@?#$%^&_:;-]))).{8,}$/})}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.directive("barsChart",["$parse",function($parse){var directiveDefinitionObject={restrict:"E",replace:!1,scope:{data:"=elevationData"},link:function(scope,element,attrs){var chart=(attrs.elevationData.split(","),d3.select(element[0]));chart.append("div").attr("class","chart").selectAll("div").data(scope.data).enter().append("div").transition().ease("elastic").style("width",function(d){return d+"%"}).text(function(d){return d+"%"}),scope.$watch("data",function(newValue,oldValue){scope.data=newValue})}};return directiveDefinitionObject}]),STNControllers.directive("siteSearch",function(){return{restrict:"E",scope:{model:"=ngModel",searchBy:"=",searchTerm:"="},replace:!0,template:'<div class="searchnav"><div class="searchby"><b>Search By:</b><div class="searchbyoption"><input type="radio" name="SearchBy" ng-model="searchBy.val" value="bySiteId" />ID</div><div class="searchbyoption"><input type="radio" name="SearchBy" ng-model="searchBy.val" value="bySiteNo" />Number</div><div class="searchbyoption"><input type="radio" name="SearchBy" ng-model="searchBy.val" value="bySiteName" />Name</div></div><div class="search-input"><input ng-focus="goSearch" type="text" ng-model="searchTerm" ng-enter="IndexSearchSites()" placeholder="Search Sites..." /><button type="button" class="borderLess" ng-click="IndexSearchSites()">Search <i class="ion-search"></i></button></div></div>',controller:["$scope","$state","$http","SITE","$uibModal",function($scope,$state,$http,SITE,$uibModal){$scope.searchTerm="",$scope.searchBy={val:"bySiteNo"},$scope.placeholder="...",$scope.IndexSearchSites=function(){if(""!==$scope.searchTerm)switch($http.defaults.headers.common.Accept="application/json",$scope.searchBy.val){case"bySiteNo":SITE.getSearchedSite({bySiteNo:$scope.searchTerm},function(resp){siteSearchResponse(resp)},function(errorResponse){siteSearchResponse(errorResponse)});break;case"bySiteId":SITE.getSearchedSite({bySiteId:$scope.searchTerm},function(resp){siteSearchResponse(resp)},function(errorResponse){siteSearchResponse(errorResponse)});break;case"bySiteName":SITE.getSearchedSite({bySiteName:$scope.searchTerm},function(resp){siteSearchResponse(resp)},function(errorResponse){siteSearchResponse(errorResponse)})}};var siteSearchResponse=function(s){if(void 0!==s.status){var errorModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>No site found. For more site search options, go to the Sites navigation tab to search for sites.</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});errorModal.result.then(function(){$scope.searchTerm="",$scope.searchBy={val:"bySiteNo"}})}else $scope.searchTerm="",$scope.searchBy={val:"bySiteNo"},$state.go("site.dashboard",{id:s.site_id})}}]}}),STNControllers.directive("ngEnter",function(){return function(scope,element,attrs){element.bind("keydown keypress",function(event){13===event.which&&(scope.$apply(function(){scope.$eval(attrs.ngEnter)}),event.preventDefault())})}}),STNControllers.directive("numericOnly",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(inputValue){var transformedInput=inputValue?inputValue.replace(/[^\d.-]/g,""):null;return transformedInput!=inputValue&&(modelCtrl.$setViewValue(transformedInput),modelCtrl.$render()),transformedInput})}}}),STNControllers.directive("datepickerPopup",function(){return{restrict:"EAC",require:"ngModel",link:function(scope,element,attr,controller){controller.$formatters.shift()}}}),STNControllers.directive("focus",function(){return function(scope,element,attributes){element[0].focus()}}),STNControllers.directive("backButton",function(){return{restrict:"A",link:function(scope,element,attrs){function goBack(){history.back(),scope.$apply()}element.bind("click",goBack)}}}),STNControllers.directive("passwordValidate",["RegExp",function(regex){return{require:"ngModel",link:function(scope,elm,attrs,ctrl){elm.unbind("keydown").unbind("change"),elm.bind("blur",function(viewValue){scope.$apply(function(){return regex.PASSWORD.test(viewValue.target.value)?(ctrl.$setValidity("passwordValidate",!0),viewValue):void ctrl.$setValidity("passwordValidate",!1)})})}}}]),STNControllers.directive("sameAs",["$parse",function($parse){return{require:"ngModel",restrict:"A",link:function(scope,elm,attrs,ctrl){elm.unbind("keydown").unbind("change"),elm.bind("blur",function(viewValue){scope.$watch(function(){return $parse(attrs.sameAs)(scope)===ctrl.$modelValue},function(currentValue){ctrl.$setValidity("passwordMismatch",currentValue)})})}}}]),STNControllers.directive("elastic",["$timeout",function($timeout){return{restrict:"A",link:function($scope,element){$scope.initialHeight=$scope.initialHeight||element[0].style.height;var resize=function(){element[0].style.height=$scope.initialHeight,element[0].style.height=""+element[0].scrollHeight+"px"};element.on("input change",resize),$timeout(resize,0)}}}]),STNControllers.directive("myInputMask",function(){return{restrict:"AC",link:function(scope,el,attrs){el.inputmask(scope.$eval(attrs.myInputMask)),el.on("change",function(){scope.$eval(attrs.ngModel+"='"+el.val()+"'")})}}}),STNControllers.directive("fileModel",["$parse",function($parse){return{restrict:"A",link:function(scope,element,attrs){var model=$parse(attrs.fileModel),modelSetter=model.assign;element.bind("change",function(){scope.$apply(function(){modelSetter(scope,element[0].files[0])})})}}}]),STNControllers.directive("inputRestrictor",[function(){return{restrict:"A",require:"ngModel",link:function(scope,element,attr,ngModelCtrl){function fromUser(text){if(!text)return text;var transformedInput=text.replace(pattern,"");return transformedInput!==text&&(ngModelCtrl.$setViewValue(transformedInput),ngModelCtrl.$render()),transformedInput}var pattern=/[^a-zA-Z0-9- _]/g;ngModelCtrl.$parsers.push(fromUser)}}}]),STNControllers.directive("labelLimitLength",function(){return{restrict:"A",link:function(scope,elem,attrs){var limit=parseInt(attrs.labelLimitLength);angular.element(elem).on("keypress",function(e){this.value.length==limit&&e.preventDefault()})}}})}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("siteSearchCtrl",["$scope","$cookies","$rootScope","$location","stateList","sensorTypes","networkNames","SITE",function($scope,$cookies,$rootScope,$location,stateList,sensorTypes,networkNames,SITE){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{if($rootScope.thisPage="Site Search",$rootScope.activeMenu="sites",$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEvent=null!==$cookies.get("SessionEventName")&&void 0!==$cookies.get("SessionEventName")?$cookies.get("SessionEventName"):"All Events"}),$scope.states=stateList,$scope.senTypes=sensorTypes,$scope.netNames=networkNames,$scope.Chosen={},$scope.chosenStates=[],$scope.siteResponse=!1,$scope.checkboxModel={hwmOnly:0,senOnly:0,rdgOnly:0,opDefined:0},$scope.sort_by=function(newSortingOrder){$scope.sortingOrder==newSortingOrder&&($scope.reverse=!$scope.reverse),$scope.sortingOrder=newSortingOrder,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+newSortingOrder+" i").removeClass().addClass($scope.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")},void 0!==$rootScope.searchParams){var thisSearch=$rootScope.searchParams;$scope.sessionEvent=Number(thisSearch.event);for(var i=0;i<$scope.states.length;i++){for(var y=0;y<thisSearch.state.length;y++)thisSearch.state[y]==$scope.states[i].state_abbrev?($scope.states[i].selected=!0,y=thisSearch.state.length):$scope.states[i].selected=!1;0===thisSearch.state.length&&($scope.states[i].selected=!1)}$scope.chosenStates=thisSearch.state,$scope.Chosen.sensor=thisSearch.SensorType,$scope.Chosen.network=thisSearch.NetworkName,$scope.Chosen.survey=thisSearch.HWMSurveyed,$scope.checkboxModel.hwmOnly=thisSearch.HWMOnly,$scope.checkboxModel.senOnly=thisSearch.SensorOnly,$scope.checkboxModel.rdgOnly=thisSearch.RDGOnly,$scope.checkboxModel.opDefined=thisSearch.OPDefined,SITE.getFilteredSites({Event:$scope.sessionEvent,State:$scope.chosenStates.join(),SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined},function(response){$scope.siteList=response,$scope.siteResponse=!0,$rootScope.stateIsLoading.showLoading=!1},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,alert("Error: "+errorResponse.statusText)})}$scope.searchSites=function(){$rootScope.stateIsLoading.showLoading=!0;var stateString=$scope.chosenStates.join();$scope.siteResponse=!1,$scope.siteList=[];var evID=null!==$cookies.get("SessionEventID")&&void 0!==$cookies.get("SessionEventID")?$cookies.get("SessionEventID"):0;$rootScope.searchParams={event:evID,state:$scope.chosenStates,SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined},SITE.getFilteredSites({Event:evID,State:stateString,SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined},function(response){$scope.siteList=response,$scope.siteResponse=!0,$rootScope.stateIsLoading.showLoading=!1},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,alert("Error: "+errorResponse.statusText)})},$scope.stateClick=function(data){if(data.selected===!0&&$scope.chosenStates.push(data.state_abbrev),data.selected===!1){var ind=$scope.chosenStates.indexOf(data.state_abbrev);ind>=0&&$scope.chosenStates.splice(ind,1)}},$scope.clearFilters=function(){$scope.checkboxModel={hwmOnly:0,senOnly:0,rdgOnly:0,opDefined:0},$scope.Chosen={},$scope.chosenStates=[],angular.forEach($scope.states,function(st){st.selected=!1})}}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("siteModalCtrl",["$scope","$rootScope","$cookies","$q","$location","$state","$http","$sce","$timeout","$uibModal","$uibModalInstance","$filter","leafletMarkerEvents","allDropDownParts","fileTypes","agencyList","latlong","thisSiteStuff","allMembers","SITE","SITE_HOUSING","Site_Files","MEMBER","INSTRUMENT","INSTRUMENT_STATUS","LANDOWNER_CONTACT","GEOCODE","FILE_STAMP","FILE","SOURCE","SERVER_URL",function($scope,$rootScope,$cookies,$q,$location,$state,$http,$sce,$timeout,$uibModal,$uibModalInstance,$filter,leafletMarkerEvents,allDropDownParts,fileTypes,agencyList,latlong,thisSiteStuff,allMembers,SITE,SITE_HOUSING,Site_Files,MEMBER,INSTRUMENT,INSTRUMENT_STATUS,LANDOWNER_CONTACT,GEOCODE,FILE_STAMP,FILE,SOURCE,SERVER_URL){$scope.HorizontalDatumList=allDropDownParts[0],$scope.HorCollMethodList=allDropDownParts[1],$scope.StateList=allDropDownParts[2],$scope.AllCountyList=allDropDownParts[3],$scope.stateCountyList=[],$scope.DMS={},$scope.allHousingTypeList=allDropDownParts[4],$scope.DepPriorityList=allDropDownParts[5],$scope.NetNameList=allDropDownParts[6],$scope.NetTypeList=allDropDownParts[7],$scope.ProposedSens=allDropDownParts[8],$scope.SensorDeployment=allDropDownParts[9],$scope.userRole=$cookies.get("usersRole"),$scope.closeSites=0,$scope.showMap=!1,$scope.siteLat=0,$scope.siteLong=0,$scope.htmlDescriptionTip=$sce.trustAsHtml("Required by NWIS. Can be listed as <em>'unknown'</em> or <em>'Atlantic Ocean'</em>"),$scope.mapCenter={lat:$scope.siteLat,lng:$scope.siteLong,zoom:17},$scope.events={mapMarkers:{enable:leafletMarkerEvents.getAvailableEvents()}},$scope.mapMarkers=[];var icons={stn:{type:"div",iconSize:[10,10],className:"stnSiteIcon"},newSTN:{type:"div",iconSize:[10,10],className:"newSiteIcon",iconAnchor:[5,5]}},azimuth=function(deg,min,sec){var azi=0;return 0>deg?(azi=-1*deg+1*min/60+1*sec/3600,(-1*azi).toFixed(5)):(azi=1*deg+1*min/60+1*sec/3600,azi.toFixed(5))};$scope.updateAddressOnly=function(){void 0!==$scope.DMS.LADeg&&($scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)),delete $http.defaults.headers.common.Authorization,$http.defaults.headers.common.Accept="application/json",GEOCODE.getAddressParts({Longitude:$scope.aSite.longitude_dd,Latitude:$scope.aSite.latitude_dd},function(response){if(response.result.geographies.Counties.length>0){var stateFIPS=response.result.geographies.Counties[0].STATE,countyName=response.result.geographies.Counties[0].NAME,thisStateID=$scope.AllCountyList.filter(function(c){return c.state_fip==stateFIPS})[0].state_id,thisState=$scope.StateList.filter(function(s){return s.state_id==thisStateID})[0];void 0!==thisState?($scope.aSite.state=thisState.state_abbrev,$scope.stateCountyList=$scope.AllCountyList.filter(function(c){return c.state_id==thisState.state_id}),$scope.aSite.county=countyName):($rootScope.stateIsLoading.showLoading=!1,toastr.error("The Latitude/Longitude did not return a recognized state. Please choose one from the dropdown."))}else $rootScope.stateIsLoading.showLoading=!1,toastr.error("No location information came back from that lat/long")},function(errorResponse){toastr.error("Error getting location information.")})},$scope.$on("leafletDirectiveMarker.dragend",function(event,args){var dragendLocation=args.model;$scope.aSite.latitude_dd=parseFloat(dragendLocation.lat.toFixed(6)),$scope.aSite.longitude_dd=parseFloat(dragendLocation.lng.toFixed(6));var latDMS=deg_to_dms($scope.aSite.latitude_dd).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.aSite.longitude_dd),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2],$scope.updateAddressOnly()}),$scope.getAddress=function(){if(void 0!==$scope.DMS.LADeg&&($scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)),void 0===$scope.aSite.latitude_dd||void 0===$scope.aSite.longitude_dd||isNaN($scope.aSite.latitude_dd)||isNaN($scope.aSite.longitude_dd)){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please provide a Latitude and Longitude before clicking Verify Location</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}else $scope.mapCenter={lat:parseFloat($scope.aSite.latitude_dd),lng:parseFloat($scope.aSite.longitude_dd),zoom:18},$scope.mapMarkers=[],$rootScope.stateIsLoading.showLoading=!0,$http.defaults.headers.common.Accept="application/json",delete $http.defaults.headers.common.Authorization,GEOCODE.getAddressParts({Longitude:$scope.aSite.longitude_dd,Latitude:$scope.aSite.latitude_dd},function(response){if(response.result.geographies.Counties.length>0){var stateFIPS=response.result.geographies.Counties[0].STATE,countyName=response.result.geographies.Counties[0].NAME,thisStateID=$scope.AllCountyList.filter(function(c){return c.state_fip==stateFIPS})[0].state_id,thisState=$scope.StateList.filter(function(s){return s.state_id==thisStateID})[0];void 0!==thisState?($scope.aSite.state=thisState.state_abbrev,$scope.stateCountyList=$scope.AllCountyList.filter(function(c){return c.state_id==thisState.state_id}),$scope.aSite.county=countyName,SITE.getProximitySites({Latitude:$scope.aSite.latitude_dd,Longitude:$scope.aSite.longitude_dd,Buffer:5e-4},function(response){if($scope.closeSites=response,$scope.closeSites.length>0)for(var i=0;i<$scope.closeSites.length;i++){var a=$scope.closeSites[i];$scope.mapMarkers.push({lat:a.latitude_dd,lng:a.longitude_dd,site_id:a.site_id,site_no:a.site_no,icon:icons.stn,message:a.site_no,focus:!1})}$scope.mapMarkers.push({lat:parseFloat($scope.aSite.latitude_dd),lng:parseFloat($scope.aSite.longitude_dd),icon:icons.newSTN,message:"New draggable STN site",focus:!1,draggable:!0}),$scope.showMap=!0,$rootScope.stateIsLoading.showLoading=!1},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error: "+errorResponse.statusText)}).$promise):($rootScope.stateIsLoading.showLoading=!1,toastr.error("The Latitude/Longitude did not return a recognized state. Please choose one from the dropdown."))}else $rootScope.stateIsLoading.showLoading=!1,toastr.error("Error getting address location.")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},$scope.houseDirty=!1,$scope.netTypeDirty=!1,$scope.siteHouseTypesTable=[],$scope.aSite={},void 0!==latlong&&($scope.aSite.latitude_dd=parseFloat(latlong[0].toFixed(6)),$scope.aSite.longitude_dd=parseFloat(latlong[1].toFixed(6)),$scope.aSite.hdatum_id=4,$scope.aSite.hcollect_method_id=4,$scope.getAddress()),$scope.aSite.decDegORdms="dd",$scope.originalSiteHousings=[],$scope.checked="",$scope.checkedName="Not Defined",$scope.landowner={},$scope.addLandowner=!1,$scope.disableSensorParts=!1,$scope.showSiteHouseTable=!1,$scope.siteHouseTypesTable=[],$scope.siteHousesModel={},$scope.siteHousesToRemove=[],$scope.NetworkNAMEToAdd=[],$scope.NetworkNAMEToRemove=[],$scope.NetworkTYPEToAdd=[],$scope.NetworkTYPEToRemove=[],$scope.siteNetworkNames=[],$scope.siteNetworkTypes=[],$scope.serverURL=SERVER_URL,$scope.fileTypeList=fileTypes.filter(function(ft){return"Photo"===ft.filetype||"Historic Citation"===ft.filetype||"Field Sheets"===ft.filetype||"Level Notes"===ft.filetype||"Site Sketch"===ft.filetype||"Other"===ft.filetype||"Link"===ft.filetype||"Sketch"===ft.filetype||"Landowner Permission Form"===ft.filetype}),$scope.allSFiles=Site_Files.getAllSiteFiles(),$scope.SITEFiles=void 0!==thisSiteStuff?$scope.allSFiles.filter(function(sf){return!(sf.site_id!=thisSiteStuff[0].site_id||void 0!==sf.hwm_id&&0!==sf.hwm_id||void 0!==sf.instrument_id&&0!==sf.instrument_id||void 0!==sf.objective_point_id&&0!==sf.objective_point_id)}):[],$scope.siteImageFiles=$scope.SITEFiles.filter(function(hf){return 1===hf.filetype_id}),$scope.showFileForm=!1,$scope.stamp=FILE_STAMP.getStamp(),$scope.fileItemExists=!0,$scope.saveFileUpload=function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.sFileIsUploading=!0;var fileParts={FileEntity:{file_id:$scope.aFile.file_id,name:$scope.aFile.name,description:$scope.aFile.description,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,file_date:$scope.aFile.file_date,site_id:$scope.aFile.site_id,filetype_id:$scope.aFile.filetype_id,source_id:$scope.aFile.source_id,path:$scope.aFile.path,photo_date:$scope.aFile.photo_date,is_nwis:$scope.aFile.is_nwis},File:void 0!==$scope.aFile.File1?$scope.aFile.File1:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),FILE_STAMP.setStamp(),$scope.stamp=FILE_STAMP.getStamp(),$scope.isPhoto=$scope.aFile.File1.type.indexOf("image")>-1?!0:!1,$scope.aFile.name=fresponse.name,$scope.aFile.path=fresponse.path,void 0!==$scope.aFile.File1&&($scope.aFile.File=$scope.aFile.File1,$scope.aFile.File1=void 0),fresponse.fileBelongsTo="Site File",$scope.SITEFiles.splice($scope.existFileIndex,1),$scope.SITEFiles.push(fresponse),1===fresponse.filetype_id&&($scope.siteImageFiles.splice($scope.existFileIndex,1),$scope.siteImageFiles.push(fresponse)),$scope.allSFiles[$scope.allSFileIndex]=fresponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.sFileIsUploading=!1,$scope.fileItemExists=!0},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})},$scope.showFile=function(file){if($scope.fileTypes=$scope.fileTypeList,$scope.agencies=agencyList,$scope.existFileIndex=-1,$scope.existIMGFileIndex=-1,$scope.allSFileIndex=-1,$scope.aFile={},$scope.aSource={},0!==file){if($scope.existFileIndex=$scope.SITEFiles.indexOf(file),$scope.allSFileIndex=$scope.allSFiles.indexOf(file),$scope.existIMGFileIndex=$scope.siteImageFiles.length>0?$scope.siteImageFiles.indexOf(file):-1,$scope.aFile=angular.copy(file),FILE.getFileItem({id:$scope.aFile.file_id}).$promise.then(function(response){$scope.fileItemExists=response.Length>0?!0:!1}),$scope.aFile.fileType=$scope.fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,void 0!==$scope.aFile.name){var fI=$scope.aFile.name.lastIndexOf("."),fileExt=$scope.aFile.name.substring(fI+1);$scope.isPhoto=fileExt.match(/(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)?!0:!1}$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),null!==file.source_id&&SOURCE.query({id:file.source_id}).$promise.then(function(s){$scope.aSource=s,$scope.aSource.FULLname=$scope.aSource.source_name,$scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name})}else $scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname,$scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name;$scope.showFileForm=!0,$scope.updateAgencyForCaption=function(){1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}},$scope.createFile=function(valid){if(valid){$scope.SITEfileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){if(8!==$scope.aFile.filetype_id){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,photo_date:$scope.aFile.photo_date,description:$scope.aFile.description,site_id:$scope.aSite.site_id,source_id:response.source_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Site File",$scope.SITEFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),1===fresponse.filetype_id&&$scope.siteImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.SITEfileIsUploading=!1},function(errorResponse){$scope.SITEfileIsUploading=!1,toastr.error("Error uploading file: "+errorResponse.statusText)})}else $scope.aFile.source_id=response.source_id,$scope.aFile.site_id=$scope.aSite.site_id,FILE.save($scope.aFile).$promise.then(function(fresponse){toastr.success("Link saved"),fresponse.fileBelongsTo="Site File",$scope.SITEFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.SITEfileIsUploading=!1},function(errorResponse){$scope.SITEfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.SITEfileIsUploading=!1,toastr.error("Error creating Source info: "+errorResponse.statusText)})}},$scope.saveFile=function(valid){if(valid){$scope.SITEfileIsUploading=!0;{$scope.aFile.fileBelongsTo}if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.aSource.source_id){var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){$scope.aFile.source_id=response.source_id,FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="Site File",$scope.SITEFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.SITEfileIsUploading=!1},function(errorResponse){$scope.SITEfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.SITEfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})}}},$scope.deleteFile=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.SITEFiles.splice($scope.existFileIndex,1),$scope.allSFiles.splice($scope.allSFileIndex,1),$scope.siteImageFiles.splice($scope.existIMGFileIndex,1),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelFile=function(){$scope.aFile={},$scope.aSource={},$scope.showFileForm=!1};var openLatModal=function(w){var latModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Latitude must be between 0 and 73.0</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});latModal.result.then(function(fieldFocus){"latlong"==w?$("#latitude_dd").focus():$("#LaDeg").focus()})},openLongModal=function(w){var longModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Longitude must be between -175.0 and -60.0</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});longModal.result.then(function(fieldFocus){"latlong"==w?$("#longitude_dd").focus():$("#LoDeg").focus()})};$scope.checkValue=function(d,direction){"dms"==d?("lat"==direction&&($scope.DMS.LADeg<0||$scope.DMS.LADeg>73||isNaN($scope.DMS.LADeg)&&void 0!==$scope.DMS.LADeg||isNaN($scope.DMS.LAMin)&&void 0!==$scope.DMS.LAMin||isNaN($scope.DMS.LASec)&&void 0!==$scope.DMS.LASec)&&(openLatModal("dms"),isNaN($scope.DMS.LADeg)&&($scope.DMS.LADeg=void 0),isNaN($scope.DMS.LAMin)&&($scope.DMS.LAMin=void 0),isNaN($scope.DMS.LASec)&&($scope.DMS.LASec=void 0)),"long"==direction&&($scope.DMS.LODeg<-175||$scope.DMS.LODeg>-60||isNaN($scope.DMS.LODeg)&&void 0!==$scope.DMS.LODeg||isNaN($scope.DMS.LOMin)&&void 0!==$scope.DMS.LOMin||isNaN($scope.DMS.LOSec)&&void 0!==$scope.DMS.LOSec)&&(openLongModal("dms"),isNaN($scope.DMS.LODeg)&&($scope.DMS.LODeg=void 0),isNaN($scope.DMS.LOMin)&&($scope.DMS.LOMin=void 0),isNaN($scope.DMS.LOSec)&&($scope.DMS.LOSec=void 0))):("lat"==direction&&($scope.aSite.latitude_dd<0||$scope.aSite.latitude_dd>73||isNaN($scope.aSite.latitude_dd))&&(openLatModal("latlong"),isNaN($scope.aSite.latitude_dd)&&($scope.aSite.latitude_dd=void 0)),"long"==direction&&($scope.aSite.longitude_dd<-175||$scope.aSite.longitude_dd>-60||isNaN($scope.aSite.longitude_dd))&&(openLongModal("latlong"),isNaN($scope.aSite.longitude_dd)&&($scope.aSite.longitude_dd=void 0)))};var deg_to_dms=function(deg){0>deg&&(deg=deg.toString(),deg=deg.substring(1));var d=Math.floor(deg),minfloat=60*(deg-d),m=Math.floor(minfloat),s=(60*(minfloat-m)).toFixed(3);return""+d+":"+m+":"+s};$scope.latLongChange=function(){if("dd"==$scope.aSite.decDegORdms)if(void 0!==$scope.DMS.LADeg&&void 0!==$scope.DMS.LAMin&&void 0!==$scope.DMS.LASec&&void 0!==$scope.DMS.LODeg&&void 0!==$scope.DMS.LOMin&&void 0!==$scope.DMS.LOSec)$scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec);else{var DMSModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all three inputs for conversion from DMS to Decimal Degrees to work.</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});DMSModal.result.then(function(){(void 0!==$scope.DMS.LADeg||void 0!==$scope.DMS.LAMin||void 0!==$scope.DMS.LASec)&&$("#LaDeg").focus(),(void 0!==$scope.DMS.LODeg||void 0!==$scope.DMS.LOMin||void 0!==$scope.DMS.LOSec)&&$("#LoDeg").focus(),$scope.aSite.decDegORdms="dms"})}else if(void 0!==$scope.aSite.latitude_dd){var latDMS=deg_to_dms($scope.aSite.latitude_dd).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.aSite.longitude_dd),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2]}},$scope.netTypeChg=function(nt){if(nt.selected){if($scope.NetworkTYPEToAdd.push(nt),
void 0!==$scope.aSite.site_id){var i=$scope.NetworkTYPEToRemove.map(function(e){return e.network_type_id}).indexOf(nt.network_type_id);i>=0&&$scope.NetworkTYPEToRemove.splice(i,1)}}else{var ind=$scope.NetworkTYPEToAdd.map(function(e){return e.network_type_id}).indexOf(nt.network_type_id);ind>=0&&$scope.NetworkTYPEToAdd.splice(ind,1),void 0!==$scope.aSite.site_id&&$scope.NetworkTYPEToRemove.push(nt)}},$scope.whichOne=function(n){if(n.selected){if($scope.NetworkNAMEToAdd.push(n),void 0!==$scope.aSite.site_id){var i=$scope.NetworkNAMEToRemove.map(function(e){return e.network_name_id}).indexOf(n.network_name_id);i>=0&&$scope.NetworkNAMEToRemove.splice(i,1)}}else{var ind=$scope.NetworkNAMEToAdd.map(function(e){return e.network_name_id}).indexOf(n.network_name_id);ind>=0&&$scope.NetworkNAMEToAdd.splice(ind,1),void 0!==$scope.aSite.site_id&&$scope.NetworkNAMEToRemove.push(n)}if("Not Defined"==n.name&&n.selected===!0){for(var nn=0;nn<$scope.NetNameList.length;nn++)"Not Defined"!=$scope.NetNameList[nn].name&&$scope.NetNameList[nn].selected===!0&&($scope.NetworkNAMEToRemove.push($scope.NetNameList[nn]),$scope.NetNameList[nn].selected=!1);$scope.checked="Not Defined"}"Not Defined"==n.name&&n.selected===!1&&($scope.checked="")},$scope.dimAction=function(){if(1==$scope.aSite.sensor_not_appropriate){$scope.disableSensorParts=!0;for(var x=0;x<$scope.ProposedSens.length;x++)$scope.ProposedSens[x].selected=!1;$scope.aSite.is_permanent_housing_installed="No"}else $scope.disableSensorParts=!1},$scope.useSiteAddress,$scope.useAddressforLO=function(){$scope.useSiteAddress?($scope.landowner.address=$scope.aSite.address,$scope.landowner.city=$scope.aSite.city,$scope.landowner.state=$scope.aSite.state,$scope.landowner.zip=$scope.aSite.zip):($scope.landowner.address="",$scope.landowner.city="",$scope.landowner.state="",$scope.landowner.zip="")},$scope.save=function(valid){valid&&($rootScope.stateIsLoading.showLoading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.addLandowner===!0?null!==$scope.aSite.landownercontact_id&&void 0!==$scope.aSite.landownercontact_id&&$scope.aSite.landownercontact_id>0?LANDOWNER_CONTACT.update({id:$scope.aSite.landownercontact_id},$scope.landowner).$promise.then(function(){putSiteAndParts()}):void 0!==$scope.landowner.fname||void 0!==$scope.landowner.lname||void 0!==$scope.landowner.title||void 0!==$scope.landowner.address||void 0!==$scope.landowner.city||void 0!==$scope.landowner.primaryphone?LANDOWNER_CONTACT.save($scope.landowner,function(response){$scope.aSite.landownercontact_id=response.landownercontactid,putSiteAndParts()},function(errorResponse){toastr.error("Error adding Landowner: "+errorResponse.statusText)}):putSiteAndParts():putSiteAndParts())};var putSiteAndParts=function(){void 0!==$scope.DMS.LADeg&&($scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec));var updateSite=angular.copy($scope.aSite);delete updateSite.Creator,delete updateSite.HorizontalCollectMethod,delete updateSite.HorizontalDatum,delete updateSite.PriorityName,delete updateSite.decDegORdms,SITE.update({id:$scope.aSite.site_id},updateSite,function(response){var RemovePromises=($q.defer(),[]),AddPromises=[];angular.forEach($scope.siteHousesToRemove,function(shID){var delSHProm=SITE_HOUSING["delete"]({id:shID}).$promise;RemovePromises.push(delSHProm)}),angular.forEach($scope.NetworkNAMEToRemove,function(nnL){var delNNProm=SITE.deleteSiteNetworkName({siteId:$scope.aSite.site_id,networkNameId:nnL.network_name_id}).$promise;RemovePromises.push(delNNProm)}),angular.forEach($scope.NetworkTYPEToRemove,function(ntL){var delNTProm=SITE.deleteSiteNetworkType({siteId:$scope.aSite.site_id,networkTypeId:ntL.network_type_id}).$promise;RemovePromises.push(delNTProm)}),$scope.houseDirty===!0&&angular.forEach($scope.siteHouseTypesTable,function(ht){var addHtProm;void 0!==ht.site_housing_id?addHtProm=SITE_HOUSING.update({id:ht.site_housing_id},ht).$promise:(ht.site_id=$scope.aSite.site_id,addHtProm=SITE_HOUSING.save(ht).$promise),AddPromises.push(addHtProm)}),angular.forEach($scope.NetworkNAMEToAdd,function(AnnL){$scope.siteNetworkNames.push(AnnL.name);var addNNProm=SITE.postSiteNetworkName({siteId:$scope.aSite.site_id,networkNameId:AnnL.network_name_id}).$promise;AddPromises.push(addNNProm)}),angular.forEach($scope.NetworkTYPEToAdd,function(AnTL){$scope.siteNetworkTypes.push(AnTL.network_type_name);var addNTProm=SITE.postSiteNetworkType({siteId:$scope.aSite.site_id,networkTypeId:AnTL.network_type_id}).$promise;AddPromises.push(addNTProm)}),$q.all(RemovePromises).then(function(){$q.all(AddPromises).then(function(response){$scope.siteNetworkNames=[],$scope.siteNetworkTypes=[],angular.forEach($scope.NetNameList,function(nn){nn.selected===!0&&$scope.siteNetworkNames.push(nn.name)}),angular.forEach($scope.NetTypeList,function(nt){nt.selected===!0&&$scope.siteNetworkTypes.push(nt.network_type_name)});var sendBack=[$scope.aSite,$scope.siteNetworkNames,$scope.siteNetworkTypes];$uibModalInstance.close(sendBack),$rootScope.stateIsLoading.showLoading=!1,toastr.success("Site updated")})["catch"](function(msg){console.error(msg)})})["catch"](function(msg){console.error(msg)})},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error updating Site: "+errorResponse.statusText)})},finishPOST=function(sID){var postPromises=($q.defer(),[]);angular.forEach($scope.siteHouseTypesTable,function(htype){htype.site_id=sID,delete htype.type_name;var hTPromise=SITE_HOUSING.save(htype).$promise;postPromises.push(hTPromise)}),angular.forEach($scope.NetNameList,function(nName){if(nName.selected===!0){var nNPromise=SITE.postSiteNetworkName({siteId:sID,networkNameId:nName.network_name_id}).$promise;postPromises.push(nNPromise)}}),angular.forEach($scope.NetTypeList,function(nType){if(nType.selected===!0){var nTPromise=SITE.postSiteNetworkType({siteId:sID,networkTypeId:nType.network_type_id}).$promise;postPromises.push(nTPromise)}}),$q.all(postPromises).then(function(response){$uibModalInstance.dismiss("cancel"),$rootScope.stateIsLoading.showLoading=!1,$timeout(function(){$state.go("site.dashboard",{id:sID})})})};$scope.create=function(valid){valid&&($rootScope.stateIsLoading.showLoading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",delete $scope.aSite.Creator,delete $scope.aSite.decDegORdms,$scope.addLandowner===!0&&(void 0!==$scope.landowner.fname||void 0!==$scope.landowner.lname||void 0!==$scope.landowner.title||void 0!==$scope.landowner.address||void 0!==$scope.landowner.city||void 0!==$scope.landowner.primaryphone)?LANDOWNER_CONTACT.save($scope.landowner,function(response){$scope.aSite.landownercontact_id=response.landownercontactid,postSiteAndParts()},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error posting landowner: "+errorResponse.statusText)}):postSiteAndParts())};var postSiteAndParts=function(){var createdSiteID=0;void 0!==$scope.DMS.LADeg&&($scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)),SITE.save($scope.aSite,function(response){if(createdSiteID=response.site_id,$scope.disableSensorParts===!1){var selectedProposedSensors=$scope.ProposedSens.filter(function(p){return p.selected===!0});selectedProposedSensors.length>0?angular.forEach(selectedProposedSensors,function(propSens,index){var sID=0;angular.forEach($scope.SensorDeployment,function(sdt){for(var x=0;x<sdt.deploymenttypes.length;x++)sdt.deploymenttypes[x].deployment_type_id==propSens.deployment_type_id&&(sID=sdt.sensor_type_id)});var sensorTypeID=sID,inst={deployment_type_id:propSens.deployment_type_id,site_id:createdSiteID,sensor_type_id:sensorTypeID};INSTRUMENT.save(inst).$promise.then(function(insResponse){var instStat={instrument_id:insResponse.instrument_id,status_type_id:4,member_id:$scope.aSite.member_id,time_stamp:new Date,time_zone:"UTC"};INSTRUMENT_STATUS.save(instStat).$promise.then(function(){index==selectedProposedSensors.length-1&&finishPOST(createdSiteID)},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error adding proposed Sensor: "+errorResponse.statusText)})},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error adding proposed Sensor: "+errorResponse.statusText)})}):finishPOST(createdSiteID)}else finishPOST(createdSiteID)},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error creating site: "+errorResponse.statusText)})};if(void 0!==thisSiteStuff){if($scope.aSite=angular.copy(thisSiteStuff[0]),$scope.aSite.hcollect_method_id<=0&&($scope.aSite.hcollect_method_id=null),$scope.aSite.sensor_not_appropriate>0){$scope.disableSensorParts=!0;for(var x=0;x<$scope.ProposedSens.length;x++)$scope.ProposedSens[x].selected=!1;$scope.aSite.is_permanent_housing_installed="No"}var thisState=$scope.StateList.filter(function(s){return s.state_abbrev==$scope.aSite.state})[0];if($scope.stateCountyList=$scope.AllCountyList.filter(function(c){return c.state_id==thisState.state_id}),thisSiteStuff[1].length>0){$scope.originalSiteHousings=thisSiteStuff[1],$scope.showSiteHouseTable=!0,$scope.siteHouseTypesTable=thisSiteStuff[2];for(var ht=0;ht<$scope.allHousingTypeList.length;ht++){for(var y=0;y<$scope.originalSiteHousings.length;y++)$scope.originalSiteHousings[y].housing_type_id==$scope.allHousingTypeList[ht].housing_type_id?($scope.allHousingTypeList[ht].selected=!0,y=$scope.originalSiteHousings.length):$scope.allHousingTypeList[ht].selected=!1;0===$scope.originalSiteHousings.length&&($scope.allHousingTypeList[ht].selected=!1)}}if(thisSiteStuff[3].length>0){for(var projNNames=angular.copy(thisSiteStuff[3]),a=0;a<$scope.NetNameList.length;a++){for(var e=0;e<projNNames.length;e++)projNNames[e].network_name_id==$scope.NetNameList[a].network_name_id?($scope.NetNameList[a].selected=!0,e=projNNames.length):$scope.NetNameList[a].selected=!1;0===projNNames.length&&($scope.NetNameList[a].selected=!1)}$scope.NetNameList[0].selected===!0&&($scope.checked="Not Defined")}if(thisSiteStuff[4].length>0)for(var projNType=angular.copy(thisSiteStuff[4]),ni=0;ni<$scope.NetTypeList.length;ni++){for(var ny=0;ny<projNType.length;ny++)projNType[ny].network_type_id==$scope.NetTypeList[ni].network_type_id?($scope.NetTypeList[ni].selected=!0,ny=projNType.length):$scope.NetTypeList[ni].selected=!1;0===projNType.length&&($scope.NetTypeList[ni].selected=!1)}void 0!==thisSiteStuff[5]&&($scope.landowner=thisSiteStuff[5],$scope.addLandowner=void 0!==$scope.landowner.fname||void 0!==$scope.landowner.lname||void 0!==$scope.landowner.address||void 0!==$scope.landowner.primaryphone?!0:!1),$scope.s={sOpen:!1,sFileOpen:!1}}else $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.query({id:$cookies.get("mID")},function(response){$scope.aSite.Creator=response.fname+" "+response.lname,$scope.aSite.member_id=response.member_id,$scope.aSite.is_permanent_housing_installed="No",$scope.aSite.access_granted="Not Needed"},function(errorResponse){toastr.error("Error getting Member info: "+errorResponse.statusText)}),$scope.s={sOpen:!0};$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.HouseTypeClick=function(ht){if($scope.houseDirty=!0,ht.selected===!0){var houseT={type_name:ht.type_name,housing_type_id:ht.housing_type_id,length:ht.length,material:ht.material,notes:ht.notes,amount:1};$scope.siteHouseTypesTable.push(houseT),$scope.showSiteHouseTable=!0}if(ht.selected===!1){if(void 0!==$scope.aSite.site_id){var sH_ID=$scope.siteHouseTypesTable.filter(function(h){return h.type_name==ht.type_name})[0].site_housing_id;$scope.siteHousesToRemove.push(sH_ID)}var i=$scope.siteHouseTypesTable.indexOf($scope.siteHouseTypesTable.filter(function(h){return h.type_name==ht.type_name})[0]);$scope.siteHouseTypesTable.splice(i,1),0===$scope.siteHouseTypesTable.length&&($scope.showSiteHouseTable=!1)}},$scope.showLandOwnerPart=function(){$scope.addLandowner=!0},$scope.updateCountyList=function(s){var thisState=$scope.StateList.filter(function(st){return st.state_abbrev==s})[0];$scope.stateCountyList=$scope.AllCountyList.filter(function(c){return c.state_id==thisState.state_id})},$scope.cancel=function(){$rootScope.stateIsLoading.showLoading=!1,$uibModalInstance.dismiss("cancel")},$scope.deleteSite=function(){var thisSite=$scope.aSite,dSiteModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Delete Site</h3></div><div class="modal-body"><p>Are you sure you want to delete site {{siteNo}}?</p></div><div class="modal-footer"><button type="button" class="btn btn-danger" ng-click="deleteIt()">Delete</button><button type="button" class="btn btn-primary" ng-click="ok()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.siteNo=thisSite.site_no,$scope.ok=function(){$uibModalInstance.dismiss("cancel")},$scope.deleteIt=function(){$uibModalInstance.close(thisSite)}}],size:"sm"});dSiteModal.result.then(function(s){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),SITE["delete"]({id:s.site_id}).$promise.then(function(){toastr.success("Site Removed");var sendBack="Deleted";$uibModalInstance.close(sendBack)},function(errorResponse){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>{{message}}</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-click="ok()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.message=errorResponse.headers("usgswim-messages"),$scope.ok=function(){$uibModalInstance.dismiss("cancel")}}],size:"sm"})})},function(){})},$rootScope.stateIsLoading.showLoading=!1}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("siteMapCtrl",["$scope","$rootScope","$cookies","$location","$state","SITE","siteHWMs","deploymentTypes","baroSensors","metSensors","rdgSensors","stormSensors","waveSensors","presTempSensors","thermSensors","webcamSensors","raingageSensors","leafletData","aSite",function($scope,$rootScope,$cookies,$location,$state,SITE,siteHWMs,deploymentTypes,baroSensors,metSensors,rdgSensors,stormSensors,waveSensors,presTempSensors,thermSensors,webcamSensors,raingageSensors,leafletData,aSite){if(void 0!==aSite){$scope.mapStuff="here's the map accordion content",$scope.thisSite=aSite,$scope.allSiteHWMs=siteHWMs,$scope.allSiteBaroSensors=baroSensors.filter(function(bs){return bs.site_id==aSite.site_id}),$scope.allSiteMetSensors=metSensors.filter(function(bs){return bs.site_id==aSite.site_id}),$scope.allSiteRDGSensors=rdgSensors.filter(function(bs){return bs.site_id==aSite.site_id}),$scope.allSiteStormSensors=stormSensors.filter(function(bs){return bs.site_id==aSite.site_id}),$scope.allSiteWaveSensors=waveSensors.filter(function(bs){return bs.site_id==aSite.site_id}),$scope.allSitePresTempSensors=presTempSensors.filter(function(bs){return bs.site_id==aSite.site_id}),$scope.allSiteThermSensors=thermSensors.filter(function(bs){return bs.site_id==aSite.site_id}),$scope.allSiteWebSensors=webcamSensors.filter(function(bs){return bs.site_id==aSite.site_id}),$scope.allSiteRainSensors=raingageSensors.filter(function(bs){return bs.site_id==aSite.site_id}),$scope.allDeploymentTypes=deploymentTypes,$scope.paths={},$scope.markers=[],$scope.$watch(function(){return $cookies.get("SessionEventID")},function(newValue){if($scope.markers=[],getProximitySites(),$scope.markers.push({layer:"stnSites",message:"<div><b>This Site Name:</b> "+$scope.thisSite.site_no+"</div>",lat:$scope.thisSite.latitude_dd,lng:$scope.thisSite.longitude_dd,icon:icons.selected,title:"Site",eventID:0}),void 0!==newValue){for(var h=0;h<$scope.allSiteHWMs.length;h++){var eachHWM=$scope.allSiteHWMs[h];eachHWM.event_id==newValue&&$scope.markers.push({layer:"stnSites",message:"<div><b>HWM:</b> "+eachHWM.hwm_label+"</div>",lat:eachHWM.latitude_dd,lng:eachHWM.longitude_dd,icon:icons.hwmIcon,title:"HWM",eventID:eachHWM.event_id})}addSensors(newValue)}else{for(var noEventH=0;noEventH<$scope.allSiteHWMs.length;noEventH++){var eachnoEHWM=$scope.allSiteHWMs[noEventH];$scope.markers.push({layer:"stnSites",message:"<div><b>HWM:</b> "+eachnoEHWM.hwm_label+"</div>",lat:eachnoEHWM.latitude_dd,lng:eachnoEHWM.longitude_dd,icon:icons.hwmIcon,title:"HWM",eventID:eachnoEHWM.event_id})}addSensors(0)}});var addSensors=function(eventID){if(eventID>0){for(var bs=0;bs<$scope.allSiteBaroSensors.length;bs++){var bSensor=$scope.allSiteBaroSensors[bs];bSensor.event_id==eventID&&$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==bSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+bSensor.status+"</div>",lat:bSensor.latitude_dd,lng:bSensor.longitude_dd,icon:icons.baroIcon,title:"Baro Sensor",eventID:bSensor.event_id})}for(var ms=0;ms<$scope.allSiteMetSensors.length;ms++){var mSensor=$scope.allSiteMetSensors[ms];mSensor.event_id==eventID&&$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==mSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+mSensor.status+"</div>",lat:mSensor.latitude_dd,lng:mSensor.longitude_dd,icon:icons.metIcon,title:"Met Sensor",eventID:mSensor.event_id})}for(var rs=0;rs<$scope.allSiteRDGSensors.length;rs++){var rSensor=$scope.allSiteRDGSensors[rs];rSensor.event_id==eventID&&$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==rSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+rSensor.status+"</div>",lat:rSensor.latitude_dd,lng:rSensor.longitude_dd,icon:icons.rdgIcon,title:"RDG Sensor",eventID:rSensor.event_id})}for(var ss=0;ss<$scope.allSiteStormSensors.length;ss++){var sSensor=$scope.allSiteStormSensors[ss];sSensor.event_id==eventID&&$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==sSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+sSensor.status+"</div>",lat:sSensor.latitude_dd,lng:sSensor.longitude_dd,icon:icons.stormIcon,title:"Stormtide Sensor",eventID:sSensor.event_id})}for(var ws=0;ws<$scope.allSiteWaveSensors.length;ws++){var wSensor=$scope.allSiteWaveSensors[ws];wSensor.event_id==eventID&&$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==wSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+wSensor.status+"</div>",lat:wSensor.latitude_dd,lng:wSensor.longitude_dd,icon:icons.waveIcon,title:"Waveheight Sensor",eventID:wSensor.event_id})}for(var ps=0;ps<$scope.allSitePresTempSensors.length;ps++){var pSensor=$scope.allSitePresTempSensors[ps];pSensor.event_id==eventID&&$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==pSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+pSensor.status+"</div>",lat:pSensor.latitude_dd,lng:pSensor.longitude_dd,icon:icons.pressureIcon,title:"PressureTemp Sensor",eventID:pSensor.event_id})}for(var ts=0;ts<$scope.allSiteThermSensors.length;ts++){var tSensor=$scope.allSiteThermSensors[ts];tSensor.event_id==eventID&&$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==tSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+tSensor.status+"</div>",lat:tSensor.latitude_dd,lng:tSensor.longitude_dd,icon:icons.thermIcon,title:"Thermometer Sensor",eventID:tSensor.event_id})}for(var webs=0;webs<$scope.allSiteWebSensors.length;webs++){var webSensor=$scope.allSiteWebSensors[webs];webSensor.event_id==eventID&&$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==webSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+webSensor.status+"</div>",lat:webSensor.latitude_dd,lng:webSensor.longitude_dd,icon:icons.webcamIcon,title:"Webcam Sensor",eventID:webSensor.event_id})}for(var rains=0;rains<$scope.allSiteRainSensors.length;rains++){var rainSensor=$scope.allSiteRainSensors[rains];rainSensor.event_id==eventID&&$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==rainSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+rainSensor.status+"</div>",lat:rainSensor.latitude_dd,lng:rainSensor.longitude_dd,icon:icons.raingageIcon,title:"Raingage Sensor",eventID:rainSensor.event_id})}}else{for(var noEbs=0;noEbs<$scope.allSiteBaroSensors.length;noEbs++){var noEbSensor=$scope.allSiteBaroSensors[noEbs];$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==noEbSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+noEbSensor.status+"</div>",lat:noEbSensor.latitude_dd,lng:noEbSensor.longitude_dd,icon:icons.baroIcon,title:"Baro Sensor",eventID:noEbSensor.event_id})}for(var noEms=0;noEms<$scope.allSiteMetSensors.length;noEms++){var noEmSensor=$scope.allSiteMetSensors[noEms];$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==noEmSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+noEmSensor.status+"</div>",lat:noEmSensor.latitude_dd,lng:noEmSensor.longitude_dd,icon:icons.metIcon,title:"Met Sensor",eventID:noEmSensor.event_id})}for(var noErs=0;noErs<$scope.allSiteRDGSensors.length;noErs++){var noErSensor=$scope.allSiteRDGSensors[noErs];$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==noErSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+noErSensor.status+"</div>",lat:noErSensor.latitude_dd,lng:noErSensor.longitude_dd,icon:icons.rdgIcon,title:"RDG Sensor",eventID:noErSensor.event_id})}for(var noEss=0;noEss<$scope.allSiteStormSensors.length;noEss++){var noEsSensor=$scope.allSiteStormSensors[noEss];$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==noEsSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+noEsSensor.status+"</div>",lat:noEsSensor.latitude_dd,lng:noEsSensor.longitude_dd,icon:icons.stormIcon,title:"Stormtide Sensor",eventID:noEsSensor.event_id})}for(var noEws=0;noEws<$scope.allSiteWaveSensors.length;noEws++){var noEwSensor=$scope.allSiteWaveSensors[noEws];$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==noEwSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+noEwSensor.status+"</div>",lat:noEwSensor.latitude_dd,lng:noEwSensor.longitude_dd,icon:icons.waveIcon,title:"Waveheight Sensor",eventID:noEwSensor.event_id})}for(var noEps=0;noEps<$scope.allSitePresTempSensors.length;noEps++){var noEpSensor=$scope.allSitePresTempSensors[noEps];$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==noEpSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+noEpSensor.status+"</div>",lat:noEpSensor.latitude_dd,lng:noEpSensor.longitude_dd,icon:icons.pressureIcon,title:"PressureTemp Sensor",eventID:noEpSensor.event_id})}for(var noEts=0;noEts<$scope.allSiteThermSensors.length;noEts++){var noEtSensor=$scope.allSiteThermSensors[noEts];$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==noEtSensor.deployment_type_id})[0].method+"Sensor Status:</b> "+noEtSensor.status+"</div>",lat:noEtSensor.latitude_dd,lng:noEtSensor.longitude_dd,icon:icons.thermIcon,title:"Thermometer Sensor",eventID:noEtSensor.event_id})}for(var noEwebs=0;noEwebs<$scope.allSiteWebSensors.length;noEwebs++){var noEwebSensor=$scope.allSiteWebSensors[noEwebs];$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==noEwebSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+noEwebSensor.status+"</div>",lat:noEwebSensor.latitude_dd,lng:noEwebSensor.longitude_dd,icon:icons.webcamIcon,title:"Webcam Sensor",eventID:noEwebSensor.event_id})}for(var noErains=0;noErains<$scope.allSiteRainSensors.length;noErains++){var noErainSensor=$scope.allSiteRainSensors[noErains];$scope.markers.push({layer:"stnSites",message:"<div><b>"+$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==noErainSensor.deployment_type_id})[0].method+" Sensor Status:</b> "+noErainSensor.status+"</div>",lat:noErainSensor.latitude_dd,lng:noErainSensor.longitude_dd,icon:icons.raingageIcon,title:"Raingage Sensor",eventID:noErainSensor.event_id})}}},icons={stn:{type:"div",iconSize:[10,10],className:"stnSiteIcon"},selected:{type:"div",iconSize:[12,12],className:"selectedIcon"},hwmIcon:{type:"div",iconSize:[16,20],className:"stnHWMIcon"},baroIcon:{type:"div",iconSize:[16,20],className:"stnBaroSensorIcon"},metIcon:{type:"div",iconSize:[20,20],className:"stnMetSensorIcon"},rdgIcon:{type:"div",iconSize:[22,20],className:"stnRDGSensorIcon"},stormIcon:{type:"div",iconSize:[20,20],className:"stnStormSensorIcon"},waveIcon:{type:"div",iconSize:[20,20],className:"stnWaveSensorIcon"},pressureIcon:{type:"div",iconSize:[20,20],className:"stnPressureSensorIcon"},thermIcon:{type:"div",iconSize:[16,22],className:"stnThermSensorIcon"},webcamIcon:{type:"div",iconSize:[20,20],className:"stnWebcamSensorIcon"},raingageIcon:{type:"div",iconSize:[20,20],className:"stnRaingageSensorIcon"}};$scope.pathsObj={circleMarker:{type:"circleMarker",radius:20,weight:3,color:"#000099",latlngs:{}}};var addShape=function(){$scope.paths={},$scope.pathsObj.circleMarker.latlngs={lat:$scope.thisSite.latitude_dd,lng:$scope.thisSite.longitude_dd},$scope.paths.circleMarker=$scope.pathsObj.circleMarker};addShape(),angular.extend($scope,{mapCenter:{lat:$scope.thisSite.latitude_dd,lng:$scope.thisSite.longitude_dd,zoom:16,minZoom:16},markers:$scope.markers,markersLatLngArray:[],layers:{baselayers:{topo:{name:"World Topographic",type:"agsBase",layer:"Topographic",visible:!1}},overlays:{stnSites:{type:"markercluster",name:"STN Sites",visible:!0}}}});var getProximitySites=function(){SITE.getProximitySites({Latitude:$scope.thisSite.latitude_dd,Longitude:$scope.thisSite.longitude_dd,Buffer:.05},function(response){if($scope.closeSites=response,$scope.closeSites.length>0)for(var i=0;i<$scope.closeSites.length;i++){var a=$scope.closeSites[i];a.site_id!==$scope.thisSite.site_id&&$scope.markers.push({layer:"stnSites",message:"<div><b>Nearby Site Name:</b> "+a.site_no+"</div>",lat:a.latitude_dd,lng:a.longitude_dd,icon:icons.stn})}},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})}}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("siteCtrl",["$scope","$state","$rootScope","$cookies","$location","$http","$uibModal","$filter","thisSite","latlong","thisSiteNetworkNames","thisSiteNetworkTypes","thisSiteHousings","SITE","MEMBER","FILE_TYPE","AGENCY","allHorDatums","allHorCollMethods","allStates","allCounties","allDeployPriorities","allHousingTypes","allNetworkNames","allNetworkTypes","allDeployTypes","allSensorTypes",function($scope,$state,$rootScope,$cookies,$location,$http,$uibModal,$filter,thisSite,latlong,thisSiteNetworkNames,thisSiteNetworkTypes,thisSiteHousings,SITE,MEMBER,FILE_TYPE,AGENCY,allHorDatums,allHorCollMethods,allStates,allCounties,allDeployPriorities,allHousingTypes,allNetworkNames,allNetworkTypes,allDeployTypes,allSensorTypes){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else if($rootScope.thisPage="Site Dashboard",$scope.aSite={},$scope.status={mapOpen:!1,siteOpen:!0,opOpen:!1,sensorOpen:!1,hwmOpen:!1,filesOpen:!1,peakOpen:!1},$scope.thisSiteHouseTypeModel=[],$scope.openSiteCreate=function(){$rootScope.stateIsLoading.showLoading=!0;var dropdownParts=[allHorDatums,allHorCollMethods,allStates,allCounties,allHousingTypes,allDeployPriorities,allNetworkNames,allNetworkTypes,allDeployTypes,allSensorTypes],siteNNamesToPass=[];if(void 0!==$scope.siteNetworkNames)for(var aNN=0;aNN<allNetworkNames.length;aNN++){var i=$scope.siteNetworkNames.map(function(e){return e}).indexOf(allNetworkNames[aNN].name);i>-1&&siteNNamesToPass.push(allNetworkNames[aNN])}var siteNTypesToPass=[];if(void 0!==$scope.siteNetworkTypes)for(var aNT=0;aNT<allNetworkTypes.length;aNT++){var a=$scope.siteNetworkTypes.map(function(e){return e}).indexOf(allNetworkTypes[aNT].network_type_name);a>-1&&siteNTypesToPass.push(allNetworkTypes[aNT])}var modalInstance=$uibModal.open({templateUrl:"SITEmodal.html",controller:"siteModalCtrl",size:"lg",keyboard:!1,backdrop:"static",windowClass:"rep-dialog",resolve:{allDropDownParts:function(){return dropdownParts},thisSiteStuff:function(){if(void 0!==$scope.aSite.site_id){var origSiteHouses=void 0!==$scope.originalSiteHousings?$scope.originalSiteHousings:[],sHouseTypeModel=$scope.thisSiteHouseTypeModel.length>0?$scope.thisSiteHouseTypeModel:[],sNetNames=siteNNamesToPass.length>0?siteNNamesToPass:[],sNetTypes=siteNTypesToPass.length>0?siteNTypesToPass:[],lo=void 0!==$scope.landowner?$scope.landowner:{},siteRelatedStuff=[$scope.aSite,origSiteHouses,sHouseTypeModel,sNetNames,sNetTypes,lo];return siteRelatedStuff}},fileTypes:function(){return FILE_TYPE.getAll().$promise},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise},agencyList:function(){return AGENCY.getAll().$promise},latlong:function(){return void 0!==latlong?latlong:void 0}}});modalInstance.result.then(function(r){"Deleted"!==r?($scope.aSite=r[0],getLandOwnerContact(),$scope.aSite.HorizontalDatum=$scope.aSite.hdatum_id>0?allHorDatums.filter(function(hd){return hd.datum_id==$scope.aSite.hdatum_id})[0].datum_name:"---",$scope.aSite.HorizontalCollectMethod=void 0!==$scope.aSite.hcollect_method_id&&$scope.aSite.hcollect_method_id>0?allHorCollMethods.filter(function(hc){return hc.hcollect_method_id==$scope.aSite.hcollect_method_id})[0].hcollect_method:"---",$scope.aSite.PriorityName=void 0!==$scope.aSite.priority_id&&$scope.aSite.priority_id>0?allDeployPriorities.filter(function(dp){return dp.priority_id==$scope.aSite.priority_id})[0].priority_name:"---",$scope.siteNetworkNames=r[1],$scope.siteNetworkTypes=r[2]):($scope.aSite={},$state.go("map")),$rootScope.stateIsLoading.showLoading=!1})},void 0!==thisSite)if(void 0!==thisSite.site_id){if($scope.aSite=thisSite,$scope.aSite.decDegORdms="dd",$scope.aSite.HorizontalDatum=$scope.aSite.hdatum_id>0?allHorDatums.filter(function(hd){return hd.datum_id==$scope.aSite.hdatum_id})[0].datum_name:"---",$scope.aSite.HorizontalCollectMethod=void 0!==$scope.aSite.hcollect_method_id&&$scope.aSite.hcollect_method_id>0?allHorCollMethods.filter(function(hc){return hc.hcollect_method_id==$scope.aSite.hcollect_method_id})[0].hcollect_method:"---",$scope.aSite.PriorityName=void 0!==$scope.aSite.priority_id&&$scope.aSite.priority_id>0?allDeployPriorities.filter(function(dp){return dp.priority_id==$scope.aSite.priority_id;

})[0].priority_name:"---",thisSiteHousings.length>0){$scope.originalSiteHousings=angular.copy(thisSiteHousings),$scope.showSiteHouseTable=!0;for(var z=0;z<$scope.originalSiteHousings.length;z++){var houseTypeName=allHousingTypes.filter(function(h){return h.housing_type_id==$scope.originalSiteHousings[z].housing_type_id})[0].type_name,houseT={type_name:houseTypeName,housing_type_id:$scope.originalSiteHousings[z].housing_type_id,site_housing_id:$scope.originalSiteHousings[z].site_housing_id,length:$scope.originalSiteHousings[z].length,material:$scope.originalSiteHousings[z].material,notes:$scope.originalSiteHousings[z].notes,amount:$scope.originalSiteHousings[z].amount};$scope.thisSiteHouseTypeModel.push(houseT)}}if($scope.siteNetworkNames=[],thisSiteNetworkNames.length>0)for(var a=0;a<thisSiteNetworkNames.length;a++){var nn=allNetworkNames.filter(function(n){return n.network_name_id==thisSiteNetworkNames[a].network_name_id})[0];$scope.siteNetworkNames.push(nn.name)}if($scope.siteNetworkTypes=[],thisSiteNetworkTypes.length>0)for(var b=0;b<thisSiteNetworkTypes.length;b++){var nt=allNetworkTypes.filter(function(nt){return nt.network_type_id==thisSiteNetworkTypes[b].network_type_id})[0];$scope.siteNetworkTypes.push(nt.network_type_name)}$scope.sensorNotAppr=void 0!==$scope.aSite.sensor_not_appropriate||$scope.aSite.sensor_not_appropriate>0?"Yes":"No",void 0!==$scope.aSite.member_id&&$scope.aSite.member_id>0?($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.query({id:$scope.aSite.member_id}).$promise.then(function(response){$scope.aSite.Creator=response.fname+" "+response.lname},function(error){$scope.aSite.Creator="Not recorded"}).$promise):$scope.aSite.Creator="Not recorded";var getLandOwnerContact=function(){null!==$scope.aSite.landownercontact_id&&void 0!==$scope.aSite.landownercontact_id&&$scope.aSite.landownercontact_id>0&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",SITE.getSiteLandOwner({id:$scope.aSite.site_id},function(response){$scope.landowner=response,$scope.addLandowner=!0},function(errorResponse){toastr.error("Error getting Landowner Information: "+errorResponse.statusText)}).$promise)};getLandOwnerContact()}else toastr.error("This site does not exist"),$location.path("/Home").replace(),$scope.apply;else $scope.openSiteCreate()}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("quickCreateCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$uibModal","$filter","$sce","whichQuick","allHorDatums","allHorCollMethods","allStates","allCounties","allOPTypes","allVertDatums","allVertColMethods","allOPQualities","allHWMTypes","allHWMQualities","allMarkers","allEvents","allSensorTypes","allSensorBrands","allDeployTypes","allHousingTypes","SITE","OBJECTIVE_POINT","HWM","MEMBER","INSTRUMENT","INSTRUMENT_STATUS","OP_MEASURE","OP_CONTROL_IDENTIFIER","GEOCODE",function($scope,$rootScope,$cookies,$location,$state,$http,$uibModal,$filter,$sce,whichQuick,allHorDatums,allHorCollMethods,allStates,allCounties,allOPTypes,allVertDatums,allVertColMethods,allOPQualities,allHWMTypes,allHWMQualities,allMarkers,allEvents,allSensorTypes,allSensorBrands,allDeployTypes,allHousingTypes,SITE,OBJECTIVE_POINT,HWM,MEMBER,INSTRUMENT,INSTRUMENT_STATUS,OP_MEASURE,OP_CONTROL_IDENTIFIER,GEOCODE){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$scope.CreateWhat=whichQuick,$scope.htmlDescriptionTip=$sce.trustAsHtml("Required by NWIS. Can be listed as <em>'unknown'</em> or <em>'Atlantic Ocean'</em>"),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.query({id:$cookies.get("mID")}).$promise.then(function(response){$scope.loggedInMember=response}),$rootScope.thisPage="Quick"+whichQuick,$scope.quickForm={};var makeAdate=function(d){var aDate=new Date;""!==d&&void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};if($scope.decDegORdms={},$scope.EventName=$cookies.get("SessionEventName"),$scope.aSite={member_id:$cookies.get("mID")},$scope.aOP={date_established:makeAdate("")},$scope.status={siteOpen:!0,opOpen:!1,hwmOpen:!1},$scope.removeOPCarray=[],$scope.addedIdentifiers=[],$scope.showControlIDinput=!1,$scope.horDatumList=allHorDatums,$scope.horCollMethodList=allHorCollMethods,$scope.stateList=allStates,$scope.allCountyList=allCounties,$scope.stateCountyList=[],$scope.opTypeList=allOPTypes,$scope.vertDatumList=allVertDatums,$scope.vertCollMethodList=allVertColMethods,$scope.opQualList=allOPQualities,"HWM"==whichQuick&&($scope.aHWM={hwm_label:"hwm-1",hwm_environment:"Riverine",event_id:$cookies.get("SessionEventID"),bank:"N/A",flag_date:makeAdate(""),stillwater:0,flag_member_id:$cookies.get("mID")},$scope.hwmTypeList=allHWMTypes,$scope.hwmQualList=allHWMQualities,$scope.markerList=allMarkers),"Sensor"==whichQuick){var getTimeZoneStamp=function(dsent){var d,sendThis=[];d=void 0!==dsent?new Date(dsent):new Date;var offset=d.toString().substring(35),zone="";switch(offset.substr(0,3)){case"Cen":zone="CST";break;case"Eas":zone="EST";break;case"Mou":zone="MST";break;case"Pac":zone="PST"}return sendThis=[d,zone]};$scope.depTypeList=allDeployTypes,$scope.houseTypeList=allHousingTypes,$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.aSensor={event_id:$cookies.get("SessionEventID")},$scope.aSensStatus={status_type_id:1,member_id:$cookies.get("mID")},$scope.eventList=allEvents,$scope.sensorTypeList=allSensorTypes,$scope.sensorBrandList=allSensorBrands,$scope.IntervalType={type:"Seconds"};var DeptimeParts=getTimeZoneStamp();$scope.aSensStatus.time_stamp=DeptimeParts[0],$scope.aSensStatus.time_zone=DeptimeParts[1],$scope.getDepTypes=function(){$scope.filteredDeploymentTypes=[];var matchingSensDeplist=allSensorTypes.filter(function(sd){return sd.sensor_type_id==$scope.aSensor.sensor_type_id})[0];$scope.filteredDeploymentTypes=matchingSensDeplist.deploymenttypes,1==$scope.filteredDeploymentTypes.length&&($scope.aSensor.deployment_type_id=$scope.filteredDeploymentTypes[0].deployment_type_id)}}$scope.FTorMETER="ft",$scope.FTorCM="ft",$scope.addNewIdentifier=function(){$scope.addedIdentifiers.push({identifier:"",identifier_type:""}),$scope.showControlIDinput=!0};var dealWithTimeStampb4Send=function(){if("UTC"!=$scope.aSensStatus.time_zone){var utcDateTime=new Date($scope.aSensStatus.time_stamp).toUTCString();$scope.aSensStatus.time_stamp=utcDateTime,$scope.aSensStatus.time_zone="UTC"}else{var i=$scope.aSensStatus.time_stamp.toString().indexOf("GMT")+3;$scope.aSensStatus.time_stamp=$scope.aSensStatus.time_stamp.toString().substring(0,i)}};$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.decDegORdms.val="dd",$scope.DMS={};var azimuth=function(deg,min,sec){var azi=0;return 0>deg?(azi=-1*deg+1*min/60+1*sec/3600,(-1*azi).toFixed(5)):(azi=1*deg+1*min/60+1*sec/3600,azi.toFixed(5))},deg_to_dms=function(deg){0>deg&&(deg=deg.toString(),deg=deg.substring(1));var d=Math.floor(deg),minfloat=60*(deg-d),m=Math.floor(minfloat),s=(60*(minfloat-m)).toFixed(3);return""+d+":"+m+":"+s};$scope.latLongChange=function(){if("dd"==$scope.decDegORdms.val)if(void 0!==$scope.DMS.LADeg&&void 0!==$scope.DMS.LAMin&&void 0!==$scope.DMS.LASec&&void 0!==$scope.DMS.LODeg&&void 0!==$scope.DMS.LOMin&&void 0!==$scope.DMS.LOSec)$scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec);else{var DMSModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all three inputs for conversion from DMS to Decimal Degrees to work.</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});DMSModal.result.then(function(){(void 0!==$scope.DMS.LADeg||void 0!==$scope.DMS.LAMin||void 0!==$scope.DMS.LASec)&&$("#LaDeg").focus(),(void 0!==$scope.DMS.LODeg||void 0!==$scope.DMS.LOMin||void 0!==$scope.DMS.LOSec)&&$("#LoDeg").focus(),$scope.decDegORdms.val="dms"})}else if(void 0!==$scope.aSite.latitude_dd){var latDMS=deg_to_dms($scope.aSite.latitude_dd).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.aSite.longitude_dd),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2]}};var openLatModal=function(w){var latModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Latitude must be between 0 and 73.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});latModal.result.then(function(fieldFocus){"latlong"==w?$("#SITE_latitude_dd").focus():$("#LaDeg").focus()})},openLongModal=function(w){var longModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Longitude must be between -175.0 and -60.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});longModal.result.then(function(fieldFocus){"latlong"==w?$("#SITE_longitude_dd").focus():$("#LoDeg").focus()})};$scope.checkValue=function(d,direction){"dms"==d?("lat"==direction&&($scope.DMS.LADeg<0||$scope.DMS.LADeg>73||isNaN($scope.DMS.LADeg)&&void 0!==$scope.DMS.LADeg||isNaN($scope.DMS.LAMin)&&void 0!==$scope.DMS.LAMin||isNaN($scope.DMS.LASec)&&void 0!==$scope.DMS.LASec)&&(openLatModal("dms"),isNaN($scope.DMS.LADeg)&&($scope.DMS.LADeg=void 0),isNaN($scope.DMS.LAMin)&&($scope.DMS.LAMin=void 0),isNaN($scope.DMS.LASec)&&($scope.DMS.LASec=void 0)),"long"==direction&&($scope.DMS.LODeg<-175||$scope.DMS.LODeg>-60||isNaN($scope.DMS.LODeg)&&void 0!==$scope.DMS.LODeg||isNaN($scope.DMS.LOMin)&&void 0!==$scope.DMS.LOMin||isNaN($scope.DMS.LOSec)&&void 0!==$scope.DMS.LOSec)&&(openLongModal("dms"),isNaN($scope.DMS.LODeg)&&($scope.DMS.LODeg=void 0),isNaN($scope.DMS.LOMin)&&($scope.DMS.LOMin=void 0),isNaN($scope.DMS.LOSec)&&($scope.DMS.LOSec=void 0))):("lat"==direction&&($scope.aSite.latitude_dd<0||$scope.aSite.latitude_dd>73||isNaN($scope.aSite.latitude_dd))&&(openLatModal("latlong"),isNaN($scope.aSite.latitude_dd)&&($scope.aSite.latitude_dd=void 0)),"long"==direction&&($scope.aSite.longitude_dd<-175||$scope.aSite.longitude_dd>-60||isNaN($scope.aSite.longitude_dd))&&(openLongModal("latlong"),isNaN($scope.aSite.longitude_dd)&&($scope.aSite.longitude_dd=void 0)))},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.getAddress=function(){if(delete $scope.aSite.address,delete $scope.aSite.city,delete $scope.aSite.state,$scope.stateCountyList=[],delete $scope.aSite.zip,void 0!==$scope.DMS.LADeg&&($scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)),void 0===$scope.aSite.latitude_dd||void 0===$scope.aSite.longitude_dd||isNaN($scope.aSite.latitude_dd)||isNaN($scope.aSite.longitude_dd)){$rootScope.stateIsLoading.showLoading=!1;{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please provide a Latitude and Longitude before clicking Verify Location</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}}else $rootScope.stateIsLoading.showLoading=!0,delete $http.defaults.headers.common.Authorization,$http.defaults.headers.common.Accept="application/json",GEOCODE.getAddressParts({Longitude:$scope.aSite.longitude_dd,Latitude:$scope.aSite.latitude_dd},function(response){if(void 0!==response.result)if(response.result.geographies.Counties.length>0){var stateFIPS=response.result.geographies.Counties[0].STATE,countyName=response.result.geographies.Counties[0].NAME,thisStateID=$scope.allCountyList.filter(function(c){return c.state_fip==stateFIPS})[0].state_id,thisState=$scope.stateList.filter(function(s){return s.state_id==thisStateID})[0];void 0!==thisState?($scope.aSite.state=thisState.state_abbrev,$scope.stateCountyList=$scope.allCountyList.filter(function(c){return c.state_id==thisState.state_id}),$scope.aSite.county=countyName,$rootScope.stateIsLoading.showLoading=!1):($rootScope.stateIsLoading.showLoading=!1,toastr.error("The Latitude/Longitude did not return a recognized state. Please choose one from the dropdown."))}else $rootScope.stateIsLoading.showLoading=!1,toastr.error("No location information came back from that lat/long");else $rootScope.stateIsLoading.showLoading=!1,toastr.error("Error getting address. Choose State and County from dropdowns.")},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error getting address: "+errorResponse.statusText)})},$scope.chooseQuality=function(){if(""!==$scope.aHWM.hwm_uncertainty){var x=Number($scope.aHWM.hwm_uncertainty);$scope.aHWM.hwm_quality_id=$scope.hwmQualList.filter(function(h){return h.min_range<=x&&h.max_range>=x})[0].hwm_quality_id}},$scope.compareToUncertainty=function(){if(""!==$scope.aHWM.hwm_uncertainty&&void 0!==$scope.aHWM.hwm_uncertainty){var x=Number($scope.aHWM.hwm_uncertainty),matchingQualId=$scope.hwmQualList.filter(function(h){return h.min_range<=x&&h.max_range>=x})[0].hwm_quality_id;if($scope.aHWM.hwm_quality_id!==matchingQualId){var incongruentModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Warning</h3></div><div class="modal-body"><p>There is a mismatch between the hwm quality chosen and the hwm uncertainty above. Please correct your hwm uncertainty.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});incongruentModal.result.then(function(){angular.element("[name='hwm_uncertainty']").focus()})}}},$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1}),$scope.updateCountyList=function(s){var thisState=$scope.stateList.filter(function(st){return st.state_abbrev==s})[0];$scope.stateCountyList=$scope.allCountyList.filter(function(c){return c.state_id==thisState.state_id})},$scope.UnquantChecked=function(){1==$scope.aOP.unquantified&&($scope.aOP.uncertainty=null)};var trimOP=function(op){var OBJ_PT={objective_point_id:void 0!==op.objective_point_id?op.objective_point_id:0,name:op.name,description:op.description,elev_ft:void 0!==op.elev_ft?op.elev_ft:null,date_established:op.date_established,op_is_destroyed:void 0!==op.op_is_destroyed?op.op_is_destroyed:0,op_notes:void 0!==op.op_notes?op.op_notes:null,site_id:op.site_id,vdatum_id:void 0!==op.vdatum_id?op.vdatum_id:0,latitude_dd:op.latitude_dd,longitude_dd:op.longitude_dd,hdatum_id:void 0!==op.hdatum_id?op.hdatum_id:0,hcollect_method_id:void 0!==op.hcollect_method_id?op.hcollect_method_id:0,vcollect_method_id:void 0!==op.vcollect_method_id?op.vcollect_method_id:0,op_type_id:op.op_type_id,date_recovered:void 0!==op.date_recovered?op.date_recovered:null,uncertainty:void 0!==op.uncertainty?op.uncertainty:null,unquantified:void 0!==op.unquantified?op.unquantified:null,op_quality_id:void 0!==op.op_quality_id?op.op_quality_id:null};return OBJ_PT};$scope.RemoveID=function(opControl){var i=$scope.addedIdentifiers.indexOf(opControl);void 0!==opControl.op_control_identifier_id?($scope.removeOPCarray.push(opControl),$scope.addedIdentifiers.splice(i,1)):$scope.addedIdentifiers.splice(i,1)};var formatDefaults=function(theOP){"meter"==theOP.FTorMETER&&($scope.aOP.FTorMETER="ft",$scope.aOP.elev_ft=3.2808*$scope.aOP.elev_ft),"cm"==theOP.FTorCM&&($scope.aOP.FTorCM="ft",$scope.aOP.uncertainty=$scope.aOP.uncertainty/30.48)};$scope.tapedown={Open:!1};var showNeedOPfirstModal=function(){var needOPModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">No Datum Location</h3></div><div class="modal-body"><p>In order to add tape down information, please populate the Datum Location section above first.</p><p>The following fields are required for the tape down section: <b>Name</b>, <b>Elevation</b> and <b>Vertical Datum</b>.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});needOPModal.result.then(function(){$scope.tapedown.Open=!1})};$scope.tapeDownTable=[],$scope.removeOP=function(){var removeOPMeas=$uibModal.open({backdrop:"static",keyboard:!1,template:'<div class="modal-header"><h3 class="modal-title">Remove OP Measure</h3></div><div class="modal-body"><p>Are you sure you don\'t want to add this OP Measurement to this quick sensor?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">Yes</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close("remove")},$scope.cancel=function(){$uibModalInstance.close("cancel")}}],size:"sm"});removeOPMeas.result.then(function(yesOrNo){"remove"==yesOrNo&&($scope.tapedown.Open=!1,$scope.tapeDownTable.splice(0,1),$scope.OPsForTapeDown=[],$scope.OPMeasure={},$scope.addTapedown=!1,$scope.aSensStatus.sensor_elevation="",$scope.aSensStatus.ws_elevation="",$scope.aSensStatus.gs_elevation="",$scope.aSensStatus.vdatum_id="")})},$scope.addTapedown=!1,$scope.OPsForTapeDown=[],$scope.showTapedownPart=function(){$scope.tapeDownTable.length<1?void 0!==$scope.aOP.name&&void 0!==$scope.aOP.elev_ft&&void 0!==$scope.aOP.vdatum_id?($scope.OPMeasure={},$scope.OPMeasure.op_name=$scope.aOP.name,$scope.OPMeasure.elevation=$scope.aOP.elev_ft,$scope.OPMeasure.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==$scope.aOP.vdatum_id})[0].datum_abbreviation,$scope.tapeDownTable.push($scope.OPMeasure),$scope.OPsForTapeDown.push($scope.aOP),$scope.addTapedown=!0,$scope.tapedown.Open=!0,$scope.aSensStatus.vdatum_id=$scope.aOP.vdatum_id):showNeedOPfirstModal():($scope.addTapedown=!0,$scope.tapedown.Open=!0)},$scope.siteErrors=!1,$scope.opErrors=!1,$scope.hwmErrors=!1,$scope.create=function(){$rootScope.stateIsLoading.showLoading=!0;var theForm=$scope.quickForm.quick;if($scope.siteErrors=!1,$scope.opErrors=!1,$scope.hwmErrors=!1,theForm.$valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0===$scope.aSite.latitude_dd&&($scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0===$scope.aSite.longitude_dd&&($scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec));var createdSiteID=0;SITE.save($scope.aSite,function(response){createdSiteID=response.site_id,$scope.aOP.site_id=createdSiteID,$scope.aOP.latitude_dd=response.latitude_dd,$scope.aOP.longitude_dd=response.longitude_dd,$scope.aOP.hdatum_id=response.hdatum_id,$scope.aOP.hcollect_method_id=response.hcollect_method_id,"HWM"==$scope.CreateWhat&&($scope.aHWM.site_id=createdSiteID,$scope.aHWM.waterbody=response.waterbody,$scope.aHWM.latitude_dd=response.latitude_dd,$scope.aHWM.longitude_dd=response.longitude_dd,$scope.aHWM.hcollect_method_id=response.hcollect_method_id,$scope.aHWM.hdatum_id=response.hdatum_id,$scope.aHWM.flag_member_id=response.member_id,$scope.aHWM.event_id=$cookies.get("SessionEventID"));var createdOP={};formatDefaults($scope.aOP);var OPtoPOST=trimOP($scope.aOP);OBJECTIVE_POINT.save(OPtoPOST,function(response){if(createdOP=response,$scope.addedIdentifiers.length>0)for(var opc=0;opc<$scope.addedIdentifiers.length;opc++){var thisOPControlID=$scope.addedIdentifiers[opc];thisOPControlID.objective_point_id=response.objective_point_id,OP_CONTROL_IDENTIFIER.save(thisOPControlID).$promise}if("HWM"==$scope.CreateWhat){void 0!==$scope.aHWM.survey_date&&($scope.aHWM.survey_member_id=$scope.aHWM.flag_member_id),void 0!==$scope.aHWM.elev_ft&&(void 0===$scope.aHWM.survey_date&&($scope.aHWM.survey_date=makeAdate("")),$scope.aHWM.survey_member_id=$scope.aHWM.flag_member_id),HWM.save($scope.aHWM).$promise.then(function(response){toastr.success("Quick HWM created"),$rootScope.stateIsLoading.showLoading=!1,$location.path("/Site/"+createdSiteID+"/SiteDashboard").replace(),$scope.apply})}if("Sensor"==$scope.CreateWhat){var createdSensor={};"Minutes"==$scope.IntervalType.type&&($scope.aSensor.interval=60*$scope.aSensor.interval),$scope.aSensor.site_id=createdSiteID,dealWithTimeStampb4Send(),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INSTRUMENT.save($scope.aSensor).$promise.then(function(response){createdSensor=response,$scope.aSensStatus.instrument_id=response.instrument_id,INSTRUMENT_STATUS.save($scope.aSensStatus).$promise.then(function(statResponse){if($scope.tapeDownTable.length>0){var thisTape=$scope.tapeDownTable[0];thisTape.instrument_status_id=statResponse.instrument_status_id,thisTape.objective_point_id=createdOP.objective_point_id,OP_MEASURE.save(thisTape).$promise}toastr.success("Quick Sensor created"),$rootScope.stateIsLoading.showLoading=!1,$location.path("/Site/"+createdSiteID+"/SiteDashboard").replace(),$scope.apply})})}})})}else $rootScope.stateIsLoading.showLoading=!1,$scope.status.siteOpen=!0,$scope.status.opOpen=!0,$scope.status.hwmOpen=!0,angular.element("[name='"+theForm.$name+"']").find(".ng-invalid:visible:first").focus(),(theForm.site_description.$invalid||theForm.latitude_dd.$invalid||theForm.longitude_dd.$invalid||theForm.hdatum_id.$invalid||theForm.hcollect_method_id.$invalid||theForm.waterbody.$invalid||theForm.state.$invalidv||theForm.county.$invalid)&&($scope.siteErrors=!0),(theForm.op_type_id.$invalid||theForm.name.$invalid||theForm.description.$invalid||theForm.de.$invalid)&&($scope.opErrors=!0),(theForm.hwm_type_id.$invalid||theForm.hwm_environment.$invalid||theForm.hwm_quality_id.$invalid||theForm.fd.$invalid)&&($scope.hwmErrors=!0),toastr.error("Quick HWM not created.")}}}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("settingsCtrl",["$scope","$rootScope","$cookies","$location","$state",function($scope,$rootScope,$cookies,$location,$state){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Settings",$rootScope.activeMenu="settings",$scope.settings="Welcome to the new STN Settings Page!!",$scope.changeView=function(view){$state.go(view)})}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("sensorModalCtrl",["$scope","$rootScope","$timeout","$cookies","$http","$sce","$uibModalInstance","$uibModal","SERVER_URL","FILE_STAMP","allDropdowns","agencyList","Site_Files","allDepTypes","thisSensor","SensorSite","siteOPs","allMembers","INSTRUMENT","INSTRUMENT_STATUS","DATA_FILE","FILE","SOURCE","OP_MEASURE",function($scope,$rootScope,$timeout,$cookies,$http,$sce,$uibModalInstance,$uibModal,SERVER_URL,FILE_STAMP,allDropdowns,agencyList,Site_Files,allDepTypes,thisSensor,SensorSite,siteOPs,allMembers,INSTRUMENT,INSTRUMENT_STATUS,DATA_FILE,FILE,SOURCE,OP_MEASURE){$scope.sensorTypeList=allDropdowns[0],$scope.sensorBrandList=allDropdowns[1],$scope.houseTypeList=allDropdowns[2],$scope.eventList=allDropdowns[3],$scope.fileTypeList=allDropdowns[4],$scope.vertDatumList=allDropdowns[5],$scope.depSenfileIsUploading=!1,$scope.allSFiles=Site_Files.getAllSiteFiles(),$scope.DepSensorFiles="empty"!==thisSensor?$scope.allSFiles.filter(function(sf){return sf.instrument_id==thisSensor.instrument_id}):[],$scope.depSensImageFiles=$scope.DepSensorFiles.filter(function(hf){return 1===hf.filetype_id}),$scope.showFileForm=!1,$scope.showNWISFileForm=!1,$scope.OPsPresent=siteOPs.length>0?!0:!1,$scope.OPsForTapeDown=siteOPs,$scope.removeOPList=[],$scope.tapeDownTable=[],$scope.depTypeList=allDepTypes,$scope.filteredDeploymentTypes=[],$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.userRole=$cookies.get("usersRole"),$scope.showEventDD=!1,$scope.adminChanged={},$scope.IntervalType={},$scope.whichButton="",$scope.serverURL=SERVER_URL,$scope.nwisHeaderTip=$sce.trustAsHtml("Connect your transmitting sensor with NWIS via <em>Station ID for USGS gage</em> from the Site details."),$scope.view={DEPval:"detail",RETval:"detail"},$scope.sensorDataNWIS=!1,$scope.s={depOpen:!0,sFileOpen:!1,NWISFileOpen:!1};var getDateTimeParts=function(d){var theDate,isDate="[object Date]"===Object.prototype.toString.call(d);if(isDate===!1){var y=d.substr(0,4),m=d.substr(5,2)-1,da=d.substr(8,2),h=d.substr(11,2),mi=d.substr(14,2),sec=d.substr(17,2);theDate=new Date(y,m,da,h,mi,sec)}else theDate=d;return theDate};$scope.dateOptions={startingDay:1,showWeeks:!1},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.stamp=FILE_STAMP.getStamp(),$scope.fileItemExists=!0,$scope.saveFileUpload=function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.sFileIsUploading=!0;var fileParts={FileEntity:{file_id:$scope.aFile.file_id,name:$scope.aFile.name,description:$scope.aFile.description,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,file_date:$scope.aFile.file_date,hwm_id:$scope.aFile.hwm_id,site_id:$scope.aFile.site_id,filetype_id:$scope.aFile.filetype_id,source_id:$scope.aFile.source_id,path:$scope.aFile.path,data_file_id:$scope.aFile.data_file_id,instrument_id:$scope.aFile.instrument_id,photo_date:$scope.aFile.photo_date,is_nwis:$scope.aFile.is_nwis,objective_point_id:$scope.aFile.objective_point_id},File:void 0!==$scope.aFile.File1?$scope.aFile.File1:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),FILE_STAMP.setStamp(),$scope.stamp=FILE_STAMP.getStamp(),$scope.isPhoto=$scope.aFile.File1.type.indexOf("image")>-1?!0:!1,$scope.aFile.name=fresponse.name,$scope.aFile.path=fresponse.path,void 0!==$scope.aFile.File1&&($scope.aFile.File=$scope.aFile.File1,$scope.aFile.File1=void 0),fresponse.fileBelongsTo=2==$scope.aFile.filetype_id?"DataFile File":"Sensor File",1===fresponse.filetype_id&&($scope.depSensImageFiles.splice($scope.existIMGFileIndex,1),$scope.depSensImageFiles.push(fresponse)),$scope.DepSensorFiles[$scope.existFileIndex]=fresponse,$scope.allSFiles[$scope.allSFileIndex]=fresponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.sFileIsUploading=!1,$scope.fileItemExists=!0},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})},$scope.showFile=function(file){if($scope.fileTypes=$scope.fileTypeList,$scope.agencies=agencyList,$scope.existFileIndex=-1,$scope.existIMGFileIndex=-1,$scope.allSFileIndex=-1,$scope.aFile={},$scope.aSource={},$scope.datafile={},0!==file){if($scope.existFileIndex=$scope.DepSensorFiles.indexOf(file),$scope.allSFileIndex=$scope.allSFiles.indexOf(file),$scope.existIMGFileIndex=$scope.depSensImageFiles.length>0?$scope.depSensImageFiles.indexOf(file):-1,$scope.aFile=angular.copy(file),FILE.getFileItem({id:$scope.aFile.file_id}).$promise.then(function(response){$scope.fileItemExists=response.Length>0?!0:!1}),$scope.aFile.fileType=$scope.fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,void 0!==$scope.aFile.name){var fI=$scope.aFile.name.lastIndexOf("."),fileExt=$scope.aFile.name.substring(fI+1);$scope.isPhoto=fileExt.match(/(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)?!0:!1}$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),void 0!==file.source_id&&SOURCE.query({id:file.source_id}).$promise.then(function(s){$scope.aSource=s,$scope.aSource.FULLname=$scope.aSource.source_name,1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}),void 0!==file.data_file_id&&DATA_FILE.query({id:file.data_file_id}).$promise.then(function(df){$scope.datafile=df,$scope.processor=allMembers.filter(function(m){return m.member_id==$scope.datafile.processor_id})[0],$scope.datafile.collect_date=new Date($scope.datafile.collect_date),$scope.datafile.good_start=getDateTimeParts($scope.datafile.good_start),$scope.datafile.good_end=getDateTimeParts($scope.datafile.good_end)})}else{$scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname,$scope.processor=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0];var dt=getTimeZoneStamp();$scope.datafile.collect_date=dt[0],$scope.datafile.time_zone=dt[1],$scope.datafile.good_start=new Date,$scope.datafile.good_end=new Date}$scope.showFileForm=!0,$scope.updateAgencyForCaption=function(){1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}},$scope.createFile=function(valid){if(2==$scope.aFile.filetype_id){var s=$scope.datafile.good_start,e=$scope.datafile.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({
template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}}if(valid)if($scope.depSenfileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",2==$scope.aFile.filetype_id){if("UTC"!=$scope.datafile.time_zone){var utcStartDateTime=new Date($scope.datafile.good_start).toUTCString(),utcEndDateTime=new Date($scope.datafile.good_end).toUTCString();$scope.datafile.good_start=utcStartDateTime,$scope.datafile.good_end=utcEndDateTime,$scope.datafile.time_zone="UTC"}else{var si=$scope.datafile.good_start.toString().indexOf("GMT")+3,ei=$scope.datafile.good_end.toString().indexOf("GMT")+3;$scope.datafile.good_start=$scope.datafile.good_start.toString().substring(0,si),$scope.datafile.good_end=$scope.datafile.good_end.toString().substring(0,ei)}$scope.datafile.instrument_id=thisSensor.instrument_id,$scope.datafile.processor_id=$cookies.get("mID"),DATA_FILE.save($scope.datafile).$promise.then(function(dfResonse){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,description:$scope.aFile.description,site_id:$scope.thisSensorSite.site_id,data_file_id:dfResonse.data_file_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,instrument_id:thisSensor.instrument_id},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="DataFile File",$scope.DepSensorFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),1===fresponse.filetype_id&&$scope.depSensImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.depSenfileIsUploading=!1},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving Source info: "+errorResponse.statusText)})}else{var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){if(8!==$scope.aFile.filetype_id){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,photo_date:$scope.aFile.photo_date,description:$scope.aFile.description,site_id:$scope.thisSensorSite.site_id,source_id:response.source_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,instrument_id:thisSensor.instrument_id},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Sensor File",$scope.DepSensorFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),1===fresponse.filetype_id&&$scope.depSensImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.depSenfileIsUploading=!1},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})}else $scope.aFile.source_id=response.source_id,$scope.aFile.site_id=$scope.thisSensorSite.site_id,$scope.aFile.instrument_id=thisSensor.instrument_id,FILE.save($scope.aFile).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Sensor File",$scope.DepSensorFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.depSenfileIsUploading=!1},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving Source info: "+errorResponse.statusText)})}},$scope.saveFile=function(valid){if(2==$scope.aFile.filetype_id){var s=$scope.datafile.good_start,e=$scope.datafile.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}}if(valid){$scope.depSenfileIsUploading=!0;{$scope.aFile.fileBelongsTo}if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.datafile.data_file_id){if("UTC"!=$scope.datafile.time_zone){var utcStartDateTime=new Date($scope.datafile.good_start).toUTCString(),utcEndDateTime=new Date($scope.datafile.good_end).toUTCString();$scope.datafile.good_start=utcStartDateTime,$scope.datafile.good_end=utcEndDateTime,$scope.datafile.time_zone="UTC"}else{var si=$scope.datafile.good_start.toString().indexOf("GMT")+3,ei=$scope.datafile.good_end.toString().indexOf("GMT")+3;$scope.datafile.good_start=$scope.datafile.good_start.toString().substring(0,si),$scope.datafile.good_end=$scope.datafile.good_end.toString().substring(0,ei)}DATA_FILE.update({id:$scope.datafile.data_file_id},$scope.datafile).$promise.then(function(){FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="DataFile File",$scope.DepSensorFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.depSenfileIsUploading=!1},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving data file: "+errorResponse.statusText)})}else{var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){$scope.aFile.source_id=response.source_id,FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="Sensor File",$scope.DepSensorFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.depSenfileIsUploading=!1},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving source: "+errorResponse.statusText)})}}},$scope.deleteFile=function(){var DeleteModalInstance=$uibModal.open({backdrop:"static",keyboard:!1,templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.DepSensorFiles.splice($scope.existFileIndex,1),$scope.allSFiles.splice($scope.allSFileIndex,1),$scope.depSensImageFiles.splice($scope.existIMGFileIndex,1),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelFile=function(){$scope.aFile={},$scope.aSource={},$scope.datafile={},$scope.showFileForm=!1},$scope.showNWISFile=function(f){$scope.existFileIndex=-1,$scope.allSFileIndex=-1,0!==f?($scope.existFileIndex=$scope.sensorNWISFiles.indexOf(f),$scope.allSFileIndex=$scope.allSFiles.indexOf(f),$scope.NWISFile=angular.copy(f),$scope.NWISFile.file_date=new Date($scope.NWISFile.file_date),$scope.NWISFile.FileType="Data",DATA_FILE.query({id:f.data_file_id}).$promise.then(function(df){$scope.NWISDF=df,$scope.nwisProcessor=allMembers.filter(function(m){return m.member_id==$scope.NWISDF.processor_id})[0],$scope.NWISDF.collect_date=new Date($scope.NWISDF.collect_date),$scope.NWISDF.good_start=getDateTimeParts($scope.NWISDF.good_start),$scope.NWISDF.good_end=getDateTimeParts($scope.NWISDF.good_end)})):($scope.NWISFile={name:"http://waterdata.usgs.gov/nwis/uv?site_no="+$scope.thisSensorSite.usgs_sid,path:"<link>",file_date:new Date,filetype_id:2,FileType:"Data",site_id:$scope.aSensor.site_id,data_file_id:0,instrument_id:$scope.aSensor.instrument_id,is_nwis:1},$scope.NWISDF={processor_id:$cookies.get("mID"),instrument_id:$scope.aSensor.instrument_id,collect_date:dt[0],time_zone:dt[1],good_start:new Date,good_end:new Date},$scope.nwisProcessor=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0]),$scope.showNWISFileForm=!0};var postApprovalForNWISfile=function(DFid){DATA_FILE.approveNWISDF({id:DFid}).$promise.then(function(approvalResponse){$scope.NWISDF.approval_id=approvalResponse.approval_id})};$scope.createNWISFile=function(valid){var s=$scope.NWISDF.good_start,e=$scope.NWISDF.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}if(valid){if($scope.depNWISSenfileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json","UTC"!=$scope.NWISDF.time_zone){var utcStartDateTime=new Date($scope.NWISDF.good_start).toUTCString(),utcEndDateTime=new Date($scope.NWISDF.good_end).toUTCString();$scope.NWISDF.good_start=utcStartDateTime,$scope.NWISDF.good_end=utcEndDateTime,$scope.NWISDF.time_zone="UTC"}else{var si=$scope.NWISDF.good_start.toString().indexOf("GMT")+3,ei=$scope.NWISDF.good_end.toString().indexOf("GMT")+3;$scope.NWISDF.good_start=$scope.NWISDF.good_start.toString().substring(0,si),$scope.NWISDF.good_end=$scope.NWISDF.good_end.toString().substring(0,ei)}DATA_FILE.save($scope.NWISDF).$promise.then(function(NdfResponse){$scope.NWISDF.data_file_id=NdfResponse.data_file_id,postApprovalForNWISfile(NdfResponse.data_file_id),$scope.NWISFile.data_file_id=NdfResponse.data_file_id,$scope.NWISFile.path="<link>",delete $scope.NWISFile.FileType,FILE.save($scope.NWISFile).$promise.then(function(Fresponse){toastr.success("File Data saved"),Fresponse.fileBelongsTo="DataFile File",$scope.sensorNWISFiles.push(Fresponse),$scope.allSFiles.push(Fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showNWISFileForm=!1,$scope.depNWISSenfileIsUploading=!1},function(errorResponse){$scope.depNWISSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.depNWISSenfileIsUploading=!1,toastr.error("Error saving data file info: "+errorResponse.statusText)})}},$scope.saveNWISFile=function(valid){var s=$scope.NWISDF.good_start,e=$scope.NWISDF.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}if(valid){if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json","UTC"!=$scope.NWISDF.time_zone){var utcStartDateTime=new Date($scope.NWISDF.good_start).toUTCString(),utcEndDateTime=new Date($scope.NWISDF.good_end).toUTCString();$scope.NWISDF.good_start=utcStartDateTime,$scope.NWISDF.good_end=utcEndDateTime,$scope.NWISDF.time_zone="UTC"}else{var si=$scope.NWISDF.good_start.toString().indexOf("GMT")+3,ei=$scope.NWISDF.good_end.toString().indexOf("GMT")+3;$scope.NWISDF.good_start=$scope.NWISDF.good_start.toString().substring(0,si),$scope.NWISDF.good_end=$scope.NWISDF.good_end.toString().substring(0,ei)}DATA_FILE.update({id:$scope.NWISDF.data_file_id},$scope.NWISDF).$promise.then(function(){FILE.update({id:$scope.NWISFile.file_id},$scope.NWISFile).$promise.then(function(fileResponse){toastr.success("File Data Updated"),fileResponse.fileBelongsTo="DataFile File",$scope.sensorNWISFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showNWISFileForm=!1},function(errorResponse){toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){toastr.error("Error saving data: "+errorResponse.statusText)})}},$scope.deleteNWISFile=function(){var DeleteModalInstance=$uibModal.open({backdrop:"static",keyboard:!1,templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.NWISFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.sensorNWISFiles.splice($scope.existFileIndex,1),$scope.allSFiles.splice($scope.allSFileIndex,1),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showNWISFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelNWISFile=function(){$scope.NWISFile={},$scope.NWISDF={},$scope.showNWISFileForm=!1},$scope.OPchosen=function(opChosen){var opI=$scope.OPsForTapeDown.map(function(o){return o.objective_point_id}).indexOf(opChosen.objective_point_id);if(opChosen.selected)$scope.OPMeasure={},$scope.OPMeasure.op_name=opChosen.name,$scope.OPMeasure.elevation=opChosen.elev_ft,$scope.OPMeasure.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==opChosen.vdatum_id})[0].datum_abbreviation,$scope.OPMeasure.objective_point_id=opChosen.objective_point_id,void 0!==$scope.aSensor.instrument_id&&4!==$scope.aSensStatus.status_type_id?($scope.depTapeCopy.push($scope.OPMeasure),$scope.depStuffCopy[1].vdatum_id=opChosen.vdatum_id):($scope.tapeDownTable.push($scope.OPMeasure),$scope.aSensStatus.vdatum_id=opChosen.vdatum_id);else{var removeOPMeas=$uibModal.open({backdrop:"static",keyboard:!1,template:'<div class="modal-header"><h3 class="modal-title">Remove OP Measure</h3></div><div class="modal-body"><p>Are you sure you want to remove this OP Measurement from this sensor?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close("remove")},$scope.cancel=function(){$uibModalInstance.close("cancel")}}],size:"sm"});removeOPMeas.result.then(function(yesOrNo){if("remove"==yesOrNo){var createOrEdit=void 0!==$scope.aSensor.instrument_id&&4!==$scope.aSensStatus.status_type_id?"edit":"create",tapeDownToRemove="edit"==createOrEdit?$scope.depTapeCopy.filter(function(a){return a.objective_point_id==opChosen.objective_point_id})[0]:$scope.tapeDownTable.filter(function(a){return a.objective_point_id==opChosen.objective_point_id})[0],tInd="edit"==createOrEdit?$scope.depTapeCopy.map(function(o){return o.objective_point_id}).indexOf(tapeDownToRemove.objective_point_id):$scope.tapeDownTable.map(function(o){return o.objective_point_id}).indexOf(tapeDownToRemove.objective_point_id);void 0!==tapeDownToRemove.op_measurements_id&&$scope.removeOPList.push(tapeDownToRemove.op_measurements_id),"edit"==createOrEdit?$scope.depTapeCopy.splice(tInd,1):$scope.tapeDownTable.splice(tInd,1),"edit"==createOrEdit?0===$scope.depTapeCopy.length&&($scope.depStuffCopy[1].vdatum_id=0,$scope.depStuffCopy[1].gs_elevation="",$scope.depStuffCopy[1].ws_elevation="",$scope.depStuffCopy[1].sensor_elevation=""):0===$scope.tapeDownTable.length&&($scope.aSensStatus.vdatum_id=0,$scope.aSensStatus.gs_elevation="",$scope.aSensStatus.ws_elevation="",$scope.aSensStatus.sensor_elevation="")}else $scope.OPsForTapeDown[opI].selected=!0})}};var getTimeZoneStamp=function(dsent){var d,sendThis=[];d=void 0!==dsent?new Date(dsent):new Date;var offset=d.toString().substring(35),zone="";switch(offset.substr(0,3)){case"Cen":zone="CST";break;case"Eas":zone="EST";break;case"Mou":zone="MST";break;case"Pac":zone="PST"}return sendThis=[d,zone]};$scope.showChangeEventDD=function(){$scope.showEventDD=!$scope.showEventDD},$scope.ChangeEvent=function(){$scope.EventName=$scope.eventList.filter(function(el){return el.event_id==$scope.adminChanged.event_id})[0].event_name},$scope.getDepTypes=function(){$scope.filteredDeploymentTypes=[];var matchingSensDeplist=$scope.sensorTypeList.filter(function(sd){return sd.sensor_type_id==$scope.aSensor.sensor_type_id})[0];$scope.filteredDeploymentTypes=matchingSensDeplist.deploymenttypes,1==$scope.filteredDeploymentTypes.length&&($scope.aSensor.deployment_type_id=$scope.filteredDeploymentTypes[0].deployment_type_id)},$scope.LoggedInMember=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSensor={},$scope.aSensStatus={},$scope.thisSensorSite=SensorSite,$scope.cancel=function(){$rootScope.stateIsLoading.showLoading=!1;var sensorObjectToSendBack=thisSensor;$timeout(function(){var sendBack=[sensorObjectToSendBack];$uibModalInstance.close(sendBack)})},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())};var dealWithTimeStampb4Send=function(w){if("saving"==w)if("UTC"!=$scope.depStuffCopy[1].time_zone){var utcDateTimeS=new Date($scope.depStuffCopy[1].time_stamp).toUTCString();$scope.depStuffCopy[1].time_stamp=utcDateTimeS,$scope.depStuffCopy[1].time_zone="UTC"}else{var i=$scope.depStuffCopy[1].time_stamp.toString().indexOf("GMT")+3;$scope.depStuffCopy[1].time_stamp=$scope.depStuffCopy[1].time_stamp.toString().substring(0,i)}else if("UTC"!=$scope.aSensStatus.time_zone){var utcDateTimeD=new Date($scope.aSensStatus.time_stamp).toUTCString();$scope.aSensStatus.time_stamp=utcDateTimeD,$scope.aSensStatus.time_zone="UTC"}else{var Di=$scope.aSensStatus.time_stamp.toString().indexOf("GMT")+3;$scope.aSensStatus.time_stamp=$scope.aSensStatus.time_stamp.toString().substring(0,Di)}};if($scope.save=function(valid){if(valid){var updatedSensor={},updatedSenStat={};void 0!==$scope.adminChanged.event_id&&($scope.depStuffCopy[0].event_id=$scope.adminChanged.event_id),"Minutes"==$scope.IntervalType.type&&($scope.depStuffCopy[0].interval=60*$scope.depStuffCopy[0].interval),dealWithTimeStampb4Send("saving"),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INSTRUMENT.update({id:$scope.depStuffCopy[0].instrument_id},$scope.depStuffCopy[0]).$promise.then(function(response){updatedSensor=response,updatedSensor.deploymentType=$scope.depStuffCopy[0].deployment_type_id>0?$scope.depTypeList.filter(function(d){return d.deployment_type_id==$scope.depStuffCopy[0].deployment_type_id})[0].method:"",updatedSensor.housingType=$scope.depStuffCopy[0].housing_type_id>0?$scope.houseTypeList.filter(function(h){return h.housing_type_id==$scope.depStuffCopy[0].housing_type_id})[0].type_name:"",updatedSensor.sensorBrand=$scope.sensorBrandList.filter(function(s){return s.sensor_brand_id==$scope.depStuffCopy[0].sensor_brand_id})[0].brand_name,updatedSensor.sensorType=$scope.sensorTypeList.filter(function(t){return t.sensor_type_id==$scope.depStuffCopy[0].sensor_type_id})[0].sensor,INSTRUMENT_STATUS.update({id:$scope.depStuffCopy[1].instrument_status_id},$scope.depStuffCopy[1]).$promise.then(function(statResponse){for(var rt=0;rt<$scope.removeOPList.length;rt++){var idToRemove=$scope.removeOPList[rt];OP_MEASURE["delete"]({id:idToRemove}).$promise}$scope.tapeDownTable=$scope.depTapeCopy.length>0?[]:$scope.tapeDownTable;for(var at=0;at<$scope.depTapeCopy.length;at++){var DEPthisTape=$scope.depTapeCopy[at];void 0!==DEPthisTape.op_measurements_id?OP_MEASURE.update({id:DEPthisTape.op_measurements_id},DEPthisTape).$promise.then(function(tapeResponse){tapeResponse.op_name=DEPthisTape.op_name,tapeResponse.Vdatum=DEPthisTape.Vdatum,$scope.tapeDownTable.push(tapeResponse)}):(DEPthisTape.instrument_status_id=statResponse.instrument_status_id,OP_MEASURE.save(DEPthisTape).$promise.then(function(tapeResponse){tapeResponse.op_name=DEPthisTape.op_name,tapeResponse.Vdatum=DEPthisTape.Vdatum,$scope.tapeDownTable.push(tapeResponse)}))}updatedSenStat=statResponse,updatedSenStat.status="Deployed";var instrument_statusesHolder=$scope.aSensor.instrument_status;$scope.aSensor=updatedSensor,thisSensor=updatedSensor,thisSensor.instrument_status=instrument_statusesHolder,$scope.aSensStatus=updatedSenStat,$scope.aSensStatus.time_stamp=getDateTimeParts($scope.aSensStatus.time_stamp);var ind=thisSensor.instrument_status.map(function(i){return i.status_type_id}).indexOf(1);thisSensor.instrument_status[ind]=$scope.aSensStatus,$scope.depStuffCopy=[],$scope.IntervalType={type:"Seconds"},$scope.view.DEPval="detail",toastr.success("Sensor Updated")},function(errorResponse){toastr.error("error saving sensor status: "+errorResponse.statusText)})},function(errorResponse){toastr.error("error saving sensor: "+errorResponse.statusText)})}},$scope.deploy=function(){if(this.SensorForm.$valid){"Minutes"==$scope.IntervalType.type&&($scope.aSensor.interval=60*$scope.aSensor.interval),$scope.aSensor.event_id=$cookies.get("SessionEventID"),$scope.aSensor.site_id=SensorSite.site_id,dealWithTimeStampb4Send("deploy"),$scope.aSensStatus.status_type_id=1,$scope.aSensStatus.member_id=$cookies.get("mID");var createdSensor={},depSenStat={};$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.aSensor.instrument_id?INSTRUMENT.update({id:$scope.aSensor.instrument_id},$scope.aSensor).$promise.then(function(response){createdSensor=response,createdSensor.deploymentType=$scope.aSensor.deploymentType,createdSensor.housingType=response.housing_type_id>0?$scope.houseTypeList.filter(function(h){return h.housing_type_id==response.housing_type_id})[0].type_name:"",createdSensor.sensorBrand=$scope.sensorBrandList.filter(function(s){return s.sensor_brand_id==response.sensor_brand_id})[0].brand_name,createdSensor.sensorType=$scope.sensorTypeList.filter(function(t){return t.sensor_type_id==response.sensor_type_id})[0].sensor,$scope.aSensStatus.instrument_id=response.instrument_id,INSTRUMENT_STATUS.save($scope.aSensStatus).$promise.then(function(statResponse){if($scope.tapeDownTable.length>0)for(var t=0;t<$scope.tapeDownTable.length;t++){var thisTape=$scope.tapeDownTable[t];thisTape.instrument_status_id=statResponse.instrument_status_id,OP_MEASURE.save(thisTape).$promise}depSenStat=statResponse,depSenStat.status="Deployed",createdSensor.instrument_status=[depSenStat,$scope.previousStateStatus],$timeout(function(){toastr.success("Sensor deployed");var state="deployP"==$scope.whichButton?"proposedDeployed":"newDeployed",sendBack=[createdSensor,state];$uibModalInstance.close(sendBack)})})}):INSTRUMENT.save($scope.aSensor).$promise.then(function(response){createdSensor=response,createdSensor.deploymentType=null!==response.deployment_type_id&&void 0!==response.deployment_type_id?$scope.depTypeList.filter(function(d){return d.deployment_type_id==response.deployment_type_id})[0].method:"",createdSensor.housingType=null!==response.housing_type_id&&void 0!==response.housing_type_id?$scope.houseTypeList.filter(function(h){return h.housing_type_id==response.housing_type_id})[0].type_name:"",createdSensor.sensorBrand=$scope.sensorBrandList.filter(function(s){return s.sensor_brand_id==response.sensor_brand_id})[0].brand_name,createdSensor.sensorType=$scope.sensorTypeList.filter(function(t){return t.sensor_type_id==response.sensor_type_id})[0].sensor,$scope.aSensStatus.instrument_id=response.instrument_id,INSTRUMENT_STATUS.save($scope.aSensStatus).$promise.then(function(statResponse){if($scope.tapeDownTable.length>0)for(var t=0;t<$scope.tapeDownTable.length;t++){var thisTape=$scope.tapeDownTable[t];thisTape.instrument_status_id=statResponse.instrument_status_id,OP_MEASURE.save(thisTape).$promise}depSenStat=statResponse,depSenStat.status="Deployed",createdSensor.instrument_status=[depSenStat],toastr.success("Sensor deployed");var state="deployP"==$scope.whichButton?"proposedDeployed":"newDeployed",sendBack=[createdSensor,state];$uibModalInstance.close(sendBack)})})}},$scope.deleteS=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",backdrop:"static",keyboard:!1,resolve:{nameToRemove:function(){return $scope.aSensor},what:function(){return"Sensor"}}});DeleteModalInstance.result.then(function(sensorToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),INSTRUMENT["delete"]({id:sensorToRemove.instrument_id}).$promise.then(function(){$scope.DepSensorFiles=[],$scope.depSensImageFiles=[];for(var l=$scope.allSFiles.length;l--;)$scope.allSFiles[l].instrument_id==sensorToRemove.instrument_id&&$scope.allSFiles.splice(l,1);Site_Files.setAllSiteFiles($scope.allSFiles),toastr.success("Sensor Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},"empty"!=thisSensor){if($scope.aSensor=angular.copy(thisSensor),$scope.aSensStatus=angular.copy(thisSensor.instrument_status[0]),$scope.sensorDataNWIS=2==$scope.aSensor.sensor_type_id||5==$scope.aSensor.sensor_type_id||6==$scope.aSensor.sensor_type_id?!0:!1,$scope.getDepTypes(),$scope.IntervalType.type="Seconds",$scope.sensorDataNWIS){$scope.sensorNWISFiles=[];for(var ai=$scope.DepSensorFiles.length-1;ai>=0;ai--)1==$scope.DepSensorFiles[ai].is_nwis&&($scope.sensorNWISFiles.push($scope.DepSensorFiles[ai]),$scope.DepSensorFiles.splice(ai,1));var dt=getTimeZoneStamp();$scope.NWISFile={},$scope.NWISDF={}}if("Proposed"==thisSensor.instrument_status[0].status){$scope.previousStateStatus=angular.copy(thisSensor.instrument_status[0]),$scope.whichButton="deployP",$scope.aSensor.interval=0===$scope.aSensor.interval?null:$scope.aSensor.interval;var timeParts=getTimeZoneStamp();$scope.aSensStatus.time_stamp=timeParts[0],$scope.aSensStatus.time_zone=timeParts[1],$scope.aSensStatus.member_id=$cookies.get("mID"),$scope.EventName=$cookies.get("SessionEventName"),$scope.Deployer=$scope.LoggedInMember}else $scope.whichButton="edit",$scope.aSensor.interval=0===$scope.aSensor.interval?null:$scope.aSensor.interval,$scope.EventName=$scope.eventList.filter(function(e){return e.event_id==$scope.aSensor.event_id})[0].event_name,$scope.aSensStatus.time_stamp=getDateTimeParts($scope.aSensStatus.time_stamp),$scope.Deployer=null!==$scope.aSensStatus.member_id||void 0!==$scope.aSensStatus.member_id?allMembers.filter(function(m){return m.member_id==$scope.aSensStatus.member_id})[0]:{},OP_MEASURE.getInstStatOPMeasures({instrumentStatusId:$scope.aSensStatus.instrument_status_id}).$promise.then(function(response){for(var r=0;r<response.length;r++){var sensMeasures=response[r],whichOP=siteOPs.filter(function(op){return op.objective_point_id==response[r].objective_point_id})[0];sensMeasures.elevation=whichOP.elev_ft,sensMeasures.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==whichOP.vdatum_id})[0].datum_abbreviation,sensMeasures.op_name=whichOP.name,$scope.tapeDownTable.push(sensMeasures)}for(var i=0;i<$scope.OPsForTapeDown.length;i++){for(var y=0;y<response.length;y++)response[y].objective_point_id==$scope.OPsForTapeDown[i].objective_point_id?($scope.OPsForTapeDown[i].selected=!0,y=response.length):$scope.OPsForTapeDown[i].selected=!1;0===response.length&&($scope.OPsForTapeDown[i].selected=!1)}});$rootScope.stateIsLoading.showLoading=!1}else{$scope.whichButton="deploy",$scope.IntervalType.type="Seconds";var DeptimeParts=getTimeZoneStamp();$scope.aSensStatus.time_stamp=DeptimeParts[0],$scope.aSensStatus.time_zone=DeptimeParts[1],$scope.aSensStatus.member_id=$cookies.get("mID"),$scope.EventName=$cookies.get("SessionEventName"),$scope.Deployer=$scope.LoggedInMember,$rootScope.stateIsLoading.showLoading=!1}$scope.myData=[$scope.aSensStatus.sensor_elevation,$scope.aSensStatus.ws_elevation,$scope.aSensStatus.gs_elevation],$scope.wannaEditDep=function(){$scope.view.DEPval="edit",$scope.depStuffCopy=[angular.copy($scope.aSensor),angular.copy($scope.aSensStatus)],$scope.depTapeCopy=angular.copy($scope.tapeDownTable)},$scope.cancelDepEdit=function(){$scope.view.DEPval="detail",$scope.depStuffCopy=[],$scope.depTapeCopy=[];for(var i=0;i<$scope.OPsForTapeDown.length;i++){for(var y=0;y<$scope.tapeDownTable.length;y++)$scope.tapeDownTable[y].objective_point_id==$scope.OPsForTapeDown[i].objective_point_id?($scope.OPsForTapeDown[i].selected=!0,y=$scope.tapeDownTable.length):$scope.OPsForTapeDown[i].selected=!1;0===$scope.tapeDownTable.length&&($scope.OPsForTapeDown[i].selected=!1)}}}]),ModalControllers.controller("sensorRetrievalModalCtrl",["$scope","$rootScope","$timeout","$cookies","$http","$uibModalInstance","$uibModal","thisSensor","SensorSite","siteOPs","allEventList","allVDatumList","allMembers","allStatusTypes","allInstCollCond","INSTRUMENT","INSTRUMENT_STATUS","OP_MEASURE",function($scope,$rootScope,$timeout,$cookies,$http,$uibModalInstance,$uibModal,thisSensor,SensorSite,siteOPs,allEventList,allVDatumList,allMembers,allStatusTypes,allInstCollCond,INSTRUMENT,INSTRUMENT_STATUS,OP_MEASURE){$scope.aSensor=thisSensor,$scope.EventName=allEventList.filter(function(r){return r.event_id==$scope.aSensor.event_id})[0].event_name,$scope.depSensStatus=angular.copy(thisSensor.instrument_status[0]);var isDate="[object Date]"===Object.prototype.toString.call($scope.depSensStatus.time_stamp);if(isDate===!1){var y=$scope.depSensStatus.time_stamp.substr(0,4),m=$scope.depSensStatus.time_stamp.substr(5,2)-1,d=$scope.depSensStatus.time_stamp.substr(8,2),h=$scope.depSensStatus.time_stamp.substr(11,2),mi=$scope.depSensStatus.time_stamp.substr(14,2),sec=$scope.depSensStatus.time_stamp.substr(17,2);$scope.depSensStatus.time_stamp=new Date(y,m,d,h,mi,sec)}void 0!==$scope.depSensStatus.vdatum_id&&$scope.depSensStatus.vdatum_id>0&&($scope.depSensStatus.VDatum=allVDatumList.filter(function(v){return v.datum_id==$scope.depSensStatus.vdatum_id})[0].datum_abbreviation),$scope.OPsForTapeDown=siteOPs,$scope.OPsPresent=siteOPs.length>0?!0:!1,$scope.vertDatumList=allVDatumList,$scope.removeOPList=[],$scope.tapeDownTable=[],
$scope.DEPtapeDownTable=[],$scope.Deployer=allMembers.filter(function(m){return m.member_id==$scope.depSensStatus.member_id})[0],$scope.whichButton="Retrieve",$scope.statusTypeList=allStatusTypes.filter(function(s){return"Retrieved"==s.status||"Lost"==s.status}),$scope.collectCondList=allInstCollCond,$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.userRole=$cookies.get("usersRole");var getTimeZoneStamp=function(dsent){var d,sendThis=[];d=void 0!==dsent?new Date(dsent):new Date;var offset=d.toString().substring(35),zone="";switch(offset.substr(0,3)){case"Cen":zone="CST";break;case"Eas":zone="EST";break;case"Mou":zone="MST";break;case"Pac":zone="PST"}return sendThis=[d,zone]};$scope.OPchosen=function(opChosen){var opI=$scope.OPsForTapeDown.map(function(o){return o.objective_point_id}).indexOf(opChosen.objective_point_id);if(opChosen.selected)$scope.OPMeasure={},$scope.OPMeasure.op_name=opChosen.name,$scope.OPMeasure.elevation=opChosen.elev_ft,$scope.OPMeasure.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==opChosen.vdatum_id})[0].datum_abbreviation,$scope.OPMeasure.objective_point_id=opChosen.objective_point_id,$scope.tapeDownTable.push($scope.OPMeasure),$scope.aRetrieval.vdatum_id=opChosen.vdatum_id;else{var removeOPMeas=$uibModal.open({backdrop:"static",keyboard:!1,template:'<div class="modal-header"><h3 class="modal-title">Remove OP Measure</h3></div><div class="modal-body"><p>Are you sure you want to remove this OP Measurement from this sensor?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close("remove")},$scope.cancel=function(){$uibModalInstance.close("cancel")}}],size:"sm"});removeOPMeas.result.then(function(yesOrNo){if("remove"==yesOrNo){var tapeDownToRemove=$scope.tapeDownTable.filter(function(a){return a.objective_point_id==opChosen.objective_point_id})[0],tInd=$scope.tapeDownTable.map(function(o){return o.objective_point_id}).indexOf(tapeDownToRemove.objective_point_id);void 0!==tapeDownToRemove.op_measurements_id&&$scope.removeOPList.push(tapeDownToRemove.op_measurements_id),$scope.tapeDownTable.splice(tInd,1),0===$scope.tapeDownTable.length&&($scope.aRetrieval.vdatum_id=0,$scope.aRetrieval.gs_elevation="",$scope.aRetrieval.ws_elevation="",$scope.aRetrieval.sensor_elevation="")}else $scope.OPsForTapeDown[opI].selected=!0})}},OP_MEASURE.getInstStatOPMeasures({instrumentStatusId:$scope.depSensStatus.instrument_status_id}).$promise.then(function(response){for(var r=0;r<response.length;r++){var sensMeasures=response[r],whichOP=siteOPs.filter(function(op){return op.objective_point_id==response[r].objective_point_id})[0];sensMeasures.elevation=whichOP.elev_ft,sensMeasures.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==whichOP.vdatum_id})[0].datum_abbreviation,sensMeasures.op_name=whichOP.name,$scope.DEPtapeDownTable.push(sensMeasures)}});var dtparts=getTimeZoneStamp();$scope.aRetrieval={time_stamp:dtparts[0],time_zone:dtparts[1],instrument_id:$scope.aSensor.instrument_id,member_id:$cookies.get("mID")},$scope.Retriever=allMembers.filter(function(am){return am.member_id==$cookies.get("mID")})[0];var dealWithTimeStampb4Send=function(){if("UTC"!=$scope.aRetrieval.time_zone){var utcDateTime=new Date($scope.aRetrieval.time_stamp).toUTCString();$scope.aRetrieval.time_stamp=utcDateTime,$scope.aRetrieval.time_zone="UTC"}else{var i=$scope.aRetrieval.time_stamp.toString().indexOf("GMT")+3;$scope.aRetrieval.time_stamp=$scope.aRetrieval.time_stamp.toString().substring(0,i)}};$scope.cancel=function(){$rootScope.stateIsLoading.showLoading=!1,$uibModalInstance.dismiss("cancel")};var depTimeStampb4Send=function(){var returnThis,i=$scope.depSensStatus.time_stamp.toString().indexOf("GMT")+3;return returnThis=$scope.depSensStatus.time_stamp.toString().substring(0,i)};$scope.cancel=function(){$rootScope.stateIsLoading.showLoading=!1,$uibModalInstance.dismiss("cancel")},$scope.retrieveS=function(valid){if(valid){dealWithTimeStampb4Send();var depSenTS=depTimeStampb4Send(),retSenTS=angular.copy($scope.aRetrieval.time_stamp.replace(/\,/g,""));if(new Date(retSenTS)<new Date(depSenTS)){var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The retrieval date must be after the deployed date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){$scope.aRetrieval.time_stamp="",$scope.aRetrieval.time_stamp=getTimeZoneStamp()[0],$scope.aRetrieval.time_zone=getTimeZoneStamp()[1],angular.element("#retrievalDate").trigger("focus")})}else{$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var updatedSensor={},createRetSens={};INSTRUMENT.update({id:$scope.aSensor.instrument_id},$scope.aSensor).$promise.then(function(response){updatedSensor=response,updatedSensor.deploymentType=$scope.aSensor.deploymentType,updatedSensor.housingType=$scope.aSensor.housingType,updatedSensor.sensorBrand=$scope.aSensor.sensorBrand,updatedSensor.sensorType=$scope.aSensor.sensorType,updatedSensor.instCollection=$scope.collectCondList.filter(function(i){return i.id===$scope.aSensor.inst_collection_id})[0].condition,INSTRUMENT_STATUS.save($scope.aRetrieval).$promise.then(function(statResponse){if($scope.tapeDownTable.length>0)for(var t=0;t<$scope.tapeDownTable.length;t++){var thisTape=$scope.tapeDownTable[t];thisTape.instrument_status_id=statResponse.instrument_status_id,OP_MEASURE.save(thisTape).$promise}createRetSens=statResponse,createRetSens.status=2==statResponse.status_type_id?"Retrieved":"Lost",updatedSensor.instrument_status=[createRetSens,thisSensor.instrument_status[0]],$timeout(function(){toastr.success("Sensor retrieved");var state="retrieved",sendBack=[updatedSensor,state];$uibModalInstance.close(sendBack)})})})}}},$rootScope.stateIsLoading.showLoading=!1}]),ModalControllers.controller("fullSensorModalCtrl",["$scope","$rootScope","$filter","$timeout","$cookies","$http","$uibModalInstance","$uibModal","SERVER_URL","FILE_STAMP","allDepDropdowns","agencyList","Site_Files","allStatusTypes","allInstCollCond","allEvents","allDepTypes","thisSensor","SensorSite","siteOPs","allMembers","INSTRUMENT","INSTRUMENT_STATUS","DATA_FILE","FILE","SOURCE","OP_MEASURE",function($scope,$rootScope,$filter,$timeout,$cookies,$http,$uibModalInstance,$uibModal,SERVER_URL,FILE_STAMP,allDepDropdowns,agencyList,Site_Files,allStatusTypes,allInstCollCond,allEvents,allDepTypes,thisSensor,SensorSite,siteOPs,allMembers,INSTRUMENT,INSTRUMENT_STATUS,DATA_FILE,FILE,SOURCE,OP_MEASURE){$scope.serverURL=SERVER_URL,$scope.fullSenfileIsUploading=!1,$scope.sensorTypeList=allDepDropdowns[0],$scope.sensorBrandList=allDepDropdowns[1],$scope.houseTypeList=allDepDropdowns[2],$scope.fileTypeList=allDepDropdowns[3],$scope.vertDatumList=allDepDropdowns[4],$scope.allSFiles=Site_Files.getAllSiteFiles(),$scope.sensorFiles="empty"!==thisSensor?$scope.allSFiles.filter(function(sf){return sf.instrument_id==thisSensor.instrument_id}):[],$scope.sensImageFiles=$scope.sensorFiles.filter(function(hf){return 1===hf.filetype_id}),$scope.showFileForm=!1,$scope.showNWISFileForm=!1,$scope.sensorDataNWIS=!1,$scope.collectCondList=allInstCollCond,$scope.OPsPresent=siteOPs.length>0?!0:!1,$scope.DEPOPsForTapeDown=angular.copy(siteOPs),$scope.RETOPsForTapeDown=angular.copy(siteOPs),$scope.depTypeList=allDepTypes,$scope.filteredDeploymentTypes=[],$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.statusTypeList=allStatusTypes.filter(function(s){return"Retrieved"==s.status||"Lost"==s.status}),$scope.IntervalType={type:"Seconds"},$scope.view={DEPval:"detail",RETval:"detail"};var getTimeZoneStamp=function(dsent){var d,sendThis=[];d=void 0!==dsent?new Date(dsent):new Date;var offset=d.toString().substring(35),zone="";switch(offset.substr(0,3)){case"Cen":zone="CST";break;case"Eas":zone="EST";break;case"Mou":zone="MST";break;case"Pac":zone="PST"}return sendThis=[d,zone]},getDateTimeParts=function(d){var theDate,isDate="[object Date]"===Object.prototype.toString.call(d);if(isDate===!1){var y=d.substr(0,4),m=d.substr(5,2)-1,da=d.substr(8,2),h=d.substr(11,2),mi=d.substr(14,2),sec=d.substr(17,2);theDate=new Date(y,m,da,h,mi,sec)}else theDate=d;return theDate};$scope.thisSensorSite=SensorSite,$scope.userRole=$cookies.get("usersRole"),$scope.sensor=angular.copy(thisSensor),$scope.sensorDataNWIS=2==$scope.sensor.sensor_type_id||5==$scope.sensor.sensor_type_id||6==$scope.sensor.sensor_type_id?!0:!1,$scope.DeployedSensorStat=angular.copy(thisSensor.instrument_status.filter(function(inst){return"Deployed"===inst.status})[0]),$scope.DeployedSensorStat.time_stamp=getDateTimeParts($scope.DeployedSensorStat.time_stamp),$scope.Deployer=allMembers.filter(function(m){return m.member_id===$scope.DeployedSensorStat.member_id})[0],$scope.DEPremoveOPList=[],$scope.DEPtapeDownTable=[],$scope.DEPOPchosen=function(DEPopChosen){var opI=$scope.DEPOPsForTapeDown.map(function(o){return o.objective_point_id}).indexOf(DEPopChosen.objective_point_id);if(DEPopChosen.selected)$scope.DEPOPMeasure={},$scope.DEPOPMeasure.op_name=DEPopChosen.name,$scope.DEPOPMeasure.elevation=DEPopChosen.elev_ft,$scope.DEPOPMeasure.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==DEPopChosen.vdatum_id})[0].datum_abbreviation,$scope.DEPOPMeasure.objective_point_id=DEPopChosen.objective_point_id,$scope.depTapeCopy.push($scope.DEPOPMeasure),$scope.depStuffCopy[1].vdatum_id=DEPopChosen.vdatum_id;else{var DEPremoveOPMeas=$uibModal.open({backdrop:"static",keyboard:!1,template:'<div class="modal-header"><h3 class="modal-title">Remove OP Measure</h3></div><div class="modal-body"><p>Are you sure you want to remove this OP Measurement from this deployed sensor?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="DEPok()">OK</button><button class="btn btn-primary" ng-click="DEPcancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.DEPok=function(){$uibModalInstance.close("remove")},$scope.DEPcancel=function(){$uibModalInstance.close("cancel")}}],size:"sm"});DEPremoveOPMeas.result.then(function(yesOrNo){if("remove"==yesOrNo){var DEPtapeDownToRemove=$scope.depTapeCopy.filter(function(a){return a.objective_point_id==DEPopChosen.objective_point_id})[0],DEPtInd=$scope.depTapeCopy.map(function(o){return o.objective_point_id}).indexOf(DEPtapeDownToRemove.objective_point_id);void 0!==DEPtapeDownToRemove.op_measurements_id&&$scope.DEPremoveOPList.push(DEPtapeDownToRemove.op_measurements_id),$scope.depTapeCopy.splice(DEPtInd,1),0===$scope.depTapeCopy.length&&($scope.depStuffCopy[1].vdatum_id=0,$scope.depStuffCopy[1].gs_elevation="",$scope.depStuffCopy[1].ws_elevation="",$scope.depStuffCopy[1].sensor_elevation="")}else $scope.DEPOPsForTapeDown[opI].selected=!0})}},$scope.OPsPresent&&OP_MEASURE.getInstStatOPMeasures({instrumentStatusId:$scope.DeployedSensorStat.instrument_status_id}).$promise.then(function(DEPresponse){for(var r=0;r<DEPresponse.length;r++){var DEPsensMeasures=DEPresponse[r],whichOP=siteOPs.filter(function(op){return op.objective_point_id==DEPresponse[r].objective_point_id})[0];DEPsensMeasures.elevation=whichOP.elev_ft,DEPsensMeasures.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==whichOP.vdatum_id})[0].datum_abbreviation,DEPsensMeasures.op_name=$scope.DEPOPsForTapeDown.filter(function(op){return op.objective_point_id==DEPresponse[r].objective_point_id})[0].name,$scope.DEPtapeDownTable.push(DEPsensMeasures)}for(var i=0;i<$scope.DEPOPsForTapeDown.length;i++){for(var y=0;y<DEPresponse.length;y++)DEPresponse[y].objective_point_id==$scope.DEPOPsForTapeDown[i].objective_point_id?($scope.DEPOPsForTapeDown[i].selected=!0,y=DEPresponse.length):$scope.DEPOPsForTapeDown[i].selected=!1;0===DEPresponse.length&&($scope.DEPOPsForTapeDown[i].selected=!1)}}),$scope.RetrievedSensorStat=angular.copy(thisSensor.instrument_status.filter(function(inst){return"Retrieved"===inst.status})[0]),void 0===$scope.RetrievedSensorStat?($scope.RetrievedSensorStat=angular.copy(thisSensor.instrument_status.filter(function(inst){return"Lost"===inst.status})[0]),$scope.mostRecentStatus="Lost"):$scope.mostRecentStatus="Retrieved",void 0!==$scope.RetrievedSensorStat.vdatum_id&&$scope.RetrievedSensorStat.vdatum_id>0&&($scope.RetrievedSensorStat.vdatumName=$scope.vertDatumList.filter(function(vd){return vd.datum_id==$scope.RetrievedSensorStat.vdatum_id})[0].datum_abbreviation),$scope.RetrievedSensorStat.time_stamp=getDateTimeParts($scope.RetrievedSensorStat.time_stamp),$scope.Retriever=allMembers.filter(function(m){return m.member_id===$scope.RetrievedSensorStat.member_id})[0],$scope.RETremoveOPList=[],$scope.RETtapeDownTable=[],$scope.RETOPchosen=function(RETopChosen){var opI=$scope.RETOPsForTapeDown.map(function(o){return o.objective_point_id}).indexOf(RETopChosen.objective_point_id);if(RETopChosen.selected)$scope.RETOPMeasure={},$scope.RETOPMeasure.op_name=RETopChosen.name,$scope.RETOPMeasure.elevation=RETopChosen.elev_ft,$scope.RETOPMeasure.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==RETopChosen.vdatum_id})[0].datum_abbreviation,$scope.RETOPMeasure.objective_point_id=RETopChosen.objective_point_id,$scope.retTapeCopy.push($scope.RETOPMeasure),$scope.retStuffCopy[1].vdatum_id=RETopChosen.vdatum_id;else{var RETremoveOPMeas=$uibModal.open({backdrop:"static",keyboard:!1,template:'<div class="modal-header"><h3 class="modal-title">Remove OP Measure</h3></div><div class="modal-body"><p>Are you sure you want to remove this OP Measurement from this retrieved sensor?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="RETok()">OK</button><button class="btn btn-primary" ng-click="RETcancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.RETok=function(){$uibModalInstance.close("remove")},$scope.RETcancel=function(){$uibModalInstance.close("cancel")}}],size:"sm"});RETremoveOPMeas.result.then(function(yesOrNo){if("remove"==yesOrNo){var RETtapeDownToRemove=$scope.retTapeCopy.filter(function(a){return a.objective_point_id==RETopChosen.objective_point_id})[0],RETtInd=$scope.retTapeCopy.map(function(o){return o.objective_point_id}).indexOf(RETtapeDownToRemove.objective_point_id);$scope.RETremoveOPList.push(RETtapeDownToRemove.op_measurements_id),$scope.retTapeCopy.splice(RETtInd,1),0===$scope.retTapeCopy.length&&($scope.retStuffCopy[1].vdatum_id=0,$scope.retStuffCopy[1].gs_elevation="",$scope.retStuffCopy[1].ws_elevation="",$scope.retStuffCopy[1].sensor_elevation="")}else $scope.RETOPsForTapeDown[opI].selected=!0})}},$scope.OPsPresent&&OP_MEASURE.getInstStatOPMeasures({instrumentStatusId:$scope.RetrievedSensorStat.instrument_status_id}).$promise.then(function(RETresponse){for(var r=0;r<RETresponse.length;r++){var RETsensMeasures=RETresponse[r],whichOP=siteOPs.filter(function(op){return op.objective_point_id==RETresponse[r].objective_point_id})[0];RETsensMeasures.elevation=whichOP.elev_ft,RETsensMeasures.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==whichOP.vdatum_id})[0].datum_abbreviation,RETsensMeasures.op_name=$scope.RETOPsForTapeDown.filter(function(op){return op.objective_point_id==RETresponse[r].objective_point_id})[0].name,$scope.RETtapeDownTable.push(RETsensMeasures)}for(var i=0;i<$scope.RETOPsForTapeDown.length;i++){for(var y=0;y<RETresponse.length;y++)RETresponse[y].objective_point_id==$scope.RETOPsForTapeDown[i].objective_point_id?($scope.RETOPsForTapeDown[i].selected=!0,y=RETresponse.length):$scope.RETOPsForTapeDown[i].selected=!1;0===RETresponse.length&&($scope.RETOPsForTapeDown[i].selected=!1)}}),$scope.EventName=allEvents.filter(function(e){return e.event_id===$scope.sensor.event_id})[0].event_name,$scope.s={depOpen:!1,retOpen:!0,sFileOpen:!1,NWISFileOpen:!1},$scope.dateOptions={startingDay:1,showWeeks:!1},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.getDepTypes=function(sensType){$scope.filteredDeploymentTypes=[];var matchingSensDeplist=$scope.sensorTypeList.filter(function(sd){return sd.sensor_type_id==sensType.sensor_type_id})[0];$scope.filteredDeploymentTypes=matchingSensDeplist.deploymenttypes},$scope.getDepTypes($scope.sensor),$scope.cancel=function(){$timeout(function(){var sendBack=[thisSensor];$uibModalInstance.close(sendBack)})};var dealWithTimeStampb4Send=function(w){var utcDateTime,i;"deployed"===w?"UTC"!=$scope.depStuffCopy[1].time_zone?(utcDateTime=new Date($scope.depStuffCopy[1].time_stamp).toUTCString(),$scope.depStuffCopy[1].time_stamp=utcDateTime,$scope.depStuffCopy[1].time_zone="UTC"):(i=$scope.depStuffCopy[1].time_stamp.toString().indexOf("GMT")+3,$scope.depStuffCopy[1].time_stamp=$scope.depStuffCopy[1].time_stamp.toString().substring(0,i)):"UTC"!=$scope.retStuffCopy[1].time_zone?(utcDateTime=new Date($scope.retStuffCopy[1].time_stamp).toUTCString(),$scope.retStuffCopy[1].time_stamp=utcDateTime,$scope.retStuffCopy[1].time_zone="UTC"):(i=$scope.retStuffCopy[1].time_stamp.toString().indexOf("GMT")+3,$scope.retStuffCopy[1].time_stamp=$scope.retStuffCopy[1].time_stamp.toString().substring(0,i))};if($scope.wannaEditDep=function(){$scope.view.DEPval="edit",$scope.depStuffCopy=[angular.copy($scope.sensor),angular.copy($scope.DeployedSensorStat)],$scope.depTapeCopy=angular.copy($scope.DEPtapeDownTable)},$scope.saveDeployed=function(valid){if(valid){var updatedSensor={},updatedSenStat={};"Minutes"==$scope.IntervalType.type&&($scope.depStuffCopy[0].interval=60*$scope.depStuffCopy[0].interval),dealWithTimeStampb4Send("deployed"),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INSTRUMENT.update({id:$scope.depStuffCopy[0].instrument_id},$scope.depStuffCopy[0]).$promise.then(function(response){updatedSensor=response,updatedSensor.deploymentType=$scope.depStuffCopy[0].deployment_type_id>0?$scope.depTypeList.filter(function(d){return d.deployment_type_id===$scope.depStuffCopy[0].deployment_type_id})[0].method:"",updatedSensor.housingType=$scope.depStuffCopy[0].housing_type_id>0?$scope.houseTypeList.filter(function(h){return h.housing_type_id===$scope.depStuffCopy[0].housing_type_id})[0].type_name:"",updatedSensor.sensorBrand=$scope.sensorBrandList.filter(function(s){return s.sensor_brand_id===$scope.depStuffCopy[0].sensor_brand_id})[0].brand_name,updatedSensor.sensorType=$scope.sensorTypeList.filter(function(t){return t.sensor_type_id===$scope.depStuffCopy[0].sensor_type_id})[0].sensor,updatedSensor.instCollection=$scope.collectCondList.filter(function(i){return i.id===$scope.depStuffCopy[0].inst_collection_id})[0].condition,INSTRUMENT_STATUS.update({id:$scope.depStuffCopy[1].instrument_status_id},$scope.depStuffCopy[1]).$promise.then(function(statResponse){for(var rt=0;rt<$scope.DEPremoveOPList.length;rt++){var DEPidToRemove=$scope.DEPremoveOPList[rt];OP_MEASURE["delete"]({id:DEPidToRemove}).$promise}$scope.DEPtapeDownTable=$scope.depTapeCopy.length>0?[]:$scope.DEPtapeDownTable;for(var at=0;at<$scope.depTapeCopy.length;at++){var DEPthisTape=$scope.depTapeCopy[at];void 0!==DEPthisTape.op_measurements_id?OP_MEASURE.update({id:DEPthisTape.op_measurements_id},DEPthisTape).$promise.then(function(tapeResponse){tapeResponse.op_name=DEPthisTape.op_name,tapeResponse.Vdatum=DEPthisTape.Vdatum,$scope.DEPtapeDownTable.push(tapeResponse)}):(DEPthisTape.instrument_status_id=statResponse.instrument_status_id,OP_MEASURE.save(DEPthisTape).$promise.then(function(tapeResponse){tapeResponse.op_name=DEPthisTape.op_name,tapeResponse.Vdatum=DEPthisTape.Vdatum,$scope.DEPtapeDownTable.push(tapeResponse)}))}updatedSenStat=statResponse,updatedSenStat.status="Deployed",$scope.sensor=updatedSensor;var allStatusHolder=thisSensor.instrument_status;thisSensor=updatedSensor,$scope.DeployedSensorStat=updatedSenStat,$scope.DeployedSensorStat.time_stamp=getDateTimeParts($scope.DeployedSensorStat.time_stamp),thisSensor.instrument_status=allStatusHolder;var ind=thisSensor.instrument_status.map(function(i){return i.status_type_id}).indexOf(1);thisSensor.instrument_status[ind]=$scope.DeployedSensorStat,$scope.sensor.instrument_status=thisSensor.instrument_status,$scope.depStuffCopy=[],$scope.depTapeCopy=[],$scope.IntervalType={type:"Seconds"},$scope.view.DEPval="detail",toastr.success("Sensor Updated")},function(errorResponse){toastr.error("error saving sensor status: "+errorResponse.statusText)})},function(errorResponse){toastr.error("error saving sensor: "+errorResponse.statusText)})}},$scope.cancelDepEdit=function(){$scope.view.DEPval="detail",$scope.depStuffCopy=[],$scope.depTapeCopy=[];for(var i=0;i<$scope.DEPOPsForTapeDown.length;i++){for(var y=0;y<$scope.DEPtapeDownTable.length;y++)$scope.DEPtapeDownTable[y].objective_point_id==$scope.DEPOPsForTapeDown[i].objective_point_id?($scope.DEPOPsForTapeDown[i].selected=!0,y=$scope.DEPtapeDownTable.length):$scope.DEPOPsForTapeDown[i].selected=!1;0===$scope.DEPtapeDownTable.length&&($scope.DEPOPsForTapeDown[i].selected=!1)}},$scope.wannaEditRet=function(){$scope.view.RETval="edit",$scope.retStuffCopy=[angular.copy($scope.sensor),angular.copy($scope.RetrievedSensorStat)],$scope.retTapeCopy=angular.copy($scope.RETtapeDownTable)},$scope.saveRetrieved=function(valid){if(valid){var updatedRetSensor={};dealWithTimeStampb4Send("retrieved"),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INSTRUMENT.update({id:$scope.retStuffCopy[0].instrument_id},$scope.retStuffCopy[0]).$promise.then(function(response){updatedRetSensor=response,updatedRetSensor.deploymentType=$scope.retStuffCopy[0].deployment_type_id>0?$scope.depTypeList.filter(function(d){return d.deployment_type_id===$scope.retStuffCopy[0].deployment_type_id})[0].method:"",updatedRetSensor.housingType=$scope.retStuffCopy[0].housing_type_id>0?$scope.houseTypeList.filter(function(h){return h.housing_type_id===$scope.retStuffCopy[0].housing_type_id})[0].type_name:"",updatedRetSensor.sensorBrand=$scope.sensorBrandList.filter(function(s){return s.sensor_brand_id===$scope.retStuffCopy[0].sensor_brand_id})[0].brand_name,updatedRetSensor.sensorType=$scope.sensorTypeList.filter(function(t){return t.sensor_type_id===$scope.retStuffCopy[0].sensor_type_id})[0].sensor,updatedRetSensor.instCollection=$scope.collectCondList.filter(function(i){return i.id===$scope.retStuffCopy[0].inst_collection_id})[0].condition,$scope.sensor=updatedRetSensor;var statsHolder=thisSensor.instrument_status;thisSensor=updatedRetSensor,thisSensor.instrument_status=statsHolder,INSTRUMENT_STATUS.update({id:$scope.retStuffCopy[1].instrument_status_id},$scope.retStuffCopy[1]).$promise.then(function(statResponse){$scope.mostRecentStatus=2==statResponse.status_type_id?"Retrieved":"Lost",$scope.RetrievedSensorStat=statResponse,$scope.RetrievedSensorStat.status=2==statResponse.status_type_id?"Retrieved":"Lost",$scope.RetrievedSensorStat.time_stamp=getDateTimeParts($scope.RetrievedSensorStat.time_stamp),thisSensor.instrument_status[0]=$scope.RetrievedSensorStat;for(var rt=0;rt<$scope.RETremoveOPList.length;rt++){var RETidToRemove=$scope.RETremoveOPList[rt];OP_MEASURE["delete"]({id:RETidToRemove}).$promise}$scope.RETtapeDownTable=$scope.retTapeCopy.length>0?[]:$scope.RETtapeDownTable;for(var at=0;at<$scope.retTapeCopy.length;at++){var RETthisTape=$scope.retTapeCopy[at];void 0!==RETthisTape.op_measurements_id?OP_MEASURE.update({id:RETthisTape.op_measurements_id},RETthisTape).$promise.then(function(tapeResponse){tapeResponse.op_name=RETthisTape.op_name,tapeResponse.Vdatum=RETthisTape.Vdatum,$scope.RETtapeDownTable.push(tapeResponse)}):(RETthisTape.instrument_status_id=statResponse.instrument_status_id,OP_MEASURE.save(RETthisTape).$promise.then(function(tapeResponse){tapeResponse.op_name=RETthisTape.op_name,tapeResponse.Vdatum=RETthisTape.Vdatum,$scope.RETtapeDownTable.push(tapeResponse)}))}$scope.retStuffCopy=[],$scope.retTapeCopy=[],$scope.view.RETval="detail",toastr.success("Sensor updated")},function(errorResponse){toastr.error("error saving sensor status: "+errorResponse.statusText)})},function(errorResponse){toastr.error("error saving sensor: "+errorResponse.statusText)})}},$scope.cancelRetEdit=function(){$scope.view.RETval="detail",$scope.retStuffCopy=[],$scope.retTapeCopy=[];for(var i=0;i<$scope.RETOPsForTapeDown.length;i++){for(var y=0;y<$scope.RETtapeDownTable.length;y++)$scope.RETtapeDownTable[y].objective_point_id==$scope.RETOPsForTapeDown[i].objective_point_id?($scope.RETOPsForTapeDown[i].selected=!0,y=$scope.RETtapeDownTable.length):$scope.RETOPsForTapeDown[i].selected=!1;0===$scope.RETtapeDownTable.length&&($scope.RETOPsForTapeDown[i].selected=!1)}},$scope.deleteS=function(){var DeleteModalInstance=$uibModal.open({backdrop:"static",keyboard:!1,templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.sensor},what:function(){return"Sensor"}}});DeleteModalInstance.result.then(function(sensorToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),INSTRUMENT["delete"]({id:sensorToRemove.instrument_id}).$promise.then(function(){$scope.sensorFiles=[],$scope.sensImageFiles=[];for(var l=$scope.allSFiles.length;l--;)$scope.allSFiles[l].instrument_id==sensorToRemove.instrument_id&&$scope.allSFiles.splice(l,1);Site_Files.setAllSiteFiles($scope.allSFiles),toastr.success("Sensor Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.stamp=FILE_STAMP.getStamp(),$scope.fileItemExists=!0,$scope.saveFileUpload=function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.sFileIsUploading=!0;var fileParts={FileEntity:{file_id:$scope.aFile.file_id,name:$scope.aFile.name,description:$scope.aFile.description,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,file_date:$scope.aFile.file_date,hwm_id:$scope.aFile.hwm_id,site_id:$scope.aFile.site_id,filetype_id:$scope.aFile.filetype_id,source_id:$scope.aFile.source_id,path:$scope.aFile.path,data_file_id:$scope.aFile.data_file_id,instrument_id:$scope.aFile.instrument_id,photo_date:$scope.aFile.photo_date,is_nwis:$scope.aFile.is_nwis,objective_point_id:$scope.aFile.objective_point_id},File:void 0!==$scope.aFile.File1?$scope.aFile.File1:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),FILE_STAMP.setStamp(),$scope.stamp=FILE_STAMP.getStamp(),$scope.isPhoto=$scope.aFile.File1.type.indexOf("image")>-1?!0:!1,$scope.aFile.name=fresponse.name,$scope.aFile.path=fresponse.path,void 0!==$scope.aFile.File1&&($scope.aFile.File=$scope.aFile.File1,$scope.aFile.File1=void 0),fresponse.fileBelongsTo=2==$scope.aFile.filetype_id?"DataFile File":"Sensor File",1===fresponse.filetype_id&&($scope.sensImageFiles.splice($scope.existIMGFileIndex,1),$scope.sensImageFiles.push(fresponse)),$scope.sensorFiles[$scope.existFileIndex]=fresponse,$scope.allSFiles[$scope.allSFileIndex]=fresponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.sFileIsUploading=!1,$scope.fileItemExists=!0},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})},$scope.showFile=function(file){if($scope.fileTypes=$scope.fileTypeList,$scope.agencies=agencyList,$scope.existFileIndex=-1,$scope.existIMGFileIndex=-1,$scope.allSFileIndex=-1,$scope.aFile={},$scope.aSource={},$scope.datafile={},0!==file){if($scope.existFileIndex=$scope.sensorFiles.indexOf(file),$scope.allSFileIndex=$scope.allSFiles.indexOf(file),$scope.existIMGFileIndex=$scope.sensImageFiles.length>0?$scope.sensImageFiles.indexOf(file):-1,$scope.aFile=angular.copy(file),FILE.getFileItem({id:$scope.aFile.file_id}).$promise.then(function(response){$scope.fileItemExists=response.Length>0?!0:!1}),$scope.aFile.fileType=$scope.fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,void 0!==$scope.aFile.name){var fI=$scope.aFile.name.lastIndexOf("."),fileExt=$scope.aFile.name.substring(fI+1);$scope.isPhoto=fileExt.match(/(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)?!0:!1}$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),void 0!==file.source_id&&SOURCE.query({id:file.source_id}).$promise.then(function(s){$scope.aSource=s,$scope.aSource.FULLname=$scope.aSource.source_name,1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}),void 0!==file.data_file_id&&($scope.ApprovalInfo={},DATA_FILE.query({id:file.data_file_id}).$promise.then(function(df){$scope.datafile=df,$scope.processor=allMembers.filter(function(m){return m.member_id==$scope.datafile.processor_id})[0],$scope.datafile.collect_date=new Date($scope.datafile.collect_date),$scope.datafile.good_start=getDateTimeParts($scope.datafile.good_start),$scope.datafile.good_end=getDateTimeParts($scope.datafile.good_end),void 0!==df.approval_id&&null!==df.approval_id&&df.approval_id>=1&&DATA_FILE.getDFApproval({id:df.data_file_id},function(approvalResponse){$scope.ApprovalInfo.approvalDate=new Date(approvalResponse.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==approvalResponse.member_id})[0]},function(errorResponse){toastr.error("Error getting data file approval information")})}))}else{$scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname,$scope.processor=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0];var dt=getTimeZoneStamp();$scope.datafile.collect_date=dt[0],$scope.datafile.time_zone=dt[1],$scope.datafile.good_start=new Date,$scope.datafile.good_end=new Date}$scope.showFileForm=!0,$scope.updateAgencyForCaption=function(){1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}},$scope.createFile=function(valid){if(2==$scope.aFile.filetype_id){
var s=$scope.datafile.good_start,e=$scope.datafile.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}}if(valid)if($scope.fullSenfileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",2==$scope.aFile.filetype_id){if("UTC"!=$scope.datafile.time_zone){var utcStartDateTime=new Date($scope.datafile.good_start).toUTCString(),utcEndDateTime=new Date($scope.datafile.good_end).toUTCString();$scope.datafile.good_start=utcStartDateTime,$scope.datafile.good_end=utcEndDateTime,$scope.datafile.time_zone="UTC"}else{var si=$scope.datafile.good_start.toString().indexOf("GMT")+3,ei=$scope.datafile.good_end.toString().indexOf("GMT")+3;$scope.datafile.good_start=$scope.datafile.good_start.toString().substring(0,si),$scope.datafile.good_end=$scope.datafile.good_end.toString().substring(0,ei)}$scope.datafile.instrument_id=thisSensor.instrument_id,$scope.datafile.processor_id=$cookies.get("mID"),DATA_FILE.save($scope.datafile).$promise.then(function(dfResonse){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,description:$scope.aFile.description,site_id:$scope.thisSensorSite.site_id,data_file_id:dfResonse.data_file_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,instrument_id:thisSensor.instrument_id},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="DataFile File",$scope.sensorFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),1===fresponse.filetype_id&&$scope.sensImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.fullSenfileIsUploading=!1},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving data file: "+errorResponse.statusText)})}else{var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,photo_date:$scope.aFile.photo_date,description:$scope.aFile.description,site_id:$scope.thisSensorSite.site_id,source_id:response.source_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,instrument_id:thisSensor.instrument_id},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Sensor File",$scope.sensorFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),1===fresponse.filetype_id&&$scope.sensImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.fullSenfileIsUploading=!1},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving source info: "+errorResponse.statusText)})}},$scope.saveFile=function(valid){if(2==$scope.aFile.filetype_id){var s=$scope.datafile.good_start,e=$scope.datafile.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}}if(valid){$scope.fullSenfileIsUploading=!0;{$scope.aFile.fileBelongsTo}if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.datafile.data_file_id){if("UTC"!=$scope.datafile.time_zone){var utcStartDateTime=new Date($scope.datafile.good_start).toUTCString(),utcEndDateTime=new Date($scope.datafile.good_end).toUTCString();$scope.datafile.good_start=utcStartDateTime,$scope.datafile.good_end=utcEndDateTime,$scope.datafile.time_zone="UTC"}else{var si=$scope.datafile.good_start.toString().indexOf("GMT")+3,ei=$scope.datafile.good_end.toString().indexOf("GMT")+3;$scope.datafile.good_start=$scope.datafile.good_start.toString().substring(0,si),$scope.datafile.good_end=$scope.datafile.good_end.toString().substring(0,ei)}DATA_FILE.update({id:$scope.datafile.data_file_id},$scope.datafile).$promise.then(function(){FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="DataFile File",$scope.sensorFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.fullSenfileIsUploading=!1},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving data file: "+errorResponse.statusText)})}else{var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){$scope.aFile.source_id=response.source_id,FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="Sensor File",$scope.sensorFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.fullSenfileIsUploading=!1},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving source: "+errorResponse.statusText)})}}},$scope.deleteFile=function(){var DeleteModalInstance=$uibModal.open({backdrop:"static",keyboard:!1,templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.sensorFiles.splice($scope.existFileIndex,1),$scope.allSFiles.splice($scope.allSFileIndex,1),$scope.sensImageFiles.splice($scope.existIMGFileIndex,1),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelFile=function(){$scope.aFile={},$scope.aSource={},$scope.datafile={},$scope.showFileForm=!1},$scope.approveDF=function(){var thisDF=$scope.datafile,approveModal=$uibModal.open({template:"<div class='modal-header'><h3 class='modal-title'>Approve Data File</h3></div><div class='modal-body'><p>Are you ready to approve this Data File?</p></div><div class='modal-footer'><button class='btn btn-primary' ng-click='approveIt()'>Approve</button><button class='btn btn-warning' ng-click='cancel()'>Cancel</button></div>",controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.approveIt=function(){$uibModalInstance.close(thisDF)}}],size:"sm"});approveModal.result.then(function(df){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),DATA_FILE.approveDF({id:df.data_file_id}).$promise.then(function(approvalResponse){df.approval_id=approvalResponse.approval_id,$scope.datafile=df,toastr.success("Data File Approved"),$scope.ApprovalInfo.approvalDate=new Date(approvalResponse.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==approvalResponse.member_id})[0]},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.unApproveDF=function(){var thisDF=$scope.datafile,unapproveModal=$uibModal.open({template:"<div class='modal-header'><h3 class='modal-title'>Remove Approval</h3></div><div class='modal-body'><p>Are you sure you wan to unapprove this Data File?</p></div><div class='modal-footer'><button class='btn btn-primary' ng-click='unApproveIt()'>Unapprove</button><button class='btn btn-warning' ng-click='cancel()'>Cancel</button></div>",controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.unApproveIt=function(){$uibModalInstance.close(thisDF)}}],size:"sm"});unapproveModal.result.then(function(df){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),DATA_FILE.unApproveDF({id:df.data_file_id}).$promise.then(function(){df.approval_id=null,$scope.datafile=df,toastr.success("Data File Unapproved"),$scope.ApprovalInfo={}},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.sensorDataNWIS){$scope.sensorNWISFiles=[];for(var ai=$scope.sensorFiles.length-1;ai>=0;ai--)1==$scope.sensorFiles[ai].is_nwis&&($scope.sensorNWISFiles.push($scope.sensorFiles[ai]),$scope.sensorFiles.splice(ai,1));var dt=getTimeZoneStamp();$scope.NWISFile={},$scope.NWISDF={}}$scope.showNWISFile=function(f){$scope.existFileIndex=-1,$scope.allSFileIndex=-1,0!==f?($scope.existFileIndex=$scope.sensorNWISFiles.indexOf(f),$scope.allSFileIndex=$scope.allSFiles.indexOf(f),$scope.NWISFile=angular.copy(f),$scope.NWISFile.file_date=new Date($scope.NWISFile.file_date),$scope.NWISFile.FileType="Data",DATA_FILE.query({id:f.data_file_id}).$promise.then(function(df){$scope.NWISDF=df,$scope.nwisProcessor=allMembers.filter(function(m){return m.member_id==$scope.NWISDF.processor_id})[0],$scope.NWISDF.collect_date=new Date($scope.NWISDF.collect_date),$scope.NWISDF.good_start=getDateTimeParts($scope.NWISDF.good_start),$scope.NWISDF.good_end=getDateTimeParts($scope.NWISDF.good_end)})):($scope.NWISFile={file_date:new Date,filetype_id:2,name:"http://waterdata.usgs.gov/nwis/uv?site_no="+$scope.thisSensorSite.usgs_sid,path:"<link>",FileType:"Data",site_id:$scope.sensor.site_id,data_file_id:0,instrument_id:$scope.sensor.instrument_id,is_nwis:1},$scope.NWISDF={processor_id:$cookies.get("mID"),instrument_id:$scope.sensor.instrument_id,collect_date:dt[0],time_zone:dt[1],good_start:new Date,good_end:new Date},$scope.nwisProcessor=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0]),$scope.showNWISFileForm=!0};var postApprovalForNWISfile=function(DFid){DATA_FILE.approveNWISDF({id:DFid}).$promise.then(function(approvalResponse){$scope.NWISFile.approval_id=approvalResponse.approval_id})};$scope.createNWISFile=function(valid){var s=$scope.NWISDF.good_start,e=$scope.NWISDF.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}if(valid){if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json","UTC"!=$scope.NWISDF.time_zone){var utcStartDateTime=new Date($scope.NWISDF.good_start).toUTCString(),utcEndDateTime=new Date($scope.NWISDF.good_end).toUTCString();$scope.NWISDF.good_start=utcStartDateTime,$scope.NWISDF.good_end=utcEndDateTime,$scope.NWISDF.time_zone="UTC"}else{var si=$scope.NWISDF.good_start.toString().indexOf("GMT")+3,ei=$scope.NWISDF.good_end.toString().indexOf("GMT")+3;$scope.NWISDF.good_start=$scope.NWISDF.good_start.toString().substring(0,si),$scope.NWISDF.good_end=$scope.NWISDF.good_end.toString().substring(0,ei)}DATA_FILE.save($scope.NWISDF).$promise.then(function(NdfResonse){$scope.NWISFile.data_file_id=NdfResonse.data_file_id,postApprovalForNWISfile(NdfResonse.data_file_id),FILE.save($scope.NWISFile).$promise.then(function(Fresponse){toastr.success("File Data saved"),Fresponse.fileBelongsTo="DataFile File",$scope.sensorNWISFiles.push(Fresponse),$scope.allSFiles.push(Fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showNWISFileForm=!1})})}},$scope.saveNWISFile=function(valid){var s=$scope.NWISDF.good_start,e=$scope.NWISDF.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}if(valid){if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json","UTC"!=$scope.NWISDF.time_zone){var utcStartDateTime=new Date($scope.NWISDF.good_start).toUTCString(),utcEndDateTime=new Date($scope.NWISDF.good_end).toUTCString();$scope.NWISDF.good_start=utcStartDateTime,$scope.NWISDF.good_end=utcEndDateTime,$scope.NWISDF.time_zone="UTC"}else{var si=$scope.NWISDF.good_start.toString().indexOf("GMT")+3,ei=$scope.NWISDF.good_end.toString().indexOf("GMT")+3;$scope.NWISDF.good_start=$scope.NWISDF.good_start.toString().substring(0,si),$scope.NWISDF.good_end=$scope.NWISDF.good_end.toString().substring(0,ei)}DATA_FILE.update({id:$scope.NWISDF.data_file_id},$scope.NWISDF).$promise.then(function(){FILE.update({id:$scope.NWISFile.file_id},$scope.NWISFile).$promise.then(function(fileResponse){toastr.success("File Data Updated"),fileResponse.fileBelongsTo="DataFile File",$scope.sensorNWISFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showNWISFileForm=!1})})}},$scope.deleteNWISFile=function(){var DeleteModalInstance=$uibModal.open({backdrop:"static",keyboard:!1,templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.NWISFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.sensorNWISFiles.splice($scope.existFileIndex,1),$scope.allSFiles.splice($scope.allSFileIndex,1),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showNWISFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelNWISFile=function(){$scope.NWISFile={},$scope.NWISDF={},$scope.showNWISFileForm=!1},$rootScope.stateIsLoading.showLoading=!1}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("sensorCtrl",["$scope","$rootScope","$q","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","thisSite","Instrument_Service","thisSiteSensors","allSensorBrands","allAgencies","allVertDatums","allDeployTypes","allSensorTypes","allHousingTypes","allEvents","allFileTypes","INSTRUMENT","INSTRUMENT_STATUS","SITE","MEMBER","DEPLOYMENT_TYPE","STATUS_TYPE","INST_COLL_CONDITION",function($scope,$rootScope,$q,$cookies,$location,$state,$http,$uibModal,$filter,$timeout,thisSite,Instrument_Service,thisSiteSensors,allSensorBrands,allAgencies,allVertDatums,allDeployTypes,allSensorTypes,allHousingTypes,allEvents,allFileTypes,INSTRUMENT,INSTRUMENT_STATUS,SITE,MEMBER,DEPLOYMENT_TYPE,STATUS_TYPE,INST_COLL_CONDITION){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$scope.sensorCount={total:thisSiteSensors.length},$scope.deployTypeList=angular.copy(allDeployTypes);for(var tempDepTypeID=0,d=0;d<$scope.deployTypeList.length;d++)"Temperature"===$scope.deployTypeList[d].method&&(tempDepTypeID=$scope.deployTypeList[d].deployment_type_id,$scope.deployTypeList[d].method="Temperature (Met sensor)");$scope.deployTypeList.push({deployment_type_id:tempDepTypeID,method:"Temperature (Pressure Transducer)"}),$scope.sensDepTypes=allSensorTypes,$scope.showProposed=!1;for(var s=0;s<thisSiteSensors.length;s++){var correctOrderSS=[],sensorStatuses=thisSiteSensors[s].instrument_status;if(sensorStatuses.length>1){var proposedStat=sensorStatuses.filter(function(ps){return"Proposed"==ps.status})[0],deployedStat=sensorStatuses.filter(function(ps){return"Deployed"==ps.status})[0],retLostStat=sensorStatuses.filter(function(ps){return"Retrieved"==ps.status||"Lost"==ps.status})[0];retLostStat&&correctOrderSS.push(retLostStat),deployedStat&&correctOrderSS.push(deployedStat),proposedStat&&correctOrderSS.push(proposedStat)}else correctOrderSS.push(sensorStatuses[0]);thisSiteSensors[s].instrument_status=[],thisSiteSensors[s].instrument_status=correctOrderSS}$scope.SiteSensors=thisSiteSensors,Instrument_Service.setAllSiteSensors($scope.SiteSensors);var SensFileTypes=allFileTypes.filter(function(sft){return"Photo"===sft.filetype||"Data"===sft.filetype||"Historic Citation"===sft.filetype||"Field Sheets"===sft.filetype||"Level Notes"===sft.filetype||"Other"===sft.filetype||"Link"===sft.filetype||"Sketch"===sft.filetype});$scope.showHideProposed=function(){$scope.showProposed=!$scope.showProposed},$scope.AddProposed=function(){for(var Time_STAMP=new Date,dt=0;dt<$scope.deployTypeList.length;dt++)if($scope.deployTypeList[dt].selected===!0){var proposedToAdd={},propStatToAdd={};if("Temp"==$scope.deployTypeList[dt].method.substring(0,4))proposedToAdd={deployment_type_id:$scope.deployTypeList[dt].deployment_type_id,site_id:thisSite.site_id,sensor_type_id:"Temperature (Pressure Transducer)"==$scope.deployTypeList[dt].method?1:2};else{var sID=0;angular.forEach($scope.sensDepTypes,function(sdt){for(var x=0;x<sdt.deploymenttypes.length;x++)sdt.deploymenttypes[x].deployment_type_id==$scope.deployTypeList[dt].deployment_type_id&&(sID=sdt.sensor_type_id)}),proposedToAdd={deployment_type_id:$scope.deployTypeList[dt].deployment_type_id,site_id:thisSite.site_id,sensor_type_id:sID}}$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INSTRUMENT.save(proposedToAdd).$promise.then(function(response){var createdPropSensor={deployment_type_id:response.deployment_type_id,site_id:response.site_id,sensor_type_id:response.sensor_type_id,instrument_id:response.instrument_id,deploymentType:$scope.deployTypeList.filter(function(dtl){return dtl.deployment_type_id==response.deployment_type_id})[0].method,sensorType:$scope.sensDepTypes.filter(function(s){return s.sensor_type_id==response.sensor_type_id})[0].sensor};propStatToAdd={instrument_id:response.instrument_id,status_type_id:4,member_id:$cookies.get("mID"),time_stamp:Time_STAMP,time_zone:"UTC"},INSTRUMENT_STATUS.save(propStatToAdd).$promise.then(function(statResponse){propStatToAdd.status="Proposed",propStatToAdd.instrument_status_id=statResponse.instrument_status_id,createdPropSensor.instrument_status=[propStatToAdd],$scope.SiteSensors.push(createdPropSensor),$scope.sensorCount={total:$scope.SiteSensors.length};for(var dep=0;dep<$scope.deployTypeList.length;dep++)$scope.deployTypeList[dep].selected=!1;$timeout(function(){$scope.showProposed=!1,toastr.success("Proposed sensor created")})},function(errorResponse){toastr.error("Error saving Sensor: "+errorResponse.statusText)})},function(errorResponse){toastr.error("Error saving Sensor: "+errorResponse.statusText)})}},$scope.showRetrieveModal=function(sensorClicked){var indexClicked=$scope.SiteSensors.indexOf(sensorClicked),allindex=thisSiteSensors.indexOf(sensorClicked);$rootScope.stateIsLoading.showLoading=!0;var modalInstance=$uibModal.open({templateUrl:"SensorRetrievalModal.html",controller:"sensorRetrievalModalCtrl",size:"lg",backdrop:"static",windowClass:"rep-dialog",resolve:{thisSensor:function(){return 0!==sensorClicked?sensorClicked:"empty"},SensorSite:function(){return thisSite},allEventList:function(){return allEvents},siteOPs:function(){return SITE.getSiteOPs({id:thisSite.site_id}).$promise},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise},allStatusTypes:function(){return STATUS_TYPE.getAll().$promise},allInstCollCond:function(){return INST_COLL_CONDITION.getAll().$promise},allVDatumList:function(){return allVertDatums}}});modalInstance.result.then(function(retrievedSensor){if("retrieved"==retrievedSensor[1]&&($scope.SiteSensors[indexClicked]=retrievedSensor[0],thisSiteSensors[allindex]=retrievedSensor[0]),"deletedR"==retrievedSensor[1]){var indexClicked1=$scope.SiteSensors.indexOf(sensorClicked);$scope.SiteSensors.splice(indexClicked1,1),$scope.sensorCount.total=$scope.SiteSensors.length}$rootScope.stateIsLoading.showLoading=!1})},$scope.showProposedSensor=function(proposedSensorClicked){var propIndex=$scope.SiteSensors.indexOf(proposedSensorClicked),propModalInstance=$uibModal.open({templateUrl:"ProposedSensor.html",controller:["$scope","$uibModalInstance","proposedSensor",function($scope,$uibModalInstance,proposedSensor){$scope.thisProposedSensor=proposedSensor,$scope.cancel=function(){$uibModalInstance.dismiss()},$scope.deleteProposed=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return"Proposed Sensor"},what:function(){return"Proposed Sensor"}}});DeleteModalInstance.result.then(function(){$uibModalInstance.close("delete")})}}],size:"sm",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{proposedSensor:function(){return proposedSensorClicked}}});propModalInstance.result.then(function(d){"delete"==d&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),INSTRUMENT["delete"]({id:proposedSensorClicked.instrument_id}).$promise.then(function(){thisSiteSensors.splice(propIndex,1),$scope.SiteSensors=thisSiteSensors,$scope.sensorCount.total=$scope.SiteSensors.length,Instrument_Service.setAllSiteSensors($scope.SiteSensors),toastr.success("Proposed sensor deleted")},function(errorResponse){toastr.error("Error deleting proposed sensor. Refresh and try again. Error: "+errorResponse.statusText)}))})},$scope.showSensorModal=function(sensorClicked){var passAllLists=[allSensorTypes,allSensorBrands,allHousingTypes,allEvents,SensFileTypes,allVertDatums],indexClicked=$scope.SiteSensors.indexOf(sensorClicked);$rootScope.stateIsLoading.showLoading=!0;var modalInstance=$uibModal.open({templateUrl:0===sensorClicked||4===sensorClicked.instrument_status[0].status_type_id?"Sensormodal.html":"DepSensormodal.html",controller:"sensorModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{allDropdowns:function(){return passAllLists},allDepTypes:function(){return DEPLOYMENT_TYPE.getAll().$promise},thisSensor:function(){return 0!==sensorClicked?sensorClicked:"empty"},SensorSite:function(){return thisSite},siteOPs:function(){return SITE.getSiteOPs({id:thisSite.site_id}).$promise},agencyList:function(){return allAgencies},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise}}});modalInstance.result.then(function(createdSensor){var i=$scope.SiteSensors.indexOf(sensorClicked),si=thisSiteSensors.indexOf(sensorClicked);"proposedDeployed"==createdSensor[1]&&($scope.SiteSensors[i]=createdSensor[0],thisSiteSensors[si]=createdSensor[0],Instrument_Service.setAllSiteSensors($scope.SiteSensors)),"newDeployed"==createdSensor[1]&&($scope.SiteSensors.push(createdSensor[0]),$scope.sensorCount.total=$scope.SiteSensors.length,Instrument_Service.setAllSiteSensors($scope.SiteSensors)),void 0===createdSensor[1]&&($scope.SiteSensors[indexClicked]=createdSensor[0],$rootScope.stateIsLoading.showLoading=!1),"deleted"==createdSensor[1]&&($scope.SiteSensors.splice(i,1),$scope.sensorCount.total=$scope.SiteSensors.length,Instrument_Service.setAllSiteSensors($scope.SiteSensors)),$rootScope.stateIsLoading.showLoading=!1})},$scope.showFullSensorModal=function(sensorClicked){var deployedStuff=[allSensorTypes,allSensorBrands,allHousingTypes,SensFileTypes,allVertDatums],indexClicked=$scope.SiteSensors.indexOf(sensorClicked);$rootScope.stateIsLoading.showLoading=!0;var modalInstance=$uibModal.open({templateUrl:"fullSensormodal.html",controller:"fullSensorModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{allDepDropdowns:function(){return deployedStuff},allStatusTypes:function(){return STATUS_TYPE.getAll().$promise},allInstCollCond:function(){return INST_COLL_CONDITION.getAll().$promise},allEvents:function(){return allEvents},allDepTypes:function(){return DEPLOYMENT_TYPE.getAll().$promise},thisSensor:function(){return 0!==sensorClicked?sensorClicked:"empty"},SensorSite:function(){return thisSite},siteOPs:function(){return SITE.getSiteOPs({id:thisSite.site_id}).$promise},agencyList:function(){return allAgencies},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise}}});modalInstance.result.then(function(createdSensor){"deleted"==createdSensor[1]?($scope.SiteSensors.splice(indexClicked,1),$scope.sensorCount.total=$scope.SiteSensors.length,Instrument_Service.setAllSiteSensors($scope.SiteSensors)):$scope.SiteSensors[indexClicked]=createdSensor[0],$rootScope.stateIsLoading.showLoading=!1})},$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1,void 0!==newValue?($scope.SiteSensors=thisSiteSensors.filter(function(h){return h.event_id==$cookies.get("SessionEventID")||4==h.instrument_status[0].status_type_id}),$scope.sensorCount={total:$scope.SiteSensors.length}):($scope.SiteSensors=thisSiteSensors,$scope.sensorCount={total:$scope.SiteSensors.length})})}}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("resourcesCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$filter","$uibModal","AGENCY","CONTACT_TYPE","DEPLOYMENT_PRIORITY","EVENT_STATUS","EVENT_TYPE","FILE_TYPE","HORIZONTAL_COLL_METHODS","HORIZONTAL_DATUM","HOUSING_TYPE","HWM_QUALITY","HWM_TYPE","INST_COLL_CONDITION","MARKER","NETWORK_NAME","OP_QUALITY","OP_TYPE","SENSOR_BRAND","DEPLOYMENT_TYPE","SENSOR_TYPE","NETWORK_TYPE","STATUS_TYPE","VERTICAL_COLL_METHOD","VERTICAL_DATUM","allStates","allAgencies","allContactTypes","allDeployPriorities","allEventStats","allEventTypes","allFileTypes","allHorCollMethods","allHorDatums","allHouseTypes","allHWMqualities","allHWMtypes","allInstCollectConditions","allMarkers","allNetworkNames","allObjPtQualities","allObjPtTypes","allSensorBrands","allDeploymentTypes","allStatusTypes","allSensorTypes","allNetworkTypes","allVerticalCollMethods","allVerticalDatums",function($scope,$rootScope,$cookies,$location,$state,$http,$filter,$uibModal,AGENCY,CONTACT_TYPE,DEPLOYMENT_PRIORITY,EVENT_STATUS,EVENT_TYPE,FILE_TYPE,HORIZONTAL_COLL_METHODS,HORIZONTAL_DATUM,HOUSING_TYPE,HWM_QUALITY,HWM_TYPE,INST_COLL_CONDITION,MARKER,NETWORK_NAME,OP_QUALITY,OP_TYPE,SENSOR_BRAND,DEPLOYMENT_TYPE,SENSOR_TYPE,NETWORK_TYPE,STATUS_TYPE,VERTICAL_COLL_METHOD,VERTICAL_DATUM,allStates,allAgencies,allContactTypes,allDeployPriorities,allEventStats,allEventTypes,allFileTypes,allHorCollMethods,allHorDatums,allHouseTypes,allHWMqualities,allHWMtypes,allInstCollectConditions,allMarkers,allNetworkNames,allObjPtQualities,allObjPtTypes,allSensorBrands,allDeploymentTypes,allStatusTypes,allSensorTypes,allNetworkTypes,allVerticalCollMethods,allVerticalDatums){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Settings/Resources",$scope.accountRole=$cookies.get("usersRole"),$scope.sort_by=function(newSortingOrder){$scope.sortingOrder==newSortingOrder&&($scope.reverse=!$scope.reverse),$scope.sortingOrder=newSortingOrder,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+newSortingOrder+" i").removeClass().addClass($scope.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")},$scope.lookupForm={},$scope.showAddAgForm=!1,$scope.addAgButtonShowing=!0,$scope.activeMenu="",$scope.stateList=allStates,$scope.agencyList=allAgencies,$scope.showAddAgForm=!1,$scope.addAgButtonShowing=!0,$scope.newAg={},$scope.showAddAgClicked=function(){$scope.showAddAgForm=!0,$scope.addAgButtonShowing=!1},$scope.NeverMindAg=function(){$scope.newAg={},$scope.showAddAgForm=!1,$scope.addAgButtonShowing=!0},$scope.AddAgency=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",AGENCY.save($scope.newAg,function(response){$scope.agencyList.push(response),$scope.newAg={},$scope.showAddAgForm=!1,$scope.addAgButtonShowing=!0,toastr.success("Agency Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveAgency=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",AGENCY.update({id:id},data,function(response){retur=response,toastr.success("Agency Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteAgency=function(ag){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ag},what:function(){return"Agency"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.agencyList.indexOf(ag);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),AGENCY["delete"]({id:ag.agency_id},ag,function(response){$scope.agencyList.splice(index,1),toastr.success("Agency Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.showStateAbbrev=function(a){var selected=[];return a.state&&(selected=$filter("filter")($scope.stateList,{state_abbrev:a.state})),selected.length?selected[0].state_abbrev:"";

},$scope.contactTypeList=allContactTypes,$scope.showAddCTForm=!1,$scope.addCTButtonShowing=!0,$scope.newCT={},$scope.showAddCTClicked=function(){$scope.showAddCTForm=!0,$scope.addCTButtonShowing=!1},$scope.NeverMindCT=function(){$scope.newCT={},$scope.showAddCTForm=!1,$scope.addCTButtonShowing=!0},$scope.AddContactType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",CONTACT_TYPE.save($scope.newCT,function(response){$scope.contactTypeList.push(response),$scope.newCT={},$scope.showAddCTForm=!1,$scope.addCTButtonShowing=!0,toastr.success("Contact Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveContactType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",CONTACT_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Contact Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteContactType=function(ct){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ct},what:function(){return"Contact Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.contactTypeList.indexOf(ct);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),CONTACT_TYPE["delete"]({id:ct.contact_type_id},ct,function(response){$scope.contactTypeList.splice(index,1),toastr.success("Contact Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.deployPriorityList=allDeployPriorities,$scope.showAddDPForm=!1,$scope.addDPButtonShowing=!0,$scope.newDP={},$scope.showAddDPClicked=function(){$scope.showAddDPForm=!0,$scope.addDPButtonShowing=!1},$scope.NeverMindDP=function(){$scope.newDP={},$scope.showAddDPForm=!1,$scope.addDPButtonShowing=!0},$scope.AddDepPriority=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",DEPLOYMENT_PRIORITY.save($scope.newDP,function(response){$scope.deployPriorityList.push(response),$scope.newDP={},$scope.showAddDPForm=!1,$scope.addDPButtonShowing=!0,toastr.success("Deployment Priority Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveDepPriority=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",DEPLOYMENT_PRIORITY.update({id:id},data,function(response){retur=response,toastr.success("Deployment Priority Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteDepPriority=function(dp){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return dp},what:function(){return"Deployment Priority"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.deployPriorityList.indexOf(dp);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),DEPLOYMENT_PRIORITY["delete"]({id:dp.priority_id},dp,function(response){$scope.deployPriorityList.splice(index,1),toastr.success("Deployment Priority Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.eventStatList=allEventStats,$scope.showAddESForm=!1,$scope.addESButtonShowing=!0,$scope.newES={},$scope.showAddESClicked=function(){$scope.showAddESForm=!0,$scope.addESButtonShowing=!1},$scope.NeverMindES=function(){$scope.newES={},$scope.showAddESForm=!1,$scope.addESButtonShowing=!0},$scope.AddEventStat=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",EVENT_STATUS.save($scope.newES,function(response){$scope.eventStatList.push(response),$scope.newES={},$scope.showAddESForm=!1,$scope.addESButtonShowing=!0,toastr.success("Event Status Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveEventStat=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",EVENT_STATUS.update({id:id},data,function(response){retur=response,toastr.success("Event Status Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteEventStat=function(es){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return es},what:function(){return"Event Status"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.eventStatList.indexOf(es);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),EVENT_STATUS["delete"]({id:es.event_status_id},es,function(response){$scope.eventStatList.splice(index,1),toastr.success("Event Status Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.eventTypeList=allEventTypes,$scope.showAddETForm=!1,$scope.addETButtonShowing=!0,$scope.newET={},$scope.showAddETClicked=function(){$scope.showAddETForm=!0,$scope.addETButtonShowing=!1},$scope.NeverMindET=function(){$scope.newET={},$scope.showAddETForm=!1,$scope.addETButtonShowing=!0},$scope.AddEventType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",EVENT_TYPE.save($scope.newET,function(response){$scope.eventTypeList.push(response),$scope.newET={},$scope.showAddETForm=!1,$scope.addETButtonShowing=!0,toastr.success("Event Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveEventType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",EVENT_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Event Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteEventType=function(et){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return et},what:function(){return"Event Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.eventTypeList.indexOf(et);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),EVENT_TYPE["delete"]({id:et.event_type_id},et,function(response){$scope.eventTypeList.splice(index,1),toastr.success("Event Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.fileTypeList=allFileTypes,$scope.showAddFTForm=!1,$scope.addFTButtonShowing=!0,$scope.newFT={},$scope.showAddFTClicked=function(){$scope.showAddFTForm=!0,$scope.addFTButtonShowing=!1},$scope.NeverMindFT=function(){$scope.newFT={},$scope.showAddFTForm=!1,$scope.addFTButtonShowing=!0},$scope.AddFileType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",FILE_TYPE.save($scope.newFT,function(response){$scope.fileTypeList.push(response),$scope.newFT={},$scope.showAddFTForm=!1,$scope.addFTButtonShowing=!0,toastr.success("File Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveFileType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",FILE_TYPE.update({id:id},data,function(response){retur=response,toastr.success("File Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteFileType=function(ft){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ft},what:function(){return"File Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.fileTypeList.indexOf(ft);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE_TYPE["delete"]({id:ft.filetype_id},ft,function(response){$scope.fileTypeList.splice(index,1),toastr.success("File Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.horColMethList=allHorCollMethods,$scope.showAddHCMForm=!1,$scope.addHCMButtonShowing=!0,$scope.newHCM={},$scope.showAddHCMClicked=function(){$scope.showAddHCMForm=!0,$scope.addHCMButtonShowing=!1},$scope.NeverMindHCM=function(){$scope.newHCM={},$scope.showAddHCMForm=!1,$scope.addHCMButtonShowing=!0},$scope.AddHorCollMethod=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HORIZONTAL_COLL_METHODS.save($scope.newHCM,function(response){$scope.horColMethList.push(response),$scope.newHCM={},$scope.showAddHCMForm=!1,$scope.addHCMButtonShowing=!0,toastr.success("Horizontal Collection Method Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveHorCollMethod=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HORIZONTAL_COLL_METHODS.update({id:id},data,function(response){retur=response,toastr.success("Horizontal Collection Method Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteHorCollMethod=function(hcm){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return hcm},what:function(){return"Horizontal Collection Method"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.horColMethList.indexOf(hcm);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HORIZONTAL_COLL_METHODS["delete"]({id:hcm.hcollect_method_id},hcm,function(response){$scope.horColMethList.splice(index,1),toastr.success("Horizontal Collection Method Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.horDatList=allHorDatums,$scope.showAddHDForm=!1,$scope.addHDButtonShowing=!0,$scope.newHD={},$scope.showAddHDClicked=function(){$scope.showAddHDForm=!0,$scope.addHDButtonShowing=!1},$scope.NeverMindHD=function(){$scope.newHD={},$scope.showAddHDForm=!1,$scope.addHDButtonShowing=!0},$scope.AddHorDatum=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HORIZONTAL_DATUM.save($scope.newHD,function(response){$scope.horDatList.push(response),$scope.newHD={},$scope.showAddHDForm=!1,$scope.addHDButtonShowing=!0,toastr.success("Horizontal Datum Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveHorDatum=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HORIZONTAL_DATUM.update({id:id},data,function(response){retur=response,toastr.success("Horizontal Datum Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteHorDatum=function(hd){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return hd},what:function(){return"Horizontal Datum"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.horDatList.indexOf(hd);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HORIZONTAL_DATUM["delete"]({id:hd.datum_id},hd,function(response){$scope.horDatList.splice(index,1),toastr.success("Horizontal Datum Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.houseTypeList=allHouseTypes,$scope.showAddHTForm=!1,$scope.addHTButtonShowing=!0,$scope.newHT={},$scope.showAddHTClicked=function(){$scope.showAddHTForm=!0,$scope.addHTButtonShowing=!1},$scope.NeverMindHT=function(){$scope.newHT={},$scope.showAddHTForm=!1,$scope.addHTButtonShowing=!0},$scope.AddHouseType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HOUSING_TYPE.save($scope.newHT,function(response){$scope.houseTypeList.push(response),$scope.newHT={},$scope.showAddHTForm=!1,$scope.addHTButtonShowing=!0,toastr.success("Housing Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveHouseType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HOUSING_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Housing Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteHouseType=function(ht){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ht},what:function(){return"Housing Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.houseTypeList.indexOf(ht);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HOUSING_TYPE["delete"]({id:ht.housing_type_id},ht,function(response){$scope.houseTypeList.splice(index,1),toastr.success("Housing Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.hwmQualList=allHWMqualities,$scope.showAddHWMQForm=!1,$scope.addHWMQButtonShowing=!0,$scope.newHWMQ={},$scope.showAddHWMQClicked=function(){$scope.showAddHWMQForm=!0,$scope.addHWMQButtonShowing=!1},$scope.NeverMindHWMQ=function(){$scope.newHWMQ={},$scope.showAddHWMQForm=!1,$scope.addHWMQButtonShowing=!0},$scope.AddHwmQuality=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM_QUALITY.save($scope.newHWMQ,function(response){$scope.hwmQualList.push(response),$scope.newHWMQ={},$scope.showAddHWMQForm=!1,$scope.addHWMQButtonShowing=!0,toastr.success("HWM Quality Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveHwmQuality=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM_QUALITY.update({id:id},data,function(response){retur=response,toastr.success("HWM Quality Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteHwmQuality=function(hwmq){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return hwmq},what:function(){return"HWM Quality"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.hwmQualList.indexOf(hwmq);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM_QUALITY["delete"]({id:hwmq.hwm_quality_id},hwmq,function(response){$scope.hwmQualList.splice(index,1),toastr.success("HWM Quality Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.hwmTypeList=allHWMtypes,$scope.showAddHWMTForm=!1,$scope.addHWMTButtonShowing=!0,$scope.newHWMT={},$scope.showAddHWMTClicked=function(){$scope.showAddHWMTForm=!0,$scope.addHWMTButtonShowing=!1},$scope.NeverMindHWMT=function(){$scope.newHWMT={},$scope.showAddHWMTForm=!1,$scope.addHWMTButtonShowing=!0},$scope.AddHwmType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM_TYPE.save($scope.newHWMT,function(response){$scope.hwmTypeList.push(response),$scope.newHWMT={},$scope.showAddHWMTForm=!1,$scope.addHWMTButtonShowing=!0,toastr.success("HWM Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveHwmType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM_TYPE.update({id:id},data,function(response){retur=response,toastr.success("HWM Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteHwmType=function(hwmt){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return hwmt},what:function(){return"HWM Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.hwmTypeList.indexOf(hwmt);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM_TYPE["delete"]({id:hwmt.hwm_type_id},hwmt,function(response){$scope.hwmTypeList.splice(index,1),toastr.success("HWM Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.instColCondList=allInstCollectConditions,$scope.showAddICCForm=!1,$scope.addICCButtonShowing=!0,$scope.newICC={},$scope.showAddICCClicked=function(){$scope.showAddICCForm=!0,$scope.addICCButtonShowing=!1},$scope.NeverMindICC=function(){$scope.newICC={},$scope.showAddICCForm=!1,$scope.addICCButtonShowing=!0},$scope.AddInstColCond=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INST_COLL_CONDITION.save($scope.newICC,function(response){$scope.instColCondList.push(response),$scope.newICC={},$scope.showAddICCForm=!1,$scope.addICCButtonShowing=!0,toastr.success("Instrument Collection Condition Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveInstColCond=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INST_COLL_CONDITION.update({id:id},data,function(response){retur=response,toastr.success("Instrument Collection Condition Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteInstColCond=function(icc){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return icc},what:function(){return"Instrument Collection Condition"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.instColCondList.indexOf(icc);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),INST_COLL_CONDITION["delete"]({id:icc.id},icc,function(response){$scope.instColCondList.splice(index,1),toastr.success("Instrument Collection Condition Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.markList=allMarkers,$scope.showAddMForm=!1,$scope.addMButtonShowing=!0,$scope.newM={},$scope.showAddMClicked=function(){$scope.showAddMForm=!0,$scope.addMButtonShowing=!1},$scope.NeverMindM=function(){$scope.newM={},$scope.showAddMForm=!1,$scope.addMButtonShowing=!0},$scope.AddMarker=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MARKER.save($scope.newM,function(response){$scope.markList.push(response),$scope.newM={},$scope.showAddMForm=!1,$scope.addMButtonShowing=!0,toastr.success("Marker Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveMarker=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MARKER.update({id:id},data,function(response){retur=response,toastr.success("Marker Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteMarker=function(m){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return m},what:function(){return"Marker"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.markList.indexOf(m);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),MARKER["delete"]({id:m.marker_id},m,function(response){$scope.markList.splice(index,1),toastr.success("Marker Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.netNameList=allNetworkNames,$scope.showAddNNForm=!1,$scope.addNNButtonShowing=!0,$scope.newNN={},$scope.showAddNNClicked=function(){$scope.showAddNNForm=!0,$scope.addNNButtonShowing=!1},$scope.NeverMindNN=function(){$scope.newNN={},$scope.showAddNNForm=!1,$scope.addNNButtonShowing=!0},$scope.AddNetworkName=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",NETWORK_NAME.save($scope.newNN,function(response){$scope.netNameList.push(response),$scope.newNN={},$scope.showAddNNForm=!1,$scope.addNNButtonShowing=!0,toastr.success("Network Name Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveNetworkName=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",NETWORK_NAME.update({id:id},data,function(response){retur=response,toastr.success("Network Name Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteNetworkName=function(nn){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return nn},what:function(){return"Network Name"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.netNameList.indexOf(nn);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),NETWORK_NAME["delete"]({id:nn.network_name_id},nn,function(response){$scope.netNameList.splice(index,1),toastr.success("Network Name Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.opQualList=allObjPtQualities,$scope.showAddOPQForm=!1,$scope.addOPQButtonShowing=!0,$scope.newOPQ={},$scope.showAddOPQClicked=function(){$scope.showAddOPQForm=!0,$scope.addOPQButtonShowing=!1},$scope.NeverMindOPQ=function(){$scope.newOPQ={},$scope.showAddOPQForm=!1,$scope.addOPQButtonShowing=!0},$scope.AddOPQuality=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",OP_QUALITY.save($scope.newOPQ,function(response){$scope.opQualList.push(response),$scope.newOPQ={},$scope.showAddOPQForm=!1,$scope.addOPQButtonShowing=!0,toastr.success("Objective Point Quality Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveOPQuality=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",OP_QUALITY.update({id:id},data,function(response){retur=response,toastr.success("Objective Point Quality Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteOPQuality=function(opq){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return opq},what:function(){return"Objective Point Quality"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.opQualList.indexOf(opq);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),OP_QUALITY["delete"]({id:opq.op_quality_id},opq,function(response){$scope.opQualList.splice(index,1),toastr.success("Objective Point Quality Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.opTypeList=allObjPtTypes,$scope.showAddOPTForm=!1,$scope.addOPTButtonShowing=!0,$scope.newOPT={},$scope.showAddOPTClicked=function(){$scope.showAddOPTForm=!0,$scope.addOPTButtonShowing=!1},$scope.NeverMindOPT=function(){$scope.newOPT={},$scope.showAddOPTForm=!1,$scope.addOPTButtonShowing=!0},$scope.AddOPType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",OP_TYPE.save($scope.newOPT,function(response){$scope.opTypeList.push(response),$scope.newOPT={},$scope.showAddOPTForm=!1,$scope.addOPTButtonShowing=!0,toastr.success("Objective Point Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveOPType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",OP_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Objective Point Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteOPType=function(opt){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return opt},what:function(){return"Objective Point Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.opTypeList.indexOf(opt);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),OP_TYPE["delete"]({id:opt.objective_point_type_id},opt,function(response){$scope.opTypeList.splice(index,1),toastr.success("Objective Point Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.sensBrandList=allSensorBrands,$scope.showAddSBForm=!1,$scope.addSBButtonShowing=!0,$scope.newSB={},$scope.showAddSBClicked=function(){$scope.showAddSBForm=!0,$scope.addSBButtonShowing=!1},$scope.NeverMindSB=function(){$scope.newSB={},$scope.showAddSBForm=!1,$scope.addSBButtonShowing=!0},$scope.AddSensorBrand=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",SENSOR_BRAND.save($scope.newSB,function(response){$scope.sensBrandList.push(response),$scope.newSB={},$scope.showAddSBForm=!1,$scope.addSBButtonShowing=!0,toastr.success("Sensor Brand Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveSensorBrand=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",SENSOR_BRAND.update({id:id},data,function(response){retur=response,toastr.success("Sensor Brand Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteSensorBrand=function(sb){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return sb},what:function(){return"Sensor Brand"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.sensBrandList.indexOf(sb);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),SENSOR_BRAND["delete"]({id:sb.sensor_brand_id},sb,function(response){$scope.sensBrandList.splice(index,1),toastr.success("Sensor Brand Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.depTypeList=allDeploymentTypes,$scope.showAddDTForm=!1,$scope.addDTButtonShowing=!0,$scope.newDT={},$scope.showAddDTClicked=function(){$scope.showAddDTForm=!0,$scope.addDTButtonShowing=!1},$scope.NeverMindDT=function(){$scope.newDT={},$scope.showAddDTForm=!1,$scope.addDTButtonShowing=!0},$scope.AddDepType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",DEPLOYMENT_TYPE.save($scope.newDT,function(response){$scope.depTypeList.push(response),$scope.newDT={},$scope.showAddDTForm=!1,$scope.addDTButtonShowing=!0,toastr.success("Deployment Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveDepType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",DEPLOYMENT_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Deployment Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteDepType=function(dt){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return dt},what:function(){return"Deployment Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.depTypeList.indexOf(dt);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),DEPLOYMENT_TYPE["delete"]({id:dt.deployment_type_id},dt,function(response){$scope.depTypeList.splice(index,1),toastr.success("Deployment Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.statTypeList=allStatusTypes,$scope.showAddStatTForm=!1,$scope.addStatTButtonShowing=!0,$scope.newStatT={},$scope.showAddStatTClicked=function(){$scope.showAddStatTForm=!0,$scope.addStatTButtonShowing=!1},$scope.NeverMindStatT=function(){$scope.newStatT={},$scope.showAddStatTForm=!1,$scope.addStatTButtonShowing=!0},$scope.AddStatusType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",STATUS_TYPE.save($scope.newStatT,function(response){$scope.statTypeList.push(response),$scope.newStatTT={},$scope.showAddStatTForm=!1,$scope.addStatTButtonShowing=!0,toastr.success("Status Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveStatusType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",STATUS_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Status Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteStatusType=function(statT){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return statT},what:function(){return"Status Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.statTypeList.indexOf(statT);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),STATUS_TYPE["delete"]({id:statT.status_type_id},statT,function(response){$scope.statTypeList.splice(index,1),
toastr.success("Status Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.sensTypeList=allSensorTypes,$scope.newDepTypeRelating=[],$scope.commaSepDepMETHODS=[],$scope.formattedSensTypeList=[],$scope.sensTypeList.forEach(function(sensType){SENSOR_TYPE.getSensorDeploymentTypes({id:sensType.sensor_type_id},function(response){var deps=response;sensType.DepTypes=[];var DepMStrings=[];sensType.DepMETHODStrings="",deps.length>0&&deps.forEach(function(d){sensType.DepTypes.push(d.deployment_type_id),DepMStrings.push(d.method),sensType.DepMETHODStrings=DepMStrings.join(", ")}),$scope.formattedSensTypeList.push(sensType)}).$promise}),$scope.showDepTypes=function(SenT){var selected=[];return angular.forEach($scope.depTypeList,function(s){SenT.DepTypes.indexOf(s.deployment_type_id)>=0&&selected.push(s.method)}),selected.length?selected.join(", "):""},$scope.removeTheseDepTypes=[],$scope.checkListCheck=function(originalChecked,nowChecked){nowChecked.length<originalChecked.length&&angular.forEach(originalChecked,function(oc){if(nowChecked.indexOf(oc)<0){var deleteDep=$scope.depTypeList.filter(function(dt){return dt.deployment_type_id==oc})[0];if($scope.removeTheseDepTypes.length>0)for(var d=0;d<$scope.removeTheseDepTypes.length;d++)$scope.removeTheseDepTypes[d].deployment_type_id==deleteDep.deployment_type_id?d=$scope.newDepTypeRelating.length:$scope.removeTheseDepTypes.push(deleteDep);else $scope.removeTheseDepTypes.push(deleteDep)}})},$scope.showAddSenTForm=!1,$scope.addSenTButtonShowing=!0,$scope.newSenT={},$scope.showAddSenTClicked=function(){$scope.showAddSenTForm=!0,$scope.addSenTButtonShowing=!1},$scope.NeverMindSenT=function(){$scope.newSenT={},$scope.newDepTypeRelating=[],angular.forEach($scope.depTypeList,function(d){d.selected=!1}),$scope.showAddSenTForm=!1,$scope.addSenTButtonShowing=!0},$scope.addDepTypeToNewSenT=function(dt){if(dt.selected===!0){if($scope.newDepTypeRelating.length>0)for(var d=0;d<$scope.newDepTypeRelating.length;d++)$scope.newDepTypeRelating[d].deployment_type_id==dt.deployment_type_id?d=$scope.newDepTypeRelating.length:($scope.newDepTypeRelating.push(dt),d=$scope.newDepTypeRelating.length);0===$scope.newDepTypeRelating.length&&$scope.newDepTypeRelating.push(dt)}},$scope.AddSensorType=function(valid){if(valid){var newSensor={},relatedDeps=[];$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",SENSOR_TYPE.save($scope.newSenT,function(response){newSensor=response,$scope.newSenT={},$scope.showAddSenTForm=!1,$scope.addSenTButtonShowing=!0,$scope.newDepTypeRelating.length>0&&angular.forEach($scope.newDepTypeRelating,function(ndt){delete ndt.selected,relatedDeps.push(ndt.deployment_type_id),SENSOR_TYPE.addSensorDeploymentType({sensorTypeId:newSensor.sensor_type_id,deploymentTypeId:ndt.deployment_type_id},function(response1){},function(errorResponse){errorResponse.statusText})}),newSensor.DepTypes=relatedDeps,$scope.formattedSensTypeList.push(newSensor),toastr.success("Sensor Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})}},$scope.saveSensorType=function(data,id){var retur=!1;$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var DTs=({sensor_type_id:data.sensor_type_id,sensor:data.sensor},[]);return angular.forEach($scope.depTypeList,function(s){if(data.DepTypes.indexOf(s.deployment_type_id)>=0){var thisDT={deployment_type_id:s.deployment_type_id,method:s.method};DTs.push(thisDT)}}),SENSOR_TYPE.update({id:id},data,function(response){retur=response,angular.forEach(DTs,function(dt){SENSOR_TYPE.addSensorDeploymentType({sensorTypeId:id,deploymentTypeId:ndt.deployment_type_id},dt,function(response1){toastr.success("Deployment Type is now related")},function(errorResponse1){errorResponse1.statusText})}),toastr.success("Sensor Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}).$promise.then(angular.forEach($scope.removeTheseDepTypes,function(rdt){SENSOR_TYPE.removeSensorDeploymentType({sensorTypeId:id,DeploymentTypeId:rdt.deployment_type_id},function(response2){toastr.success("Deployment Type is no longer related")},function(errorResponse){errorResponse.statusText})})),retur},$scope.deleteSensorType=function(senT){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return senT},what:function(){return"Sensor Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.formattedSensTypeList.indexOf(senT),ST={sensor_type_id:senT.sensor_type_id,sensor:senT.sensor};$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),angular.forEach($scope.depTypeList,function(s){if(senT.DepTypes.indexOf(s.deployment_type_id)>=0){var thisDT={deployment_type_id:s.deployment_type_id,method:s.method};SENSOR_TYPE.removeSensorDeploymentType({sensorTypeId:ST.sensor_type_id,DeploymentTypeId:thisDT.deployment_type_id},function(response2){})}}),SENSOR_TYPE["delete"]({id:ST.sensor_type_id},ST,function(response){$scope.formattedSensTypeList.splice(index,1),toastr.success("Sensor Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.netTypeList=allNetworkTypes,$scope.showAddNTForm=!1,$scope.addNTButtonShowing=!0,$scope.newNT={},$scope.showAddNTClicked=function(){$scope.showAddNTForm=!0,$scope.addNTButtonShowing=!1},$scope.NeverMindNT=function(){$scope.newNT={},$scope.showAddNTForm=!1,$scope.addNTButtonShowing=!0},$scope.AddNetType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",NETWORK_TYPE.save($scope.newNT,function(response){$scope.netTypeList.push(response),$scope.newNT={},$scope.showAddNTForm=!1,$scope.addNTButtonShowing=!0,toastr.success("Network Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveNetType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",NETWORK_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Network Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteNetType=function(nt){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return nt},what:function(){return"Network Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.netTypeList.indexOf(nt);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),NETWORK_TYPE["delete"]({id:nt.network_type_id},nt,function(response){$scope.netTypeList.splice(index,1),toastr.success("Network Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.vertColMethList=allVerticalCollMethods,$scope.showAddVCMForm=!1,$scope.addVCMButtonShowing=!0,$scope.newVCM={},$scope.showAddVCMClicked=function(){$scope.showAddVCMForm=!0,$scope.addVCMButtonShowing=!1},$scope.NeverMindVCM=function(){$scope.newVCM={},$scope.showAddVCMForm=!1,$scope.addVCMButtonShowing=!0},$scope.AddVertColMeth=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",VERTICAL_COLL_METHOD.save($scope.newVCM,function(response){$scope.vertColMethList.push(response),$scope.newVCM={},$scope.showAddVCMForm=!1,$scope.addVCMButtonShowing=!0,toastr.success("Vertical Collection Method Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveVertColMeth=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",VERTICAL_COLL_METHOD.update({id:id},data,function(response){retur=response,toastr.success("Vertical Collection Method Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteVertColMeth=function(vcm){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return vcm},what:function(){return"Vertical Collection Method"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.vertColMethList.indexOf(vcm);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),VERTICAL_COLL_METHOD["delete"]({id:vcm.vcollect_method_id},vcm,function(response){$scope.vertColMethList.splice(index,1),toastr.success("Vertical Collection Method Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.vertDatList=allVerticalDatums,$scope.showAddVDForm=!1,$scope.addVDButtonShowing=!0,$scope.newVD={},$scope.showAddVDClicked=function(){$scope.showAddVDForm=!0,$scope.addVDButtonShowing=!1},$scope.NeverMindVD=function(){$scope.newVD={},$scope.showAddVDForm=!1,$scope.addVDButtonShowing=!0},$scope.AddVertDatum=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",VERTICAL_DATUM.save($scope.newVD,function(response){$scope.vertDatList.push(response),$scope.newVD={},$scope.showAddVDForm=!1,$scope.addVDButtonShowing=!0,toastr.success("Vertical Datum Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveVertDatum=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",VERTICAL_DATUM.update({id:id},data,function(response){retur=response,toastr.success("Vertical Datum Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteVertDatum=function(vd){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return vd},what:function(){return"Vertical Datum"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.vertDatList.indexOf(vd);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),VERTICAL_DATUM["delete"]({id:vd.datum_id},vd,function(response){$scope.vertDatList.splice(index,1),toastr.success("Vertical Datum Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})})}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("submitReportCtrl",["$scope","$http","$cookies","$uibModal","$state","CONTACT","REPORT",function($scope,$http,$cookies,$uibModal,$state,CONTACT,REPORT){if($scope.$parent.needToComplete!==!0)$scope.$parent.newReport={report_date:new Date};else{var yr=$scope.newReport.report_date.substr(0,4),mo=$scope.newReport.report_date.substr(5,2),day=$scope.newReport.report_date.substr(8,2);$scope.newReport.report_date=new Date(mo+"/"+day+"/"+yr)}$scope.DeployStaff={},$scope.GenStaff={},$scope.InlandStaff={},$scope.CoastStaff={},$scope.WaterStaff={},$scope.status={openContacts:!1,openCounts:!1,openPersonnel:!1};$scope.$parent.needToComplete=!1,void 0===$scope.newReport.reporting_metrics_id&&($scope.disabled=!0),$scope.getEventName=function(evID){var name,thisEvent=$scope.events.filter(function(e){return e.event_id==evID})[0];return name=thisEvent.event_name};var getReportContacts=function(reportID){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",CONTACT.getContactModel({ReportMetric:reportID},function(response){$scope.DeployStaff=response.filter(function(d){return"Deployed Staff"==d.contactType})[0],$scope.GenStaff=response.filter(function(d){return"General"==d.contactType})[0],$scope.InlandStaff=response.filter(function(d){return"Inland Flood"==d.contactType})[0],$scope.CoastStaff=response.filter(function(d){return"Coastal Flood"==d.contactType})[0],$scope.WaterStaff=response.filter(function(d){return"Water Quality"==d.contactType})[0]}).$promise,$scope.disabled=!1},postReportContacts=function(reportID){angular.equals({},$scope.DeployStaff)||void 0===$scope.DeployStaff||REPORT.addReportContact({reportId:reportID,contactTypeId:1},$scope.DeployStaff,function(response1){toastr.success("Deploy Staff Updated")},function(errorResponse1){alert("Error: "+errorResponse1.statusText)}).$promise,angular.equals({},$scope.GenStaff)||void 0===$scope.GenStaff||REPORT.addReportContact({reportId:reportID,contactTypeId:2},$scope.GenStaff,function(response2){toastr.success("General Staff Updated")},function(errorResponse2){alert("Error: "+errorResponse2.statusText)}).$promise,angular.equals({},$scope.InlandStaff)||void 0===$scope.InlandStaff||REPORT.addReportContact({reportId:reportID,contactTypeId:3},$scope.InlandStaff,function(response3){toastr.success("Inland Staff Updated")},function(errorResponse3){alert("Error: "+errorResponse3.statusText)}).$promise,angular.equals({},$scope.CoastStaff)||void 0===$scope.CoastStaff||REPORT.addReportContact({reportId:reportID,contactTypeId:4},$scope.CoastStaff,function(response4){toastr.success("Coastal Staff Updated")},function(errorResponse4){alert("Error: "+errorResponse4.statusText)}).$promise,angular.equals({},$scope.WaterStaff)||void 0===$scope.WaterStaff||REPORT.addReportContact({reportId:reportID,contactTypeId:5},$scope.WaterStaff,function(response5){toastr.success("Water Staff Updated")},function(errorResponse5){alert("Error: "+errorResponse5.statusText)}).$promise},removeIncomplete=function(){for(var index=0,i=0;i<$scope.memberIncompletes.length;i++)$scope.memberIncompletes[i].reporting_metrics_id==$scope.newReport.reporting_metrics_id&&(index=i,i=$scope.memberIncompletes.length);$scope.memberIncompletes.splice(index,1)},PostPutReportAndReportContacts=function(){$scope.newReport.report_date=$scope.newReport.report_date.toDateString(),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.newReport.reporting_metrics_id?REPORT.update({id:$scope.newReport.reporting_metrics_id},$scope.newReport,function(response){toastr.success("Report Updated"),$scope.newReport.event_name=$scope.getEventName($scope.newReport.event_id),1==$scope.newReport.complete&&(removeIncomplete(),$scope.isCompleted=!0),postReportContacts($scope.newReport.reporting_metrics_id)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$scope.fullReportForm.submit.$setPristine(),$scope.fullReportForm.submit.event_id.$viewValue=void 0,$state.go("reporting.reportDash")}):REPORT.save($scope.newReport,function(response){toastr.success("Report Created"),$scope.reports.push(response),1==$scope.newReport.complete?(removeIncomplete(),$scope.isCompleted=!0,$scope.newReport.event_name=$scope.getEventName($scope.newReport.event_id)):$scope.memberIncompletes.push(response),$scope.newReport.reporting_metrics_id=response.reporting_metrics_id,postReportContacts($scope.newReport.reporting_metrics_id)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$scope.fullReportForm.submit.$setPristine(),$scope.fullReportForm.submit.event_id.$viewValue=void 0,$state.go("reporting.reportDash")})};$scope.populateYestTots=function(){if(void 0!==$scope.newReport.report_date&&void 0!==$scope.newReport.state&&void 0!==$scope.newReport.event_id){var formatDate=new Date($scope.newReport.report_date);formatDate.setHours(0,0,0,0),formatDate=formatDate.toISOString().substr(0,10);var myDate=formatDate,theState=$scope.newReport.state,eID=$scope.newReport.event_id;$scope.disabled=!1,$scope.newReport={report_date:$scope.newReport.report_date,state:theState,event_id:eID},$scope.DeployStaff={},$scope.GenStaff={},$scope.InlandStaff={},$scope.CoastStaff={},$scope.WaterStaff={};var previousDay=new Date(myDate);previousDay.setHours(0,0,0,0),previousDay=previousDay.toISOString().substr(0,10);var yesterdayRpt=$scope.reports.filter(function(r){var repDate=r.report_date.toString().substring(0,10);return r.event_id==$scope.newReport.event_id&&r.state==$scope.newReport.state&&repDate==previousDay})[0];$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==yesterdayRpt?($scope.newReport.yest_fieldpers=yesterdayRpt.tod_fieldpers,$scope.newReport.yest_officepers=yesterdayRpt.tod_officepers,getReportContacts(yesterdayRpt.reporting_metrics_id)):($scope.newReport.yest_fieldpers=0,$scope.newReport.yest_officepers=0),REPORT.getDailyReportTots({Date:myDate,Event:$scope.newReport.event_id,State:$scope.newReport.state},function(response6){$scope.newReport.dep_rapdepl_gage=response6.dep_rapdepl_gage,$scope.newReport.rec_rapdepl_gage=response6.rec_rapdepl_gage,$scope.newReport.lost_rapdepl_gage=response6.lost_rapdepl_gage,$scope.newReport.dep_wtrlev_sensor=response6.dep_wtrlev_sensor,$scope.newReport.rec_wtrlev_sensor=response6.rec_wtrlev_sensor,$scope.newReport.lost_wtrlev_sensor=response6.lost_wtrlev_sensor,$scope.newReport.dep_wv_sens=response6.dep_wv_sens,$scope.newReport.rec_wv_sens=response6.rec_wv_sens,$scope.newReport.lost_wv_sens=response6.lost_wv_sens,$scope.newReport.dep_barometric=response6.dep_barometric,$scope.newReport.rec_barometric=response6.rec_barometric,$scope.newReport.lost_barometric=response6.lost_barometric,$scope.newReport.dep_meteorological=response6.dep_meteorological,$scope.newReport.rec_meteorological=response6.rec_meteorological,$scope.newReport.lost_meteorological=response6.lost_meteorological,$scope.newReport.hwm_flagged=response6.hwm_flagged,$scope.newReport.hwm_collected=response6.hwm_collected},function(errorResponse6){alert("Error: "+errorResponse6.statusText)})}else alert("Please choose a date, event and state first.")},$scope.saveReport=function(valid){if(void 0===$scope.newReport.complete||0===$scope.newReport.complete){var modalInstance=$uibModal.open({templateUrl:"saveReportModal.html",controller:"confirmReportModalCtrl",size:"sm"});modalInstance.result.then(function(){$scope.newReport.complete=0,$scope.newReport.member_id=$scope.MemberLoggedIn.member_id,PostPutReportAndReportContacts()})}else valid?($scope.newReport.member_id=$scope.MemberLoggedIn.member_id,PostPutReportAndReportContacts()):($scope.status.openContacts=!0,$scope.status.openCounts=!0,$scope.status.openPersonnel=!0,angular.element("[name='"+$scope.fullReportForm.submit.$name+"']").find(".ng-invalid:visible:first").focus())},$scope.populateDeployer=function(){$scope.DeployStaff=$scope.MemberLoggedIn},$scope.getIncompleteReport=function(){var reportId=this.ir.reporting_metrics_id;REPORT.query({id:reportId},function(response){$scope.newReport=response;var yr=response.report_date.substr(0,4),mo=response.report_date.substr(5,2),day=response.report_date.substr(8,2);$scope.newReport.report_date=new Date(mo+"/"+day+"/"+yr),$scope.fullReportForm.submit.$setDirty(),getReportContacts(reportId)}).$promise},void 0!==$scope.newReport.reporting_metrics_id&&getReportContacts($scope.newReport.reporting_metrics_id)}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("reportModalCtrl",["$scope","$uibModalInstance","report","submitPerson","contacts",function($scope,$uibModalInstance,report,submitPerson,contacts){$scope.ReportView={},$scope.ReportView.Report=report,$scope.ReportView.submitter=submitPerson,$scope.ReportView.deployStaff=contacts.filter(function(d){return"Deployed Staff"==d.contactType})[0],$scope.ReportView.generalStaff=contacts.filter(function(d){return"General"==d.contactType})[0],$scope.ReportView.inlandStaff=contacts.filter(function(d){return"Inland Flood"==d.contactType})[0],$scope.ReportView.coastStaff=contacts.filter(function(d){return"Coastal Flood"==d.contactType})[0],$scope.ReportView.waterStaff=contacts.filter(function(d){return"Water Quality"==d.contactType})[0],$scope.print=function(){window.print()},$scope.ok=function(){$uibModalInstance.dismiss("cancel")}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("reportingDashCtrl",["$scope","$cookies","$filter","$uibModal","$state","$http","CONTACT","MEMBER","allReportsAgain",function($scope,$cookies,$filter,$uibModal,$state,$http,CONTACT,MEMBER,allReportsAgain){$scope.reportsToDate=allReportsAgain,$scope.todayRpts=[],$scope.yesterdayRpts=[],$scope.pickDateRpts=[],$scope.pickAdateReports=!1,$scope.today=new Date,$scope.today.setHours(0,0,0,0),$scope.yesterday=new Date($scope.today),$scope.yesterday.setDate($scope.today.getDate()-1),$scope.today=$scope.today.toISOString().substr(0,10),$scope.yesterday=$scope.yesterday.toISOString().substr(0,10),$scope.THIS_DATE={},$scope.ViewReport=function(r){var modalInstance=$uibModal.open({templateUrl:"ViewReport.html",controller:"reportModalCtrl",size:"lg",windowClass:"rep-dialog",resolve:{report:function(){return r},submitPerson:function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var member={};return MEMBER.query({id:r.member_id},function(response){member.mem=response;var memberAgency=$scope.agencies.filter(function(a){return a.agency_id==member.mem.agency_id})[0];member.agency_name=memberAgency.agency_name,member.agency_address=memberAgency.address+", "+memberAgency.city+" "+memberAgency.state+" "+memberAgency.zip}).$promise,member},contacts:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",CONTACT.getContactModel({ReportMetric:r.reporting_metrics_id}).$promise}}});modalInstance.result.then(function(r){})};var formatReport=function(repList){for(var returnList=[],i=0;i<repList.length;i++){var rep=repList[i],event=$scope.events.filter(function(e){return e.event_id==rep.event_id})[0];rep.event_name=event.event_name,returnList.push(rep)}return returnList},todayReports=$scope.reportsToDate.filter(function(todayrep){var reportDate=todayrep.report_date.toString().substring(0,10);return reportDate==$scope.today});$scope.todayRpts=formatReport(todayReports);var yesterdayReports=$scope.reportsToDate.filter(function(yestrep){var reportDate=yestrep.report_date.toString().substring(0,10);return reportDate==$scope.yesterday});$scope.yesterdayRpts=formatReport(yesterdayReports),$scope.getReportsByDate=function(){if(void 0!==$scope.THIS_DATE.date){var formatDate=new Date($scope.THIS_DATE.date);formatDate.setHours(0,0,0,0),formatDate=formatDate.toISOString().substr(0,10);var thisDateReports=$scope.reportsToDate.filter(function(tdate){var reportDate=tdate.report_date.toString().substring(0,10);return reportDate==formatDate});$scope.pickDateRpts=formatReport(thisDateReports),$scope.pickAdateReports=!0}else alert("Pick a date first.")},$scope.CompleteThisReport=function(rep){$scope.$parent.newReport=rep,$scope.$parent.disabled=!1,$scope.$parent.needToComplete=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",CONTACT.getContactModel({ReportMetric:rep.reporting_metrics_id},function(response){response.length>=1?($scope.$parent.DeployStaff=response.filter(function(d){return"Deployed Staff"==d.contactType})[0],$scope.$parent.GenStaff=response.filter(function(d){return"General"==d.contactType})[0],$scope.$parent.InlandStaff=response.filter(function(d){return"Inland Flood"==d.contactType})[0],$scope.$parent.CoastStaff=response.filter(function(d){return"Coastal Flood"==d.contactType})[0],$scope.$parent.WaterStaff=response.filter(function(d){return"Water Quality"==d.contactType})[0]):($scope.$parent.DeployStaff={},$scope.$parent.GenStaff={},$scope.$parent.InlandStaff={},$scope.$parent.CoastStaff={},$scope.$parent.WaterStaff={})}).$promise.then(function(){$state.go("reporting.submitReport")})},$scope.getProjectAlertText=function(rep){$scope.ProjectAlertParts={},$scope.ProjectAlertParts.Report=rep,$scope.ProjectAlertParts.totYestFieldPers=rep.yest_fieldpers,$scope.ProjectAlertParts.totYestOfficPers=rep.yest_officepers,$scope.ProjectAlertParts.measureCts=rep.tot_discharge_meas;var eventReports=$scope.reportsToDate.filter(function(r){return r.event_id==rep.event_id}),test=$filter("countBy")(eventReports,"state");$scope.ProjectAlertParts.stateCount=0,angular.forEach(test,function(er){$scope.ProjectAlertParts.stateCount++}),$scope.ProjectAlertParts.Event=$scope.events.filter(function(e){return e.event_id==rep.event_id})[0];var modalInstance=$uibModal.open({templateUrl:1==$scope.ProjectAlertParts.Event.event_type_id?"FloodPA.html":"HurricanePA.html",controller:"ProjAlertModalCtrl",size:"md",windowClass:"rep-dialog",resolve:{ProjAlert:function(){return $scope.ProjectAlertParts}}});modalInstance.result.then(function(r){})}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("reportingCtrl",["$scope","$rootScope","$cookies","$location","$http","$uibModal","memberReports","allEvents","allStates","allReports","allEventTypes","allEventStatus","allAgencies","SERVER_URL","REPORT","MEMBER",function($scope,$rootScope,$cookies,$location,$http,$uibModal,memberReports,allEvents,allStates,allReports,allEventTypes,allEventStatus,allAgencies,SERVER_URL,REPORT,MEMBER){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Reporting",$rootScope.activeMenu="report",$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){var formIsPopulated=!1;switch(fromState.url){case"/SubmitReport":void 0!==$scope.fullReportForm.submit&&(formIsPopulated=$scope.fullReportForm.submit.$dirty,formIsPopulated=void 0!==$scope.fullReportForm.submit.event_id.$viewValue?!0:formIsPopulated)}formIsPopulated&&(console.log("toState.name: "+toState.name),console.log("fromState.name: "+fromState.name),confirm("Are you sure you want to leave the Submit Report Tab? Any unsaved information will be lost.")?console.log("go to: "+toState.name):(console.log("stay at state: "+fromState.name),$rootScope.stateIsLoading.showLoading=!1,event.preventDefault()))}),$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.formatDate=function(d){var currentDt=new Date(d),mm=currentDt.getMonth()+1;mm=10>mm?"0"+mm:mm;var dd=currentDt.getDate(),yyyy=currentDt.getFullYear(),date=mm+"/"+dd+"/"+yyyy;return date},$scope.serverURL=SERVER_URL,$scope.fullReportForm={},$scope.newReport={},$scope.DeployStaff={},$scope.GenStaff={},$scope.InlandStaff={},$scope.CoastStaff={},$scope.WaterStaff={},$scope.disabled=!0,$scope.needToComplete=!1,$scope.memberIncompletes=memberReports.filter(function(ir){return 0===ir.complete}),$scope.events=allEvents,$scope.states=allStates,$scope.reports=allReports,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.query({id:$cookies.get("mID")},function(response){$scope.MemberLoggedIn=response;var memberAgency=allAgencies.filter(function(a){return a.agency_id==$scope.MemberLoggedIn.agency_id})[0];$scope.MemberLoggedIn.agency_name=memberAgency.agency_name,$scope.MemberLoggedIn.agency_address=memberAgency.address+", "+memberAgency.city+" "+memberAgency.state+" "+memberAgency.zip}).$promise,MEMBER.getAll().$promise.then(function(response){$scope.members=response}),$scope.agencies=allAgencies,$scope.eventTypes=allEventTypes,$scope.eventStats=allEventStatus,$scope.Statemodel={},$scope.genSummary={},$scope.filteredReports=[],$scope.genRepChange=function(){$scope.EventName=$scope.events.filter(function(e){return e.event_id==$scope.genSummary.event_id})[0];var names=[],abbrevs=[];angular.forEach($scope.Statemodel.value,function(state){names.push(state.state_name),abbrevs.push(state.state_abbrev)}),$scope.StateNames=names.join(","),$scope.StateAbbrevs=abbrevs.join(",")},$scope.MetricDisplayModel=[],$scope.displayMetricSum=function(valid){if(valid){$scope.MetricDisplayModel=[],$scope.GenRepEventModel={},$scope.totalRow={},$scope.totalRow.notAcctForEmps=0,$scope.totalRow.cumPField=0,$scope.totalRow.yesPField=0,$scope.totalRow.todPField=0,$scope.totalRow.tomPField=0,$scope.totalRow.cumPOffice=0,$scope.totalRow.yesPOffice=0,$scope.totalRow.todPOffice=0,$scope.totalRow.tomPOffice=0,$scope.totalRow.truck=0,$scope.totalRow.boat=0,$scope.totalRow.other=0,$scope.totalRow.gageVisits=0,$scope.totalRow.gagesDown=0,$scope.totalRow.disCtoDate=0,$scope.totalRow.disCPlanned=0,$scope.totalRow.CheckMeasToDate=0,$scope.totalRow.CheckMeasPlanned=0,$scope.totalRow.indMeas=0,$scope.totalRow.ratExt=0,$scope.totalRow.peaksOfRec=0,$scope.totalRow.QWGageVis=0,$scope.totalRow.contQWGageVis=0,$scope.totalRow.contQWGageDown=0,$scope.totalRow.disQWSamples=0,$scope.totalRow.sedSamples=0,$scope.totalRow.rdgPlan=0,$scope.totalRow.rdgDep=0,$scope.totalRow.rdgRec=0,$scope.totalRow.rdgLost=0,$scope.totalRow.waterPlan=0,$scope.totalRow.waterDep=0,$scope.totalRow.waterRec=0,$scope.totalRow.waterLost=0,$scope.totalRow.wavePlan=0,$scope.totalRow.waveDep=0,$scope.totalRow.waveRec=0,$scope.totalRow.waveLost=0,$scope.totalRow.baroPlan=0,$scope.totalRow.baroDep=0,$scope.totalRow.baroRec=0,$scope.totalRow.baroLost=0,$scope.totalRow.metPlan=0,$scope.totalRow.metDep=0,$scope.totalRow.metRec=0,$scope.totalRow.metLost=0,$scope.totalRow.hwmFlag=0,$scope.totalRow.hwmCol=0;var abbrevs=[];angular.forEach($scope.Statemodel.value,function(state){abbrevs.push(state.state_abbrev)});var abbrevString=abbrevs.join(","),thisDate=$scope.formatDate($scope.genSummary.sum_date);REPORT.getFilteredReports({Event:$scope.EventName.event_id,States:abbrevString,Date:thisDate}).$promise.then(function(result){for(var x=0;x<result.length;x++){var thisRPModel={};thisRPModel.report=result[x],$scope.totalRow.notAcctForEmps+=thisRPModel.report.sw_fieldpers_notacct+thisRPModel.report.wq_fieldpers_notacct,$scope.totalRow.cumPField+=thisRPModel.report.yest_fieldpers+thisRPModel.report.tod_fieldpers+thisRPModel.report.tmw_fieldpers,$scope.totalRow.yesPField+=thisRPModel.report.yest_fieldpers,$scope.totalRow.todPField+=thisRPModel.report.tod_fieldpers,$scope.totalRow.tomPField+=thisRPModel.report.tmw_fieldpers,$scope.totalRow.cumPOffice+=thisRPModel.report.yest_officepers+thisRPModel.report.tod_officepers+thisRPModel.report.tmw_officepers,$scope.totalRow.yesPOffice+=thisRPModel.report.yest_officepers,$scope.totalRow.todPOffice+=thisRPModel.report.tod_officepers,$scope.totalRow.tomPOffice+=thisRPModel.report.tmw_officepers,$scope.totalRow.gageVisits+=thisRPModel.report.gage_visit,$scope.totalRow.gagesDown+=thisRPModel.report.gage_down,$scope.totalRow.disCtoDate+=thisRPModel.report.tot_discharge_meas,$scope.totalRow.disCPlanned+=thisRPModel.report.plan_discharge_meas,$scope.totalRow.indMeas+=thisRPModel.report.plan_indirect_meas,$scope.totalRow.ratExt+=thisRPModel.report.rating_extens,$scope.totalRow.peaksOfRec+=thisRPModel.report.gage_peak_record,$scope.totalRow.disQWSamples+=thisRPModel.report.qw_discr_samples,$scope.totalRow.sedSamples+=thisRPModel.report.coll_sedsamples,$scope.totalRow.rdgPlan+=thisRPModel.report.plan_rapdepl_gage,$scope.totalRow.rdgDep+=thisRPModel.report.dep_rapdepl_gage,$scope.totalRow.rdgRec+=thisRPModel.report.rec_rapdepl_gage,$scope.totalRow.rdgLost+=thisRPModel.report.lost_rapdepl_gage,$scope.totalRow.waterPlan+=thisRPModel.report.plan_wtrlev_sensor,
$scope.totalRow.waterDep+=thisRPModel.report.dep_wtrlev_sensor,$scope.totalRow.waterRec+=thisRPModel.report.rec_wtrlev_sensor,$scope.totalRow.waterLost+=thisRPModel.report.lost_wtrlev_sensor,$scope.totalRow.wavePlan+=thisRPModel.report.plan_wv_sens,$scope.totalRow.waveDep+=thisRPModel.report.dep_wv_sens,$scope.totalRow.waveRec+=thisRPModel.report.rec_wv_sens,$scope.totalRow.waveLost+=thisRPModel.report.lost_wv_sens,$scope.totalRow.baroPlan+=thisRPModel.report.plan_barometric,$scope.totalRow.baroDep+=thisRPModel.report.dep_barometric,$scope.totalRow.baroRec+=thisRPModel.report.rec_barometric,$scope.totalRow.baroLost+=thisRPModel.report.lost_barometric,$scope.totalRow.metPlan+=thisRPModel.report.plan_meteorological,$scope.totalRow.metDep+=thisRPModel.report.dep_meteorological,$scope.totalRow.metRec+=thisRPModel.report.rec_meteorological,$scope.totalRow.metLost+=thisRPModel.report.lost_meteorological,$scope.totalRow.hwmFlag+=thisRPModel.report.hwm_flagged,$scope.totalRow.hwmCol=thisRPModel.report.hwm_collected,$scope.MetricDisplayModel.push(thisRPModel)}$scope.GenRepEventModel={},$scope.GenRepEventModel.Event=$scope.EventName,$scope.GenRepEventModel.EventType=$scope.eventTypes.filter(function(et){return et.event_type_id==$scope.EventName.event_type_id})[0],$scope.GenRepEventModel.EventStat=$scope.eventStats.filter(function(es){return es.event_status_id==$scope.EventName.event_status_id})[0],$scope.GenRepEventModel.Coordinator=$scope.members.filter(function(m){return m.member_id==$scope.GenRepEventModel.Event.event_coordinator})[0],$scope.GenRepEventModel.CoordAgency=$scope.agencies.filter(function(a){return a.agency_id==$scope.GenRepEventModel.Coordinator.agency_id})[0];var modalInstance=$uibModal.open({templateUrl:"MetricsSummary.html",size:"lg",windowClass:"rep-dialog",resolve:{thisReport:function(){return $scope.MetricDisplayModel},thisEvent:function(){return $scope.GenRepEventModel},theTotalRow:function(){return $scope.totalRow}},controller:["$scope","$uibModalInstance","thisReport","thisEvent","theTotalRow",function($scope,$uibModalInstance,thisReport,thisEvent,theTotalRow){$scope.Report=thisReport,$scope.Event=thisEvent,$scope.totals=theTotalRow,$scope.ok=function(){$uibModalInstance.dismiss("cancel")},$scope.print=function(){window.print()}}]});modalInstance.result.then(function(){})})}},$scope.displayContactsSum=function(valid){if(valid){var abbrevs=[];angular.forEach($scope.Statemodel.value,function(state){abbrevs.push(state.state_abbrev)});var abbrevString=abbrevs.join(","),thisDate=$scope.formatDate($scope.genSummary.sum_date);$scope.reportModel=[],$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",REPORT.getReportwithContacts({Event:$scope.EventName.event_id,States:abbrevString,Date:thisDate}).$promise.then(function(result){for(var x=0;x<result.length;x++){var rep={};rep.repID=result[x].reporting_metrics_id,rep.State=result[x].state,rep.report_date=result[x].report_date;var submitter=$scope.members.filter(function(m){return m.member_id==result[x].member_id})[0],submitterAgency=$scope.agencies.filter(function(a){return a.agency_id==submitter.agency_id})[0],sub={};sub.fname=submitter.fname,sub.lname=submitter.lname,sub.email=submitter.email,sub.phone=submitter.phone,sub.agencyname=submitterAgency.agency_name,sub.agencyadd=submitterAgency.city+" "+submitterAgency.state+" "+submitterAgency.zip,rep.submitter=sub,rep.depC=result[x].ReportContacts.filter(function(x){return"Deployed Staff"==x.type})[0],rep.genC=result[x].ReportContacts.filter(function(x){return"General"==x.type})[0],rep.inlC=result[x].ReportContacts.filter(function(x){return"Inland Flood"==x.type})[0],rep.coastC=result[x].ReportContacts.filter(function(x){return"Coastal Flood"==x.type})[0],rep.waterC=result[x].ReportContacts.filter(function(x){return"Water Quality"==x.type})[0],$scope.reportModel.push(rep)}setTimeout(function(){showModal()},3e3);var showModal=function(){var modalInstance=$uibModal.open({templateUrl:"ContactMetricsSummary.html",size:"lg",windowClass:"rep-dialog",resolve:{theseReports:function(){return $scope.reportModel},thisEvent:function(){return $scope.GenRepEventModel={},$scope.GenRepEventModel.Event=$scope.EventName,$scope.GenRepEventModel.EventType=$scope.eventTypes.filter(function(et){return et.event_type_id==$scope.EventName.event_type_id})[0],$scope.GenRepEventModel.EventStat=$scope.eventStats.filter(function(es){return es.event_status_id==$scope.EventName.event_status_id})[0],$scope.GenRepEventModel.Coordinator=$scope.members.filter(function(m){return m.member_id==$scope.EventName.event_coordinator})[0],$scope.GenRepEventModel.CoordAgency=$scope.agencies.filter(function(a){return a.agency_id==$scope.GenRepEventModel.Coordinator.agency_id})[0],$scope.GenRepEventModel}},controller:["$scope","$http","$uibModalInstance","theseReports","thisEvent",function($scope,$http,$uibModalInstance,theseReports,thisEvent){$scope.Reports=theseReports,$scope.Event=thisEvent,$scope.ok=function(){$uibModalInstance.dismiss("cancel")},$scope.print=function(){window.print()}}]});modalInstance.result.then(function(){})}})}},$scope.getCSVfile=function(valid){valid&&($http.defaults.headers.common.Accept="text/csv",REPORT.getReportsCSV({Event:$scope.genSummary.event_id,States:$scope.StateAbbrevs,Date:$scope.genSummary.sum_date}).$promise.then(function(result){var anchor=angular.element("<a/>"),joinedResponse=result.join(""),file=new Blob([joinedResponse],{type:"application/csv"}),fileURL=URL.createObjectURL(file);anchor.href=fileURL,anchor.download="report.csv",anchor.click()}),function(){console.log("error")})})}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("reportingCtrl",["$scope","$rootScope","$cookies","$location","$http","$uibModal","memberReports","allEvents","allStates","allReports","allEventTypes","allEventStatus","allAgencies","SERVER_URL","REPORT","MEMBER",function($scope,$rootScope,$cookies,$location,$http,$uibModal,memberReports,allEvents,allStates,allReports,allEventTypes,allEventStatus,allAgencies,SERVER_URL,REPORT,MEMBER){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Reporting",$rootScope.activeMenu="report",$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){var formIsPopulated=!1;switch(fromState.url){case"/SubmitReport":void 0!==$scope.fullReportForm.submit&&(formIsPopulated=$scope.fullReportForm.submit.$dirty,formIsPopulated=void 0!==$scope.fullReportForm.submit.event_id.$viewValue?!0:formIsPopulated)}formIsPopulated&&(console.log("toState.name: "+toState.name),console.log("fromState.name: "+fromState.name),confirm("Are you sure you want to leave the Submit Report Tab? Any unsaved information will be lost.")?console.log("go to: "+toState.name):(console.log("stay at state: "+fromState.name),$rootScope.stateIsLoading.showLoading=!1,event.preventDefault()))}),$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.formatDate=function(d){var currentDt=new Date(d),mm=currentDt.getMonth()+1;mm=10>mm?"0"+mm:mm;var dd=currentDt.getDate(),yyyy=currentDt.getFullYear(),date=mm+"/"+dd+"/"+yyyy;return date},$scope.serverURL=SERVER_URL,$scope.fullReportForm={},$scope.newReport={},$scope.DeployStaff={},$scope.GenStaff={},$scope.InlandStaff={},$scope.CoastStaff={},$scope.WaterStaff={},$scope.disabled=!0,$scope.needToComplete=!1,$scope.memberIncompletes=memberReports.filter(function(ir){return 0===ir.complete}),$scope.events=allEvents,$scope.states=allStates,$scope.reports=allReports,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.query({id:$cookies.get("mID")},function(response){$scope.MemberLoggedIn=response;var memberAgency=allAgencies.filter(function(a){return a.agency_id==$scope.MemberLoggedIn.agency_id})[0];$scope.MemberLoggedIn.agency_name=memberAgency.agency_name,$scope.MemberLoggedIn.agency_address=memberAgency.address+", "+memberAgency.city+" "+memberAgency.state+" "+memberAgency.zip}).$promise,MEMBER.getAll().$promise.then(function(response){$scope.members=response}),$scope.agencies=allAgencies,$scope.eventTypes=allEventTypes,$scope.eventStats=allEventStatus,$scope.Statemodel={},$scope.genSummary={},$scope.filteredReports=[],$scope.genRepChange=function(){$scope.EventName=$scope.events.filter(function(e){return e.event_id==$scope.genSummary.event_id})[0];var names=[],abbrevs=[];angular.forEach($scope.Statemodel.value,function(state){names.push(state.state_name),abbrevs.push(state.state_abbrev)}),$scope.StateNames=names.join(","),$scope.StateAbbrevs=abbrevs.join(",")},$scope.MetricDisplayModel=[],$scope.displayMetricSum=function(valid){if(valid){$scope.MetricDisplayModel=[],$scope.GenRepEventModel={},$scope.totalRow={},$scope.totalRow.notAcctForEmps=0,$scope.totalRow.cumPField=0,$scope.totalRow.yesPField=0,$scope.totalRow.todPField=0,$scope.totalRow.tomPField=0,$scope.totalRow.cumPOffice=0,$scope.totalRow.yesPOffice=0,$scope.totalRow.todPOffice=0,$scope.totalRow.tomPOffice=0,$scope.totalRow.truck=0,$scope.totalRow.boat=0,$scope.totalRow.other=0,$scope.totalRow.gageVisits=0,$scope.totalRow.gagesDown=0,$scope.totalRow.disCtoDate=0,$scope.totalRow.disCPlanned=0,$scope.totalRow.CheckMeasToDate=0,$scope.totalRow.CheckMeasPlanned=0,$scope.totalRow.indMeas=0,$scope.totalRow.ratExt=0,$scope.totalRow.peaksOfRec=0,$scope.totalRow.QWGageVis=0,$scope.totalRow.contQWGageVis=0,$scope.totalRow.contQWGageDown=0,$scope.totalRow.disQWSamples=0,$scope.totalRow.sedSamples=0,$scope.totalRow.rdgPlan=0,$scope.totalRow.rdgDep=0,$scope.totalRow.rdgRec=0,$scope.totalRow.rdgLost=0,$scope.totalRow.waterPlan=0,$scope.totalRow.waterDep=0,$scope.totalRow.waterRec=0,$scope.totalRow.waterLost=0,$scope.totalRow.wavePlan=0,$scope.totalRow.waveDep=0,$scope.totalRow.waveRec=0,$scope.totalRow.waveLost=0,$scope.totalRow.baroPlan=0,$scope.totalRow.baroDep=0,$scope.totalRow.baroRec=0,$scope.totalRow.baroLost=0,$scope.totalRow.metPlan=0,$scope.totalRow.metDep=0,$scope.totalRow.metRec=0,$scope.totalRow.metLost=0,$scope.totalRow.hwmFlag=0,$scope.totalRow.hwmCol=0;var abbrevs=[];angular.forEach($scope.Statemodel.value,function(state){abbrevs.push(state.state_abbrev)});var abbrevString=abbrevs.join(","),thisDate=$scope.formatDate($scope.genSummary.sum_date);REPORT.getFilteredReports({Event:$scope.EventName.event_id,States:abbrevString,Date:thisDate}).$promise.then(function(result){for(var x=0;x<result.length;x++){var thisRPModel={};thisRPModel.report=result[x],$scope.totalRow.notAcctForEmps+=thisRPModel.report.sw_fieldpers_notacct+thisRPModel.report.wq_fieldpers_notacct,$scope.totalRow.cumPField+=thisRPModel.report.yest_fieldpers+thisRPModel.report.tod_fieldpers+thisRPModel.report.tmw_fieldpers,$scope.totalRow.yesPField+=thisRPModel.report.yest_fieldpers,$scope.totalRow.todPField+=thisRPModel.report.tod_fieldpers,$scope.totalRow.tomPField+=thisRPModel.report.tmw_fieldpers,$scope.totalRow.cumPOffice+=thisRPModel.report.yest_officepers+thisRPModel.report.tod_officepers+thisRPModel.report.tmw_officepers,$scope.totalRow.yesPOffice+=thisRPModel.report.yest_officepers,$scope.totalRow.todPOffice+=thisRPModel.report.tod_officepers,$scope.totalRow.tomPOffice+=thisRPModel.report.tmw_officepers,$scope.totalRow.gageVisits+=thisRPModel.report.gage_visit,$scope.totalRow.gagesDown+=thisRPModel.report.gage_down,$scope.totalRow.disCtoDate+=thisRPModel.report.tot_discharge_meas,$scope.totalRow.disCPlanned+=thisRPModel.report.plan_discharge_meas,$scope.totalRow.indMeas+=thisRPModel.report.plan_indirect_meas,$scope.totalRow.ratExt+=thisRPModel.report.rating_extens,$scope.totalRow.peaksOfRec+=thisRPModel.report.gage_peak_record,$scope.totalRow.disQWSamples+=thisRPModel.report.qw_discr_samples,$scope.totalRow.sedSamples+=thisRPModel.report.coll_sedsamples,$scope.totalRow.rdgPlan+=thisRPModel.report.plan_rapdepl_gage,$scope.totalRow.rdgDep+=thisRPModel.report.dep_rapdepl_gage,$scope.totalRow.rdgRec+=thisRPModel.report.rec_rapdepl_gage,$scope.totalRow.rdgLost+=thisRPModel.report.lost_rapdepl_gage,$scope.totalRow.waterPlan+=thisRPModel.report.plan_wtrlev_sensor,$scope.totalRow.waterDep+=thisRPModel.report.dep_wtrlev_sensor,$scope.totalRow.waterRec+=thisRPModel.report.rec_wtrlev_sensor,$scope.totalRow.waterLost+=thisRPModel.report.lost_wtrlev_sensor,$scope.totalRow.wavePlan+=thisRPModel.report.plan_wv_sens,$scope.totalRow.waveDep+=thisRPModel.report.dep_wv_sens,$scope.totalRow.waveRec+=thisRPModel.report.rec_wv_sens,$scope.totalRow.waveLost+=thisRPModel.report.lost_wv_sens,$scope.totalRow.baroPlan+=thisRPModel.report.plan_barometric,$scope.totalRow.baroDep+=thisRPModel.report.dep_barometric,$scope.totalRow.baroRec+=thisRPModel.report.rec_barometric,$scope.totalRow.baroLost+=thisRPModel.report.lost_barometric,$scope.totalRow.metPlan+=thisRPModel.report.plan_meteorological,$scope.totalRow.metDep+=thisRPModel.report.dep_meteorological,$scope.totalRow.metRec+=thisRPModel.report.rec_meteorological,$scope.totalRow.metLost+=thisRPModel.report.lost_meteorological,$scope.totalRow.hwmFlag+=thisRPModel.report.hwm_flagged,$scope.totalRow.hwmCol=thisRPModel.report.hwm_collected,$scope.MetricDisplayModel.push(thisRPModel)}$scope.GenRepEventModel={},$scope.GenRepEventModel.Event=$scope.EventName,$scope.GenRepEventModel.EventType=$scope.eventTypes.filter(function(et){return et.event_type_id==$scope.EventName.event_type_id})[0],$scope.GenRepEventModel.EventStat=$scope.eventStats.filter(function(es){return es.event_status_id==$scope.EventName.event_status_id})[0],$scope.GenRepEventModel.Coordinator=$scope.members.filter(function(m){return m.member_id==$scope.GenRepEventModel.Event.event_coordinator})[0],$scope.GenRepEventModel.CoordAgency=$scope.agencies.filter(function(a){return a.agency_id==$scope.GenRepEventModel.Coordinator.agency_id})[0];var modalInstance=$uibModal.open({templateUrl:"MetricsSummary.html",size:"lg",windowClass:"rep-dialog",resolve:{thisReport:function(){return $scope.MetricDisplayModel},thisEvent:function(){return $scope.GenRepEventModel},theTotalRow:function(){return $scope.totalRow}},controller:["$scope","$uibModalInstance","thisReport","thisEvent","theTotalRow",function($scope,$uibModalInstance,thisReport,thisEvent,theTotalRow){$scope.Report=thisReport,$scope.Event=thisEvent,$scope.totals=theTotalRow,$scope.ok=function(){$uibModalInstance.dismiss("cancel")},$scope.print=function(){window.print()}}]});modalInstance.result.then(function(){})})}},$scope.displayContactsSum=function(valid){if(valid){var abbrevs=[];angular.forEach($scope.Statemodel.value,function(state){abbrevs.push(state.state_abbrev)});var abbrevString=abbrevs.join(","),thisDate=$scope.formatDate($scope.genSummary.sum_date);$scope.reportModel=[],$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",REPORT.getReportwithContacts({Event:$scope.EventName.event_id,States:abbrevString,Date:thisDate}).$promise.then(function(result){for(var x=0;x<result.length;x++){var rep={};rep.repID=result[x].reporting_metrics_id,rep.State=result[x].state,rep.report_date=result[x].report_date;var submitter=$scope.members.filter(function(m){return m.member_id==result[x].member_id})[0],submitterAgency=$scope.agencies.filter(function(a){return a.agency_id==submitter.agency_id})[0],sub={};sub.fname=submitter.fname,sub.lname=submitter.lname,sub.email=submitter.email,sub.phone=submitter.phone,sub.agencyname=submitterAgency.agency_name,sub.agencyadd=submitterAgency.city+" "+submitterAgency.state+" "+submitterAgency.zip,rep.submitter=sub,rep.depC=result[x].ReportContacts.filter(function(x){return"Deployed Staff"==x.type})[0],rep.genC=result[x].ReportContacts.filter(function(x){return"General"==x.type})[0],rep.inlC=result[x].ReportContacts.filter(function(x){return"Inland Flood"==x.type})[0],rep.coastC=result[x].ReportContacts.filter(function(x){return"Coastal Flood"==x.type})[0],rep.waterC=result[x].ReportContacts.filter(function(x){return"Water Quality"==x.type})[0],$scope.reportModel.push(rep)}setTimeout(function(){showModal()},3e3);var showModal=function(){var modalInstance=$uibModal.open({templateUrl:"ContactMetricsSummary.html",size:"lg",windowClass:"rep-dialog",resolve:{theseReports:function(){return $scope.reportModel},thisEvent:function(){return $scope.GenRepEventModel={},$scope.GenRepEventModel.Event=$scope.EventName,$scope.GenRepEventModel.EventType=$scope.eventTypes.filter(function(et){return et.event_type_id==$scope.EventName.event_type_id})[0],$scope.GenRepEventModel.EventStat=$scope.eventStats.filter(function(es){return es.event_status_id==$scope.EventName.event_status_id})[0],$scope.GenRepEventModel.Coordinator=$scope.members.filter(function(m){return m.member_id==$scope.EventName.event_coordinator})[0],$scope.GenRepEventModel.CoordAgency=$scope.agencies.filter(function(a){return a.agency_id==$scope.GenRepEventModel.Coordinator.agency_id})[0],$scope.GenRepEventModel}},controller:["$scope","$http","$uibModalInstance","theseReports","thisEvent",function($scope,$http,$uibModalInstance,theseReports,thisEvent){$scope.Reports=theseReports,$scope.Event=thisEvent,$scope.ok=function(){$uibModalInstance.dismiss("cancel")},$scope.print=function(){window.print()}}]});modalInstance.result.then(function(){})}})}},$scope.getCSVfile=function(valid){valid&&($http.defaults.headers.common.Accept="text/csv",REPORT.getReportsCSV({Event:$scope.genSummary.event_id,States:$scope.StateAbbrevs,Date:$scope.genSummary.sum_date}).$promise.then(function(result){var anchor=angular.element("<a/>"),joinedResponse=result.join(""),file=new Blob([joinedResponse],{type:"application/csv"}),fileURL=URL.createObjectURL(file);anchor.href=fileURL,anchor.download="report.csv",anchor.click()}),function(){console.log("error")})})}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("ProjAlertModalCtrl",["$scope","$uibModalInstance","ProjAlert",function($scope,$uibModalInstance,ProjAlert){$scope.ProjAlertParts=ProjAlert,$scope.ok=function(){$uibModalInstance.dismiss("cancel")}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("confirmReportModalCtrl",["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("peakModalCtrl",["$scope","$rootScope","$cookies","$http","$uibModalInstance","$uibModal","SERVER_URL","allVertDatums","allCollectConditions","thisPeak","peakSite","allMembers","allEventHWMs","allSiteSensors","allSiteFiles","thisPeakDFs","DATA_FILE","PEAK","HWM",function($scope,$rootScope,$cookies,$http,$uibModalInstance,$uibModal,SERVER_URL,allVertDatums,allCollectConditions,thisPeak,peakSite,allMembers,allEventHWMs,allSiteSensors,allSiteFiles,thisPeakDFs,DATA_FILE,PEAK,HWM){$scope.serverURL=SERVER_URL,$scope.VDatumsList=allVertDatums,$scope.thisSite=peakSite,$scope.memberList=allMembers,$scope.loggedInRole=$cookies.get("usersRole");for(var determineDFPresent=function(f){for(var x=0;x<f.length;x++)if(2==f[x].filetype_id)return!0;return!1},sf=0;sf<allSiteFiles.length;sf++)("DataFile File"==allSiteFiles[sf].fileBelongsTo||"Sensor File"==allSiteFiles[sf].fileBelongsTo)&&(allSiteFiles[sf].selected=!1);for(var s=0;s<allSiteSensors.length;s++){var correctOrderSS=[],sensorStatuses=allSiteSensors[s].instrument_status;if(sensorStatuses.length>1){var proposedStat=sensorStatuses.filter(function(ps){return"Proposed"==ps.status})[0],deployedStat=sensorStatuses.filter(function(ps){return"Deployed"==ps.status})[0],retLostStat=sensorStatuses.filter(function(ps){return"Retrieved"==ps.status||"Lost"==ps.status})[0];retLostStat&&correctOrderSS.push(retLostStat),deployedStat&&correctOrderSS.push(deployedStat),proposedStat&&correctOrderSS.push(proposedStat)}else correctOrderSS.push(sensorStatuses[0]);allSiteSensors[s].instrument_status=[],allSiteSensors[s].instrument_status=correctOrderSS}$scope.eventSiteHWMs=allEventHWMs.filter(function(h){return h.site_id==peakSite.site_id}),angular.forEach($scope.eventSiteHWMs,function(esh){esh.selected=!1,esh.files=allSiteFiles.filter(function(sf){return sf.hwm_id==esh.hwm_id&&"HWM File"==sf.fileBelongsTo})}),$scope.eventSiteSensors=allSiteSensors.filter(function(s){return s.event_id==$cookies.get("SessionEventID")});for(var evSiteSen=0;evSiteSen<$scope.eventSiteSensors.length;evSiteSen++)$scope.eventSiteSensors[evSiteSen].CollectCondition=null!==$scope.eventSiteSensors[evSiteSen].inst_collection_id&&$scope.eventSiteSensors[evSiteSen].inst_collection_id>0?allCollectConditions.filter(function(cc){return cc.id==$scope.eventSiteSensors[evSiteSen].inst_collection_id})[0].condition:"",$scope.eventSiteSensors[evSiteSen].isRetrieved="Retrieved"==$scope.eventSiteSensors[evSiteSen].instrument_status[0].status?!0:!1,$scope.eventSiteSensors[evSiteSen].files=allSiteFiles.filter(function(sf){return sf.instrument_id==$scope.eventSiteSensors[evSiteSen].instrument_id&&("DataFile File"==sf.fileBelongsTo||"Sensor File"==sf.fileBelongsTo)}),(2==$scope.eventSiteSensors[evSiteSen].sensor_type_id||5==$scope.eventSiteSensors[evSiteSen].sensor_type_id||6==$scope.eventSiteSensors[evSiteSen].sensor_type_id)&&(0===$scope.eventSiteSensors[evSiteSen].files.length?$scope.eventSiteSensors[evSiteSen].NeedDF=!0:determineDFPresent($scope.eventSiteSensors[evSiteSen].files)||($scope.eventSiteSensors[evSiteSen].NeedDF=!0));$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.LoggedInMember=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.chosenHWMList=[],$scope.removedChosenHWMList=[],$scope.chosenDFList=[],$scope.removedChosenDFList=[],$scope.hwmDetail=!1,$scope.HWMBox={},$scope.sensorDetail=!1,$scope.SensorBox={},$scope.dataFileDetail=!1,$scope.DFBox={},$scope.aPeak={};var getDateTimeParts=function(d){var y=d.substr(0,4),m=d.substr(5,2)-1,da=d.substr(8,2),h=d.substr(11,2),mi=d.substr(14,2),sec=d.substr(17,2),theDate=new Date(y,m,da,h,mi,sec);return theDate},getTimeZoneStamp=function(dsent){var d,sendThis=[];d=void 0!==dsent?new Date(dsent):new Date;var offset=d.toString().substring(35),zone="";switch(offset.substr(0,3)){case"Cen":zone="CST";break;case"Eas":zone="EST";break;case"Mou":zone="MST";break;case"Pac":zone="PST"}return sendThis=[d,zone]};$scope.dateOptions={startingDay:1,showWeeks:!1},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0};var dealWithTimeStampb4Send=function(){if("UTC"!=$scope.aPeak.time_zone){var utcDateTime=new Date($scope.aPeak.peak_date).toUTCString();$scope.aPeak.peak_date=utcDateTime,$scope.aPeak.time_zone="UTC"}else{var i=$scope.aPeak.peak_date.toString().indexOf("GMT")+3;$scope.aPeak.peak_date=$scope.aPeak.peak_date.toString().substring(0,i)}};if($scope.cancel=function(){$rootScope.stateIsLoading.showLoading=!1,$uibModalInstance.dismiss("cancel")},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},"empty"!=thisPeak){$scope.aPeak=angular.copy(thisPeak),$scope.aPeak.peak_date={date:getDateTimeParts($scope.aPeak.peak_date),time:getDateTimeParts($scope.aPeak.peak_date)},$scope.PeakCreator=allMembers.filter(function(m){return m.member_id==$scope.aPeak.member_id})[0];for(var h=0;h<$scope.eventSiteHWMs.length;h++)$scope.eventSiteHWMs[h].peak_summary_id==$scope.aPeak.peak_summary_id&&($scope.eventSiteHWMs[h].selected=!0);for(var ess=0;ess<$scope.eventSiteSensors.length;ess++)for(var essI=ess,df=0;df<$scope.eventSiteSensors[essI].files.length;df++){var isThere=thisPeakDFs.filter(function(pdf){return pdf.data_file_id==$scope.eventSiteSensors[essI].files[df].data_file_id})[0];void 0!==isThere&&($scope.eventSiteSensors[essI].files[df].selected=!0)}}else{var timeParts=getTimeZoneStamp();$scope.aPeak={peak_date:{date:timeParts[0],time:timeParts[0]},time_zone:timeParts[1],member_id:$cookies.get("mID")},$scope.PeakCreator=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0]}$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})};var formatSelectedHWM=function(h){var fhwm={};return fhwm.approval_id=h.approval_id,fhwm.hwm_label=h.hwm_label,fhwm.bank=h.bank,fhwm.elev_ft=h.elev_ft,fhwm.event_id=h.event_id,fhwm.flag_date=h.flag_date,fhwm.flag_member_id=h.flag_member_id,fhwm.hcollect_method_id=h.hcollect_method_id,fhwm.hdatum_id=h.hdatum_id,fhwm.height_above_gnd=h.height_above_gnd,fhwm.hwm_environment=h.hwm_environment,fhwm.hwm_id=h.hwm_id,fhwm.hwm_locationdescription=h.hwm_locationdescription,fhwm.hwm_notes=h.hwm_notes,fhwm.hwm_uncertainty=h.hwm_uncertainty,fhwm.hwm_quality_id=h.hwm_quality_id,fhwm.hwm_type_id=h.hwm_type_id,fhwm.latitude_dd=h.latitude_dd,fhwm.longitude_dd=h.longitude_dd,fhwm.marker_id=h.marker_id,fhwm.peak_summary_id=h.peak_summary_id,fhwm.site_id=h.site_id,fhwm.stillwater="No"==h.stillwater?0:1,fhwm.survey_date=h.survey_date,fhwm.survey_member_id=h.survey_member_id,fhwm.vcollect_method_id=h.vcollect_method_id,fhwm.vdatum_id=h.vdatum_id,fhwm.waterbody=h.waterbody,fhwm};$scope.addHWM=function(h){var aHWM=formatSelectedHWM(h);if(h.selected===!0)$scope.chosenHWMList.push(aHWM);else if(void 0!==$scope.aPeak.peak_summary_id&&$scope.removedChosenHWMList.push(dataFile),$scope.chosenHWMList.length>0){var ind=$scope.chosenHWMList.map(function(hwm){return hwm.hwm_id}).indexOf(aHWM.hwm_id);$scope.chosenHWMList.splice(ind,1)}},$scope.showHWMDetails=function(h){$scope.hwmDetail=!0,$scope.sensorDetail=!1,$scope.dataFileDetail=!1,$scope.HWMBox=h},$scope.primaryHWM=function(h){var setPrimHWM=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Set as Primary</h3></div><div class="modal-body"><p>Are you sure you want to set this as the Primary HWM? Doing so will populate the Peak Date (not including time), Stage, Vertical Datum and Height Above Ground.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="SetIt()">Set as Primary</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.cancel=function(){$uibModalInstance.dismiss()},$scope.SetIt=function(){$uibModalInstance.close("Yes")}}],size:"sm"});setPrimHWM.result.then(function(setIt){if("Yes"==setIt){$scope.aPeak.peak_date.date=new Date(h.flag_date),$scope.aPeak.peak_stage=h.elev_ft,$scope.aPeak.vdatum_id=h.vdatum_id,$scope.aPeak.height_above_gnd=h.height_above_gnd;var hIndex=$scope.eventSiteHWMs.indexOf(h);$scope.eventSiteHWMs[hIndex].selected=!0}})},$scope.closeDetail=function(){$scope.sensorDetail=!1,$scope.hwmDetail=!1,$scope.dataFileDetail=!1},$scope.addDataFile=function(datafile){var dataFile={};DATA_FILE.query({id:datafile.data_file_id}).$promise.then(function(response){if(dataFile=response,datafile.selected===!0)$scope.chosenDFList.push(dataFile);else if(void 0!==$scope.aPeak.peak_summary_id&&$scope.removedChosenDFList.push(dataFile),$scope.chosenDFList.length>0){var ind=$scope.chosenDFList.map(function(df){return df.data_file_id}).indexOf(datafile.data_file_id);$scope.chosenDFList.splice(ind,1)}})},$scope.showSensorDetails=function(s){$scope.sensorDetail=!0,$scope.hwmDetail=!1,$scope.dataFileDetail=!1,$scope.SensorBox=s},$scope.showDataFileDetails=function(f){DATA_FILE.query({id:f.data_file_id},function(response){$scope.DFBox=response,$scope.DFBox.filePath=f.path,$scope.DFBox.fileID=f.file_id,$scope.DFBox.fileDesc=f.description,$scope.DFBox.processedBy=allMembers.filter(function(m){return m.member_id==response.processor_id})[0],$scope.DFBox.nwisFile=1==f.is_nwis?!0:!1,$scope.DFBox.fileURL=f.name,$scope.dataFileDetail=!0,$scope.hwmDetail=!1,$scope.sensorDetail=!1})},$scope.primaryDataFile=function(f){var setPrimeDF=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Set as Primary</h3></div><div class="modal-body"><p>Are you sure you want to set this as the Primary Data file?</p><p>(Coming soon: Script processing to populate the Peak date, time and time zone, Stage, Vertical Datum and Height above ground)</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="SetIt()">Set as Primary</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.cancel=function(){$uibModalInstance.dismiss()},$scope.SetIt=function(){$uibModalInstance.close("Yes")}}],size:"sm"});setPrimeDF.result.then(function(setIt){if("Yes"==setIt){var sens=$scope.eventSiteSensors.filter(function(s){return s.instrument_id==f.instrument_id})[0],sIndex=$scope.eventSiteSensors.indexOf(sens),fIndex=sens.files.indexOf(f);$scope.eventSiteSensors[sIndex].files[fIndex].selected=!0}})},$scope.savePeak=function(valid){if(valid){var updatedPeak={},datetime=new Date($scope.aPeak.peak_date.date.getFullYear(),$scope.aPeak.peak_date.date.getMonth(),$scope.aPeak.peak_date.date.getDate(),$scope.aPeak.peak_date.time.getHours(),$scope.aPeak.peak_date.time.getMinutes(),$scope.aPeak.peak_date.time.getSeconds());$scope.aPeak.peak_date=datetime,dealWithTimeStampb4Send(),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",PEAK.update({id:$scope.aPeak.peak_summary_id},$scope.aPeak).$promise.then(function(response){if($scope.removedChosenDFList.length>0)for(var remd=0;remd<$scope.removedChosenDFList.length;remd++)$scope.removedChosenDFList[remd].peak_summary_id=null,DATA_FILE.update({id:$scope.removedChosenDFList[remd].data_file_id},$scope.removedChosenDFList[remd]).$promise;if($scope.removedChosenHWMList.length>0)for(var remh=0;remh<$scope.removedChosenHWMList.length;remh++)$scope.removedChosenHWMList[remh].peak_summary_id=null,HWM.update({id:$scope.removedChosenHWMList[remh].data_file_id},$scope.removedChosenHWMList[remh]).$promise;for(var addh=0;addh<$scope.chosenHWMList.length;addh++)$scope.chosenHWMList[addh].peak_summary_id=response.peak_summary_id,HWM.update({id:$scope.chosenHWMList[addh].hwm_id},$scope.chosenHWMList[addh]).$promise;for(var addd=0;addd<$scope.chosenDFList.length;addd++)$scope.chosenDFList[addd].peak_summary_id=response.peak_summary_id,DATA_FILE.update({id:$scope.chosenDFList[addd].data_file_id},$scope.chosenDFList[addd]).$promise;toastr.success("Peak updated"),updatedPeak=response;var sendBack=[updatedPeak,"updated"];$uibModalInstance.close(sendBack)})}};var updateDFwoPeakID=function(df_id){DATA_FILE.query({id:df_id}).$promise.then(function(res){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",res.peak_summary_id=null,DATA_FILE.update({id:res.data_file_id},res).$promise})};$scope.deletePeak=function(){var deletePeakMdl=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Remove Peak</h3></div><div class="modal-body"><p>Are you sure you want to delete this Peak?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="Ok()">OK</button><button class="btn btn-warning" ng-click="cancel()">Cancel</button></div>',
controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.Ok=function(){$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss()}}],size:"sm"});deletePeakMdl.result.then(function(){var datetime=($scope.aPeak.peak_summary_id,new Date($scope.aPeak.peak_date.date.getFullYear(),$scope.aPeak.peak_date.date.getMonth(),$scope.aPeak.peak_date.date.getDate(),$scope.aPeak.peak_date.time.getHours(),$scope.aPeak.peak_date.time.getMinutes(),$scope.aPeak.peak_date.time.getSeconds()));$scope.aPeak.peak_date=datetime,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",PEAK["delete"]({id:$scope.aPeak.peak_summary_id}).$promise.then(function(){for(var i=0;i<$scope.eventSiteSensors.length;i++)for(var thisS=$scope.eventSiteSensors[i],f=0;f<thisS.files.length;f++){var thisF=thisS.files[f];thisF.selected&&updateDFwoPeakID(thisF.data_file_id)}for(var h=0;h<$scope.eventSiteHWMs.length;h++){var thisH=$scope.eventSiteHWMs[h];if(thisH.selected){thisH.peak_summary_id=null;var updateThisHWM=formatSelectedHWM(thisH);HWM.update({id:thisH.hwm_id},updateThisHWM).$promise}}toastr.success("Peak Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.createPeak=function(valid){var isHwmChecked=!1,isDFChecked=!1;if(angular.forEach($scope.eventSiteHWMs,function(shwm){shwm.selected&&(isHwmChecked=!0)}),angular.forEach($scope.eventSiteSensors,function(ssen){for(var fI=0;fI<ssen.files.length;fI++)ssen.files[fI].selected&&(isDFChecked=!0,fI=ssen.files.length)}),isHwmChecked||isDFChecked){if(valid){var createdPeak={},datetime=new Date($scope.aPeak.peak_date.date.getFullYear(),$scope.aPeak.peak_date.date.getMonth(),$scope.aPeak.peak_date.date.getDate(),$scope.aPeak.peak_date.time.getHours(),$scope.aPeak.peak_date.time.getMinutes(),$scope.aPeak.peak_date.time.getSeconds());$scope.aPeak.peak_date=datetime,dealWithTimeStampb4Send(),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",PEAK.save($scope.aPeak).$promise.then(function(response){createdPeak=response;for(var h=0;h<$scope.chosenHWMList.length;h++)$scope.chosenHWMList[h].peak_summary_id=response.peak_summary_id,HWM.update({id:$scope.chosenHWMList[h].hwm_id},$scope.chosenHWMList[h]).$promise;for(var d=0;d<$scope.chosenDFList.length;d++)$scope.chosenDFList[d].peak_summary_id=response.peak_summary_id,DATA_FILE.update({id:$scope.chosenDFList[d].data_file_id},$scope.chosenDFList[d]).$promise;toastr.success("Peak created");var sendBack=[createdPeak,"created"];$uibModalInstance.close(sendBack)})}}else{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>You must choose at least one HWM or Data File to use for interpretation for this Peak Summary.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="Ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.Ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}},$scope.showIncompleteDFInfo=function(){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Incomplete Data File</h3></div><div class="modal-body"><p>All RDGs, Met Station, and Rain Gage sensors require data file information in order to use as primary in the Peak summary.</p><p>Please revisit the Retrieved Sensor and click on NWIS Data Connection to add a link to the NWIS data if you want to use as primary.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="Ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.Ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})},$scope.showIncompleteHWMInfo=function(){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Incomplete HWM</h3></div><div class="modal-body"><p>Survey date and elevation are required in order to use as primary in the Peak summary.</p><p>Please revisit the HWM and add Survey date and elevation if you want to use as primary.</p><p>The HWM can be used for interpreation withouth a final elevation.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="Ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.Ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})},$scope.showRetrieveInfo=function(){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Deployed Sensor</h3></div><div class="modal-body"><p>This senosr needs to be retrieved before a Peak can be created.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="Ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.Ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})},$rootScope.stateIsLoading.showLoading=!1}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("peakCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","thisSite","Site_Files","thisSitePeaks","allVertDatums","allHWMQualities","allHWMTypes","PEAK","HWM","MEMBER","SITE","INST_COLL_CONDITION",function($scope,$rootScope,$cookies,$location,$state,$http,$uibModal,$filter,$timeout,thisSite,Site_Files,thisSitePeaks,allVertDatums,allHWMQualities,allHWMTypes,PEAK,HWM,MEMBER,SITE,INST_COLL_CONDITION){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($scope.peakCount={total:thisSitePeaks.length},$scope.SitePeaks=thisSitePeaks,$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1,void 0!==newValue?($scope.SitePeaks=thisSitePeaks.filter(function(p){return p.event_name==$scope.sessionEventName}),$scope.peakCount={total:$scope.SitePeaks.length}):($scope.SitePeaks=thisSitePeaks,$scope.peakCount={total:$scope.SitePeaks.length})}),$scope.showPeakModal=function(peakClicked){$rootScope.stateIsLoading.showLoading=!0;var indexClicked=$scope.SitePeaks.indexOf(peakClicked),modalInstance=$uibModal.open({templateUrl:"PEAKmodal.html",controller:"peakModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{allCollectConditions:function(){return INST_COLL_CONDITION.getAll().$promise},allVertDatums:function(){return allVertDatums},thisPeak:function(){return 0!==peakClicked?PEAK.query({id:peakClicked.peak_summary_id}).$promise:"empty"},thisPeakDFs:function(){return 0!==peakClicked?PEAK.getPeakSummaryDFs({id:peakClicked.peak_summary_id}).$promise:void 0},peakSite:function(){return thisSite},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise},allEventHWMs:function(){return HWM.getFilteredHWMs({Event:$cookies.get("SessionEventID"),EventStatus:0}).$promise},allSiteFiles:function(){return Site_Files.getAllSiteFiles()},allSiteSensors:function(){return SITE.getSiteSensors({id:thisSite.site_id}).$promise}}});modalInstance.result.then(function(createdPeak){"created"==createdPeak[1]&&($scope.SitePeaks.push(createdPeak[0]),$scope.peakCount.total=$scope.SitePeaks.length),"updated"==createdPeak[1]&&($scope.SitePeaks[indexClicked]=createdPeak[0]),"deleted"==createdPeak[1]&&($scope.SitePeaks.splice(indexClicked,1),$scope.peakCount.total=$scope.SitePeaks.length),$rootScope.stateIsLoading.showLoading=!1})})}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("OPmodalCtrl",["$scope","$rootScope","$cookies","$http","$sce","$uibModalInstance","$uibModal","SERVER_URL","FILE_STAMP","Site_Files","allDropdowns","thisOP","thisOPControls","opSite","agencyList","allMembers","OBJECTIVE_POINT","OP_CONTROL_IDENTIFIER","OP_MEASURE","SOURCE","FILE",function($scope,$rootScope,$cookies,$http,$sce,$uibModalInstance,$uibModal,SERVER_URL,FILE_STAMP,Site_Files,allDropdowns,thisOP,thisOPControls,opSite,agencyList,allMembers,OBJECTIVE_POINT,OP_CONTROL_IDENTIFIER,OP_MEASURE,SOURCE,FILE){$scope.serverURL=SERVER_URL,$scope.view={OPval:"detail"},$scope.fileIsUploading=!1,$scope.dl={dlOpen:!0,dlFileOpen:!1},$scope.OPTypeList=allDropdowns[0],$scope.HDList=allDropdowns[1],$scope.HCollectMethodList=allDropdowns[2],$scope.VDatumList=allDropdowns[3],$scope.VCollectMethodList=allDropdowns[4],$scope.OPQualityList=allDropdowns[5],$scope.fileTypeList=allDropdowns[6],$scope.htmlDescriptionTip=$sce.trustAsHtml("Please describe location and type of mark <em>ie. 'chiseled square on third sidewalk block on the south side of the street'</em>"),$scope.HWMfileIsUploading=!1,$scope.OP={},$scope.removeOPCarray=[],$scope.thisOPsite=opSite,$scope.addedIdentifiers=[],$scope.showControlIDinput=!1,$scope.DMS={},$scope.allSFiles=Site_Files.getAllSiteFiles(),$scope.OPFiles="empty"!==thisOP?$scope.allSFiles.filter(function(sf){return sf.objective_point_id==thisOP.objective_point_id}):[],$scope.opImageFiles=$scope.OPFiles.filter(function(opf){return 1===opf.filetype_id}),$scope.showFileForm=!1,$scope.UnquantChecked=function(){1==$scope.opCopy.unquantified&&($scope.opCopy.uncertainty="")},$scope.stamp=FILE_STAMP.getStamp(),$scope.fileItemExists=!0,$scope.saveFileUpload=function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.sFileIsUploading=!0;var fileParts={FileEntity:{file_id:$scope.aFile.file_id,name:$scope.aFile.name,description:$scope.aFile.description,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,file_date:$scope.aFile.file_date,hwm_id:$scope.aFile.hwm_id,site_id:$scope.aFile.site_id,filetype_id:$scope.aFile.filetype_id,source_id:$scope.aFile.source_id,path:$scope.aFile.path,data_file_id:$scope.aFile.data_file_id,instrument_id:$scope.aFile.instrument_id,photo_date:$scope.aFile.photo_date,is_nwis:$scope.aFile.is_nwis,objective_point_id:$scope.aFile.objective_point_id},File:void 0!==$scope.aFile.File1?$scope.aFile.File1:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Objective Point File",$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),FILE_STAMP.setStamp(),$scope.stamp=FILE_STAMP.getStamp(),$scope.isPhoto=$scope.aFile.File1.type.indexOf("image")>-1?!0:!1,$scope.aFile.name=fresponse.name,$scope.aFile.path=fresponse.path,void 0!==$scope.aFile.File1&&($scope.aFile.File=$scope.aFile.File1,$scope.aFile.File1=void 0),$scope.OPFiles.splice($scope.existFileIndex,1),$scope.OPFiles.push(fresponse),1===fresponse.filetype_id&&($scope.opImageFiles.splice($scope.existFileIndex,1),$scope.opImageFiles.push(fresponse)),$scope.allSFiles[$scope.allSFileIndex]=fresponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.sFileIsUploading=!1,$scope.fileItemExists=!0},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})},$scope.showFile=function(file){if($scope.fileTypes=$scope.fileTypeList,$scope.agencies=agencyList,$scope.existFileIndex=-1,$scope.existIMGFileIndex=-1,$scope.allSFileIndex=-1,$scope.aFile={},$scope.aSource={},0!==file){if($scope.existFileIndex=$scope.OPFiles.indexOf(file),$scope.allSFileIndex=$scope.allSFiles.indexOf(file),$scope.existIMGFileIndex=$scope.opImageFiles.length>0?$scope.opImageFiles.indexOf(file):-1,$scope.aFile=angular.copy(file),$scope.aFile.fileType=$scope.fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,FILE.getFileItem({id:$scope.aFile.file_id}).$promise.then(function(response){$scope.fileItemExists=response.Length>0?!0:!1}),void 0!==$scope.aFile.name){var fI=$scope.aFile.name.lastIndexOf("."),fileExt=$scope.aFile.name.substring(fI+1);$scope.isPhoto=fileExt.match(/(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)?!0:!1}$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),null!==file.source_id&&SOURCE.query({id:file.source_id}).$promise.then(function(s){$scope.aSource=s,$scope.aSource.FULLname=$scope.aSource.source_name,1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)})}else $scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname;$scope.showFileForm=!0,$scope.updateAgencyForCaption=function(){1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}},$scope.createFile=function(valid){if(valid&&($scope.fileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",null!==$scope.aSource.agency_id)){var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,photo_date:$scope.aFile.photo_date,description:$scope.aFile.description,site_id:$scope.thisOPsite.site_id,source_id:response.source_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,objective_point_id:$scope.OP.objective_point_id},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Objective Point File",$scope.OPFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),FILE_STAMP.setStamp(),1===fresponse.filetype_id&&$scope.opImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.fileIsUploading=!1},function(errorResponse){$scope.fileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.fileIsUploading=!1,toastr.error("Error saving Source info: "+errorResponse.statusText)})}},$scope.saveFile=function(valid){if(valid){$scope.fileIsUploading=!0;{$scope.aFile.fileBelongsTo}if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.aSource.source_id){var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){$scope.aFile.source_id=response.source_id,FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="Objective Point File",$scope.OPFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.fileIsUploading=!1},function(errorResponse){$scope.fileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.fileIsUploading=!1,toastr.error("Error saving source: "+errorResponse.statusText)})}}},$scope.deleteFile=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.OPFiles.splice($scope.existFileIndex,1),$scope.allSFiles.splice($scope.allSFileIndex,1),$scope.opImageFiles.splice($scope.existIMGFileIndex,1),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelFile=function(){$scope.aFile={},$scope.aSource={},$scope.showFileForm=!1};var makeAdate=function(d){var aDate=new Date;""!==d&&void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};"empty"!=thisOP?($scope.opModalHeader="Datum Location Information",$scope.createOReditOP="edit",$scope.OP=angular.copy(thisOP),$scope.OP.date_established=makeAdate($scope.OP.date_established),0===$scope.OP.vdatum_id&&delete $scope.OP.vdatum_id,null!==$scope.OP.date_recovered&&($scope.OP.date_recovered=makeAdate($scope.OP.date_recovered)),thisOPControls.length>0&&($scope.addedIdentifiers=thisOPControls,$scope.showControlIDinput=!0),$scope.OP.opType=$scope.OP.op_type_id>0?$scope.OPTypeList.filter(function(t){return t.objective_point_type_id==$scope.OP.op_type_id})[0].op_type:"",$scope.OP.quality=$scope.OP.op_quality_id>0?$scope.OPQualityList.filter(function(q){return q.op_quality_id==$scope.OP.op_quality_id})[0].quality:"",$scope.OP.hdatum=$scope.OP.hdatum_id>0?$scope.HDList.filter(function(hd){return hd.datum_id==$scope.OP.hdatum_id})[0].datum_name:"",$scope.OP.hCollectMethod=$scope.OP.hcollect_method_id>0?$scope.HCollectMethodList.filter(function(hc){return hc.hcollect_method_id==$scope.OP.hcollect_method_id})[0].hcollect_method:"",$scope.OP.vDatum=$scope.OP.vdatum_id>0?$scope.VDatumList.filter(function(vd){return vd.datum_id==$scope.OP.vdatum_id})[0].datum_name:"",$scope.OP.vCollectMethod=$scope.OP.vcollect_method_id>0?$scope.VCollectMethodList.filter(function(vc){return vc.vcollect_method_id==$scope.OP.vcollect_method_id})[0].vcollect_method:""):($scope.opModalHeader="Create new Datum Location",$scope.createOReditOP="create",$scope.OP.latitude_dd=opSite.latitude_dd,$scope.OP.longitude_dd=opSite.longitude_dd,$scope.OP.hdatum_id=opSite.hdatum_id,$scope.OP.date_established=makeAdate("")),$scope.OP.decDegORdms="dd",$scope.OP.FTorMETER="ft",$scope.OP.FTorCM="ft",$scope.addNewIdentifier=function(){"edit"==$scope.createOReditOP?$scope.addedIdentifiersCopy.push({objective_point_id:$scope.OP.objective_point_id,identifier:"",identifier_type:""}):$scope.addedIdentifiers.push({identifier:"",identifier_type:""}),$scope.showControlIDinput=!0},$scope.datepickrs={},$scope.dateOptions={startingDay:1,showWeeks:!1},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())};var azimuth=function(deg,min,sec){var azi=0;return 0>deg?(azi=-1*deg+1*min/60+1*sec/3600,(-1*azi).toFixed(5)):(azi=1*deg+1*min/60+1*sec/3600,azi.toFixed(5))},deg_to_dms=function(deg){0>deg&&(deg=deg.toString(),deg=deg.substring(1));var d=Math.floor(deg),minfloat=60*(deg-d),m=Math.floor(minfloat),s=(60*(minfloat-m)).toFixed(3);return""+d+":"+m+":"+s};$scope.latLongChange=function(){if("edit"==$scope.createOReditOP){if("dd"==$scope.opCopy.decDegORdms)if(void 0!==$scope.DMS.LADeg&&void 0!==$scope.DMS.LAMin&&void 0!==$scope.DMS.LASec&&void 0!==$scope.DMS.LODeg&&void 0!==$scope.DMS.LOMin&&void 0!==$scope.DMS.LOSec)$scope.opCopy.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.opCopy.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),$scope.DMS={};else{var DMSModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all three inputs for conversion from DMS to Decimal Degrees to work.</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});DMSModal.result.then(function(){(void 0!==$scope.DMS.LADeg||void 0!==$scope.DMS.LAMin||void 0!==$scope.DMS.LASec)&&$("#LaDeg").focus(),(void 0!==$scope.DMS.LODeg||void 0!==$scope.DMS.LOMin||void 0!==$scope.DMS.LOSec)&&$("#LoDeg").focus(),$scope.opCopy.decDegORdms="dms"})}else if(void 0!==$scope.opCopy.latitude_dd){var latDMS=deg_to_dms($scope.opCopy.latitude_dd).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.opCopy.longitude_dd),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2],$scope.opCopy.latitude_dd=void 0,$scope.opCopy.longitude_dd=void 0}}else if("dd"==$scope.OP.decDegORdms)if(void 0!==$scope.DMS.LADeg&&void 0!==$scope.DMS.LAMin&&void 0!==$scope.DMS.LASec&&void 0!==$scope.DMS.LODeg&&void 0!==$scope.DMS.LOMin&&void 0!==$scope.DMS.LOSec)$scope.OP.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.OP.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),$scope.DMS={};else{var DMSddModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all three inputs for conversion from DMS to Decimal Degrees to work.</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});DMSddModal.result.then(function(){(void 0!==$scope.DMS.LADeg||void 0!==$scope.DMS.LAMin||void 0!==$scope.DMS.LASec)&&$("#LaDeg").focus(),(void 0!==$scope.DMS.LODeg||void 0!==$scope.DMS.LOMin||void 0!==$scope.DMS.LOSec)&&$("#LoDeg").focus(),$scope.OP.decDegORdms="dms"})}else if(void 0!==$scope.OP.latitude_dd){var create_latDMS=deg_to_dms($scope.OP.latitude_dd).toString(),create_ladDMSarray=create_latDMS.split(":");$scope.DMS.LADeg=create_ladDMSarray[0],$scope.DMS.LAMin=create_ladDMSarray[1],$scope.DMS.LASec=create_ladDMSarray[2];var create_longDMS=deg_to_dms($scope.OP.longitude_dd),create_longDMSarray=create_longDMS.split(":");$scope.DMS.LODeg=-1*create_longDMSarray[0],$scope.DMS.LOMin=create_longDMSarray[1],$scope.DMS.LOSec=create_longDMSarray[2],$scope.OP.latitude_dd=void 0,$scope.OP.longitude_dd=void 0}};var trimOP=function(op){var OBJ_PT={name:op.name,description:op.description,elev_ft:void 0!==op.elev_ft?op.elev_ft:null,date_established:op.date_established,op_is_destroyed:void 0!==op.op_is_destroyed?op.op_is_destroyed:0,op_notes:void 0!==op.op_notes?op.op_notes:null,site_id:$scope.thisOPsite.site_id,vdatum_id:void 0!==op.vdatum_id?op.vdatum_id:0,latitude_dd:op.latitude_dd,longitude_dd:op.longitude_dd,hdatum_id:void 0!==op.hdatum_id?op.hdatum_id:0,hcollect_method_id:void 0!==op.hcollect_method_id?op.hcollect_method_id:0,vcollect_method_id:void 0!==op.vcollect_method_id?op.vcollect_method_id:0,op_type_id:op.op_type_id,date_recovered:void 0!==op.date_recovered?op.date_recovered:null,uncertainty:void 0!==op.uncertainty&&""!==op.uncertainty?op.uncertainty:null,unquantified:void 0!==op.unquantified?op.unquantified:null,op_quality_id:void 0!==op.op_quality_id?op.op_quality_id:null};return OBJ_PT};$scope.cancel=function(){$uibModalInstance.close()};var formatDefaults=function(theOP,fromWhere){"create"==fromWhere?("meter"==theOP.FTorMETER&&($scope.OP.FTorMETER="ft",$scope.OP.elev_ft=3.2808*$scope.OP.elev_ft),"cm"==theOP.FTorCM&&($scope.OP.FTorCM="ft",$scope.OP.uncertainty=parseFloat($scope.OP.uncertainty/30.48).toFixed(6)),"dms"==theOP.decDegORdms&&($scope.OP.decDegORdms="dd",$scope.OP.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.OP.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),$scope.DMS={},$scope.OP.site_id=$scope.thisOPsite.site_id)):("meter"==theOP.FTorMETER&&($scope.opCopy.FTorMETER="ft",$scope.opCopy.elev_ft=3.2808*$scope.opCopy.elev_ft),"cm"==theOP.FTorCM&&($scope.opCopy.FTorCM="ft",$scope.opCopy.uncertainty=parseFloat($scope.opCopy.uncertainty/30.48).toFixed(6)),"dms"==theOP.decDegORdms&&($scope.opCopy.decDegORdms="dd",$scope.opCopy.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.opCopy.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),$scope.DMS={},$scope.opCopy.site_id=$scope.thisOPsite.site_id))};$scope.create=function(){if(this.OPForm.$valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var createdOP={};formatDefaults($scope.OP,"create");var OPtoPOST=trimOP($scope.OP);OBJECTIVE_POINT.save(OPtoPOST,function(response){if(toastr.success("Datum Location created"),createdOP=response,$scope.addedIdentifiers.length>0)for(var opc=0;opc<$scope.addedIdentifiers.length;opc++){var thisOne=$scope.addedIdentifiers[opc];thisOne.objective_point_id=response.objective_point_id,OP_CONTROL_IDENTIFIER.save(thisOne).$promise}},function(errorResponse){toastr.error("Error creating Datum Location: "+errorResponse.statusText)}).$promise.then(function(){var sendBack=[createdOP,"created"];$uibModalInstance.close(sendBack)})}},$scope.RemoveID=function(opControl){if(void 0!==$scope.addedIdentifiersCopy){var i=$scope.addedIdentifiersCopy.indexOf(opControl);void 0!==opControl.op_control_identifier_id?($scope.removeOPCarray.push(opControl),$scope.addedIdentifiersCopy.splice(i,1)):$scope.addedIdentifiersCopy.splice(i,1)}else{var ci=$scope.addedIdentifiers.indexOf(opControl);$scope.addedIdentifiers.splice(ci,1)}},$scope.save=function(valid){if(valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.DMS.LADeg&&($scope.opCopy.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.opCopy.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec));if($scope.addedIdentifiersCopy.length>0)for(var i=0;i<$scope.addedIdentifiersCopy.length;i++)if(void 0!==$scope.addedIdentifiersCopy[i].op_control_identifier_id){var existIndex=$scope.addedIdentifiers.map(function(i){return i.op_control_identifier_id}).indexOf($scope.addedIdentifiersCopy[i].op_control_identifier_id);OP_CONTROL_IDENTIFIER.update({id:$scope.addedIdentifiersCopy[i].op_control_identifier_id},$scope.addedIdentifiersCopy[i]).$promise.then(function(response){$scope.addedIdentifiers[existIndex]=response})}else{var thisOPControlID=$scope.addedIdentifiersCopy[i];thisOPControlID.objective_point_id=$scope.OP.objective_point_id,OP_CONTROL_IDENTIFIER.save(thisOPControlID).$promise.then(function(response){$scope.addedIdentifiers.push(response)})}if($scope.removeOPCarray.length>0)for(var r=0;r<$scope.removeOPCarray.length;r++){var deIndex=$scope.addedIdentifiers.map(function(ri){return ri.op_control_identifier_id}).indexOf($scope.removeOPCarray[r].op_control_identifier_id);OP_CONTROL_IDENTIFIER["delete"]({id:$scope.removeOPCarray[r].op_control_identifier_id}).$promise.then(function(){$scope.addedIdentifiers.splice(deIndex,1)})}formatDefaults($scope.opCopy,"edit");var OPtoPOST=trimOP($scope.opCopy);OPtoPOST.objective_point_id=$scope.opCopy.objective_point_id,OBJECTIVE_POINT.update({id:OPtoPOST.objective_point_id},OPtoPOST,function(response){toastr.success("Datum Location updated"),$scope.OP=response,thisOP=response,$scope.OP.date_established=makeAdate($scope.OP.date_established),null!==$scope.OP.date_recovered&&($scope.OP.date_recovered=makeAdate($scope.OP.date_recovered)),$scope.OP.opType=$scope.OP.op_type_id>0?$scope.OPTypeList.filter(function(t){return t.objective_point_type_id==$scope.OP.op_type_id})[0].op_type:"",$scope.OP.quality=$scope.OP.op_quality_id>0?$scope.OPQualityList.filter(function(q){return q.op_quality_id==$scope.OP.op_quality_id})[0].quality:"",$scope.OP.hdatum=$scope.OP.hdatum_id>0?$scope.HDList.filter(function(hd){return hd.datum_id==$scope.OP.hdatum_id})[0].datum_name:"",$scope.OP.hCollectMethod=$scope.OP.hcollect_method_id>0?$scope.HCollectMethodList.filter(function(hc){return hc.hcollect_method_id==$scope.OP.hcollect_method_id})[0].hcollect_method:"",$scope.OP.vDatum=$scope.OP.vdatum_id>0?$scope.VDatumList.filter(function(vd){return vd.datum_id==$scope.OP.vdatum_id})[0].datum_name:"",$scope.OP.vCollectMethod=$scope.OP.vcollect_method_id>0?$scope.VCollectMethodList.filter(function(vc){return vc.vcollect_method_id==$scope.OP.vcollect_method_id})[0].vcollect_method:"",$scope.opCopy={},$scope.addedIdentifiersCopy=[],$scope.view.OPval="detail"},function(errorResponse){toastr.error("Error updating Datum Location: "+errorResponse.statusText)}).$promise}},$scope.deleteOP=function(){OP_MEASURE.getDatumLocationOPMeasures({objectivePointId:$scope.OP.objective_point_id}).$promise.then(function(result){if(result.length>0){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Cannot Delete</h3></div><div class="modal-body"><p>This Datum Location is being used for one or more sensor tape downs. Please delete the tape down before deleting the datum location.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}else{var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.OP},what:function(){return"Objective Point"}}});DeleteModalInstance.result.then(function(opToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),OBJECTIVE_POINT["delete"]({id:opToRemove.objective_point_id},opToRemove).$promise.then(function(){$scope.OPFiles=[],$scope.opImageFiles=[];for(var l=$scope.allSFiles.length;l--;)$scope.allSFiles[l].objective_point_id==opToRemove.objective_point_id&&$scope.allSFiles.splice(l,1);Site_Files.setAllSiteFiles($scope.allSFiles),toastr.success("Datum Location Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})}})};var openLatModal=function(w){var latModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Latitude must be between 0 and 73.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',
controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});latModal.result.then(function(fieldFocus){"latlong"==w?$("#latitude_dd").focus():$("#LaDeg").focus()})},openLongModal=function(w){var longModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Longitude must be between -175.0 and -60.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});longModal.result.then(function(fieldFocus){"latlong"==w?$("#longitude_dd").focus():$("#LoDeg").focus()})};$scope.checkValue=function(d){if("dms"==d)($scope.DMS.LADeg<0||$scope.DMS.LADeg>73||isNaN($scope.DMS.LADeg)&&void 0!==$scope.DMS.LADeg||isNaN($scope.DMS.LAMin)&&void 0!==$scope.DMS.LAMin||isNaN($scope.DMS.LASec)&&void 0!==$scope.DMS.LASec)&&(openLatModal("dms"),isNaN($scope.DMS.LADeg)&&($scope.DMS.LADeg=void 0),isNaN($scope.DMS.LAMin)&&($scope.DMS.LAMin=void 0),isNaN($scope.DMS.LASec)&&($scope.DMS.LASec=void 0)),($scope.DMS.LODeg<-175||$scope.DMS.LODeg>-60||isNaN($scope.DMS.LODeg)&&void 0!==$scope.DMS.LODeg||isNaN($scope.DMS.LOMin)&&void 0!==$scope.DMS.LOMin||isNaN($scope.DMS.LOSec)&&void 0!==$scope.DMS.LOSec)&&(openLongModal("dms"),isNaN($scope.DMS.LODeg)&&($scope.DMS.LODeg=void 0),isNaN($scope.DMS.LOMin)&&($scope.DMS.LOMin=void 0),isNaN($scope.DMS.LOSec)&&($scope.DMS.LOSec=void 0));else{var op="edit"==$scope.view.OPval?$scope.opCopy:$scope.OP;(op.latitude_dd<0||op.latitude_dd>73||isNaN(op.latitude_dd))&&(openLatModal("latlong"),isNaN(op.latitude_dd)&&(op.latitude_dd=void 0)),(op.longitude_dd<-175||op.longitude_dd>-60||isNaN(op.longitude_dd))&&(openLongModal("latlong"),isNaN(op.longitude_dd)&&(op.longitude_dd=void 0))}},$scope.wannaEditOP=function(){$scope.view.OPval="edit",$scope.opCopy=angular.copy($scope.OP),$scope.opCopy.decDegORdms="dd",$scope.opCopy.FTorMETER="ft",$scope.opCopy.FTorCM="ft",$scope.addedIdentifiersCopy=angular.copy($scope.addedIdentifiers)},$scope.cancelOPEdit=function(){$scope.view.OPval="detail",$scope.opCopy=[]},$rootScope.stateIsLoading.showLoading=!1}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("objectivePointCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","OBJECTIVE_POINT","MEMBER","thisSite","thisSiteOPs","allOPTypes","allHorDatums","allHorCollMethods","allVertDatums","allVertColMethods","allOPQualities","allFileTypes","allAgencies",function($scope,$rootScope,$cookies,$location,$state,$http,$uibModal,$filter,$timeout,OBJECTIVE_POINT,MEMBER,thisSite,thisSiteOPs,allOPTypes,allHorDatums,allHorCollMethods,allVertDatums,allVertColMethods,allOPQualities,allFileTypes,allAgencies){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($scope.opCount={total:thisSiteOPs.length},$scope.SiteObjectivePoints=thisSiteOPs,$scope.showOPModal=function(OPclicked){$scope.opFileTypes=allFileTypes.filter(function(oft){return"Photo"===oft.filetype||"Field Sheets"===oft.filetype||"Level Notes"===oft.filetype||"Other"===oft.filetype||"NGS Datasheet"===oft.filetype||"Sketch"===oft.filetype});{var passAllLists=[allOPTypes,allHorDatums,allHorCollMethods,allVertDatums,allVertColMethods,allOPQualities,$scope.opFileTypes];$scope.SiteObjectivePoints.indexOf(OPclicked)}$rootScope.stateIsLoading={showLoading:!0};var modalInstance=$uibModal.open({templateUrl:"OPmodal.html",controller:"OPmodalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{allDropdowns:function(){return passAllLists},thisOP:function(){return 0!==OPclicked?OPclicked:"empty"},thisOPControls:function(){return 0!==OPclicked?OBJECTIVE_POINT.getOPControls({id:OPclicked.objective_point_id}).$promise:void 0},opSite:function(){return thisSite},agencyList:function(){return allAgencies},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise}}});modalInstance.result.then(function(createdOP){if($rootScope.stateIsLoading={showLoading:!1},void 0!==createdOP){if("created"==createdOP[1]&&($scope.SiteObjectivePoints.push(createdOP[0]),$scope.opCount.total=$scope.SiteObjectivePoints.length),void 0===createdOP[1]){var iClicked=$scope.SiteObjectivePoints.indexOf(OPclicked);$scope.SiteObjectivePoints[iClicked]=createdOP}if("deleted"==createdOP[1]){var indexClicked1=$scope.SiteObjectivePoints.indexOf(OPclicked);$scope.SiteObjectivePoints.splice(indexClicked1,1),$scope.opCount.total=$scope.SiteObjectivePoints.length}}})})}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("memberModalCtrl",["$scope","$rootScope","$cookies","$http","$uibModal","$uibModalInstance","$filter","$sce","roleList","agencyList","thisMember","MEMBER",function($scope,$rootScope,$cookies,$http,$uibModal,$uibModalInstance,$filter,$sce,roleList,agencyList,thisMember,MEMBER){switch($scope.aMember={},$scope.matchingUsers=!0,$scope.usernameTooltip=$sce.trustAsHtml("Active Directory user ID. ie: 'mpeppler' not 'mpeppler@usgs.gov'."),$scope.agencyList=agencyList,$scope.pass={newP:"",confirmP:""},$scope.newPass="",$scope.loggedInUser={},$scope.loggedInUser.Name=$cookies.get("usersName"),$scope.loggedInUser.ID=$cookies.get("mID"),$scope.loggedInUser.Role=$cookies.get("usersRole"),$scope.loggedInUser.Role){case"Admin":$scope.roleList=roleList.filter(function(r){return r.role_id<=3});break;case"Manager":$scope.roleList=roleList.filter(function(r){return 3==r.role_id})}"empty"!=thisMember?($scope.matchingUsers=thisMember.member_id==$scope.loggedInUser.ID?!0:!1,$scope.aMember=angular.copy(thisMember),$scope.aMember.Role=roleList.filter(function(r){return r.role_id==$scope.aMember.role_id})[0].role_name,$scope.changePass=!1,$scope.changeMyPassBtn=function(evt){$scope.changePass=$scope.changePass===!1?!0:!1},$scope.DontChangePass=function(){$scope.changePass=!1}):($scope.aMember={},1==$scope.roleList.length&&($scope.aMember.role_id=$scope.roleList[0].role_id)),$scope.create=function(valid){if(valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.aMember.password=btoa($scope.pass.confirmP);var createdMember={};MEMBER.save($scope.aMember,function(response){toastr.success("Member Created"),createdMember=response;var ag=$scope.agencyList.filter(function(a){return a.agency_id==response.agency_id})[0],ro=roleList.filter(function(r){return r.role_id==response.role_id})[0];createdMember.Agency=ag.agency_name,createdMember.Role=ro.role_name},function(errorResponse){toastr.error("Error creating new member: "+errorResponse.statusText)}).$promise.then(function(){var sendBack=[createdMember,"created"];$uibModalInstance.close(sendBack)})}},$scope.save=function(valid){if(valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",""!==$scope.pass.newP&&($scope.aMember.password=btoa($scope.pass.newP));var updatedMember={},formattedMember=angular.copy($scope.aMember);delete formattedMember.Role,delete formattedMember.Agency,MEMBER.update({id:formattedMember.member_id},formattedMember,function(response){updatedMember=response;var ag=$scope.agencyList.filter(function(a){return a.agency_id==response.agency_id})[0],ro=roleList.filter(function(r){return r.role_id==response.role_id})[0];if(updatedMember.Agency=ag.agency_name,updatedMember.Role=ro.role_name,$scope.loggedInUser.ID==response.member_id){if(void 0!==$scope.aMember.password){var enc=btoa(updatedMember.username.concat(":",$scope.pass.newP)),expireDate=(new Date).addHours(8);$cookies.put("STNCreds",enc,{expires:expireDate})}$cookies.put("STNUsername",updatedMember.username);var usersNAME=updatedMember.fname+" "+updatedMember.lname;$cookies.put("usersName",usersNAME)}toastr.success("Member Updated")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){var sendBack=[updatedMember,"updated"];$uibModalInstance.close(sendBack)})}else{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all required fields.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}},$scope.DeleteMember=function(mem){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return mem},what:function(){return"Member"}}});modalInstance.result.then(function(memToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),MEMBER.deleteMember({id:memToRemove.member_id},function(response){toastr.success("Member Deleted")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$uibModalInstance.close(["de","deleted"])})})},$scope.cancel=function(){$uibModalInstance.close()},$rootScope.stateIsLoading={showLoading:!1}}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("memberInfoCtrl",["$scope","$cookies","$location","$http","$uibModal","$stateParams","$filter","$sce","allRoles","MEMBER","thisMember",function($scope,$cookies,$location,$http,$uibModal,$stateParams,$filter,$sce,allRoles,MEMBER,thisMember){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($scope.aMember={},$scope.matchingUsers=!0,$scope.usernameTooltip=$sce.trustAsHtml("Active Directory user ID. ie: 'mpeppler' not 'mpeppler@usgs.gov'."),$scope.DeleteMember=function(mem){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return mem},what:function(){return"Member"}}});modalInstance.result.then(function(nameToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),MEMBER.deleteMember({id:nameToRemove.member_id},function(response){var delMem={};delMem.member_id=nameToRemove.member_id,delMem.Name=nameToRemove.fname+" "+nameToRemove.lname;var ag=$scope.agencyList.filter(function(a){return a.agency_id==nameToRemove.agency_id})[0],ro=allRoles.filter(function(r){return r.role_id==nameToRemove.role_id})[0];delMem.Agency=ag.agency_name,delMem.Role=ro.role_name,$scope.memberList.splice($scope.memberList.indexOf(delMem),1),toastr.success("Member Deleted")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$location.path("/Members/MembersList").replace()})})},$scope.pass={newP:"",confirmP:""},$scope.newPass="",void 0!==thisMember?($scope.matchingUsers=$stateParams.id==$scope.loggedInUser.ID?!0:!1,$scope.aMember=thisMember,$scope.aMember.Role=allRoles.filter(function(r){return r.role_id==$scope.aMember.role_id})[0].role_name,$scope.changePass=!1,$scope.SaveOnBlur=function(v){if(v)$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.update({id:$scope.aMember.member_id},$scope.aMember,function(response){toastr.success("Member Updated")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)});else{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all required fields.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}},$scope.changeMyPassBtn=function(evt){$scope.changePass=$scope.changePass===!1?!0:!1},$scope.ChangePassword=function(){if(""===$scope.pass.newP||""===$scope.pass.confirmP){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>You must first enter a new password.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}else MEMBER.changePW({username:$scope.aMember.username,newPass:$scope.pass.newP},function(response){if(toastr.success("Password Updated"),$scope.aMember.member_id==$scope.loggedInUser.member_id){var enc=btoa($scope.aMember.username.concat(":",$scope.pass.newP));$cookies.put("STNCreds",enc),$cookies.put("STNUsername",$scope.aMember.username),$cookies.put("usersName",$scope.loggedInUser.Name),$cookies.put("mID",$scope.aMember.member_id);var roleName;switch($scope.aMember.role_id){case 1:roleName="Admin";break;case 2:roleName="Manager";break;case 3:roleName="Field";break;case 4:roleName="Public";break;default:roleName="CitizenManager"}$cookies.put("usersRole",roleName)}$scope.changePass=!1,$scope.pass.newP="",$scope.pass.confirmP=""},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},$scope.DontChangePass=function(){$scope.changePass=!1}):$scope.save=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.addMember({pass:$scope.pass.confirmP},$scope.aMember,function(response){toastr.success("Member Created");var nm={};nm.member_id=response.member_id,nm.Name=response.fname+" "+response.lname;var ag=$scope.agencyList.filter(function(a){return a.agency_id==response.agency_id})[0],ro=allRoles.filter(function(r){return r.role_id==response.role_id})[0];nm.Agency=ag.agency_name,nm.Role=ro.role_name,$scope.memberList.push(nm)}).$promise.then(function(){$location.path("/Members/MembersList").replace()}))})}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("memberCtrl",["$scope","$rootScope","$cookies","$location","$http","$filter","$uibModal","MEMBER","allRoles","allAgencies","userProfileId",function($scope,$rootScope,$cookies,$location,$http,$filter,$uibModal,MEMBER,allRoles,allAgencies,userProfileId){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Settings/Members",$scope.sort_by=function(newSortingOrder){$scope.sortingOrder==newSortingOrder&&($scope.reverse=!$scope.reverse),$scope.sortingOrder=newSortingOrder,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+newSortingOrder+" i").removeClass().addClass($scope.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")},$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getEventPeople({Eventid:"135"}).$promise.then(function(response){console.table(response)}),$scope.showMemberModal=function(memberClicked){var indexClicked=$scope.memberList.indexOf(memberClicked);$rootScope.stateIsLoading={showLoading:!0};var modalInstance=$uibModal.open({templateUrl:"memberModal.html",controller:"memberModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{thisMember:function(){return 0!==memberClicked?memberClicked:"empty"},agencyList:function(){return allAgencies},roleList:function(){return allRoles}}});modalInstance.result.then(function(createdMember){$rootScope.stateIsLoading={showLoading:!1},void 0!==createdMember&&("created"==createdMember[1]&&$scope.memberList.push(createdMember[0]),"updated"===createdMember[1]&&($scope.memberList[indexClicked]=createdMember[0]),"deleted"==createdMember[1]&&$scope.memberList.splice(indexClicked,1))})},$scope.agencyList=allAgencies,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise.then(function(response){$scope.memberList=[];for(var x=0;x<response.length;x++){var eachM=response[x],ag=$scope.agencyList.filter(function(a){return a.agency_id==response[x].agency_id})[0],ro=allRoles.filter(function(r){return r.role_id==response[x].role_id})[0];eachM.Agency=ag.agency_name,eachM.Role=ro.role_name,$scope.memberList.push(eachM)}void 0!==userProfileId&&null!==userProfileId&&MEMBER.query({id:userProfileId}).$promise.then(function(resp){$scope.showMemberModal(resp)})}))}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("MapSiteInfoController",["$scope","$http","$rootScope","$cookies","$location","SITE","leafletMarkerEvents","leafletBoundsHelpers","$state","spinnerService",function($scope,$http,$rootScope,$cookies,$location,SITE,leafletMarkerEvents,leafletBoundsHelpers,$state,spinnerService){$scope.status={siteOpen:!0},$rootScope.$on("mapSiteClickResults",function(event,siteParts){$scope.aSite=siteParts[0],$scope.aSite.latitude_dd=parseFloat($scope.aSite.latitude_dd.toFixed(6)),$scope.aSite.longitude_dd=parseFloat($scope.aSite.longitude_dd.toFixed(6)),spinnerService.hide("siteInfoSpinner")}),$scope.goToSiteDashboard=function(){$state.go("site.dashboard",{id:$scope.aSite.site_id})}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("MapSensorProposeController",["$scope","$http","$timeout","$rootScope","$cookies","$location","SITE","INSTRUMENT","INSTRUMENT_STATUS","allDeployTypes","allSensDeps","leafletMarkerEvents","leafletBoundsHelpers","$state",function($scope,$http,$timeout,$rootScope,$cookies,$location,SITE,INSTRUMENT,INSTRUMENT_STATUS,allDeployTypes,allSensDeps,leafletMarkerEvents,leafletBoundsHelpers,$state){$rootScope.$on("mapSiteClickResults",function(event,siteParts){$scope.thisSite=siteParts[0],$scope.status.sensorOpen=!1,$scope.ProposedSensors4Site=[],$scope.showProposed=!1}),$scope.deployTypeList=angular.copy(allDeployTypes);for(var tempDepTypeID=0,d=0;d<$scope.deployTypeList.length;d++)"Temperature"===$scope.deployTypeList[d].method&&(tempDepTypeID=$scope.deployTypeList[d].deployment_type_id,$scope.deployTypeList[d].method="Temperature (Met sensor)");$scope.deployTypeList.push({deployment_type_id:tempDepTypeID,method:"Temperature (Pressure Transducer)"}),$scope.getProposedSensors=function(){SITE.getSiteSensors({id:$scope.thisSite.site_id}).$promise.then(function(sResponse){for(var s=0;s<sResponse.length;s++){var correctOrderSS=[],sensorStatuses=sResponse[s].instrument_status;if(sensorStatuses.length>1){var proposedStat=sensorStatuses.filter(function(ps){return"Proposed"==ps.status})[0],deployedStat=sensorStatuses.filter(function(ps){return"Deployed"==ps.status})[0],retLostStat=sensorStatuses.filter(function(ps){return"Retrieved"==ps.status||"Lost"==ps.status})[0];retLostStat&&correctOrderSS.push(retLostStat),deployedStat&&correctOrderSS.push(deployedStat),proposedStat&&correctOrderSS.push(proposedStat)}else correctOrderSS.push(sensorStatuses[0]);sResponse[s].instrument_status=[],sResponse[s].instrument_status=correctOrderSS}$scope.ProposedSensors4Site=sResponse.filter(function(ss){return 4==ss.instrument_status[0].status_type_id})})},$scope.sensDepTypes=allSensDeps,$scope.showProposed=!1,$scope.status={sensorOpen:!1},$scope.showHideProposed=function(){$scope.showProposed=!$scope.showProposed},$scope.cancelProposing=function(){$scope.showProposed=!1},$scope.AddProposed=function(){for(var Time_STAMP=new Date,dt=0;dt<$scope.deployTypeList.length;dt++)if($scope.deployTypeList[dt].selected===!0){var proposedToAdd={},propStatToAdd={};if("Temp"==$scope.deployTypeList[dt].method.substring(0,4))proposedToAdd={deployment_type_id:$scope.deployTypeList[dt].deployment_type_id,site_id:$scope.thisSite.site_id,sensor_type_id:"Temperature (Pressure Transducer)"==$scope.deployTypeList[dt].method?1:2};else{var sID=0;angular.forEach($scope.sensDepTypes,function(sdt){for(var x=0;x<sdt.deploymenttypes.length;x++)sdt.deploymenttypes[x].deployment_type_id==$scope.deployTypeList[dt].deployment_type_id&&(sID=sdt.sensor_type_id)}),proposedToAdd={deployment_type_id:$scope.deployTypeList[dt].deployment_type_id,site_id:$scope.thisSite.site_id,sensor_type_id:sID}}$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INSTRUMENT.save(proposedToAdd).$promise.then(function(response){var createdPropSensor={deployment_type_id:response.deployment_type_id,site_id:response.site_id,sensor_type_id:response.sensor_type_id,instrument_id:response.instrument_id,deploymentType:$scope.deployTypeList.filter(function(dtl){return dtl.deployment_type_id==response.deployment_type_id})[0].method,sensorType:$scope.sensDepTypes.filter(function(s){return s.sensor_type_id==response.sensor_type_id})[0].sensor};propStatToAdd={instrument_id:response.instrument_id,status_type_id:4,member_id:$cookies.get("mID"),time_stamp:Time_STAMP,time_zone:"UTC"},INSTRUMENT_STATUS.save(propStatToAdd).$promise.then(function(statResponse){propStatToAdd.status="Proposed",propStatToAdd.instrument_status_id=statResponse.instrument_status_id,createdPropSensor.instrument_status=[propStatToAdd],$scope.ProposedSensors4Site.push(createdPropSensor);for(var dep=0;dep<$scope.deployTypeList.length;dep++)$scope.deployTypeList[dep].selected=!1;$timeout(function(){$scope.showProposed=!1,toastr.success("Proposed sensor created")})},function(errorResponse){toastr.error("Error creating proposed instrument: "+errorResponse.statusText)})},function(errorResponse){toastr.error("Error creating proposed instrument: "+errorResponse.statusText)})}}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("MapPeaksController",["$scope","$rootScope","$http","$cookies","$location","leafletMarkerEvents","leafletBoundsHelpers","$state",function($scope,$rootScope,$http,$cookies,$location,leafletMarkerEvents,leafletBoundsHelpers,$state){$rootScope.$on("mapSiteClickResults",function(event,siteParts){$scope.sitePeaks=[];for(var allSitePeaks=siteParts[1],p=0;p<allSitePeaks.length;p++)allSitePeaks[p].event_name==$cookies.get("SessionEventName")&&$scope.sitePeaks.push(allSitePeaks[p]);$scope.showPeaks=!0}),$scope.showPeaks=!1}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("MapFiltersController",["$scope","$http","$rootScope","$cookies","$location","SITE","EVENT","Map_Filter","$state","stateList","sensorTypes","networkNames","spinnerService",function($scope,$http,$rootScope,$cookies,$location,SITE,EVENT,Map_Filter,$state,stateList,sensorTypes,networkNames,spinnerService){$scope.status={siteOpen:!0},$scope.states=stateList,$scope.senTypes=sensorTypes,$scope.netNames=networkNames,$scope.surveyOptions=[{id:!0,value:"Surveyed HWMs"},{id:!1,value:"Unsurveyed HWMs"}],$scope.Chosen={network:null,sensor:null,survey:null},$scope.chosenStates=[],$scope.siteResponse=!1,$scope.checkboxModel={eventSitesOnly:"1",hwmOnly:"0",senOnly:"0",rdgOnly:"0",opDefined:"0"},$scope.searchSites=function(){if(spinnerService.show("mapSpinner"),"1"===$scope.checkboxModel.eventSitesOnly&&$scope.sessionEventExists===!0){var stateString=$scope.chosenStates.join();$scope.siteResponse=!1,$scope.siteList=[];var evID=null!==$cookies.get("SessionEventID")&&void 0!==$cookies.get("SessionEventID")?$cookies.get("SessionEventID"):0;$rootScope.searchParams={event:evID,state:$scope.chosenStates,SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined},SITE.getFilteredSites({Event:evID,State:stateString,SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined},function(response){spinnerService.hide("mapSpinner"),Map_Filter.setFilteredSites(response)},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,alert("Error: "+errorResponse.statusText)})}else if("0"===$scope.checkboxModel.eventSitesOnly||$scope.sessionEventExists===!1){var stateString=$scope.chosenStates.join();$scope.siteResponse=!1,$scope.siteList=[],$rootScope.searchParams={state:$scope.chosenStates,SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined};var sp=$rootScope.searchParams;if("0"===sp.HWMOnly&&null===sp.HWMSurveyed&&null===sp.NetworkName&&"0"===sp.OPDefined&&"0"===sp.RDGOnly&&"0"===sp.SensorOnly&&null===sp.SensorType&&0===sp.state.length)return spinnerService.hide("mapSpinner"),toastr.options.positionClass="toast-bottom-right",void toastr.warning("Please select at least one search parameter.","Map Filters");SITE.getFilteredSites({State:stateString,SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined},function(response){spinnerService.hide("mapSpinner"),Map_Filter.setFilteredSites(response)},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,alert("Error: "+errorResponse.statusText)})}},$scope.stateClick=function(data){if(data.selected===!0&&$scope.chosenStates.push(data.state_abbrev),data.selected===!1){var ind=$scope.chosenStates.indexOf(data.state_abbrev);ind>=0&&$scope.chosenStates.splice(ind,1)}},$scope.clearFilters=function(){spinnerService.show("mapSpinner"),$scope.checkboxModel={eventSitesOnly:1,hwmOnly:0,senOnly:0,rdgOnly:0,opDefined:0},$scope.Chosen={},$scope.chosenStates=[],angular.forEach($scope.states,function(st){st.selected=!1});var evID=null!==$cookies.get("SessionEventID")&&void 0!==$cookies.get("SessionEventID")?$cookies.get("SessionEventID"):0;$scope.sitesPromise=EVENT.getEventSites({id:evID},function(response){Map_Filter.setFilteredSites(response),spinnerService.hide("mapSpinner")},function(errorResponse){})}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("MapController",["$scope","$http","$rootScope","$cookies","$location","SITE","EVENT","Map_Site","leafletMarkerEvents","leafletBoundsHelpers","leafletData","$state","spinnerService",function($scope,$http,$rootScope,$cookies,$location,SITE,EVENT,Map_Site,leafletMarkerEvents,leafletBoundsHelpers,leafletData,$state,spinnerService){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$rootScope.thisPage="Map",$rootScope.activeMenu="map",$scope.message="Many of the supplemental GIS data layers found in the map are from a range of sources and are not maintained by WiM. We offer these map layers as a decision support supplement to the STN sites layer, but we cannot guarantee their performance and availability. Many of these externally maintained layers are large datasets and may load slowly depending on network latency. In some cases they may fail to load entirely when network latency is high.",$rootScope.$on("filterSitesClick",function(event,filteredSitesArray){filteredSitesArray.length>0?($scope.paths={},$scope.selectedMarkerNum=0,showEventSites(filteredSitesArray)):(toastr.options.positionClass="toast-bottom-right",toastr.warning("Your filter returned no results.","Map Filters"))});var icons={stn:{type:"div",iconSize:[10,10],className:"stnSiteIcon"},stnGray:{type:"div",iconSize:[10,10],className:"stnSiteGray"},newSite:{type:"div",iconSize:[10,10],className:"newSiteIcon",iconAnchor:[5,5]},selected:{type:"div",iconSize:[12,12],className:"selectedIcon"},nwis:L.divIcon({iconSize:[10,10],className:"arrow-up"}),action:L.icon({iconUrl:"images/action.png",popupAnchor:[10,10]}),low_threshold:L.icon({iconUrl:"images/low_threshold.png",popupAnchor:[10,10]}),major:L.icon({iconUrl:"images/major.png",popupAnchor:[10,10]}),minor:L.icon({iconUrl:"images/minor.png",popupAnchor:[10,10]}),moderate:L.icon({iconUrl:"images/moderate.png",popupAnchor:[10,10]}),no_flooding:L.icon({iconUrl:"images/no_flooding.png",popupAnchor:[10,10]}),not_defined:L.icon({iconUrl:"images/not_defined.png",popupAnchor:[10,10]}),obs_not_current:L.icon({iconUrl:"images/obs_not_current.png",popupAnchor:[10,10]}),out_of_service:L.icon({iconUrl:"images/out_of_service.png",popupAnchor:[10,10]})},showEventSites=function(response){var sitesArray=response;$scope.sites=sitesArray,$scope.markers=[],$scope.markersLatLngArray=[],leafletData.getDirectiveControls().then(function(controls){controls.markers.create({},$scope.markers);for(var markers=[],i=0;i<sitesArray.length;i++){var a=sitesArray[i];markers.push({layer:"stnSites",lat:a.latitude_dd,lng:a.longitude_dd,site_id:a.site_id,title:"STN Site",icon:icons.stn}),$scope.markersLatLngArray.push([a.latitude_dd,a.longitude_dd])}controls.markers.create(markers,$scope.markers),$scope.markers=markers})};$scope.pathsObj={circleMarker:{type:"circleMarker",radius:20,weight:3,color:"#000099",latlngs:{}}},$scope.selectedMarkerNum=0,$scope.$on("leafletDirectiveMarker.click",function(event,args){if("newSite"!=args.model.site_id){spinnerService.show("siteInfoSpinner"),$scope.markers[$scope.selectedMarkerNum].icon=icons.stn,delete $scope.markers[$scope.selectedMarkerNum].label;var siteID=args.model.site_id;Map_Site.setMapSiteParts(siteID),$scope.selectedMarkerNum=parseInt(args.modelName),$scope.markers[$scope.selectedMarkerNum].icon=icons.selected,$scope.markers[$scope.selectedMarkerNum].label={message:"Site "+siteID,options:{noHide:!0,offset:[25,-15],className:"siteLabel"}},$scope.mapCenter.zoom<=9?$scope.mapCenter={lat:args.model.lat,lng:args.model.lng,zoom:10}:$scope.mapCenter.zoom>=10&&($scope.mapCenter={lat:args.model.lat,lng:args.model.lng,zoom:$scope.mapCenter.zoom});var addShape=function(){$scope.paths={},$scope.pathsObj.circleMarker.latlngs={lat:args.model.lat,lng:args.model.lng},$scope.paths.circleMarker=$scope.pathsObj.circleMarker};addShape()}}),$scope.$watch(function(){return $cookies.get("SessionEventID")},function(newValue){if(void 0===newValue)return toastr.options.positionClass="toast-bottom-right",toastr.options.timeOut="8000",toastr.options.closeButton=!0,void toastr.warning("No sites are showing because you have no filters applied. Please select at least one search parameter.","Map Filters");$scope.sessionEvent=null!==$cookies.get("SessionEventName")&&void 0!==$cookies.get("SessionEventName")?$cookies.get("SessionEventName"):"All Events";var evID=newValue;spinnerService.show("mapSpinner"),$scope.selectedMarkerNum=0,$scope.paths={},$scope.sitesPromise=EVENT.getEventSites({id:evID},function(response){spinnerService.hide("mapSpinner"),showEventSites(response)},function(errorResponse){$scope.error="Could not fetch sites"})}),$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1});$scope.$on("leafletDirectiveMap.click",function(event,args){if($scope.createSiteModeActive===!0){removeUserCreatedSite();var leafEvent=args.leafletEvent;$scope.userCreatedSite={
latitude:leafEvent.latlng.lat,longitude:leafEvent.latlng.lng},$scope.markers.push({layer:"newSite",lat:$scope.userCreatedSite.latitude,lng:$scope.userCreatedSite.longitude,site_id:"newSite",icon:icons.newSite,message:"New draggable STN site",draggable:!0,focus:!1,label:{message:"New Site",options:{noHide:!0,className:"newSiteLabel"}}})}});var removeUserCreatedSite=function(){var createdSiteIndex=$scope.markers.map(function(obj){return obj.site_id}).indexOf("newSite");createdSiteIndex>-1&&($scope.markers.splice(createdSiteIndex,1),$scope.userCreatedSite={})};$scope.$on("leafletDirectiveMarker.dragend",function(event,args){var dragendLocation=args.model;$scope.userCreatedSite={latitude:dragendLocation.lat,longitude:dragendLocation.lng}}),$scope.$watch("createSiteModeActive",function(){$scope.createSiteButtonText=$scope.createSiteModeActive?"Cancel Create Site Mode":"Create New Site on Map",$scope.mapStyle=$scope.createSiteModeActive?{cursor:"crosshair"}:{cursor:"grab"},$scope.createSiteModeActive||removeUserCreatedSite()}),$scope.createSiteFromMap=function(){void 0!==$scope.userCreatedSite.latitude&&void 0!==$scope.userCreatedSite.longitude?$state.go("site.dashboard",{id:0,latitude:$scope.userCreatedSite.latitude,longitude:$scope.userCreatedSite.longitude}):alert("Please click a location on the map to create a site this way.")},leafletData.getMap().then(function(map){var geoSearchControl=new L.Control.GeoSearch({provider:new L.GeoSearch.Provider.Esri,position:"topleft",zoomLevel:15});geoSearchControl.addTo(map)}),delete $http.defaults.headers.common.Authorization,angular.extend($scope,{events:{markers:{enable:leafletMarkerEvents.getAvailableEvents()}},mapCenter:{lat:41.278,lng:-92.336,zoom:4,minZoom:4},controls:{},markersWatchOptions:{doWatch:!0,isDeep:!0,individual:{doWatch:!0,isDeep:!1}},paths:{},markers:[],markersLatLngArray:[],createSiteModeActive:!1,userCreatedSite:{},layers:{baselayers:{gray:{name:"Gray",type:"agsBase",layer:"Gray",visible:!1},streets:{name:"Streets",type:"agsBase",layer:"Streets",visible:!1},topo:{name:"World Topographic",type:"agsBase",layer:"Topographic",visible:!1},national:{name:"National Geographic",type:"agsBase",layer:"NationalGeographic",visible:!1},oceans:{name:"Oceans",type:"agsBase",layer:"Oceans",visible:!1},darkgray:{name:"DarkGray",type:"agsBase",layer:"DarkGray",visible:!1},imagery:{name:"Imagery",type:"agsBase",layer:"Imagery",visible:!1},shadedrelief:{name:"Shaded Relief",type:"agsBase",layer:"ShadedRelief",visible:!1},terrain:{name:"Terrain",type:"agsBase",layer:"Terrain",visible:!1}},overlays:{stnSites:{type:"group",name:"STN Sites",visible:!0},stnSitesAll:{type:"group",name:"STN Sites All",visible:!0},newSite:{type:"group",name:"newSite",visible:!0,layerParams:{showOnSelector:!1}},nwis:{name:"USGS real-time streamgages",type:"agsFeature",url:"https://stnmapservices.wim.usgs.gov:6443/arcgis/rest/services/STN/STN_nwis_rt/MapServer/0",visible:!1,layerOptions:{pointToLayer:function(geojson,latlng){return L.marker(latlng,{icon:icons.nwis})},onEachFeature:function(feature,layer){layer.bindPopup(feature.properties.PopupInfo+'<br><img style="width: 350px" src="http://waterdata.usgs.gov/nwisweb/graph?agency_cd=USGS&site_no='+feature.properties.Name+'&parm_cd=00065&period=7">')}}},ahps:{name:"AHPS Gages",type:"agsFeature",url:"https://idpgis.ncep.noaa.gov/arcgis/rest/services/NWS_Observations/ahps_riv_gauges/MapServer/0",visible:!1,layerOptions:{opacity:1,pointToLayer:function(geojson,latlng){return L.marker(latlng,{icon:icons[geojson.properties.status]})},onEachFeature:function(feature,layer){var graphURL="https://water.weather.gov/resources/hydrographs/"+feature.properties.gaugelid.toLowerCase()+"_hg.png";layer.bindPopup("<b>Gage ID: </b>"+feature.properties.gaugelid+"</br><a target='_blank' href='"+feature.properties.url+"'><img title='Click for details page' width=300 src='"+graphURL+"'/></a>")}}},radar:{name:"Weather Radar",type:"agsDynamic",url:"https://idpgis.ncep.noaa.gov/arcgis/rest/services/NWS_Observations/radar_base_reflectivity/MapServer",visible:!1,layerOptions:{layers:[0],opacity:1}},watchWarn:{name:"NWS Watches & Warnings",type:"agsDynamic",url:"https://idpgis.ncep.noaa.gov/arcgis/rest/services/NWS_Forecasts_Guidance_Warnings/watch_warn_adv/MapServer",visible:!1,layerOptions:{layers:[1],opacity:1}},lmwa:{name:"Limit Moderate Wave Action",type:"agsDynamic",url:"https://hazards.fema.gov/gis/nfhl/rest/services/public/NFHL/MapServer",visible:!1,layerOptions:{layers:[19],opacity:1}},floodBounds:{name:"Flood Hazard Boundaries",type:"agsDynamic",url:"https://hazards.fema.gov/gis/nfhl/rest/services/public/NFHL/MapServer",visible:!1,layerOptions:{layers:[27],opacity:1}},floodZones:{name:"Flood Hazard Zones",type:"agsDynamic",url:"https://hazards.fema.gov/gis/nfhl/rest/services/public/NFHL/MapServer",visible:!1,layerOptions:{layers:[28],opacity:.7}}}}})}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("mainCtrl",["$scope","$rootScope","$document","$cookies","$uibModal","$location","$state",function($scope,$rootScope,$document,$cookies,$uibModal,$location,$state){if($rootScope.isAuth={},$rootScope.activeMenu="home",void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")||void 0===$cookies.get("STNUsername"))$rootScope.isAuth.val=!1,$location.path("/login");else{if(void 0!==$document[0].documentMode){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Warning</h3></div><div class="modal-body"><p>This application uses functionality that is not completely supported by Internet Explorer. The preferred browser is Chrome (bison connect).</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}$rootScope.isAuth.val=!0,$rootScope.usersName=$cookies.get("usersName"),$rootScope.userID=$cookies.get("mID"),$rootScope.userRole=$cookies.get("usersRole");var EventName=$cookies.get("SessionEventName");null!==EventName&&void 0!==EventName&&($rootScope.sessionEvent="Session Event: "+EventName+"."),$state.go("map")}}])}(),function(){"use strict";var LogInOutController=angular.module("LogInOutController",[]);LogInOutController.controller("loginCtrl",["$scope","$state","$location","$uibModal","$http","$cookies","$rootScope","$document","SERVER_URL","ENVIRONMENT","Login",function($scope,$state,$location,$uibModal,$http,$cookies,$rootScope,$document,SERVER_URL,ENVIRONMENT,Login){if($("[type=password]").keypress(function(e){var $password=$(this),tooltipVisible=$(".tooltip").is(":visible"),s=String.fromCharCode(e.which);s.toUpperCase()!==s||s.toLowerCase()===s||e.shiftKey?tooltipVisible&&$password.tooltip("hide"):tooltipVisible||$password.tooltip("show"),$password.blur(function(e){$password.tooltip("hide")})}),void 0!==$document[0].documentMode){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Warning</h3></div><div class="modal-body"><p>This application uses functionality that is not completely supported by Internet Explorer. The preferred browser is Chrome (bison connect).</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}Date.prototype.addHours=function(h){return this.setHours(this.getHours()+h),this},$scope.serverURL=SERVER_URL,$rootScope.environment=ENVIRONMENT,$scope.submit=function(){$rootScope.stateIsLoading.showLoading=!0;var up=({username:$scope.username,password:$scope.password},$scope.username+":"+$scope.password);$http.defaults.headers.common.Authorization="Basic "+btoa(up),$http.defaults.headers.common.Accept="application/json",Login.login({},function(response){var user=response;if(void 0!==user){var usersNAME=user.fname+" "+user.lname,enc=btoa($scope.username.concat(":",$scope.password)),expireDate=(new Date).addHours(8);$cookies.put("STNCreds",enc,{expires:expireDate}),$cookies.put("STNUsername",$scope.username),$cookies.put("usersName",usersNAME),$cookies.put("mID",user.member_id);var roleName;switch(user.role_id){case 1:roleName="Admin";break;case 2:roleName="Manager";break;case 3:roleName="Field";break;case 4:roleName="Public";break;default:roleName="CitizenManager"}$cookies.put("usersRole",roleName),$rootScope.isAuth.val=!0,$rootScope.usersName=usersNAME,$rootScope.userID=user.member_id,$rootScope.userRole=$cookies.get("usersRole"),void 0!==$rootScope.returnToState?$state.go($rootScope.returnToState,{id:$rootScope.returnToStateParams}):$state.go("map")}else $rootScope.stateIsLoading.showLoading=!1,$scope.error="Login Failed"},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1;var modalInstance=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>There was an error.</p><p>Error: {{status}} - {{statusText}}</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.status=errorResponse.status,$scope.statusText=errorResponse.statusText}],size:"sm"});modalInstance.result.then(function(fieldFocus){$location.path("/login")})})}}]),LogInOutController.controller("logoutCtrl",["$scope","$rootScope","$cookies","$location",function($scope,$rootScope,$cookies,$location){$scope.logout=function(){$cookies.remove("STNCreds"),$cookies.remove("STNUsername"),$cookies.remove("usersName"),$cookies.remove("usersRole"),$cookies.remove("mID"),$cookies.remove("SessionEventID"),$cookies.remove("SessionEventName"),$rootScope.thisPage=void 0,$rootScope.returnToState=void 0,$rootScope.returnToStateParams=void 0,$rootScope.stateIsLoading=void 0,$rootScope.activeMenu=void 0,$rootScope.sessionEvent=void 0,$rootScope.isAuth=void 0,$rootScope.searchTerm=void 0,$rootScope.searchParams=void 0,$rootScope.approvalSearch=void 0,$rootScope.userID=void 0,$rootScope.userRole=void 0,$rootScope.usersName=void 0,$rootScope.environment=void 0,$location.path("/login")}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("quickHWMCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$uibModal","$filter","allHorDatums","allHorCollMethods","allStates","allCounties","allOPTypes","allVertDatums","allVertColMethods","allOPQualities","allHWMTypes","allHWMQualities","allMarkers","SITE","OBJECTIVE_POINT","HWM",function($scope,$rootScope,$cookies,$location,$state,$http,$uibModal,$filter,allHorDatums,allHorCollMethods,allStates,allCounties,allOPTypes,allVertDatums,allVertColMethods,allOPQualities,allHWMTypes,allHWMQualities,allMarkers,SITE,OBJECTIVE_POINT,HWM){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$rootScope.thisPage="Quick HWM",$scope.qhwmForm={};var makeAdate=function(d){var aDate=new Date;""!==d&&void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};$scope.decDegORdms={},$scope.aSite={MEMBER_ID:$cookies.get("mID")},$scope.aOP={DATE_ESTABLISHED:makeAdate("")},$scope.aHWM={HWM_ENVIRONMENT:"Riverine",BANK:"N/A",FLAG_DATE:makeAdate(""),STILLWATER:0},$scope.status={siteOpen:!0,opOpen:!1,hwmOpen:!1},$scope.removeOPCarray=[],$scope.addedIdentifiers=[],$scope.showControlIDinput=!1,$scope.horDatumList=allHorDatums,$scope.horCollMethodList=allHorCollMethods,$scope.stateList=allStates,$scope.allCountyList=allCounties,$scope.stateCountyList=[],$scope.opTypeList=allOPTypes,$scope.vertDatumList=allVertDatums,$scope.vertCollMethodList=allVertColMethods,$scope.opQualList=allOPQualities,$scope.hwmTypeList=allHWMTypes,$scope.hwmQualList=allHWMQualities,$scope.markerList=allMarkers,$scope.FTorMETER="ft",$scope.FTorCM="ft",$scope.addNewIdentifier=function(){$scope.addedIdentifiers.push({OBJECTIVE_POINT_ID:$scope.aOP.OBJECTIVE_POINT_ID,IDENTIFIER:"",IDENTIFIER_TYPE:""}),$scope.showControlIDinput=!0},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.decDegORdms.val="dd",$scope.DMS={};var azimuth=function(deg,min,sec){var azi=0;return 0>deg?(azi=-1*deg+1*min/60+1*sec/3600,(-1*azi).toFixed(5)):(azi=1*deg+1*min/60+1*sec/3600,azi.toFixed(5))},deg_to_dms=function(deg){0>deg&&(deg=deg.toString(),deg=deg.substring(1));var d=Math.floor(deg),minfloat=60*(deg-d),m=Math.floor(minfloat),s=(60*(minfloat-m)).toFixed(3);return""+d+":"+m+":"+s};$scope.latLongChange=function(){if("dd"==$scope.decDegORdms.val){if(void 0!==$scope.DMS.LADeg){$scope.aSite.LATITUDE_DD=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.aSite.LONGITUDE_DD=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)}}else if(void 0!==$scope.aSite.LATITUDE_DD){var latDMS=deg_to_dms($scope.aSite.LATITUDE_DD).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.aSite.LONGITUDE_DD),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2]}},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.getAddress=function(){delete $scope.aSite.ADDRESS,delete $scope.aSite.CITY,delete $scope.aSite.STATE,$scope.stateCountyList=[],delete $scope.aSite.ZIP,$rootScope.stateIsLoading.showLoading=!0;var geocoder=new google.maps.Geocoder,latlng=new google.maps.LatLng($scope.aSite.LATITUDE_DD,$scope.aSite.LONGITUDE_DD);geocoder.geocode({latLng:latlng},function(results,status){if(status==google.maps.GeocoderStatus.OK){var address_components=results[0].address_components,components={};$.each(address_components,function(k,v1){$.each(v1.types,function(k2,v2){components[v2]=v1.long_name})}),$scope.aSite.ADDRESS=void 0!==components.street_number?components.street_number+" "+components.route:components.route,$scope.aSite.CITY=components.locality;var thisState=$scope.stateList.filter(function(s){return s.STATE_NAME==components.administrative_area_level_1})[0];void 0!==thisState?($scope.aSite.STATE=thisState.STATE_ABBREV,$scope.stateCountyList=$scope.allCountyList.filter(function(c){return c.STATE_ID==thisState.STATE_ID}),$scope.aSite.COUNTY=components.administrative_area_level_2,$scope.aSite.ZIP=components.postal_code,$rootScope.stateIsLoading.showLoading=!1,$scope.$apply()):($rootScope.stateIsLoading.showLoading=!1,toastr.error("The Latitude/Longitude did not return a location within the U.S."))}else $rootScope.stateIsLoading.showLoading=!1,toastr.error("There was an error getting address. Please try again.")})},$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1}),$scope.updateCountyList=function(s){var thisState=$scope.stateList.filter(function(st){return st.STATE_ABBREV==s})[0];$scope.stateCountyList=$scope.allCountyList.filter(function(c){return c.STATE_ID==thisState.STATE_ID})},$scope.UnquantChecked=function(){1==$scope.aOP.UNQUANTIFIED&&($scope.aOP.UNCERTAINTY=null)};var trimOP=function(op){var OBJ_PT={OBJECTIVE_POINT_ID:void 0!==op.OBJECTIVE_POINT_ID?op.OBJECTIVE_POINT_ID:0,NAME:op.NAME,DESCRIPTION:op.DESCRIPTION,ELEV_FT:void 0!==op.ELEV_FT?op.ELEV_FT:null,DATE_ESTABLISHED:op.DATE_ESTABLISHED,OP_IS_DESTROYED:void 0!==op.OP_IS_DESTROYED?op.OP_IS_DESTROYED:0,OP_NOTES:void 0!==op.OP_NOTES?op.OP_NOTES:null,SITE_ID:op.SITE_ID,VDATUM_ID:void 0!==op.VDATUM_ID?op.VDATUM_ID:0,LATITUDE_DD:op.LATITUDE_DD,LONGITUDE_DD:op.LONGITUDE_DD,HDATUM_ID:void 0!==op.HDATUM_ID?op.HDATUM_ID:0,HCOLLECT_METHOD_ID:void 0!==op.HCOLLECT_METHOD_ID?op.HCOLLECT_METHOD_ID:0,VCOLLECT_METHOD_ID:void 0!==op.VCOLLECT_METHOD_ID?op.VCOLLECT_METHOD_ID:0,OP_TYPE_ID:op.OP_TYPE_ID,DATE_RECOVERED:void 0!==op.DATE_RECOVERED?op.DATE_RECOVERED:null,UNCERTAINTY:void 0!==op.UNCERTAINTY?op.UNCERTAINTY:null,UNQUANTIFIED:void 0!==op.UNQUANTIFIED?op.UNQUANTIFIED:null,OP_QUALITY_ID:void 0!==op.OP_QUALITY_ID?op.OP_QUALITY_ID:null};return OBJ_PT},formatDefaults=function(theOP){"meter"==theOP.FTorMETER&&($scope.aOP.FTorMETER="ft",$scope.aOP.ELEV_FT=3.2808*$scope.aOP.ELEV_FT),"cm"==theOP.FTorCM&&($scope.aOP.FTorCM="ft",$scope.aOP.UNCERTAINTY=$scope.aOP.UNCERTAINTY/30.48)};$scope.siteErrors=!1,$scope.opErrors=!1,$scope.hwmErrors=!1,$scope.create=function(){$rootScope.stateIsLoading.showLoading=!0;var theForm=$scope.qhwmForm.quickHWM;if($scope.siteErrors=!1,$scope.opErrors=!1,$scope.hwmErrors=!1,theForm.$valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var createdSiteID=0;$scope.aSite.LONGITUDE_DD>0&&($scope.aSite.LONGITUDE_DD=-1*$scope.aSite.LONGITUDE_DD),SITE.save($scope.aSite,function(response){createdSiteID=response.SITE_ID,$scope.aOP.SITE_ID=createdSiteID,$scope.aOP.LATITUDE_DD=response.LATITUDE_DD,$scope.aOP.LONGITUDE_DD=response.LONGITUDE_DD,$scope.aOP.HDATUM_ID=response.HDATUM_ID,$scope.aOP.HCOLLECT_METHOD_ID=response.HCOLLECT_METHOD_ID,$scope.aHWM.SITE_ID=createdSiteID,$scope.aHWM.WATERBODY=response.WATERBODY,$scope.aHWM.LATITUDE_DD=response.LATITUDE_DD,$scope.aHWM.LONGITUDE_DD=response.LONGITUDE_DD,$scope.aHWM.HCOLLECT_METHOD_ID=response.HCOLLECT_METHOD_ID,$scope.aHWM.HDATUM_ID=response.HDATUM_ID,$scope.aHWM.FLAG_TEAM_ID=response.MEMBER_ID,$scope.aHWM.EVENT_ID=$cookies.get("SessionEventID");var createdOP={};formatDefaults($scope.aOP);var OPtoPOST=trimOP($scope.aOP);OBJECTIVE_POINT.save(OPtoPOST,function(response){if(createdOP=response,$scope.addedIdentifiers.length>0)for(var opc=0;opc<$scope.addedIdentifiers.length;opc++)OBJECTIVE_POINT.createOPControlID({id:response.OBJECTIVE_POINT_ID},$scope.addedIdentifiers[opc]).$promise;void 0!==$scope.aHWM.SURVEY_DATE&&($scope.aHWM.SURVEY_TEAM_ID=$scope.aHWM.FLAG_TEAM_ID),void 0!==$scope.aHWM.ELEV_FT&&(void 0===$scope.aHWM.SURVEY_DATE&&($scope.aHWM.SURVEY_DATE=makeAdate("")),$scope.aHWM.SURVEY_TEAM_ID=$scope.aHWM.FLAG_TEAM_ID),HWM.save($scope.aHWM).$promise.then(function(response){toastr.success("Quick HWM created"),$rootScope.stateIsLoading.showLoading=!1,$location.path("/Site/"+createdSiteID+"/SiteDashboard").replace(),$scope.apply})})})}else $rootScope.stateIsLoading.showLoading=!1,$scope.status.siteOpen=!0,$scope.status.opOpen=!0,$scope.status.hwmOpen=!0,angular.element("[name='"+theForm.$name+"']").find(".ng-invalid:visible:first").focus(),(theForm.SITE_DESCRIPTION.$invalid||theForm.LATITUDE_DD.$invalid||theForm.LONGITUDE_DD.$invalid||theForm.HDATUM_ID.$invalid||theForm.HCOLLECT_METHOD_ID.$invalid||theForm.WATERBODY.$invalid||theForm.STATE.$invalidv||theForm.COUNTY.$invalid)&&($scope.siteErrors=!0),(theForm.OP_TYPE_ID.$invalid||theForm.NAME.$invalid||theForm.DESCRIPTION.$invalid||theForm.de.$invalid)&&($scope.opErrors=!0),(theForm.HWM_TYPE_ID.$invalid||theForm.HWM_ENVIRONMENT.$invalid||theForm.HWM_QUALITY_ID.$invalid||theForm.fd.$invalid)&&($scope.hwmErrors=!0),toastr.error("Quick HWM not created.")}}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("hwmModalCtrl",["$scope","$rootScope","$cookies","$http","$sce","$uibModalInstance","$uibModal","SERVER_URL","FILE_STAMP","allDropdowns","Site_Files","thisHWM","allSiteHWMs","hwmApproval","agencyList","hwmSite","allMembers","HWM","SOURCE","FILE",function($scope,$rootScope,$cookies,$http,$sce,$uibModalInstance,$uibModal,SERVER_URL,FILE_STAMP,allDropdowns,Site_Files,thisHWM,allSiteHWMs,hwmApproval,agencyList,hwmSite,allMembers,HWM,SOURCE,FILE){$scope.view={HWMval:"detail"},$scope.h={hOpen:!0,hFileOpen:!1},$scope.hwmTypeList=allDropdowns[0],$scope.hwmQualList=allDropdowns[1],$scope.HDatumsList=allDropdowns[2],$scope.hCollMList=allDropdowns[3],$scope.VDatumsList=allDropdowns[4],$scope.vCollMList=allDropdowns[5],$scope.markerList=allDropdowns[6],$scope.eventList=allDropdowns[7],$scope.fileTypeList=allDropdowns[8],$scope.allSFiles=Site_Files.getAllSiteFiles(),$scope.HWMFiles="empty"!==thisHWM?$scope.allSFiles.filter(function(sf){return sf.hwm_id==thisHWM.hwm_id}):[],$scope.hwmImageFiles=$scope.HWMFiles.filter(function(hf){return 1===hf.filetype_id}),$scope.showFileForm=!1,$scope.userRole=$cookies.get("usersRole"),$scope.FlagMember="",$scope.showEventDD=!1,$scope.adminChanged={},$scope.serverURL=SERVER_URL,$scope.showChangeEventDD=function(){$scope.showEventDD=!$scope.showEventDD},$scope.ChangeEvent=function(){$scope.EventName=$scope.eventList.filter(function(el){return el.event_id==$scope.adminChanged.event_id})[0].event_name},$scope.LoggedInMember=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aHWM={},$scope.DMS={},$scope.thisHWMsite=hwmSite,$scope.ApprovalInfo={},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0};var azimuth=function(deg,min,sec){var azi=0;return 0>deg?(azi=-1*deg+1*min/60+1*sec/3600,(-1*azi).toFixed(5)):(azi=1*deg+1*min/60+1*sec/3600,azi.toFixed(5))},deg_to_dms=function(deg){0>deg&&(deg=deg.toString(),deg=deg.substring(1));var d=Math.floor(deg),minfloat=60*(deg-d),m=Math.floor(minfloat),s=(60*(minfloat-m)).toFixed(3);return""+d+":"+m+":"+s};$scope.latLongChange=function(){if("edit"==$scope.createOReditHWM){if("dd"==$scope.hwmCopy.decDegORdms)if(void 0!==$scope.DMS.LADeg&&void 0!==$scope.DMS.LAMin&&void 0!==$scope.DMS.LASec&&void 0!==$scope.DMS.LODeg&&void 0!==$scope.DMS.LOMin&&void 0!==$scope.DMS.LOSec)$scope.hwmCopy.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.hwmCopy.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),$scope.DMS={};else{var DMSddModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all three inputs for conversion from DMS to Decimal Degrees to work.</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});DMSddModal.result.then(function(){(void 0!==$scope.DMS.LADeg||void 0!==$scope.DMS.LAMin||void 0!==$scope.DMS.LASec)&&$("#LaDeg").focus(),(void 0!==$scope.DMS.LODeg||void 0!==$scope.DMS.LOMin||void 0!==$scope.DMS.LOSec)&&$("#LoDeg").focus(),$scope.hwmCopy.decDegORdms="dms"})}else if(void 0!==$scope.hwmCopy.latitude_dd){var latDMS=deg_to_dms($scope.hwmCopy.latitude_dd).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.hwmCopy.longitude_dd),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2],$scope.hwmCopy.latitude_dd=void 0,$scope.hwmCopy.longitude_dd=void 0}}else if("dd"==$scope.aHWM.decDegORdms)if(void 0!==$scope.DMS.LADeg&&void 0!==$scope.DMS.LAMin&&void 0!==$scope.DMS.LASec&&void 0!==$scope.DMS.LODeg&&void 0!==$scope.DMS.LOMin&&void 0!==$scope.DMS.LOSec)$scope.aHWM.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.aHWM.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),$scope.DMS={};else{var DMSModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all three inputs for conversion from DMS to Decimal Degrees to work.</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});DMSModal.result.then(function(){(void 0!==$scope.DMS.LADeg||void 0!==$scope.DMS.LAMin||void 0!==$scope.DMS.LASec)&&$("#LaDeg").focus(),(void 0!==$scope.DMS.LODeg||void 0!==$scope.DMS.LOMin||void 0!==$scope.DMS.LOSec)&&$("#LoDeg").focus(),$scope.aHWM.decDegORdms="dms"})}else if(void 0!==$scope.aHWM.latitude_dd){var create_latDMS=deg_to_dms($scope.aHWM.latitude_dd).toString(),create_ladDMSarray=create_latDMS.split(":");$scope.DMS.LADeg=create_ladDMSarray[0],$scope.DMS.LAMin=create_ladDMSarray[1],$scope.DMS.LASec=create_ladDMSarray[2];var create_longDMS=deg_to_dms($scope.aHWM.longitude_dd),create_longDMSarray=create_longDMS.split(":");$scope.DMS.LODeg=-1*create_longDMSarray[0],$scope.DMS.LOMin=create_longDMSarray[1],$scope.DMS.LOSec=create_longDMSarray[2],$scope.aHWM.latitude_dd=void 0,$scope.aHWM.longitude_dd=void 0}};var openLatModal=function(w,message){var latModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>{{message}}</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',resolve:{show:function(){return message}},controller:["$scope","$uibModalInstance","show",function($scope,$uibModalInstance,show){$scope.ok=function(){$uibModalInstance.close()},"range"==show&&($scope.message="The Latitude must be between 0 and 73.0"),"distance"==show&&($scope.message="Latitude places the HWM more than 232 ft from the site's latitude. Please verify before continuing.")}],size:"sm"});latModal.result.then(function(fieldFocus){"latlong"==w?$("#latitude_dd").focus():$("#LaDeg").focus()})},openLongModal=function(w,message){var longModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>{{message}}</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',resolve:{show:function(){return message}},controller:["$scope","$uibModalInstance","show",function($scope,$uibModalInstance,show){$scope.ok=function(){$uibModalInstance.close()},"range"==show&&($scope.message="The Longitude must be between -175.0 and -60.0"),"distance"==show&&($scope.message="Longitude places the HWM more than 232 ft from the site's longitude. Please verify before continuing")}],size:"sm"});longModal.result.then(function(fieldFocus){"latlong"==w?$("#longitude_dd").focus():$("#LoDeg").focus()})};$scope.checkValue=function(d){if("dms"==d){if($scope.DMS.LADeg<0||$scope.DMS.LADeg>73||isNaN($scope.DMS.LADeg)&&void 0!==$scope.DMS.LADeg||isNaN($scope.DMS.LAMin)&&void 0!==$scope.DMS.LAMin||isNaN($scope.DMS.LASec)&&void 0!==$scope.DMS.LASec)openLatModal("dms","range"),isNaN($scope.DMS.LADeg)&&($scope.DMS.LADeg=void 0),isNaN($scope.DMS.LAMin)&&($scope.DMS.LAMin=void 0),isNaN($scope.DMS.LASec)&&($scope.DMS.LASec=void 0);else{var lat=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),latDis=hwmSite.latitude_dd-lat;Math.abs(latDis)>5e-4&&openLatModal("dms","distance")}if($scope.DMS.LODeg<-175||$scope.DMS.LODeg>-60||isNaN($scope.DMS.LODeg)&&void 0!==$scope.DMS.LODeg||isNaN($scope.DMS.LOMin)&&void 0!==$scope.DMS.LOMin||isNaN($scope.DMS.LOSec)&&void 0!==$scope.DMS.LOSec)openLongModal("dms","range"),isNaN($scope.DMS.LODeg)&&($scope.DMS.LODeg=void 0),isNaN($scope.DMS.LOMin)&&($scope.DMS.LOMin=void 0),isNaN($scope.DMS.LOSec)&&($scope.DMS.LOSec=void 0);else{var lo=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),loDis=hwmSite.longitude_dd-lo;Math.abs(loDis)>5e-4&&openLongModal("dms","distance")}}else{var h="edit"==$scope.view.HWMval?$scope.hwmCopy:$scope.aHWM;if(h.latitude_dd<0||h.latitude_dd>73||isNaN(h.latitude_dd))openLatModal("latlong","range"),isNaN(h.latitude_dd)&&(h.latitude_dd=void 0);else{var latDistance=hwmSite.latitude_dd-h.latitude_dd;Math.abs(latDistance)>5e-4&&openLatModal("latlong","distance")}if(h.longitude_dd<-175||h.longitude_dd>-60||isNaN(h.longitude_dd))openLongModal("latlong","range"),isNaN(h.longitude_dd)&&(h.longitude_dd=void 0);else{var longDistance=hwmSite.longitude_dd-h.longitude_dd;Math.abs(longDistance)>5e-4&&openLongModal("latlong","distance")}}},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.chooseQuality=function(){var h="edit"==$scope.view.HWMval?$scope.hwmCopy:$scope.aHWM;if(""!==h.hwm_uncertainty){var x=Number(h.hwm_uncertainty);h.hwm_quality_id=$scope.hwmQualList.filter(function(h){return h.min_range<=x&&h.max_range>=x})[0].hwm_quality_id}},$scope.compareToUncertainty=function(){var h="edit"==$scope.view.HWMval?$scope.hwmCopy:$scope.aHWM;if(""!==h.hwm_uncertainty&&void 0!==h.hwm_uncertainty){var x=Number(h.hwm_uncertainty),matchingQualId=$scope.hwmQualList.filter(function(h){return h.min_range<=x&&h.max_range>=x})[0].hwm_quality_id;if(h.hwm_quality_id!==matchingQualId){var incongruentModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Warning</h3></div><div class="modal-body"><p>There is a mismatch between the hwm quality chosen and the hwm uncertainty above. Please correct your hwm uncertainty.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});incongruentModal.result.then(function(){angular.element("[name='hwm_uncertainty']").focus()})}}};var makeAdate=function(d){var aDate=new Date;""!==d&&void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};"empty"!=thisHWM?($scope.createOReditHWM="edit",$scope.aHWM=angular.copy(thisHWM),$scope.aHWM.hwm_type=$scope.hwmTypeList.filter(function(ht){return ht.hwm_type_id==$scope.aHWM.hwm_type_id})[0].hwm_type,null!==$scope.aHWM.stillwater&&($scope.aHWM.Tranquil=$scope.aHWM.stillwater>0?"Yes":"No"),$scope.aHWM.Marker=$scope.aHWM.marker_id>0?$scope.markerList.filter(function(m){return m.marker_id==$scope.aHWM.marker_id})[0].marker1:"",$scope.aHWM.Quality=$scope.aHWM.hwm_quality_id>0?$scope.hwmQualList.filter(function(hq){return hq.hwm_quality_id==$scope.aHWM.hwm_quality_id})[0].hwm_quality:"",$scope.aHWM.hdatum=$scope.aHWM.hdatum_id>0?$scope.HDatumsList.filter(function(hd){return hd.datum_id==$scope.aHWM.hdatum_id})[0].datum_name:"",$scope.aHWM.hCollectMethod=$scope.aHWM.hcollect_method_id>0?$scope.hCollMList.filter(function(hc){return hc.hcollect_method_id==$scope.aHWM.hcollect_method_id})[0].hcollect_method:"",$scope.aHWM.vDatum=$scope.aHWM.vdatum_id>0?$scope.VDatumsList.filter(function(vd){return vd.datum_id==$scope.aHWM.vdatum_id})[0].datum_name:"",$scope.aHWM.vCollectMethod=$scope.aHWM.vcollect_method_id>0?$scope.vCollMList.filter(function(vc){return vc.vcollect_method_id==$scope.aHWM.vcollect_method_id})[0].vcollect_method:"",void 0!==$scope.aHWM.approval_id&&HWM.getHWMApproval({id:$scope.aHWM.hwm_id}).$promise.then(function(response){$scope.ApprovalInfo.approvalDate=new Date(response.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==response.member_id})[0]}),$scope.hwmModalHeader="HWM Information",$scope.EventName=$scope.aHWM.event_id>0?$scope.eventList.filter(function(e){
return e.event_id==$scope.aHWM.event_id})[0].event_name:"None provided",$scope.aHWM.flag_date=makeAdate($scope.aHWM.flag_date),null!==$scope.aHWM.survey_date&&void 0!==$scope.aHWM.survey_date&&($scope.aHWM.survey_date=makeAdate($scope.aHWM.survey_date),$scope.SurveyMember=allMembers.filter(function(m){return m.member_id==$scope.aHWM.survey_member_id})[0]),$scope.FlagMember=allMembers.filter(function(m){return m.member_id==$scope.aHWM.flag_member_id})[0]):($scope.hwmModalHeader="Create new HWM",$scope.createOReditHWM="create",$scope.aHWM={site_id:$scope.thisHWMsite.site_id,event_id:$cookies.get("SessionEventID"),hwm_environment:"Riverine",bank:"N/A",hwm_label:"no_label",stillwater:0,latitude_dd:hwmSite.latitude_dd,longitude_dd:hwmSite.longitude_dd,waterbody:hwmSite.waterbody,hdatum_id:hwmSite.hdatum_id,hcollect_method_id:hwmSite.hcollect_method_id,flag_date:makeAdate(""),flag_member_id:$scope.LoggedInMember.member_id},$scope.EventName=$cookies.get("SessionEventName"),$scope.FlagMember=$scope.LoggedInMember),$scope.aHWM.decDegORdms="dd",$scope.aHWM.FTorCM="ft",$scope.create=function(valid){if(valid){var createdHWM={};void 0!==$scope.DMS.LADeg&&($scope.aHWM.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.aHWM.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)),void 0!==$scope.aHWM.survey_date&&null!==$scope.aHWM.survey_date&&($scope.aHWM.survey_member_id=$scope.flag_member_id),"cm"==$scope.aHWM.FTorCM&&($scope.aHWM.FTorCM="ft",void 0!==$scope.aHWM.uncertainty&&($scope.aHWM.uncertainty=parseFloat($scope.aHWM.uncertainty/30.48).toFixed(6))),void 0!==$scope.aHWM.elev_ft&&null!==$scope.aHWM.elev_ft&&(void 0===$scope.aHWM.survey_date&&($scope.aHWM.survey_date=makeAdate("")),$scope.aHWM.survey_member_id=$scope.aHWM.flag_member_id),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM.save($scope.aHWM).$promise.then(function(response){createdHWM=response,toastr.success("HWM created");var sendBack=[createdHWM,"created"];$uibModalInstance.close(sendBack)})}},$scope.approveHWM=function(){var thisHWM=$scope.aHWM,approveModal=$uibModal.open({template:"<div class='modal-header'><h3 class='modal-title'>Approve HWM</h3></div><div class='modal-body'><p>Are you ready to approve this HWM?</p><p>The surveyed elevation is {{approveHWM.elev_ft || '---'}}</p><p>The height above ground is {{approveHWM.height_above_gnd || '---'}}</p></div><div class='modal-footer'><button class='btn btn-primary' ng-click='approveIt()'>Approve</button><button class='btn btn-warning' ng-click='cancel()'>Cancel</button></div>",controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.approveHWM=thisHWM,$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.approveIt=function(){$uibModalInstance.close(thisHWM)}}],size:"sm"});approveModal.result.then(function(h){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM.approveHWM({id:h.hwm_id}).$promise.then(function(approvalResponse){h.approval_id=approvalResponse.approval_id,toastr.success("HWM Approved"),$scope.ApprovalInfo.approvalDate=new Date(approvalResponse.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==approvalResponse.member_id})[0]},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.unApproveHWM=function(){var thisHWM=$scope.aHWM,unapproveModal=$uibModal.open({template:"<div class='modal-header'><h3 class='modal-title'>Remove Approval</h3></div><div class='modal-body'><p>Are you sure you wan to unapprove this HWM?</p></div><div class='modal-footer'><button class='btn btn-primary' ng-click='unApproveIt()'>Unapprove</button><button class='btn btn-warning' ng-click='cancel()'>Cancel</button></div>",controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.approveHWM=thisHWM,$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.unApproveIt=function(){$uibModalInstance.close(thisHWM)}}],size:"sm"});unapproveModal.result.then(function(h){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM.unApproveHWM({id:h.hwm_id}).$promise.then(function(){h.approval_id=null,toastr.success("HWM Unapproved"),$scope.ApprovalInfo={}},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})};var formatHWM=function(h){var formattedHWM={hwm_id:h.hwm_id,waterbody:h.waterbody,site_id:h.site_id,event_id:h.event_id,hwm_type_id:h.hwm_type_id,hwm_quality_id:h.hwm_quality_id,hwm_locationdescription:h.hwm_locationdescription,latitude_dd:h.latitude_dd,longitude_dd:h.longitude_dd,survey_date:h.survey_date,elev_ft:h.elev_ft,vdatum_id:h.vdatum_id,vcollect_method_id:h.vcollect_method_id,bank:h.bank,approval_id:h.approval_id,marker_id:h.marker_id,height_above_gnd:h.height_above_gnd,hcollect_method_id:h.hcollect_method_id,peak_summary_id:h.peak_summary_id,hwm_notes:h.hwm_notes,hwm_environment:h.hwm_environment,flag_date:h.flag_date,stillwater:h.stillwater,hdatum_id:h.hdatum_id,flag_member_id:h.flag_member_id,survey_member_id:h.survey_member_id,uncertainty:h.uncertainty,hwm_uncertainty:h.hwm_uncertainty,hwm_label:h.hwm_label};return formattedHWM};$scope.save=function(valid){if(valid){void 0!==$scope.DMS.LADeg&&($scope.hwmCopy.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.hwmCopy.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)),void 0!==$scope.adminChanged.event_id&&($scope.hwmCopy.event_id=$scope.adminChanged.event_id),void 0!==$scope.hwmCopy.survey_date&&void 0===$scope.hwmCopy.survey_member_id&&($scope.hwmCopy.survey_member_id=$cookies.get("mID")),"cm"==$scope.hwmCopy.FTorCM&&($scope.hwmCopy.FTorCM="ft",void 0!==$scope.hwmCopy.uncertainty&&($scope.hwmCopy.uncertainty=parseFloat($scope.hwmCopy.uncertainty/30.48).toFixed(6))),void 0!==$scope.hwmCopy.elev_ft&&null!==$scope.hwmCopy.elev_ft&&(void 0===$scope.hwmCopy.survey_date&&($scope.hwmCopy.survey_date=makeAdate("")),void 0===$scope.hwmCopy.survey_member_id&&($scope.hwmCopy.survey_member_id=$cookies.get("mID"))),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var cleanHWM=formatHWM($scope.hwmCopy);HWM.update({id:cleanHWM.hwm_id},cleanHWM).$promise.then(function(response){toastr.success("HWM updated"),$scope.aHWM=response,thisHWM=response,$scope.aHWM.hwm_type=$scope.hwmTypeList.filter(function(ht){return ht.hwm_type_id==$scope.aHWM.hwm_type_id})[0].hwm_type,null!==$scope.aHWM.stillwater&&($scope.aHWM.Tranquil=$scope.aHWM.stillwater>0?"Yes":"No"),$scope.aHWM.Marker=$scope.aHWM.marker_id>0?$scope.markerList.filter(function(m){return m.marker_id==$scope.aHWM.marker_id})[0].marker1:"",$scope.aHWM.Quality=$scope.aHWM.hwm_quality_id>0?$scope.hwmQualList.filter(function(hq){return hq.hwm_quality_id==$scope.aHWM.hwm_quality_id})[0].hwm_quality:"",$scope.aHWM.hdatum=$scope.aHWM.hdatum_id>0?$scope.HDatumsList.filter(function(hd){return hd.datum_id==$scope.aHWM.hdatum_id})[0].datum_name:"",$scope.aHWM.hCollectMethod=$scope.aHWM.hcollect_method_id>0?$scope.hCollMList.filter(function(hc){return hc.hcollect_method_id==$scope.aHWM.hcollect_method_id})[0].hcollect_method:"",$scope.aHWM.vDatum=$scope.aHWM.vdatum_id>0?$scope.VDatumsList.filter(function(vd){return vd.datum_id==$scope.aHWM.vdatum_id})[0].datum_name:"",$scope.aHWM.vCollectMethod=$scope.aHWM.vcollect_method_id>0?$scope.vCollMList.filter(function(vc){return vc.vcollect_method_id==$scope.aHWM.vcollect_method_id})[0].vcollect_method:"",$scope.aHWM.flag_date=makeAdate($scope.aHWM.flag_date),void 0!==hwmApproval&&($scope.ApprovalInfo.approvalDate=new Date(hwmApproval.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==hwmApproval.member_id})[0]),null!==$scope.aHWM.survey_date&&void 0!==$scope.aHWM.survey_date&&($scope.aHWM.survey_date=makeAdate($scope.aHWM.survey_date),$scope.SurveyMember=allMembers.filter(function(m){return m.member_id==$scope.aHWM.survey_member_id})[0]),$scope.FlagMember=allMembers.filter(function(m){return m.member_id==$scope.aHWM.flag_member_id})[0],$scope.hwmCopy={},$scope.view.HWMval="detail"})}},$scope.deleteHWM=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aHWM},what:function(){return"HWM"}}});DeleteModalInstance.result.then(function(hwmToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM["delete"]({id:hwmToRemove.hwm_id},hwmToRemove).$promise.then(function(){$scope.HWMFiles=[],$scope.hwmImageFiles=[];for(var l=$scope.allSFiles.length;l--;)$scope.allSFiles[l].hwm_id==hwmToRemove.hwm_id&&$scope.allSFiles.splice(l,1);Site_Files.setAllSiteFiles($scope.allSFiles),toastr.success("HWM Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.cancel=function(){$rootScope.stateIsLoading.showLoading=!1;var sendBack=$scope.aHWM;$uibModalInstance.close(sendBack)},$scope.wannaEditHWM=function(){$scope.view.HWMval="edit",$scope.hwmCopy=angular.copy($scope.aHWM),$scope.hwmCopy.decDegORdms="dd",$scope.hwmCopy.FTorCM="ft"},$scope.cancelHWMEdit=function(){$scope.view.HWMval="detail",$scope.hwmCopy=[],$scope.adminChanged={},$scope.EventName=$scope.eventList.filter(function(e){return e.event_id==$scope.aHWM.event_id})[0].event_name},$scope.stamp=FILE_STAMP.getStamp(),$scope.fileItemExists=!0,$scope.saveFileUpload=function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.sFileIsUploading=!0;var fileParts={FileEntity:{file_id:$scope.aFile.file_id,name:$scope.aFile.name,description:$scope.aFile.description,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,file_date:$scope.aFile.file_date,hwm_id:$scope.aFile.hwm_id,site_id:$scope.aFile.site_id,filetype_id:$scope.aFile.filetype_id,source_id:$scope.aFile.source_id,path:$scope.aFile.path,data_file_id:$scope.aFile.data_file_id,instrument_id:$scope.aFile.instrument_id,photo_date:$scope.aFile.photo_date,is_nwis:$scope.aFile.is_nwis,objective_point_id:$scope.aFile.objective_point_id},File:void 0!==$scope.aFile.File1?$scope.aFile.File1:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),FILE_STAMP.setStamp(),$scope.stamp=FILE_STAMP.getStamp(),$scope.isPhoto=$scope.aFile.File1.type.indexOf("image")>-1?!0:!1,$scope.aFile.name=fresponse.name,$scope.aFile.path=fresponse.path,void 0!==$scope.aFile.File1&&($scope.aFile.File=$scope.aFile.File1,$scope.aFile.File1=void 0),fresponse.fileBelongsTo="HWM File",$scope.HWMFiles.splice($scope.existFileIndex,1),$scope.HWMFiles.push(fresponse),1===fresponse.filetype_id&&($scope.hwmImageFiles.splice($scope.existFileIndex,1),$scope.hwmImageFiles.push(fresponse)),$scope.allSFiles[$scope.allSFileIndex]=fresponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.sFileIsUploading=!1,$scope.fileItemExists=!0},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})},$scope.showFile=function(file){if($scope.fileTypes=$scope.fileTypeList,$scope.agencies=agencyList,$scope.existFileIndex=-1,$scope.existIMGFileIndex=-1,$scope.allSFileIndex=-1,$scope.aFile={},$scope.aSource={},0!==file){if($scope.existFileIndex=$scope.HWMFiles.indexOf(file),$scope.allSFileIndex=$scope.allSFiles.indexOf(file),$scope.existIMGFileIndex=$scope.hwmImageFiles.length>0?$scope.hwmImageFiles.indexOf(file):-1,$scope.aFile=angular.copy(file),FILE.getFileItem({id:$scope.aFile.file_id}).$promise.then(function(response){$scope.fileItemExists=response.Length>0?!0:!1}),$scope.aFile.fileType=$scope.fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,void 0!==$scope.aFile.name){var fI=$scope.aFile.name.lastIndexOf("."),fileExt=$scope.aFile.name.substring(fI+1);$scope.isPhoto=fileExt.match(/(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)?!0:!1}$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),null!==file.source_id&&SOURCE.query({id:file.source_id}).$promise.then(function(s){$scope.aSource=s,$scope.aSource.FULLname=$scope.aSource.source_name,$scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name})}else $scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname,$scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name;$scope.showFileForm=!0,$scope.updateAgencyForCaption=function(){1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}},$scope.createFile=function(valid){if(valid){$scope.HWMfileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){if(8!==$scope.aFile.filetype_id){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,photo_date:$scope.aFile.photo_date,description:$scope.aFile.description,site_id:$scope.thisHWMsite.site_id,source_id:response.source_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,hwm_id:$scope.aHWM.hwm_id},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="HWM File",$scope.HWMFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),1===fresponse.filetype_id&&$scope.hwmImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.HWMfileIsUploading=!1},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error uploading file: "+errorResponse.statusText)})}else $scope.aFile.source_id=response.source_id,$scope.aFile.site_id=$scope.thisHWMsite.site_id,$scope.aFile.hwm_id=$scope.aHWM.hwm_id,FILE.save($scope.aFile).$promise.then(function(fresponse){toastr.success("Link saved"),fresponse.fileBelongsTo="HWM File",$scope.HWMFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.HWMfileIsUploading=!1},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error creating Source info: "+errorResponse.statusText)})}},$scope.saveFile=function(valid){if(valid){$scope.HWMfileIsUploading=!0;{$scope.aFile.fileBelongsTo}if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.aSource.source_id){var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){$scope.aFile.source_id=response.source_id,FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="HWM File",$scope.HWMFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.HWMfileIsUploading=!1},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})}}},$scope.deleteFile=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.HWMFiles.splice($scope.existFileIndex,1),$scope.allSFiles.splice($scope.allSFileIndex,1),$scope.hwmImageFiles.splice($scope.existIMGFileIndex,1),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelFile=function(){$scope.aFile={},$scope.aSource={},$scope.showFileForm=!1},$rootScope.stateIsLoading.showLoading=!1}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("hwmCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","thisSite","thisSiteHWMs","HWM_Service","allAgencies","allHWMTypes","allHWMQualities","allHorDatums","allMarkers","allHorCollMethods","allVertDatums","allVertColMethods","allEvents","allFileTypes","MEMBER","HWM",function($scope,$rootScope,$cookies,$location,$state,$http,$uibModal,$filter,$timeout,thisSite,thisSiteHWMs,HWM_Service,allAgencies,allHWMTypes,allHWMQualities,allHorDatums,allMarkers,allHorCollMethods,allVertDatums,allVertColMethods,allEvents,allFileTypes,MEMBER,HWM){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($scope.hwmCount={total:thisSiteHWMs.length},$scope.SiteHWMs=thisSiteHWMs,HWM_Service.setAllSiteHWMs($scope.SiteHWMs),$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1,void 0!==newValue?($scope.SiteHWMs=thisSiteHWMs.filter(function(h){return h.event_id==$cookies.get("SessionEventID")}),$scope.hwmCount={total:$scope.SiteHWMs.length}):($scope.SiteHWMs=thisSiteHWMs,$scope.hwmCount={total:$scope.SiteHWMs.length})}),$scope.showHWMModal=function(HWMclicked){{var hwmFileTypes=allFileTypes.filter(function(hft){return"Photo"===hft.filetype||"Historic Citation"===hft.filetype||"Field Sheets"===hft.filetype||"Level Notes"===hft.filetype||"Other"===hft.filetype||"Link"===hft.filetype||"Sketch"===hft.filetype}),passAllLists=[allHWMTypes,allHWMQualities,allHorDatums,allHorCollMethods,allVertDatums,allVertColMethods,allMarkers,allEvents,hwmFileTypes];$scope.SiteHWMs.indexOf(HWMclicked)}$rootScope.stateIsLoading.showLoading=!0;var modalInstance=$uibModal.open({templateUrl:"HWMmodal.html",controller:"hwmModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{allDropdowns:function(){return passAllLists},thisHWM:function(){return 0!==HWMclicked?HWMclicked:"empty"},allSiteHWMs:function(){return $scope.SiteHWMs},hwmApproval:function(){return 0!==HWMclicked&&void 0!==HWMclicked.approval_id&&HWMclicked.approval_id>0?HWM.getHWMApproval({id:HWMclicked.hwm_id}).$promise:void 0},hwmSite:function(){return thisSite},agencyList:function(){return allAgencies},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise}}});modalInstance.result.then(function(createdHWM){if("created"==createdHWM[1]&&($scope.SiteHWMs.push(createdHWM[0]),HWM_Service.setAllSiteHWMs($scope.SiteHWMs),$scope.hwmCount.total=$scope.SiteHWMs.length),void 0===createdHWM[1]){var indexClicked=$scope.SiteHWMs.indexOf(HWMclicked);$scope.SiteHWMs[indexClicked]=createdHWM,HWM_Service.setAllSiteHWMs($scope.SiteHWMs)}if("deleted"==createdHWM[1]){var indexClicked1=$scope.SiteHWMs.indexOf(HWMclicked);$scope.SiteHWMs.splice(indexClicked1,1),$scope.hwmCount.total=$scope.SiteHWMs.length,HWM_Service.setAllSiteHWMs($scope.SiteHWMs)}})})}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("historicHWMCtrl",["$scope","$rootScope","$cookies","$location","$http","$filter","$uibModal","SITE","HWM","OBJECTIVE_POINT","GEOCODE","thisEvent","HDatums","HCollectMeths","States","Counties","OPTypes","VDatums","HTypes","HWMQuals",function($scope,$rootScope,$cookies,$location,$http,$filter,$uibModal,SITE,HWM,OBJECTIVE_POINT,GEOCODE,thisEvent,HDatums,HCollectMeths,States,Counties,OPTypes,VDatums,HTypes,HWMQuals){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$scope.showLoading=!1,$scope.dynamic=0,$scope.max=0,$scope.hotInstance,$scope.columnWidths=[140,76,84,220,220,100,150,120,120,180,120,140,140,120,140,140,140,120],$scope.Changes=[],$scope.invalids=[],$scope.event=thisEvent,$scope.hDatumList=HDatums,$scope.hDatumArray=[],$scope.hCollectList=HCollectMeths,$scope.hcollectArray=[],$scope.stateList=States,$scope.stateArray=[],$scope.countyList=Counties,$scope.countyArray=[],$scope.opTypeList=OPTypes,$scope.opTypeArray=[],$scope.vDatumList=VDatums,$scope.vDatumArray=[],$scope.hwmTypeList=HTypes,$scope.hwmTypeArray=[],$scope.hwmEnvirList=["Coastal","Riverine"],$scope.hwmQualityList=HWMQuals,$scope.hwmQualityArray=[],$scope.historicHWMs=[],angular.forEach($scope.hDatumList,function(l){$scope.hDatumArray.push(l.datum_name)}),angular.forEach($scope.hCollectList,function(l){$scope.hcollectArray.push(l.hcollect_method)}),angular.forEach($scope.stateList,function(l){$scope.stateArray.push(l.state_name)}),angular.forEach($scope.countyList,function(l){$scope.countyArray.push(l.county_name)}),angular.forEach($scope.opTypeList,function(l){$scope.opTypeArray.push(l.op_type)}),angular.forEach($scope.vDatumList,function(l){$scope.vDatumArray.push(l.datum_abbreviation)}),angular.forEach($scope.hwmTypeList,function(l){$scope.hwmTypeArray.push(l.hwm_type)}),angular.forEach($scope.hwmQualityList,function(l){$scope.hwmQualityArray.push(l.hwm_quality)}),$scope.getStateCo=function(c,r){var rowValues=$scope.hotInstance.getDataAtRow(r);if(""!==rowValues[1]&&null!==rowValues[1]&&""!==rowValues[2]&&null!==rowValues[2])$rootScope.stateIsLoading.showLoading=!0,$http.defaults.headers.common.Accept="application/json",delete $http.defaults.headers.common.Authorization,GEOCODE.getAddressParts({Longitude:rowValues[2],Latitude:rowValues[1]},function(response){if(response.result.geographies.Counties.length>0){var stateFIPS=response.result.geographies.Counties[0].STATE,countyName=response.result.geographies.Counties[0].NAME,thisStateID=$scope.countyList.filter(function(c){return c.state_fip==stateFIPS})[0].state_id,thisState=$scope.stateList.filter(function(s){return s.state_id==thisStateID})[0];if(void 0!==thisState){$scope.hotInstance.setDataAtCell(r,7,thisState.state_name);var stateCountyList=$scope.countyList.filter(function(c){return c.state_id==thisState.state_id});$scope.countyArray=[],angular.forEach(stateCountyList,function(l){$scope.countyArray.push(l.county_name)}),$scope.hotInstance.setCellMeta(r,8,"source",$scope.countyArray),$scope.hotInstance.setDataAtCell(r,8,countyName),$rootScope.stateIsLoading.showLoading=!1}else $rootScope.stateIsLoading.showLoading=!1,toastr.error("The Latitude/Longitude did not return a recognized state. Please choose one from the dropdown.")}else $rootScope.stateIsLoading.showLoading=!1,toastr.error("Error getting address location.")},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error: "+errorResponse.statusText)});else{$rootScope.stateIsLoading.showLoading=!1;{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please provide a Latitude and Longitude before clicking Get State/County</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}}},$scope.UpdateCounties=function(theChange){var thisState=$scope.stateList.filter(function(s){return s.state_name==theChange[3]})[0],stateCountyList=$scope.countyList.filter(function(c){return c.state_id==thisState.state_id});$scope.countyArray=[],angular.forEach(stateCountyList,function(l){$scope.countyArray.push(l.county_name)}),$scope.hotInstance.setCellMeta(theChange[0],8,"source",$scope.countyArray)};var requiredModal=function(){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>This field is required.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',backdrop:"static",keyboard:!1,controller:function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}},size:"sm"})};$scope.latValidator=function(value,callback){if(0>value||isNaN(value)){{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Latitude must be greater than 0.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}callback(!1)}else value?callback(!0):(requiredModal(),callback(!1))},$scope.longValidator=function(value,callback){if(value>0||isNaN(value)){{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Longitude must be less than 0.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}callback(!1)}else value?callback(!0):(requiredModal(),callback(!1))};var colorRenderer=function(instance,td,row,col,prop,value,cellProperties){var $button=$('<button type="button" class="btn bnt-primary"></button>');return $button.html("Get State/County"),$(td).empty().append($button),td};$scope.requiredValidator=function(value,callback){value?callback(!0):(requiredModal(),callback(!1))},$scope.reset=function(){var resetModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title"></h3></div><div class="modal-body"><p>Are you sure you want to clear the table?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss()}}],size:"sm"});resetModal.result.then(function(){$scope.historicHWMs=[],$scope.invalids=[]})},$scope.tableSettings={colHeaders:!0,rowHeaders:!0,contextMenu:["row_above","row_below","remove_row"],minSpareRows:3,afterInit:function(){$scope.hotInstance=this},manualColumnResize:!0,manualRowResize:!0,wordWrap:!1,viewportColumnRenderingOffsetNumber:1,colWidths:$scope.columnWidths,cells:function(row,col,prop){if(6==col){var cellprops={};return cellprops.renderer=colorRenderer,cellprops}},onBeforeChange:function(data){for(var i=0;i<data.length;i++)"state"==data[i][1]&&data[i][3]!==data[i][2]&&$scope.UpdateCounties(data[i])},onAfterChange:function(change,source){if("loadData"!=source)for(var i=0;i<change.length;i++)change[i][2]!==change[i][3]&&$scope.Changes.push(change[i])},afterOnCellMouseDown:function(event,coords,td){6==coords.col&&$scope.getStateCo(coords.col,coords.row)},onAfterValidate:function(isValid,value,row,prop,souce){if(isValid||$scope.invalids.push({isValid:isValid,row:row,prop:prop}),isValid){for(var vIndex=-1,vI=0;vI<$scope.invalids.length;vI++)if($scope.invalids[vI].row==row&&$scope.invalids[vI].prop==prop){vIndex=vI;break}vIndex>-1&&$scope.invalids.splice(vIndex,1)}},rowHeights:50}}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("bulkHWMCtrl",["$scope","$state","$rootScope","$cookies","$http","$q","$filter","$uibModal","SITE","HWM","MEMBER","FILE","INST_COLL_CONDITION","PEAK","SOURCE","SERVER_URL","eventList","stateList","countyList","hwmTypeList","markerList","hwmQualList","horizDatumList","horCollMethList","vertDatumList","vertCollMethList","fileTypesList","agenciesList",function($scope,$state,$rootScope,$cookies,$http,$q,$filter,$uibModal,SITE,HWM,MEMBER,FILE,INST_COLL_CONDITION,PEAK,SOURCE,SERVER_URL,eventList,stateList,countyList,hwmTypeList,markerList,hwmQualList,horizDatumList,horCollMethList,vertDatumList,vertCollMethList,fileTypesList,agenciesList){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$scope.showTips=!0,$scope.status={hwmOpen:!0},$scope.serverURL=SERVER_URL,$scope.hwmTypes=hwmTypeList,$scope.markers=markerList,$scope.hwmQuals=hwmQualList,$scope.horDatums=horizDatumList,$scope.horCollMeths=horCollMethList,$scope.vertDatums=vertDatumList,$scope.vertCollMeths=vertCollMethList,$scope.states=stateList,$scope.counties=countyList,$scope.showLoading=!1,$scope.max=0,$scope.dynamic=0,$scope.showProgressBar=!1,$scope.hotInstance,$scope.columnWidths=[180,150,180,180,150,170,180,100,200,140,150,180,220,100,130,120,130,160,190,160,200,200,120],$scope.siteNoArrowClicked=!1,$scope.uploadHWMs=[],$scope.postedHWMs=[],$scope.invalids=[],$scope.events=eventList,$scope.notValid=!0,$scope.hwmTypeArray=[],angular.forEach(hwmTypeList,function(ht){$scope.hwmTypeArray.push(ht.hwm_type)}),$scope.envirArray=["Coastal","Riverine"],$scope.markerArray=[],angular.forEach(markerList,function(m){$scope.markerArray.push(m.marker1)}),$scope.qualArray=[],angular.forEach(hwmQualList,function(hq){$scope.qualArray.push(hq.hwm_quality)}),$scope.bankArray=["Left","Right","N/A"],$scope.hdatumArray=[],angular.forEach(horizDatumList,function(hd){$scope.hdatumArray.push(hd.datum_name)}),$scope.hcollMethArray=[],angular.forEach(horCollMethList,function(hcm){$scope.hcollMethArray.push(hcm.hcollect_method)}),$scope.vdatumArray=[],angular.forEach(vertDatumList,function(vd){$scope.vdatumArray.push(vd.datum_abbreviation)}),$scope.vcollMethArray=[],angular.forEach(vertCollMethList,function(vcm){$scope.vcollMethArray.push(vcm.vcollect_method);

}),$scope.tranqArray=["Yes","No"],$scope.chosenEvent=0,$scope.chosenEventName="",$scope.delIndex=-1,$scope.sitePeakarray=[],$scope.addApprovalFile=function(){var approvedFILEmodal=$uibModal.open({templateUrl:"BulkApprovalFILE_modal.html",controller:["$scope","$cookies","$uibModal","$uibModalInstance","fileTypeList","agencyList","thisMember",function($scope,$cookies,$uibModal,$uibModalInstance,fileTypeList,agencyList,thisMember){$scope.hwmFileTypes=fileTypeList.filter(function(hft){return"Photo"===hft.filetype||"Historic Citation"===hft.filetype||"Field Sheets"===hft.filetype||"Level Notes"===hft.filetype||"Other"===hft.filetype||"Link"===hft.filetype||"Sketch"===hft.filetype}),$scope.aFile={},$scope.aFile.filetype_id=7,$scope.aFile.description="PDF of Approval Memo",$scope.aSource={},$scope.agencies=agencyList,$scope.approval_type=7,$scope.updateFileType=function(){$scope.aFile.filetype_id=Number($scope.approval_type),$scope.aFile.description="7"==$scope.approval_type?"PDF of Approval Memo":"Report Link"},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=thisMember,$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname,$scope.addFile=function(valid){if(valid)if($scope.aFile.name||$scope.aFile.File){var fileParts=[$scope.aFile,$scope.aSource];$uibModalInstance.close(fileParts)}else{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>You must upload a File for Approval Memo or a File URL for Report Link.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}},$scope.cancelFile=function(){$uibModalInstance.dismiss()}}],size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{fileTypeList:function(){return fileTypesList},agencyList:function(){return agenciesList},thisMember:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.query({id:$cookies.get("mID")}).$promise}}});approvedFILEmodal.result.then(function(createdFile){$scope.approvalFile=createdFile[0],$scope.approvalSource=createdFile[1]})};var makeAdate=function(d){var aDate=new Date;""!==d&&void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime},getFindSiteModal=function(r,c,hwmParts){angular.element("#loadingDiv").removeClass("noShow");var dataAtRow=$scope.hotInstance.getDataAtRow(r);if(setTimeout(function(){$scope.hotInstance.deselectCell()},100),""!==dataAtRow[9]&&""!==dataAtRow[10]&&null!==dataAtRow[9]&&null!==dataAtRow[10]){angular.element("#loadingDiv").addClass("noShow");var siteModal=$uibModal.open({templateUrl:"associateSitemodal.html",backdrop:"static",keyboard:!1,resolve:{nearBySites:function(){return SITE.getProximitySites({Latitude:dataAtRow[9],Longitude:dataAtRow[10],Buffer:5e-4}).$promise},HWMparts:function(){return hwmParts},siteNoAlreadyThere:function(){return dataAtRow[22]},hdatums:function(){return $scope.horDatums},hcolMeths:function(){return $scope.horCollMeths},vdatums:function(){return $scope.vertDatums},vcolMeths:function(){return $scope.vertCollMeths},states:function(){return $scope.states},counties:function(){return $scope.counties}},controller:"hwmSiteModalCtrl",size:"sm"});siteModal.result.then(function(thisSite){angular.element("#loadingDiv").addClass("noShow"),void 0!==thisSite&&$scope.hotInstance.setDataAtCell(r,c,thisSite.site_no)})}else{angular.element("#loadingDiv").addClass("noShow");{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate this row\'s latitude and longitude before finding a site to associate.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}}};$scope.requiredValidator=function(value,callback){if($scope.siteNoArrowClicked)$scope.siteNoArrowClicked=!1,callback(!0);else{var row=this.row,col=this.col,dataAtRow=$scope.hotInstance.getDataAtRow(row),otherDataInRow=!1;if(angular.forEach(dataAtRow,function(d,index){null!==d&&""!==d&&index!==col&&(otherDataInRow=!0)}),!value&&otherDataInRow){var whichOne=$scope.hotInstance.getColHeader(col);toastr.options.timeOut="6000",toastr.options.closeButton=!0,toastr.error(whichOne+" is a required field."),callback(!1)}else callback(!0)}},$scope.latValidator=function(value,callback){var row=this.row,col=this.col,dataAtRow=$scope.hotInstance.getDataAtRow(row),otherDataInRow=!1;if(angular.forEach(dataAtRow,function(d,index){null!==d&&""!==d&&index!==col&&(otherDataInRow=!0)}),(22>value||value>55||isNaN(value))&&otherDataInRow)setTimeout(function(){$scope.hotInstance.deselectCell()},100),toastr.options.timeOut="6000",toastr.options.closeButton=!0,toastr.error("Latitude must be between 22.0 and 55.0 (dec deg)."),callback(!1);else if(!value&&otherDataInRow){var whichOne=$scope.hotInstance.getColHeader(col);toastr.options.timeOut="6000",toastr.options.closeButton=!0,toastr.error(whichOne+" is a required field."),callback(!1)}else callback(!0)},$scope.longValidator=function(value,callback){var row=this.row,col=this.col,dataAtRow=$scope.hotInstance.getDataAtRow(row),otherDataInRow=!1;if(angular.forEach(dataAtRow,function(d,index){null!==d&&""!==d&&index!==col&&(otherDataInRow=!0)}),(-130>value||value>-55||isNaN(value))&&otherDataInRow)setTimeout(function(){$scope.hotInstance.deselectCell()},100),toastr.options.timeOut="6000",toastr.options.closeButton=!0,toastr.error("Longitude must be between -130.0 and -55.0 (dec deg)."),callback(!1);else if(!value&&otherDataInRow){var whichOne=$scope.hotInstance.getColHeader(col);toastr.options.timeOut="6000",toastr.options.closeButton=!0,toastr.error(whichOne+" is a required field."),callback(!1)}else callback(!0)},$scope.numericValidator=function(value,callback){var whichOne=$scope.hotInstance.getColHeader(this.col);if(""!==value&&null!==value&&isNaN(Number(value)))setTimeout(function(){$scope.hotInstance.deselectCell()},100),toastr.options.timeOut="6000",toastr.options.closeButton=!0,toastr.error(whichOne+" must be an numeric value (ex: 0.03)."),callback(!1);else if("HWM Uncertainty (ft)"==whichOne&&""!==value&&null!==value){var hwmQualValue=$scope.hotInstance.getDataAtCell(this.row,6);if(null!==hwmQualValue&&""!==hwmQualValue){var appropriateHWMQual="";appropriateHWMQual=value>.4?"VP: > 0.40 ft":.05>value?"Excellent: +/- 0.05 ft":$scope.hwmQuals.filter(function(h){return h.min_range<=value&&h.max_range>=value})[0].hwm_quality,appropriateHWMQual!==hwmQualValue?(toastr.options.timeOut="6000",toastr.options.closeButton=!0,toastr.error(whichOne+" does not have a matching HWM Quality for row "+Number(this.row+1)),callback(!1)):callback(!0)}else callback(!0)}else callback(!0)},$scope.matchingDDValue=function(value,callback){var row=this.row,col=this.col,dataAtRow=$scope.hotInstance.getDataAtRow(row),otherDataInRow=!1;if(angular.forEach(dataAtRow,function(d,index){null!==d&&""!==d&&index!==col&&(otherDataInRow=!0)}),""!==value&&null!==value){var prop=this.prop,hasError=!1;switch(prop){case"hwm_type_id":$scope.hwmTypeArray.map(function(hwT){return hwT}).indexOf(value)<0&&(hasError=!0);break;case"marker_id":$scope.markerArray.map(function(hwM){return hwM}).indexOf(value)<0&&(hasError=!0);break;case"hwm_environment":$scope.envirArray.map(function(hwE){return hwE}).indexOf(value)<0&&(hasError=!0);break;case"hwm_quality_id":$scope.qualArray.map(function(hwQ){return hwQ}).indexOf(value)<0&&(hasError=!0);break;case"bank":$scope.bankArray.map(function(hwB){return hwB}).indexOf(value)<0&&(hasError=!0);break;case"hdatum_id":$scope.hdatumArray.map(function(hD){return hD}).indexOf(value)<0&&(hasError=!0);break;case"hcollect_method_id":$scope.hcollMethArray.map(function(hC){return hC}).indexOf(value)<0&&(hasError=!0);break;case"vdatum_id":$scope.vdatumArray.map(function(hD){return hD}).indexOf(value)<0&&(hasError=!0);break;case"vcollect_method_id":$scope.vcollMethArray.map(function(hC){return hC}).indexOf(value)<0&&(hasError=!0);break;case"stillwater":$scope.tranqArray.map(function(t){return t}).indexOf(value)<0&&(hasError=!0)}if(hasError)callback(!1);else if("hwm_quality_id"==prop){var uncertValue=$scope.hotInstance.getDataAtCell(row,5);if(null!==uncertValue&&""!==uncertValue){var appropriatequal="";appropriatequal=uncertValue>.4?"VP: > 0.40 ft":.05>uncertValue?"Excellent: +/- 0.05 ft":$scope.hwmQuals.filter(function(h){return h.min_range<=uncertValue&&h.max_range>=uncertValue})[0].hwm_quality,appropriatequal!==value?(toastr.options.timeOut="6000",toastr.options.closeButton=!0,toastr.error("HWM Quality does not have a matching HWM uncertainty range value for row "+Number(row+1)),callback(!1)):callback(!0)}else callback(!0)}else callback(!0)}else if(!value&&otherDataInRow){var whichOne=$scope.hotInstance.getColHeader(col);toastr.options.timeOut="6000",toastr.options.closeButton=!0,toastr.error(whichOne+" is a required field."),callback(!1)}else callback(!0)};var removeThisUploadHWM=function(successfulHWM){for(var spliceIndex=-1,bank=successfulHWM.bank,hcmName=horCollMethList.filter(function(hcm){return hcm.hcollect_method_id==successfulHWM.hcollect_method_id})[0].hcollect_method,hdName=horizDatumList.filter(function(hd){return hd.datum_id==successfulHWM.hdatum_id})[0].datum_name,hwmQName=hwmQualList.filter(function(hq){return hq.hwm_quality_id==successfulHWM.hwm_quality_id})[0].hwm_quality,hwmTName=hwmTypeList.filter(function(ht){return ht.hwm_type_id==successfulHWM.hwm_type_id})[0].hwm_type,mark=void 0!==successfulHWM.marker_id?markerList.filter(function(m){return m.marker_id==successfulHWM.marker_id})[0].marker1:void 0,vcmName=void 0!==successfulHWM.vcollect_method_id?vertCollMethList.filter(function(vcm){return vcm.vcollect_method_id==successfulHWM.vcollect_method_id})[0].vcollect_method:void 0,vdName=void 0!==successfulHWM.vdatum_id?vertDatumList.filter(function(vd){return vd.datum_id==successfulHWM.vdatum_id})[0].datum_abbreviation:void 0,hag=void 0!==successfulHWM.height_above_gnd?Number(successfulHWM.height_above_gnd):void 0,elFt=void 0!==successfulHWM.elev_ft?Number(successfulHWM.elev_ft):void 0,unc=void 0!==successfulHWM.uncertainty?Number(successfulHWM.uncertainty):void 0,hwmUnc=void 0!==successfulHWM.hwm_uncertainty?Number(successfulHWM.hwm_uncertainty):void 0,hwmI=0;hwmI<$scope.uploadHWMs.length;hwmI++){if(void 0!==$scope.uploadHWMs[hwmI].site_no){var upload_hwmUnc=""!==$scope.uploadHWMs[hwmI].hwm_uncertainty&&void 0!==$scope.uploadHWMs[hwmI].hwm_uncertainty?Number($scope.uploadHWMs[hwmI].hwm_uncertainty):void 0,upload_mark=""!==$scope.uploadHWMs[hwmI].marker_id&&void 0!==$scope.uploadHWMs[hwmI].marker_id?$scope.uploadHWMs[hwmI].marker_id:void 0,upload_unc=""!==$scope.uploadHWMs[hwmI].uncertainty&&void 0!==$scope.uploadHWMs[hwmI].uncertainty?Number($scope.uploadHWMs[hwmI].uncertainty):void 0,upload_hag=""!==$scope.uploadHWMs[hwmI].height_above_gnd&&void 0!==$scope.uploadHWMs[hwmI].height_above_gnd?Number($scope.uploadHWMs[hwmI].height_above_gnd):void 0,upload_elFt=""!==$scope.uploadHWMs[hwmI].elev_ft&&void 0!==$scope.uploadHWMs[hwmI].elev_ft?Number($scope.uploadHWMs[hwmI].elev_ft):void 0,upload_vcollMeth=""!==$scope.uploadHWMs[hwmI].vcollect_method_id&&void 0!==$scope.uploadHWMs[hwmI].vcollect_method_id?$scope.uploadHWMs[hwmI].vcollect_method_id:void 0,upload_vdat=""!==$scope.uploadHWMs[hwmI].vdatum_id&&void 0!==$scope.uploadHWMs[hwmI].vdatum_id?$scope.uploadHWMs[hwmI].vdatum_id:void 0;$scope.uploadHWMs[hwmI].site_no==successfulHWM.site_no&&$scope.uploadHWMs[hwmI].waterbody==successfulHWM.waterbody&&upload_hwmUnc==hwmUnc&&$scope.uploadHWMs[hwmI].bank==bank&&$scope.uploadHWMs[hwmI].hwm_locationdescription==successfulHWM.hwm_locationdescription&&Number($scope.uploadHWMs[hwmI].latitude_dd)==successfulHWM.latitude_dd&&Number($scope.uploadHWMs[hwmI].longitude_dd)==successfulHWM.longitude_dd&&upload_hag==hag&&$scope.uploadHWMs[hwmI].hcollect_method_id==hcmName&&$scope.uploadHWMs[hwmI].hdatum_id==hdName&&$scope.uploadHWMs[hwmI].hwm_quality_id==hwmQName&&$scope.uploadHWMs[hwmI].hwm_type_id==hwmTName&&upload_mark==mark&&upload_vcollMeth==vcmName&&upload_vdat==vdName&&upload_elFt==elFt&&upload_unc==unc&&$scope.uploadHWMs[hwmI].hwm_notes==successfulHWM.hwm_notes&&(spliceIndex=hwmI)}spliceIndex>=0&&($scope.uploadHWMs.splice(spliceIndex,1),hwmI=$scope.uploadHWMs.length)}$scope.dynamic==$scope.max&&($scope.showProgressBar=!1),$scope.showLoading="false"};$scope.validateTable=function(){$scope.showLoading=!0,angular.element("#loadingDiv").removeClass("noShow");var haveData=$scope.hotInstance.getDataAtCell(0,2);if(null!==haveData)$scope.hotInstance.validateCells(function(valid){if(valid){{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Valid</h3></div><div class="modal-body"><p>Validation successful!</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$rootScope","$uibModalInstance",function($scope,$rootScope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()},$scope.showLoading=!1,angular.element("#loadingDiv").addClass("noShow")}],size:"sm"})}$scope.notValid=!1}else{$scope.notValid=!0;{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Invalid!</h3></div><div class="modal-body"><p>The table is not valid. Please correct red cells and try again.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$rootScope","$uibModalInstance",function($scope,$rootScope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()},$scope.showLoading=!1,angular.element("#loadingDiv").addClass("noShow")}],size:"sm"})}angular.element("#loadingDiv").addClass("noShow")}});else{angular.element("#loadingDiv").addClass("noShow"),$scope.showLoading=!1;{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Not enough data in the table to validate.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}}},$scope.save=function(){$scope.dynamic=0,$scope.chosenEventName=$scope.events.filter(function(e){return e.event_id==$scope.chosenEvent})[0].event_name;for(var pastedHWMs=angular.copy($scope.uploadHWMs),i=pastedHWMs.length;i--;)(void 0===pastedHWMs[i].site_no||null===pastedHWMs[i].site_no||""===pastedHWMs[i].site_no)&&pastedHWMs.splice(i,1);$scope.max=pastedHWMs.length,$scope.showLoading="true",$scope.notValid=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.showProgressBar=!0,angular.forEach(pastedHWMs,function(hwm,index){SITE.getSearchedSite({bySiteNo:hwm.site_no}).$promise.then(function(response){SITE.getSitePeaks({id:response.site_id},function(peakResponse){for(var p=0;p<peakResponse.length;p++)peakResponse[p].event_name==$scope.chosenEventName&&$scope.sitePeakarray.push([response.site_id,peakResponse[p].peak_summary_id]);hwm.site_id=response.site_id,hwm.event_id=$scope.chosenEvent,hwm.flag_member_id=$scope.$parent.userID,hwm.flag_date=makeAdate(hwm.flag_date),""!==hwm.survey_date&&void 0!==hwm.survey_date&&(hwm.survey_date=makeAdate(hwm.survey_date)),hwm.hcollect_method_id=horCollMethList.filter(function(hcm){return hcm.hcollect_method==hwm.hcollect_method_id})[0].hcollect_method_id,hwm.hdatum_id=horizDatumList.filter(function(hd){return hd.datum_name==hwm.hdatum_id})[0].datum_id,hwm.hwm_quality_id=hwmQualList.filter(function(hq){return hq.hwm_quality==hwm.hwm_quality_id})[0].hwm_quality_id,hwm.hwm_type_id=hwmTypeList.filter(function(ht){return ht.hwm_type==hwm.hwm_type_id})[0].hwm_type_id,hwm.marker_id=""!==hwm.marker_id&&void 0!==hwm.marker_id?markerList.filter(function(m){return m.marker1==hwm.marker_id})[0].marker_id:void 0,""!==hwm.stillwater&&void 0!==hwm.stillwater&&(hwm.stillwater="No"==hwm.stillwater?"0":"1"),hwm.vcollect_method_id=""!==hwm.vcollect_method_id&&void 0!==hwm.vcollect_method_id?vertCollMethList.filter(function(vcm){return vcm.vcollect_method==hwm.vcollect_method_id})[0].vcollect_method_id:void 0,hwm.vdatum_id=""!==hwm.vdatum_id&&void 0!==hwm.vdatum_id?vertDatumList.filter(function(vd){return vd.datum_abbreviation==hwm.vdatum_id})[0].datum_id:void 0,""!==hwm.survey_date&&void 0!==hwm.survey_date&&(hwm.survey_member_id=$scope.$parent.userID);var siteNo=hwm.site_no;delete hwm.site_no,HWM.save(hwm).$promise.then(function(hwmResponse){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM.approveHWM({id:hwmResponse.hwm_id}).$promise.then(function(approvalResponse){hwmResponse.approval_id=approvalResponse.approval_id,hwmResponse.site_no=siteNo,hwmResponse.stillwater=void 0!==hwmResponse.stillwater?hwmResponse.stillwater>0?"Yes":"No":"";var sitePeakId=$scope.sitePeakarray.filter(function(sp){return sp[0]==hwmResponse.site_id})[0];void 0!==sitePeakId&&(hwmResponse.PeakSummary=sitePeakId);var theSource={source_name:$scope.approvalSource.FULLname,agency_id:$scope.approvalSource.agency_id};SOURCE.save(theSource).$promise.then(function(sourceResponse){if(8!==$scope.approvalFile.filetype_id){var fileParts={FileEntity:{filetype_id:$scope.approvalFile.filetype_id,name:$scope.approvalFile.File.name,file_date:$scope.approvalFile.file_date,photo_date:$scope.approvalFile.photo_date,description:$scope.approvalFile.description,site_id:hwmResponse.site_id,source_id:sourceResponse.source_id,photo_direction:$scope.approvalFile.photo_direction,latitude_dd:$scope.approvalFile.latitude_dd,longitude_dd:$scope.approvalFile.longitude_dd,hwm_id:hwmResponse.hwm_id},File:$scope.approvalFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){hwmResponse.HWMFiles=[],hwmResponse.HWMFiles.push(fresponse),$scope.postedHWMs.map(function(p){return p.hwm_id}).indexOf(hwmResponse.hwm_id)<0?(toastr.success("HWM uploaded: hwm_id:"+hwmResponse.hwm_id),$scope.postedHWMs.push(hwmResponse)):toastr.error("HWM "+hwmResponse.hwm_id+" is already in the successfully uploaded list below."),$scope.dynamic++,removeThisUploadHWM(hwmResponse)},function(errorResponse){$scope.showProgressBar=!1,toastr.error("Error uploading file: "+errorResponse.statusText)})}else $scope.approvalFile.source_id=sourceResponse.source_id,$scope.approvalFile.site_id=hwmResponse.site_id,$scope.approvalFile.hwm_id=hwmResponse.hwm_id,$scope.approvalFile.path="<link>",FILE.save($scope.approvalFile).$promise.then(function(fresponse){hwmResponse.HWMFiles=[],hwmResponse.HWMFiles.push(fresponse),$scope.postedHWMs.map(function(p){return p.hwm_id}).indexOf(hwmResponse.hwm_id)<0?(toastr.success("HWM uploaded: hwm_id:"+hwmResponse.hwm_id),$scope.postedHWMs.push(hwmResponse)):toastr.error("HWM "+hwmResponse.hwm_id+" is already in the successfully uploaded list below."),$scope.dynamic++,removeThisUploadHWM(hwmResponse)},function(errorResponse){$scope.HWMfileIsUploading=!1,$scope.showProgressBar=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(sourceError){$scope.showLoading="false",toastr.options.timeOut="0",toastr.options.closeButton=!0,$scope.showProgressBar=!1,toastr.error("Error uploading approval File Source: "+sourceError.statusText)})},function(approveError){$scope.showLoading="false",toastr.options.timeOut="0",toastr.options.closeButton=!0,$scope.showProgressBar=!1,toastr.error("Error approving hwm: "+approveError.statusText)})},function(hwmSaveError){$scope.showLoading="false",toastr.options.timeOut="0",toastr.options.closeButton=!0,$scope.showProgressBar=!1,toastr.error("Error uploading hwm: "+hwmSaveError.statusText)})},function(getSitePeakError){$scope.showProgressBar=!1,toastr.error("Something went wrong getting sitePeak")})},function(getHwmSiteError){$scope.showLoading="false",toastr.options.timeOut="0",toastr.options.closeButton=!0,$scope.showProgressBar=!1,toastr.error("Error getting site information for "+hwm.site_no+". Site does not exist.")})})},$scope.clearTable=function(){var resetModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title"></h3></div><div class="modal-body"><p>Warning! This will remove all hwms from the table.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss()}}],size:"sm"});resetModal.result.then(function(){$scope.uploadHWMs=[],$scope.invalids=[],$scope.notValid=!0})},$scope.sort_by=function(newSortingOrder){$scope.sortingOrder==newSortingOrder&&($scope.reverse=!$scope.reverse),$scope.sortingOrder=newSortingOrder,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+newSortingOrder+" i").removeClass().addClass($scope.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")},$scope.goToSiteDash=function(siteID){var warningModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Warning!</h3></div><div class="modal-body"><p>You are about to leave the Bulk HWM Uploader.<br />In doing so, you will no longer be able to see the list of successfully uploaded HWMs.</p><p>Are you sure you want to leave this page?</p></div><div class="modal-footer"><button class="btn btn-warning" ng-enter="ok()" ng-click="ok()">Yes</button><button class="btn btn-primary" ng-enter="cancel()" ng-click="cancel()">Cancel</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.cancel=function(){$uibModalInstance.dismiss()},$scope.ok=function(){$uibModalInstance.close(siteID)}}],size:"sm"});warningModal.result.then(function(siteId){$state.go("site.dashboard",{id:siteId})})},$scope.DeleteHWM=function(hwm){$scope.delIndex=$scope.postedHWMs.indexOf(hwm);var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return hwm},what:function(){return"HWM"}}});DeleteModalInstance.result.then(function(hwmToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM["delete"]({id:hwmToRemove.hwm_id},hwmToRemove).$promise.then(function(){$scope.HWMFiles=[],toastr.success("HWM Removed"),$scope.postedHWMs.splice($scope.delIndex,1),$scope.delIndex=-1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.OpenHWMEdit=function(HWMclicked){var passAllLists=[hwmTypeList,hwmQualList,horizDatumList,horCollMethList,vertDatumList,vertCollMethList,markerList,eventList],indexClicked=$scope.postedHWMs.indexOf(HWMclicked),siteNo=HWMclicked.site_no;$rootScope.stateIsLoading.showLoading=!0;var hwmEditInstance=$uibModal.open({templateUrl:"HWM_Modal.html",size:"sm",backdrop:"static",keyboard:!1,resolve:{allDropdowns:function(){return passAllLists},thisHWM:function(){return HWMclicked},siteHMWs:function(){return HWM.getEventSiteHWMs({siteId:HWMclicked.site_id,Event:HWMclicked.event_id}).$promise},hwmSite:function(){return SITE.query({id:HWMclicked.site_id}).$promise},agencyList:function(){return agenciesList},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise},fileTypes:function(){return fileTypesList}},controller:"hwmEditModalCtrl"});hwmEditInstance.result.then(function(hwmUpdatedANDFileCnt){var h=hwmUpdatedANDFileCnt[0],files=hwmUpdatedANDFileCnt[1];h.site_no=siteNo,h.HWMFiles=files,h.stillwater=void 0!==h.stillwater?h.stillwater>0?"Yes":"No":"",$scope.postedHWMs[indexClicked]=h})},$scope.OpenPeakEdit=function(peakId,siteId,eventId){$rootScope.stateIsLoading.showLoading=!0;var peakEditInstance=$uibModal.open({templateUrl:"PeakEdit_Modal.html",size:"sm",backdrop:"static",keyboard:!1,resolve:{allCollectConditions:function(){return INST_COLL_CONDITION.getAll().$promise},allVertDatums:function(){return vertDatumList},thisPeak:function(){return PEAK.query({id:peakId}).$promise},thisPeakDFs:function(){return PEAK.getPeakSummaryDFs({id:peakId}).$promise},peakSite:function(){return SITE.query({id:siteId}).$promise},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise},allEventHWMs:function(){return HWM.getFilteredHWMs({Event:$scope.chosenEvent,EventStatus:0}).$promise},allSiteFiles:function(){return SITE.getSiteFiles({id:siteId})},allSiteSensors:function(){return SITE.getSiteSensors({id:siteId}).$promise}},controller:"peakModalCtrl"});peakEditInstance.result.then(function(updated){})},$scope.OpenPeakCreate=function(siteId,eventId){$rootScope.stateIsLoading.showLoading=!0;var peakCreateInstance=$uibModal.open({templateUrl:"PeakEdit_Modal.html",size:"sm",backdrop:"static",keyboard:!1,resolve:{allCollectConditions:function(){return INST_COLL_CONDITION.getAll().$promise},allVertDatums:function(){return vertDatumList},thisPeak:function(){return"empty"},thisPeakDFs:function(){return"empty"},peakSite:function(){return SITE.query({id:siteId}).$promise},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise},allEventHWMs:function(){return HWM.getFilteredHWMs({Event:$scope.chosenEvent,EventStatus:0}).$promise},allSiteFiles:function(){return SITE.getSiteFiles({id:siteId})},allSiteSensors:function(){return SITE.getSiteSensors({id:siteId}).$promise}},controller:"peakModalCtrl"});peakCreateInstance.result.then(function(createdPk){angular.forEach($scope.postedHWMs,function(pHWM){pHWM.site_id==siteId&&(pHWM.PeakSummary=[siteId,createdPk[0].peak_summary_id])})})},$scope.tableSettings={colHeaders:['<span title="Required">Waterbody *</span>','<span title="Identifying Label. If left blank, defaults to &quot;no_label&quot;">HWM Label</span>','<span title="Required">HWM Type *</span>',"Marker",'<span title="Required">HWM Environment *</span>',"HWM Uncertainty (ft)",'<span title="Required">HWM Quality *</span>',"Bank","Loc. Description",'<span title="Required">HWM Latitude *</span>','<span title="Required">HWM Longitude *</span>','<span title="Required">Horizontal Datum *</span>','<span title="Required">Horizontal Collect Method *</span>','<span title="Height above ground">HAG (ft)</span>','<span title="Required">Flag/Found Date *</span>',"Survey Date","Surveyed Elev (ft)","Vertical Datum","Vertical Collect Method","Survey Uncertainty (ft)","Notes","Tranquil/Stillwater",'<span title="Site Number, Required"> Site No *</span>'],rowHeaders:!0,minSpareRows:10,maxRows:10,afterInit:function(){$scope.hotInstance=this},columnSorting:!1,manualColumnResize:!0,manualRowResize:!0,wordWrap:!1,preventOverflow:"horizontal",viewportColumnRenderingOffsetNumber:1,colWidths:$scope.columnWidths,afterOnCellMouseDown:function(event,coords,td){if(22===coords.col&&"htAutocompleteArrow"==event.realTarget.className){$scope.siteNoArrowClicked=!0;var passHWMvals=[];passHWMvals.push($scope.hotInstance.getDataAtCell(coords.row,0)),passHWMvals.push($scope.hotInstance.getDataAtCell(coords.row,9)),passHWMvals.push($scope.hotInstance.getDataAtCell(coords.row,10)),passHWMvals.push($scope.hotInstance.getDataAtCell(coords.row,11)),passHWMvals.push($scope.hotInstance.getDataAtCell(coords.row,12)),getFindSiteModal(coords.row,coords.col,passHWMvals)}},contextMenu:["remove_row"],onAfterValidate:function(isValid,value,row,prop,source){if(isValid||$scope.invalids.push({isValid:isValid,row:row,prop:prop}),isValid){for(var vIndex=-1,vI=0;vI<$scope.invalids.length;vI++)if($scope.invalids[vI].row==row&&$scope.invalids[vI].prop==prop){vIndex=vI;break}vIndex>-1&&$scope.invalids.splice(vIndex,1)}},onAfterChange:function(change,source){if("loadData"!=source)for(var i=0;i<change.length;i++)change[i][2]!==change[i][3]&&$scope.notValid===!1&&($scope.notValid=!0)},onAfterRemoveRow:function(index,amount){var selected=$scope.hotInstance.getSelected();if(amount>1){var eachRowIndexArray=[],cnt=selected[2]-selected[0]+1;eachRowIndexArray.push(selected[0]);for(var c=1;cnt>c;c++)eachRowIndexArray.push(selected[0]+1);for(var Mi=$scope.invalids.length;Mi--;)eachRowIndexArray.indexOf($scope.invalids[Mi].row)>-1&&$scope.invalids.splice(Mi,1)}else for(var i=$scope.invalids.length;i--;)$scope.invalids[i].row==index&&$scope.invalids.splice(i,1)}}}}]),STNControllers.controller("hwmSiteModalCtrl",["$scope","$rootScope","$http","$cookies","$uibModalInstance","nearBySites","HWMparts","siteNoAlreadyThere","hdatums","hcolMeths","vdatums","vcolMeths","states","counties","leafletData","leafletMarkerEvents","GEOCODE","SITE",function($scope,$rootScope,$http,$cookies,$uibModalInstance,nearBySites,HWMparts,siteNoAlreadyThere,hdatums,hcolMeths,vdatums,vcolMeths,states,counties,leafletData,leafletMarkerEvents,GEOCODE,SITE){$scope.localSites=nearBySites,$scope.horDatums=hdatums,$scope.horCollMeths=hcolMeths,$scope.vertDatums=vdatums,$scope.vertCollMeths=vcolMeths,$scope.states=states,$scope.counties=counties,$scope.showSiteCreateArea=!1,$scope.disableOK=!1,$scope.createChecked="0",$scope.showMap=!1,$scope.showHideMap="Show",$scope.showHideCreateSiteDiv=function(){$scope.showSiteCreateArea=!$scope.showSiteCreateArea,angular.forEach($scope.localSites,function(s){delete s.selected}),$scope.showSiteCreateArea?($scope.disableOK=!0,$scope.showMap=!1,$scope.showHideMap="Show"==$scope.showHideMap?"Hide":"Show",$scope.newSite.waterbody=""!==HWMparts[0]&&null!==HWMparts[0]?HWMparts[0]:"",$scope.newSite.latitude_dd=""!==HWMparts[1]&&null!==HWMparts[1]?HWMparts[1]:"",$scope.newSite.longitude_dd=""!==HWMparts[2]&&null!==HWMparts[2]?HWMparts[2]:"",$scope.newSite.hdatum_id=""!==HWMparts[3]&&null!==HWMparts[3]?$scope.horDatums.filter(function(hd){return hd.datum_name==HWMparts[3]})[0].datum_id:"",$scope.newSite.hcollect_method_id=""!==HWMparts[4]&&null!==HWMparts[4]?$scope.horCollMeths.filter(function(hd){return hd.hcollect_method==HWMparts[4]})[0].hcollect_method_id:"",$scope.getAddress()):$scope.disableOK=!1,angular.forEach($scope.markers,function(mm){"stnSites"==mm.layer&&(mm.icon=icons.stn)})},$scope.unchkCreate=function(checkedSite){$scope.createChecked="0",$scope.showSiteCreateArea=!1,angular.forEach($scope.markers,function(m){"stnSites"==m.layer&&(m.lat==checkedSite.latitude_dd&&m.lng==checkedSite.longitude_dd?(delete m.icon,m.icon=icons.selectedStn):m.icon=icons.stn)}),$scope.disableOK=!1},$scope.showSitesOnMap=function(){$scope.showMap=!$scope.showMap,$scope.showHideMap="Show"==$scope.showHideMap?"Hide":"Show",$scope.showMap&&fitMapBounds()},$scope.markers=[];for(var icons={stn:{type:"div",iconSize:[10,10],className:"stnSiteIcon"
},selectedStn:{type:"div",iconSize:[14,14],className:"newSiteIcon"},hwmIcon:{type:"div",iconSize:[16,20],className:"stnHWMIcon"}},i=0;i<$scope.localSites.length;i++){var a=$scope.localSites[i];$scope.markers.push({layer:"stnSites",message:"<div><b>Site Number:</b> "+a.site_no+"<br /><b>Site Name:</b> "+a.site_name+"<br /><b>Waterbody:</b> "+a.waterbody+"<br /><b>Latitude/Longitude:</b> "+a.latitude_dd+" "+a.longitude_dd+"<br /></div>",lat:a.latitude_dd,lng:a.longitude_dd,site_id:a.site_id,title:a.site_no,icon:icons.stn})}$scope.markers.push({layer:"stnHWM",message:"<div><b>HWM</b><br/><b>Latitude:</b> "+HWMparts[1]+"<br/><b>Lontitude:</b> "+HWMparts[2]+"<br/></div>",lat:Number(HWMparts[1]),lng:Number(HWMparts[2]),title:"HWM",icon:icons.hwmIcon});var bounds=[];angular.forEach($scope.localSites,function(s){bounds.push([s.latitude_dd,s.longitude_dd])});var fitMapBounds=function(){leafletData.getMap("associatedSiteMap").then(function(map){map.fitBounds(bounds,{padding:[20,20]})})};fitMapBounds(),angular.extend($scope,{markers:$scope.markers,layers:{baselayers:{topo:{name:"World Topographic",type:"agsBase",layer:"Topographic",visible:!1}},overlays:{stnSites:{type:"group",name:"STN Sites",visible:!0},stnHWM:{type:"group",name:"HWM",visible:!0}}}}),""!==siteNoAlreadyThere&&null!==siteNoAlreadyThere&&angular.forEach($scope.localSites,function(s){if(s.site_no==siteNoAlreadyThere){s.selected="true";var selectedMarker=$scope.markers.filter(function(m){return m.lat==s.latitude_dd&&m.lng==s.longitude_dd})[0];selectedMarker.icon=icons.selectedStn}}),$scope.newSite={};var openLatModal=function(w){var latModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Latitude must be between 0 and 73.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});latModal.result.then(function(fieldFocus){"latlong"==w?$("#SITE_latitude_dd").focus():$("#LaDeg").focus()})},openLongModal=function(w){var longModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Longitude must be between -175.0 and -60.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});longModal.result.then(function(fieldFocus){"latlong"==w?$("#SITE_longitude_dd").focus():$("#LoDeg").focus()})};$scope.checkValue=function(direction){"lat"==direction&&($scope.newSite.latitude_dd<0||$scope.newSite.latitude_dd>73||isNaN($scope.newSite.latitude_dd))&&(openLatModal("latlong"),isNaN($scope.newSite.latitude_dd)&&($scope.newSite.latitude_dd=void 0)),"long"==direction&&($scope.newSite.longitude_dd<-175||$scope.newSite.longitude_dd>-60||isNaN($scope.newSite.longitude_dd))&&(openLongModal("latlong"),isNaN($scope.newSite.longitude_dd)&&($scope.newSite.longitude_dd=void 0))},$scope.updateCountyList=function(s){var thisState=$scope.states.filter(function(st){return st.state_abbrev==s})[0];$scope.stateCountyList=$scope.counties.filter(function(c){return c.state_id==thisState.state_id})},$scope.getAddress=function(){if(delete $scope.newSite.address,delete $scope.newSite.city,delete $scope.newSite.state,$scope.stateCountyList=[],delete $scope.newSite.zip,void 0===$scope.newSite.latitude_dd||void 0===$scope.newSite.longitude_dd||isNaN($scope.newSite.latitude_dd)||isNaN($scope.newSite.longitude_dd)){$rootScope.stateIsLoading.showLoading=!1;{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please provide a Latitude and Longitude before clicking Verify Location</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}}else $rootScope.stateIsLoading.showLoading=!0,delete $http.defaults.headers.common.Authorization,$http.defaults.headers.common.Accept="application/json",GEOCODE.getAddressParts({Longitude:$scope.newSite.longitude_dd,Latitude:$scope.newSite.latitude_dd},function(response){if(void 0!==response.result)if(response.result.geographies.Counties.length>0){var stateFIPS=response.result.geographies.Counties[0].STATE,countyName=response.result.geographies.Counties[0].NAME,thisStateID=$scope.counties.filter(function(c){return c.state_fip==stateFIPS})[0].state_id,thisState=$scope.states.filter(function(s){return s.state_id==thisStateID})[0];void 0!==thisState?($scope.newSite.state=thisState.state_abbrev,$scope.stateCountyList=$scope.counties.filter(function(c){return c.state_id==thisState.state_id}),$scope.newSite.county=countyName,$rootScope.stateIsLoading.showLoading=!1):($rootScope.stateIsLoading.showLoading=!1,toastr.error("The Latitude/Longitude did not return a recognized state. Please choose one from the dropdown."))}else $rootScope.stateIsLoading.showLoading=!1,toastr.error("No location information came back from that lat/long");else $rootScope.stateIsLoading.showLoading=!1,toastr.error("Error getting address. Choose State and County from dropdowns.")},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error getting address: "+errorResponse.statusText)})},$scope.createNewSite=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.newSite.member_id=$scope.$parent.userID,SITE.save($scope.newSite,function(response){$uibModalInstance.close(response)},function(errorResponse){toastr.error("Error creating Site.")}))},$scope.ok=function(){var selectedSite=nearBySites.filter(function(s){return"true"==s.selected})[0];$uibModalInstance.close(selectedSite)},$scope.cancel=function(){$uibModalInstance.dismiss()}}]),STNControllers.controller("hwmEditModalCtrl",["$scope","$rootScope","$http","$cookies","$uibModal","$uibModalInstance","allDropdowns","thisHWM","siteHMWs","agencyList","allMembers","fileTypes","hwmSite","SERVER_URL","HWM","FILE","SOURCE","FILE_STAMP",function($scope,$rootScope,$http,$cookies,$uibModal,$uibModalInstance,allDropdowns,thisHWM,siteHMWs,agencyList,allMembers,fileTypes,hwmSite,SERVER_URL,HWM,FILE,SOURCE,FILE_STAMP){$scope.view={HWMval:"detail"},$scope.h={hOpen:!0,hFileOpen:!1},$scope.hwmTypeList=allDropdowns[0],$scope.hwmQualList=allDropdowns[1],$scope.HDatumsList=allDropdowns[2],$scope.hCollMList=allDropdowns[3],$scope.VDatumsList=allDropdowns[4],$scope.vCollMList=allDropdowns[5],$scope.markerList=allDropdowns[6],$scope.eventList=allDropdowns[7],$scope.thisHWMsite=hwmSite,$scope.fileTypeList=fileTypes.filter(function(hft){return"Photo"===hft.filetype||"Historic Citation"===hft.filetype||"Field Sheets"===hft.filetype||"Level Notes"===hft.filetype||"Other"===hft.filetype||"Link"===hft.filetype||"Sketch"===hft.filetype}),$scope.hwmImageFiles=[],$scope.showFileForm=!1,$scope.userRole=$cookies.get("usersRole"),$scope.showEventDD=!1,$scope.adminChanged={},$scope.serverURL=SERVER_URL,$scope.showChangeEventDD=function(){$scope.showEventDD=!$scope.showEventDD},$scope.LoggedInMember=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aHWM={},$scope.HWMFiles=[],$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0};var openLatModal=function(w){var latModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Latitude must be between 0 and 73.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});latModal.result.then(function(fieldFocus){"latlong"==w?$("#latitude_dd").focus():$("#LaDeg").focus()})},openLongModal=function(w){var longModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Longitude must be between -175.0 and -60.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});longModal.result.then(function(fieldFocus){"latlong"==w?$("#longitude_dd").focus():$("#LoDeg").focus()})};$scope.checkValue=function(){var h="edit"==$scope.view.HWMval?$scope.hwmCopy:$scope.aHWM;(h.latitude_dd<0||h.latitude_dd>73||isNaN(h.latitude_dd))&&(openLatModal("latlong"),isNaN(h.latitude_dd)&&(h.latitude_dd=void 0)),(h.longitude_dd<-175||h.longitude_dd>-60||isNaN(h.longitude_dd))&&(openLongModal("latlong"),isNaN(h.longitude_dd)&&(h.longitude_dd=void 0))},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.chooseQuality=function(){var h="edit"==$scope.view.HWMval?$scope.hwmCopy:$scope.aHWM;if(""!==h.hwm_uncertainty){var x=Number(h.hwm_uncertainty);h.hwm_quality_id=x>.4?5:.05>x?1:$scope.hwmQualList.filter(function(h){return h.min_range<=x&&h.max_range>=x})[0].hwm_quality_id}},$scope.compareToUncertainty=function(){var h="edit"==$scope.view.HWMval?$scope.hwmCopy:$scope.aHWM;if(""!==h.hwm_uncertainty&&void 0!==h.hwm_uncertainty){var x=Number(h.hwm_uncertainty),matchingQualId=$scope.hwmQualList.filter(function(h){return void 0!==h.min_range?h.min_range<=x&&h.max_range>=x:void 0})[0].hwm_quality_id;if(h.hwm_quality_id!==matchingQualId){var incongruentModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Warning</h3></div><div class="modal-body"><p>There is a mismatch between the hwm quality chosen and the hwm uncertainty above. Please correct your hwm uncertainty.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});incongruentModal.result.then(function(){angular.element("[name='hwm_uncertainty']").focus()})}}};var makeAdate=function(d){var aDate=new Date;""!==d&&void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};if($scope.aHWM=angular.copy(thisHWM),delete $scope.aHWM.site_no,$scope.aHWM.HWMFiles)for(var f=0;f<$scope.aHWM.HWMFiles.length;f++)$scope.HWMFiles.push($scope.aHWM.HWMFiles[f]);delete $scope.aHWM.HWMFiles,$scope.aHWM.flag_date=makeAdate($scope.aHWM.flag_date),null!==$scope.aHWM.survey_date&&void 0!==$scope.aHWM.survey_date&&($scope.aHWM.survey_date=makeAdate($scope.aHWM.survey_date)),$scope.save=function(valid){if(valid){void 0!==$scope.adminChanged.event_id&&($scope.hwmCopy.event_id=$scope.adminChanged.event_id),void 0!==$scope.hwmCopy.survey_date&&null!==$scope.hwmCopy.survey_date&&void 0===$scope.hwmCopy.survey_member_id&&($scope.hwmCopy.survey_member_id=$cookies.get("mID")),void 0!==$scope.hwmCopy.elev_ft&&null!==$scope.hwmCopy.elev_ft&&(void 0===$scope.hwmCopy.survey_date&&($scope.hwmCopy.survey_date=makeAdate("")),void 0===$scope.hwmCopy.survey_member_id&&($scope.hwmCopy.survey_member_id=$cookies.get("mID"))),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM.update({id:$scope.hwmCopy.hwm_id},$scope.hwmCopy).$promise.then(function(response){toastr.success("HWM updated"),$scope.aHWM=response,thisHWM=response,void 0!==$scope.aHWM.stillwater&&($scope.aHWM.Tranquil=$scope.aHWM.stillwater>0?"Yes":"No"),$scope.aHWM.flag_date=makeAdate($scope.aHWM.flag_date),null!==$scope.aHWM.survey_date&&void 0!==$scope.aHWM.survey_date&&($scope.aHWM.survey_date=makeAdate($scope.aHWM.survey_date)),$scope.hwmCopy={},$scope.view.HWMval="detail"})}},$scope.cancel=function(){$rootScope.stateIsLoading.showLoading=!1;var sendBack=[$scope.aHWM,$scope.HWMFiles];$uibModalInstance.close(sendBack)},$scope.wannaEditHWM=function(){$scope.view.HWMval="edit",$scope.hwmCopy=angular.copy($scope.aHWM),$scope.adminChanged.event_id=$scope.aHWM.event_id},$scope.cancelHWMEdit=function(){$scope.view.HWMval="detail",$scope.hwmCopy=[],$scope.adminChanged={},$scope.EventName=$scope.eventList.filter(function(e){return e.event_id==$scope.aHWM.event_id})[0].event_name},$scope.ensurehwmLabelUnique=function(){var h="edit"==$scope.view.HWMval?$scope.hwmCopy:$scope.aHWM;angular.forEach(siteHMWs,function(hwm){if(hwm.hwm_label==h.hwm_label){h.hwm_label=void 0!==h.hwm_id?$scope.aHWM.hwm_label:"hwm-"+(parseFloat(siteHMWs.length)+1);var uniqueModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Warning</h3></div><div class="modal-body"><p>The hwm label must be unique from all other hwms at this site for this event.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});uniqueModal.result.then(function(){angular.element("[name='hwm_label']").focus()})}})},$scope.stamp=FILE_STAMP.getStamp(),$scope.fileItemExists=!0,$scope.saveFileUpload=function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.sFileIsUploading=!0;var fileParts={FileEntity:{file_id:$scope.aFile.file_id,name:$scope.aFile.name,description:$scope.aFile.description,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,file_date:$scope.aFile.file_date,hwm_id:$scope.aFile.hwm_id,site_id:$scope.aFile.site_id,filetype_id:$scope.aFile.filetype_id,source_id:$scope.aFile.source_id,path:$scope.aFile.path,photo_date:$scope.aFile.photo_date},File:void 0!==$scope.aFile.File1?$scope.aFile.File1:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),FILE_STAMP.setStamp(),$scope.stamp=FILE_STAMP.getStamp(),$scope.isPhoto=$scope.aFile.File1.type.indexOf("image")>-1?!0:!1,$scope.aFile.name=fresponse.name,$scope.aFile.path=fresponse.path,void 0!==$scope.aFile.File1&&($scope.aFile.File=$scope.aFile.File1,$scope.aFile.File1=void 0),fresponse.fileBelongsTo="HWM File",$scope.HWMFiles.splice($scope.existFileIndex,1),$scope.HWMFiles.push(fresponse),1===fresponse.filetype_id&&($scope.hwmImageFiles.splice($scope.existFileIndex,1),$scope.hwmImageFiles.push(fresponse)),$scope.fileItemExists=!0},function(errorResponse){toastr.error("Error saving file: "+errorResponse.statusText)})},$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})},$scope.showFile=function(file){if($scope.fileTypes=$scope.fileTypeList,$scope.agencies=agencyList,$scope.existFileIndex=-1,$scope.existIMGFileIndex=-1,$scope.aFile={},$scope.aSource={},0!==file){if($scope.existFileIndex=$scope.HWMFiles.indexOf(file),$scope.existIMGFileIndex=$scope.hwmImageFiles.length>0?$scope.hwmImageFiles.indexOf(file):-1,$scope.aFile=angular.copy(file),8!==file.filetype_id&&FILE.getFileItem({id:$scope.aFile.file_id}).$promise.then(function(response){$scope.fileItemExists=response.Length>0?!0:!1}),$scope.aFile.fileType=$scope.fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,void 0!==$scope.aFile.name){var fI=$scope.aFile.name.lastIndexOf("."),fileExt=$scope.aFile.name.substring(fI+1);$scope.isPhoto=fileExt.match(/(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)?!0:!1}$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),null!==file.source_id&&SOURCE.query({id:file.source_id}).$promise.then(function(s){$scope.aSource=s,$scope.aSource.FULLname=$scope.aSource.source_name,$scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name})}else $scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname,$scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name;$scope.showFileForm=!0,$scope.updateAgencyForCaption=function(){1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}},$scope.createFile=function(valid){if(void 0!==$scope.aFile.File){if(valid){$scope.HWMfileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){if(8!==$scope.aFile.filetype_id){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,photo_date:$scope.aFile.photo_date,description:$scope.aFile.description,site_id:$scope.thisHWMsite.site_id,source_id:response.source_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,hwm_id:$scope.aHWM.hwm_id},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="HWM File",$scope.HWMFiles.push(fresponse),1===fresponse.filetype_id&&$scope.hwmImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.HWMfileIsUploading=!1},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error uploading file: "+errorResponse.statusText)})}else $scope.aFile.source_id=response.source_id,$scope.aFile.site_id=$scope.thisHWMsite.site_id,$scope.aFile.hwm_id=$scope.aHWM.hwm_id,FILE.save($scope.aFile).$promise.then(function(fresponse){toastr.success("Link saved"),fresponse.fileBelongsTo="HWM File",$scope.HWMFiles.push(fresponse),$scope.showFileForm=!1,$scope.HWMfileIsUploading=!1},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error creating Source info: "+errorResponse.statusText)})}}else alert("Need to choose a file first")},$scope.saveFile=function(valid){if(valid){$scope.HWMfileIsUploading=!0;{$scope.aFile.fileBelongsTo}if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.aSource.source_id){var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(sResponse){$scope.aFile.source_id=sResponse.source_id,FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="HWM File",$scope.HWMFiles[$scope.existFileIndex]=fileResponse,$scope.showFileForm=!1,$scope.HWMfileIsUploading=!1},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})}}},$scope.deleteFile=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.HWMFiles.splice($scope.existFileIndex,1),$scope.hwmImageFiles.splice($scope.existIMGFileIndex,1),$scope.showFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelFile=function(){$scope.aFile={},$scope.aSource={},$scope.showFileForm=!1},$rootScope.stateIsLoading.showLoading=!1}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("bulkHWMAdjCtrl",["$scope","$state","$rootScope","$cookies","$http","$filter","$uibModal","SITE","HWM","HWM_Service","eventList","stateList","countyList",function($scope,$state,$rootScope,$cookies,$http,$filter,$uibModal,SITE,HWM,HWM_Service,eventList,stateList,countyList){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$scope.querySearch={},$scope.showLoading=!1,$scope.dynamic=0,$scope.max=0,$scope.hotInstance,$scope.columnWidths=[84,120,120,120,220,120,120,150,130,160,180],$scope.Changes=[],$scope.invalids=[],$scope.events=eventList,$scope.states=stateList,$scope.HWM_params={},$scope.countyList=countyList,$scope.countyArray=[],$scope.result={searchClicked:!1};var makeAdate=function(d){var aDate=new Date;""!==d&&void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["01","02","03","04","05","06","07","08","09","10","11","12"],dateWOtime=monthNames[month]+"/"+day+"/"+year;return dateWOtime};if($scope.adjustHWMs=[],$scope.eventStateHWMs=[],$scope.hwmCount="",$scope.UpdateCounties=function(){if(null!==$scope.HWM_params.state_abbrev){var thisState=$scope.states.filter(function(st){return st.state_abbrev==$scope.HWM_params.state_abbrev})[0];$scope.countyArray=$scope.countyList.filter(function(c){return c.state_id==thisState.state_id})}else $scope.countyArray=[]},$scope.getHWMs=function(valid){if(valid){$scope.result={},$scope.result.searchClicked=!0;var countyNames=[];angular.forEach($scope.HWM_params.counties,function(c){countyNames.push(c.county_name)});var countiesCommaSep=countyNames.join(",");$scope.adjustHWMs=[],$scope.eventStateHWMs=[],$scope.querySearch={},$scope.querySearch.Event=$scope.HWM_params.event_id,$scope.querySearch.State=$scope.HWM_params.state_abbrev,$scope.querySearch.Counties=countiesCommaSep,HWM_Service.setBulkHWMSearch($scope.querySearch),HWM.getFilteredHWMs({Event:$scope.HWM_params.event_id,States:$scope.HWM_params.state_abbrev,County:countiesCommaSep},function(response){$scope.hwmCount=response.length,$scope.result.isResponse=$scope.hwmCount>0?!0:!1;for(var i=0;i<response.length;i++){var one={};one.hwm_id=response[i].hwm_id,one.waterbody=response[i].waterbody,one.hwm_label=response[i].hwm_label,one.site_id=response[i].site_id,one.site_no=response[i].site_no,one.hwm_locationdescription=response[i].hwm_locationdescription,one.latitude_dd=response[i].latitude_dd,one.longitude_dd=response[i].longitude_dd,""!==response[i].survey_date&&(one.survey_date=makeAdate(response[i].survey_date)),one.elev_ft=response[i].elev_ft,one.uncertainty=response[i].uncertainty,one.hwm_notes=response[i].hwm_notes,$scope.adjustHWMs.push(one)}},function(error){toastr.error("Error getting hwms.")})}},!angular.equals({},HWM_Service.getBulkHWMSearch())){var theSearch=HWM_Service.getBulkHWMSearch();if($scope.HWM_params.event_id=theSearch.Event,$scope.HWM_params.state_abbrev=theSearch.State,$scope.UpdateCounties(),""!==theSearch.Counties){var counties=theSearch.Counties.split(",");$scope.HWM_params.counties=[],angular.forEach($scope.countyArray,function(c){counties.map(function(cA){return cA}).indexOf(c.county_name)>-1&&(c.selected=!0,$scope.HWM_params.counties.push(c))})}$scope.getHWMs(!0)}var requiredModal=function(){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>This field is required.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',backdrop:"static",keyboard:!1,controller:function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}},size:"sm"})},colorRenderer=function(instance,td,row,col,prop,value,cellProperties){return Handsontable.renderers.TextRenderer.apply(this,arguments),td.style.background="#F7F5F5",td},siteNoRenderer=function(instance,td,row,col,prop,value,cellProperties){return Handsontable.renderers.TextRenderer.apply(this,arguments),td.innerHTML='<a ng-click="goToSite()">'+value+"</a>",td.style.background="#F7F5F5",td};$scope.requiredValidator=function(value,callback){value?callback(!0):(requiredModal(),callback(!1))},$scope.numberValidator=function(value,callback){callback(!0)},$scope.save=function(){HWM.getEventStateHWMs({eventId:$scope.HWM_params.event_id,state:$scope.HWM_params.state_abbrev}).$promise.then(function(response){$scope.eventStateHWMs=response;for(var updateTheseHWMs=[],evH=0;evH<$scope.eventStateHWMs.length;evH++){var theyHaveItHere=$scope.adjustHWMs.filter(function(a){return a.hwm_id==$scope.eventStateHWMs[evH].hwm_id})[0];void 0!==theyHaveItHere&&($scope.eventStateHWMs[evH].survye_date=theyHaveItHere.survey_date,$scope.eventStateHWMs[evH].elev_ft=theyHaveItHere.elev_ft,$scope.eventStateHWMs[evH].uncertainty=theyHaveItHere.uncertainty,$scope.eventStateHWMs[evH].hwm_notes=theyHaveItHere.hwm_notes,updateTheseHWMs.push($scope.eventStateHWMs[evH]))}$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",angular.forEach(updateTheseHWMs,function(u){HWM.update({id:u.hwm_id},u).$promise.then(function(){toastr.success("HWMs updated"),$scope.adjustHWMs=[],$scope.eventStateHWMs=[],$scope.invalids=[],$scope.getHWMs(!0)},function(error){toastr.error("Error updating HWMs")})})})},$scope.reset=function(){var resetModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title"></h3></div><div class="modal-body"><p>Warning! This will revert the hwm data to the last saved version. All unsaved edits will be lost.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss()}}],size:"sm"});resetModal.result.then(function(){$scope.adjustHWMs=[],HWM_Service.setBulkHWMSearch({}),$scope.invalids=[],$scope.getHWMs(!0)})},$scope.tableSettings={rowHeaders:!0,minSpareRows:0,afterInit:function(){$scope.hotInstance=this},manualColumnResize:!0,manualRowResize:!0,wordWrap:!1,preventOverflow:"horizontal",viewportColumnRenderingOffsetNumber:1,colWidths:$scope.columnWidths,cells:function(row,col,prop){var cellprops={};return 6>=col&&(cellprops.renderer=colorRenderer),3==col&&(cellprops.renderer=siteNoRenderer),cellprops},onBeforeChange:function(data){for(var i=data.length-1;i>=0;i--)if(("elev_ft"==data[i][1]||"uncertainty"==data[i][1])&&""!==data[i][3]&&isNaN(data[i][3])){data.splice(i,1),setTimeout(function(){$scope.hotInstance.deselectCell()},100);{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Value must be a number.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}}},afterOnCellMouseDown:function(event,coords,td){if(3==coords.col){var site_number=$scope.hotInstance.getDataAtCell(coords.row,coords.col),siteId=$scope.adjustHWMs.filter(function(h){return h.site_no==site_number})[0].site_id;$state.go("site.dashboard",{id:siteId})}},onAfterValidate:function(isValid,value,row,prop,souce){if(isValid||$scope.invalids.push({isValid:isValid,row:row,prop:prop}),isValid){for(var vIndex=-1,vI=0;vI<$scope.invalids.length;vI++)if($scope.invalids[vI].row==row&&$scope.invalids[vI].prop==prop){vIndex=vI;break}vIndex>-1&&$scope.invalids.splice(vIndex,1)}},fillHandle:{autoInsertRow:!1},rowHeights:50}}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("helpCtrl",["$scope",function($scope){$scope.helpInfo={},$scope.helpInfo.fact="Some really interesting help will be here."}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("siteFileModalCtrl",["$scope","$cookies","$http","$uibModalInstance","$uibModal","SERVER_URL","FILE_STAMP","fileTypeList","thisFile","fileExists","allMembers","fileSource","dataFile","agencyList","fileSite","FILE","SOURCE","DATA_FILE",function($scope,$cookies,$http,$uibModalInstance,$uibModal,SERVER_URL,FILE_STAMP,fileTypeList,thisFile,fileExists,allMembers,fileSource,dataFile,agencyList,fileSite,FILE,SOURCE,DATA_FILE){$scope.serverURL=SERVER_URL,$scope.userRole=$cookies.get("usersRole"),$scope.view={FILEval:"detail"},$scope.sFileIsUploading=!1,$scope.fileTypes=fileTypeList,$scope.agencies=agencyList,$scope.theSite=fileSite,$scope.aFile={},$scope.aSource={},$scope.datafile={},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.fileItemExists=void 0===fileExists||fileExists.Length>0?!0:!1,$scope.datepickrs={},$scope.dateOptions={startingDay:1,showWeeks:!1},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.updateAgencyForCaption=function(){"create"==$scope.createOReditFile?1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name):1==$scope.fileCopy.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.sourceCopy.agency_id})[0].agency_name)};var getDateTimeParts=function(d){var y=d.substr(0,4),m=d.substr(5,2)-1,da=d.substr(8,2),h=d.substr(11,2),mi=d.substr(14,2),sec=d.substr(17,2),theDate=new Date(y,m,da,h,mi,sec);return theDate};if(void 0!==thisFile){if($scope.createOReditFile="edit",$scope.whoseFile=thisFile.fileBelongsTo,"Objective Point File"==$scope.whoseFile&&($scope.whoseFile="Datum Location File"),$scope.aFile=thisFile,$scope.aFile.fileType=fileTypeList.filter(function(ft){
return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,void 0!==$scope.aFile.name){var fI=$scope.aFile.name.lastIndexOf("."),fileExt=$scope.aFile.name.substring(fI+1);$scope.isPhoto=fileExt.match(/(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)?!0:!1}if($scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),void 0!==fileSource&&($scope.aSource=fileSource,$scope.aSource.FULLname=$scope.aSource.source_name,$scope.aSource.agencyName=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name,$scope.agencyNameForCap=$scope.aSource.agencyName),void 0!==dataFile){$scope.ApprovalInfo={},$scope.datafile=dataFile,$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.datafile.collect_date=new Date($scope.datafile.collect_date),$scope.datafile.good_start=getDateTimeParts($scope.datafile.good_start),$scope.datafile.good_end=getDateTimeParts($scope.datafile.good_end),void 0!==$scope.datafile.approval_id&&null!==$scope.datafile.approval_id&&$scope.datafile.approval_id>=1&&DATA_FILE.getDFApproval({id:$scope.datafile.data_file_id},function(approvalResponse){$scope.ApprovalInfo.approvalDate=new Date(approvalResponse.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==approvalResponse.member_id})[0]},function(errorResponse){toastr.error("Error getting data file approval information")});var aProcessor=null!==$scope.datafile.processor_id?allMembers.filter(function(amem){return amem.member_id==$scope.datafile.processor_id})[0]:{};$scope.processor=void 0!==aProcessor.fname?aProcessor.fname+" "+aProcessor.lname:""}}else $scope.whoseFile="Site File",$scope.createOReditFile="create",$scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname,$scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name;$scope.cancel=function(){$scope.sFileIsUploading=!1;var sendBack=$scope.aFile;$uibModalInstance.close(sendBack)},$scope.create=function(valid){if(valid){$scope.sFileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){if(8!==$scope.aFile.filetype_id){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,photo_date:$scope.aFile.photo_date,description:$scope.aFile.description,site_id:$scope.theSite.site_id,source_id:response.source_id,photo_direction:$scope.aFile.photo_direction},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Site File";var state="created",sendBack=[fresponse,state];$scope.sFileIsUploading=!1,$uibModalInstance.close(sendBack)},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})}else $scope.aFile.site_id=$scope.theSite.site_id,$scope.aFile.source_id=response.source_id,FILE.save($scope.aFile).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Site File";var state="created",sendBack=[fresponse,state];$scope.sFileIsUploading=!1,$uibModalInstance.close(sendBack)},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving Source info: "+errorResponse.statusText)})}},$scope.changedFileType=function(){},$scope.save=function(valid){if(2==$scope.fileCopy.filetype_id){var s=$scope.dfCopy.good_start,e=$scope.dfCopy.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}}if(valid){$scope.sFileIsUploading=!0;var whatkind=$scope.aFile.fileBelongsTo;if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.sourceCopy.source_id){var theSource={source_name:$scope.sourceCopy.FULLname,agency_id:$scope.sourceCopy.agency_id};SOURCE.save(theSource).$promise.then(function(sResponse){$scope.aSource=sResponse,$scope.aSource.FULLname=$scope.aSource.source_name,$scope.aSource.agencyName=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name,$scope.fileCopy.source_id=sResponse.source_id,FILE.update({id:$scope.fileCopy.file_id},$scope.fileCopy).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo=whatkind,$scope.aFile=fileResponse,$scope.aFile.fileType=fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),$scope.fileCopy={},$scope.sourceCopy={},$scope.view.FILEval="detail",$scope.sFileIsUploading=!1},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving source: "+errorResponse.statusText)})}else{if("UTC"!=$scope.dfCopy.time_zone){var utcStartDateTime=new Date($scope.dfCopy.good_start).toUTCString(),utcEndDateTime=new Date($scope.dfCopy.good_end).toUTCString();$scope.dfCopy.good_start=utcStartDateTime,$scope.dfCopy.good_end=utcEndDateTime,$scope.dfCopy.time_zone="UTC"}else{var si=$scope.dfCopy.good_start.toString().indexOf("GMT")+3,ei=$scope.dfCopy.good_end.toString().indexOf("GMT")+3;$scope.dfCopy.good_start=$scope.dfCopy.good_start.toString().substring(0,si),$scope.dfCopy.good_end=$scope.dfCopy.good_end.toString().substring(0,ei)}DATA_FILE.update({id:$scope.dfCopy.data_file_id},$scope.dfCopy).$promise.then(function(dfResponse){$scope.datafile=dfResponse,$scope.datafile.collect_date=new Date($scope.datafile.collect_date),$scope.datafile.good_start=getDateTimeParts($scope.datafile.good_start),$scope.datafile.good_end=getDateTimeParts($scope.datafile.good_end);var aProcessor=null!==$scope.datafile.processor_id?allMembers.filter(function(amem){return amem.member_id==$scope.datafile.processor_id})[0]:{};$scope.processor=void 0!==aProcessor.fname?aProcessor.fname+" "+aProcessor.lname:"",FILE.update({id:$scope.fileCopy.file_id},$scope.fileCopy).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo=whatkind,$scope.aFile=fileResponse,$scope.aFile.fileType=fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),$scope.fileCopy={},$scope.dfCopy={},$scope.view.FILEval="detail",$scope.sFileIsUploading=!1},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving data file: "+errorResponse.statusText)})}}},$scope.saveFileUpload=function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.sFileIsUploading=!0;var fileParts={FileEntity:{file_id:$scope.aFile.file_id,name:$scope.aFile.name,description:$scope.aFile.description,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,file_date:$scope.aFile.file_date,hwm_id:$scope.aFile.hwm_id,site_id:$scope.aFile.site_id,filetype_id:$scope.aFile.filetype_id,source_id:$scope.aFile.source_id,path:$scope.aFile.path,data_file_id:$scope.aFile.data_file_id,instrument_id:$scope.aFile.instrument_id,photo_date:$scope.aFile.photo_date,is_nwis:$scope.aFile.is_nwis,objective_point_id:$scope.aFile.objective_point_id},File:void 0!==$scope.aFile.File1?$scope.aFile.File1:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),FILE_STAMP.setStamp(),$scope.stamp=FILE_STAMP.getStamp(),$scope.aFile.name=fresponse.name,$scope.aFile.path=fresponse.path,$scope.isPhoto=void 0!==$scope.aFile.File1?$scope.aFile.File1.type.indexOf("image")>-1?!0:!1:$scope.aFile.File.type.indexOf("image")>-1?!0:!1,void 0!==$scope.aFile.File1&&($scope.aFile.File=$scope.aFile.File1,$scope.aFile.File1=void 0),$scope.sFileIsUploading=!1,$scope.fileItemExists=!0},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},$scope.deleteFile=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.wannaEditFILE=function(){$scope.view.FILEval="edit",$scope.fileCopy=angular.copy($scope.aFile),$scope.dfCopy=angular.copy($scope.datafile),$scope.sourceCopy=angular.copy($scope.aSource)},$scope.cancelFILEEdit=function(){$scope.view.FILEval="detail",$scope.fileCopy={},$scope.dfCopy={},$scope.sourceCopy={}},$scope.approveDF=function(){var thisDF=$scope.datafile,approveModal=$uibModal.open({template:"<div class='modal-header'><h3 class='modal-title'>Approve Data File</h3></div><div class='modal-body'><p>Are you ready to approve this Data File?</p></div><div class='modal-footer'><button class='btn btn-primary' ng-click='approveIt()'>Approve</button><button class='btn btn-warning' ng-click='cancel()'>Cancel</button></div>",controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.approveIt=function(){$uibModalInstance.close(thisDF)}}],size:"sm"});approveModal.result.then(function(df){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),DATA_FILE.approveDF({id:df.data_file_id}).$promise.then(function(approvalResponse){df.approval_id=approvalResponse.approval_id,$scope.datafile=df,toastr.success("Data File Approved"),$scope.ApprovalInfo.approvalDate=new Date(approvalResponse.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==approvalResponse.member_id})[0]},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.unApproveDF=function(){var thisDF=$scope.datafile,unapproveModal=$uibModal.open({template:"<div class='modal-header'><h3 class='modal-title'>Remove Approval</h3></div><div class='modal-body'><p>Are you sure you wan to unapprove this Data File?</p></div><div class='modal-footer'><button class='btn btn-primary' ng-click='unApproveIt()'>Unapprove</button><button class='btn btn-warning' ng-click='cancel()'>Cancel</button></div>",controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.unApproveIt=function(){$uibModalInstance.close(thisDF)}}],size:"sm"});unapproveModal.result.then(function(df){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),DATA_FILE.unApproveDF({id:df.data_file_id}).$promise.then(function(){df.approval_id=null,$scope.datafile=df,toastr.success("Data File Unapproved"),$scope.ApprovalInfo={}},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("fileCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","SERVER_URL","FILE_STAMP","Site_Files","HWM_Service","Instrument_Service","$uibModal","$filter","$timeout","thisSite","thisSiteFiles","allFileTypes","allAgencies","thisSiteSensors","thisSiteOPs","thisSiteHWMs","FILE","DATA_FILE","MEMBER","SOURCE",function($scope,$rootScope,$cookies,$location,$state,$http,SERVER_URL,FILE_STAMP,Site_Files,HWM_Service,Instrument_Service,$uibModal,$filter,$timeout,thisSite,thisSiteFiles,allFileTypes,allAgencies,thisSiteSensors,thisSiteOPs,thisSiteHWMs,FILE,DATA_FILE,MEMBER,SOURCE){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$scope.serverURL=SERVER_URL,$scope.stamp=FILE_STAMP.getStamp(),$rootScope.$on("fileStampSet",function(event,st){$scope.stamp=st}),$scope.siteHWMs=thisSiteHWMs,$scope.siteSensors=thisSiteSensors;for(var sf=0;sf<thisSiteFiles.length;sf++){var whatKindaFile="";if(thisSiteFiles[sf].hwm_id>0&&null!==thisSiteFiles[sf].hwm_id&&(whatKindaFile="HWM File"),thisSiteFiles[sf].data_file_id>0&&null!==thisSiteFiles[sf].data_file_id&&(whatKindaFile="DataFile File"),thisSiteFiles[sf].instrument_id>0&&null!==thisSiteFiles[sf].instrument_id){whatKindaFile="Sensor File";var thisIns=thisSiteSensors.filter(function(s){return s.instrument_id==thisSiteFiles[sf].instrument_id})[0];thisSiteFiles[sf].typeName=thisIns.serial_number}thisSiteFiles[sf].objective_point_id>0&&null!==thisSiteFiles[sf].objective_point_id&&(whatKindaFile="Objective Point File",thisSiteFiles[sf].typeName=thisSiteOPs.filter(function(op){return op.objective_point_id==thisSiteFiles[sf].objective_point_id})[0].name),""===whatKindaFile&&(whatKindaFile="Site File"),thisSiteFiles[sf].fileBelongsTo=whatKindaFile}Site_Files.setAllSiteFiles(thisSiteFiles),$scope.SiteFiles=Site_Files.getAllSiteFiles(),$scope.siteImageFiles=[];for(var s=0;s<$scope.SiteFiles.length;s++){var extI=$scope.SiteFiles[s].name.indexOf("."),extString=$scope.SiteFiles[s].name.substring(extI+1);["jpg","JPG","jpeg","JPEG","png","PNG","gif","GIF"].indexOf(extString)>-1&&$scope.siteImageFiles.push($scope.SiteFiles[s])}$scope.$on("siteFilesUpdated",function(event,sitefiles){$scope.siteHWMs=HWM_Service.getAllSiteHWMs(),$scope.siteSensors=Instrument_Service.getAllSiteSensors(),$scope.SiteFiles=sitefiles.filter(function(h){return"Site File"==h.fileBelongsTo||"Objective Point File"==h.fileBelongsTo}),angular.forEach($scope.SiteFiles,function(sf){"Objective Point File"==sf.fileBelongsTo&&(sf.typeName=thisSiteOPs.filter(function(op){return op.objective_point_id==sf.objective_point_id})[0].name)});var hwmFiles=sitefiles.filter(function(sfiles){return"HWM File"==sfiles.fileBelongsTo}),sensFiles=sitefiles.filter(function(sfi){return sfi.instrument_id>0&&null!==sfi.instrument_id});if(void 0!==$cookies.get("SessionEventID"))for(var Ehf=0;Ehf<hwmFiles.length;Ehf++)for(var Ehwm=0;Ehwm<$scope.siteHWMs.length;Ehwm++)hwmFiles[Ehf].hwm_id==$scope.siteHWMs[Ehwm].hwm_id&&$scope.siteHWMs[Ehwm].event_id==$cookies.get("SessionEventID")&&$scope.SiteFiles.push(hwmFiles[Ehf]);else for(var hf=0;hf<hwmFiles.length;hf++)for(var hwm=0;hwm<$scope.siteHWMs.length;hwm++)hwmFiles[hf].hwm_id==$scope.siteHWMs[hwm].hwm_id&&$scope.SiteFiles.push(hwmFiles[hf]);if(void 0!==$cookies.get("SessionEventID"))for(var Esf=0;Esf<sensFiles.length;Esf++)for(var Einst=0;Einst<$scope.siteSensors.length;Einst++)sensFiles[Esf].instrument_id==$scope.siteSensors[Einst].instrument_id&&$scope.siteSensors[Einst].event_id==$cookies.get("SessionEventID")&&(sensFiles[Esf].typeName=$scope.siteSensors[Einst].serial_number,$scope.SiteFiles.push(sensFiles[Esf]));else for(var sf=0;sf<sensFiles.length;sf++)for(var inst=0;inst<$scope.siteSensors.length;inst++)sensFiles[sf].instrument_id==$scope.siteSensors[inst].instrument_id&&(sensFiles[sf].typeName=$scope.siteSensors[inst].serial_number,$scope.SiteFiles.push(sensFiles[sf]));$scope.siteImageFiles=[],angular.forEach($scope.SiteFiles,function(sf){var extI=sf.name.indexOf("."),extString=sf.name.substring(extI+1);["jpg","JPG","jpeg","JPEG","png","PNG","gif","GIF"].indexOf(extString)>-1&&$scope.siteImageFiles.push(sf)})},!0),$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){if($scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1,void 0!==newValue){$scope.siteHWMs=HWM_Service.getAllSiteHWMs(),$scope.siteSensors=Instrument_Service.getAllSiteSensors(),$scope.SiteFiles=Site_Files.getAllSiteFiles().filter(function(h){return"Site File"==h.fileBelongsTo||"Objective Point File"==h.fileBelongsTo}),angular.forEach($scope.SiteFiles,function(sf){"Objective Point File"==sf.fileBelongsTo&&(sf.typeName=thisSiteOPs.filter(function(op){return op.objective_point_id==sf.objective_point_id})[0].name),$scope.siteImageFiles=[];var extI=sf.name.indexOf("."),extString=sf.name.substring(extI+1);["jpg","JPG","jpeg","JPEG","png","PNG","gif","GIF"].indexOf(extString)>-1&&$scope.siteImageFiles.push(sf)});for(var hwmFiles=Site_Files.getAllSiteFiles().filter(function(sfiles){return"HWM File"==sfiles.fileBelongsTo}),sensFiles=Site_Files.getAllSiteFiles().filter(function(sfi){return sfi.instrument_id>0&&null!==sfi.instrument_id}),hf=0;hf<hwmFiles.length;hf++)for(var hwm=0;hwm<$scope.siteHWMs.length;hwm++)hwmFiles[hf].hwm_id==$scope.siteHWMs[hwm].hwm_id&&$scope.siteHWMs[hwm].event_id==$cookies.get("SessionEventID")&&$scope.SiteFiles.push(hwmFiles[hf]);for(var sf=0;sf<sensFiles.length;sf++)for(var inst=0;inst<$scope.siteSensors.length;inst++)sensFiles[sf].instrument_id==$scope.siteSensors[inst].instrument_id&&$scope.siteSensors[inst].event_id==$cookies.get("SessionEventID")&&(sensFiles[sf].typeName=$scope.siteSensors[inst].serial_number,$scope.SiteFiles.push(sensFiles[sf]))}else $scope.SiteFiles=Site_Files.getAllSiteFiles()},!0),$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})},$scope.showFileModal=function(FileClicked){var SindexClicked=$scope.SiteFiles.indexOf(FileClicked);$scope.siteFileTypes=allFileTypes.filter(function(ft){return"Photo"===ft.filetype||"Historic Citation"===ft.filetype||"Field Sheets"===ft.filetype||"Level Notes"===ft.filetype||"Site Sketch"===ft.filetype||"Other"===ft.filetype||"Link"===ft.filetype||"Sketch"===ft.filetype||"Landowner Permission Form"===ft.filetype}),$scope.hwmFileTypes=allFileTypes.filter(function(hft){return"Photo"===hft.filetype||"Historic Citation"===hft.filetype||"Field Sheets"===hft.filetype||"Level Notes"===hft.filetype||"Other"===hft.filetype||"Link"===hft.filetype||"Sketch"===hft.filetype}),$scope.sensorFileTypes=allFileTypes.filter(function(sft){return"Photo"===sft.filetype||"Data"===sft.filetype||"Historic Citation"===sft.filetype||"Field Sheets"===sft.filetype||"Level Notes"===sft.filetype||"Other"===sft.filetype||"Link"===sft.filetype||"Sketch"===sft.filetype}),$scope.opFileTypes=allFileTypes.filter(function(oft){return"Photo"===oft.filetype||"Field Sheets"===oft.filetype||"Level Notes"===oft.filetype||"Other"===oft.filetype||"NGS Datasheet"===oft.filetype||"Sketch"===oft.filetype});var modalInstance=$uibModal.open({templateUrl:0!==FileClicked?"FILEmodal.html":"FileCreateModal.html",controller:"siteFileModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{fileExists:function(){return 0!==FileClicked?FILE.getFileItem({id:FileClicked.file_id}).$promise:void 0},fileTypeList:function(){if(0===FileClicked)return $scope.siteFileTypes;switch(FileClicked.fileBelongsTo){case"HWM File":return $scope.hwmFileTypes;case"DataFile File":return $scope.sensorFileTypes;case"Sensor File":return $scope.sensorFileTypes;case"Objective Point File":return $scope.opFileTypes;case"Site File":return $scope.siteFileTypes}},agencyList:function(){return allAgencies},thisFile:function(){return 0!==FileClicked?FileClicked:void 0},fileSite:function(){return thisSite},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise},fileSource:function(){return 0!==FileClicked&&void 0!==FileClicked.source_id?SOURCE.query({id:FileClicked.source_id}).$promise:void 0},dataFile:function(){return 0!==FileClicked&&void 0!==FileClicked.data_file_id?DATA_FILE.query({id:FileClicked.data_file_id}).$promise:void 0}}});modalInstance.result.then(function(createdFile){"created"==createdFile[1]&&($scope.SiteFiles.push(createdFile[0]),Site_Files.setAllSiteFiles($scope.SiteFiles)),void 0===createdFile[1]&&($scope.SiteFiles[SindexClicked]=createdFile,Site_Files.setAllSiteFiles($scope.SiteFiles),$scope.stamp=FILE_STAMP.getStamp()),"deleted"==createdFile[1]&&($scope.SiteFiles.splice(SindexClicked,1),Site_Files.setAllSiteFiles($scope.SiteFiles))})}}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("eventSessionModalCtrl",["$scope","$rootScope","$cookies","$uibModalInstance","allEvents","allEventTypes","allStates","EVENT",function($scope,$rootScope,$cookies,$uibModalInstance,allEvents,allEventTypes,allStates,EVENT){$scope.EventList=allEvents,$scope.EventTypeList=allEventTypes,$scope.StateList=allStates;var chosenEv=$cookies.get("SessionEventID");$scope.event={EventChosen:void 0!==chosenEv?Number(chosenEv):""},$scope.filterEvents=function(){var d=null!==$scope.event.DATE&&void 0!==$scope.event.DATE?$scope.event.DATE:null,t=null!==$scope.event.type&&void 0!==$scope.event.type?$scope.event.type:0,s=null!==$scope.event.state&&void 0!==$scope.event.state?$scope.event.state:null;EVENT.getFilteredEvents({Date:d,Type:t,State:s}).$promise.then(function(response){$scope.EventList=response})},$scope.clearFilters=function(){$scope.event={EventChosen:void 0!==chosenEv?Number(chosenEv):""},$scope.EventList=allEvents},$scope.setEvent=function(){if($scope.evID=$scope.event.EventChosen,""!==$scope.evID){var eventName=allEvents.filter(function(x){return x.event_id==$scope.evID})[0];$cookies.put("SessionEventID",$scope.evID),$cookies.put("SessionEventName",eventName.event_name),$rootScope.sessionEvent="Session Event: "+eventName.event_name+".",$uibModalInstance.dismiss("cancel")}else toastr.error("You must choose an Event first.")},$scope.clearEvent=function(){$scope.event={},$cookies.remove("SessionEventID"),$cookies.remove("SessionEventName"),$rootScope.sessionEvent="",$uibModalInstance.dismiss("cancel")},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.close=function(){$uibModalInstance.dismiss("cancel")}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("eventSessionCtrl",["$scope","$rootScope","$cookies","$uibModal","$location","$state","EVENT","EVENT_TYPE","STATE",function($scope,$rootScope,$cookies,$uibModal,$location,$state,EVENT,EVENT_TYPE,STATE){$scope.openEventModal=function(){var modalInstance=$uibModal.open({templateUrl:"ChooseEvent.html",controller:"eventSessionModalCtrl",size:"md",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{allEvents:function(){return EVENT.getAll().$promise},allEventTypes:function(){return EVENT_TYPE.getAll().$promise},allStates:function(){return STATE.getAll().$promise}}});modalInstance.result.then(function(r){})}}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("eventModalCtrl",["$scope","$rootScope","$cookies","$http","$uibModal","$uibModalInstance","$filter","thisEvent","eventTypeList","eventStatusList","adminList","fileTypes","eventSites","allStates","allCounties","EVENT","FILE","SERVER_URL",function($scope,$rootScope,$cookies,$http,$uibModal,$uibModalInstance,$filter,thisEvent,eventTypeList,eventStatusList,adminList,fileTypes,eventSites,allStates,allCounties,EVENT,FILE,SERVER_URL){$scope.serverURL=SERVER_URL,$scope.downloadZipUrl="",$scope.objectChoices=["HWMs","Sensors"],$scope.anEvent={},$scope.eventTypes=eventTypeList,$scope.eventStatuses=eventStatusList,$scope.adminMembers=adminList,$scope.loggedInRole=$cookies.get("usersRole"),$scope.view={EVval:"detail"},$scope.dl={dlOpen:!0,dlFileOpen:!1},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.wannaEditEV=function(){$scope.view.EVval="edit",$scope.evCopy=angular.copy($scope.anEvent)},$scope.cancelEVEdit=function(){$scope.view.EVval="detail",$scope.evCopy=[]};var makeAdate=function(d){var aDate=new Date;void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime},dateWOtime=function(d){var year=d.getFullYear(),month=d.getMonth(),day=("0"+d.getDate()).slice(-2),monthNames=["01","02","03","04","05","06","07","08","09","10","11","12"],dateWOtime=monthNames[month]+"/"+day+"/"+year;return dateWOtime};"empty"!==thisEvent?($scope.createOReditEV="edit",$scope.evModalHeader="Event Information",$scope.anEvent=angular.copy(thisEvent),$scope.anEvent.event_start_date=void 0!==$scope.anEvent.event_start_date?makeAdate($scope.anEvent.event_start_date):"",$scope.anEvent.event_end_date=void 0!==$scope.anEvent.event_end_date?makeAdate($scope.anEvent.event_end_date):""):($scope.createOReditEV="create",$scope.anEvent.event_start_date=makeAdate());var compareDates=function(v,sd,ed){if(new Date(ed)<new Date(sd)){v=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The event end date must be after the event start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){v=!1})}else(""===ed||""===sd)&&(v=!1);return v};if($scope.create=function(valid){if(void 0!==$scope.anEvent.event_start_date&&null!==$scope.anEvent.event_start_date&&void 0!==$scope.anEvent.event_end_date&&null!==$scope.anEvent.event_end_date&&(valid=compareDates(valid,$scope.anEvent.event_start_date,$scope.anEvent.event_end_date)),valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var createdEvent={};EVENT.save($scope.anEvent,function(response){toastr.success("Event Created"),createdEvent=response,createdEvent.event_id=response.event_id,createdEvent.Name=response.event_name,createdEvent.Type=$scope.eventTypes.filter(function(a){return a.event_type_id==response.event_type_id})[0].type,createdEvent.Status=$scope.eventStatuses.filter(function(r){return r.event_status_id==response.event_status_id})[0].status;var coord=$scope.adminMembers.filter(function(c){return c.member_id==response.event_coordinator})[0];createdEvent.StartDate=response.event_start_date,createdEvent.EndDate=response.event_end_date,createdEvent.Coord=void 0!==coord?coord.fname+" "+coord.lname:""},function(errorResponse){toastr.error("Error creating new event: "+errorResponse.statusText)}).$promise.then(function(){var sendBack=[createdEvent,"created"];$uibModalInstance.close(sendBack)})}},$scope.save=function(valid){if(void 0!==$scope.evCopy.event_start_date&&null!==$scope.evCopy.event_start_date&&void 0!==$scope.evCopy.event_end_date&&null!==$scope.evCopy.event_end_date&&(valid=compareDates(valid,$scope.evCopy.event_start_date,$scope.evCopy.event_end_date)),valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var updatedEvent={};EVENT.update({id:$scope.evCopy.event_id},$scope.evCopy,function(response){updatedEvent=response,updatedEvent.event_id=response.event_id,updatedEvent.Name=response.event_name,updatedEvent.Type=$scope.eventTypes.filter(function(a){return a.event_type_id==response.event_type_id})[0].type,updatedEvent.Status=$scope.eventStatuses.filter(function(r){return r.event_status_id==response.event_status_id})[0].status;var coord=$scope.adminMembers.filter(function(c){return c.member_id==response.event_coordinator})[0];updatedEvent.StartDate=response.event_start_date,updatedEvent.EndDate=response.event_end_date,updatedEvent.Coord=void 0!==coord?coord.fname+" "+coord.lname:"",toastr.success("Event Updated")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){var sendBack=[updatedEvent,"updated"];$uibModalInstance.close(sendBack)})}},$scope.deleteEV=function(ev){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ev},what:function(){return"Event"}}});modalInstance.result.then(function(eventToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),EVENT["delete"]({id:eventToRemove.event_id},function(response){toastr.success("Event Deleted")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$uibModalInstance.close(["de","deleted"])})})},$scope.cancel=function(){$uibModalInstance.close()},$rootScope.stateIsLoading={showLoading:!1},"empty"!==thisEvent){if($scope.zipFileParams={filesFor:"",stateName:"",countyName:"",fromDate:"",toDate:""},$scope.siteCountyList=[],$scope.countyArray=[],$scope.eventStates=[],void 0!==eventSites)for(var st=0;st<allStates.length;st++)for(var es=0;es<eventSites.length;es++)eventSites[es].state==allStates[st].state_abbrev&&($scope.eventStates.push(allStates[st]),es=eventSites.length);else $scope.eventStates=allStates;for(var ci=0;ci<eventSites.length;ci++)$scope.siteCountyList.map(function(scl){return scl.county_name}).indexOf(eventSites[ci].county)<0&&$scope.siteCountyList.push({state_abbrev:eventSites[ci].state,county_name:eventSites[ci].county,state_id:allStates.filter(function(s){return s.state_abbrev==eventSites[ci].state})[0].state_id});$scope.UpdateCounties=function(){if(void 0!==$scope.zipFileParams.stateName){var thisState=$scope.eventStates.filter(function(st){return st.state_abbrev==$scope.zipFileParams.stateName})[0];$scope.countyArray=$scope.siteCountyList.filter(function(c){return c.state_id==thisState.state_id})}else $scope.countyArray=[];

},$scope.HWMfileTypes=fileTypes.filter(function(hft){return"Photo"===hft.filetype||"Historic Citation"===hft.filetype||"Field Sheets"===hft.filetype||"Level Notes"===hft.filetype||"Other"===hft.filetype||"Sketch"===hft.filetype}),$scope.sensorfileTypes=fileTypes.filter(function(sft){return"Photo"===sft.filetype||"Data"===sft.filetype||"Historic Citation"===sft.filetype||"Field Sheets"===sft.filetype||"Level Notes"===sft.filetype||"Other"===sft.filetype||"Sketch"===sft.filetype}),$scope.updatefileTypeChecks=function(){$scope.hwmFileTypesWanted=[];$scope.hwmFileTypesString="",$scope.sensorFileTypesString="",angular.forEach($scope.HWMfileTypes,function(hwmFT){hwmFT.selected=!1}),angular.forEach($scope.sensorfileTypes,function(senFT){senFT.selected=!1}),"HWMs"==$scope.zipFileParams.filesFor&&($scope.fileTypeCheckList=$scope.HWMfileTypes),"Sensors"==$scope.zipFileParams.filesFor&&($scope.fileTypeCheckList=$scope.sensorfileTypes),$scope.filesWantedChosen=!0},$scope.checkedFile=function(f){"HWMs"==$scope.zipFileParams.filesFor&&($scope.hwmFileTypesWanted=[],angular.forEach($scope.HWMfileTypes,function(hf){hf.selected&&$scope.hwmFileTypesWanted.push(hf.filetype_id)}),$scope.hwmFileTypesString=$scope.hwmFileTypesWanted.join(",")),"Sensors"==$scope.zipFileParams.filesFor&&($scope.sensorFileTypesWanted=[],angular.forEach($scope.sensorfileTypes,function(sf){sf.selected&&$scope.sensorFileTypesWanted.push(sf.filetype_id)}),$scope.sensorFileTypesString=$scope.sensorFileTypesWanted.join(","))},$scope.DownloadZip=function(){var formattedFromDate="",formattedToDate="";if(""!==$scope.zipFileParams.fromDate&&(formattedFromDate=dateWOtime($scope.zipFileParams.fromDate)),""!==$scope.zipFileParams.toDate&&(formattedToDate=dateWOtime($scope.zipFileParams.toDate)),""!==$scope.zipFileParams.filesFor){var filepath=$scope.serverURL+"/Events/"+$scope.anEvent.event_id+"/EventFileItems?State="+$scope.zipFileParams.stateName+"&County="+$scope.zipFileParams.countyName+"&FromDate="+formattedFromDate+"&ToDate="+formattedToDate+"&FilesFor="+$scope.zipFileParams.filesFor+"&HWMFileType="+$scope.hwmFileTypesString+"&SensorFileTypes="+$scope.sensorFileTypesString,xhr=new XMLHttpRequest;xhr.open("GET",filepath),toastr.options={closeButton:!0,positionClass:"toast-bottom-right",onclick:null,timeOut:"0",extendedTimeOut:"0"},toastr.warning("Zip file is downloading."),xhr.responseType="blob",xhr.setRequestHeader("Content-type","application/*; charset=utf-8"),xhr.setRequestHeader("Authorization","Basic "+$cookies.get("STNCreds")),xhr.onreadystatechange=function(){if(4===xhr.readyState)if("Internal Server Error"!==xhr.statusText){var usgsWiMmessage=xhr.getResponseHeader("usgswim-messages");if("info: FileCount:0,Count: 0"==usgsWiMmessage){toastr.clear();{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">No Files</h3></div><div class="modal-body"><p>There are no files that match your query.</p><p>Please narrow your search and try again.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}}else{var blob=new Blob([xhr.response],{type:"application/octet-stream"}),a=document.createElement("a"),urlCreator=window.URL||window.webkitURL||window.mozURL||window.msURL,fileURL=urlCreator.createObjectURL(blob);a.style="display: none",a.href=fileURL,a.download="EventFileDownload.zip",a.target="_blank",document.body.appendChild(a),a.click(),toastr.clear()}}else{toastr.clear();{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Download was unsuccessful. Possible cause is that the zip file is too large to download.</p><p>Please narrow your search and try again.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}}},xhr.send()}else{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>You must choose either HWM files or Sensor files before a downloaded zip file can be requested.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}}}}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("eventInfoCtrl",["$scope","$cookies","$location","$http","$uibModal","$filter","EVENT","thisEvent",function($scope,$cookies,$location,$http,$uibModal,$filter,EVENT,thisEvent){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.anEvent={},$scope.DeleteEvent=function(ev){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ev},what:function(){return"Event"}}});modalInstance.result.then(function(nameToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),EVENT["delete"]({id:nameToRemove.event_id},function(response){var delEv={};delEv.event_id=nameToRemove.event_id,delEv.Name=nameToRemove.event_name,delEv.Type=$scope.eventTypeList.filter(function(a){return a.event_type_id==nameToRemove.event_type_id})[0].type,delEv.Status=$scope.eventStatList.filter(function(r){return r.event_status_id==nameToRemove.event_status_id})[0].status;var coord=$scope.eventCoordList.filter(function(c){return c.member_id==nameToRemove.event_coordinator})[0];delEv.StartDate=nameToRemove.event_start_date,delEv.EndDate=nameToRemove.event_end_date,delEv.Coord=void 0!==coord?coord.fname+" "+coord.lname:"";for(var index=0,i=0;i<$scope.eventList.length;i++)$scope.eventList[i].event_id==delEv.event_id&&(index=i,i=$scope.eventList.length);$scope.eventList.splice(index,1),toastr.success("Event Deleted")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$location.path("/Events/EventsList").replace()})})};var makeAdate=function(d){var aDate=new Date;void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};if(void 0!==thisEvent){$scope.anEvent=thisEvent,$scope.anEvent.event_start_date=makeAdate($scope.anEvent.event_start_date),$scope.anEvent.event_end_date=makeAdate($scope.anEvent.event_end_date),$scope.thisEventType=$scope.eventTypeList.filter(function(a){return a.event_type_id==thisEvent.event_type_id})[0].type,$scope.thisEventStatus=$scope.eventStatList.filter(function(r){return r.event_status_id==thisEvent.event_status_id})[0].status;var EC=$scope.eventCoordList.filter(function(c){return c.member_id==thisEvent.event_coordinator})[0];$scope.thisEventCoord=void 0!==EC?EC.fname+" "+EC.lname:""}else $scope.anEvent.event_start_date=makeAdate(),$scope.anEvent.event_end_date=makeAdate();$scope.SaveOnBlur=function(v){if(v)$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",EVENT.update({id:$scope.anEvent.event_id},$scope.anEvent,function(response){toastr.success("Event Updated")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)});else{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all required fields.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}},$scope.save=function(valid){valid&&EVENT.save($scope.anEvent,function(response){toastr.success("Event Created");var E={};E.event_id=response.event_id,E.Name=response.event_name,E.Type=$scope.eventTypeList.filter(function(a){return a.event_type_id==response.event_type_id})[0].type,E.Status=$scope.eventStatList.filter(function(r){return r.event_status_id==response.event_status_id})[0].status;var coord=$scope.eventCoordList.filter(function(c){return c.member_id==response.event_coordinator})[0];E.StartDate=response.event_start_date,E.EndDate=response.event_end_date,E.Coord=void 0!==coord?coord.fname+" "+coord.lname:"",$scope.eventList.push(E)}).$promise.then(function(){$location.path("/Events/EventsList").replace()})}}}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("eventCtrl",["$scope","$rootScope","$cookies","$location","$http","$filter","$uibModal","MEMBER","FILE_TYPE","EVENT","STATE","COUNTIES","allCoordMembers","allEvents","allEventTypes","allEventStats",function($scope,$rootScope,$cookies,$location,$http,$filter,$uibModal,MEMBER,FILE_TYPE,EVENT,STATE,COUNTIES,allCoordMembers,allEvents,allEventTypes,allEventStats){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$rootScope.thisPage="Settings/Events",$scope.loggedInRole=$cookies.get("usersRole"),$scope.isAdmin="Admin"==$scope.loggedInRole?!0:!1,$scope.sort_by=function(newSortingOrder){$scope.sortingOrder==newSortingOrder&&($scope.reverse=!$scope.reverse),$scope.sortingOrder=newSortingOrder,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+newSortingOrder+" i").removeClass().addClass($scope.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")};var makeAdate=function(d){var Tindex=d.indexOf("T"),theDate=d.substring(0,Tindex);return theDate};$scope.eventTypeList=allEventTypes,$scope.eventStatList=allEventStats,$scope.eventCoordList=allCoordMembers,$scope.eventList=[];for(var x=0;x<allEvents.length;x++){var E=allEvents[x];E.Name=allEvents[x].event_name,E.Type=$scope.eventTypeList.filter(function(a){return a.event_type_id==allEvents[x].event_type_id})[0].type,E.Status=$scope.eventStatList.filter(function(r){return r.event_status_id==allEvents[x].event_status_id})[0].status;var coord=$scope.eventCoordList.filter(function(c){return c.member_id==allEvents[x].event_coordinator})[0];E.StartDate=void 0!==allEvents[x].event_start_date?makeAdate(allEvents[x].event_start_date):"",E.EndDate=void 0!==allEvents[x].event_end_date?makeAdate(allEvents[x].event_end_date):"",E.Coord=void 0!==coord?coord.fname+" "+coord.lname:"",$scope.eventList.push(E)}$scope.showEventModal=function(eventClicked){var indexClicked=$scope.eventList.indexOf(eventClicked);$rootScope.stateIsLoading={showLoading:!0};var modalInstance=$uibModal.open({templateUrl:"eventModal.html",controller:"eventModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{thisEvent:function(){return 0!==eventClicked?eventClicked:"empty"},eventTypeList:function(){return allEventTypes},eventStatusList:function(){return allEventStats},adminList:function(){return allCoordMembers},fileTypes:function(){return FILE_TYPE.getAll().$promise},eventSites:function(){return 0!==eventClicked?EVENT.getEventSites({id:eventClicked.event_id}).$promise:void 0},allStates:function(){return STATE.getAll().$promise},allCounties:function(){return COUNTIES.getAll().$promise}}});modalInstance.result.then(function(createdEvent){$rootScope.stateIsLoading={showLoading:!1},void 0!==createdEvent&&("created"==createdEvent[1]&&$scope.eventList.push(createdEvent[0]),"updated"===createdEvent[1]&&($scope.eventList[indexClicked]=createdEvent[0]),"deleted"==createdEvent[1]&&$scope.eventList.splice(indexClicked,1))})}}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("approvalCtrl",["$scope","$cookies","$rootScope","$location","$http","stateList","instrumentList","allSensorTypes","allDepTypes","HWM","DATA_FILE","INSTRUMENT","MEMBER","SITE",function($scope,$cookies,$rootScope,$location,$http,stateList,instrumentList,allSensorTypes,allDepTypes,HWM,DATA_FILE,INSTRUMENT,MEMBER,SITE){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{if($rootScope.thisPage="Approval",$rootScope.activeMenu="approval",$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEvent=null!==$cookies.get("SessionEventName")&&void 0!==$cookies.get("SessionEventName")?$cookies.get("SessionEventName"):"All Events"}),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll(function(response){$scope.allMembers=response}).$promise,$scope.allStates=stateList,$scope.allInstruments=instrumentList,$scope.allSensorTypes=allSensorTypes,$scope.allDeploymentTypes=allDepTypes,$scope.ChosenEvent={},$scope.ChosenState={},$scope.ChosenMember={},$scope.unApprovedHWMs=[],$scope.showHWMbox=!1,$scope.unApprovedDFs=[],$scope.showDFbox=!1,void 0!==$rootScope.approvalSearch){var thisSearch=$rootScope.approvalSearch;$scope.sessionEvent=Number(thisSearch.eventID),$scope.ChosenState.id=thisSearch.stateID,$scope.ChosenMember.id=thisSearch.memberID,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM.getUnapprovedHWMs({IsApproved:"false",Event:thisSearch.eventID,Member:thisSearch.memberID,State:thisSearch.stateID},function(response){$scope.unApprovedHWMs=response,$scope.showHWMbox=!0},function(errorResponse){alert("Error: "+errorResponse.statusText)}),DATA_FILE.getUnapprovedDFs({IsApproved:"false",Event:thisSearch.eventID,Processor:thisSearch.memberID,State:thisSearch.stateID},function(response1){var DFs=response1;angular.forEach(DFs,function(df){var thisdfInst=$scope.allInstruments.filter(function(i){return i.instrument_id==df.instrument_id})[0],formattedDF={},siteID=thisdfInst.site_id;formattedDF.SiteId=siteID,formattedDF.senType=$scope.allSensorTypes.filter(function(s){return s.sensor_type_id==thisdfInst.sensor_type_id})[0].sensor;var depType=$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==thisdfInst.deployment_type_id})[0];formattedDF.depType=void 0!==depType?depType.method:void 0,formattedDF.InstrID=thisdfInst.instrument_id,SITE.query({id:siteID}).$promise.then(function(response2){formattedDF.SiteNo=response2.site_no,$scope.unApprovedDFs.push(formattedDF)})}),$scope.showDFbox=!0},function(errorResponse1){alert("Error: "+errorResponse1.statusText)})}$scope.search=function(){$scope.unApprovedHWMs=[],$scope.showHWMbox=!1,$scope.unApprovedDFs=[],$scope.showDFbox=!1;var evID=null!==$cookies.get("SessionEventID")&&void 0!==$cookies.get("SessionEventID")?$cookies.get("SessionEventID"):0,sID=void 0!==$scope.ChosenState.id?$scope.ChosenState.id:0,mID=void 0!==$scope.ChosenMember.id?$scope.ChosenMember.id:0;$rootScope.approvalSearch={eventID:evID,stateID:sID,memberID:mID},$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM.getUnapprovedHWMs({IsApproved:"false",Event:evID,Member:mID,State:sID},function(response){angular.forEach(response,function(h){SITE.query({id:h.site_id}).$promise.then(function(sresponse){h.site_no=sresponse.site_no,$scope.unApprovedHWMs.push(h)})}),$scope.showHWMbox=!0},function(errorResponse){alert("Error: "+errorResponse.statusText)}),DATA_FILE.getUnapprovedDFs({IsApproved:"false",Event:evID,Processor:mID,State:sID},function(response1){var DFs=response1;angular.forEach(DFs,function(df){var thisdfInst=$scope.allInstruments.filter(function(i){return i.instrument_id==df.instrument_id})[0],formattedDF={},siteID=thisdfInst.site_id;formattedDF.SiteId=siteID,formattedDF.senType=$scope.allSensorTypes.filter(function(s){return s.sensor_type_id==thisdfInst.sensor_type_id})[0].sensor;var depType=$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==thisdfInst.deployment_type_id})[0];formattedDF.depType=void 0!==depType?depType.method:void 0,formattedDF.InstrID=thisdfInst.instrument_id,SITE.query({id:siteID}).$promise.then(function(response2){formattedDF.SiteNo=response2.site_no,$scope.unApprovedDFs.push(formattedDF)})}),$scope.showDFbox=!0},function(errorResponse1){alert("Error: "+errorResponse1.statusText)})}}}])}(),function(){"use strict";var STNResource=angular.module("STNResource",["ngResource"]),rootURL="https://stn.wim.usgs.gov/STNServices";STNResource.factory("GEOCODE",["$resource",function($resource){return $resource(rootURL+"/Geocode/location",{},{getAddressParts:{method:"GET",params:{Latitude:"@Latitude",Longitude:"@Longitude"}}})}]),STNResource.factory("AGENCY",["$resource",function($resource){return $resource(rootURL+"/Agencies/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("CONTACT_TYPE",["$resource",function($resource){return $resource(rootURL+"/ContactTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("CONTACT",["$resource",function($resource){return $resource(rootURL+"/Contacts/:id.json",{},{query:{},getContactModel:{method:"GET",isArray:!0},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("COUNTIES",["$resource",function($resource){return $resource(rootURL+"/Counties/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("DATA_FILE",["$resource",function($resource){return $resource(rootURL+"/DataFiles/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getDFApproval:{method:"GET",cache:!1,isArray:!1,url:rootURL+"/DataFiles/:id/Approval.json"},getUnapprovedDFs:{method:"GET",isArray:!0,cache:!1},approveDF:{method:"POST",cache:!1,isArray:!1,params:{id:"@id"},url:rootURL+"/datafiles/:id/Approve.json"},approveNWISDF:{method:"POST",cache:!1,isArray:!1,params:{id:"@id"},url:rootURL+"/datafiles/:id/NWISApprove.json"},unApproveDF:{method:"DELETE",cache:!1,isArray:!1,url:rootURL+"/datafiles/:id/Unapprove.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("DEPLOYMENT_PRIORITY",["$resource",function($resource){return $resource(rootURL+"/DeploymentPriorities/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("DEPLOYMENT_TYPE",["$resource",function($resource){return $resource(rootURL+"/DeploymentTypes/:id.json",{},{query:{},getDepSensType:{method:"GET",isArray:!1,url:rootURL+"/DeploymentTypes/:id/SensorType.json"},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("EVENT",["$resource",function($resource){return $resource(rootURL+"/Events/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getEventSites:{method:"GET",isArray:!0,url:rootURL+"/Events/:id/Sites.json"},getFilteredEvents:{method:"GET",isArray:!0,url:rootURL+"/Events/FilteredEvents.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("EVENT_STATUS",["$resource",function($resource){return $resource(rootURL+"/EventStatus/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("EVENT_TYPE",["$resource",function($resource){return $resource(rootURL+"/EventTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("FILE",["$resource",function($resource){return $resource(rootURL+"/Files/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getFileItem:{method:"GET",isArray:!1,url:rootURL+"/Files/:id/Item"},update:{method:"PUT",cache:!1,isArray:!1},uploadFile:{method:"POST",url:rootURL+"/Files/bytes",headers:{"Content-Type":void 0},transformRequest:angular.identity,cache:!1,isArray:!1},downloadZip:{method:"GET",responseType:"arraybuffer",cache:!1,url:rootURL+"/Events/:eventId/EventFileItems"},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("FILE_STAMP",["$rootScope",function($rootScope){return{getStamp:function(){var stamp="?"+(new Date).getTime();return stamp},setStamp:function(){var stamp="?"+(new Date).getTime();$rootScope.$broadcast("fileStampSet",stamp)}}}]),STNResource.factory("FILE_TYPE",["$resource",function($resource){return $resource(rootURL+"/FileTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HORIZONTAL_COLL_METHODS",["$resource",function($resource){return $resource(rootURL+"/HorizontalMethods/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HORIZONTAL_DATUM",["$resource",function($resource){return $resource(rootURL+"/HorizontalDatums/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HOUSING_TYPE",["$resource",function($resource){return $resource(rootURL+"/HousingTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HWM",["$resource",function($resource){return $resource(rootURL+"/hwms/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getEventStateHWMs:{method:"GET",isArray:!0,url:rootURL+"/Events/:eventId/stateHWMs.json?State=:state"},getEventSiteHWMs:{method:"GET",isArray:!0,url:rootURL+"/Sites/:siteId/EventHWMs.json"},getFilteredHWMs:{method:"GET",isArray:!0,url:rootURL+"/HWMs/FilteredHWMs.json"},getUnapprovedHWMs:{method:"GET",isArray:!0,cache:!1},getHWMApproval:{method:"GET",cache:!1,isArray:!1,url:rootURL+"/hwms/:id/Approval.json"},approveHWM:{method:"POST",cache:!1,isArray:!1,params:{id:"@id"},url:rootURL+"/hwms/:id/Approve.json"},unApproveHWM:{method:"DELETE",cache:!1,isArray:!1,url:rootURL+"/hwms/:id/Unapprove.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HWM_Service",[function(){var allSiteHWMs=[],bulkSearch={};return{getAllSiteHWMs:function(){return allSiteHWMs},setAllSiteHWMs:function(sh){allSiteHWMs=sh},setBulkHWMSearch:function(searchTerms){bulkSearch=searchTerms},getBulkHWMSearch:function(){return bulkSearch}}}]),STNResource.factory("HWM_QUALITY",["$resource",function($resource){return $resource(rootURL+"/HWMQualities/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HWM_TYPE",["$resource",function($resource){return $resource(rootURL+"/HWMTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("INSTRUMENT",["$resource",function($resource){return $resource(rootURL+"/Instruments/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getSensorView:{method:"GET",isArray:!0,url:rootURL+"/SensorViews.json"},getstatusInstruments:{method:"GET",isArray:!0,url:rootURL+"/Instruments.json"},getFullInstrument:{method:"GET",url:rootURL+"/Instruments/:id/FullInstrument.json"},getInstrumentStatus:{method:"GET",url:rootURL+"/Instruments/:id/InstrumentStatus.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("Instrument_Service",[function(){var allSiteSensors=[];return{getAllSiteSensors:function(){return allSiteSensors},setAllSiteSensors:function(ss){allSiteSensors=ss}}}]),STNResource.factory("INSTRUMENT_STATUS",["$resource",function($resource){return $resource(rootURL+"/InstrumentStatus/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("INST_COLL_CONDITION",["$resource",function($resource){return $resource(rootURL+"/InstrCollectConditions/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("LANDOWNER_CONTACT",["$resource",function($resource){return $resource(rootURL+"/LandOwners/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("Map_Site",["SITE","$rootScope","$cookies",function(SITE,$rootScope,$cookies){var MapSiteParts=[];return{getMapSiteParts:function(){return MapSiteParts},setMapSiteParts:function(siteId){MapSiteParts=[],SITE.query({id:siteId}).$promise.then(function(response){MapSiteParts.push(response),SITE.getSitePeaks({id:siteId}).$promise.then(function(pResponse){MapSiteParts.push(pResponse),$rootScope.$broadcast("mapSiteClickResults",MapSiteParts)})})}}}]),STNResource.factory("Map_Filter",["$rootScope",function($rootScope){var filteredSites=[];return{setFilteredSites:function(sitesArray){filteredSites=sitesArray,$rootScope.$broadcast("filterSitesClick",filteredSites)}}}]),STNResource.factory("MARKER",["$resource",function($resource){return $resource(rootURL+"/Markers/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("MEMBER",["$resource",function($resource){return $resource(rootURL+"/Members/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getRoleMembers:{method:"GET",isArray:!0,url:rootURL+"/Roles/:roleId/Members.json"},getEventPeople:{method:"GET",isArray:!0,url:rootURL+"/Events/:Eventid/Members.json"},changePW:{method:"GET",isArray:!1,url:rootURL+"/Members.json"},addMember:{method:"POST",cache:!1,isArray:!1,url:rootURL+"/Members/:pass/addMember"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},deleteMember:{method:"DELETE",cache:!1,isArray:!1,url:rootURL+"/Members/:id"}})}]),STNResource.factory("NETWORK_NAME",["$resource",function($resource){return $resource(rootURL+"/NetworkNames/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("NETWORK_TYPE",["$resource",function($resource){return $resource(rootURL+"/NetworkTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("OBJECTIVE_POINT",["$resource",function($resource){return $resource(rootURL+"/ObjectivePoints/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},getOPFiles:{method:"GET",isArray:!0,url:rootURL+"/ObjectivePoints/:id/Files"},getOPControls:{method:"GET",cache:!1,isArray:!0,url:rootURL+"/ObjectivePoints/:id/OPControls.json"},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("OP_CONTROL_IDENTIFIER",["$resource",function($resource){return $resource(rootURL+"/OPControlIdentifiers/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("OP_MEASURE",["$resource",function($resource){return $resource(rootURL+"/OPMeasurements/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getInstStatOPMeasures:{method:"GET",isArray:!0,url:rootURL+"/InstrumentStatus/:instrumentStatusId/OPMeasurements"},getDatumLocationOPMeasures:{method:"GET",isArray:!0,url:rootURL+"/ObjectivePoints/:objectivePointId/OPMeasurements"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("OP_QUALITY",["$resource",function($resource){return $resource(rootURL+"/ObjectivePointQualities/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("OP_TYPE",["$resource",function($resource){return $resource(rootURL+"/OPTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("PEAK",["$resource",function($resource){return $resource(rootURL+"/PeakSummaries/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getPeakSummaryDFs:{method:"GET",isArray:!0,cache:!1,url:rootURL+"/PeakSummaries/:id/DataFiles.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("REPORT",["$resource",function($resource){return $resource(rootURL+"/ReportingMetrics/:id.json",{},{query:{},getReportByEvSt:{method:"GET",isArray:!0},getDailyReportTots:{method:"GET",url:rootURL+"/ReportingMetrics/DailyReportTotals"},getMemberReports:{method:"GET",isArray:!0,url:rootURL+"/Members/:memberId/Reports.json"},getFilteredReports:{method:"GET",isArray:!0,url:rootURL+"/ReportingMetrics/FilteredReports.json"},getReportwithContacts:{method:"GET",isArray:!0,url:rootURL+"/ReportResource/FilteredReportModel.json"},getReportsCSV:{method:"GET",url:rootURL+"/ReportingMetrics/FilteredReports.csv"},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},addReportContact:{method:"POST",cache:!1,isArray:!1,params:{ReportId:"@reportId",ContactTypeId:"@contactTypeId"},url:rootURL+"/ReportingMetrics/:reportId/AddContactType/:contactTypeId"},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("ROLE",["$resource",function($resource){
return $resource(rootURL+"/Roles/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0}})}]),STNResource.factory("SENSOR_BRAND",["$resource",function($resource){return $resource(rootURL+"/SensorBrands/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("SENSOR_TYPE",["$resource",function($resource){return $resource(rootURL+"/SensorTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getSensorDeploymentTypes:{method:"GET",isArray:!0,url:rootURL+"/SensorTypes/:id/DeploymentTypes.json"},addSensorDeploymentType:{method:"POST",cache:!1,isArray:!0,params:{sensorTypeId:"@sensorTypeId",DeploymentTypeId:"@deploymentTypeId"},url:rootURL+"/SensorTypes/:sensorTypeId/addDeploymentType"},removeSensorDeploymentType:{method:"POST",isArray:!1,params:{sensorTypeId:"@sensorTypeId",DeploymentTypeId:"@deploymentTypeId"},url:rootURL+"/SensorTypes/:sensorTypeId/removeDeploymentType"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("SITE",["$resource",function($resource){return $resource(rootURL+"/Sites/:id.json",{},{query:{},getProximitySites:{method:"GET",isArray:!0,params:{Latitude:"@latitude",Longitude:"@longitude",Buffer:"@buffer"}},getAll:{method:"GET",isArray:!0},getSearchedSite:{method:"GET",isArray:!1,url:rootURL+"/Sites/Search"},getFilteredSites:{method:"GET",isArray:!0,url:rootURL+"/Sites/FilteredSites.json"},getSiteLandOwner:{method:"GET",url:rootURL+"/Sites/:id/LandOwner.json"},getSiteNetworkTypes:{method:"GET",isArray:!0,url:rootURL+"/sites/:id/networkTypes.json"},postSiteNetworkType:{method:"POST",cache:!1,params:{siteId:"@siteId",NetworkTypeId:"@networkTypeId"},isArray:!0,url:rootURL+"/sites/:siteId/AddNetworkType"},deleteSiteNetworkType:{method:"DELETE",cache:!1,isArray:!1,url:rootURL+"/sites/:siteId/removeNetworkType?NetworkTypeId=:networkTypeId"},getSiteNetworkNames:{method:"GET",isArray:!0,url:rootURL+"/sites/:id/networkNames.json"},postSiteNetworkName:{method:"POST",cache:!1,params:{siteId:"@siteId",NetworkNameId:"@networkNameId"},isArray:!0,url:rootURL+"/sites/:siteId/AddNetworkName"},deleteSiteNetworkName:{method:"DELETE",cache:!1,isArray:!1,url:rootURL+"/sites/:siteId/removeNetworkName?NetworkNameId=:networkNameId"},getSiteHousings:{method:"GET",isArray:!0,url:rootURL+"/sites/:id/SiteHousings.json"},getSiteOPs:{method:"GET",isArray:!0,url:rootURL+"/Sites/:id/ObjectivePoints.json"},getSiteSensors:{method:"GET",isArray:!0,url:rootURL+"/Sites/:id/SiteFullInstrumentList.json"},getSiteHWMs:{method:"GET",isArray:!0,url:rootURL+"/Sites/:id/HWMs.json"},getSiteFiles:{method:"GET",isArray:!0,url:rootURL+"/Sites/:id/Files.json"},getSitePeaks:{method:"GET",isArray:!0,url:rootURL+"/Sites/:id/PeakSummaryView.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("Site_Files",["$cookies","$rootScope",function($cookies,$rootScope){var allSiteFiles=[];return{getAllSiteFiles:function(){return allSiteFiles},setAllSiteFiles:function(sf){allSiteFiles=sf,$rootScope.$broadcast("siteFilesUpdated",allSiteFiles)}}}]),STNResource.factory("STATE",["$resource",function($resource){return $resource(rootURL+"/States/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("SITE_HOUSING",["$resource",function($resource){return $resource(rootURL+"/SiteHousings/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("STATUS_TYPE",["$resource",function($resource){return $resource(rootURL+"/StatusTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("SOURCE",["$resource",function($resource){return $resource(rootURL+"/Sources/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("VERTICAL_COLL_METHOD",["$resource",function($resource){return $resource(rootURL+"/VerticalMethods/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("VERTICAL_DATUM",["$resource",function($resource){return $resource(rootURL+"/VerticalDatums/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("Login",["$resource",function($resource){return $resource(rootURL+"/login",{},{login:{method:"GET",cache:!1,isArray:!1}})}])}(),function(){"use strict";var STNBusinessServices=angular.module("STNBusinessServices",["ngCookies"]);STNBusinessServices.factory("setCreds",["$cookies",function($cookies){return function(un,pw,userName,userRole,userID){var token=un.concat(":",pw);$cookies.STNCreds=token,$cookies.STNUsername=un,$cookies.usersName=userName,$cookies.mID=userID;var roleName;switch(userRole){case 1:roleName="Admin";break;case 2:roleName="Manager";break;case 3:roleName="Field";break;case 4:roleName="Public";break;default:roleName="CitizenManager"}$cookies.usersRole=roleName}}]),STNBusinessServices.factory("setSessionEvent",["$cookies",function($cookies){return function(evId,evName){$cookies.SessionEventID=evId,$cookies.SessionEventName=evName}}]),STNBusinessServices.factory("setSessionTeam",["$cookies",function($cookies){return function(tId,tName){$cookies.SessionTeaID=tId,$cookies.SessionTeamName=tName}}]),STNBusinessServices.factory("setLoggedIn",["$cookies",function($cookies){var loggedIn=!1;return{isLoggedIn:function(){return loggedIn},changeLoggedIn:function(YesOrNo){loggedIn=YesOrNo}}}]),STNBusinessServices.factory("checkCreds",["$cookies",function($cookies){return function(){var returnVal=!1,STNCreds=$cookies.STNCreds;return void 0!==STNCreds&&""!==STNCreds&&(returnVal=!0),returnVal}}]),STNBusinessServices.factory("getCreds",["$cookies",function($cookies){return function(){var returnVal="",STNCreds=$cookies.STNCreds;return void 0!==STNCreds&&""!==STNCreds&&(returnVal=btoa(STNCreds)),returnVal}}]),STNBusinessServices.factory("getUsersNAME",["$cookies",function($cookies){return function(){var returnVal="",usesName=$cookies.usersName;return void 0!==usesName&&""!==usesName&&(returnVal=usesName),returnVal}}]),STNBusinessServices.factory("getUserID",["$cookies",function($cookies){return function(){var returnVal="",userID=$cookies.mID;return void 0!==userID&&""!==userID&&(returnVal=userID),returnVal}}]),STNBusinessServices.factory("getUsername",["$cookies",function($cookies){return function(){var returnVal="",STNUsername=$cookies.STNUsername;return void 0!==STNUsername&&""!==STNUsername&&(returnVal=STNUsername),returnVal}}]),STNBusinessServices.factory("getUserRole",["$cookies",function($cookies){return function(){var returnVal="",userRole=$cookies.usersRole;return void 0!==userRole&&""!==userRole&&(returnVal=userRole),returnVal}}]),STNBusinessServices.factory("deleteCreds",["$cookies",function($cookies){return function(){$cookies.STNCreds="",$cookies.STNUsername="",$cookies.usersName="",$cookies.usersRole=""}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("ConfirmModalCtrl",["$scope","$uibModalInstance","nameToRemove","what",function($scope,$uibModalInstance,nameToRemove,what){switch(what){case"Member":$scope.nameToRmv=nameToRemove.fname+" "+nameToRemove.lname;break;case"Event":$scope.nameToRmv=nameToRemove.event_name;break;case"Agency":$scope.nameToRmv=nameToRemove.agency_name;break;case"Contact Type":$scope.nameToRmv=nameToRemove.type;break;case"Deployment Priority":$scope.nameToRmv=nameToRemove.priority_name;break;case"Event Status":$scope.nameToRmv=nameToRemove.status;break;case"File Type":$scope.nameToRmv=nameToRemove.filetype;break;case"Horizontal Collection Method":$scope.nameToRmv=nameToRemove.hcollect_method;break;case"Horizontal Datum":$scope.nameToRmv=nameToRemove.datum_name;break;case"Housing Type":$scope.nameToRmv=nameToRemove.type_name;break;case"HWM Quality":$scope.nameToRmv=nameToRemove.hwm_quality;break;case"HWM Type":$scope.nameToRmv=nameToRemove.hwm_type;break;case"Instrument Collection Condition":$scope.nameToRmv=nameToRemove.condition;break;case"Marker":$scope.nameToRmv=nameToRemove.marker1;break;case"Network Name":$scope.nameToRmv=nameToRemove.name;break;case"Objective Point Quality":$scope.nameToRmv=nameToRemove.quality;break;case"Objective Point Type":$scope.nameToRmv=nameToRemove.op_type;break;case"Sensor Brand":$scope.nameToRmv=nameToRemove.brand_name;break;case"Deployment Type":$scope.nameToRmv=nameToRemove.method;break;case"Status Type":$scope.nameToRmv=nameToRemove.status;break;case"Sensor Type":$scope.nameToRmv=nameToRemove.sensor;break;case"Network Type":$scope.nameToRmv=nameToRemove.network_type_name;break;case"Vertical Collection Method":$scope.nameToRmv=nameToRemove.vcollect_method;break;case"Vertical Datum":$scope.nameToRmv=nameToRemove.datum_abbreviation;break;case"Objective Point":$scope.nameToRmv=nameToRemove.name;break;case"HWM":var aDate=new Date(nameToRemove.flag_date),year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=monthNames[month]+" "+day+", "+year;$scope.nameToRmv="Flagged on: "+dateWOtime;break;case"Sensor":$scope.nameToRmv=nameToRemove.deploymentType;break;case"Proposed Sensor":$scope.nameToRmv="Proposed Sensor";break;case"File":var f=void 0!==nameToRemove.name||null!==nameToRemove.name?nameToRemove.name:nameToRemove.file_date;f=null!==f||void 0!==f?f:nameToRemove.file_id,$scope.nameToRmv=f;break;case"Peak":$scope.nameToRmv=nameToRemove.peak_summary_id}$scope.what=what,$scope.ok=function(){$uibModalInstance.close(nameToRemove)},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}}])}(),!function($){function Inputmask(alias,options){return this instanceof Inputmask?("object"==typeof alias?options=alias:(options=options||{},options.alias=alias),this.el=void 0,this.opts=$.extend(!0,{},this.defaults,options),this.noMasksCache=options&&void 0!==options.definitions,this.userOptions=options||{},void resolveAlias(this.opts.alias,options,this.opts)):new Inputmask(alias,options)}function isInputEventSupported(eventName){var el=document.createElement("input"),evName="on"+eventName,isSupported=evName in el;return isSupported||(el.setAttribute(evName,"return;"),isSupported="function"==typeof el[evName]),el=null,isSupported}function isInputTypeSupported(inputType){var isSupported="text"===inputType||"tel"===inputType||"password"===inputType;if(!isSupported){var el=document.createElement("input");el.setAttribute("type",inputType),isSupported="text"===el.type,el=null}return isSupported}function resolveAlias(aliasStr,options,opts){var aliasDefinition=opts.aliases[aliasStr];return aliasDefinition?(aliasDefinition.alias&&resolveAlias(aliasDefinition.alias,void 0,opts),$.extend(!0,opts,aliasDefinition),$.extend(!0,opts,options),!0):(null===opts.mask&&(opts.mask=aliasStr),!1)}function importAttributeOptions(npt,opts,userOptions){function importOption(option,optionData){optionData=void 0!==optionData?optionData:npt.getAttribute("data-inputmask-"+option),null!==optionData&&("string"==typeof optionData&&(0===option.indexOf("on")?optionData=window[optionData]:"false"===optionData?optionData=!1:"true"===optionData&&(optionData=!0)),"mask"===option&&0===optionData.indexOf("[")?(userOptions[option]=optionData.replace(/[\s[\]]/g,"").split(","),userOptions[option][0]=userOptions[option][0].replace("'",""),userOptions[option][userOptions[option].length-1]=userOptions[option][userOptions[option].length-1].replace("'","")):userOptions[option]=optionData)}var option,dataoptions,optionData,attrOptions=npt.getAttribute("data-inputmask");attrOptions&&""!==attrOptions&&(attrOptions=attrOptions.replace(new RegExp("'","g"),'"'),dataoptions=JSON.parse("{"+attrOptions+"}"));for(option in opts){if(dataoptions){optionData=void 0;for(var p in dataoptions)if(p.toLowerCase()===option.toLowerCase()){optionData=dataoptions[p];break}}importOption(option,optionData)}if(userOptions.alias){resolveAlias(userOptions.alias,userOptions,opts);for(option in opts)importOption(option)}return $.extend(!0,opts,userOptions),opts}function generateMaskSet(opts,nocache){function analyseMask(mask){function MaskToken(isGroup,isOptional,isQuantifier,isAlternator){this.matches=[],this.isGroup=isGroup||!1,this.isOptional=isOptional||!1,this.isQuantifier=isQuantifier||!1,this.isAlternator=isAlternator||!1,this.quantifier={min:1,max:1}}function insertTestDefinition(mtoken,element,position){var maskdef=opts.definitions[element];position=void 0!==position?position:mtoken.matches.length;var prevMatch=mtoken.matches[position-1];if(maskdef&&!escaped){maskdef.placeholder=$.isFunction(maskdef.placeholder)?maskdef.placeholder(opts):maskdef.placeholder;for(var prevalidators=maskdef.prevalidator,prevalidatorsL=prevalidators?prevalidators.length:0,i=1;i<maskdef.cardinality;i++){var prevalidator=prevalidatorsL>=i?prevalidators[i-1]:[],validator=prevalidator.validator,cardinality=prevalidator.cardinality;mtoken.matches.splice(position++,0,{fn:validator?"string"==typeof validator?new RegExp(validator):new function(){this.test=validator}:new RegExp("."),cardinality:cardinality?cardinality:1,optionality:mtoken.isOptional,newBlockMarker:void 0===prevMatch||prevMatch.def!==(maskdef.definitionSymbol||element),casing:maskdef.casing,def:maskdef.definitionSymbol||element,placeholder:maskdef.placeholder,mask:element}),prevMatch=mtoken.matches[position-1]}mtoken.matches.splice(position++,0,{fn:maskdef.validator?"string"==typeof maskdef.validator?new RegExp(maskdef.validator):new function(){this.test=maskdef.validator}:new RegExp("."),cardinality:maskdef.cardinality,optionality:mtoken.isOptional,newBlockMarker:void 0===prevMatch||prevMatch.def!==(maskdef.definitionSymbol||element),casing:maskdef.casing,def:maskdef.definitionSymbol||element,placeholder:maskdef.placeholder,mask:element})}else mtoken.matches.splice(position++,0,{fn:null,cardinality:0,optionality:mtoken.isOptional,newBlockMarker:void 0===prevMatch||prevMatch.def!==element,casing:null,def:element,placeholder:void 0,mask:element}),escaped=!1}function verifyGroupMarker(lastMatch,isOpenGroup){lastMatch.isGroup&&(lastMatch.isGroup=!1,insertTestDefinition(lastMatch,opts.groupmarker.start,0),isOpenGroup!==!0&&insertTestDefinition(lastMatch,opts.groupmarker.end))}function maskCurrentToken(m,currentToken,lastMatch,extraCondition){currentToken.matches.length>0&&(void 0===extraCondition||extraCondition)&&(lastMatch=currentToken.matches[currentToken.matches.length-1],verifyGroupMarker(lastMatch)),insertTestDefinition(currentToken,m)}function defaultCase(){if(openenings.length>0){if(currentOpeningToken=openenings[openenings.length-1],maskCurrentToken(m,currentOpeningToken,lastMatch,!currentOpeningToken.isAlternator),currentOpeningToken.isAlternator){alternator=openenings.pop();for(var mndx=0;mndx<alternator.matches.length;mndx++)alternator.matches[mndx].isGroup=!1;openenings.length>0?(currentOpeningToken=openenings[openenings.length-1],currentOpeningToken.matches.push(alternator)):currentToken.matches.push(alternator)}}else maskCurrentToken(m,currentToken,lastMatch)}function reverseTokens(maskToken){function reverseStatic(st){return st===opts.optionalmarker.start?st=opts.optionalmarker.end:st===opts.optionalmarker.end?st=opts.optionalmarker.start:st===opts.groupmarker.start?st=opts.groupmarker.end:st===opts.groupmarker.end&&(st=opts.groupmarker.start),st}maskToken.matches=maskToken.matches.reverse();for(var match in maskToken.matches){var intMatch=parseInt(match);if(maskToken.matches[match].isQuantifier&&maskToken.matches[intMatch+1]&&maskToken.matches[intMatch+1].isGroup){var qt=maskToken.matches[match];maskToken.matches.splice(match,1),maskToken.matches.splice(intMatch+1,0,qt)}maskToken.matches[match]=void 0!==maskToken.matches[match].matches?reverseTokens(maskToken.matches[match]):reverseStatic(maskToken.matches[match])}return maskToken}for(var match,m,openingToken,currentOpeningToken,alternator,lastMatch,groupToken,tokenizer=/(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g,escaped=!1,currentToken=new MaskToken,openenings=[],maskTokens=[];match=tokenizer.exec(mask);)if(m=match[0],escaped)defaultCase();else switch(m.charAt(0)){case opts.escapeChar:escaped=!0;break;case opts.optionalmarker.end:case opts.groupmarker.end:if(openingToken=openenings.pop(),void 0!==openingToken)if(openenings.length>0){if(currentOpeningToken=openenings[openenings.length-1],currentOpeningToken.matches.push(openingToken),currentOpeningToken.isAlternator){alternator=openenings.pop();for(var mndx=0;mndx<alternator.matches.length;mndx++)alternator.matches[mndx].isGroup=!1;openenings.length>0?(currentOpeningToken=openenings[openenings.length-1],currentOpeningToken.matches.push(alternator)):currentToken.matches.push(alternator)}}else currentToken.matches.push(openingToken);else defaultCase();break;case opts.optionalmarker.start:openenings.push(new MaskToken(!1,!0));break;case opts.groupmarker.start:openenings.push(new MaskToken(!0));break;case opts.quantifiermarker.start:var quantifier=new MaskToken(!1,!1,!0);m=m.replace(/[{}]/g,"");var mq=m.split(","),mq0=isNaN(mq[0])?mq[0]:parseInt(mq[0]),mq1=1===mq.length?mq0:isNaN(mq[1])?mq[1]:parseInt(mq[1]);if(("*"===mq1||"+"===mq1)&&(mq0="*"===mq1?0:1),quantifier.quantifier={min:mq0,max:mq1},openenings.length>0){var matches=openenings[openenings.length-1].matches;match=matches.pop(),match.isGroup||(groupToken=new MaskToken(!0),groupToken.matches.push(match),match=groupToken),matches.push(match),matches.push(quantifier)}else match=currentToken.matches.pop(),match.isGroup||(groupToken=new MaskToken(!0),groupToken.matches.push(match),match=groupToken),currentToken.matches.push(match),currentToken.matches.push(quantifier);break;case opts.alternatormarker:openenings.length>0?(currentOpeningToken=openenings[openenings.length-1],lastMatch=currentOpeningToken.matches.pop()):lastMatch=currentToken.matches.pop(),lastMatch.isAlternator?openenings.push(lastMatch):(alternator=new MaskToken(!1,!1,!1,!0),alternator.matches.push(lastMatch),openenings.push(alternator));break;default:defaultCase()}for(;openenings.length>0;)openingToken=openenings.pop(),verifyGroupMarker(openingToken,!0),currentToken.matches.push(openingToken);return currentToken.matches.length>0&&(lastMatch=currentToken.matches[currentToken.matches.length-1],verifyGroupMarker(lastMatch),maskTokens.push(currentToken)),opts.numericInput&&reverseTokens(maskTokens[0]),maskTokens}function generateMask(mask,metadata){if(null===mask||""===mask)return void 0;if(1===mask.length&&opts.greedy===!1&&0!==opts.repeat&&(opts.placeholder=""),opts.repeat>0||"*"===opts.repeat||"+"===opts.repeat){var repeatStart="*"===opts.repeat?0:"+"===opts.repeat?1:opts.repeat;mask=opts.groupmarker.start+mask+opts.groupmarker.end+opts.quantifiermarker.start+repeatStart+","+opts.repeat+opts.quantifiermarker.end}var masksetDefinition;return void 0===Inputmask.prototype.masksCache[mask]||nocache===!0?(masksetDefinition={mask:mask,maskToken:analyseMask(mask),validPositions:{},_buffer:void 0,buffer:void 0,tests:{},metadata:metadata},nocache!==!0&&(Inputmask.prototype.masksCache[opts.numericInput?mask.split("").reverse().join(""):mask]=masksetDefinition,masksetDefinition=$.extend(!0,{},Inputmask.prototype.masksCache[opts.numericInput?mask.split("").reverse().join(""):mask]))):masksetDefinition=$.extend(!0,{},Inputmask.prototype.masksCache[opts.numericInput?mask.split("").reverse().join(""):mask]),masksetDefinition}function preProcessMask(mask){return mask=mask.toString()}var ms;if($.isFunction(opts.mask)&&(opts.mask=opts.mask(opts)),$.isArray(opts.mask)){if(opts.mask.length>1){opts.keepStatic=null===opts.keepStatic?!0:opts.keepStatic;var altMask="(";return $.each(opts.numericInput?opts.mask.reverse():opts.mask,function(ndx,msk){altMask.length>1&&(altMask+=")|("),altMask+=preProcessMask(void 0===msk.mask||$.isFunction(msk.mask)?msk:msk.mask)}),altMask+=")",generateMask(altMask,opts.mask)}opts.mask=opts.mask.pop()}return opts.mask&&(ms=void 0===opts.mask.mask||$.isFunction(opts.mask.mask)?generateMask(preProcessMask(opts.mask),opts.mask):generateMask(preProcessMask(opts.mask.mask),opts.mask)),ms}function maskScope(actionObj,maskset,opts){function getMaskTemplate(baseOnInput,minimalPos,includeInput){minimalPos=minimalPos||0;var ndxIntlzr,test,testPos,maskTemplate=[],pos=0;do{if(baseOnInput===!0&&getMaskSet().validPositions[pos]){var validPos=getMaskSet().validPositions[pos];test=validPos.match,ndxIntlzr=validPos.locator.slice(),maskTemplate.push(includeInput===!0?validPos.input:getPlaceholder(pos,test))}else testPos=getTestTemplate(pos,ndxIntlzr,pos-1),test=testPos.match,ndxIntlzr=testPos.locator.slice(),maskTemplate.push(getPlaceholder(pos,test));pos++}while((void 0===maxLength||maxLength>pos-1)&&null!==test.fn||null===test.fn&&""!==test.def||minimalPos>=pos);return maskTemplate.pop(),maskTemplate}function getMaskSet(){return maskset}function resetMaskSet(soft){var maskset=getMaskSet();maskset.buffer=void 0,maskset.tests={},soft!==!0&&(maskset._buffer=void 0,maskset.validPositions={},maskset.p=0)}function getLastValidPosition(closestTo,strict){var maskset=getMaskSet(),lastValidPosition=-1,valids=maskset.validPositions;void 0===closestTo&&(closestTo=-1);var before=lastValidPosition,after=lastValidPosition;for(var posNdx in valids){var psNdx=parseInt(posNdx);valids[psNdx]&&(strict||null!==valids[psNdx].match.fn)&&(closestTo>=psNdx&&(before=psNdx),psNdx>=closestTo&&(after=psNdx))}return lastValidPosition=-1!==before&&closestTo-before>1||closestTo>after?before:after}function setValidPosition(pos,validTest,fromSetValid){if(opts.insertMode&&void 0!==getMaskSet().validPositions[pos]&&void 0===fromSetValid){var i,positionsClone=$.extend(!0,{},getMaskSet().validPositions),lvp=getLastValidPosition();for(i=pos;lvp>=i;i++)delete getMaskSet().validPositions[i];getMaskSet().validPositions[pos]=validTest;var j,valid=!0,vps=getMaskSet().validPositions;for(i=j=pos;lvp>=i;i++){var t=positionsClone[i];if(void 0!==t)for(var posMatch=j,prevPosMatch=-1;posMatch<getMaskLength()&&(null==t.match.fn&&vps[i]&&(vps[i].match.optionalQuantifier===!0||vps[i].match.optionality===!0)||null!=t.match.fn);){if(null===t.match.fn||!opts.keepStatic&&vps[i]&&(void 0!==vps[i+1]&&getTests(i+1,vps[i].locator.slice(),i).length>1||void 0!==vps[i].alternation)?posMatch++:posMatch=seekNext(j),positionCanMatchDefinition(posMatch,t.match.def)){valid=isValid(posMatch,t.input,!0,!0)!==!1,j=posMatch;break}if(valid=null==t.match.fn,prevPosMatch===posMatch)break;prevPosMatch=posMatch}if(!valid)break}if(!valid)return getMaskSet().validPositions=$.extend(!0,{},positionsClone),resetMaskSet(!0),!1}else getMaskSet().validPositions[pos]=validTest;return resetMaskSet(!0),!0}function stripValidPositions(start,end,nocheck,strict){var i,startPos=start;for(getMaskSet().p=start,i=startPos;end>i;i++)void 0!==getMaskSet().validPositions[i]&&(nocheck===!0||opts.canClearPosition(getMaskSet(),i,getLastValidPosition(),strict,opts)!==!1)&&delete getMaskSet().validPositions[i];for(i=startPos+1;i<=getLastValidPosition();){for(;void 0!==getMaskSet().validPositions[startPos];)startPos++;var s=getMaskSet().validPositions[startPos];if(startPos>i&&(i=startPos+1),void 0===getMaskSet().validPositions[i]&&isMask(i)||void 0!==s)i++;else{var t=getTestTemplate(i);positionCanMatchDefinition(startPos,t.match.def)?isValid(startPos,t.input||getPlaceholder(i),!0)!==!1&&(delete getMaskSet().validPositions[i],i++):isMask(i)||(i++,startPos--),startPos++}}var lvp=getLastValidPosition(),ml=getMaskLength();for(strict!==!0&&nocheck!==!0&&void 0!==getMaskSet().validPositions[lvp]&&getMaskSet().validPositions[lvp].input===opts.radixPoint&&delete getMaskSet().validPositions[lvp],i=lvp+1;ml>=i;i++)getMaskSet().validPositions[i]&&delete getMaskSet().validPositions[i];resetMaskSet(!0)}function getTestTemplate(pos,ndxIntlzr,tstPs){var testPos=getMaskSet().validPositions[pos];if(void 0===testPos)for(var testPositions=getTests(pos,ndxIntlzr,tstPs),lvp=getLastValidPosition(),lvTest=getMaskSet().validPositions[lvp]||getTests(0)[0],lvTestAltArr=void 0!==lvTest.alternation?lvTest.locator[lvTest.alternation].toString().split(","):[],ndx=0;ndx<testPositions.length&&(testPos=testPositions[ndx],!(testPos.match&&(opts.greedy&&testPos.match.optionalQuantifier!==!0||(testPos.match.optionality===!1||testPos.match.newBlockMarker===!1)&&testPos.match.optionalQuantifier!==!0)&&(void 0===lvTest.alternation||lvTest.alternation!==testPos.alternation||void 0!==testPos.locator[lvTest.alternation]&&checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(","),lvTestAltArr))));ndx++);return testPos}function getTest(pos){return getMaskSet().validPositions[pos]?getMaskSet().validPositions[pos].match:getTests(pos)[0].match}function positionCanMatchDefinition(pos,def){for(var valid=!1,tests=getTests(pos),tndx=0;tndx<tests.length;tndx++)if(tests[tndx].match&&tests[tndx].match.def===def){valid=!0;break}return valid}function getTests(pos,ndxIntlzr,tstPs,cacheable){function resolveTestFromToken(maskToken,ndxInitializer,loopNdx,quantifierRecurse){function handleMatch(match,loopNdx,quantifierRecurse){if(testPos>1e4)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+getMaskSet().mask;if(testPos===pos&&void 0===match.matches)return matches.push({match:match,locator:loopNdx.reverse()}),!0;if(void 0!==match.matches){if(match.isGroup&&quantifierRecurse!==match){if(match=handleMatch(maskToken.matches[$.inArray(match,maskToken.matches)+1],loopNdx))return!0}else if(match.isOptional){var optionalToken=match;if(match=resolveTestFromToken(match,ndxInitializer,loopNdx,quantifierRecurse)){if(latestMatch=matches[matches.length-1].match,isFirstMatch=0===$.inArray(latestMatch,optionalToken.matches),!isFirstMatch)return!0;insertStop=!0,testPos=pos}}else if(match.isAlternator){var maltMatches,alternateToken=match,malternateMatches=[],currentMatches=matches.slice(),loopNdxCnt=loopNdx.length,altIndex=ndxInitializer.length>0?ndxInitializer.shift():-1;if(-1===altIndex||"string"==typeof altIndex){var currentPos=testPos,ndxInitializerClone=ndxInitializer.slice(),altIndexArr=[];"string"==typeof altIndex&&(altIndexArr=altIndex.split(","));for(var amndx=0;amndx<alternateToken.matches.length;amndx++){if(matches=[],match=handleMatch(alternateToken.matches[amndx],[amndx].concat(loopNdx),quantifierRecurse)||match,match!==!0&&void 0!==match&&altIndexArr[altIndexArr.length-1]<alternateToken.matches.length){var ntndx=maskToken.matches.indexOf(match)+1;maskToken.matches.length>ntndx&&(match=handleMatch(maskToken.matches[ntndx],[ntndx].concat(loopNdx.slice(1,loopNdx.length)),quantifierRecurse),match&&(altIndexArr.push(ntndx.toString()),$.each(matches,function(ndx,lmnt){lmnt.alternation=loopNdx.length-1})))}maltMatches=matches.slice(),testPos=currentPos,matches=[];for(var i=0;i<ndxInitializerClone.length;i++)ndxInitializer[i]=ndxInitializerClone[i];for(var ndx1=0;ndx1<maltMatches.length;ndx1++){var altMatch=maltMatches[ndx1];altMatch.alternation=altMatch.alternation||loopNdxCnt;for(var ndx2=0;ndx2<malternateMatches.length;ndx2++){var altMatch2=malternateMatches[ndx2];if(altMatch.match.mask===altMatch2.match.mask&&("string"!=typeof altIndex||-1!==$.inArray(altMatch.locator[altMatch.alternation].toString(),altIndexArr))){maltMatches.splice(ndx1,1),ndx1--,altMatch2.locator[altMatch.alternation]=altMatch2.locator[altMatch.alternation]+","+altMatch.locator[altMatch.alternation],altMatch2.alternation=altMatch.alternation;break}}}malternateMatches=malternateMatches.concat(maltMatches)}"string"==typeof altIndex&&(malternateMatches=$.map(malternateMatches,function(lmnt,ndx){if(isFinite(ndx)){var mamatch,alternation=lmnt.alternation,altLocArr=lmnt.locator[alternation].toString().split(",");lmnt.locator[alternation]=void 0,lmnt.alternation=void 0;for(var alndx=0;alndx<altLocArr.length;alndx++)mamatch=-1!==$.inArray(altLocArr[alndx],altIndexArr),mamatch&&(void 0!==lmnt.locator[alternation]?(lmnt.locator[alternation]+=",",lmnt.locator[alternation]+=altLocArr[alndx]):lmnt.locator[alternation]=parseInt(altLocArr[alndx]),lmnt.alternation=alternation);if(void 0!==lmnt.locator[alternation])return lmnt}})),matches=currentMatches.concat(malternateMatches),testPos=pos,insertStop=matches.length>0}else match=alternateToken.matches[altIndex]?handleMatch(alternateToken.matches[altIndex],[altIndex].concat(loopNdx),quantifierRecurse):!1;if(match)return!0}else if(match.isQuantifier&&quantifierRecurse!==maskToken.matches[$.inArray(match,maskToken.matches)-1])for(var qt=match,qndx=ndxInitializer.length>0?ndxInitializer.shift():0;qndx<(isNaN(qt.quantifier.max)?qndx+1:qt.quantifier.max)&&pos>=testPos;qndx++){var tokenGroup=maskToken.matches[$.inArray(qt,maskToken.matches)-1];if(match=handleMatch(tokenGroup,[qndx].concat(loopNdx),tokenGroup)){if(latestMatch=matches[matches.length-1].match,latestMatch.optionalQuantifier=qndx>qt.quantifier.min-1,isFirstMatch=0===$.inArray(latestMatch,tokenGroup.matches)){if(qndx>qt.quantifier.min-1){insertStop=!0,testPos=pos;break}return!0}return!0}}else if(match=resolveTestFromToken(match,ndxInitializer,loopNdx,quantifierRecurse))return!0}else testPos++}for(var tndx=ndxInitializer.length>0?ndxInitializer.shift():0;tndx<maskToken.matches.length;tndx++)if(maskToken.matches[tndx].isQuantifier!==!0){var match=handleMatch(maskToken.matches[tndx],[tndx].concat(loopNdx),quantifierRecurse);if(match&&testPos===pos)return match;if(testPos>pos)break}}var latestMatch,isFirstMatch,maskTokens=getMaskSet().maskToken,testPos=ndxIntlzr?tstPs:0,ndxInitializer=ndxIntlzr||[0],matches=[],insertStop=!1;if(cacheable===!0&&getMaskSet().tests[pos])return getMaskSet().tests[pos];if(void 0===ndxIntlzr){for(var test,previousPos=pos-1;void 0===(test=getMaskSet().validPositions[previousPos])&&previousPos>-1&&(!getMaskSet().tests[previousPos]||void 0===(test=getMaskSet().tests[previousPos][0]));)previousPos--;void 0!==test&&previousPos>-1&&(testPos=previousPos,ndxInitializer=test.locator.slice())}for(var mtndx=ndxInitializer.shift();mtndx<maskTokens.length;mtndx++){var match=resolveTestFromToken(maskTokens[mtndx],ndxInitializer,[mtndx]);if(match&&testPos===pos||testPos>pos)break}return(0===matches.length||insertStop)&&matches.push({match:{fn:null,cardinality:0,optionality:!0,casing:null,def:""},locator:[]}),getMaskSet().tests[pos]=$.extend(!0,[],matches),getMaskSet().tests[pos]}function getBufferTemplate(){return void 0===getMaskSet()._buffer&&(getMaskSet()._buffer=getMaskTemplate(!1,1)),getMaskSet()._buffer}function getBuffer(noCache){return(void 0===getMaskSet().buffer||noCache===!0)&&(noCache===!0&&(getMaskSet().test={}),getMaskSet().buffer=getMaskTemplate(!0,getLastValidPosition(),!0)),getMaskSet().buffer}function refreshFromBuffer(start,end,buffer){var i;if(buffer=buffer,start===!0)resetMaskSet(),start=0,end=buffer.length;else for(i=start;end>i;i++)delete getMaskSet().validPositions[i],delete getMaskSet().tests[i];for(i=start;end>i;i++)resetMaskSet(!0),buffer[i]!==opts.skipOptionalPartCharacter&&isValid(i,buffer[i],!0,!0);

}function casing(elem,test){switch(test.casing){case"upper":elem=elem.toUpperCase();break;case"lower":elem=elem.toLowerCase()}return elem}function checkAlternationMatch(altArr1,altArr2){for(var altArrC=opts.greedy?altArr2:altArr2.slice(0,1),isMatch=!1,alndx=0;alndx<altArr1.length;alndx++)if(-1!==$.inArray(altArr1[alndx],altArrC)){isMatch=!0;break}return isMatch}function isValid(pos,c,strict,fromSetValid){function _isValid(position,c,strict,fromSetValid){var rslt=!1;return $.each(getTests(position),function(ndx,tst){for(var test=tst.match,loopend=c?1:0,chrs="",i=test.cardinality;i>loopend;i--)chrs+=getBufferElement(position-(i-1));if(c&&(chrs+=c),getBuffer(!0),rslt=null!=test.fn?test.fn.test(chrs,getMaskSet(),position,strict,opts):c!==test.def&&c!==opts.skipOptionalPartCharacter||""===test.def?!1:{c:test.def,pos:position},rslt!==!1){var elem=void 0!==rslt.c?rslt.c:c;elem=elem===opts.skipOptionalPartCharacter&&null===test.fn?test.def:elem;var validatedPos=position,possibleModifiedBuffer=getBuffer();if(void 0!==rslt.remove&&($.isArray(rslt.remove)||(rslt.remove=[rslt.remove]),$.each(rslt.remove.sort(function(a,b){return b-a}),function(ndx,lmnt){stripValidPositions(lmnt,lmnt+1,!0)})),void 0!==rslt.insert&&($.isArray(rslt.insert)||(rslt.insert=[rslt.insert]),$.each(rslt.insert.sort(function(a,b){return a-b}),function(ndx,lmnt){isValid(lmnt.pos,lmnt.c,!0)})),rslt.refreshFromBuffer){var refresh=rslt.refreshFromBuffer;if(strict=!0,refreshFromBuffer(refresh===!0?refresh:refresh.start,refresh.end,possibleModifiedBuffer),void 0===rslt.pos&&void 0===rslt.c)return rslt.pos=getLastValidPosition(),!1;if(validatedPos=void 0!==rslt.pos?rslt.pos:position,validatedPos!==position)return rslt=$.extend(rslt,isValid(validatedPos,elem,!0)),!1}else if(rslt!==!0&&void 0!==rslt.pos&&rslt.pos!==position&&(validatedPos=rslt.pos,refreshFromBuffer(position,validatedPos,getBuffer().slice()),validatedPos!==position))return rslt=$.extend(rslt,isValid(validatedPos,elem,!0)),!1;return rslt!==!0&&void 0===rslt.pos&&void 0===rslt.c?!1:(ndx>0&&resetMaskSet(!0),setValidPosition(validatedPos,$.extend({},tst,{input:casing(elem,test)}),fromSetValid)||(rslt=!1),!1)}}),rslt}function alternate(pos,c,strict,fromSetValid){for(var lastAlt,alternation,isValidRslt,altPos,i,validPos,validPsClone=$.extend(!0,{},getMaskSet().validPositions),lAlt=getLastValidPosition();lAlt>=0&&(altPos=getMaskSet().validPositions[lAlt],!altPos||void 0===altPos.alternation||(lastAlt=lAlt,alternation=getMaskSet().validPositions[lastAlt].alternation,getTestTemplate(lastAlt).locator[altPos.alternation]===altPos.locator[altPos.alternation]));lAlt--);if(void 0!==alternation){lastAlt=parseInt(lastAlt);for(var decisionPos in getMaskSet().validPositions)if(decisionPos=parseInt(decisionPos),altPos=getMaskSet().validPositions[decisionPos],decisionPos>=lastAlt&&void 0!==altPos.alternation){var altNdxs=getMaskSet().validPositions[lastAlt].locator[alternation].toString().split(","),decisionTaker=altPos.locator[alternation]||altNdxs[0];decisionTaker.length>0&&(decisionTaker=decisionTaker.split(",")[0]);for(var mndx=0;mndx<altNdxs.length;mndx++)if(decisionTaker<altNdxs[mndx]){for(var possibilityPos,possibilities,dp=decisionPos;dp>=0;dp--)if(possibilityPos=getMaskSet().validPositions[dp],void 0!==possibilityPos){possibilities=possibilityPos.locator[alternation],possibilityPos.locator[alternation]=parseInt(altNdxs[mndx]);break}if(decisionTaker!==possibilityPos.locator[alternation]){var validInputs=[],staticInputsBeforePos=0;for(i=decisionPos+1;i<getLastValidPosition()+1;i++)validPos=getMaskSet().validPositions[i],validPos&&(null!=validPos.match.fn?validInputs.push(validPos.input):pos>i&&staticInputsBeforePos++),delete getMaskSet().validPositions[i],delete getMaskSet().tests[i];for(resetMaskSet(!0),opts.keepStatic=!opts.keepStatic,isValidRslt=!0;validInputs.length>0;){var input=validInputs.shift();if(input!==opts.skipOptionalPartCharacter&&!(isValidRslt=isValid(getLastValidPosition()+1,input,!1,!0)))break}if(possibilityPos.alternation=alternation,possibilityPos.locator[alternation]=possibilities,isValidRslt){var targetLvp=getLastValidPosition(pos)+1,staticInputsBeforePosAlternate=0;for(i=decisionPos+1;i<getLastValidPosition()+1;i++)validPos=getMaskSet().validPositions[i],validPos&&null==validPos.match.fn&&pos>i&&staticInputsBeforePosAlternate++;pos+=staticInputsBeforePosAlternate-staticInputsBeforePos,isValidRslt=isValid(pos>targetLvp?targetLvp:pos,c,strict,fromSetValid)}if(opts.keepStatic=!opts.keepStatic,isValidRslt)return isValidRslt;resetMaskSet(),getMaskSet().validPositions=$.extend(!0,{},validPsClone)}}break}}return!1}function trackbackAlternations(originalPos,newPos){for(var vp=getMaskSet().validPositions[newPos],targetLocator=vp.locator,tll=targetLocator.length,ps=originalPos;newPos>ps;ps++)if(!isMask(ps)){var tests=getTests(ps),bestMatch=tests[0],equality=-1;$.each(tests,function(ndx,tst){for(var i=0;tll>i;i++)tst.locator[i]&&checkAlternationMatch(tst.locator[i].toString().split(","),targetLocator[i].toString().split(","))&&i>equality&&(equality=i,bestMatch=tst)}),setValidPosition(ps,$.extend({},bestMatch,{input:bestMatch.match.def}),!0)}}strict=strict===!0;for(var buffer=getBuffer(),pndx=pos-1;pndx>-1&&!getMaskSet().validPositions[pndx];pndx--);for(pndx++;pos>pndx;pndx++)void 0===getMaskSet().validPositions[pndx]&&((!isMask(pndx)||buffer[pndx]!==getPlaceholder(pndx))&&getTests(pndx).length>1||buffer[pndx]===opts.radixPoint||"0"===buffer[pndx]&&$.inArray(opts.radixPoint,buffer)<pndx)&&_isValid(pndx,buffer[pndx],!0);var maskPos=pos,result=!1,positionsClone=$.extend(!0,{},getMaskSet().validPositions);if(maskPos<getMaskLength()&&(result=_isValid(maskPos,c,strict,fromSetValid),(!strict||fromSetValid)&&result===!1)){var currentPosValid=getMaskSet().validPositions[maskPos];if(!currentPosValid||null!==currentPosValid.match.fn||currentPosValid.match.def!==c&&c!==opts.skipOptionalPartCharacter){if((opts.insertMode||void 0===getMaskSet().validPositions[seekNext(maskPos)])&&!isMask(maskPos))for(var nPos=maskPos+1,snPos=seekNext(maskPos);snPos>=nPos;nPos++)if(result=_isValid(nPos,c,strict,fromSetValid),result!==!1){trackbackAlternations(maskPos,nPos),maskPos=nPos;break}}else result={caret:seekNext(maskPos)}}if(result===!1&&opts.keepStatic&&isComplete(buffer)&&(result=alternate(pos,c,strict,fromSetValid)),result===!0&&(result={pos:maskPos}),$.isFunction(opts.postValidation)&&result!==!1&&!strict){var postValidResult=opts.postValidation(getBuffer(!0),opts);if(postValidResult){if(postValidResult.refreshFromBuffer){var refresh=postValidResult.refreshFromBuffer;refreshFromBuffer(refresh===!0?refresh:refresh.start,refresh.end,postValidResult.buffer),resetMaskSet(!0),result=postValidResult}}else resetMaskSet(!0),getMaskSet().validPositions=$.extend(!0,{},positionsClone),result=!1}return result}function isMask(pos){var test=getTest(pos);if(null!=test.fn)return test.fn;if(pos>-1&&!opts.keepStatic&&void 0===getMaskSet().validPositions[pos]){for(var tests=getTests(pos),staticAlternations=!0,i=0;i<tests.length;i++)if(""!==tests[i].match.def&&(void 0===tests[i].alternation||tests[i].locator[tests[i].alternation].length>1)){staticAlternations=!1;break}return staticAlternations}return!1}function getMaskLength(){var maskLength;maxLength=void 0!==el?el.maxLength:void 0,-1===maxLength&&(maxLength=void 0);var pos,lvp=getLastValidPosition(),testPos=getMaskSet().validPositions[lvp],ndxIntlzr=void 0!==testPos?testPos.locator.slice():void 0;for(pos=lvp+1;void 0===testPos||null!==testPos.match.fn||null===testPos.match.fn&&""!==testPos.match.def;pos++)testPos=getTestTemplate(pos,ndxIntlzr,pos-1),ndxIntlzr=testPos.locator.slice();var lastTest=getTest(pos-1);return maskLength=""!==lastTest.def?pos:pos-1,void 0===maxLength||maxLength>maskLength?maskLength:maxLength}function seekNext(pos,newBlock){var maskL=getMaskLength();if(pos>=maskL)return maskL;for(var position=pos;++position<maskL&&(newBlock===!0&&(getTest(position).newBlockMarker!==!0||!isMask(position))||newBlock!==!0&&!isMask(position)&&(opts.nojumps!==!0||opts.nojumpsThreshold>position)););return position}function seekPrevious(pos,newBlock){var position=pos;if(0>=position)return 0;for(;--position>0&&(newBlock===!0&&getTest(position).newBlockMarker!==!0||newBlock!==!0&&!isMask(position)););return position}function getBufferElement(position){return void 0===getMaskSet().validPositions[position]?getPlaceholder(position):getMaskSet().validPositions[position].input}function writeBuffer(input,buffer,caretPos,event,triggerInputEvent){if(event&&$.isFunction(opts.onBeforeWrite)){var result=opts.onBeforeWrite.call(input,event,buffer,caretPos,opts);if(result){if(result.refreshFromBuffer){var refresh=result.refreshFromBuffer;refreshFromBuffer(refresh===!0?refresh:refresh.start,refresh.end,result.buffer||buffer),buffer=getBuffer(!0)}void 0!==caretPos&&(caretPos=void 0!==result.caret?result.caret:caretPos)}}input.inputmask._valueSet(buffer.join("")),void 0===caretPos||void 0!==event&&"blur"===event.type||caret(input,caretPos),triggerInputEvent===!0&&(skipInputEvent=!0,$(input).trigger("input"))}function getPlaceholder(pos,test){if(test=test||getTest(pos),void 0!==test.placeholder)return test.placeholder;if(null===test.fn){if(pos>-1&&!opts.keepStatic&&void 0===getMaskSet().validPositions[pos]){for(var prevTest,tests=getTests(pos),hasAlternations=!1,i=0;i<tests.length;i++){if(prevTest&&""!==tests[i].match.def&&tests[i].match.def!==prevTest.match.def&&(void 0===tests[i].alternation||tests[i].alternation===prevTest.alternation)){hasAlternations=!0;break}tests[i].match.optionality!==!0&&tests[i].match.optionalQuantifier!==!0&&(prevTest=tests[i])}if(hasAlternations)return opts.placeholder.charAt(pos%opts.placeholder.length)}return test.def}return opts.placeholder.charAt(pos%opts.placeholder.length)}function checkVal(input,writeOut,strict,nptvl){function isTemplateMatch(){var isMatch=!1,charCodeNdx=getBufferTemplate().slice(initialNdx,seekNext(initialNdx)).join("").indexOf(charCodes);if(-1!==charCodeNdx&&!isMask(initialNdx)){isMatch=!0;for(var bufferTemplateArr=getBufferTemplate().slice(initialNdx,initialNdx+charCodeNdx),i=0;i<bufferTemplateArr.length;i++)if(" "!==bufferTemplateArr[i]){isMatch=!1;break}}return isMatch}var inputValue=nptvl.slice(),charCodes="",initialNdx=0;if(resetMaskSet(),getMaskSet().p=seekNext(-1),!strict)if(opts.autoUnmask!==!0){var staticInput=getBufferTemplate().slice(0,seekNext(-1)).join(""),matches=inputValue.join("").match(new RegExp("^"+Inputmask.escapeRegex(staticInput),"g"));matches&&matches.length>0&&(inputValue.splice(0,matches.length*staticInput.length),initialNdx=seekNext(initialNdx))}else initialNdx=seekNext(initialNdx);$.each(inputValue,function(ndx,charCode){var keypress=$.Event("keypress");keypress.which=charCode.charCodeAt(0),charCodes+=charCode;var lvp=getLastValidPosition(void 0,!0),lvTest=getMaskSet().validPositions[lvp],nextTest=getTestTemplate(lvp+1,lvTest?lvTest.locator.slice():void 0,lvp);if(!isTemplateMatch()||strict||opts.autoUnmask){var pos=strict?ndx:null==nextTest.match.fn&&nextTest.match.optionality&&lvp+1<getMaskSet().p?lvp+1:getMaskSet().p;keypressEvent.call(input,keypress,!0,!1,strict,pos),initialNdx=pos+1,charCodes=""}else keypressEvent.call(input,keypress,!0,!1,!0,lvp+1)}),writeOut&&writeBuffer(input,getBuffer(),document.activeElement===input?seekNext(getLastValidPosition(0)):void 0,$.Event("checkval"))}function unmaskedvalue(input){if(input&&void 0===input.inputmask)return input.value;var umValue=[],vps=getMaskSet().validPositions;for(var pndx in vps)vps[pndx].match&&null!=vps[pndx].match.fn&&umValue.push(vps[pndx].input);var unmaskedValue=0===umValue.length?null:(isRTL?umValue.reverse():umValue).join("");if(null!==unmaskedValue){var bufferValue=(isRTL?getBuffer().slice().reverse():getBuffer()).join("");$.isFunction(opts.onUnMask)&&(unmaskedValue=opts.onUnMask.call(input,bufferValue,unmaskedValue,opts)||unmaskedValue)}return unmaskedValue}function caret(input,begin,end){function translatePosition(pos){if(isRTL&&"number"==typeof pos&&(!opts.greedy||""!==opts.placeholder)){var bffrLght=getBuffer().join("").length;pos=bffrLght-pos}return pos}var range;if("number"!=typeof begin)return input.setSelectionRange?(begin=input.selectionStart,end=input.selectionEnd):window.getSelection?(range=window.getSelection().getRangeAt(0),(range.commonAncestorContainer.parentNode===input||range.commonAncestorContainer===input)&&(begin=range.startOffset,end=range.endOffset)):document.selection&&document.selection.createRange&&(range=document.selection.createRange(),begin=0-range.duplicate().moveStart("character",-1e5),end=begin+range.text.length),{begin:translatePosition(begin),end:translatePosition(end)};begin=translatePosition(begin),end=translatePosition(end),end="number"==typeof end?end:begin;var scrollCalc=parseInt(((input.ownerDocument.defaultView||window).getComputedStyle?(input.ownerDocument.defaultView||window).getComputedStyle(input,null):input.currentStyle).fontSize)*end;if(input.scrollLeft=scrollCalc>input.scrollWidth?scrollCalc:0,androidchrome||opts.insertMode!==!1||begin!==end||end++,input.setSelectionRange)input.selectionStart=begin,input.selectionEnd=end;else if(window.getSelection){if(range=document.createRange(),void 0===input.firstChild){var textNode=document.createTextNode("");input.appendChild(textNode)}range.setStart(input.firstChild,begin<input.inputmask._valueGet().length?begin:input.inputmask._valueGet().length),range.setEnd(input.firstChild,end<input.inputmask._valueGet().length?end:input.inputmask._valueGet().length),range.collapse(!0);var sel=window.getSelection();sel.removeAllRanges(),sel.addRange(range)}else input.createTextRange&&(range=input.createTextRange(),range.collapse(!0),range.moveEnd("character",end),range.moveStart("character",begin),range.select())}function determineLastRequiredPosition(returnDefinition){var pos,testPos,buffer=getBuffer(),bl=buffer.length,lvp=getLastValidPosition(),positions={},lvTest=getMaskSet().validPositions[lvp],ndxIntlzr=void 0!==lvTest?lvTest.locator.slice():void 0;for(pos=lvp+1;pos<buffer.length;pos++)testPos=getTestTemplate(pos,ndxIntlzr,pos-1),ndxIntlzr=testPos.locator.slice(),positions[pos]=$.extend(!0,{},testPos);var lvTestAlt=lvTest&&void 0!==lvTest.alternation?lvTest.locator[lvTest.alternation]:void 0;for(pos=bl-1;pos>lvp&&(testPos=positions[pos],(testPos.match.optionality||testPos.match.optionalQuantifier||lvTestAlt&&(lvTestAlt!==positions[pos].locator[lvTest.alternation]&&null!=testPos.match.fn||null===testPos.match.fn&&testPos.locator[lvTest.alternation]&&checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(","),lvTestAlt.toString().split(","))&&""!==getTests(pos)[0].def))&&buffer[pos]===getPlaceholder(pos,testPos.match));pos--)bl--;return returnDefinition?{l:bl,def:positions[bl]?positions[bl].match:void 0}:bl}function clearOptionalTail(buffer){for(var rl=determineLastRequiredPosition(),lmib=buffer.length-1;lmib>rl&&!isMask(lmib);lmib--);return buffer.splice(rl,lmib+1-rl),buffer}function isComplete(buffer){if($.isFunction(opts.isComplete))return opts.isComplete.call(el,buffer,opts);if("*"===opts.repeat)return void 0;var complete=!1,lrp=determineLastRequiredPosition(!0),aml=seekPrevious(lrp.l);if(void 0===lrp.def||lrp.def.newBlockMarker||lrp.def.optionality||lrp.def.optionalQuantifier){complete=!0;for(var i=0;aml>=i;i++){var test=getTestTemplate(i).match;if(null!==test.fn&&void 0===getMaskSet().validPositions[i]&&test.optionality!==!0&&test.optionalQuantifier!==!0||null===test.fn&&buffer[i]!==getPlaceholder(i,test)){complete=!1;break}}}return complete}function isSelection(begin,end){return isRTL?begin-end>1||begin-end===1&&opts.insertMode:end-begin>1||end-begin===1&&opts.insertMode}function wrapEventRuler(eventHandler){return function(e){var inComposition=!1,keydownPressed=!1;if(void 0===this.inputmask){var imOpts=$.data(this,"_inputmask_opts");imOpts?new Inputmask(imOpts).mask(this):$(this).off(".inputmask")}else{if("setvalue"===e.type||!(this.disabled||this.readOnly&&!("keydown"===e.type&&e.ctrlKey&&67===e.keyCode||opts.tabThrough===!1&&e.keyCode===Inputmask.keyCode.TAB))){switch(e.type){case"input":if(skipInputEvent===!0||inComposition===!0)return skipInputEvent=!1,e.preventDefault();keydownPressed=!1;break;case"keydown":skipKeyPressEvent=!1,inComposition=!1,keydownPressed=!0;break;case"keypress":if(skipKeyPressEvent===!0)return e.preventDefault();skipKeyPressEvent=!0;break;case"compositionstart":inComposition=!0;break;case"compositionupdate":skipInputEvent=keydownPressed;break;case"compositionend":inComposition=!1,keydownPressed=!1;break;case"cut":skipInputEvent=!0}return eventHandler.apply(this,arguments)}e.preventDefault()}}}function patchValueProperty(npt){function patchValhook(type){if($.valHooks&&(void 0===$.valHooks[type]||$.valHooks[type].inputmaskpatch!==!0)){var valhookGet=$.valHooks[type]&&$.valHooks[type].get?$.valHooks[type].get:function(elem){return elem.value},valhookSet=$.valHooks[type]&&$.valHooks[type].set?$.valHooks[type].set:function(elem,value){return elem.value=value,elem};$.valHooks[type]={get:function(elem){if(elem.inputmask){if(elem.inputmask.opts.autoUnmask)return elem.inputmask.unmaskedvalue();var result=valhookGet(elem),maskset=elem.inputmask.maskset,bufferTemplate=maskset._buffer;return bufferTemplate=bufferTemplate?bufferTemplate.join(""):"",result!==bufferTemplate?result:""}return valhookGet(elem)},set:function(elem,value){var result,$elem=$(elem);return result=valhookSet(elem,value),elem.inputmask&&$elem.trigger("setvalue.inputmask"),result},inputmaskpatch:!0}}}function getter(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():valueGet.call(this)!==getBufferTemplate().join("")?document.activeElement===this&&opts.clearMaskOnLostFocus?(isRTL?clearOptionalTail(getBuffer()).reverse():clearOptionalTail(getBuffer())).join(""):valueGet.call(this):"":valueGet.call(this)}function setter(value){valueSet.call(this,value),this.inputmask&&$(this).trigger("setvalue.inputmask")}function installNativeValueSetFallback(npt){$(npt).on("mouseenter.inputmask",wrapEventRuler(function(event){var $input=$(this),input=this,value=input.inputmask._valueGet();""!==value&&value!==getBuffer().join("")&&$input.trigger("setvalue.inputmask")}))}var valueGet,valueSet;npt.inputmask.__valueGet||(Object.getOwnPropertyDescriptor&&void 0===npt.value?(valueGet=function(){return this.textContent},valueSet=function(value){this.textContent=value},Object.defineProperty(npt,"value",{get:getter,set:setter})):document.__lookupGetter__&&npt.__lookupGetter__("value")?(valueGet=npt.__lookupGetter__("value"),valueSet=npt.__lookupSetter__("value"),npt.__defineGetter__("value",getter),npt.__defineSetter__("value",setter)):(valueGet=function(){return npt.value},valueSet=function(value){npt.value=value},patchValhook(npt.type),installNativeValueSetFallback(npt)),npt.inputmask.__valueGet=valueGet,npt.inputmask._valueGet=function(overruleRTL){return isRTL&&overruleRTL!==!0?valueGet.call(this.el).split("").reverse().join(""):valueGet.call(this.el)},npt.inputmask.__valueSet=valueSet,npt.inputmask._valueSet=function(value,overruleRTL){valueSet.call(this.el,null===value||void 0===value?"":overruleRTL!==!0&&isRTL?value.split("").reverse().join(""):value)})}function handleRemove(input,k,pos,strict){function generalize(){if(opts.keepStatic){resetMaskSet(!0);var lastAlt,validInputs=[],positionsClone=$.extend(!0,{},getMaskSet().validPositions);for(lastAlt=getLastValidPosition();lastAlt>=0;lastAlt--){var validPos=getMaskSet().validPositions[lastAlt];if(validPos&&(null!=validPos.match.fn&&validInputs.push(validPos.input),delete getMaskSet().validPositions[lastAlt],void 0!==validPos.alternation&&validPos.locator[validPos.alternation]===getTestTemplate(lastAlt).locator[validPos.alternation]))break}if(lastAlt>-1)for(;validInputs.length>0;){getMaskSet().p=seekNext(getLastValidPosition());var keypress=$.Event("keypress");keypress.which=validInputs.pop().charCodeAt(0),keypressEvent.call(input,keypress,!0,!1,!1,getMaskSet().p)}else getMaskSet().validPositions=$.extend(!0,{},positionsClone)}}if((opts.numericInput||isRTL)&&(k===Inputmask.keyCode.BACKSPACE?k=Inputmask.keyCode.DELETE:k===Inputmask.keyCode.DELETE&&(k=Inputmask.keyCode.BACKSPACE),isRTL)){var pend=pos.end;pos.end=pos.begin,pos.begin=pend}k===Inputmask.keyCode.BACKSPACE&&(pos.end-pos.begin<1||opts.insertMode===!1)?(pos.begin=seekPrevious(pos.begin),void 0===getMaskSet().validPositions[pos.begin]||getMaskSet().validPositions[pos.begin].input!==opts.groupSeparator&&getMaskSet().validPositions[pos.begin].input!==opts.radixPoint||pos.begin--):k===Inputmask.keyCode.DELETE&&pos.begin===pos.end&&(pos.end=isMask(pos.end)?pos.end+1:seekNext(pos.end)+1,void 0===getMaskSet().validPositions[pos.begin]||getMaskSet().validPositions[pos.begin].input!==opts.groupSeparator&&getMaskSet().validPositions[pos.begin].input!==opts.radixPoint||pos.end++),stripValidPositions(pos.begin,pos.end,!1,strict),strict!==!0&&generalize();var lvp=getLastValidPosition(pos.begin);lvp<pos.begin?(-1===lvp&&resetMaskSet(),getMaskSet().p=seekNext(lvp)):strict!==!0&&(getMaskSet().p=pos.begin)}function keydownEvent(e){var input=this,$input=$(input),k=e.keyCode,pos=caret(input);k===Inputmask.keyCode.BACKSPACE||k===Inputmask.keyCode.DELETE||iphone&&127===k||e.ctrlKey&&88===k&&!isInputEventSupported("cut")?(e.preventDefault(),88===k&&(undoValue=getBuffer().join("")),handleRemove(input,k,pos),writeBuffer(input,getBuffer(),getMaskSet().p,e,undoValue!==getBuffer().join("")),input.inputmask._valueGet()===getBufferTemplate().join("")?$input.trigger("cleared"):isComplete(getBuffer())===!0&&$input.trigger("complete"),opts.showTooltip&&(input.title=opts.tooltip||getMaskSet().mask)):k===Inputmask.keyCode.END||k===Inputmask.keyCode.PAGE_DOWN?setTimeout(function(){var caretPos=seekNext(getLastValidPosition());opts.insertMode||caretPos!==getMaskLength()||e.shiftKey||caretPos--,caret(input,e.shiftKey?pos.begin:caretPos,caretPos)},0):k===Inputmask.keyCode.HOME&&!e.shiftKey||k===Inputmask.keyCode.PAGE_UP?caret(input,0,e.shiftKey?pos.begin:0):(opts.undoOnEscape&&k===Inputmask.keyCode.ESCAPE||90===k&&e.ctrlKey)&&e.altKey!==!0?(checkVal(input,!0,!1,undoValue.split("")),$input.trigger("click")):k!==Inputmask.keyCode.INSERT||e.shiftKey||e.ctrlKey?opts.tabThrough===!0&&k===Inputmask.keyCode.TAB?(e.shiftKey===!0?(null===getTest(pos.begin).fn&&(pos.begin=seekNext(pos.begin)),pos.end=seekPrevious(pos.begin,!0),pos.begin=seekPrevious(pos.end,!0)):(pos.begin=seekNext(pos.begin,!0),pos.end=seekNext(pos.begin,!0),pos.end<getMaskLength()&&pos.end--),pos.begin<getMaskLength()&&(e.preventDefault(),caret(input,pos.begin,pos.end))):opts.insertMode!==!1||e.shiftKey||(k===Inputmask.keyCode.RIGHT?setTimeout(function(){var caretPos=caret(input);caret(input,caretPos.begin)},0):k===Inputmask.keyCode.LEFT&&setTimeout(function(){var caretPos=caret(input);caret(input,isRTL?caretPos.begin+1:caretPos.begin-1)},0)):(opts.insertMode=!opts.insertMode,caret(input,opts.insertMode||pos.begin!==getMaskLength()?pos.begin:pos.begin-1)),opts.onKeyDown(e,getBuffer(),caret(input).begin,opts),ignorable=-1!==$.inArray(k,opts.ignorables)}function keypressEvent(e,checkval,writeOut,strict,ndx){var input=this,$input=$(input),k=e.which||e.charCode||e.keyCode;if(!(checkval===!0||e.ctrlKey&&e.altKey)&&(e.ctrlKey||e.metaKey||ignorable))return k===Inputmask.keyCode.ENTER&&undoValue!==getBuffer().join("")&&(undoValue=getBuffer().join(""),e.preventDefault(),setTimeout(function(){$input.trigger("change")},0)),!0;if(k){46===k&&e.shiftKey===!1&&","===opts.radixPoint&&(k=44);var forwardPosition,pos=checkval?{begin:ndx,end:ndx}:caret(input),c=String.fromCharCode(k),isSlctn=isSelection(pos.begin,pos.end);isSlctn&&(getMaskSet().undoPositions=$.extend(!0,{},getMaskSet().validPositions),handleRemove(input,Inputmask.keyCode.DELETE,pos,!0),pos.begin=getMaskSet().p,opts.insertMode||(opts.insertMode=!opts.insertMode,setValidPosition(pos.begin,strict),opts.insertMode=!opts.insertMode),isSlctn=!opts.multi),getMaskSet().writeOutBuffer=!0;var p=isRTL&&!isSlctn?pos.end:pos.begin,valResult=isValid(p,c,strict);if(valResult!==!1){if(valResult!==!0&&(p=void 0!==valResult.pos?valResult.pos:p,c=void 0!==valResult.c?valResult.c:c),resetMaskSet(!0),void 0!==valResult.caret)forwardPosition=valResult.caret;else{var vps=getMaskSet().validPositions;forwardPosition=!opts.keepStatic&&(void 0!==vps[p+1]&&getTests(p+1,vps[p].locator.slice(),p).length>1||void 0!==vps[p].alternation)?p+1:seekNext(p)}getMaskSet().p=forwardPosition}if(writeOut!==!1){var self=this;if(setTimeout(function(){opts.onKeyValidation.call(self,valResult,opts)},0),getMaskSet().writeOutBuffer&&valResult!==!1){var buffer=getBuffer();writeBuffer(input,buffer,checkval?void 0:opts.numericInput?seekPrevious(forwardPosition):forwardPosition,e,checkval!==!0),checkval!==!0&&setTimeout(function(){isComplete(buffer)===!0&&$input.trigger("complete")},0)}else isSlctn&&(getMaskSet().buffer=void 0,getMaskSet().validPositions=getMaskSet().undoPositions)}else isSlctn&&(getMaskSet().buffer=void 0,getMaskSet().validPositions=getMaskSet().undoPositions);if(opts.showTooltip&&(input.title=opts.tooltip||getMaskSet().mask),checkval&&$.isFunction(opts.onBeforeWrite)){var result=opts.onBeforeWrite(e,getBuffer(),forwardPosition,opts);if(result&&result.refreshFromBuffer){var refresh=result.refreshFromBuffer;refreshFromBuffer(refresh===!0?refresh:refresh.start,refresh.end,result.buffer),resetMaskSet(!0),result.caret&&(getMaskSet().p=result.caret)}}if(e.preventDefault(),checkval)return valResult}}function pasteEvent(e){var input=this,ev=e.originalEvent||e,$input=$(input),inputValue=input.inputmask._valueGet(!0),caretPos=caret(input);if("propertychange"===e.type&&input.inputmask._valueGet().length<=getMaskLength())return!0;if("paste"===e.type){var valueBeforeCaret=inputValue.substr(0,caretPos.begin),valueAfterCaret=inputValue.substr(caretPos.end,inputValue.length);valueBeforeCaret===getBufferTemplate().slice(0,caretPos.begin).join("")&&(valueBeforeCaret=""),valueAfterCaret===getBufferTemplate().slice(caretPos.end).join("")&&(valueAfterCaret=""),window.clipboardData&&window.clipboardData.getData?inputValue=valueBeforeCaret+window.clipboardData.getData("Text")+valueAfterCaret:ev.clipboardData&&ev.clipboardData.getData&&(inputValue=valueBeforeCaret+ev.clipboardData.getData("text/plain")+valueAfterCaret)}var pasteValue=inputValue;if($.isFunction(opts.onBeforePaste)){if(pasteValue=opts.onBeforePaste.call(input,inputValue,opts),pasteValue===!1)return e.preventDefault(),!1;pasteValue||(pasteValue=inputValue)}return checkVal(input,!1,!1,isRTL?pasteValue.split("").reverse():pasteValue.toString().split("")),writeBuffer(input,getBuffer(),void 0,e,!0),$input.trigger("click"),isComplete(getBuffer())===!0&&$input.trigger("complete"),!1}function inputFallBackEvent(e){var input=this;checkVal(input,!0,!1,input.inputmask._valueGet().split("")),isComplete(getBuffer())===!0&&$(input).trigger("complete"),e.preventDefault()}function mobileInputEvent(e){var input=this,caretPos=caret(input),currentValue=input._valueGet();currentValue=currentValue.replace(new RegExp("("+Inputmask.escapeRegex(getBufferTemplate().join(""))+")*"),""),caretPos.begin>currentValue.length&&(caret(input,currentValue.length),caretPos=caret(input)),getBuffer().length-currentValue.length!==1||currentValue.charAt(caretPos.begin)===getBuffer()[caretPos.begin]||currentValue.charAt(caretPos.begin+1)===getBuffer()[caretPos.begin]||isMask(caretPos.begin)?inputFallBackEvent.call(this,e):(e.keyCode=opts.keyCode.BACKSPACE,keydownEvent.call(input,e)),e.preventDefault()}function compositionStartEvent(e){var ev=e.originalEvent||e;undoValue=getBuffer().join(""),""===compositionData||0!==ev.data.indexOf(compositionData)}function compositionUpdateEvent(e){var input=this,ev=e.originalEvent||e;0===ev.data.indexOf(compositionData)&&(resetMaskSet(),getMaskSet().p=seekNext(-1),skipInputEvent=!0);for(var newData=ev.data,i=0;i<newData.length;i++){var keypress=$.Event("keypress");keypress.which=newData.charCodeAt(i),skipKeyPressEvent=!1,ignorable=!1,keypressEvent.call(input,keypress,!0,!1,!1,getMaskSet().p)}setTimeout(function(){var forwardPosition=getMaskSet().p;writeBuffer(input,getBuffer(),opts.numericInput?seekPrevious(forwardPosition):forwardPosition)},0),compositionData=ev.data}function compositionEndEvent(e){}function setValueEvent(e){var input=this,value=input.inputmask._valueGet();checkVal(input,!0,!1,($.isFunction(opts.onBeforeMask)?opts.onBeforeMask.call(input,value,opts)||value:value).split("")),undoValue=getBuffer().join(""),(opts.clearMaskOnLostFocus||opts.clearIncomplete)&&input.inputmask._valueGet()===getBufferTemplate().join("")&&input.inputmask._valueSet("")}function focusEvent(e){var input=this,nptValue=input.inputmask._valueGet();opts.showMaskOnFocus&&(!opts.showMaskOnHover||opts.showMaskOnHover&&""===nptValue)?input.inputmask._valueGet()!==getBuffer().join("")&&writeBuffer(input,getBuffer(),seekNext(getLastValidPosition())):mouseEnter===!1&&caret(input,seekNext(getLastValidPosition())),opts.positionCaretOnTab===!0&&setTimeout(function(){caret(input,seekNext(getLastValidPosition()))},0),undoValue=getBuffer().join("")}function mouseleaveEvent(e){var input=this;if(mouseEnter=!1,opts.clearMaskOnLostFocus){var buffer=getBuffer().slice(),nptValue=input.inputmask._valueGet();document.activeElement!==input&&nptValue!==input.getAttribute("placeholder")&&""!==nptValue&&(-1===getLastValidPosition()&&nptValue===getBufferTemplate().join("")?buffer=[]:clearOptionalTail(buffer),writeBuffer(input,buffer))}}function clickEvent(e){function doRadixFocus(clickPos){if(opts.radixFocus&&""!==opts.radixPoint){var vps=getMaskSet().validPositions;if(void 0===vps[clickPos]||vps[clickPos].input===getPlaceholder(clickPos)){if(clickPos<seekNext(-1))return!0;var radixPos=$.inArray(opts.radixPoint,getBuffer());if(-1!==radixPos){for(var vp in vps)if(vp>radixPos&&vps[vp].input!==getPlaceholder(vp))return!1;return!0}}}return!1}var input=this;if(document.activeElement===input){var selectedCaret=caret(input);if(selectedCaret.begin===selectedCaret.end)if(doRadixFocus(selectedCaret.begin))caret(input,$.inArray(opts.radixPoint,getBuffer()));else{var clickPosition=selectedCaret.begin,lvclickPosition=getLastValidPosition(clickPosition),lastPosition=seekNext(lvclickPosition);lastPosition>clickPosition?caret(input,isMask(clickPosition)||isMask(clickPosition-1)?clickPosition:seekNext(clickPosition)):caret(input,opts.numericInput?0:lastPosition)}}}function dblclickEvent(e){var input=this;setTimeout(function(){caret(input,0,seekNext(getLastValidPosition()))},0)}function cutEvent(e){var input=this,$input=$(input),pos=caret(input),ev=e.originalEvent||e,clipboardData=window.clipboardData||ev.clipboardData,clipData=isRTL?getBuffer().slice(pos.end,pos.begin):getBuffer().slice(pos.begin,pos.end);clipboardData.setData("text",isRTL?clipData.reverse().join(""):clipData.join("")),document.execCommand&&document.execCommand("copy"),handleRemove(input,Inputmask.keyCode.DELETE,pos),writeBuffer(input,getBuffer(),getMaskSet().p,e,undoValue!==getBuffer().join("")),input.inputmask._valueGet()===getBufferTemplate().join("")&&$input.trigger("cleared"),opts.showTooltip&&(input.title=opts.tooltip||getMaskSet().mask)}function blurEvent(e){var $input=$(this),input=this;if(input.inputmask){var nptValue=input.inputmask._valueGet(),buffer=getBuffer().slice();undoValue!==buffer.join("")&&setTimeout(function(){$input.trigger("change"),undoValue=buffer.join("")},0),""!==nptValue&&(opts.clearMaskOnLostFocus&&(-1===getLastValidPosition()&&nptValue===getBufferTemplate().join("")?buffer=[]:clearOptionalTail(buffer)),isComplete(buffer)===!1&&(setTimeout(function(){$input.trigger("incomplete")},0),opts.clearIncomplete&&(resetMaskSet(),buffer=opts.clearMaskOnLostFocus?[]:getBufferTemplate().slice())),writeBuffer(input,buffer,void 0,e))}}function mouseenterEvent(e){var input=this;mouseEnter=!0,document.activeElement!==input&&opts.showMaskOnHover&&input.inputmask._valueGet()!==getBuffer().join("")&&writeBuffer(input,getBuffer());

}function mask(elem){if(el=elem,$el=$(el),opts.showTooltip&&(el.title=opts.tooltip||getMaskSet().mask),("rtl"===el.dir||opts.rightAlign)&&(el.style.textAlign="right"),("rtl"===el.dir||opts.numericInput)&&(el.dir="ltr",el.removeAttribute("dir"),el.inputmask.isRTL=!0,isRTL=!0),$el.off(".inputmask"),patchValueProperty(el),("INPUT"===el.tagName&&isInputTypeSupported(el.getAttribute("type"))||el.isContentEditable)&&($(el.form).on("submit",function(){undoValue!==getBuffer().join("")&&$el.trigger("change"),opts.clearMaskOnLostFocus&&-1===getLastValidPosition()&&el.inputmask._valueGet&&el.inputmask._valueGet()===getBufferTemplate().join("")&&el.inputmask._valueSet(""),opts.removeMaskOnSubmit&&(el.inputmask._valueSet(el.inputmask.unmaskedvalue(),!0),setTimeout(function(){writeBuffer(el,getBuffer())},0))}).on("reset",function(){setTimeout(function(){$el.trigger("setvalue.inputmask")},0)}),$el.on("mouseenter.inputmask",wrapEventRuler(mouseenterEvent)).on("blur.inputmask",wrapEventRuler(blurEvent)).on("focus.inputmask",wrapEventRuler(focusEvent)).on("mouseleave.inputmask",wrapEventRuler(mouseleaveEvent)).on("click.inputmask",wrapEventRuler(clickEvent)).on("dblclick.inputmask",wrapEventRuler(dblclickEvent)).on(PasteEventType+".inputmask dragdrop.inputmask drop.inputmask",wrapEventRuler(pasteEvent)).on("cut.inputmask",wrapEventRuler(cutEvent)).on("complete.inputmask",wrapEventRuler(opts.oncomplete)).on("incomplete.inputmask",wrapEventRuler(opts.onincomplete)).on("cleared.inputmask",wrapEventRuler(opts.oncleared)).on("keydown.inputmask",wrapEventRuler(keydownEvent)).on("keypress.inputmask",wrapEventRuler(keypressEvent)),androidfirefox||$el.on("compositionstart.inputmask",wrapEventRuler(compositionStartEvent)).on("compositionupdate.inputmask",wrapEventRuler(compositionUpdateEvent)).on("compositionend.inputmask",wrapEventRuler(compositionEndEvent)),"paste"===PasteEventType&&$el.on("input.inputmask",wrapEventRuler(inputFallBackEvent)),(android||androidfirefox||androidchrome||kindle)&&($el.off("input.inputmask"),$el.on("input.inputmask",wrapEventRuler(mobileInputEvent)))),$el.on("setvalue.inputmask",wrapEventRuler(setValueEvent)),""!==el.inputmask._valueGet()||opts.clearMaskOnLostFocus===!1){var initialValue=$.isFunction(opts.onBeforeMask)?opts.onBeforeMask.call(el,el.inputmask._valueGet(),opts)||el.inputmask._valueGet():el.inputmask._valueGet();checkVal(el,!0,!1,initialValue.split(""));var buffer=getBuffer().slice();undoValue=buffer.join(""),isComplete(buffer)===!1&&opts.clearIncomplete&&resetMaskSet(),opts.clearMaskOnLostFocus&&(buffer.join("")===getBufferTemplate().join("")?buffer=[]:clearOptionalTail(buffer)),writeBuffer(el,buffer),document.activeElement===el&&caret(el,seekNext(getLastValidPosition()))}}var undoValue,compositionData,el,$el,maxLength,valueBuffer,isRTL=!1,skipKeyPressEvent=!1,skipInputEvent=!1,ignorable=!1,mouseEnter=!0;if(void 0!==actionObj)switch(actionObj.action){case"isComplete":return el=actionObj.el,isComplete(getBuffer());case"unmaskedvalue":return el=actionObj.el,void 0!==el&&void 0!==el.inputmask?(maskset=el.inputmask.maskset,opts=el.inputmask.opts,isRTL=el.inputmask.isRTL,valueBuffer=isRTL?el.inputmask._valueGet().split("").reverse().join(""):el.inputmask._valueGet()):valueBuffer=actionObj.value,opts.numericInput&&(isRTL=!0),valueBuffer=($.isFunction(opts.onBeforeMask)?opts.onBeforeMask(valueBuffer,opts)||valueBuffer:valueBuffer).split(""),checkVal(void 0,!1,!1,isRTL?valueBuffer.reverse():valueBuffer),$.isFunction(opts.onBeforeWrite)&&opts.onBeforeWrite(void 0,getBuffer(),0,opts),unmaskedvalue(el);case"mask":el=actionObj.el,maskset=el.inputmask.maskset,opts=el.inputmask.opts,isRTL=el.inputmask.isRTL,undoValue=getBuffer().join(""),mask(el);break;case"format":return opts.numericInput&&(isRTL=!0),valueBuffer=($.isFunction(opts.onBeforeMask)?opts.onBeforeMask(actionObj.value,opts)||actionObj.value:actionObj.value).split(""),checkVal(void 0,!1,!1,isRTL?valueBuffer.reverse():valueBuffer),$.isFunction(opts.onBeforeWrite)&&opts.onBeforeWrite(void 0,getBuffer(),0,opts),actionObj.metadata?{value:isRTL?getBuffer().slice().reverse().join(""):getBuffer().join(""),metadata:maskScope({action:"getmetadata"},maskset,opts)}:isRTL?getBuffer().slice().reverse().join(""):getBuffer().join("");case"isValid":opts.numericInput&&(isRTL=!0),valueBuffer=actionObj.value.split(""),checkVal(void 0,!1,!0,isRTL?valueBuffer.reverse():valueBuffer);for(var buffer=getBuffer(),rl=determineLastRequiredPosition(),lmib=buffer.length-1;lmib>rl&&!isMask(lmib);lmib--);return buffer.splice(rl,lmib+1-rl),isComplete(buffer)&&actionObj.value===buffer.join("");case"getemptymask":return getBufferTemplate();case"remove":el=actionObj.el,$el=$(el),maskset=el.inputmask.maskset,opts=el.inputmask.opts,el.inputmask._valueSet(unmaskedvalue(el)),$el.off(".inputmask");var valueProperty;Object.getOwnPropertyDescriptor&&(valueProperty=Object.getOwnPropertyDescriptor(el,"value")),valueProperty&&valueProperty.get?el.inputmask.__valueGet&&Object.defineProperty(el,"value",{get:el.inputmask.__valueGet,set:el.inputmask.__valueSet}):document.__lookupGetter__&&el.__lookupGetter__("value")&&el.inputmask.__valueGet&&(el.__defineGetter__("value",el.inputmask.__valueGet),el.__defineSetter__("value",el.inputmask.__valueSet)),el.inputmask=void 0;break;case"getmetadata":if($.isArray(maskset.metadata)){for(var alternation,lvp=getLastValidPosition(),firstAlt=lvp;firstAlt>=0;firstAlt--)if(getMaskSet().validPositions[firstAlt]&&void 0!==getMaskSet().validPositions[firstAlt].alternation){alternation=getMaskSet().validPositions[firstAlt].alternation;break}return void 0!==alternation?maskset.metadata[getMaskSet().validPositions[lvp].locator[alternation]]:maskset.metadata[0]}return maskset.metadata}}Inputmask.prototype={defaults:{placeholder:"_",optionalmarker:{start:"[",end:"]"},quantifiermarker:{start:"{",end:"}"},groupmarker:{start:"(",end:")"},alternatormarker:"|",escapeChar:"\\",mask:null,oncomplete:$.noop,onincomplete:$.noop,oncleared:$.noop,repeat:0,greedy:!0,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,clearIncomplete:!1,aliases:{},alias:null,onKeyDown:$.noop,onBeforeMask:null,onBeforePaste:function(pastedValue,opts){return $.isFunction(opts.onBeforeMask)?opts.onBeforeMask(pastedValue,opts):pastedValue},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:$.noop,skipOptionalPartCharacter:" ",showTooltip:!1,tooltip:void 0,numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",groupSeparator:"",radixFocus:!1,nojumps:!1,nojumpsThreshold:0,keepStatic:null,positionCaretOnTab:!1,tabThrough:!1,supportsInputType:[],definitions:{9:{validator:"[0-9]",cardinality:1,definitionSymbol:"*"},a:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,definitionSymbol:"*"},"*":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",cardinality:1}},ignorables:[8,9,13,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123],isComplete:null,canClearPosition:$.noop,postValidation:null},masksCache:{},mask:function(elems){var that=this;return"string"==typeof elems&&(elems=document.querySelectorAll(elems)),elems=elems.nodeName?[elems]:elems,$.each(elems,function(ndx,el){var scopedOpts=$.extend(!0,{},that.opts);importAttributeOptions(el,scopedOpts,$.extend(!0,{},that.userOptions));var maskset=generateMaskSet(scopedOpts,that.noMasksCache);void 0!==maskset&&(void 0!==el.inputmask&&el.inputmask.remove(),el.inputmask=new Inputmask,el.inputmask.opts=scopedOpts,el.inputmask.noMasksCache=that.noMasksCache,el.inputmask.userOptions=$.extend(!0,{},that.userOptions),el.inputmask.el=el,el.inputmask.maskset=maskset,el.inputmask.isRTL=!1,$.data(el,"_inputmask_opts",scopedOpts),maskScope({action:"mask",el:el}))}),elems?elems[0].inputmask||this:this},option:function(options){return"string"==typeof options?this.opts[options]:"object"==typeof options?($.extend(this.opts,options),$.extend(this.userOptions,options),this.el&&(void 0!==options.mask||void 0!==options.alias?this.mask(this.el):($.data(this.el,"_inputmask_opts",this.opts),maskScope({action:"mask",el:this.el}))),this):void 0},unmaskedvalue:function(value){return maskScope({action:"unmaskedvalue",el:this.el,value:value},this.el&&this.el.inputmask?this.el.inputmask.maskset:generateMaskSet(this.opts,this.noMasksCache),this.opts)},remove:function(){return this.el?(maskScope({action:"remove",el:this.el}),this.el.inputmask=void 0,this.el):void 0},getemptymask:function(){return maskScope({action:"getemptymask"},this.maskset||generateMaskSet(this.opts,this.noMasksCache),this.opts)},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return maskScope({action:"isComplete",el:this.el},this.maskset||generateMaskSet(this.opts,this.noMasksCache),this.opts)},getmetadata:function(){return maskScope({action:"getmetadata"},this.maskset||generateMaskSet(this.opts,this.noMasksCache),this.opts)},isValid:function(value){return maskScope({action:"isValid",value:value},this.maskset||generateMaskSet(this.opts,this.noMasksCache),this.opts)},format:function(value,metadata){return maskScope({action:"format",value:value,metadata:metadata},this.maskset||generateMaskSet(this.opts,this.noMasksCache),this.opts)}},Inputmask.extendDefaults=function(options){$.extend(!0,Inputmask.prototype.defaults,options)},Inputmask.extendDefinitions=function(definition){$.extend(!0,Inputmask.prototype.defaults.definitions,definition)},Inputmask.extendAliases=function(alias){$.extend(!0,Inputmask.prototype.defaults.aliases,alias)},Inputmask.format=function(value,options,metadata){return Inputmask(options).format(value,metadata)},Inputmask.unmask=function(value,options){return Inputmask(options).unmaskedvalue(value)},Inputmask.isValid=function(value,options){return Inputmask(options).isValid(value)},Inputmask.remove=function(elems){$.each(elems,function(ndx,el){el.inputmask&&el.inputmask.remove()})},Inputmask.escapeRegex=function(str){var specials=["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"];return str.replace(new RegExp("(\\"+specials.join("|\\")+")","gim"),"\\$1")},Inputmask.keyCode={ALT:18,BACKSPACE:8,CAPS_LOCK:20,COMMA:188,COMMAND:91,COMMAND_LEFT:91,COMMAND_RIGHT:93,CONTROL:17,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,MENU:93,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SHIFT:16,SPACE:32,TAB:9,UP:38,WINDOWS:91};var ua=navigator.userAgent,iphone=null!==ua.match(new RegExp("iphone","i")),android=null!==ua.match(new RegExp("android.*safari.*","i")),androidchrome=null!==ua.match(new RegExp("android.*chrome.*","i")),androidfirefox=null!==ua.match(new RegExp("android.*firefox.*","i")),kindle=/Kindle/i.test(ua)||/Silk/i.test(ua)||/KFTT/i.test(ua)||/KFOT/i.test(ua)||/KFJWA/i.test(ua)||/KFJWI/i.test(ua)||/KFSOWI/i.test(ua)||/KFTHWA/i.test(ua)||/KFTHWI/i.test(ua)||/KFAPWA/i.test(ua)||/KFAPWI/i.test(ua),PasteEventType=isInputEventSupported("paste")?"paste":isInputEventSupported("input")?"input":"propertychange";return window.Inputmask=Inputmask,Inputmask}(jQuery),function($,Inputmask){return void 0===$.fn.inputmask&&($.fn.inputmask=function(fn,options){var nptmask,input;if(options=options||{},"string"==typeof fn)switch(fn){case"mask":return nptmask=new Inputmask(options),this.each(function(){nptmask.mask(this)});case"unmaskedvalue":return input=this.jquery&&this.length>0?this[0]:this,input.inputmask?input.inputmask.unmaskedvalue():$(input).val();case"remove":return this.each(function(){this.inputmask&&this.inputmask.remove()});case"getemptymask":return input=this.jquery&&this.length>0?this[0]:this,input.inputmask?input.inputmask.getemptymask():"";case"hasMaskedValue":return input=this.jquery&&this.length>0?this[0]:this,input.inputmask?input.inputmask.hasMaskedValue():!1;case"isComplete":return input=this.jquery&&this.length>0?this[0]:this,input.inputmask?input.inputmask.isComplete():!0;case"getmetadata":return input=this.jquery&&this.length>0?this[0]:this,input.inputmask?input.inputmask.getmetadata():void 0;case"setvalue":input=this.jquery&&this.length>0?this[0]:this,$(input).val(options),void 0!==input.inputmask&&$(input).triggerHandler("setvalue.inputmask");break;case"option":if("string"!=typeof options)return this.each(function(){return void 0!==this.inputmask?this.inputmask.option(options):void 0});if(input=this.jquery&&this.length>0?this[0]:this,void 0!==input.inputmask)return input.inputmask.option(options);break;default:return options.alias=fn,nptmask=new Inputmask(options),this.each(function(){nptmask.mask(this)})}else{if("object"==typeof fn)return nptmask=new Inputmask(fn),this.each(void 0===fn.mask&&void 0===fn.alias?function(){return void 0!==this.inputmask?this.inputmask.option(fn):void nptmask.mask(this)}:function(){nptmask.mask(this)});if(void 0===fn)return this.each(function(){nptmask=new Inputmask(options),nptmask.mask(this)})}}),$.fn.inputmask}(jQuery,Inputmask),function($,Inputmask){return Inputmask.extendDefinitions({h:{validator:"[01][0-9]|2[0-3]",cardinality:2,prevalidator:[{validator:"[0-2]",cardinality:1}]},s:{validator:"[0-5][0-9]",cardinality:2,prevalidator:[{validator:"[0-5]",cardinality:1}]},d:{validator:"0[1-9]|[12][0-9]|3[01]",cardinality:2,prevalidator:[{validator:"[0-3]",cardinality:1}]},m:{validator:"0[1-9]|1[012]",cardinality:2,prevalidator:[{validator:"[01]",cardinality:1}]},y:{validator:"(19|20)\\d{2}",cardinality:4,prevalidator:[{validator:"[12]",cardinality:1},{validator:"(19|20)",cardinality:2},{validator:"(19|20)\\d",cardinality:3}]}}),Inputmask.extendAliases({"dd/mm/yyyy":{mask:"1/2/y",placeholder:"dd/mm/yyyy",regex:{val1pre:new RegExp("[0-3]"),val1:new RegExp("0[1-9]|[12][0-9]|3[01]"),val2pre:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|[12][0-9]|3[01])"+escapedSeparator+"[01])")},val2:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|[12][0-9])"+escapedSeparator+"(0[1-9]|1[012]))|(30"+escapedSeparator+"(0[13-9]|1[012]))|(31"+escapedSeparator+"(0[13578]|1[02]))")}},leapday:"29/02/",separator:"/",yearrange:{minyear:1900,maxyear:2099},isInYearRange:function(chrs,minyear,maxyear){if(isNaN(chrs))return!1;var enteredyear=parseInt(chrs.concat(minyear.toString().slice(chrs.length))),enteredyear2=parseInt(chrs.concat(maxyear.toString().slice(chrs.length)));return(isNaN(enteredyear)?!1:enteredyear>=minyear&&maxyear>=enteredyear)||(isNaN(enteredyear2)?!1:enteredyear2>=minyear&&maxyear>=enteredyear2)},determinebaseyear:function(minyear,maxyear,hint){var currentyear=(new Date).getFullYear();if(minyear>currentyear)return minyear;if(currentyear>maxyear){for(var maxYearPrefix=maxyear.toString().slice(0,2),maxYearPostfix=maxyear.toString().slice(2,4);maxYearPrefix+hint>maxyear;)maxYearPrefix--;var maxxYear=maxYearPrefix+maxYearPostfix;return minyear>maxxYear?minyear:maxxYear}return currentyear},onKeyDown:function(e,buffer,caretPos,opts){var $input=$(this);if(e.ctrlKey&&e.keyCode===Inputmask.keyCode.RIGHT){var today=new Date;$input.val(today.getDate().toString()+(today.getMonth()+1).toString()+today.getFullYear().toString()),$input.trigger("setvalue.inputmask")}},getFrontValue:function(mask,buffer,opts){for(var start=0,length=0,i=0;i<mask.length&&"2"!==mask.charAt(i);i++){var definition=opts.definitions[mask.charAt(i)];definition?(start+=length,length=definition.cardinality):length++}return buffer.join("").substr(start,length)},definitions:{1:{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.regex.val1.test(chrs);return strict||isValid||chrs.charAt(1)!==opts.separator&&-1==="-./".indexOf(chrs.charAt(1))||!(isValid=opts.regex.val1.test("0"+chrs.charAt(0)))?isValid:(maskset.buffer[pos-1]="0",{refreshFromBuffer:{start:pos-1,end:pos},pos:pos,c:chrs.charAt(0)})},cardinality:2,prevalidator:[{validator:function(chrs,maskset,pos,strict,opts){var pchrs=chrs;isNaN(maskset.buffer[pos+1])||(pchrs+=maskset.buffer[pos+1]);var isValid=1===pchrs.length?opts.regex.val1pre.test(pchrs):opts.regex.val1.test(pchrs);if(!strict&&!isValid){if(isValid=opts.regex.val1.test(chrs+"0"))return maskset.buffer[pos]=chrs,maskset.buffer[++pos]="0",{pos:pos,c:"0"};if(isValid=opts.regex.val1.test("0"+chrs))return maskset.buffer[pos]="0",pos++,{pos:pos}}return isValid},cardinality:1}]},2:{validator:function(chrs,maskset,pos,strict,opts){var frontValue=opts.getFrontValue(maskset.mask,maskset.buffer,opts);-1!==frontValue.indexOf(opts.placeholder[0])&&(frontValue="01"+opts.separator);var isValid=opts.regex.val2(opts.separator).test(frontValue+chrs);if(!strict&&!isValid&&(chrs.charAt(1)===opts.separator||-1!=="-./".indexOf(chrs.charAt(1)))&&(isValid=opts.regex.val2(opts.separator).test(frontValue+"0"+chrs.charAt(0))))return maskset.buffer[pos-1]="0",{refreshFromBuffer:{start:pos-1,end:pos},pos:pos,c:chrs.charAt(0)};if(opts.mask.indexOf("2")===opts.mask.length-1&&isValid){var dayMonthValue=maskset.buffer.join("").substr(4,4)+chrs;if(dayMonthValue!==opts.leapday)return!0;var year=parseInt(maskset.buffer.join("").substr(0,4),10);return year%4===0?year%100===0?year%400===0?!0:!1:!0:!1}return isValid},cardinality:2,prevalidator:[{validator:function(chrs,maskset,pos,strict,opts){isNaN(maskset.buffer[pos+1])||(chrs+=maskset.buffer[pos+1]);var frontValue=opts.getFrontValue(maskset.mask,maskset.buffer,opts);-1!==frontValue.indexOf(opts.placeholder[0])&&(frontValue="01"+opts.separator);var isValid=1===chrs.length?opts.regex.val2pre(opts.separator).test(frontValue+chrs):opts.regex.val2(opts.separator).test(frontValue+chrs);return strict||isValid||!(isValid=opts.regex.val2(opts.separator).test(frontValue+"0"+chrs))?isValid:(maskset.buffer[pos]="0",pos++,{pos:pos})},cardinality:1}]},y:{validator:function(chrs,maskset,pos,strict,opts){if(opts.isInYearRange(chrs,opts.yearrange.minyear,opts.yearrange.maxyear)){var dayMonthValue=maskset.buffer.join("").substr(0,6);if(dayMonthValue!==opts.leapday)return!0;var year=parseInt(chrs,10);return year%4===0?year%100===0?year%400===0?!0:!1:!0:!1}return!1},cardinality:4,prevalidator:[{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.isInYearRange(chrs,opts.yearrange.minyear,opts.yearrange.maxyear);if(!strict&&!isValid){var yearPrefix=opts.determinebaseyear(opts.yearrange.minyear,opts.yearrange.maxyear,chrs+"0").toString().slice(0,1);if(isValid=opts.isInYearRange(yearPrefix+chrs,opts.yearrange.minyear,opts.yearrange.maxyear))return maskset.buffer[pos++]=yearPrefix.charAt(0),{pos:pos};if(yearPrefix=opts.determinebaseyear(opts.yearrange.minyear,opts.yearrange.maxyear,chrs+"0").toString().slice(0,2),isValid=opts.isInYearRange(yearPrefix+chrs,opts.yearrange.minyear,opts.yearrange.maxyear))return maskset.buffer[pos++]=yearPrefix.charAt(0),maskset.buffer[pos++]=yearPrefix.charAt(1),{pos:pos}}return isValid},cardinality:1},{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.isInYearRange(chrs,opts.yearrange.minyear,opts.yearrange.maxyear);if(!strict&&!isValid){var yearPrefix=opts.determinebaseyear(opts.yearrange.minyear,opts.yearrange.maxyear,chrs).toString().slice(0,2);if(isValid=opts.isInYearRange(chrs[0]+yearPrefix[1]+chrs[1],opts.yearrange.minyear,opts.yearrange.maxyear))return maskset.buffer[pos++]=yearPrefix.charAt(1),{pos:pos};if(yearPrefix=opts.determinebaseyear(opts.yearrange.minyear,opts.yearrange.maxyear,chrs).toString().slice(0,2),opts.isInYearRange(yearPrefix+chrs,opts.yearrange.minyear,opts.yearrange.maxyear)){var dayMonthValue=maskset.buffer.join("").substr(0,6);if(dayMonthValue!==opts.leapday)isValid=!0;else{var year=parseInt(chrs,10);isValid=year%4===0?year%100===0?year%400===0?!0:!1:!0:!1}}else isValid=!1;if(isValid)return maskset.buffer[pos-1]=yearPrefix.charAt(0),maskset.buffer[pos++]=yearPrefix.charAt(1),maskset.buffer[pos++]=chrs.charAt(0),{refreshFromBuffer:{start:pos-3,end:pos},pos:pos}}return isValid},cardinality:2},{validator:function(chrs,maskset,pos,strict,opts){return opts.isInYearRange(chrs,opts.yearrange.minyear,opts.yearrange.maxyear)},cardinality:3}]}},insertMode:!1,autoUnmask:!1},"mm/dd/yyyy":{placeholder:"mm/dd/yyyy",alias:"dd/mm/yyyy",regex:{val2pre:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[13-9]|1[012])"+escapedSeparator+"[0-3])|(02"+escapedSeparator+"[0-2])")},val2:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|1[012])"+escapedSeparator+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+escapedSeparator+"30)|((0[13578]|1[02])"+escapedSeparator+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(e,buffer,caretPos,opts){var $input=$(this);if(e.ctrlKey&&e.keyCode===Inputmask.keyCode.RIGHT){var today=new Date;$input.val((today.getMonth()+1).toString()+today.getDate().toString()+today.getFullYear().toString()),$input.trigger("setvalue.inputmask")}}},"yyyy/mm/dd":{mask:"y/1/2",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",leapday:"/02/29",onKeyDown:function(e,buffer,caretPos,opts){var $input=$(this);if(e.ctrlKey&&e.keyCode===Inputmask.keyCode.RIGHT){var today=new Date;$input.val(today.getFullYear().toString()+(today.getMonth()+1).toString()+today.getDate().toString()),$input.trigger("setvalue.inputmask")}}},"dd.mm.yyyy":{mask:"1.2.y",placeholder:"dd.mm.yyyy",leapday:"29.02.",separator:".",alias:"dd/mm/yyyy"},"dd-mm-yyyy":{mask:"1-2-y",placeholder:"dd-mm-yyyy",leapday:"29-02-",separator:"-",alias:"dd/mm/yyyy"},"mm.dd.yyyy":{mask:"1.2.y",placeholder:"mm.dd.yyyy",leapday:"02.29.",separator:".",alias:"mm/dd/yyyy"},"mm-dd-yyyy":{mask:"1-2-y",placeholder:"mm-dd-yyyy",leapday:"02-29-",separator:"-",alias:"mm/dd/yyyy"},"yyyy.mm.dd":{mask:"y.1.2",placeholder:"yyyy.mm.dd",leapday:".02.29",separator:".",alias:"yyyy/mm/dd"},"yyyy-mm-dd":{mask:"y-1-2",placeholder:"yyyy-mm-dd",leapday:"-02-29",separator:"-",alias:"yyyy/mm/dd"},datetime:{mask:"1/2/y h:s",placeholder:"dd/mm/yyyy hh:mm",alias:"dd/mm/yyyy",regex:{hrspre:new RegExp("[012]"),hrs24:new RegExp("2[0-4]|1[3-9]"),hrs:new RegExp("[01][0-9]|2[0-4]"),ampm:new RegExp("^[a|p|A|P][m|M]"),mspre:new RegExp("[0-5]"),ms:new RegExp("[0-5][0-9]")},timeseparator:":",hourFormat:"24",definitions:{h:{validator:function(chrs,maskset,pos,strict,opts){if("24"===opts.hourFormat&&24===parseInt(chrs,10))return maskset.buffer[pos-1]="0",maskset.buffer[pos]="0",{refreshFromBuffer:{start:pos-1,end:pos},c:"0"};var isValid=opts.regex.hrs.test(chrs);if(!strict&&!isValid&&(chrs.charAt(1)===opts.timeseparator||-1!=="-.:".indexOf(chrs.charAt(1)))&&(isValid=opts.regex.hrs.test("0"+chrs.charAt(0))))return maskset.buffer[pos-1]="0",maskset.buffer[pos]=chrs.charAt(0),pos++,{refreshFromBuffer:{start:pos-2,end:pos},pos:pos,c:opts.timeseparator};if(isValid&&"24"!==opts.hourFormat&&opts.regex.hrs24.test(chrs)){var tmp=parseInt(chrs,10);return 24===tmp?(maskset.buffer[pos+5]="a",maskset.buffer[pos+6]="m"):(maskset.buffer[pos+5]="p",maskset.buffer[pos+6]="m"),tmp-=12,10>tmp?(maskset.buffer[pos]=tmp.toString(),maskset.buffer[pos-1]="0"):(maskset.buffer[pos]=tmp.toString().charAt(1),maskset.buffer[pos-1]=tmp.toString().charAt(0)),{refreshFromBuffer:{start:pos-1,end:pos+6},c:maskset.buffer[pos]}}return isValid},cardinality:2,prevalidator:[{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.regex.hrspre.test(chrs);return strict||isValid||!(isValid=opts.regex.hrs.test("0"+chrs))?isValid:(maskset.buffer[pos]="0",pos++,{pos:pos})},cardinality:1}]},s:{validator:"[0-5][0-9]",cardinality:2,prevalidator:[{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.regex.mspre.test(chrs);return strict||isValid||!(isValid=opts.regex.ms.test("0"+chrs))?isValid:(maskset.buffer[pos]="0",pos++,{pos:pos})},cardinality:1}]},t:{validator:function(chrs,maskset,pos,strict,opts){return opts.regex.ampm.test(chrs+"m")},casing:"lower",cardinality:1}},insertMode:!1,autoUnmask:!1},datetime12:{mask:"1/2/y h:s t\\m",placeholder:"dd/mm/yyyy hh:mm xm",alias:"datetime",hourFormat:"12"},"mm/dd/yyyy hh:mm xm":{mask:"1/2/y h:s t\\m",placeholder:"mm/dd/yyyy hh:mm xm",alias:"datetime12",regex:{val2pre:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[13-9]|1[012])"+escapedSeparator+"[0-3])|(02"+escapedSeparator+"[0-2])")},val2:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|1[012])"+escapedSeparator+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+escapedSeparator+"30)|((0[13578]|1[02])"+escapedSeparator+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(e,buffer,caretPos,opts){var $input=$(this);if(e.ctrlKey&&e.keyCode===Inputmask.keyCode.RIGHT){var today=new Date;$input.val((today.getMonth()+1).toString()+today.getDate().toString()+today.getFullYear().toString()),$input.trigger("setvalue.inputmask")}}},"hh:mm t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"h:s t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"hh:mm:ss":{mask:"h:s:s",placeholder:"hh:mm:ss",alias:"datetime",autoUnmask:!1},"hh:mm":{mask:"h:s",placeholder:"hh:mm",alias:"datetime",autoUnmask:!1},date:{alias:"dd/mm/yyyy"},"mm/yyyy":{mask:"1/y",placeholder:"mm/yyyy",leapday:"donotuse",separator:"/",alias:"mm/dd/yyyy"},shamsi:{regex:{val2pre:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|1[012])"+escapedSeparator+"[0-3])")},val2:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|1[012])"+escapedSeparator+"(0[1-9]|[12][0-9]))|((0[1-9]|1[012])"+escapedSeparator+"30)|((0[1-6])"+escapedSeparator+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},yearrange:{minyear:1300,maxyear:1499},mask:"y/1/2",leapday:"/12/30",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",clearIncomplete:!0}}),Inputmask}(jQuery,Inputmask),function($,Inputmask){return Inputmask.extendDefinitions({A:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,casing:"upper"},"&":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,casing:"upper"},"#":{validator:"[0-9A-Fa-f]",cardinality:1,casing:"upper"}}),Inputmask.extendAliases({url:{mask:"ir",placeholder:"",separator:"",defaultPrefix:"http://",regex:{urlpre1:new RegExp("[fh]"),urlpre2:new RegExp("(ft|ht)"),urlpre3:new RegExp("(ftp|htt)"),urlpre4:new RegExp("(ftp:|http|ftps)"),urlpre5:new RegExp("(ftp:/|ftps:|http:|https)"),urlpre6:new RegExp("(ftp://|ftps:/|http:/|https:)"),urlpre7:new RegExp("(ftp://|ftps://|http://|https:/)"),urlpre8:new RegExp("(ftp://|ftps://|http://|https://)")},definitions:{i:{validator:function(chrs,maskset,pos,strict,opts){return!0},cardinality:8,prevalidator:function(){for(var result=[],prefixLimit=8,i=0;prefixLimit>i;i++)result[i]=function(){var j=i;return{validator:function(chrs,maskset,pos,strict,opts){if(opts.regex["urlpre"+(j+1)]){var k,tmp=chrs;j+1-chrs.length>0&&(tmp=maskset.buffer.join("").substring(0,j+1-chrs.length)+""+tmp);var isValid=opts.regex["urlpre"+(j+1)].test(tmp);if(!strict&&!isValid){for(pos-=j,k=0;k<opts.defaultPrefix.length;k++)maskset.buffer[pos]=opts.defaultPrefix[k],pos++;for(k=0;k<tmp.length-1;k++)maskset.buffer[pos]=tmp[k],pos++;return{pos:pos}}return isValid}return!1},cardinality:j}}();return result}()},r:{validator:".",cardinality:50}},insertMode:!1,autoUnmask:!1},ip:{mask:"i[i[i]].i[i[i]].i[i[i]].i[i[i]]",definitions:{i:{validator:function(chrs,maskset,pos,strict,opts){return pos-1>-1&&"."!==maskset.buffer[pos-1]?(chrs=maskset.buffer[pos-1]+chrs,chrs=pos-2>-1&&"."!==maskset.buffer[pos-2]?maskset.buffer[pos-2]+chrs:"0"+chrs):chrs="00"+chrs,new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(chrs)},cardinality:1}},onUnMask:function(maskedValue,unmaskedValue,opts){return maskedValue}},email:{mask:"*{1,64}[.*{1,64}][.*{1,64}][.*{1,64}]@*{1,64}[.*{2,64}][.*{2,6}][.*{1,2}]",greedy:!1,onBeforePaste:function(pastedValue,opts){return pastedValue=pastedValue.toLowerCase(),pastedValue.replace("mailto:","")},definitions:{"*":{validator:"[0-9A-Za-z!#$%&'*+/=?^_`{|}~-]",cardinality:1,casing:"lower"}},onUnMask:function(maskedValue,unmaskedValue,opts){return maskedValue}},mac:{mask:"##:##:##:##:##:##"}}),Inputmask}(jQuery,Inputmask),function($,Inputmask){return Inputmask.extendAliases({numeric:{mask:function(opts){function autoEscape(txt){for(var escapedTxt="",i=0;i<txt.length;i++)escapedTxt+=opts.definitions[txt.charAt(i)]?"\\"+txt.charAt(i):txt.charAt(i);return escapedTxt}if(0!==opts.repeat&&isNaN(opts.integerDigits)&&(opts.integerDigits=opts.repeat),opts.repeat=0,opts.groupSeparator===opts.radixPoint&&(opts.groupSeparator="."===opts.radixPoint?",":","===opts.radixPoint?".":"")," "===opts.groupSeparator&&(opts.skipOptionalPartCharacter=void 0),opts.autoGroup=opts.autoGroup&&""!==opts.groupSeparator,opts.autoGroup&&("string"==typeof opts.groupSize&&isFinite(opts.groupSize)&&(opts.groupSize=parseInt(opts.groupSize)),isFinite(opts.integerDigits))){var seps=Math.floor(opts.integerDigits/opts.groupSize),mod=opts.integerDigits%opts.groupSize;opts.integerDigits=parseInt(opts.integerDigits)+(0===mod?seps-1:seps),opts.integerDigits<1&&(opts.integerDigits="*")}opts.placeholder.length>1&&(opts.placeholder=opts.placeholder.charAt(0)),opts.radixFocus=opts.radixFocus&&""!==opts.placeholder&&opts.integerOptional===!0,opts.definitions[";"]=opts.definitions["~"],opts.definitions[";"].definitionSymbol="~",opts.numericInput===!0&&(opts.radixFocus=!1,opts.digitsOptional=!1,isNaN(opts.digits)&&(opts.digits=2),opts.decimalProtect=!1);var mask=autoEscape(opts.prefix);return mask+="[+]",mask+=opts.integerOptional===!0?"~{1,"+opts.integerDigits+"}":"~{"+opts.integerDigits+"}",void 0!==opts.digits&&(isNaN(opts.digits)||parseInt(opts.digits)>0)&&(mask+=opts.digitsOptional?"["+(opts.decimalProtect?":":opts.radixPoint)+";{1,"+opts.digits+"}]":(opts.decimalProtect?":":opts.radixPoint)+";{"+opts.digits+"}"),""!==opts.negationSymbol.back&&(mask+="[-]"),mask+=autoEscape(opts.suffix),opts.greedy=!1,mask},placeholder:"",greedy:!1,digits:"*",digitsOptional:!0,radixPoint:".",radixFocus:!0,groupSize:3,groupSeparator:"",autoGroup:!1,allowPlus:!0,allowMinus:!0,negationSymbol:{front:"-",back:""},integerDigits:"+",integerOptional:!0,prefix:"",suffix:"",rightAlign:!0,decimalProtect:!0,min:null,max:null,step:1,insertMode:!0,autoUnmask:!1,unmaskAsNumber:!1,postFormat:function(buffer,pos,reformatOnly,opts){opts.numericInput===!0&&(buffer=buffer.reverse(),isFinite(pos)&&(pos=buffer.join("").length-pos-1));var i,l,suffixStripped=!1;buffer.length>=opts.suffix.length&&buffer.join("").indexOf(opts.suffix)===buffer.length-opts.suffix.length&&(buffer.length=buffer.length-opts.suffix.length,suffixStripped=!0),pos=pos>=buffer.length?buffer.length-1:pos<opts.prefix.length?opts.prefix.length:pos;var needsRefresh=!1,charAtPos=buffer[pos];if(""===opts.groupSeparator||opts.numericInput!==!0&&-1!==$.inArray(opts.radixPoint,buffer)&&pos>$.inArray(opts.radixPoint,buffer)||new RegExp("["+Inputmask.escapeRegex(opts.negationSymbol.front)+"+]").test(charAtPos)){if(suffixStripped)for(i=0,l=opts.suffix.length;l>i;i++)buffer.push(opts.suffix.charAt(i));return{pos:pos}}var cbuf=buffer.slice();charAtPos===opts.groupSeparator&&(cbuf.splice(pos--,1),charAtPos=cbuf[pos]),reformatOnly?charAtPos!==opts.radixPoint&&(cbuf[pos]="?"):cbuf.splice(pos,0,"?");var bufVal=cbuf.join(""),bufValOrigin=bufVal;if(bufVal.length>0&&opts.autoGroup||reformatOnly&&-1!==bufVal.indexOf(opts.groupSeparator)){var escapedGroupSeparator=Inputmask.escapeRegex(opts.groupSeparator);needsRefresh=0===bufVal.indexOf(opts.groupSeparator),bufVal=bufVal.replace(new RegExp(escapedGroupSeparator,"g"),"");var radixSplit=bufVal.split(opts.radixPoint);if(bufVal=""===opts.radixPoint?bufVal:radixSplit[0],bufVal!==opts.prefix+"?0"&&bufVal.length>=opts.groupSize+opts.prefix.length)for(var reg=new RegExp("([-+]?[\\d?]+)([\\d?]{"+opts.groupSize+"})");reg.test(bufVal);)bufVal=bufVal.replace(reg,"$1"+opts.groupSeparator+"$2"),
bufVal=bufVal.replace(opts.groupSeparator+opts.groupSeparator,opts.groupSeparator);""!==opts.radixPoint&&radixSplit.length>1&&(bufVal+=opts.radixPoint+radixSplit[1])}for(needsRefresh=bufValOrigin!==bufVal,buffer.length=bufVal.length,i=0,l=bufVal.length;l>i;i++)buffer[i]=bufVal.charAt(i);var newPos=$.inArray("?",buffer);if(-1===newPos&&charAtPos===opts.radixPoint&&(newPos=$.inArray(opts.radixPoint,buffer)),reformatOnly?buffer[newPos]=charAtPos:buffer.splice(newPos,1),!needsRefresh&&suffixStripped)for(i=0,l=opts.suffix.length;l>i;i++)buffer.push(opts.suffix.charAt(i));return newPos=opts.numericInput&&isFinite(pos)?buffer.join("").length-newPos-1:newPos,opts.numericInput&&(buffer=buffer.reverse(),$.inArray(opts.radixPoint,buffer)<newPos&&buffer.join("").length-opts.suffix.length!==newPos&&(newPos-=1)),{pos:newPos,refreshFromBuffer:needsRefresh,buffer:buffer}},onBeforeWrite:function(e,buffer,caretPos,opts){if(e&&("blur"===e.type||"checkval"===e.type)){var maskedValue=buffer.join(""),processValue=maskedValue.replace(opts.prefix,"");if(processValue=processValue.replace(opts.suffix,""),processValue=processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),""),","===opts.radixPoint&&(processValue=processValue.replace(Inputmask.escapeRegex(opts.radixPoint),".")),isFinite(processValue)&&isFinite(opts.min)&&parseFloat(processValue)<parseFloat(opts.min))return $.extend(!0,{refreshFromBuffer:!0,buffer:(opts.prefix+opts.min).split("")},opts.postFormat((opts.prefix+opts.min).split(""),0,!0,opts));if(opts.numericInput!==!0){var tmpBufSplit=""!==opts.radixPoint?buffer.join("").split(opts.radixPoint):[buffer.join("")],matchRslt=tmpBufSplit[0].match(opts.regex.integerPart(opts)),matchRsltDigits=2===tmpBufSplit.length?tmpBufSplit[1].match(opts.regex.integerNPart(opts)):void 0;if(matchRslt){matchRslt[0]!==opts.negationSymbol.front+"0"&&matchRslt[0]!==opts.negationSymbol.front&&"+"!==matchRslt[0]||void 0!==matchRsltDigits&&!matchRsltDigits[0].match(/^0+$/)||buffer.splice(matchRslt.index,1);var radixPosition=$.inArray(opts.radixPoint,buffer);if(-1!==radixPosition){if(isFinite(opts.digits)&&!opts.digitsOptional){for(var i=1;i<=opts.digits;i++)(void 0===buffer[radixPosition+i]||buffer[radixPosition+i]===opts.placeholder.charAt(0))&&(buffer[radixPosition+i]="0");return{refreshFromBuffer:maskedValue!==buffer.join(""),buffer:buffer}}if(radixPosition===buffer.length-opts.suffix.length-1)return buffer.splice(radixPosition,1),{refreshFromBuffer:!0,buffer:buffer}}}}}if(opts.autoGroup){var rslt=opts.postFormat(buffer,opts.numericInput?caretPos:caretPos-1,!0,opts);return rslt.caret=caretPos<=opts.prefix.length?rslt.pos:rslt.pos+1,rslt}},regex:{integerPart:function(opts){return new RegExp("["+Inputmask.escapeRegex(opts.negationSymbol.front)+"+]?\\d+")},integerNPart:function(opts){return new RegExp("[\\d"+Inputmask.escapeRegex(opts.groupSeparator)+"]+")}},signHandler:function(chrs,maskset,pos,strict,opts){if(!strict&&opts.allowMinus&&"-"===chrs||opts.allowPlus&&"+"===chrs){var matchRslt=maskset.buffer.join("").match(opts.regex.integerPart(opts));if(matchRslt&&matchRslt[0].length>0)return maskset.buffer[matchRslt.index]===("-"===chrs?"+":opts.negationSymbol.front)?"-"===chrs?""!==opts.negationSymbol.back?{pos:matchRslt.index,c:opts.negationSymbol.front,remove:matchRslt.index,caret:pos,insert:{pos:maskset.buffer.length-opts.suffix.length-1,c:opts.negationSymbol.back}}:{pos:matchRslt.index,c:opts.negationSymbol.front,remove:matchRslt.index,caret:pos}:""!==opts.negationSymbol.back?{pos:matchRslt.index,c:"+",remove:[matchRslt.index,maskset.buffer.length-opts.suffix.length-1],caret:pos}:{pos:matchRslt.index,c:"+",remove:matchRslt.index,caret:pos}:maskset.buffer[matchRslt.index]===("-"===chrs?opts.negationSymbol.front:"+")?"-"===chrs&&""!==opts.negationSymbol.back?{remove:[matchRslt.index,maskset.buffer.length-opts.suffix.length-1],caret:pos-1}:{remove:matchRslt.index,caret:pos-1}:"-"===chrs?""!==opts.negationSymbol.back?{pos:matchRslt.index,c:opts.negationSymbol.front,caret:pos+1,insert:{pos:maskset.buffer.length-opts.suffix.length,c:opts.negationSymbol.back}}:{pos:matchRslt.index,c:opts.negationSymbol.front,caret:pos+1}:{pos:matchRslt.index,c:chrs,caret:pos+1}}return!1},radixHandler:function(chrs,maskset,pos,strict,opts){if(!strict&&(-1!==$.inArray(chrs,[",","."])&&(chrs=opts.radixPoint),chrs===opts.radixPoint&&void 0!==opts.digits&&(isNaN(opts.digits)||parseInt(opts.digits)>0))){var radixPos=$.inArray(opts.radixPoint,maskset.buffer),integerValue=maskset.buffer.join("").match(opts.regex.integerPart(opts));if(-1!==radixPos&&maskset.validPositions[radixPos])return maskset.validPositions[radixPos-1]?{caret:radixPos+1}:{pos:integerValue.index,c:integerValue[0],caret:radixPos+1};if(!integerValue||"0"===integerValue[0]&&integerValue.index+1!==pos)return maskset.buffer[integerValue?integerValue.index:pos]="0",{pos:(integerValue?integerValue.index:pos)+1,c:opts.radixPoint}}return!1},leadingZeroHandler:function(chrs,maskset,pos,strict,opts){if(opts.numericInput===!0){if("0"===maskset.buffer[maskset.buffer.length-opts.prefix.length-1])return{pos:pos,remove:maskset.buffer.length-opts.prefix.length-1}}else{var matchRslt=maskset.buffer.join("").match(opts.regex.integerNPart(opts)),radixPosition=$.inArray(opts.radixPoint,maskset.buffer);if(matchRslt&&!strict&&(-1===radixPosition||radixPosition>=pos))if(0===matchRslt[0].indexOf("0")){pos<opts.prefix.length&&(pos=matchRslt.index);var _radixPosition=$.inArray(opts.radixPoint,maskset._buffer),digitsMatch=maskset._buffer&&maskset.buffer.slice(radixPosition).join("")===maskset._buffer.slice(_radixPosition).join("")||0===parseInt(maskset.buffer.slice(radixPosition+1).join("")),integerMatch=maskset._buffer&&maskset.buffer.slice(matchRslt.index,radixPosition).join("")===maskset._buffer.slice(opts.prefix.length,_radixPosition).join("")||"0"===maskset.buffer.slice(matchRslt.index,radixPosition).join("");if(-1===radixPosition||digitsMatch&&integerMatch)return maskset.buffer.splice(matchRslt.index,1),pos=pos>matchRslt.index?pos-1:matchRslt.index,{pos:pos,remove:matchRslt.index};if(matchRslt.index+1===pos||"0"===chrs)return maskset.buffer.splice(matchRslt.index,1),pos=matchRslt.index,{pos:pos,remove:matchRslt.index}}else if("0"===chrs&&pos<=matchRslt.index&&matchRslt[0]!==opts.groupSeparator)return!1}return!0},postValidation:function(buffer,opts){var isValid=!0,maskedValue=buffer.join(""),processValue=maskedValue.replace(opts.prefix,"");return processValue=processValue.replace(opts.suffix,""),processValue=processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),""),","===opts.radixPoint&&(processValue=processValue.replace(Inputmask.escapeRegex(opts.radixPoint),".")),processValue=processValue.replace(new RegExp("^"+Inputmask.escapeRegex(opts.negationSymbol.front)),"-"),processValue=processValue.replace(new RegExp(Inputmask.escapeRegex(opts.negationSymbol.back)+"$"),""),processValue=processValue===opts.negationSymbol.front?processValue+"0":processValue,isFinite(processValue)&&(null!==opts.max&&isFinite(opts.max)&&(isValid=parseFloat(processValue)<=parseFloat(opts.max)),isValid&&null!==opts.min&&isFinite(opts.min)&&(0>=processValue||processValue.toString().length>=opts.min.toString().length)&&(isValid=parseFloat(processValue)>=parseFloat(opts.min),isValid||(isValid=$.extend(!0,{refreshFromBuffer:!0,buffer:(opts.prefix+opts.min).split("")},opts.postFormat((opts.prefix+opts.min).split(""),0,!0,opts)),isValid.refreshFromBuffer=!0))),isValid},definitions:{"~":{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.signHandler(chrs,maskset,pos,strict,opts);if(!isValid&&(isValid=opts.radixHandler(chrs,maskset,pos,strict,opts),!isValid&&(isValid=strict?new RegExp("[0-9"+Inputmask.escapeRegex(opts.groupSeparator)+"]").test(chrs):new RegExp("[0-9]").test(chrs),isValid===!0&&(isValid=opts.leadingZeroHandler(chrs,maskset,pos,strict,opts),isValid===!0)))){var radixPosition=$.inArray(opts.radixPoint,maskset.buffer);isValid=-1!==radixPosition&&opts.digitsOptional===!1&&opts.numericInput!==!0&&pos>radixPosition&&!strict?{pos:pos,remove:pos}:{pos:pos}}return isValid},cardinality:1,prevalidator:null},"+":{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.signHandler(chrs,maskset,pos,strict,opts);return!isValid&&(strict&&opts.allowMinus&&chrs===opts.negationSymbol.front||opts.allowMinus&&"-"===chrs||opts.allowPlus&&"+"===chrs)&&(isValid="-"===chrs?""!==opts.negationSymbol.back?{pos:pos,c:"-"===chrs?opts.negationSymbol.front:"+",caret:pos+1,insert:{pos:maskset.buffer.length,c:opts.negationSymbol.back}}:{pos:pos,c:"-"===chrs?opts.negationSymbol.front:"+",caret:pos+1}:!0),isValid},cardinality:1,prevalidator:null,placeholder:""},"-":{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.signHandler(chrs,maskset,pos,strict,opts);return!isValid&&strict&&opts.allowMinus&&chrs===opts.negationSymbol.back&&(isValid=!0),isValid},cardinality:1,prevalidator:null,placeholder:""},":":{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.signHandler(chrs,maskset,pos,strict,opts);if(!isValid){var radix="["+Inputmask.escapeRegex(opts.radixPoint)+",\\.]";isValid=new RegExp(radix).test(chrs),isValid&&maskset.validPositions[pos]&&maskset.validPositions[pos].match.placeholder===opts.radixPoint&&(isValid={caret:pos+1})}return isValid?{c:opts.radixPoint}:isValid},cardinality:1,prevalidator:null,placeholder:function(opts){return opts.radixPoint}}},onUnMask:function(maskedValue,unmaskedValue,opts){var processValue=maskedValue.replace(opts.prefix,"");return processValue=processValue.replace(opts.suffix,""),processValue=processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),""),opts.unmaskAsNumber?(""!==opts.radixPoint&&-1!==processValue.indexOf(opts.radixPoint)&&(processValue=processValue.replace(Inputmask.escapeRegex.call(this,opts.radixPoint),".")),Number(processValue)):processValue},isComplete:function(buffer,opts){var maskedValue=buffer.join(""),bufClone=buffer.slice();if(opts.postFormat(bufClone,0,!0,opts),bufClone.join("")!==maskedValue)return!1;var processValue=maskedValue.replace(opts.prefix,"");return processValue=processValue.replace(opts.suffix,""),processValue=processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),""),","===opts.radixPoint&&(processValue=processValue.replace(Inputmask.escapeRegex(opts.radixPoint),".")),isFinite(processValue)},onBeforeMask:function(initialValue,opts){if(""!==opts.radixPoint&&isFinite(initialValue))initialValue=initialValue.toString().replace(".",opts.radixPoint);else{var kommaMatches=initialValue.match(/,/g),dotMatches=initialValue.match(/\./g);dotMatches&&kommaMatches?dotMatches.length>kommaMatches.length?(initialValue=initialValue.replace(/\./g,""),initialValue=initialValue.replace(",",opts.radixPoint)):kommaMatches.length>dotMatches.length?(initialValue=initialValue.replace(/,/g,""),initialValue=initialValue.replace(".",opts.radixPoint)):initialValue=initialValue.indexOf(".")<initialValue.indexOf(",")?initialValue.replace(/\./g,""):initialValue=initialValue.replace(/,/g,""):initialValue=initialValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),"")}if(0===opts.digits&&(-1!==initialValue.indexOf(".")?initialValue=initialValue.substring(0,initialValue.indexOf(".")):-1!==initialValue.indexOf(",")&&(initialValue=initialValue.substring(0,initialValue.indexOf(",")))),""!==opts.radixPoint&&isFinite(opts.digits)&&-1!==initialValue.indexOf(opts.radixPoint)){var valueParts=initialValue.split(opts.radixPoint),decPart=valueParts[1].match(new RegExp("\\d*"))[0];if(parseInt(opts.digits)<decPart.toString().length){var digitsFactor=Math.pow(10,parseInt(opts.digits));initialValue=initialValue.replace(Inputmask.escapeRegex(opts.radixPoint),"."),initialValue=Math.round(parseFloat(initialValue)*digitsFactor)/digitsFactor,initialValue=initialValue.toString().replace(".",opts.radixPoint)}}return initialValue.toString()},canClearPosition:function(maskset,position,lvp,strict,opts){var positionInput=maskset.validPositions[position].input,canClear=positionInput!==opts.radixPoint||null!==maskset.validPositions[position].match.fn&&opts.decimalProtect===!1||isFinite(positionInput)||position===lvp||positionInput===opts.groupSeparator||positionInput===opts.negationSymbol.front||positionInput===opts.negationSymbol.back;if(canClear&&isFinite(positionInput)){var matchRslt,radixPos=$.inArray(opts.radixPoint,maskset.buffer),radixInjection=!1;if(void 0===maskset.validPositions[radixPos]&&(maskset.validPositions[radixPos]={input:opts.radixPoint},radixInjection=!0),!strict&&maskset.buffer){matchRslt=maskset.buffer.join("").substr(0,position).match(opts.regex.integerNPart(opts));var pos=position+1,isNull=null==matchRslt||0===parseInt(matchRslt[0].replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),""));if(isNull)for(;maskset.validPositions[pos]&&(maskset.validPositions[pos].input===opts.groupSeparator||"0"===maskset.validPositions[pos].input);)delete maskset.validPositions[pos],pos++}var buffer=[];for(var vp in maskset.validPositions)void 0!==maskset.validPositions[vp].input&&buffer.push(maskset.validPositions[vp].input);if(radixInjection&&delete maskset.validPositions[radixPos],radixPos>0){var bufVal=buffer.join("");if(matchRslt=bufVal.match(opts.regex.integerNPart(opts)))if(radixPos>=position)if(0===matchRslt[0].indexOf("0"))canClear=matchRslt.index!==position||"0"===opts.placeholder;else{var intPart=parseInt(matchRslt[0].replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),"")),radixPart=parseInt(bufVal.split(opts.radixPoint)[1]);10>intPart&&maskset.validPositions[position]&&("0"!==opts.placeholder||radixPart>0)&&(maskset.validPositions[position].input="0",maskset.p=opts.prefix.length+1,canClear=!1)}else 0===matchRslt[0].indexOf("0")&&3===bufVal.length&&(maskset.validPositions={},canClear=!1)}}return canClear},onKeyDown:function(e,buffer,caretPos,opts){var $input=$(this);if(e.ctrlKey)switch(e.keyCode){case Inputmask.keyCode.UP:$input.val(parseFloat(this.inputmask.unmaskedvalue())+parseInt(opts.step)),$input.trigger("setvalue.inputmask");break;case Inputmask.keyCode.DOWN:$input.val(parseFloat(this.inputmask.unmaskedvalue())-parseInt(opts.step)),$input.trigger("setvalue.inputmask")}}},currency:{prefix:"$ ",groupSeparator:",",alias:"numeric",placeholder:"0",autoGroup:!0,digits:2,digitsOptional:!1,clearMaskOnLostFocus:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",digits:0,radixPoint:""},percentage:{alias:"numeric",digits:2,radixPoint:".",placeholder:"0",autoGroup:!1,min:0,max:100,suffix:" %",allowPlus:!1,allowMinus:!1}}),Inputmask}(jQuery,Inputmask),function($,Inputmask){return Inputmask.extendAliases({phone:{url:"phone-codes/phone-codes.js",countrycode:"",mask:function(opts){opts.definitions["#"]=opts.definitions[9];var maskList=[];return $.ajax({url:opts.url,async:!1,dataType:"json",success:function(response){maskList=response},error:function(xhr,ajaxOptions,thrownError){alert(thrownError+" - "+opts.url)}}),maskList=maskList.sort(function(a,b){return(a.mask||a)<(b.mask||b)?-1:1})},keepStatic:!1,nojumps:!0,nojumpsThreshold:1,onBeforeMask:function(value,opts){var processedValue=value.replace(/^0/g,"");return(processedValue.indexOf(opts.countrycode)>1||-1===processedValue.indexOf(opts.countrycode))&&(processedValue="+"+opts.countrycode+processedValue),processedValue}},phonebe:{alias:"phone",url:"phone-codes/phone-be.js",countrycode:"32",nojumpsThreshold:4}}),Inputmask}(jQuery,Inputmask),function($,Inputmask){return Inputmask.extendAliases({Regex:{mask:"r",greedy:!1,repeat:"*",regex:null,regexTokens:null,tokenizer:/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,quantifierFilter:/[0-9]+[^,]/,isComplete:function(buffer,opts){return new RegExp(opts.regex).test(buffer.join(""))},definitions:{r:{validator:function(chrs,maskset,pos,strict,opts){function RegexToken(isGroup,isQuantifier){this.matches=[],this.isGroup=isGroup||!1,this.isQuantifier=isQuantifier||!1,this.quantifier={min:1,max:1},this.repeaterPart=void 0}function analyseRegex(){var match,m,currentToken=new RegexToken,opengroups=[];for(opts.regexTokens=[];match=opts.tokenizer.exec(opts.regex);)switch(m=match[0],m.charAt(0)){case"(":opengroups.push(new RegexToken(!0));break;case")":groupToken=opengroups.pop(),opengroups.length>0?opengroups[opengroups.length-1].matches.push(groupToken):currentToken.matches.push(groupToken);break;case"{":case"+":case"*":var quantifierToken=new RegexToken(!1,!0);m=m.replace(/[{}]/g,"");var mq=m.split(","),mq0=isNaN(mq[0])?mq[0]:parseInt(mq[0]),mq1=1===mq.length?mq0:isNaN(mq[1])?mq[1]:parseInt(mq[1]);if(quantifierToken.quantifier={min:mq0,max:mq1},opengroups.length>0){var matches=opengroups[opengroups.length-1].matches;match=matches.pop(),match.isGroup||(groupToken=new RegexToken(!0),groupToken.matches.push(match),match=groupToken),matches.push(match),matches.push(quantifierToken)}else match=currentToken.matches.pop(),match.isGroup||(groupToken=new RegexToken(!0),groupToken.matches.push(match),match=groupToken),currentToken.matches.push(match),currentToken.matches.push(quantifierToken);break;default:opengroups.length>0?opengroups[opengroups.length-1].matches.push(m):currentToken.matches.push(m)}currentToken.matches.length>0&&opts.regexTokens.push(currentToken)}function validateRegexToken(token,fromGroup){var isvalid=!1;fromGroup&&(regexPart+="(",openGroupCount++);for(var mndx=0;mndx<token.matches.length;mndx++){var matchToken=token.matches[mndx];if(matchToken.isGroup===!0)isvalid=validateRegexToken(matchToken,!0);else if(matchToken.isQuantifier===!0){var crrntndx=$.inArray(matchToken,token.matches),matchGroup=token.matches[crrntndx-1],regexPartBak=regexPart;if(isNaN(matchToken.quantifier.max)){for(;matchToken.repeaterPart&&matchToken.repeaterPart!==regexPart&&matchToken.repeaterPart.length>regexPart.length&&!(isvalid=validateRegexToken(matchGroup,!0)););isvalid=isvalid||validateRegexToken(matchGroup,!0),isvalid&&(matchToken.repeaterPart=regexPart),regexPart=regexPartBak+matchToken.quantifier.max}else{for(var i=0,qm=matchToken.quantifier.max-1;qm>i&&!(isvalid=validateRegexToken(matchGroup,!0));i++);regexPart=regexPartBak+"{"+matchToken.quantifier.min+","+matchToken.quantifier.max+"}"}}else if(void 0!==matchToken.matches)for(var k=0;k<matchToken.length&&!(isvalid=validateRegexToken(matchToken[k],fromGroup));k++);else{var testExp;if("["==matchToken.charAt(0)){testExp=regexPart,testExp+=matchToken;for(var j=0;openGroupCount>j;j++)testExp+=")";var exp=new RegExp("^("+testExp+")$");isvalid=exp.test(bufferStr)}else for(var l=0,tl=matchToken.length;tl>l;l++)if("\\"!==matchToken.charAt(l)){testExp=regexPart,testExp+=matchToken.substr(0,l+1),testExp=testExp.replace(/\|$/,"");for(var j=0;openGroupCount>j;j++)testExp+=")";var exp=new RegExp("^("+testExp+")$");if(isvalid=exp.test(bufferStr))break}regexPart+=matchToken}if(isvalid)break}return fromGroup&&(regexPart+=")",openGroupCount--),isvalid}var groupToken,cbuffer=maskset.buffer.slice(),regexPart="",isValid=!1,openGroupCount=0;null===opts.regexTokens&&analyseRegex(),cbuffer.splice(pos,0,chrs);for(var bufferStr=cbuffer.join(""),i=0;i<opts.regexTokens.length;i++){var regexToken=opts.regexTokens[i];if(isValid=validateRegexToken(regexToken,regexToken.isGroup))break}return isValid},cardinality:1}}}}),Inputmask}(jQuery,Inputmask),function(){"use strict";var app=angular.module("app",["ngResource","ui.router","ngCookies","ui.mask","ui.bootstrap","isteven-multi-select","ngInputModified","ui.validate","cgBusy","angular.filter","xeditable","checklist-model","ngFileUpload","STNResource","ui.bootstrap.datetimepicker","leaflet-directive","ngHandsontable","STNControllers","LogInOutController","ModalControllers","SettingsControllers","WiM.Services","WiM.Event","wim_angular","angularSpinners"]);app.constant("SERVER_URL","https://stn.wim.usgs.gov/STNServices"),app.constant("ENVIRONMENT","Production"),app.run(["$rootScope","$uibModalStack","$cookies","$state","ENVIRONMENT",function($rootScope,$uibModalStack,$cookies,$state,ENVIRONMENT){$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){void 0!==$cookies.get("STNCreds")&&""!==$cookies.get("STNCreds")||!toState.authenticate?($rootScope.stateIsLoading={showLoading:!0},$uibModalStack.dismissAll(),"/"==toState.url&&$("#userNameFocus").focus()):($rootScope.returnToState=toState.name,$rootScope.returnToStateParams=toParams.id,event.preventDefault(),$state.go("entry")),$rootScope.environment=ENVIRONMENT}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams,error){$rootScope.stateIsLoading.showLoading=!1}),$rootScope.$on("$stateChangeError",function(event,toState,toParams,fromState,fromParams,error){$rootScope.stateIsLoading.showLoading=!1,alert("Error occurred: Status"+error.status+", "+error.statusText+". The following request was unsuccessful: "+error.config.url+" Please refresh and try again.")})}]),app.config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("entry",{url:"/",templateUrl:"component/main/mainView.html",controller:"mainCtrl"}).state("map",{url:"/Map",views:{"":{controller:"MapController",templateUrl:"component/map/map.html"},"mapFilters@map":{templateUrl:"component/map/mapFilters.html",controller:"MapFiltersController",resolve:{s:"STATE",stateList:function(s){return s.getAll().$promise},sensT:"SENSOR_TYPE",sensorTypes:function(sensT){return sensT.getAll().$promise},netwN:"NETWORK_NAME",networkNames:function(netwN){return netwN.getAll().$promise}}},"mapSiteInfo@map":{templateUrl:"component/site/mapSiteInfoView.html",controller:"MapSiteInfoController"},"mapPeaksView@map":{templateUrl:"component/peak/mapPeaksView.html",controller:"MapPeaksController"},"mapSensorPropose@map":{templateUrl:"component/sensor/mapSensorPropose.html",resolve:{dt:"DEPLOYMENT_TYPE",allDeployTypes:function(dt){return dt.getAll().$promise},sd:"SENSOR_TYPE",allSensDeps:function(sd){return sd.getAll().$promise}},controller:"MapSensorProposeController"}}}).state("approval",{url:"/Approval",templateUrl:"component/approval/approval.html",controller:"approvalCtrl",authenticate:!0,resolve:{s:"STATE",stateList:function(s){return s.getAll().$promise},i:"INSTRUMENT",instrumentList:function(i){return i.getAll().$promise},st:"SENSOR_TYPE",allSensorTypes:function(st){return st.getAll().$promise},dt:"DEPLOYMENT_TYPE",allDepTypes:function(dt){return dt.getAll().$promise}}}).state("siteSearch",{url:"/SiteSearch",templateUrl:"component/siteSearch/siteSearch.html",controller:"siteSearchCtrl",authenticate:!0,resolve:{s:"STATE",stateList:function(s){return s.getAll().$promise},sensT:"SENSOR_TYPE",sensorTypes:function(sensT){return sensT.getAll().$promise},netwN:"NETWORK_NAME",networkNames:function(netwN){return netwN.getAll().$promise}}}).state("reporting",{url:"/Reporting","abstract":!0,templateUrl:"component/reporting/reporting.html",controller:"reportingCtrl",authenticate:!0,resolve:{e:"EVENT",allEvents:function(e){return e.getAll().$promise},state:"STATE",allStates:function(state){return state.getAll().$promise},r:"REPORT",allReports:function(r){return r.getAll().$promise},et:"EVENT_TYPE",allEventTypes:function(et){return et.getAll().$promise},es:"EVENT_STATUS",allEventStatus:function(es){return es.getAll().$promise},ag:"AGENCY",allAgencies:function(ag){return ag.getAll().$promise},memberReports:function(r,$cookies){var mID=$cookies.get("mID");return r.getMemberReports({memberId:mID}).$promise}}}).state("reporting.reportDash",{url:"/Dashboard",templateUrl:"component/reporting/reportingDashboard.html",controller:"reportingDashCtrl",authenticate:!0,resolve:{r:"REPORT",allReportsAgain:function(r){return r.getAll().$promise}}}).state("reporting.submitReport",{url:"/SubmitReport",templateUrl:"component/reporting/submitReport.html",controller:"submitReportCtrl",authenticate:!0}).state("reporting.generateReport",{url:"/GenerateReport",templateUrl:"component/reporting/generateReport.html",authenticate:!0}).state("settings",{url:"/Settings",templateUrl:"component/settings/settings.html",controller:"settingsCtrl",authenticate:!0}).state("members",{url:"/Members",params:{id:null},"abstract":!0,template:"<div ui-view></div>",controller:"memberCtrl",authenticate:!0,resolve:{r:"ROLE",allRoles:function(r){return r.getAll().$promise},a:"AGENCY",allAgencies:function(a){return a.getAll().$promise},userProfileId:function($stateParams){return void 0!==$stateParams.id?$stateParams.id:void 0}}}).state("members.MembersList",{url:"/MembersList",templateUrl:"component/member/membersList.html",authenticate:!0}).state("events",{url:"/Events","abstract":!0,template:"<div ui-view></div>",controller:"eventCtrl",authenticate:!0,resolve:{e:"EVENT",allEvents:function(e){return e.getAll().$promise},et:"EVENT_TYPE",allEventTypes:function(et){return et.getAll().$promise},es:"EVENT_STATUS",allEventStats:function(es){return es.getAll().$promise},m:"MEMBER",allCoordMembers:function(m,$http,$cookies){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",m.getRoleMembers({roleId:1}).$promise}}}).state("events.EventsList",{url:"/EventsList",templateUrl:"component/event/eventsList.html",authenticate:!0}).state("events.EventInfo",{url:"/eventInfo/:id",templateUrl:"component/event/eventInfo.html",controller:"eventInfoCtrl",authenticate:!0,resolve:{e:"EVENT",thisEvent:function(e,$stateParams){var eventId=$stateParams.id;return eventId>0?e.query({id:eventId}).$promise:void 0}}}).state("resources",{url:"/Resources","abstract":!0,template:"<div ui-view></div>",controller:"resourcesCtrl",authenticate:!0,resolve:{state:"STATE",allStates:function(state){return state.getAll().$promise},ag:"AGENCY",allAgencies:function(ag){return ag.getAll().$promise},c:"CONTACT_TYPE",allContactTypes:function(c){return c.getAll().$promise},d:"DEPLOYMENT_PRIORITY",allDeployPriorities:function(d){return d.getAll().$promise},es:"EVENT_STATUS",allEventStats:function(es){return es.getAll().$promise},et:"EVENT_TYPE",allEventTypes:function(et){return et.getAll().$promise},ft:"FILE_TYPE",allFileTypes:function(ft){return ft.getAll().$promise},hcm:"HORIZONTAL_COLL_METHODS",allHorCollMethods:function(hcm){return hcm.getAll().$promise},hd:"HORIZONTAL_DATUM",allHorDatums:function(hd){return hd.getAll().$promise},ht:"HOUSING_TYPE",allHouseTypes:function(ht){return ht.getAll().$promise},hq:"HWM_QUALITY",allHWMqualities:function(hq){return hq.getAll().$promise},hwmT:"HWM_TYPE",allHWMtypes:function(hwmT){return hwmT.getAll().$promise},icc:"INST_COLL_CONDITION",allInstCollectConditions:function(icc){return icc.getAll().$promise},m:"MARKER",allMarkers:function(m){return m.getAll().$promise},nn:"NETWORK_NAME",allNetworkNames:function(nn){return nn.getAll().$promise},opq:"OP_QUALITY",allObjPtQualities:function(opq){return opq.getAll().$promise},opt:"OP_TYPE",allObjPtTypes:function(opt){return opt.getAll().$promise},sb:"SENSOR_BRAND",allSensorBrands:function(sb){return sb.getAll().$promise},dt:"DEPLOYMENT_TYPE",allDeploymentTypes:function(dt){return dt.getAll().$promise},sstat:"STATUS_TYPE",allStatusTypes:function(sstat){return sstat.getAll().$promise},st:"SENSOR_TYPE",allSensorTypes:function(st){return st.getAll().$promise},nt:"NETWORK_TYPE",allNetworkTypes:function(nt){return nt.getAll().$promise},vcm:"VERTICAL_COLL_METHOD",allVerticalCollMethods:function(vcm){return vcm.getAll().$promise},vd:"VERTICAL_DATUM",allVerticalDatums:function(vd){return vd.getAll().$promise}}}).state("resources.ResourcesList",{url:"/ResourcesList",templateUrl:"component/resources/resourcesList.html",authenticate:!0}).state("resources.ResourcesList.agency",{url:"/Agencies",templateUrl:"component/resources/agency.html",authenticate:!0}).state("resources.ResourcesList.ContactType",{url:"/ContactTypes",templateUrl:"component/resources/contactType.html",authenticate:!0}).state("resources.ResourcesList.DepPriority",{url:"/DeploymentPriorities",templateUrl:"component/resources/deploymentPriority.html",authenticate:!0}).state("resources.ResourcesList.EventStatus",{url:"/EventStatus",templateUrl:"component/resources/eventStatus.html",authenticate:!0}).state("resources.ResourcesList.EventType",{url:"/EventTypes",templateUrl:"component/resources/eventType.html",authenticate:!0}).state("resources.ResourcesList.FileType",{url:"/FileTypes",templateUrl:"component/resources/fileType.html",authenticate:!0}).state("resources.ResourcesList.HorCollMethd",{url:"/HorizontalCollMethods",templateUrl:"component/resources/horizontalCollectionMethod.html",authenticate:!0}).state("resources.ResourcesList.HorDatum",{url:"/HorizontalDatums",templateUrl:"component/resources/horizontalDatum.html",authenticate:!0}).state("resources.ResourcesList.HousingType",{url:"/HousingTypes",templateUrl:"component/resources/housingType.html",authenticate:!0}).state("resources.ResourcesList.HWMQual",{url:"/HWMQualities",templateUrl:"component/resources/hwmQuality.html",authenticate:!0}).state("resources.ResourcesList.HWMType",{url:"/HWMTypes",templateUrl:"component/resources/hwmType.html",authenticate:!0}).state("resources.ResourcesList.InstrCollCondition",{url:"/InstrCollConditions",templateUrl:"component/resources/instrumentCollectionCondition.html",authenticate:!0}).state("resources.ResourcesList.Marker",{url:"/Markers",templateUrl:"component/resources/marker.html",authenticate:!0}).state("resources.ResourcesList.NetworkNames",{url:"/NetworkNames",templateUrl:"component/resources/networkNames.html",authenticate:!0}).state("resources.ResourcesList.OPquality",{url:"/ObjPointQualities",templateUrl:"component/resources/objectivePointQuality.html",authenticate:!0}).state("resources.ResourcesList.OPType",{url:"/ObjPointType",templateUrl:"component/resources/objectivePointType.html",authenticate:!0}).state("resources.ResourcesList.SensorBrand",{url:"/SensorBrands",templateUrl:"component/resources/sensorBrand.html",authenticate:!0}).state("resources.ResourcesList.SenDepType",{url:"/SensorDeploymentTypes",templateUrl:"component/resources/deploymentType.html",authenticate:!0}).state("resources.ResourcesList.StatusType",{url:"/StatusTypes",templateUrl:"component/resources/statusType.html",authenticate:!0}).state("resources.ResourcesList.SensorType",{url:"/SensorTypes",templateUrl:"component/resources/sensorType.html",authenticate:!0}).state("resources.ResourcesList.NetworkType",{url:"/NetworkTypes",templateUrl:"component/resources/networkType.html",authenticate:!0}).state("resources.ResourcesList.VertCollMethod",{url:"/VerticalCollMethods",templateUrl:"component/resources/verticalCollectionMethod.html",authenticate:!0}).state("resources.ResourcesList.VertDatum",{url:"/VerticalDatums",templateUrl:"component/resources/verticalDatum.html",authenticate:!0}).state("bulkHWMAdj",{url:"/BulkHWM_adjustments",templateUrl:"component/hwm/bulkHWMAdj.html",authenticate:!0,controller:"bulkHWMAdjCtrl",resolve:{e:"EVENT",eventList:function(e){return e.getAll().$promise},s:"STATE",stateList:function(s){return s.getAll().$promise},c:"COUNTIES",countyList:function(c){return c.getAll().$promise}}}).state("bulkHWM",{url:"/HistoricHWM_Upload",templateUrl:"component/hwm/bulkHWM.html",authenticate:!0,controller:"bulkHWMCtrl",resolve:{e:"EVENT",eventList:function(e){return e.getAll().$promise},s:"STATE",stateList:function(s){return s.getAll().$promise},c:"COUNTIES",countyList:function(c){return c.getAll().$promise},ht:"HWM_TYPE",hwmTypeList:function(ht){return ht.getAll().$promise},m:"MARKER",markerList:function(m){return m.getAll().$promise},hq:"HWM_QUALITY",hwmQualList:function(hq){return hq.getAll().$promise},hd:"HORIZONTAL_DATUM",horizDatumList:function(hd){return hd.getAll().$promise},hcm:"HORIZONTAL_COLL_METHODS",
horCollMethList:function(hcm){return hcm.getAll().$promise},vd:"VERTICAL_DATUM",vertDatumList:function(vd){return vd.getAll().$promise},vcm:"VERTICAL_COLL_METHOD",vertCollMethList:function(vcm){return vcm.getAll().$promise},f:"FILE_TYPE",fileTypesList:function(f){return f.getAll().$promise},a:"AGENCY",agenciesList:function(a){return a.getAll().$promise}}}).state("site",{url:"/Site/:id","abstract":!0,params:{id:null,latitude:{value:null,squash:!0},longitude:{value:null,squash:!0}},templateUrl:"component/site/site.html",authenticate:!0,controller:["$scope","$stateParams",function($scope,$stateParams){$scope.siteID=$stateParams.id}],resolve:{s:"SITE",thisSite:function(s,$stateParams){return $stateParams.id>0?s.query({id:$stateParams.id}).$promise:void 0},latlong:function($stateParams){if($stateParams.latitude){var latlongarray=[$stateParams.latitude,$stateParams.longitude];return latlongarray}},thisSiteNetworkNames:function(s,$stateParams){return $stateParams.id>0?s.getSiteNetworkNames({id:$stateParams.id}).$promise:void 0},thisSiteNetworkTypes:function(s,$stateParams){return $stateParams.id>0?s.getSiteNetworkTypes({id:$stateParams.id}).$promise:void 0},thisSiteHousings:function(s,$stateParams){return $stateParams.id>0?s.getSiteHousings({id:$stateParams.id}).$promise:void 0},thisSiteOPs:function(s,$stateParams){return $stateParams.id>0?s.getSiteOPs({id:$stateParams.id}).$promise:void 0},thisSiteSensors:function(s,$stateParams){return $stateParams.id>0?s.getSiteSensors({id:$stateParams.id}).$promise:void 0},thisSiteHWMs:function(s,$stateParams,$http,$cookies){return $stateParams.id>0?($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",s.getSiteHWMs({id:$stateParams.id}).$promise):void 0},thisSiteFiles:function(s,$stateParams){return $stateParams.id>0?s.getSiteFiles({id:$stateParams.id}).$promise:void 0},thisSitePeaks:function(s,$stateParams){return $stateParams.id>0?s.getSitePeaks({id:$stateParams.id}).$promise:void 0},hd:"HORIZONTAL_DATUM",allHorDatums:function(hd){return hd.getAll().$promise},hcm:"HORIZONTAL_COLL_METHODS",allHorCollMethods:function(hcm){return hcm.getAll().$promise},st:"STATE",allStates:function(st){return st.getAll().$promise},c:"COUNTIES",allCounties:function(c){return c.getAll().$promise},ht:"HOUSING_TYPE",allHousingTypes:function(ht){return ht.getAll().$promise},nn:"NETWORK_NAME",allNetworkNames:function(nn){return nn.getAll().$promise},nt:"NETWORK_TYPE",allNetworkTypes:function(nt){return nt.getAll().$promise},dt:"DEPLOYMENT_TYPE",allDeployTypes:function(dt){return dt.getAll().$promise},dp:"DEPLOYMENT_PRIORITY",allDeployPriorities:function(dp){return dp.getAll().$promise},opt:"OP_TYPE",allOPTypes:function(opt){return opt.getAll().$promise},vertDats:"VERTICAL_DATUM",allVertDatums:function(vertDats){return vertDats.getAll().$promise},vertColMet:"VERTICAL_COLL_METHOD",allVertColMethods:function(vertColMet){return vertColMet.getAll().$promise},opQual:"OP_QUALITY",allOPQualities:function(opQual){return opQual.getAll().$promise},e:"EVENT",allEvents:function(e){return e.getAll().$promise},sent:"SENSOR_TYPE",allSensorTypes:function(sent){return sent.getAll().$promise},sb:"SENSOR_BRAND",allSensorBrands:function(sb){return sb.getAll().$promise},hwmt:"HWM_TYPE",allHWMTypes:function(hwmt){return hwmt.getAll().$promise},hq:"HWM_QUALITY",allHWMQualities:function(hq){return hq.getAll().$promise},m:"MARKER",allMarkers:function(m){return m.getAll().$promise},ft:"FILE_TYPE",allFileTypes:function(ft){return ft.getAll().$promise},a:"AGENCY",allAgencies:function(a){return a.getAll().$promise}}}).state("site.dashboard",{url:"/SiteDashboard",authenticate:!0,views:{siteNo:{controller:["$scope","$cookies","thisSite",function($scope,$cookies,thisSite){void 0!==thisSite&&($scope.SiteNo=thisSite.site_no),$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEvent=null!==$cookies.get("SessionEventName")&&void 0!==$cookies.get("SessionEventName")?$cookies.get("SessionEventName"):"All Events"})}],template:'<div><h2 style="margin-top:0">Site {{SiteNo}} - For {{sessionEvent}}</h2></div><hr />'},aMap:{controller:"siteMapCtrl",templateUrl:"component/site/siteMapView.html",resolve:{aSite:function(thisSite){return void 0!==thisSite?thisSite:void 0},dt:"DEPLOYMENT_TYPE",deploymentTypes:function(thisSite,dt){return void 0!==thisSite?dt.getAll().$promise:void 0},s:"SITE",siteHWMs:function(thisSite,s){return void 0!==thisSite?s.getSiteHWMs({id:thisSite.site_id}).$promise:void 0},i:"INSTRUMENT",baroSensors:function(thisSite,i){return void 0!==thisSite?i.getSensorView({ViewType:"baro_view"}).$promise:void 0},metSensors:function(thisSite,i){return void 0!==thisSite?i.getSensorView({ViewType:"met_view"}).$promise:void 0},rdgSensors:function(thisSite,i){return void 0!==thisSite?i.getSensorView({ViewType:"rdg_view"}).$promise:void 0},stormSensors:function(thisSite,i){return void 0!==thisSite?i.getSensorView({ViewType:"stormtide_view"}).$promise:void 0},waveSensors:function(thisSite,i){return void 0!==thisSite?i.getSensorView({ViewType:"waveheight_view"}).$promise:void 0},presTempSensors:function(thisSite,i){return void 0!==thisSite?i.getSensorView({ViewType:"pressuretemp_view"}).$promise:void 0},thermSensors:function(thisSite,i){return void 0!==thisSite?i.getSensorView({ViewType:"therm_view"}).$promise:void 0},webcamSensors:function(thisSite,i){return void 0!==thisSite?i.getSensorView({ViewType:"webcam_view"}).$promise:void 0},raingageSensors:function(thisSite,i){return void 0!==thisSite?i.getSensorView({ViewType:"raingage_view"}).$promise:void 0}}},aSite:{controller:"siteCtrl",templateUrl:"component/site/siteInfoView.html"},op:{controller:"objectivePointCtrl",templateUrl:"component/objectivePoint/objectivePointList.html"},sensor:{controller:"sensorCtrl",templateUrl:"component/sensor/sensorList.html"},hwm:{controller:"hwmCtrl",templateUrl:"component/hwm/hwmList.html"},file:{controller:"fileCtrl",templateUrl:"component/file/fileList.html"},peak:{controller:"peakCtrl",templateUrl:"component/peak/peakList.html"}}}).state("quickCreate",{url:"/QuickCreate/:id",templateUrl:"component/site/quickCreate.html",controller:"quickCreateCtrl",authenticate:!0,resolve:{whichQuick:function($stateParams){return $stateParams.id},hd:"HORIZONTAL_DATUM",allHorDatums:function(hd){return hd.getAll().$promise},hcm:"HORIZONTAL_COLL_METHODS",allHorCollMethods:function(hcm){return hcm.getAll().$promise},st:"STATE",allStates:function(st){return st.getAll().$promise},c:"COUNTIES",allCounties:function(c){return c.getAll().$promise},opt:"OP_TYPE",allOPTypes:function(opt){return opt.getAll().$promise},vertDats:"VERTICAL_DATUM",allVertDatums:function(vertDats){return vertDats.getAll().$promise},vertColMet:"VERTICAL_COLL_METHOD",allVertColMethods:function(vertColMet){return vertColMet.getAll().$promise},opQual:"OP_QUALITY",allOPQualities:function(opQual){return opQual.getAll().$promise},hwmt:"HWM_TYPE",allHWMTypes:function(hwmt,$stateParams){return"HWM"==$stateParams.id?hwmt.getAll().$promise:void 0},hq:"HWM_QUALITY",allHWMQualities:function(hq,$stateParams){return"HWM"==$stateParams.id?hq.getAll().$promise:void 0},m:"MARKER",allMarkers:function(m,$stateParams){return"HWM"==$stateParams.id?m.getAll().$promise:void 0},dt:"DEPLOYMENT_TYPE",allDeployTypes:function(dt){return dt.getAll().$promise},e:"EVENT",allEvents:function(e,$stateParams){return"Sensor"==$stateParams.id?e.getAll().$promise:void 0},sent:"SENSOR_TYPE",allSensorTypes:function(sent,$stateParams){return"Sensor"==$stateParams.id?sent.getAll().$promise:void 0},sb:"SENSOR_BRAND",allSensorBrands:function(sb,$stateParams){return"Sensor"==$stateParams.id?sb.getAll().$promise:void 0},ht:"HOUSING_TYPE",allHousingTypes:function(ht){return ht.getAll().$promise}}})}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudC9TVE5DdHJsLmpzIiwic2hhcmVkL2RpcmVjdGl2ZXMvU1RORGlyZWN0aXZlcy5qcyIsImNvbXBvbmVudC9zaXRlU2VhcmNoL3NpdGVTZWFyY2hDdHJsLmpzIiwiY29tcG9uZW50L3NpdGUvc2l0ZU1vZGFsQ3RybC5qcyIsImNvbXBvbmVudC9zaXRlL3NpdGVNYXBDdHJsLmpzIiwiY29tcG9uZW50L3NpdGUvc2l0ZUN0cmwuanMiLCJjb21wb25lbnQvc2l0ZS9xdWlja0NyZWF0ZUN0cmwuanMiLCJjb21wb25lbnQvc2V0dGluZ3Mvc2V0dGluZ3NDdHJsLmpzIiwiY29tcG9uZW50L3NlbnNvci9zZW5zb3JNb2RhbEN0cmwuanMiLCJjb21wb25lbnQvc2Vuc29yL3NlbnNvckN0cmwuanMiLCJjb21wb25lbnQvcmVzb3VyY2VzL3Jlc291cmNlc0N0cmwuanMiLCJjb21wb25lbnQvcmVwb3J0aW5nL3N1Ym1pdFJlcG9ydEN0cmwuanMiLCJjb21wb25lbnQvcmVwb3J0aW5nL3JlcG9ydE1vZGFsQ3RybC5qcyIsImNvbXBvbmVudC9yZXBvcnRpbmcvcmVwb3J0aW5nRGFzaGJvYXJkQ3RybC5qcyIsImNvbXBvbmVudC9yZXBvcnRpbmcvcmVwb3J0aW5nQ3RybC5qcyIsImNvbXBvbmVudC9yZXBvcnRpbmcvcmVwb3J0aW5nQ3RybC1jNGI4YzYxMzU0LmpzIiwiY29tcG9uZW50L3JlcG9ydGluZy9wcm9qZWN0QWxlcnRNb2RhbEN0cmwuanMiLCJjb21wb25lbnQvcmVwb3J0aW5nL2NvbmZpcm1SZXBvcnRNb2RhbEN0cmwuanMiLCJjb21wb25lbnQvcGVhay9wZWFrTW9kYWxDdHJsLmpzIiwiY29tcG9uZW50L3BlYWsvcGVha0N0cmwuanMiLCJjb21wb25lbnQvb2JqZWN0aXZlUG9pbnQvb2JqZWN0aXZlUG9pbnRNb2RhbEN0cmwuanMiLCJjb21wb25lbnQvb2JqZWN0aXZlUG9pbnQvb2JqZWN0aXZlUG9pbnRDdHJsLmpzIiwiY29tcG9uZW50L21lbWJlci9tZW1iZXJNb2RhbEN0cmwuanMiLCJjb21wb25lbnQvbWVtYmVyL21lbWJlckluZm9DdHJsLmpzIiwiY29tcG9uZW50L21lbWJlci9tZW1iZXJDdHJsLmpzIiwiY29tcG9uZW50L21hcC9NYXBTaXRlSW5mb0NvbnRyb2xsZXIuanMiLCJjb21wb25lbnQvbWFwL01hcFNlbnNvclByb3Bvc2VDb250cm9sbGVyLmpzIiwiY29tcG9uZW50L21hcC9NYXBQZWFrc0NvbnRyb2xsZXIuanMiLCJjb21wb25lbnQvbWFwL01hcEZpbHRlcnNDb250cm9sbGVyLmpzIiwiY29tcG9uZW50L21hcC9tYXBDdHJsLmpzIiwiY29tcG9uZW50L21haW4vbWFpbkN0cmwuanMiLCJjb21wb25lbnQvbG9nSW5PdXQvbG9nSW5PdXRDdHJsLmpzIiwiY29tcG9uZW50L2h3bS9xdWlja0hXTUN0cmwuanMiLCJjb21wb25lbnQvaHdtL2h3bU1vZGFsQ3RybC5qcyIsImNvbXBvbmVudC9od20vaHdtQ3RybC5qcyIsImNvbXBvbmVudC9od20vaGlzdG9yaWNIV01DdHJsLmpzIiwiY29tcG9uZW50L2h3bS9idWxrSFdNQ3RybC5qcyIsImNvbXBvbmVudC9od20vYnVsa0hXTUFkakN0cmwuanMiLCJjb21wb25lbnQvaGVscC9oZWxwQ3RybC5qcyIsImNvbXBvbmVudC9maWxlL2ZpbGVNb2RhbEN0cmwuanMiLCJjb21wb25lbnQvZmlsZS9maWxlQ3RybC5qcyIsImNvbXBvbmVudC9ldmVudC9ldmVudFNlc3Npb25Nb2RhbEN0cmwuanMiLCJjb21wb25lbnQvZXZlbnQvZXZlbnRTZXNzaW9uQ3RybC5qcyIsImNvbXBvbmVudC9ldmVudC9ldmVudE1vZGFsQ3RybC5qcyIsImNvbXBvbmVudC9ldmVudC9ldmVudEluZm9DdHJsLmpzIiwiY29tcG9uZW50L2V2ZW50L2V2ZW50Q3RybC5qcyIsImNvbXBvbmVudC9hcHByb3ZhbC9hcHByb3ZhbEN0cmwuanMiLCJzZXJ2aWNlcy9TVE5SZXNvdXJjZS5qcyIsInNlcnZpY2VzL2J1c2luZXNzU2VydmljZXMuanMiLCJjb21wb25lbnQvTW9kYWxzQ3RybC5qcyIsImNvbXBvbmVudC9qcXVlcnkuaW5wdXRtYXNrLmJ1bmRsZS5qcyIsImFwcC5qcyJdLCJuYW1lcyI6WyJTVE5Db250cm9sbGVycyIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25zdGFudCIsIlBBU1NXT1JEIiwiZGlyZWN0aXZlIiwiJHBhcnNlIiwiZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdCIsInJlc3RyaWN0IiwicmVwbGFjZSIsInNjb3BlIiwiZGF0YSIsImxpbmsiLCJlbGVtZW50IiwiYXR0cnMiLCJjaGFydCIsImVsZXZhdGlvbkRhdGEiLCJzcGxpdCIsImQzIiwic2VsZWN0IiwiYXBwZW5kIiwiYXR0ciIsInNlbGVjdEFsbCIsImVudGVyIiwidHJhbnNpdGlvbiIsImVhc2UiLCJzdHlsZSIsImQiLCJ0ZXh0IiwiJHdhdGNoIiwibmV3VmFsdWUiLCJvbGRWYWx1ZSIsIm1vZGVsIiwic2VhcmNoQnkiLCJzZWFyY2hUZXJtIiwidGVtcGxhdGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJHN0YXRlIiwiJGh0dHAiLCJTSVRFIiwiJHVpYk1vZGFsIiwidmFsIiwicGxhY2Vob2xkZXIiLCJJbmRleFNlYXJjaFNpdGVzIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIiwiQWNjZXB0IiwiZ2V0U2VhcmNoZWRTaXRlIiwiYnlTaXRlTm8iLCJyZXNwIiwic2l0ZVNlYXJjaFJlc3BvbnNlIiwiZXJyb3JSZXNwb25zZSIsImJ5U2l0ZUlkIiwiYnlTaXRlTmFtZSIsInMiLCJ1bmRlZmluZWQiLCJzdGF0dXMiLCJlcnJvck1vZGFsIiwib3BlbiIsIiR1aWJNb2RhbEluc3RhbmNlIiwib2siLCJjbG9zZSIsInNpemUiLCJyZXN1bHQiLCJ0aGVuIiwiZ28iLCJpZCIsInNpdGVfaWQiLCJiaW5kIiwiZXZlbnQiLCJ3aGljaCIsIiRhcHBseSIsIiRldmFsIiwibmdFbnRlciIsInByZXZlbnREZWZhdWx0IiwicmVxdWlyZSIsIm1vZGVsQ3RybCIsIiRwYXJzZXJzIiwicHVzaCIsImlucHV0VmFsdWUiLCJ0cmFuc2Zvcm1lZElucHV0IiwiJHNldFZpZXdWYWx1ZSIsIiRyZW5kZXIiLCIkZm9ybWF0dGVycyIsInNoaWZ0IiwiYXR0cmlidXRlcyIsImZvY3VzIiwiZ29CYWNrIiwiaGlzdG9yeSIsImJhY2siLCJyZWdleCIsImVsbSIsImN0cmwiLCJ1bmJpbmQiLCJ2aWV3VmFsdWUiLCJ0ZXN0IiwidGFyZ2V0IiwidmFsdWUiLCIkc2V0VmFsaWRpdHkiLCJzYW1lQXMiLCIkbW9kZWxWYWx1ZSIsImN1cnJlbnRWYWx1ZSIsIiR0aW1lb3V0IiwiaW5pdGlhbEhlaWdodCIsImhlaWdodCIsInJlc2l6ZSIsInNjcm9sbEhlaWdodCIsIm9uIiwiZWwiLCJpbnB1dG1hc2siLCJteUlucHV0TWFzayIsIm5nTW9kZWwiLCJmaWxlTW9kZWwiLCJtb2RlbFNldHRlciIsImFzc2lnbiIsImZpbGVzIiwibmdNb2RlbEN0cmwiLCJmcm9tVXNlciIsInBhdHRlcm4iLCJlbGVtIiwibGltaXQiLCJwYXJzZUludCIsImxhYmVsTGltaXRMZW5ndGgiLCJlIiwidGhpcyIsImxlbmd0aCIsIiRjb29raWVzIiwiJHJvb3RTY29wZSIsIiRsb2NhdGlvbiIsInN0YXRlTGlzdCIsInNlbnNvclR5cGVzIiwibmV0d29ya05hbWVzIiwiZ2V0IiwiYXV0aCIsInBhdGgiLCJ0aGlzUGFnZSIsImFjdGl2ZU1lbnUiLCJzZXNzaW9uRXZlbnQiLCJzdGF0ZXMiLCJzZW5UeXBlcyIsIm5ldE5hbWVzIiwiQ2hvc2VuIiwiY2hvc2VuU3RhdGVzIiwic2l0ZVJlc3BvbnNlIiwiY2hlY2tib3hNb2RlbCIsImh3bU9ubHkiLCJzZW5Pbmx5IiwicmRnT25seSIsIm9wRGVmaW5lZCIsInNvcnRfYnkiLCJuZXdTb3J0aW5nT3JkZXIiLCJzb3J0aW5nT3JkZXIiLCJyZXZlcnNlIiwiJCIsImVhY2giLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwic2VhcmNoUGFyYW1zIiwidGhpc1NlYXJjaCIsIk51bWJlciIsImkiLCJ5Iiwic3RhdGUiLCJzdGF0ZV9hYmJyZXYiLCJzZWxlY3RlZCIsInNlbnNvciIsIlNlbnNvclR5cGUiLCJuZXR3b3JrIiwiTmV0d29ya05hbWUiLCJzdXJ2ZXkiLCJIV01TdXJ2ZXllZCIsIkhXTU9ubHkiLCJTZW5zb3JPbmx5IiwiUkRHT25seSIsIk9QRGVmaW5lZCIsImdldEZpbHRlcmVkU2l0ZXMiLCJFdmVudCIsIlN0YXRlIiwiam9pbiIsInJlc3BvbnNlIiwic2l0ZUxpc3QiLCJzdGF0ZUlzTG9hZGluZyIsInNob3dMb2FkaW5nIiwiYWxlcnQiLCJzdGF0dXNUZXh0Iiwic2VhcmNoU2l0ZXMiLCJzdGF0ZVN0cmluZyIsImV2SUQiLCJzdGF0ZUNsaWNrIiwiaW5kIiwiaW5kZXhPZiIsInNwbGljZSIsImNsZWFyRmlsdGVycyIsImZvckVhY2giLCJzdCIsIk1vZGFsQ29udHJvbGxlcnMiLCIkcSIsIiRzY2UiLCIkZmlsdGVyIiwibGVhZmxldE1hcmtlckV2ZW50cyIsImFsbERyb3BEb3duUGFydHMiLCJmaWxlVHlwZXMiLCJhZ2VuY3lMaXN0IiwibGF0bG9uZyIsInRoaXNTaXRlU3R1ZmYiLCJhbGxNZW1iZXJzIiwiU0lURV9IT1VTSU5HIiwiU2l0ZV9GaWxlcyIsIk1FTUJFUiIsIklOU1RSVU1FTlQiLCJJTlNUUlVNRU5UX1NUQVRVUyIsIkxBTkRPV05FUl9DT05UQUNUIiwiR0VPQ09ERSIsIkZJTEVfU1RBTVAiLCJGSUxFIiwiU09VUkNFIiwiU0VSVkVSX1VSTCIsIkhvcml6b250YWxEYXR1bUxpc3QiLCJIb3JDb2xsTWV0aG9kTGlzdCIsIlN0YXRlTGlzdCIsIkFsbENvdW50eUxpc3QiLCJzdGF0ZUNvdW50eUxpc3QiLCJETVMiLCJhbGxIb3VzaW5nVHlwZUxpc3QiLCJEZXBQcmlvcml0eUxpc3QiLCJOZXROYW1lTGlzdCIsIk5ldFR5cGVMaXN0IiwiUHJvcG9zZWRTZW5zIiwiU2Vuc29yRGVwbG95bWVudCIsInVzZXJSb2xlIiwiY2xvc2VTaXRlcyIsInNob3dNYXAiLCJzaXRlTGF0Iiwic2l0ZUxvbmciLCJodG1sRGVzY3JpcHRpb25UaXAiLCJ0cnVzdEFzSHRtbCIsIm1hcENlbnRlciIsImxhdCIsImxuZyIsInpvb20iLCJldmVudHMiLCJtYXBNYXJrZXJzIiwiZW5hYmxlIiwiZ2V0QXZhaWxhYmxlRXZlbnRzIiwiaWNvbnMiLCJzdG4iLCJ0eXBlIiwiaWNvblNpemUiLCJjbGFzc05hbWUiLCJuZXdTVE4iLCJpY29uQW5jaG9yIiwiYXppbXV0aCIsImRlZyIsIm1pbiIsInNlYyIsImF6aSIsInRvRml4ZWQiLCJ1cGRhdGVBZGRyZXNzT25seSIsIkxBRGVnIiwiYVNpdGUiLCJsYXRpdHVkZV9kZCIsIkxBTWluIiwiTEFTZWMiLCJMT0RlZyIsImxvbmdpdHVkZV9kZCIsIkxPTWluIiwiTE9TZWMiLCJBdXRob3JpemF0aW9uIiwiZ2V0QWRkcmVzc1BhcnRzIiwiTG9uZ2l0dWRlIiwiTGF0aXR1ZGUiLCJnZW9ncmFwaGllcyIsIkNvdW50aWVzIiwic3RhdGVGSVBTIiwiU1RBVEUiLCJjb3VudHlOYW1lIiwiTkFNRSIsInRoaXNTdGF0ZUlEIiwiZmlsdGVyIiwiYyIsInN0YXRlX2ZpcCIsInN0YXRlX2lkIiwidGhpc1N0YXRlIiwiY291bnR5IiwidG9hc3RyIiwiZXJyb3IiLCIkb24iLCJhcmdzIiwiZHJhZ2VuZExvY2F0aW9uIiwicGFyc2VGbG9hdCIsImxhdERNUyIsImRlZ190b19kbXMiLCJ0b1N0cmluZyIsImxhZERNU2FycmF5IiwibG9uZ0RNUyIsImxvbmdETVNhcnJheSIsImdldEFkZHJlc3MiLCJpc05hTiIsImdldFByb3hpbWl0eVNpdGVzIiwiQnVmZmVyIiwiYSIsInNpdGVfbm8iLCJpY29uIiwibWVzc2FnZSIsImRyYWdnYWJsZSIsIiRwcm9taXNlIiwiaG91c2VEaXJ0eSIsIm5ldFR5cGVEaXJ0eSIsInNpdGVIb3VzZVR5cGVzVGFibGUiLCJoZGF0dW1faWQiLCJoY29sbGVjdF9tZXRob2RfaWQiLCJkZWNEZWdPUmRtcyIsIm9yaWdpbmFsU2l0ZUhvdXNpbmdzIiwiY2hlY2tlZCIsImNoZWNrZWROYW1lIiwibGFuZG93bmVyIiwiYWRkTGFuZG93bmVyIiwiZGlzYWJsZVNlbnNvclBhcnRzIiwic2hvd1NpdGVIb3VzZVRhYmxlIiwic2l0ZUhvdXNlc01vZGVsIiwic2l0ZUhvdXNlc1RvUmVtb3ZlIiwiTmV0d29ya05BTUVUb0FkZCIsIk5ldHdvcmtOQU1FVG9SZW1vdmUiLCJOZXR3b3JrVFlQRVRvQWRkIiwiTmV0d29ya1RZUEVUb1JlbW92ZSIsInNpdGVOZXR3b3JrTmFtZXMiLCJzaXRlTmV0d29ya1R5cGVzIiwic2VydmVyVVJMIiwiZmlsZVR5cGVMaXN0IiwiZnQiLCJmaWxldHlwZSIsImFsbFNGaWxlcyIsImdldEFsbFNpdGVGaWxlcyIsIlNJVEVGaWxlcyIsInNmIiwiaHdtX2lkIiwiaW5zdHJ1bWVudF9pZCIsIm9iamVjdGl2ZV9wb2ludF9pZCIsInNpdGVJbWFnZUZpbGVzIiwiaGYiLCJmaWxldHlwZV9pZCIsInNob3dGaWxlRm9ybSIsInN0YW1wIiwiZ2V0U3RhbXAiLCJmaWxlSXRlbUV4aXN0cyIsInNhdmVGaWxlVXBsb2FkIiwic0ZpbGVJc1VwbG9hZGluZyIsImZpbGVQYXJ0cyIsIkZpbGVFbnRpdHkiLCJmaWxlX2lkIiwiYUZpbGUiLCJuYW1lIiwiZGVzY3JpcHRpb24iLCJwaG90b19kaXJlY3Rpb24iLCJmaWxlX2RhdGUiLCJzb3VyY2VfaWQiLCJwaG90b19kYXRlIiwiaXNfbndpcyIsIkZpbGUiLCJGaWxlMSIsImZkIiwiRm9ybURhdGEiLCJKU09OIiwic3RyaW5naWZ5IiwidXBsb2FkRmlsZSIsImZyZXNwb25zZSIsInN1Y2Nlc3MiLCJzcmMiLCJzZXRTdGFtcCIsImlzUGhvdG8iLCJmaWxlQmVsb25nc1RvIiwiZXhpc3RGaWxlSW5kZXgiLCJhbGxTRmlsZUluZGV4Iiwic2V0QWxsU2l0ZUZpbGVzIiwic2hvd0ltYWdlTW9kYWwiLCJpbWFnZSIsImltYWdlSWQiLCJzZXRTUkMiLCJzaG93RmlsZSIsImZpbGUiLCJhZ2VuY2llcyIsImV4aXN0SU1HRmlsZUluZGV4IiwiYVNvdXJjZSIsImNvcHkiLCJnZXRGaWxlSXRlbSIsIkxlbmd0aCIsImZpbGVUeXBlIiwiZkkiLCJsYXN0SW5kZXhPZiIsImZpbGVFeHQiLCJzdWJzdHJpbmciLCJtYXRjaCIsIkRhdGUiLCJxdWVyeSIsIkZVTExuYW1lIiwic291cmNlX25hbWUiLCJhZ2VuY3lOYW1lRm9yQ2FwIiwiYWdlbmN5X2lkIiwiYWdlbmN5X25hbWUiLCJtIiwibWVtYmVyX2lkIiwiZm5hbWUiLCJsbmFtZSIsInVwZGF0ZUFnZW5jeUZvckNhcHRpb24iLCJjcmVhdGVGaWxlIiwidmFsaWQiLCJTSVRFZmlsZUlzVXBsb2FkaW5nIiwidGhlU291cmNlIiwic2F2ZSIsInNhdmVGaWxlIiwidXBkYXRlIiwiZmlsZVJlc3BvbnNlIiwiZGVsZXRlRmlsZSIsIkRlbGV0ZU1vZGFsSW5zdGFuY2UiLCJ0ZW1wbGF0ZVVybCIsInJlc29sdmUiLCJuYW1lVG9SZW1vdmUiLCJ3aGF0IiwiZmlsZVRvUmVtb3ZlIiwiY2FuY2VsRmlsZSIsIm9wZW5MYXRNb2RhbCIsInciLCJsYXRNb2RhbCIsImZpZWxkRm9jdXMiLCJvcGVuTG9uZ01vZGFsIiwibG9uZ01vZGFsIiwiY2hlY2tWYWx1ZSIsImRpcmVjdGlvbiIsIk1hdGgiLCJmbG9vciIsIm1pbmZsb2F0IiwibGF0TG9uZ0NoYW5nZSIsIkRNU01vZGFsIiwibmV0VHlwZUNoZyIsIm50IiwibWFwIiwibmV0d29ya190eXBlX2lkIiwid2hpY2hPbmUiLCJuIiwibmV0d29ya19uYW1lX2lkIiwibm4iLCJkaW1BY3Rpb24iLCJzZW5zb3Jfbm90X2FwcHJvcHJpYXRlIiwieCIsImlzX3Blcm1hbmVudF9ob3VzaW5nX2luc3RhbGxlZCIsInVzZVNpdGVBZGRyZXNzIiwidXNlQWRkcmVzc2ZvckxPIiwiYWRkcmVzcyIsImNpdHkiLCJ6aXAiLCJsYW5kb3duZXJjb250YWN0X2lkIiwicHV0U2l0ZUFuZFBhcnRzIiwidGl0bGUiLCJwcmltYXJ5cGhvbmUiLCJsYW5kb3duZXJjb250YWN0aWQiLCJ1cGRhdGVTaXRlIiwiQ3JlYXRvciIsIkhvcml6b250YWxDb2xsZWN0TWV0aG9kIiwiSG9yaXpvbnRhbERhdHVtIiwiUHJpb3JpdHlOYW1lIiwiUmVtb3ZlUHJvbWlzZXMiLCJkZWZlciIsIkFkZFByb21pc2VzIiwic2hJRCIsImRlbFNIUHJvbSIsIm5uTCIsImRlbE5OUHJvbSIsImRlbGV0ZVNpdGVOZXR3b3JrTmFtZSIsInNpdGVJZCIsIm5ldHdvcmtOYW1lSWQiLCJudEwiLCJkZWxOVFByb20iLCJkZWxldGVTaXRlTmV0d29ya1R5cGUiLCJuZXR3b3JrVHlwZUlkIiwiaHQiLCJhZGRIdFByb20iLCJzaXRlX2hvdXNpbmdfaWQiLCJBbm5MIiwiYWRkTk5Qcm9tIiwicG9zdFNpdGVOZXR3b3JrTmFtZSIsIkFuVEwiLCJuZXR3b3JrX3R5cGVfbmFtZSIsImFkZE5UUHJvbSIsInBvc3RTaXRlTmV0d29ya1R5cGUiLCJhbGwiLCJzZW5kQmFjayIsIm1zZyIsImNvbnNvbGUiLCJmaW5pc2hQT1NUIiwic0lEIiwicG9zdFByb21pc2VzIiwiaHR5cGUiLCJ0eXBlX25hbWUiLCJoVFByb21pc2UiLCJuTmFtZSIsIm5OUHJvbWlzZSIsIm5UeXBlIiwiblRQcm9taXNlIiwiZGlzbWlzcyIsImNyZWF0ZSIsInBvc3RTaXRlQW5kUGFydHMiLCJjcmVhdGVkU2l0ZUlEIiwic2VsZWN0ZWRQcm9wb3NlZFNlbnNvcnMiLCJwIiwicHJvcFNlbnMiLCJpbmRleCIsInNkdCIsImRlcGxveW1lbnR0eXBlcyIsImRlcGxveW1lbnRfdHlwZV9pZCIsInNlbnNvcl90eXBlX2lkIiwic2Vuc29yVHlwZUlEIiwiaW5zdCIsImluc1Jlc3BvbnNlIiwiaW5zdFN0YXQiLCJzdGF0dXNfdHlwZV9pZCIsInRpbWVfc3RhbXAiLCJ0aW1lX3pvbmUiLCJob3VzaW5nX3R5cGVfaWQiLCJwcm9qTk5hbWVzIiwicHJvak5UeXBlIiwibmkiLCJueSIsInNPcGVuIiwic0ZpbGVPcGVuIiwiYWNjZXNzX2dyYW50ZWQiLCJpc051bSIsImV2dCIsInRoZUV2ZW50Iiwid2luZG93Iiwia2V5Iiwia2V5Q29kZSIsInJldHVyblZhbHVlIiwiSG91c2VUeXBlQ2xpY2siLCJob3VzZVQiLCJtYXRlcmlhbCIsIm5vdGVzIiwiYW1vdW50Iiwic0hfSUQiLCJoIiwic2hvd0xhbmRPd25lclBhcnQiLCJ1cGRhdGVDb3VudHlMaXN0IiwiY2FuY2VsIiwiZGVsZXRlU2l0ZSIsInRoaXNTaXRlIiwiZFNpdGVNb2RhbCIsInNpdGVObyIsImRlbGV0ZUl0Iiwic2l0ZUhXTXMiLCJkZXBsb3ltZW50VHlwZXMiLCJiYXJvU2Vuc29ycyIsIm1ldFNlbnNvcnMiLCJyZGdTZW5zb3JzIiwic3Rvcm1TZW5zb3JzIiwid2F2ZVNlbnNvcnMiLCJwcmVzVGVtcFNlbnNvcnMiLCJ0aGVybVNlbnNvcnMiLCJ3ZWJjYW1TZW5zb3JzIiwicmFpbmdhZ2VTZW5zb3JzIiwibGVhZmxldERhdGEiLCJtYXBTdHVmZiIsImFsbFNpdGVIV01zIiwiYWxsU2l0ZUJhcm9TZW5zb3JzIiwiYnMiLCJhbGxTaXRlTWV0U2Vuc29ycyIsImFsbFNpdGVSREdTZW5zb3JzIiwiYWxsU2l0ZVN0b3JtU2Vuc29ycyIsImFsbFNpdGVXYXZlU2Vuc29ycyIsImFsbFNpdGVQcmVzVGVtcFNlbnNvcnMiLCJhbGxTaXRlVGhlcm1TZW5zb3JzIiwiYWxsU2l0ZVdlYlNlbnNvcnMiLCJhbGxTaXRlUmFpblNlbnNvcnMiLCJhbGxEZXBsb3ltZW50VHlwZXMiLCJwYXRocyIsIm1hcmtlcnMiLCJsYXllciIsImV2ZW50SUQiLCJlYWNoSFdNIiwiZXZlbnRfaWQiLCJod21fbGFiZWwiLCJod21JY29uIiwiYWRkU2Vuc29ycyIsIm5vRXZlbnRIIiwiZWFjaG5vRUhXTSIsImJTZW5zb3IiLCJtZXRob2QiLCJiYXJvSWNvbiIsIm1zIiwibVNlbnNvciIsIm1ldEljb24iLCJycyIsInJTZW5zb3IiLCJyZGdJY29uIiwic3MiLCJzU2Vuc29yIiwic3Rvcm1JY29uIiwid3MiLCJ3U2Vuc29yIiwid2F2ZUljb24iLCJwcyIsInBTZW5zb3IiLCJwcmVzc3VyZUljb24iLCJ0cyIsInRTZW5zb3IiLCJ0aGVybUljb24iLCJ3ZWJzIiwid2ViU2Vuc29yIiwid2ViY2FtSWNvbiIsInJhaW5zIiwicmFpblNlbnNvciIsInJhaW5nYWdlSWNvbiIsIm5vRWJzIiwibm9FYlNlbnNvciIsIm5vRW1zIiwibm9FbVNlbnNvciIsIm5vRXJzIiwibm9FclNlbnNvciIsIm5vRXNzIiwibm9Fc1NlbnNvciIsIm5vRXdzIiwibm9Fd1NlbnNvciIsIm5vRXBzIiwibm9FcFNlbnNvciIsIm5vRXRzIiwibm9FdFNlbnNvciIsIm5vRXdlYnMiLCJub0V3ZWJTZW5zb3IiLCJub0VyYWlucyIsIm5vRXJhaW5TZW5zb3IiLCJwYXRoc09iaiIsImNpcmNsZU1hcmtlciIsInJhZGl1cyIsIndlaWdodCIsImNvbG9yIiwibGF0bG5ncyIsImFkZFNoYXBlIiwiZXh0ZW5kIiwibWluWm9vbSIsIm1hcmtlcnNMYXRMbmdBcnJheSIsImxheWVycyIsImJhc2VsYXllcnMiLCJ0b3BvIiwidmlzaWJsZSIsIm92ZXJsYXlzIiwic3RuU2l0ZXMiLCJ0aGlzU2l0ZU5ldHdvcmtOYW1lcyIsInRoaXNTaXRlTmV0d29ya1R5cGVzIiwidGhpc1NpdGVIb3VzaW5ncyIsIkZJTEVfVFlQRSIsIkFHRU5DWSIsImFsbEhvckRhdHVtcyIsImFsbEhvckNvbGxNZXRob2RzIiwiYWxsU3RhdGVzIiwiYWxsQ291bnRpZXMiLCJhbGxEZXBsb3lQcmlvcml0aWVzIiwiYWxsSG91c2luZ1R5cGVzIiwiYWxsTmV0d29ya05hbWVzIiwiYWxsTmV0d29ya1R5cGVzIiwiYWxsRGVwbG95VHlwZXMiLCJhbGxTZW5zb3JUeXBlcyIsIm1hcE9wZW4iLCJzaXRlT3BlbiIsIm9wT3BlbiIsInNlbnNvck9wZW4iLCJod21PcGVuIiwiZmlsZXNPcGVuIiwicGVha09wZW4iLCJ0aGlzU2l0ZUhvdXNlVHlwZU1vZGVsIiwib3BlblNpdGVDcmVhdGUiLCJkcm9wZG93blBhcnRzIiwic2l0ZU5OYW1lc1RvUGFzcyIsImFOTiIsInNpdGVOVHlwZXNUb1Bhc3MiLCJhTlQiLCJtb2RhbEluc3RhbmNlIiwia2V5Ym9hcmQiLCJiYWNrZHJvcCIsIndpbmRvd0NsYXNzIiwib3JpZ1NpdGVIb3VzZXMiLCJzSG91c2VUeXBlTW9kZWwiLCJzTmV0TmFtZXMiLCJzTmV0VHlwZXMiLCJsbyIsInNpdGVSZWxhdGVkU3R1ZmYiLCJnZXRBbGwiLCJyIiwiZ2V0TGFuZE93bmVyQ29udGFjdCIsImhkIiwiZGF0dW1faWQiLCJkYXR1bV9uYW1lIiwiaGMiLCJoY29sbGVjdF9tZXRob2QiLCJwcmlvcml0eV9pZCIsImRwIiwicHJpb3JpdHlfbmFtZSIsInoiLCJob3VzZVR5cGVOYW1lIiwiYiIsInNlbnNvck5vdEFwcHIiLCJnZXRTaXRlTGFuZE93bmVyIiwiYXBwbHkiLCJ3aGljaFF1aWNrIiwiYWxsT1BUeXBlcyIsImFsbFZlcnREYXR1bXMiLCJhbGxWZXJ0Q29sTWV0aG9kcyIsImFsbE9QUXVhbGl0aWVzIiwiYWxsSFdNVHlwZXMiLCJhbGxIV01RdWFsaXRpZXMiLCJhbGxNYXJrZXJzIiwiYWxsRXZlbnRzIiwiYWxsU2Vuc29yQnJhbmRzIiwiT0JKRUNUSVZFX1BPSU5UIiwiSFdNIiwiT1BfTUVBU1VSRSIsIk9QX0NPTlRST0xfSURFTlRJRklFUiIsIkNyZWF0ZVdoYXQiLCJsb2dnZWRJbk1lbWJlciIsInF1aWNrRm9ybSIsIm1ha2VBZGF0ZSIsImFEYXRlIiwieWVhciIsImdldEZ1bGxZZWFyIiwibW9udGgiLCJnZXRNb250aCIsImRheSIsImdldERhdGUiLCJzbGljZSIsIm1vbnRoTmFtZXMiLCJkYXRlV090aW1lIiwiRXZlbnROYW1lIiwiYU9QIiwiZGF0ZV9lc3RhYmxpc2hlZCIsInJlbW92ZU9QQ2FycmF5IiwiYWRkZWRJZGVudGlmaWVycyIsInNob3dDb250cm9sSURpbnB1dCIsImhvckRhdHVtTGlzdCIsImhvckNvbGxNZXRob2RMaXN0IiwiYWxsQ291bnR5TGlzdCIsIm9wVHlwZUxpc3QiLCJ2ZXJ0RGF0dW1MaXN0IiwidmVydENvbGxNZXRob2RMaXN0Iiwib3BRdWFsTGlzdCIsImFIV00iLCJod21fZW52aXJvbm1lbnQiLCJiYW5rIiwiZmxhZ19kYXRlIiwic3RpbGx3YXRlciIsImZsYWdfbWVtYmVyX2lkIiwiaHdtVHlwZUxpc3QiLCJod21RdWFsTGlzdCIsIm1hcmtlckxpc3QiLCJnZXRUaW1lWm9uZVN0YW1wIiwiZHNlbnQiLCJzZW5kVGhpcyIsIm9mZnNldCIsInpvbmUiLCJzdWJzdHIiLCJkZXBUeXBlTGlzdCIsImhvdXNlVHlwZUxpc3QiLCJ0aW1lWm9uZUxpc3QiLCJhU2Vuc29yIiwiYVNlbnNTdGF0dXMiLCJldmVudExpc3QiLCJzZW5zb3JUeXBlTGlzdCIsInNlbnNvckJyYW5kTGlzdCIsIkludGVydmFsVHlwZSIsIkRlcHRpbWVQYXJ0cyIsImdldERlcFR5cGVzIiwiZmlsdGVyZWREZXBsb3ltZW50VHlwZXMiLCJtYXRjaGluZ1NlbnNEZXBsaXN0Iiwic2QiLCJGVG9yTUVURVIiLCJGVG9yQ00iLCJhZGROZXdJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsImlkZW50aWZpZXJfdHlwZSIsImRlYWxXaXRoVGltZVN0YW1wYjRTZW5kIiwidXRjRGF0ZVRpbWUiLCJ0b1VUQ1N0cmluZyIsImRhdGVwaWNrcnMiLCIkZXZlbnQiLCJzdG9wUHJvcGFnYXRpb24iLCJjaG9vc2VRdWFsaXR5IiwiaHdtX3VuY2VydGFpbnR5IiwiaHdtX3F1YWxpdHlfaWQiLCJtaW5fcmFuZ2UiLCJtYXhfcmFuZ2UiLCJjb21wYXJlVG9VbmNlcnRhaW50eSIsIm1hdGNoaW5nUXVhbElkIiwiaW5jb25ncnVlbnRNb2RhbCIsInNlc3Npb25FdmVudE5hbWUiLCJzZXNzaW9uRXZlbnRFeGlzdHMiLCJVbnF1YW50Q2hlY2tlZCIsInVucXVhbnRpZmllZCIsInVuY2VydGFpbnR5IiwidHJpbU9QIiwib3AiLCJPQkpfUFQiLCJlbGV2X2Z0Iiwib3BfaXNfZGVzdHJveWVkIiwib3Bfbm90ZXMiLCJ2ZGF0dW1faWQiLCJ2Y29sbGVjdF9tZXRob2RfaWQiLCJvcF90eXBlX2lkIiwiZGF0ZV9yZWNvdmVyZWQiLCJvcF9xdWFsaXR5X2lkIiwiUmVtb3ZlSUQiLCJvcENvbnRyb2wiLCJvcF9jb250cm9sX2lkZW50aWZpZXJfaWQiLCJmb3JtYXREZWZhdWx0cyIsInRoZU9QIiwidGFwZWRvd24iLCJPcGVuIiwic2hvd05lZWRPUGZpcnN0TW9kYWwiLCJuZWVkT1BNb2RhbCIsInRhcGVEb3duVGFibGUiLCJyZW1vdmVPUCIsInJlbW92ZU9QTWVhcyIsInllc09yTm8iLCJPUHNGb3JUYXBlRG93biIsIk9QTWVhc3VyZSIsImFkZFRhcGVkb3duIiwic2Vuc29yX2VsZXZhdGlvbiIsIndzX2VsZXZhdGlvbiIsImdzX2VsZXZhdGlvbiIsInNob3dUYXBlZG93blBhcnQiLCJvcF9uYW1lIiwiZWxldmF0aW9uIiwiVmRhdHVtIiwidmQiLCJkYXR1bV9hYmJyZXZpYXRpb24iLCJzaXRlRXJyb3JzIiwib3BFcnJvcnMiLCJod21FcnJvcnMiLCJ0aGVGb3JtIiwicXVpY2siLCIkdmFsaWQiLCJ3YXRlcmJvZHkiLCJjcmVhdGVkT1AiLCJPUHRvUE9TVCIsIm9wYyIsInRoaXNPUENvbnRyb2xJRCIsInN1cnZleV9kYXRlIiwic3VydmV5X21lbWJlcl9pZCIsImNyZWF0ZWRTZW5zb3IiLCJpbnRlcnZhbCIsInN0YXRSZXNwb25zZSIsInRoaXNUYXBlIiwiaW5zdHJ1bWVudF9zdGF0dXNfaWQiLCIkbmFtZSIsImZpbmQiLCJzaXRlX2Rlc2NyaXB0aW9uIiwiJGludmFsaWQiLCIkaW52YWxpZHYiLCJkZSIsImh3bV90eXBlX2lkIiwiU2V0dGluZ3NDb250cm9sbGVycyIsInNldHRpbmdzIiwiY2hhbmdlVmlldyIsInZpZXciLCJhbGxEcm9wZG93bnMiLCJhbGxEZXBUeXBlcyIsInRoaXNTZW5zb3IiLCJTZW5zb3JTaXRlIiwic2l0ZU9QcyIsIkRBVEFfRklMRSIsImRlcFNlbmZpbGVJc1VwbG9hZGluZyIsIkRlcFNlbnNvckZpbGVzIiwiZGVwU2Vuc0ltYWdlRmlsZXMiLCJzaG93TldJU0ZpbGVGb3JtIiwiT1BzUHJlc2VudCIsInJlbW92ZU9QTGlzdCIsInNob3dFdmVudEREIiwiYWRtaW5DaGFuZ2VkIiwid2hpY2hCdXR0b24iLCJud2lzSGVhZGVyVGlwIiwiREVQdmFsIiwiUkVUdmFsIiwic2Vuc29yRGF0YU5XSVMiLCJkZXBPcGVuIiwiTldJU0ZpbGVPcGVuIiwiZ2V0RGF0ZVRpbWVQYXJ0cyIsInRoZURhdGUiLCJpc0RhdGUiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJjYWxsIiwiZGEiLCJtaSIsImRhdGVPcHRpb25zIiwic3RhcnRpbmdEYXkiLCJzaG93V2Vla3MiLCJkYXRhX2ZpbGVfaWQiLCJkYXRhZmlsZSIsImRmIiwicHJvY2Vzc29yIiwicHJvY2Vzc29yX2lkIiwiY29sbGVjdF9kYXRlIiwiZ29vZF9zdGFydCIsImdvb2RfZW5kIiwiZHQiLCJmaXhEYXRlIiwidXRjU3RhcnREYXRlVGltZSIsInV0Y0VuZERhdGVUaW1lIiwic2kiLCJlaSIsImRmUmVzb25zZSIsInRoaXNTZW5zb3JTaXRlIiwic2hvd05XSVNGaWxlIiwiZiIsInNlbnNvck5XSVNGaWxlcyIsIk5XSVNGaWxlIiwiRmlsZVR5cGUiLCJOV0lTREYiLCJud2lzUHJvY2Vzc29yIiwidXNnc19zaWQiLCJwb3N0QXBwcm92YWxGb3JOV0lTZmlsZSIsIkRGaWQiLCJhcHByb3ZlTldJU0RGIiwiYXBwcm92YWxSZXNwb25zZSIsImFwcHJvdmFsX2lkIiwiY3JlYXRlTldJU0ZpbGUiLCJkZXBOV0lTU2VuZmlsZUlzVXBsb2FkaW5nIiwiTmRmUmVzcG9uc2UiLCJGcmVzcG9uc2UiLCJzYXZlTldJU0ZpbGUiLCJkZWxldGVOV0lTRmlsZSIsImNhbmNlbE5XSVNGaWxlIiwiT1BjaG9zZW4iLCJvcENob3NlbiIsIm9wSSIsIm8iLCJkZXBUYXBlQ29weSIsImRlcFN0dWZmQ29weSIsImNyZWF0ZU9yRWRpdCIsInRhcGVEb3duVG9SZW1vdmUiLCJ0SW5kIiwib3BfbWVhc3VyZW1lbnRzX2lkIiwic2hvd0NoYW5nZUV2ZW50REQiLCJDaGFuZ2VFdmVudCIsImV2ZW50X25hbWUiLCJMb2dnZWRJbk1lbWJlciIsInNlbnNvck9iamVjdFRvU2VuZEJhY2siLCJ1dGNEYXRlVGltZVMiLCJ1dGNEYXRlVGltZUQiLCJEaSIsInVwZGF0ZWRTZW5zb3IiLCJ1cGRhdGVkU2VuU3RhdCIsImRlcGxveW1lbnRUeXBlIiwiaG91c2luZ1R5cGUiLCJzZW5zb3JCcmFuZCIsInNlbnNvcl9icmFuZF9pZCIsImJyYW5kX25hbWUiLCJzZW5zb3JUeXBlIiwidCIsInJ0IiwiaWRUb1JlbW92ZSIsImF0IiwiREVQdGhpc1RhcGUiLCJ0YXBlUmVzcG9uc2UiLCJpbnN0cnVtZW50X3N0YXR1c2VzSG9sZGVyIiwiaW5zdHJ1bWVudF9zdGF0dXMiLCJkZXBsb3kiLCJTZW5zb3JGb3JtIiwiZGVwU2VuU3RhdCIsInByZXZpb3VzU3RhdGVTdGF0dXMiLCJkZWxldGVTIiwic2Vuc29yVG9SZW1vdmUiLCJsIiwiYWkiLCJ0aW1lUGFydHMiLCJEZXBsb3llciIsImdldEluc3RTdGF0T1BNZWFzdXJlcyIsImluc3RydW1lbnRTdGF0dXNJZCIsInNlbnNNZWFzdXJlcyIsIndoaWNoT1AiLCJteURhdGEiLCJ3YW5uYUVkaXREZXAiLCJjYW5jZWxEZXBFZGl0IiwiYWxsRXZlbnRMaXN0IiwiYWxsVkRhdHVtTGlzdCIsImFsbFN0YXR1c1R5cGVzIiwiYWxsSW5zdENvbGxDb25kIiwiZGVwU2Vuc1N0YXR1cyIsIlZEYXR1bSIsInYiLCJERVB0YXBlRG93blRhYmxlIiwic3RhdHVzVHlwZUxpc3QiLCJjb2xsZWN0Q29uZExpc3QiLCJhUmV0cmlldmFsIiwiZHRwYXJ0cyIsIlJldHJpZXZlciIsImFtIiwiZGVwVGltZVN0YW1wYjRTZW5kIiwicmV0dXJuVGhpcyIsInJldHJpZXZlUyIsImRlcFNlblRTIiwicmV0U2VuVFMiLCJ0cmlnZ2VyIiwiY3JlYXRlUmV0U2VucyIsImluc3RDb2xsZWN0aW9uIiwiaW5zdF9jb2xsZWN0aW9uX2lkIiwiY29uZGl0aW9uIiwiYWxsRGVwRHJvcGRvd25zIiwiZnVsbFNlbmZpbGVJc1VwbG9hZGluZyIsInNlbnNvckZpbGVzIiwic2Vuc0ltYWdlRmlsZXMiLCJERVBPUHNGb3JUYXBlRG93biIsIlJFVE9Qc0ZvclRhcGVEb3duIiwiRGVwbG95ZWRTZW5zb3JTdGF0IiwiREVQcmVtb3ZlT1BMaXN0IiwiREVQT1BjaG9zZW4iLCJERVBvcENob3NlbiIsIkRFUE9QTWVhc3VyZSIsIkRFUHJlbW92ZU9QTWVhcyIsIkRFUG9rIiwiREVQY2FuY2VsIiwiREVQdGFwZURvd25Ub1JlbW92ZSIsIkRFUHRJbmQiLCJERVByZXNwb25zZSIsIkRFUHNlbnNNZWFzdXJlcyIsIlJldHJpZXZlZFNlbnNvclN0YXQiLCJtb3N0UmVjZW50U3RhdHVzIiwidmRhdHVtTmFtZSIsIlJFVHJlbW92ZU9QTGlzdCIsIlJFVHRhcGVEb3duVGFibGUiLCJSRVRPUGNob3NlbiIsIlJFVG9wQ2hvc2VuIiwiUkVUT1BNZWFzdXJlIiwicmV0VGFwZUNvcHkiLCJyZXRTdHVmZkNvcHkiLCJSRVRyZW1vdmVPUE1lYXMiLCJSRVRvayIsIlJFVGNhbmNlbCIsIlJFVHRhcGVEb3duVG9SZW1vdmUiLCJSRVR0SW5kIiwiUkVUcmVzcG9uc2UiLCJSRVRzZW5zTWVhc3VyZXMiLCJyZXRPcGVuIiwic2Vuc1R5cGUiLCJzYXZlRGVwbG95ZWQiLCJERVBpZFRvUmVtb3ZlIiwiYWxsU3RhdHVzSG9sZGVyIiwid2FubmFFZGl0UmV0Iiwic2F2ZVJldHJpZXZlZCIsInVwZGF0ZWRSZXRTZW5zb3IiLCJzdGF0c0hvbGRlciIsIlJFVGlkVG9SZW1vdmUiLCJSRVR0aGlzVGFwZSIsImNhbmNlbFJldEVkaXQiLCJBcHByb3ZhbEluZm8iLCJnZXRERkFwcHJvdmFsIiwiYXBwcm92YWxEYXRlIiwiYXBwcm92YWxfZGF0ZSIsIk1lbWJlciIsImFtZW0iLCJhcHByb3ZlREYiLCJ0aGlzREYiLCJhcHByb3ZlTW9kYWwiLCJhcHByb3ZlSXQiLCJ1bkFwcHJvdmVERiIsInVuYXBwcm92ZU1vZGFsIiwidW5BcHByb3ZlSXQiLCJOZGZSZXNvbnNlIiwiSW5zdHJ1bWVudF9TZXJ2aWNlIiwidGhpc1NpdGVTZW5zb3JzIiwiYWxsQWdlbmNpZXMiLCJhbGxGaWxlVHlwZXMiLCJERVBMT1lNRU5UX1RZUEUiLCJTVEFUVVNfVFlQRSIsIklOU1RfQ09MTF9DT05ESVRJT04iLCJzZW5zb3JDb3VudCIsInRvdGFsIiwiZGVwbG95VHlwZUxpc3QiLCJ0ZW1wRGVwVHlwZUlEIiwic2Vuc0RlcFR5cGVzIiwic2hvd1Byb3Bvc2VkIiwiY29ycmVjdE9yZGVyU1MiLCJzZW5zb3JTdGF0dXNlcyIsInByb3Bvc2VkU3RhdCIsImRlcGxveWVkU3RhdCIsInJldExvc3RTdGF0IiwiU2l0ZVNlbnNvcnMiLCJzZXRBbGxTaXRlU2Vuc29ycyIsIlNlbnNGaWxlVHlwZXMiLCJzZnQiLCJzaG93SGlkZVByb3Bvc2VkIiwiQWRkUHJvcG9zZWQiLCJUaW1lX1NUQU1QIiwicHJvcG9zZWRUb0FkZCIsInByb3BTdGF0VG9BZGQiLCJjcmVhdGVkUHJvcFNlbnNvciIsImR0bCIsImRlcCIsInNob3dSZXRyaWV2ZU1vZGFsIiwic2Vuc29yQ2xpY2tlZCIsImluZGV4Q2xpY2tlZCIsImFsbGluZGV4IiwiZ2V0U2l0ZU9QcyIsInJldHJpZXZlZFNlbnNvciIsImluZGV4Q2xpY2tlZDEiLCJzaG93UHJvcG9zZWRTZW5zb3IiLCJwcm9wb3NlZFNlbnNvckNsaWNrZWQiLCJwcm9wSW5kZXgiLCJwcm9wTW9kYWxJbnN0YW5jZSIsInByb3Bvc2VkU2Vuc29yIiwidGhpc1Byb3Bvc2VkU2Vuc29yIiwiZGVsZXRlUHJvcG9zZWQiLCJzaG93U2Vuc29yTW9kYWwiLCJwYXNzQWxsTGlzdHMiLCJzaG93RnVsbFNlbnNvck1vZGFsIiwiZGVwbG95ZWRTdHVmZiIsIkNPTlRBQ1RfVFlQRSIsIkRFUExPWU1FTlRfUFJJT1JJVFkiLCJFVkVOVF9TVEFUVVMiLCJFVkVOVF9UWVBFIiwiSE9SSVpPTlRBTF9DT0xMX01FVEhPRFMiLCJIT1JJWk9OVEFMX0RBVFVNIiwiSE9VU0lOR19UWVBFIiwiSFdNX1FVQUxJVFkiLCJIV01fVFlQRSIsIk1BUktFUiIsIk5FVFdPUktfTkFNRSIsIk9QX1FVQUxJVFkiLCJPUF9UWVBFIiwiU0VOU09SX0JSQU5EIiwiU0VOU09SX1RZUEUiLCJORVRXT1JLX1RZUEUiLCJWRVJUSUNBTF9DT0xMX01FVEhPRCIsIlZFUlRJQ0FMX0RBVFVNIiwiYWxsQ29udGFjdFR5cGVzIiwiYWxsRXZlbnRTdGF0cyIsImFsbEV2ZW50VHlwZXMiLCJhbGxIb3VzZVR5cGVzIiwiYWxsSFdNcXVhbGl0aWVzIiwiYWxsSFdNdHlwZXMiLCJhbGxJbnN0Q29sbGVjdENvbmRpdGlvbnMiLCJhbGxPYmpQdFF1YWxpdGllcyIsImFsbE9ialB0VHlwZXMiLCJhbGxWZXJ0aWNhbENvbGxNZXRob2RzIiwiYWxsVmVydGljYWxEYXR1bXMiLCJhY2NvdW50Um9sZSIsImxvb2t1cEZvcm0iLCJzaG93QWRkQWdGb3JtIiwiYWRkQWdCdXR0b25TaG93aW5nIiwibmV3QWciLCJzaG93QWRkQWdDbGlja2VkIiwiTmV2ZXJNaW5kQWciLCJBZGRBZ2VuY3kiLCJzYXZlQWdlbmN5IiwicmV0dXIiLCJkZWxldGVBZ2VuY3kiLCJhZyIsImtleVRvUmVtb3ZlIiwic2hvd1N0YXRlQWJicmV2IiwiY29udGFjdFR5cGVMaXN0Iiwic2hvd0FkZENURm9ybSIsImFkZENUQnV0dG9uU2hvd2luZyIsIm5ld0NUIiwic2hvd0FkZENUQ2xpY2tlZCIsIk5ldmVyTWluZENUIiwiQWRkQ29udGFjdFR5cGUiLCJzYXZlQ29udGFjdFR5cGUiLCJkZWxldGVDb250YWN0VHlwZSIsImN0IiwiY29udGFjdF90eXBlX2lkIiwiZGVwbG95UHJpb3JpdHlMaXN0Iiwic2hvd0FkZERQRm9ybSIsImFkZERQQnV0dG9uU2hvd2luZyIsIm5ld0RQIiwic2hvd0FkZERQQ2xpY2tlZCIsIk5ldmVyTWluZERQIiwiQWRkRGVwUHJpb3JpdHkiLCJzYXZlRGVwUHJpb3JpdHkiLCJkZWxldGVEZXBQcmlvcml0eSIsImV2ZW50U3RhdExpc3QiLCJzaG93QWRkRVNGb3JtIiwiYWRkRVNCdXR0b25TaG93aW5nIiwibmV3RVMiLCJzaG93QWRkRVNDbGlja2VkIiwiTmV2ZXJNaW5kRVMiLCJBZGRFdmVudFN0YXQiLCJzYXZlRXZlbnRTdGF0IiwiZGVsZXRlRXZlbnRTdGF0IiwiZXMiLCJldmVudF9zdGF0dXNfaWQiLCJldmVudFR5cGVMaXN0Iiwic2hvd0FkZEVURm9ybSIsImFkZEVUQnV0dG9uU2hvd2luZyIsIm5ld0VUIiwic2hvd0FkZEVUQ2xpY2tlZCIsIk5ldmVyTWluZEVUIiwiQWRkRXZlbnRUeXBlIiwic2F2ZUV2ZW50VHlwZSIsImRlbGV0ZUV2ZW50VHlwZSIsImV0IiwiZXZlbnRfdHlwZV9pZCIsInNob3dBZGRGVEZvcm0iLCJhZGRGVEJ1dHRvblNob3dpbmciLCJuZXdGVCIsInNob3dBZGRGVENsaWNrZWQiLCJOZXZlck1pbmRGVCIsIkFkZEZpbGVUeXBlIiwic2F2ZUZpbGVUeXBlIiwiZGVsZXRlRmlsZVR5cGUiLCJob3JDb2xNZXRoTGlzdCIsInNob3dBZGRIQ01Gb3JtIiwiYWRkSENNQnV0dG9uU2hvd2luZyIsIm5ld0hDTSIsInNob3dBZGRIQ01DbGlja2VkIiwiTmV2ZXJNaW5kSENNIiwiQWRkSG9yQ29sbE1ldGhvZCIsInNhdmVIb3JDb2xsTWV0aG9kIiwiZGVsZXRlSG9yQ29sbE1ldGhvZCIsImhjbSIsImhvckRhdExpc3QiLCJzaG93QWRkSERGb3JtIiwiYWRkSERCdXR0b25TaG93aW5nIiwibmV3SEQiLCJzaG93QWRkSERDbGlja2VkIiwiTmV2ZXJNaW5kSEQiLCJBZGRIb3JEYXR1bSIsInNhdmVIb3JEYXR1bSIsImRlbGV0ZUhvckRhdHVtIiwic2hvd0FkZEhURm9ybSIsImFkZEhUQnV0dG9uU2hvd2luZyIsIm5ld0hUIiwic2hvd0FkZEhUQ2xpY2tlZCIsIk5ldmVyTWluZEhUIiwiQWRkSG91c2VUeXBlIiwic2F2ZUhvdXNlVHlwZSIsImRlbGV0ZUhvdXNlVHlwZSIsInNob3dBZGRIV01RRm9ybSIsImFkZEhXTVFCdXR0b25TaG93aW5nIiwibmV3SFdNUSIsInNob3dBZGRIV01RQ2xpY2tlZCIsIk5ldmVyTWluZEhXTVEiLCJBZGRId21RdWFsaXR5Iiwic2F2ZUh3bVF1YWxpdHkiLCJkZWxldGVId21RdWFsaXR5IiwiaHdtcSIsInNob3dBZGRIV01URm9ybSIsImFkZEhXTVRCdXR0b25TaG93aW5nIiwibmV3SFdNVCIsInNob3dBZGRIV01UQ2xpY2tlZCIsIk5ldmVyTWluZEhXTVQiLCJBZGRId21UeXBlIiwic2F2ZUh3bVR5cGUiLCJkZWxldGVId21UeXBlIiwiaHdtdCIsImluc3RDb2xDb25kTGlzdCIsInNob3dBZGRJQ0NGb3JtIiwiYWRkSUNDQnV0dG9uU2hvd2luZyIsIm5ld0lDQyIsInNob3dBZGRJQ0NDbGlja2VkIiwiTmV2ZXJNaW5kSUNDIiwiQWRkSW5zdENvbENvbmQiLCJzYXZlSW5zdENvbENvbmQiLCJkZWxldGVJbnN0Q29sQ29uZCIsImljYyIsIm1hcmtMaXN0Iiwic2hvd0FkZE1Gb3JtIiwiYWRkTUJ1dHRvblNob3dpbmciLCJuZXdNIiwic2hvd0FkZE1DbGlja2VkIiwiTmV2ZXJNaW5kTSIsIkFkZE1hcmtlciIsInNhdmVNYXJrZXIiLCJkZWxldGVNYXJrZXIiLCJtYXJrZXJfaWQiLCJuZXROYW1lTGlzdCIsInNob3dBZGROTkZvcm0iLCJhZGROTkJ1dHRvblNob3dpbmciLCJuZXdOTiIsInNob3dBZGROTkNsaWNrZWQiLCJOZXZlck1pbmROTiIsIkFkZE5ldHdvcmtOYW1lIiwic2F2ZU5ldHdvcmtOYW1lIiwiZGVsZXRlTmV0d29ya05hbWUiLCJzaG93QWRkT1BRRm9ybSIsImFkZE9QUUJ1dHRvblNob3dpbmciLCJuZXdPUFEiLCJzaG93QWRkT1BRQ2xpY2tlZCIsIk5ldmVyTWluZE9QUSIsIkFkZE9QUXVhbGl0eSIsInNhdmVPUFF1YWxpdHkiLCJkZWxldGVPUFF1YWxpdHkiLCJvcHEiLCJzaG93QWRkT1BURm9ybSIsImFkZE9QVEJ1dHRvblNob3dpbmciLCJuZXdPUFQiLCJzaG93QWRkT1BUQ2xpY2tlZCIsIk5ldmVyTWluZE9QVCIsIkFkZE9QVHlwZSIsInNhdmVPUFR5cGUiLCJkZWxldGVPUFR5cGUiLCJvcHQiLCJvYmplY3RpdmVfcG9pbnRfdHlwZV9pZCIsInNlbnNCcmFuZExpc3QiLCJzaG93QWRkU0JGb3JtIiwiYWRkU0JCdXR0b25TaG93aW5nIiwibmV3U0IiLCJzaG93QWRkU0JDbGlja2VkIiwiTmV2ZXJNaW5kU0IiLCJBZGRTZW5zb3JCcmFuZCIsInNhdmVTZW5zb3JCcmFuZCIsImRlbGV0ZVNlbnNvckJyYW5kIiwic2IiLCJzaG93QWRkRFRGb3JtIiwiYWRkRFRCdXR0b25TaG93aW5nIiwibmV3RFQiLCJzaG93QWRkRFRDbGlja2VkIiwiTmV2ZXJNaW5kRFQiLCJBZGREZXBUeXBlIiwic2F2ZURlcFR5cGUiLCJkZWxldGVEZXBUeXBlIiwic3RhdFR5cGVMaXN0Iiwic2hvd0FkZFN0YXRURm9ybSIsImFkZFN0YXRUQnV0dG9uU2hvd2luZyIsIm5ld1N0YXRUIiwic2hvd0FkZFN0YXRUQ2xpY2tlZCIsIk5ldmVyTWluZFN0YXRUIiwiQWRkU3RhdHVzVHlwZSIsIm5ld1N0YXRUVCIsInNhdmVTdGF0dXNUeXBlIiwiZGVsZXRlU3RhdHVzVHlwZSIsInN0YXRUIiwic2Vuc1R5cGVMaXN0IiwibmV3RGVwVHlwZVJlbGF0aW5nIiwiY29tbWFTZXBEZXBNRVRIT0RTIiwiZm9ybWF0dGVkU2Vuc1R5cGVMaXN0IiwiZ2V0U2Vuc29yRGVwbG95bWVudFR5cGVzIiwiZGVwcyIsIkRlcFR5cGVzIiwiRGVwTVN0cmluZ3MiLCJEZXBNRVRIT0RTdHJpbmdzIiwic2hvd0RlcFR5cGVzIiwiU2VuVCIsInJlbW92ZVRoZXNlRGVwVHlwZXMiLCJjaGVja0xpc3RDaGVjayIsIm9yaWdpbmFsQ2hlY2tlZCIsIm5vd0NoZWNrZWQiLCJvYyIsImRlbGV0ZURlcCIsInNob3dBZGRTZW5URm9ybSIsImFkZFNlblRCdXR0b25TaG93aW5nIiwibmV3U2VuVCIsInNob3dBZGRTZW5UQ2xpY2tlZCIsIk5ldmVyTWluZFNlblQiLCJhZGREZXBUeXBlVG9OZXdTZW5UIiwiQWRkU2Vuc29yVHlwZSIsIm5ld1NlbnNvciIsInJlbGF0ZWREZXBzIiwibmR0IiwiYWRkU2Vuc29yRGVwbG95bWVudFR5cGUiLCJzZW5zb3JUeXBlSWQiLCJkZXBsb3ltZW50VHlwZUlkIiwicmVzcG9uc2UxIiwic2F2ZVNlbnNvclR5cGUiLCJEVHMiLCJ0aGlzRFQiLCJlcnJvclJlc3BvbnNlMSIsInJkdCIsInJlbW92ZVNlbnNvckRlcGxveW1lbnRUeXBlIiwiRGVwbG95bWVudFR5cGVJZCIsInJlc3BvbnNlMiIsImRlbGV0ZVNlbnNvclR5cGUiLCJzZW5UIiwiU1QiLCJuZXRUeXBlTGlzdCIsInNob3dBZGROVEZvcm0iLCJhZGROVEJ1dHRvblNob3dpbmciLCJuZXdOVCIsInNob3dBZGROVENsaWNrZWQiLCJOZXZlck1pbmROVCIsIkFkZE5ldFR5cGUiLCJzYXZlTmV0VHlwZSIsImRlbGV0ZU5ldFR5cGUiLCJ2ZXJ0Q29sTWV0aExpc3QiLCJzaG93QWRkVkNNRm9ybSIsImFkZFZDTUJ1dHRvblNob3dpbmciLCJuZXdWQ00iLCJzaG93QWRkVkNNQ2xpY2tlZCIsIk5ldmVyTWluZFZDTSIsIkFkZFZlcnRDb2xNZXRoIiwic2F2ZVZlcnRDb2xNZXRoIiwiZGVsZXRlVmVydENvbE1ldGgiLCJ2Y20iLCJ2ZXJ0RGF0TGlzdCIsInNob3dBZGRWREZvcm0iLCJhZGRWREJ1dHRvblNob3dpbmciLCJuZXdWRCIsInNob3dBZGRWRENsaWNrZWQiLCJOZXZlck1pbmRWRCIsIkFkZFZlcnREYXR1bSIsInNhdmVWZXJ0RGF0dW0iLCJkZWxldGVWZXJ0RGF0dW0iLCJDT05UQUNUIiwiUkVQT1JUIiwiJHBhcmVudCIsIm5lZWRUb0NvbXBsZXRlIiwibmV3UmVwb3J0IiwicmVwb3J0X2RhdGUiLCJ5ciIsIm1vIiwiRGVwbG95U3RhZmYiLCJHZW5TdGFmZiIsIklubGFuZFN0YWZmIiwiQ29hc3RTdGFmZiIsIldhdGVyU3RhZmYiLCJvcGVuQ29udGFjdHMiLCJvcGVuQ291bnRzIiwib3BlblBlcnNvbm5lbCIsInJlcG9ydGluZ19tZXRyaWNzX2lkIiwiZGlzYWJsZWQiLCJnZXRFdmVudE5hbWUiLCJ0aGlzRXZlbnQiLCJnZXRSZXBvcnRDb250YWN0cyIsInJlcG9ydElEIiwiZ2V0Q29udGFjdE1vZGVsIiwiUmVwb3J0TWV0cmljIiwiY29udGFjdFR5cGUiLCJwb3N0UmVwb3J0Q29udGFjdHMiLCJlcXVhbHMiLCJhZGRSZXBvcnRDb250YWN0IiwicmVwb3J0SWQiLCJjb250YWN0VHlwZUlkIiwiZXJyb3JSZXNwb25zZTIiLCJyZXNwb25zZTMiLCJlcnJvclJlc3BvbnNlMyIsInJlc3BvbnNlNCIsImVycm9yUmVzcG9uc2U0IiwicmVzcG9uc2U1IiwiZXJyb3JSZXNwb25zZTUiLCJyZW1vdmVJbmNvbXBsZXRlIiwibWVtYmVySW5jb21wbGV0ZXMiLCJQb3N0UHV0UmVwb3J0QW5kUmVwb3J0Q29udGFjdHMiLCJ0b0RhdGVTdHJpbmciLCJjb21wbGV0ZSIsImlzQ29tcGxldGVkIiwiZnVsbFJlcG9ydEZvcm0iLCJzdWJtaXQiLCIkc2V0UHJpc3RpbmUiLCIkdmlld1ZhbHVlIiwicmVwb3J0cyIsInBvcHVsYXRlWWVzdFRvdHMiLCJmb3JtYXREYXRlIiwic2V0SG91cnMiLCJ0b0lTT1N0cmluZyIsIm15RGF0ZSIsInRoZVN0YXRlIiwiZUlEIiwicHJldmlvdXNEYXkiLCJ5ZXN0ZXJkYXlScHQiLCJyZXBEYXRlIiwieWVzdF9maWVsZHBlcnMiLCJ0b2RfZmllbGRwZXJzIiwieWVzdF9vZmZpY2VwZXJzIiwidG9kX29mZmljZXBlcnMiLCJnZXREYWlseVJlcG9ydFRvdHMiLCJyZXNwb25zZTYiLCJkZXBfcmFwZGVwbF9nYWdlIiwicmVjX3JhcGRlcGxfZ2FnZSIsImxvc3RfcmFwZGVwbF9nYWdlIiwiZGVwX3d0cmxldl9zZW5zb3IiLCJyZWNfd3RybGV2X3NlbnNvciIsImxvc3Rfd3RybGV2X3NlbnNvciIsImRlcF93dl9zZW5zIiwicmVjX3d2X3NlbnMiLCJsb3N0X3d2X3NlbnMiLCJkZXBfYmFyb21ldHJpYyIsInJlY19iYXJvbWV0cmljIiwibG9zdF9iYXJvbWV0cmljIiwiZGVwX21ldGVvcm9sb2dpY2FsIiwicmVjX21ldGVvcm9sb2dpY2FsIiwibG9zdF9tZXRlb3JvbG9naWNhbCIsImh3bV9mbGFnZ2VkIiwiaHdtX2NvbGxlY3RlZCIsImVycm9yUmVzcG9uc2U2Iiwic2F2ZVJlcG9ydCIsIk1lbWJlckxvZ2dlZEluIiwicG9wdWxhdGVEZXBsb3llciIsImdldEluY29tcGxldGVSZXBvcnQiLCJpciIsIiRzZXREaXJ0eSIsInJlcG9ydCIsInN1Ym1pdFBlcnNvbiIsImNvbnRhY3RzIiwiUmVwb3J0VmlldyIsIlJlcG9ydCIsInN1Ym1pdHRlciIsImRlcGxveVN0YWZmIiwiZ2VuZXJhbFN0YWZmIiwiaW5sYW5kU3RhZmYiLCJjb2FzdFN0YWZmIiwid2F0ZXJTdGFmZiIsInByaW50IiwiYWxsUmVwb3J0c0FnYWluIiwicmVwb3J0c1RvRGF0ZSIsInRvZGF5UnB0cyIsInllc3RlcmRheVJwdHMiLCJwaWNrRGF0ZVJwdHMiLCJwaWNrQWRhdGVSZXBvcnRzIiwidG9kYXkiLCJ5ZXN0ZXJkYXkiLCJzZXREYXRlIiwiVEhJU19EQVRFIiwiVmlld1JlcG9ydCIsIm1lbWJlciIsIm1lbSIsIm1lbWJlckFnZW5jeSIsImFnZW5jeV9hZGRyZXNzIiwiZm9ybWF0UmVwb3J0IiwicmVwTGlzdCIsInJldHVybkxpc3QiLCJyZXAiLCJ0b2RheVJlcG9ydHMiLCJ0b2RheXJlcCIsInJlcG9ydERhdGUiLCJ5ZXN0ZXJkYXlSZXBvcnRzIiwieWVzdHJlcCIsImdldFJlcG9ydHNCeURhdGUiLCJkYXRlIiwidGhpc0RhdGVSZXBvcnRzIiwidGRhdGUiLCJDb21wbGV0ZVRoaXNSZXBvcnQiLCJnZXRQcm9qZWN0QWxlcnRUZXh0IiwiUHJvamVjdEFsZXJ0UGFydHMiLCJ0b3RZZXN0RmllbGRQZXJzIiwidG90WWVzdE9mZmljUGVycyIsIm1lYXN1cmVDdHMiLCJ0b3RfZGlzY2hhcmdlX21lYXMiLCJldmVudFJlcG9ydHMiLCJzdGF0ZUNvdW50IiwiZXIiLCJQcm9qQWxlcnQiLCJtZW1iZXJSZXBvcnRzIiwiYWxsUmVwb3J0cyIsImFsbEV2ZW50U3RhdHVzIiwidG9TdGF0ZSIsInRvUGFyYW1zIiwiZnJvbVN0YXRlIiwiZnJvbVBhcmFtcyIsImZvcm1Jc1BvcHVsYXRlZCIsInVybCIsIiRkaXJ0eSIsImxvZyIsImNvbmZpcm0iLCJjdXJyZW50RHQiLCJtbSIsImRkIiwieXl5eSIsIm1lbWJlcnMiLCJldmVudFR5cGVzIiwiZXZlbnRTdGF0cyIsIlN0YXRlbW9kZWwiLCJnZW5TdW1tYXJ5IiwiZmlsdGVyZWRSZXBvcnRzIiwiZ2VuUmVwQ2hhbmdlIiwibmFtZXMiLCJhYmJyZXZzIiwic3RhdGVfbmFtZSIsIlN0YXRlTmFtZXMiLCJTdGF0ZUFiYnJldnMiLCJNZXRyaWNEaXNwbGF5TW9kZWwiLCJkaXNwbGF5TWV0cmljU3VtIiwiR2VuUmVwRXZlbnRNb2RlbCIsInRvdGFsUm93Iiwibm90QWNjdEZvckVtcHMiLCJjdW1QRmllbGQiLCJ5ZXNQRmllbGQiLCJ0b2RQRmllbGQiLCJ0b21QRmllbGQiLCJjdW1QT2ZmaWNlIiwieWVzUE9mZmljZSIsInRvZFBPZmZpY2UiLCJ0b21QT2ZmaWNlIiwidHJ1Y2siLCJib2F0Iiwib3RoZXIiLCJnYWdlVmlzaXRzIiwiZ2FnZXNEb3duIiwiZGlzQ3RvRGF0ZSIsImRpc0NQbGFubmVkIiwiQ2hlY2tNZWFzVG9EYXRlIiwiQ2hlY2tNZWFzUGxhbm5lZCIsImluZE1lYXMiLCJyYXRFeHQiLCJwZWFrc09mUmVjIiwiUVdHYWdlVmlzIiwiY29udFFXR2FnZVZpcyIsImNvbnRRV0dhZ2VEb3duIiwiZGlzUVdTYW1wbGVzIiwic2VkU2FtcGxlcyIsInJkZ1BsYW4iLCJyZGdEZXAiLCJyZGdSZWMiLCJyZGdMb3N0Iiwid2F0ZXJQbGFuIiwid2F0ZXJEZXAiLCJ3YXRlclJlYyIsIndhdGVyTG9zdCIsIndhdmVQbGFuIiwid2F2ZURlcCIsIndhdmVSZWMiLCJ3YXZlTG9zdCIsImJhcm9QbGFuIiwiYmFyb0RlcCIsImJhcm9SZWMiLCJiYXJvTG9zdCIsIm1ldFBsYW4iLCJtZXREZXAiLCJtZXRSZWMiLCJtZXRMb3N0IiwiaHdtRmxhZyIsImh3bUNvbCIsImFiYnJldlN0cmluZyIsInRoaXNEYXRlIiwic3VtX2RhdGUiLCJnZXRGaWx0ZXJlZFJlcG9ydHMiLCJTdGF0ZXMiLCJ0aGlzUlBNb2RlbCIsInN3X2ZpZWxkcGVyc19ub3RhY2N0Iiwid3FfZmllbGRwZXJzX25vdGFjY3QiLCJ0bXdfZmllbGRwZXJzIiwidG13X29mZmljZXBlcnMiLCJnYWdlX3Zpc2l0IiwiZ2FnZV9kb3duIiwicGxhbl9kaXNjaGFyZ2VfbWVhcyIsInBsYW5faW5kaXJlY3RfbWVhcyIsInJhdGluZ19leHRlbnMiLCJnYWdlX3BlYWtfcmVjb3JkIiwicXdfZGlzY3Jfc2FtcGxlcyIsImNvbGxfc2Vkc2FtcGxlcyIsInBsYW5fcmFwZGVwbF9nYWdlIiwicGxhbl93dHJsZXZfc2Vuc29yIiwicGxhbl93dl9zZW5zIiwicGxhbl9iYXJvbWV0cmljIiwicGxhbl9tZXRlb3JvbG9naWNhbCIsIkV2ZW50VHlwZSIsIkV2ZW50U3RhdCIsIkNvb3JkaW5hdG9yIiwiZXZlbnRfY29vcmRpbmF0b3IiLCJDb29yZEFnZW5jeSIsInRoaXNSZXBvcnQiLCJ0aGVUb3RhbFJvdyIsInRvdGFscyIsImRpc3BsYXlDb250YWN0c1N1bSIsInJlcG9ydE1vZGVsIiwiZ2V0UmVwb3J0d2l0aENvbnRhY3RzIiwicmVwSUQiLCJzdWJtaXR0ZXJBZ2VuY3kiLCJzdWIiLCJlbWFpbCIsInBob25lIiwiYWdlbmN5bmFtZSIsImFnZW5jeWFkZCIsImRlcEMiLCJSZXBvcnRDb250YWN0cyIsImdlbkMiLCJpbmxDIiwiY29hc3RDIiwid2F0ZXJDIiwic2V0VGltZW91dCIsInNob3dNb2RhbCIsInRoZXNlUmVwb3J0cyIsIlJlcG9ydHMiLCJnZXRDU1ZmaWxlIiwiZ2V0UmVwb3J0c0NTViIsImFuY2hvciIsImpvaW5lZFJlc3BvbnNlIiwiQmxvYiIsImZpbGVVUkwiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJocmVmIiwiZG93bmxvYWQiLCJjbGljayIsIlByb2pBbGVydFBhcnRzIiwiYWxsQ29sbGVjdENvbmRpdGlvbnMiLCJ0aGlzUGVhayIsInBlYWtTaXRlIiwiYWxsRXZlbnRIV01zIiwiYWxsU2l0ZVNlbnNvcnMiLCJhbGxTaXRlRmlsZXMiLCJ0aGlzUGVha0RGcyIsIlBFQUsiLCJWRGF0dW1zTGlzdCIsIm1lbWJlckxpc3QiLCJsb2dnZWRJblJvbGUiLCJkZXRlcm1pbmVERlByZXNlbnQiLCJldmVudFNpdGVIV01zIiwiZXNoIiwiZXZlbnRTaXRlU2Vuc29ycyIsImV2U2l0ZVNlbiIsIkNvbGxlY3RDb25kaXRpb24iLCJjYyIsImlzUmV0cmlldmVkIiwiTmVlZERGIiwiY2hvc2VuSFdNTGlzdCIsInJlbW92ZWRDaG9zZW5IV01MaXN0IiwiY2hvc2VuREZMaXN0IiwicmVtb3ZlZENob3NlbkRGTGlzdCIsImh3bURldGFpbCIsIkhXTUJveCIsInNlbnNvckRldGFpbCIsIlNlbnNvckJveCIsImRhdGFGaWxlRGV0YWlsIiwiREZCb3giLCJhUGVhayIsInBlYWtfZGF0ZSIsInRpbWUiLCJQZWFrQ3JlYXRvciIsInBlYWtfc3VtbWFyeV9pZCIsImVzcyIsImVzc0kiLCJpc1RoZXJlIiwicGRmIiwiZm9ybWF0U2VsZWN0ZWRIV00iLCJmaHdtIiwiaGVpZ2h0X2Fib3ZlX2duZCIsImh3bV9sb2NhdGlvbmRlc2NyaXB0aW9uIiwiaHdtX25vdGVzIiwiYWRkSFdNIiwiZGF0YUZpbGUiLCJod20iLCJzaG93SFdNRGV0YWlscyIsInByaW1hcnlIV00iLCJzZXRQcmltSFdNIiwiU2V0SXQiLCJzZXRJdCIsInBlYWtfc3RhZ2UiLCJoSW5kZXgiLCJjbG9zZURldGFpbCIsImFkZERhdGFGaWxlIiwic2hvd1NlbnNvckRldGFpbHMiLCJzaG93RGF0YUZpbGVEZXRhaWxzIiwiZmlsZVBhdGgiLCJmaWxlSUQiLCJmaWxlRGVzYyIsInByb2Nlc3NlZEJ5Iiwibndpc0ZpbGUiLCJwcmltYXJ5RGF0YUZpbGUiLCJzZXRQcmltZURGIiwic2VucyIsInNJbmRleCIsImZJbmRleCIsInNhdmVQZWFrIiwidXBkYXRlZFBlYWsiLCJkYXRldGltZSIsImdldEhvdXJzIiwiZ2V0TWludXRlcyIsImdldFNlY29uZHMiLCJyZW1kIiwicmVtaCIsImFkZGgiLCJhZGRkIiwidXBkYXRlREZ3b1BlYWtJRCIsImRmX2lkIiwicmVzIiwiZGVsZXRlUGVhayIsImRlbGV0ZVBlYWtNZGwiLCJPayIsInRoaXNTIiwidGhpc0YiLCJ0aGlzSCIsInVwZGF0ZVRoaXNIV00iLCJjcmVhdGVQZWFrIiwiaXNId21DaGVja2VkIiwiaXNERkNoZWNrZWQiLCJzaHdtIiwic3NlbiIsImNyZWF0ZWRQZWFrIiwic2hvd0luY29tcGxldGVERkluZm8iLCJzaG93SW5jb21wbGV0ZUhXTUluZm8iLCJzaG93UmV0cmlldmVJbmZvIiwidGhpc1NpdGVQZWFrcyIsInBlYWtDb3VudCIsIlNpdGVQZWFrcyIsInNob3dQZWFrTW9kYWwiLCJwZWFrQ2xpY2tlZCIsImdldFBlYWtTdW1tYXJ5REZzIiwiZ2V0RmlsdGVyZWRIV01zIiwiRXZlbnRTdGF0dXMiLCJnZXRTaXRlU2Vuc29ycyIsInRoaXNPUCIsInRoaXNPUENvbnRyb2xzIiwib3BTaXRlIiwiT1B2YWwiLCJmaWxlSXNVcGxvYWRpbmciLCJkbCIsImRsT3BlbiIsImRsRmlsZU9wZW4iLCJPUFR5cGVMaXN0IiwiSERMaXN0IiwiSENvbGxlY3RNZXRob2RMaXN0IiwiVkRhdHVtTGlzdCIsIlZDb2xsZWN0TWV0aG9kTGlzdCIsIk9QUXVhbGl0eUxpc3QiLCJIV01maWxlSXNVcGxvYWRpbmciLCJPUCIsInRoaXNPUHNpdGUiLCJPUEZpbGVzIiwib3BJbWFnZUZpbGVzIiwib3BmIiwib3BDb3B5Iiwib3BNb2RhbEhlYWRlciIsImNyZWF0ZU9SZWRpdE9QIiwib3BUeXBlIiwib3BfdHlwZSIsInF1YWxpdHkiLCJxIiwiaGRhdHVtIiwiaENvbGxlY3RNZXRob2QiLCJ2RGF0dW0iLCJ2Q29sbGVjdE1ldGhvZCIsInZjIiwidmNvbGxlY3RfbWV0aG9kIiwiYWRkZWRJZGVudGlmaWVyc0NvcHkiLCJETVNkZE1vZGFsIiwiY3JlYXRlX2xhdERNUyIsImNyZWF0ZV9sYWRETVNhcnJheSIsImNyZWF0ZV9sb25nRE1TIiwiY3JlYXRlX2xvbmdETVNhcnJheSIsImZyb21XaGVyZSIsIk9QRm9ybSIsInRoaXNPbmUiLCJjaSIsImV4aXN0SW5kZXgiLCJkZUluZGV4IiwicmkiLCJkZWxldGVPUCIsImdldERhdHVtTG9jYXRpb25PUE1lYXN1cmVzIiwib2JqZWN0aXZlUG9pbnRJZCIsIm9wVG9SZW1vdmUiLCJ3YW5uYUVkaXRPUCIsImNhbmNlbE9QRWRpdCIsInRoaXNTaXRlT1BzIiwib3BDb3VudCIsIlNpdGVPYmplY3RpdmVQb2ludHMiLCJzaG93T1BNb2RhbCIsIk9QY2xpY2tlZCIsIm9wRmlsZVR5cGVzIiwib2Z0IiwiZ2V0T1BDb250cm9scyIsImlDbGlja2VkIiwicm9sZUxpc3QiLCJ0aGlzTWVtYmVyIiwiYU1lbWJlciIsIm1hdGNoaW5nVXNlcnMiLCJ1c2VybmFtZVRvb2x0aXAiLCJwYXNzIiwibmV3UCIsImNvbmZpcm1QIiwibmV3UGFzcyIsImxvZ2dlZEluVXNlciIsIk5hbWUiLCJJRCIsIlJvbGUiLCJyb2xlX2lkIiwicm9sZV9uYW1lIiwiY2hhbmdlUGFzcyIsImNoYW5nZU15UGFzc0J0biIsIkRvbnRDaGFuZ2VQYXNzIiwicGFzc3dvcmQiLCJidG9hIiwiY3JlYXRlZE1lbWJlciIsInJvIiwiQWdlbmN5IiwidXBkYXRlZE1lbWJlciIsImZvcm1hdHRlZE1lbWJlciIsImVuYyIsInVzZXJuYW1lIiwiY29uY2F0IiwiZXhwaXJlRGF0ZSIsImFkZEhvdXJzIiwicHV0IiwiZXhwaXJlcyIsInVzZXJzTkFNRSIsIkRlbGV0ZU1lbWJlciIsIm1lbVRvUmVtb3ZlIiwiZGVsZXRlTWVtYmVyIiwiJHN0YXRlUGFyYW1zIiwiYWxsUm9sZXMiLCJkZWxNZW0iLCJTYXZlT25CbHVyIiwiQ2hhbmdlUGFzc3dvcmQiLCJjaGFuZ2VQVyIsInJvbGVOYW1lIiwiYWRkTWVtYmVyIiwibm0iLCJ1c2VyUHJvZmlsZUlkIiwiZ2V0RXZlbnRQZW9wbGUiLCJFdmVudGlkIiwidGFibGUiLCJzaG93TWVtYmVyTW9kYWwiLCJtZW1iZXJDbGlja2VkIiwiZWFjaE0iLCJsZWFmbGV0Qm91bmRzSGVscGVycyIsInNwaW5uZXJTZXJ2aWNlIiwic2l0ZVBhcnRzIiwiaGlkZSIsImdvVG9TaXRlRGFzaGJvYXJkIiwiYWxsU2Vuc0RlcHMiLCJQcm9wb3NlZFNlbnNvcnM0U2l0ZSIsImdldFByb3Bvc2VkU2Vuc29ycyIsInNSZXNwb25zZSIsImNhbmNlbFByb3Bvc2luZyIsInNpdGVQZWFrcyIsImFsbFNpdGVQZWFrcyIsInNob3dQZWFrcyIsIkVWRU5UIiwiTWFwX0ZpbHRlciIsInN1cnZleU9wdGlvbnMiLCJldmVudFNpdGVzT25seSIsInNob3ciLCJzZXRGaWx0ZXJlZFNpdGVzIiwic3AiLCJvcHRpb25zIiwicG9zaXRpb25DbGFzcyIsIndhcm5pbmciLCJzaXRlc1Byb21pc2UiLCJnZXRFdmVudFNpdGVzIiwiTWFwX1NpdGUiLCJmaWx0ZXJlZFNpdGVzQXJyYXkiLCJzZWxlY3RlZE1hcmtlck51bSIsInNob3dFdmVudFNpdGVzIiwic3RuR3JheSIsIm5ld1NpdGUiLCJud2lzIiwiTCIsImRpdkljb24iLCJhY3Rpb24iLCJpY29uVXJsIiwicG9wdXBBbmNob3IiLCJsb3dfdGhyZXNob2xkIiwibWFqb3IiLCJtaW5vciIsIm1vZGVyYXRlIiwibm9fZmxvb2RpbmciLCJub3RfZGVmaW5lZCIsIm9ic19ub3RfY3VycmVudCIsIm91dF9vZl9zZXJ2aWNlIiwic2l0ZXNBcnJheSIsInNpdGVzIiwiZ2V0RGlyZWN0aXZlQ29udHJvbHMiLCJjb250cm9scyIsImxhYmVsIiwic2l0ZUlEIiwic2V0TWFwU2l0ZVBhcnRzIiwibW9kZWxOYW1lIiwibm9IaWRlIiwidGltZU91dCIsImNsb3NlQnV0dG9uIiwiY3JlYXRlU2l0ZU1vZGVBY3RpdmUiLCJyZW1vdmVVc2VyQ3JlYXRlZFNpdGUiLCJsZWFmRXZlbnQiLCJsZWFmbGV0RXZlbnQiLCJ1c2VyQ3JlYXRlZFNpdGUiLCJsYXRpdHVkZSIsImxhdGxuZyIsImxvbmdpdHVkZSIsImNyZWF0ZWRTaXRlSW5kZXgiLCJvYmoiLCJjcmVhdGVTaXRlQnV0dG9uVGV4dCIsIm1hcFN0eWxlIiwiY3Vyc29yIiwiY3JlYXRlU2l0ZUZyb21NYXAiLCJnZXRNYXAiLCJnZW9TZWFyY2hDb250cm9sIiwiQ29udHJvbCIsIkdlb1NlYXJjaCIsInByb3ZpZGVyIiwiUHJvdmlkZXIiLCJFc3JpIiwicG9zaXRpb24iLCJ6b29tTGV2ZWwiLCJhZGRUbyIsIm1hcmtlcnNXYXRjaE9wdGlvbnMiLCJkb1dhdGNoIiwiaXNEZWVwIiwiaW5kaXZpZHVhbCIsImdyYXkiLCJzdHJlZXRzIiwibmF0aW9uYWwiLCJvY2VhbnMiLCJkYXJrZ3JheSIsImltYWdlcnkiLCJzaGFkZWRyZWxpZWYiLCJ0ZXJyYWluIiwic3RuU2l0ZXNBbGwiLCJsYXllclBhcmFtcyIsInNob3dPblNlbGVjdG9yIiwibGF5ZXJPcHRpb25zIiwicG9pbnRUb0xheWVyIiwiZ2VvanNvbiIsIm1hcmtlciIsIm9uRWFjaEZlYXR1cmUiLCJmZWF0dXJlIiwiYmluZFBvcHVwIiwicHJvcGVydGllcyIsIlBvcHVwSW5mbyIsImFocHMiLCJvcGFjaXR5IiwiZ3JhcGhVUkwiLCJnYXVnZWxpZCIsInRvTG93ZXJDYXNlIiwicmFkYXIiLCJ3YXRjaFdhcm4iLCJsbXdhIiwiZmxvb2RCb3VuZHMiLCJmbG9vZFpvbmVzIiwiJGRvY3VtZW50IiwiaXNBdXRoIiwiZG9jdW1lbnRNb2RlIiwidXNlcnNOYW1lIiwidXNlcklEIiwiTG9nSW5PdXRDb250cm9sbGVyIiwiRU5WSVJPTk1FTlQiLCJMb2dpbiIsImtleXByZXNzIiwiJHBhc3N3b3JkIiwidG9vbHRpcFZpc2libGUiLCJpcyIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsInRvVXBwZXJDYXNlIiwic2hpZnRLZXkiLCJ0b29sdGlwIiwiYmx1ciIsImVudmlyb25tZW50IiwidXAiLCJsb2dpbiIsInVzZXIiLCJyZXR1cm5Ub1N0YXRlIiwicmV0dXJuVG9TdGF0ZVBhcmFtcyIsImxvZ291dCIsInJlbW92ZSIsImFwcHJvdmFsU2VhcmNoIiwicWh3bUZvcm0iLCJNRU1CRVJfSUQiLCJEQVRFX0VTVEFCTElTSEVEIiwiSFdNX0VOVklST05NRU5UIiwiQkFOSyIsIkZMQUdfREFURSIsIlNUSUxMV0FURVIiLCJPQkpFQ1RJVkVfUE9JTlRfSUQiLCJJREVOVElGSUVSIiwiSURFTlRJRklFUl9UWVBFIiwiTEFUSVRVREVfREQiLCJMT05HSVRVREVfREQiLCJBRERSRVNTIiwiQ0lUWSIsIlpJUCIsImdlb2NvZGVyIiwiZ29vZ2xlIiwibWFwcyIsIkdlb2NvZGVyIiwiTGF0TG5nIiwiZ2VvY29kZSIsImxhdExuZyIsInJlc3VsdHMiLCJHZW9jb2RlclN0YXR1cyIsIk9LIiwiYWRkcmVzc19jb21wb25lbnRzIiwiY29tcG9uZW50cyIsImsiLCJ2MSIsInR5cGVzIiwiazIiLCJ2MiIsImxvbmdfbmFtZSIsInN0cmVldF9udW1iZXIiLCJyb3V0ZSIsImxvY2FsaXR5IiwiU1RBVEVfTkFNRSIsImFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMSIsIlNUQVRFX0FCQlJFViIsIlNUQVRFX0lEIiwiQ09VTlRZIiwiYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8yIiwicG9zdGFsX2NvZGUiLCJVTlFVQU5USUZJRUQiLCJVTkNFUlRBSU5UWSIsIkRFU0NSSVBUSU9OIiwiRUxFVl9GVCIsIk9QX0lTX0RFU1RST1lFRCIsIk9QX05PVEVTIiwiU0lURV9JRCIsIlZEQVRVTV9JRCIsIkhEQVRVTV9JRCIsIkhDT0xMRUNUX01FVEhPRF9JRCIsIlZDT0xMRUNUX01FVEhPRF9JRCIsIk9QX1RZUEVfSUQiLCJEQVRFX1JFQ09WRVJFRCIsIk9QX1FVQUxJVFlfSUQiLCJxdWlja0hXTSIsIldBVEVSQk9EWSIsIkZMQUdfVEVBTV9JRCIsIkVWRU5UX0lEIiwiY3JlYXRlT1BDb250cm9sSUQiLCJTVVJWRVlfREFURSIsIlNVUlZFWV9URUFNX0lEIiwiU0lURV9ERVNDUklQVElPTiIsIkhXTV9UWVBFX0lEIiwiSFdNX1FVQUxJVFlfSUQiLCJ0aGlzSFdNIiwiaHdtQXBwcm92YWwiLCJod21TaXRlIiwiSFdNdmFsIiwiaE9wZW4iLCJoRmlsZU9wZW4iLCJIRGF0dW1zTGlzdCIsImhDb2xsTUxpc3QiLCJ2Q29sbE1MaXN0IiwiSFdNRmlsZXMiLCJod21JbWFnZUZpbGVzIiwiRmxhZ01lbWJlciIsInRoaXNIV01zaXRlIiwiY3JlYXRlT1JlZGl0SFdNIiwiaHdtQ29weSIsImxhdERpcyIsImFicyIsImxvRGlzIiwibGF0RGlzdGFuY2UiLCJsb25nRGlzdGFuY2UiLCJod21fdHlwZSIsIlRyYW5xdWlsIiwiTWFya2VyIiwibWFya2VyMSIsIlF1YWxpdHkiLCJocSIsImh3bV9xdWFsaXR5IiwiZ2V0SFdNQXBwcm92YWwiLCJod21Nb2RhbEhlYWRlciIsIlN1cnZleU1lbWJlciIsImNyZWF0ZWRIV00iLCJhcHByb3ZlSFdNIiwidW5BcHByb3ZlSFdNIiwiZm9ybWF0SFdNIiwiZm9ybWF0dGVkSFdNIiwiY2xlYW5IV00iLCJkZWxldGVIV00iLCJod21Ub1JlbW92ZSIsIndhbm5hRWRpdEhXTSIsImNhbmNlbEhXTUVkaXQiLCJ0aGlzU2l0ZUhXTXMiLCJIV01fU2VydmljZSIsImh3bUNvdW50IiwiU2l0ZUhXTXMiLCJzZXRBbGxTaXRlSFdNcyIsInNob3dIV01Nb2RhbCIsIkhXTWNsaWNrZWQiLCJod21GaWxlVHlwZXMiLCJoZnQiLCJIRGF0dW1zIiwiSENvbGxlY3RNZXRocyIsIk9QVHlwZXMiLCJWRGF0dW1zIiwiSFR5cGVzIiwiSFdNUXVhbHMiLCJkeW5hbWljIiwibWF4IiwiaG90SW5zdGFuY2UiLCJjb2x1bW5XaWR0aHMiLCJDaGFuZ2VzIiwiaW52YWxpZHMiLCJoRGF0dW1MaXN0IiwiaERhdHVtQXJyYXkiLCJoQ29sbGVjdExpc3QiLCJoY29sbGVjdEFycmF5Iiwic3RhdGVBcnJheSIsImNvdW50eUxpc3QiLCJjb3VudHlBcnJheSIsIm9wVHlwZUFycmF5IiwidkRhdHVtTGlzdCIsInZEYXR1bUFycmF5IiwiaHdtVHlwZUFycmF5IiwiaHdtRW52aXJMaXN0IiwiaHdtUXVhbGl0eUxpc3QiLCJod21RdWFsaXR5QXJyYXkiLCJoaXN0b3JpY0hXTXMiLCJjb3VudHlfbmFtZSIsImdldFN0YXRlQ28iLCJyb3dWYWx1ZXMiLCJnZXREYXRhQXRSb3ciLCJzZXREYXRhQXRDZWxsIiwic2V0Q2VsbE1ldGEiLCJVcGRhdGVDb3VudGllcyIsInRoZUNoYW5nZSIsInJlcXVpcmVkTW9kYWwiLCJsYXRWYWxpZGF0b3IiLCJjYWxsYmFjayIsImxvbmdWYWxpZGF0b3IiLCJjb2xvclJlbmRlcmVyIiwiaW5zdGFuY2UiLCJ0ZCIsInJvdyIsImNvbCIsInByb3AiLCJjZWxsUHJvcGVydGllcyIsIiRidXR0b24iLCJodG1sIiwiZW1wdHkiLCJyZXF1aXJlZFZhbGlkYXRvciIsInJlc2V0IiwicmVzZXRNb2RhbCIsInRhYmxlU2V0dGluZ3MiLCJjb2xIZWFkZXJzIiwicm93SGVhZGVycyIsImNvbnRleHRNZW51IiwibWluU3BhcmVSb3dzIiwiYWZ0ZXJJbml0IiwibWFudWFsQ29sdW1uUmVzaXplIiwibWFudWFsUm93UmVzaXplIiwid29yZFdyYXAiLCJ2aWV3cG9ydENvbHVtblJlbmRlcmluZ09mZnNldE51bWJlciIsImNvbFdpZHRocyIsImNlbGxzIiwiY2VsbHByb3BzIiwicmVuZGVyZXIiLCJvbkJlZm9yZUNoYW5nZSIsIm9uQWZ0ZXJDaGFuZ2UiLCJjaGFuZ2UiLCJzb3VyY2UiLCJhZnRlck9uQ2VsbE1vdXNlRG93biIsImNvb3JkcyIsIm9uQWZ0ZXJWYWxpZGF0ZSIsImlzVmFsaWQiLCJzb3VjZSIsInZJbmRleCIsInZJIiwicm93SGVpZ2h0cyIsImhvcml6RGF0dW1MaXN0IiwiaG9yQ29sbE1ldGhMaXN0IiwidmVydENvbGxNZXRoTGlzdCIsImZpbGVUeXBlc0xpc3QiLCJhZ2VuY2llc0xpc3QiLCJzaG93VGlwcyIsImh3bVR5cGVzIiwiaHdtUXVhbHMiLCJob3JEYXR1bXMiLCJob3JDb2xsTWV0aHMiLCJ2ZXJ0RGF0dW1zIiwidmVydENvbGxNZXRocyIsImNvdW50aWVzIiwic2hvd1Byb2dyZXNzQmFyIiwic2l0ZU5vQXJyb3dDbGlja2VkIiwidXBsb2FkSFdNcyIsInBvc3RlZEhXTXMiLCJub3RWYWxpZCIsImVudmlyQXJyYXkiLCJtYXJrZXJBcnJheSIsInF1YWxBcnJheSIsImJhbmtBcnJheSIsImhkYXR1bUFycmF5IiwiaGNvbGxNZXRoQXJyYXkiLCJ2ZGF0dW1BcnJheSIsInZjb2xsTWV0aEFycmF5IiwidHJhbnFBcnJheSIsImNob3NlbkV2ZW50IiwiY2hvc2VuRXZlbnROYW1lIiwiZGVsSW5kZXgiLCJzaXRlUGVha2FycmF5IiwiYWRkQXBwcm92YWxGaWxlIiwiYXBwcm92ZWRGSUxFbW9kYWwiLCJhcHByb3ZhbF90eXBlIiwidXBkYXRlRmlsZVR5cGUiLCJhZGRGaWxlIiwiY3JlYXRlZEZpbGUiLCJhcHByb3ZhbEZpbGUiLCJhcHByb3ZhbFNvdXJjZSIsImdldEZpbmRTaXRlTW9kYWwiLCJod21QYXJ0cyIsImRhdGFBdFJvdyIsImRlc2VsZWN0Q2VsbCIsInNpdGVNb2RhbCIsIm5lYXJCeVNpdGVzIiwiSFdNcGFydHMiLCJzaXRlTm9BbHJlYWR5VGhlcmUiLCJoZGF0dW1zIiwiaGNvbE1ldGhzIiwidmRhdHVtcyIsInZjb2xNZXRocyIsIm90aGVyRGF0YUluUm93IiwiZ2V0Q29sSGVhZGVyIiwibnVtZXJpY1ZhbGlkYXRvciIsImh3bVF1YWxWYWx1ZSIsImdldERhdGFBdENlbGwiLCJhcHByb3ByaWF0ZUhXTVF1YWwiLCJtYXRjaGluZ0REVmFsdWUiLCJoYXNFcnJvciIsImh3VCIsImh3TSIsImh3RSIsImh3USIsImh3QiIsImhEIiwiaEMiLCJ1bmNlcnRWYWx1ZSIsImFwcHJvcHJpYXRlcXVhbCIsInJlbW92ZVRoaXNVcGxvYWRIV00iLCJzdWNjZXNzZnVsSFdNIiwic3BsaWNlSW5kZXgiLCJoY21OYW1lIiwiaGROYW1lIiwiaHdtUU5hbWUiLCJod21UTmFtZSIsIm1hcmsiLCJ2Y21OYW1lIiwidmROYW1lIiwiaGFnIiwiZWxGdCIsInVuYyIsImh3bVVuYyIsImh3bUkiLCJ1cGxvYWRfaHdtVW5jIiwidXBsb2FkX21hcmsiLCJ1cGxvYWRfdW5jIiwidXBsb2FkX2hhZyIsInVwbG9hZF9lbEZ0IiwidXBsb2FkX3Zjb2xsTWV0aCIsInVwbG9hZF92ZGF0IiwidmFsaWRhdGVUYWJsZSIsImhhdmVEYXRhIiwidmFsaWRhdGVDZWxscyIsInBhc3RlZEhXTXMiLCJnZXRTaXRlUGVha3MiLCJwZWFrUmVzcG9uc2UiLCJod21SZXNwb25zZSIsInNpdGVQZWFrSWQiLCJQZWFrU3VtbWFyeSIsInNvdXJjZVJlc3BvbnNlIiwic291cmNlRXJyb3IiLCJhcHByb3ZlRXJyb3IiLCJod21TYXZlRXJyb3IiLCJnZXRTaXRlUGVha0Vycm9yIiwiZ2V0SHdtU2l0ZUVycm9yIiwiY2xlYXJUYWJsZSIsImdvVG9TaXRlRGFzaCIsIndhcm5pbmdNb2RhbCIsIkRlbGV0ZUhXTSIsIk9wZW5IV01FZGl0IiwiaHdtRWRpdEluc3RhbmNlIiwic2l0ZUhNV3MiLCJnZXRFdmVudFNpdGVIV01zIiwiaHdtVXBkYXRlZEFOREZpbGVDbnQiLCJPcGVuUGVha0VkaXQiLCJwZWFrSWQiLCJldmVudElkIiwicGVha0VkaXRJbnN0YW5jZSIsImdldFNpdGVGaWxlcyIsInVwZGF0ZWQiLCJPcGVuUGVha0NyZWF0ZSIsInBlYWtDcmVhdGVJbnN0YW5jZSIsImNyZWF0ZWRQayIsInBIV00iLCJtYXhSb3dzIiwiY29sdW1uU29ydGluZyIsInByZXZlbnRPdmVyZmxvdyIsInJlYWxUYXJnZXQiLCJwYXNzSFdNdmFscyIsIm9uQWZ0ZXJSZW1vdmVSb3ciLCJnZXRTZWxlY3RlZCIsImVhY2hSb3dJbmRleEFycmF5IiwiY250IiwiTWkiLCJsb2NhbFNpdGVzIiwic2hvd1NpdGVDcmVhdGVBcmVhIiwiZGlzYWJsZU9LIiwiY3JlYXRlQ2hlY2tlZCIsInNob3dIaWRlTWFwIiwic2hvd0hpZGVDcmVhdGVTaXRlRGl2IiwidW5jaGtDcmVhdGUiLCJjaGVja2VkU2l0ZSIsInNlbGVjdGVkU3RuIiwic2hvd1NpdGVzT25NYXAiLCJmaXRNYXBCb3VuZHMiLCJzaXRlX25hbWUiLCJib3VuZHMiLCJmaXRCb3VuZHMiLCJwYWRkaW5nIiwic3RuSFdNIiwic2VsZWN0ZWRNYXJrZXIiLCJjcmVhdGVOZXdTaXRlIiwic2VsZWN0ZWRTaXRlIiwiZW5zdXJlaHdtTGFiZWxVbmlxdWUiLCJ1bmlxdWVNb2RhbCIsInF1ZXJ5U2VhcmNoIiwiSFdNX3BhcmFtcyIsInNlYXJjaENsaWNrZWQiLCJhZGp1c3RIV01zIiwiZXZlbnRTdGF0ZUhXTXMiLCJnZXRIV01zIiwiY291bnR5TmFtZXMiLCJjb3VudGllc0NvbW1hU2VwIiwic2V0QnVsa0hXTVNlYXJjaCIsIkNvdW50eSIsImlzUmVzcG9uc2UiLCJvbmUiLCJnZXRCdWxrSFdNU2VhcmNoIiwidGhlU2VhcmNoIiwiY0EiLCJIYW5kc29udGFibGUiLCJyZW5kZXJlcnMiLCJUZXh0UmVuZGVyZXIiLCJhcmd1bWVudHMiLCJiYWNrZ3JvdW5kIiwic2l0ZU5vUmVuZGVyZXIiLCJpbm5lckhUTUwiLCJudW1iZXJWYWxpZGF0b3IiLCJnZXRFdmVudFN0YXRlSFdNcyIsInVwZGF0ZVRoZXNlSFdNcyIsImV2SCIsInRoZXlIYXZlSXRIZXJlIiwic3VydnllX2RhdGUiLCJ1Iiwic2l0ZV9udW1iZXIiLCJmaWxsSGFuZGxlIiwiYXV0b0luc2VydFJvdyIsImhlbHBJbmZvIiwiZmFjdCIsInRoaXNGaWxlIiwiZmlsZUV4aXN0cyIsImZpbGVTb3VyY2UiLCJmaWxlU2l0ZSIsIkZJTEV2YWwiLCJ0aGVTaXRlIiwiY3JlYXRlT1JlZGl0RmlsZSIsImZpbGVDb3B5Iiwic291cmNlQ29weSIsIndob3NlRmlsZSIsImFnZW5jeU5hbWUiLCJhUHJvY2Vzc29yIiwiY2hhbmdlZEZpbGVUeXBlIiwiZGZDb3B5Iiwid2hhdGtpbmQiLCJkZlJlc3BvbnNlIiwid2FubmFFZGl0RklMRSIsImNhbmNlbEZJTEVFZGl0IiwidGhpc1NpdGVGaWxlcyIsInNpdGVTZW5zb3JzIiwid2hhdEtpbmRhRmlsZSIsInRoaXNJbnMiLCJ0eXBlTmFtZSIsInNlcmlhbF9udW1iZXIiLCJTaXRlRmlsZXMiLCJleHRJIiwiZXh0U3RyaW5nIiwic2l0ZWZpbGVzIiwiZ2V0QWxsU2l0ZUhXTXMiLCJnZXRBbGxTaXRlU2Vuc29ycyIsImh3bUZpbGVzIiwic2ZpbGVzIiwic2Vuc0ZpbGVzIiwic2ZpIiwiRWhmIiwiRWh3bSIsIkVzZiIsIkVpbnN0Iiwic2hvd0ZpbGVNb2RhbCIsIkZpbGVDbGlja2VkIiwiU2luZGV4Q2xpY2tlZCIsInNpdGVGaWxlVHlwZXMiLCJzZW5zb3JGaWxlVHlwZXMiLCJFdmVudExpc3QiLCJFdmVudFR5cGVMaXN0IiwiY2hvc2VuRXYiLCJFdmVudENob3NlbiIsImZpbHRlckV2ZW50cyIsIkRBVEUiLCJnZXRGaWx0ZXJlZEV2ZW50cyIsIlR5cGUiLCJzZXRFdmVudCIsImV2ZW50TmFtZSIsImNsZWFyRXZlbnQiLCJvcGVuRXZlbnRNb2RhbCIsImV2ZW50U3RhdHVzTGlzdCIsImFkbWluTGlzdCIsImV2ZW50U2l0ZXMiLCJkb3dubG9hZFppcFVybCIsIm9iamVjdENob2ljZXMiLCJhbkV2ZW50IiwiZXZlbnRTdGF0dXNlcyIsImFkbWluTWVtYmVycyIsIkVWdmFsIiwid2FubmFFZGl0RVYiLCJldkNvcHkiLCJjYW5jZWxFVkVkaXQiLCJjcmVhdGVPUmVkaXRFViIsImV2TW9kYWxIZWFkZXIiLCJldmVudF9zdGFydF9kYXRlIiwiZXZlbnRfZW5kX2RhdGUiLCJjb21wYXJlRGF0ZXMiLCJlZCIsImNyZWF0ZWRFdmVudCIsIlN0YXR1cyIsImNvb3JkIiwiU3RhcnREYXRlIiwiRW5kRGF0ZSIsIkNvb3JkIiwidXBkYXRlZEV2ZW50IiwiZGVsZXRlRVYiLCJldiIsImV2ZW50VG9SZW1vdmUiLCJ6aXBGaWxlUGFyYW1zIiwiZmlsZXNGb3IiLCJzdGF0ZU5hbWUiLCJmcm9tRGF0ZSIsInRvRGF0ZSIsInNpdGVDb3VudHlMaXN0IiwiZXZlbnRTdGF0ZXMiLCJzY2wiLCJIV01maWxlVHlwZXMiLCJzZW5zb3JmaWxlVHlwZXMiLCJ1cGRhdGVmaWxlVHlwZUNoZWNrcyIsImh3bUZpbGVUeXBlc1dhbnRlZCIsImh3bUZpbGVUeXBlc1N0cmluZyIsInNlbnNvckZpbGVUeXBlc1N0cmluZyIsImh3bUZUIiwic2VuRlQiLCJmaWxlVHlwZUNoZWNrTGlzdCIsImZpbGVzV2FudGVkQ2hvc2VuIiwiY2hlY2tlZEZpbGUiLCJzZW5zb3JGaWxlVHlwZXNXYW50ZWQiLCJEb3dubG9hZFppcCIsImZvcm1hdHRlZEZyb21EYXRlIiwiZm9ybWF0dGVkVG9EYXRlIiwiZmlsZXBhdGgiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9uY2xpY2siLCJleHRlbmRlZFRpbWVPdXQiLCJyZXNwb25zZVR5cGUiLCJzZXRSZXF1ZXN0SGVhZGVyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInVzZ3NXaU1tZXNzYWdlIiwiZ2V0UmVzcG9uc2VIZWFkZXIiLCJjbGVhciIsImJsb2IiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ1cmxDcmVhdG9yIiwid2Via2l0VVJMIiwibW96VVJMIiwibXNVUkwiLCJib2R5IiwiYXBwZW5kQ2hpbGQiLCJzZW5kIiwiRGVsZXRlRXZlbnQiLCJkZWxFdiIsImV2ZW50Q29vcmRMaXN0IiwidGhpc0V2ZW50VHlwZSIsInRoaXNFdmVudFN0YXR1cyIsIkVDIiwidGhpc0V2ZW50Q29vcmQiLCJFIiwiQ09VTlRJRVMiLCJhbGxDb29yZE1lbWJlcnMiLCJpc0FkbWluIiwiVGluZGV4Iiwic2hvd0V2ZW50TW9kYWwiLCJldmVudENsaWNrZWQiLCJpbnN0cnVtZW50TGlzdCIsImFsbEluc3RydW1lbnRzIiwiQ2hvc2VuRXZlbnQiLCJDaG9zZW5TdGF0ZSIsIkNob3Nlbk1lbWJlciIsInVuQXBwcm92ZWRIV01zIiwic2hvd0hXTWJveCIsInVuQXBwcm92ZWRERnMiLCJzaG93REZib3giLCJzdGF0ZUlEIiwibWVtYmVySUQiLCJnZXRVbmFwcHJvdmVkSFdNcyIsIklzQXBwcm92ZWQiLCJnZXRVbmFwcHJvdmVkREZzIiwiUHJvY2Vzc29yIiwiREZzIiwidGhpc2RmSW5zdCIsImZvcm1hdHRlZERGIiwiU2l0ZUlkIiwic2VuVHlwZSIsImRlcFR5cGUiLCJJbnN0cklEIiwiU2l0ZU5vIiwic2VhcmNoIiwibUlEIiwic3Jlc3BvbnNlIiwiU1ROUmVzb3VyY2UiLCJyb290VVJMIiwiZmFjdG9yeSIsIiRyZXNvdXJjZSIsInBhcmFtcyIsImlzQXJyYXkiLCJjYWNoZSIsImRlbGV0ZSIsImdldERlcFNlbnNUeXBlIiwiQ29udGVudC1UeXBlIiwidHJhbnNmb3JtUmVxdWVzdCIsImlkZW50aXR5IiwiZG93bmxvYWRaaXAiLCJnZXRUaW1lIiwiJGJyb2FkY2FzdCIsImJ1bGtTZWFyY2giLCJzaCIsInNlYXJjaFRlcm1zIiwiZ2V0U2Vuc29yVmlldyIsImdldHN0YXR1c0luc3RydW1lbnRzIiwiZ2V0RnVsbEluc3RydW1lbnQiLCJnZXRJbnN0cnVtZW50U3RhdHVzIiwiTWFwU2l0ZVBhcnRzIiwiZ2V0TWFwU2l0ZVBhcnRzIiwicFJlc3BvbnNlIiwiZmlsdGVyZWRTaXRlcyIsImdldFJvbGVNZW1iZXJzIiwiZ2V0T1BGaWxlcyIsImdldFJlcG9ydEJ5RXZTdCIsImdldE1lbWJlclJlcG9ydHMiLCJSZXBvcnRJZCIsIkNvbnRhY3RUeXBlSWQiLCJnZXRTaXRlTmV0d29ya1R5cGVzIiwiTmV0d29ya1R5cGVJZCIsImdldFNpdGVOZXR3b3JrTmFtZXMiLCJOZXR3b3JrTmFtZUlkIiwiZ2V0U2l0ZUhvdXNpbmdzIiwiZ2V0U2l0ZUhXTXMiLCJTVE5CdXNpbmVzc1NlcnZpY2VzIiwidW4iLCJwdyIsInVzZXJOYW1lIiwidG9rZW4iLCJTVE5DcmVkcyIsIlNUTlVzZXJuYW1lIiwidXNlcnNSb2xlIiwiZXZJZCIsImV2TmFtZSIsIlNlc3Npb25FdmVudElEIiwiU2Vzc2lvbkV2ZW50TmFtZSIsInRJZCIsInROYW1lIiwiU2Vzc2lvblRlYUlEIiwiU2Vzc2lvblRlYW1OYW1lIiwibG9nZ2VkSW4iLCJpc0xvZ2dlZEluIiwiY2hhbmdlTG9nZ2VkSW4iLCJZZXNPck5vIiwicmV0dXJuVmFsIiwidXNlc05hbWUiLCJuYW1lVG9SbXYiLCJJbnB1dG1hc2siLCJhbGlhcyIsIm9wdHMiLCJub01hc2tzQ2FjaGUiLCJkZWZpbml0aW9ucyIsInVzZXJPcHRpb25zIiwicmVzb2x2ZUFsaWFzIiwiaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiaXNTdXBwb3J0ZWQiLCJzZXRBdHRyaWJ1dGUiLCJpc0lucHV0VHlwZVN1cHBvcnRlZCIsImlucHV0VHlwZSIsImFsaWFzU3RyIiwiYWxpYXNEZWZpbml0aW9uIiwiYWxpYXNlcyIsIm1hc2siLCJpbXBvcnRBdHRyaWJ1dGVPcHRpb25zIiwibnB0IiwiaW1wb3J0T3B0aW9uIiwib3B0aW9uIiwib3B0aW9uRGF0YSIsImdldEF0dHJpYnV0ZSIsImRhdGFvcHRpb25zIiwiYXR0ck9wdGlvbnMiLCJSZWdFeHAiLCJwYXJzZSIsImdlbmVyYXRlTWFza1NldCIsIm5vY2FjaGUiLCJhbmFseXNlTWFzayIsIk1hc2tUb2tlbiIsImlzR3JvdXAiLCJpc09wdGlvbmFsIiwiaXNRdWFudGlmaWVyIiwiaXNBbHRlcm5hdG9yIiwibWF0Y2hlcyIsInF1YW50aWZpZXIiLCJpbnNlcnRUZXN0RGVmaW5pdGlvbiIsIm10b2tlbiIsIm1hc2tkZWYiLCJwcmV2TWF0Y2giLCJlc2NhcGVkIiwiaXNGdW5jdGlvbiIsInByZXZhbGlkYXRvcnMiLCJwcmV2YWxpZGF0b3IiLCJwcmV2YWxpZGF0b3JzTCIsImNhcmRpbmFsaXR5IiwidmFsaWRhdG9yIiwiZm4iLCJvcHRpb25hbGl0eSIsIm5ld0Jsb2NrTWFya2VyIiwiZGVmIiwiZGVmaW5pdGlvblN5bWJvbCIsImNhc2luZyIsInZlcmlmeUdyb3VwTWFya2VyIiwibGFzdE1hdGNoIiwiaXNPcGVuR3JvdXAiLCJncm91cG1hcmtlciIsInN0YXJ0IiwiZW5kIiwibWFza0N1cnJlbnRUb2tlbiIsImN1cnJlbnRUb2tlbiIsImV4dHJhQ29uZGl0aW9uIiwiZGVmYXVsdENhc2UiLCJvcGVuZW5pbmdzIiwiY3VycmVudE9wZW5pbmdUb2tlbiIsImFsdGVybmF0b3IiLCJwb3AiLCJtbmR4IiwicmV2ZXJzZVRva2VucyIsIm1hc2tUb2tlbiIsInJldmVyc2VTdGF0aWMiLCJvcHRpb25hbG1hcmtlciIsImludE1hdGNoIiwicXQiLCJvcGVuaW5nVG9rZW4iLCJncm91cFRva2VuIiwidG9rZW5pemVyIiwibWFza1Rva2VucyIsImV4ZWMiLCJjaGFyQXQiLCJlc2NhcGVDaGFyIiwicXVhbnRpZmllcm1hcmtlciIsIm1xIiwibXEwIiwibXExIiwiYWx0ZXJuYXRvcm1hcmtlciIsIm51bWVyaWNJbnB1dCIsImdlbmVyYXRlTWFzayIsIm1ldGFkYXRhIiwiZ3JlZWR5IiwicmVwZWF0IiwicmVwZWF0U3RhcnQiLCJtYXNrc2V0RGVmaW5pdGlvbiIsIm1hc2tzQ2FjaGUiLCJ2YWxpZFBvc2l0aW9ucyIsIl9idWZmZXIiLCJidWZmZXIiLCJ0ZXN0cyIsInByZVByb2Nlc3NNYXNrIiwia2VlcFN0YXRpYyIsImFsdE1hc2siLCJuZHgiLCJtc2siLCJtYXNrU2NvcGUiLCJhY3Rpb25PYmoiLCJtYXNrc2V0IiwiZ2V0TWFza1RlbXBsYXRlIiwiYmFzZU9uSW5wdXQiLCJtaW5pbWFsUG9zIiwiaW5jbHVkZUlucHV0IiwibmR4SW50bHpyIiwidGVzdFBvcyIsIm1hc2tUZW1wbGF0ZSIsInBvcyIsImdldE1hc2tTZXQiLCJ2YWxpZFBvcyIsImxvY2F0b3IiLCJpbnB1dCIsImdldFBsYWNlaG9sZGVyIiwiZ2V0VGVzdFRlbXBsYXRlIiwibWF4TGVuZ3RoIiwicmVzZXRNYXNrU2V0Iiwic29mdCIsImdldExhc3RWYWxpZFBvc2l0aW9uIiwiY2xvc2VzdFRvIiwic3RyaWN0IiwibGFzdFZhbGlkUG9zaXRpb24iLCJ2YWxpZHMiLCJiZWZvcmUiLCJhZnRlciIsInBvc05keCIsInBzTmR4Iiwic2V0VmFsaWRQb3NpdGlvbiIsInZhbGlkVGVzdCIsImZyb21TZXRWYWxpZCIsImluc2VydE1vZGUiLCJwb3NpdGlvbnNDbG9uZSIsImx2cCIsImoiLCJ2cHMiLCJwb3NNYXRjaCIsInByZXZQb3NNYXRjaCIsImdldE1hc2tMZW5ndGgiLCJvcHRpb25hbFF1YW50aWZpZXIiLCJnZXRUZXN0cyIsImFsdGVybmF0aW9uIiwic2Vla05leHQiLCJwb3NpdGlvbkNhbk1hdGNoRGVmaW5pdGlvbiIsInN0cmlwVmFsaWRQb3NpdGlvbnMiLCJub2NoZWNrIiwic3RhcnRQb3MiLCJjYW5DbGVhclBvc2l0aW9uIiwiaXNNYXNrIiwibWwiLCJyYWRpeFBvaW50IiwidHN0UHMiLCJ0ZXN0UG9zaXRpb25zIiwibHZUZXN0IiwibHZUZXN0QWx0QXJyIiwiY2hlY2tBbHRlcm5hdGlvbk1hdGNoIiwiZ2V0VGVzdCIsInRuZHgiLCJjYWNoZWFibGUiLCJyZXNvbHZlVGVzdEZyb21Ub2tlbiIsIm5keEluaXRpYWxpemVyIiwibG9vcE5keCIsInF1YW50aWZpZXJSZWN1cnNlIiwiaGFuZGxlTWF0Y2giLCJpbkFycmF5Iiwib3B0aW9uYWxUb2tlbiIsImxhdGVzdE1hdGNoIiwiaXNGaXJzdE1hdGNoIiwiaW5zZXJ0U3RvcCIsIm1hbHRNYXRjaGVzIiwiYWx0ZXJuYXRlVG9rZW4iLCJtYWx0ZXJuYXRlTWF0Y2hlcyIsImN1cnJlbnRNYXRjaGVzIiwibG9vcE5keENudCIsImFsdEluZGV4IiwiY3VycmVudFBvcyIsIm5keEluaXRpYWxpemVyQ2xvbmUiLCJhbHRJbmRleEFyciIsImFtbmR4IiwibnRuZHgiLCJsbW50IiwibmR4MSIsImFsdE1hdGNoIiwibmR4MiIsImFsdE1hdGNoMiIsImlzRmluaXRlIiwibWFtYXRjaCIsImFsdExvY0FyciIsImFsbmR4IiwicW5keCIsInRva2VuR3JvdXAiLCJwcmV2aW91c1BvcyIsIm10bmR4IiwiZ2V0QnVmZmVyVGVtcGxhdGUiLCJnZXRCdWZmZXIiLCJub0NhY2hlIiwicmVmcmVzaEZyb21CdWZmZXIiLCJza2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyIiwiYWx0QXJyMSIsImFsdEFycjIiLCJhbHRBcnJDIiwiaXNNYXRjaCIsIl9pc1ZhbGlkIiwicnNsdCIsInRzdCIsImxvb3BlbmQiLCJjaHJzIiwiZ2V0QnVmZmVyRWxlbWVudCIsInZhbGlkYXRlZFBvcyIsInBvc3NpYmxlTW9kaWZpZWRCdWZmZXIiLCJzb3J0IiwiaW5zZXJ0IiwicmVmcmVzaCIsImFsdGVybmF0ZSIsImxhc3RBbHQiLCJpc1ZhbGlkUnNsdCIsImFsdFBvcyIsInZhbGlkUHNDbG9uZSIsImxBbHQiLCJkZWNpc2lvblBvcyIsImFsdE5keHMiLCJkZWNpc2lvblRha2VyIiwicG9zc2liaWxpdHlQb3MiLCJwb3NzaWJpbGl0aWVzIiwidmFsaWRJbnB1dHMiLCJzdGF0aWNJbnB1dHNCZWZvcmVQb3MiLCJ0YXJnZXRMdnAiLCJzdGF0aWNJbnB1dHNCZWZvcmVQb3NBbHRlcm5hdGUiLCJ0cmFja2JhY2tBbHRlcm5hdGlvbnMiLCJvcmlnaW5hbFBvcyIsIm5ld1BvcyIsInZwIiwidGFyZ2V0TG9jYXRvciIsInRsbCIsImJlc3RNYXRjaCIsImVxdWFsaXR5IiwicG5keCIsIm1hc2tQb3MiLCJjdXJyZW50UG9zVmFsaWQiLCJuUG9zIiwic25Qb3MiLCJjYXJldCIsImlzQ29tcGxldGUiLCJwb3N0VmFsaWRhdGlvbiIsInBvc3RWYWxpZFJlc3VsdCIsInN0YXRpY0FsdGVybmF0aW9ucyIsIm1hc2tMZW5ndGgiLCJsYXN0VGVzdCIsIm5ld0Jsb2NrIiwibWFza0wiLCJub2p1bXBzIiwibm9qdW1wc1RocmVzaG9sZCIsInNlZWtQcmV2aW91cyIsIndyaXRlQnVmZmVyIiwiY2FyZXRQb3MiLCJ0cmlnZ2VySW5wdXRFdmVudCIsIm9uQmVmb3JlV3JpdGUiLCJfdmFsdWVTZXQiLCJza2lwSW5wdXRFdmVudCIsInByZXZUZXN0IiwiaGFzQWx0ZXJuYXRpb25zIiwiY2hlY2tWYWwiLCJ3cml0ZU91dCIsIm5wdHZsIiwiaXNUZW1wbGF0ZU1hdGNoIiwiY2hhckNvZGVOZHgiLCJpbml0aWFsTmR4IiwiY2hhckNvZGVzIiwiYnVmZmVyVGVtcGxhdGVBcnIiLCJhdXRvVW5tYXNrIiwic3RhdGljSW5wdXQiLCJlc2NhcGVSZWdleCIsImNoYXJDb2RlIiwiY2hhckNvZGVBdCIsIm5leHRUZXN0Iiwia2V5cHJlc3NFdmVudCIsImFjdGl2ZUVsZW1lbnQiLCJ1bm1hc2tlZHZhbHVlIiwidW1WYWx1ZSIsInVubWFza2VkVmFsdWUiLCJpc1JUTCIsImJ1ZmZlclZhbHVlIiwib25Vbk1hc2siLCJiZWdpbiIsInRyYW5zbGF0ZVBvc2l0aW9uIiwiYmZmckxnaHQiLCJyYW5nZSIsInNldFNlbGVjdGlvblJhbmdlIiwic2VsZWN0aW9uU3RhcnQiLCJzZWxlY3Rpb25FbmQiLCJnZXRTZWxlY3Rpb24iLCJnZXRSYW5nZUF0IiwiY29tbW9uQW5jZXN0b3JDb250YWluZXIiLCJwYXJlbnROb2RlIiwic3RhcnRPZmZzZXQiLCJlbmRPZmZzZXQiLCJzZWxlY3Rpb24iLCJjcmVhdGVSYW5nZSIsImR1cGxpY2F0ZSIsIm1vdmVTdGFydCIsInNjcm9sbENhbGMiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJnZXRDb21wdXRlZFN0eWxlIiwiY3VycmVudFN0eWxlIiwiZm9udFNpemUiLCJzY3JvbGxMZWZ0Iiwic2Nyb2xsV2lkdGgiLCJhbmRyb2lkY2hyb21lIiwiZmlyc3RDaGlsZCIsInRleHROb2RlIiwiY3JlYXRlVGV4dE5vZGUiLCJzZXRTdGFydCIsIl92YWx1ZUdldCIsInNldEVuZCIsImNvbGxhcHNlIiwic2VsIiwicmVtb3ZlQWxsUmFuZ2VzIiwiYWRkUmFuZ2UiLCJjcmVhdGVUZXh0UmFuZ2UiLCJtb3ZlRW5kIiwiZGV0ZXJtaW5lTGFzdFJlcXVpcmVkUG9zaXRpb24iLCJyZXR1cm5EZWZpbml0aW9uIiwiYmwiLCJwb3NpdGlvbnMiLCJsdlRlc3RBbHQiLCJjbGVhck9wdGlvbmFsVGFpbCIsInJsIiwibG1pYiIsImxycCIsImFtbCIsImlzU2VsZWN0aW9uIiwid3JhcEV2ZW50UnVsZXIiLCJldmVudEhhbmRsZXIiLCJpbkNvbXBvc2l0aW9uIiwia2V5ZG93blByZXNzZWQiLCJpbU9wdHMiLCJvZmYiLCJyZWFkT25seSIsImN0cmxLZXkiLCJ0YWJUaHJvdWdoIiwiVEFCIiwic2tpcEtleVByZXNzRXZlbnQiLCJwYXRjaFZhbHVlUHJvcGVydHkiLCJwYXRjaFZhbGhvb2siLCJ2YWxIb29rcyIsImlucHV0bWFza3BhdGNoIiwidmFsaG9va0dldCIsInZhbGhvb2tTZXQiLCJzZXQiLCJidWZmZXJUZW1wbGF0ZSIsIiRlbGVtIiwiZ2V0dGVyIiwidmFsdWVHZXQiLCJjbGVhck1hc2tPbkxvc3RGb2N1cyIsInNldHRlciIsInZhbHVlU2V0IiwiaW5zdGFsbE5hdGl2ZVZhbHVlU2V0RmFsbGJhY2siLCIkaW5wdXQiLCJfX3ZhbHVlR2V0IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidGV4dENvbnRlbnQiLCJkZWZpbmVQcm9wZXJ0eSIsIl9fbG9va3VwR2V0dGVyX18iLCJfX2xvb2t1cFNldHRlcl9fIiwiX19kZWZpbmVHZXR0ZXJfXyIsIl9fZGVmaW5lU2V0dGVyX18iLCJvdmVycnVsZVJUTCIsIl9fdmFsdWVTZXQiLCJoYW5kbGVSZW1vdmUiLCJnZW5lcmFsaXplIiwiQkFDS1NQQUNFIiwiREVMRVRFIiwicGVuZCIsImdyb3VwU2VwYXJhdG9yIiwia2V5ZG93bkV2ZW50IiwiaXBob25lIiwidW5kb1ZhbHVlIiwic2hvd1Rvb2x0aXAiLCJFTkQiLCJQQUdFX0RPV04iLCJIT01FIiwiUEFHRV9VUCIsInVuZG9PbkVzY2FwZSIsIkVTQ0FQRSIsImFsdEtleSIsIklOU0VSVCIsIlJJR0hUIiwiTEVGVCIsIm9uS2V5RG93biIsImlnbm9yYWJsZSIsImlnbm9yYWJsZXMiLCJjaGVja3ZhbCIsIm1ldGFLZXkiLCJFTlRFUiIsImZvcndhcmRQb3NpdGlvbiIsImlzU2xjdG4iLCJ1bmRvUG9zaXRpb25zIiwibXVsdGkiLCJ3cml0ZU91dEJ1ZmZlciIsInZhbFJlc3VsdCIsInNlbGYiLCJvbktleVZhbGlkYXRpb24iLCJwYXN0ZUV2ZW50Iiwib3JpZ2luYWxFdmVudCIsInZhbHVlQmVmb3JlQ2FyZXQiLCJ2YWx1ZUFmdGVyQ2FyZXQiLCJjbGlwYm9hcmREYXRhIiwiZ2V0RGF0YSIsInBhc3RlVmFsdWUiLCJvbkJlZm9yZVBhc3RlIiwiaW5wdXRGYWxsQmFja0V2ZW50IiwibW9iaWxlSW5wdXRFdmVudCIsImNvbXBvc2l0aW9uU3RhcnRFdmVudCIsImNvbXBvc2l0aW9uRGF0YSIsImNvbXBvc2l0aW9uVXBkYXRlRXZlbnQiLCJuZXdEYXRhIiwiY29tcG9zaXRpb25FbmRFdmVudCIsInNldFZhbHVlRXZlbnQiLCJvbkJlZm9yZU1hc2siLCJjbGVhckluY29tcGxldGUiLCJmb2N1c0V2ZW50IiwibnB0VmFsdWUiLCJzaG93TWFza09uRm9jdXMiLCJzaG93TWFza09uSG92ZXIiLCJtb3VzZUVudGVyIiwicG9zaXRpb25DYXJldE9uVGFiIiwibW91c2VsZWF2ZUV2ZW50IiwiY2xpY2tFdmVudCIsImRvUmFkaXhGb2N1cyIsImNsaWNrUG9zIiwicmFkaXhGb2N1cyIsInJhZGl4UG9zIiwic2VsZWN0ZWRDYXJldCIsImNsaWNrUG9zaXRpb24iLCJsdmNsaWNrUG9zaXRpb24iLCJsYXN0UG9zaXRpb24iLCJkYmxjbGlja0V2ZW50IiwiY3V0RXZlbnQiLCJjbGlwRGF0YSIsInNldERhdGEiLCJleGVjQ29tbWFuZCIsImJsdXJFdmVudCIsIm1vdXNlZW50ZXJFdmVudCIsIiRlbCIsImRpciIsInJpZ2h0QWxpZ24iLCJ0ZXh0QWxpZ24iLCJyZW1vdmVBdHRyaWJ1dGUiLCJ0YWdOYW1lIiwiaXNDb250ZW50RWRpdGFibGUiLCJmb3JtIiwicmVtb3ZlTWFza09uU3VibWl0IiwiUGFzdGVFdmVudFR5cGUiLCJvbmNvbXBsZXRlIiwib25pbmNvbXBsZXRlIiwib25jbGVhcmVkIiwiYW5kcm9pZGZpcmVmb3giLCJhbmRyb2lkIiwia2luZGxlIiwiaW5pdGlhbFZhbHVlIiwidmFsdWVCdWZmZXIiLCJ2YWx1ZVByb3BlcnR5IiwiZmlyc3RBbHQiLCJub29wIiwicGFzdGVkVmFsdWUiLCJzdXBwb3J0c0lucHV0VHlwZSIsIjkiLCIqIiwiZWxlbXMiLCJ0aGF0IiwicXVlcnlTZWxlY3RvckFsbCIsIm5vZGVOYW1lIiwic2NvcGVkT3B0cyIsImdldGVtcHR5bWFzayIsImhhc01hc2tlZFZhbHVlIiwiZ2V0bWV0YWRhdGEiLCJmb3JtYXQiLCJleHRlbmREZWZhdWx0cyIsImV4dGVuZERlZmluaXRpb25zIiwiZGVmaW5pdGlvbiIsImV4dGVuZEFsaWFzZXMiLCJ1bm1hc2siLCJzdHIiLCJzcGVjaWFscyIsIkFMVCIsIkNBUFNfTE9DSyIsIkNPTU1BIiwiQ09NTUFORCIsIkNPTU1BTkRfTEVGVCIsIkNPTU1BTkRfUklHSFQiLCJDT05UUk9MIiwiRE9XTiIsIk1FTlUiLCJOVU1QQURfQUREIiwiTlVNUEFEX0RFQ0lNQUwiLCJOVU1QQURfRElWSURFIiwiTlVNUEFEX0VOVEVSIiwiTlVNUEFEX01VTFRJUExZIiwiTlVNUEFEX1NVQlRSQUNUIiwiUEVSSU9EIiwiU0hJRlQiLCJTUEFDRSIsIlVQIiwiV0lORE9XUyIsInVhIiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwialF1ZXJ5IiwibnB0bWFzayIsImpxdWVyeSIsInRyaWdnZXJIYW5kbGVyIiwiZGQvbW0veXl5eSIsInZhbDFwcmUiLCJ2YWwxIiwidmFsMnByZSIsInNlcGFyYXRvciIsImVzY2FwZWRTZXBhcmF0b3IiLCJ2YWwyIiwibGVhcGRheSIsInllYXJyYW5nZSIsIm1pbnllYXIiLCJtYXh5ZWFyIiwiaXNJblllYXJSYW5nZSIsImVudGVyZWR5ZWFyIiwiZW50ZXJlZHllYXIyIiwiZGV0ZXJtaW5lYmFzZXllYXIiLCJoaW50IiwiY3VycmVudHllYXIiLCJtYXhZZWFyUHJlZml4IiwibWF4WWVhclBvc3RmaXgiLCJtYXh4WWVhciIsImdldEZyb250VmFsdWUiLCIxIiwicGNocnMiLCIyIiwiZnJvbnRWYWx1ZSIsImRheU1vbnRoVmFsdWUiLCJ5ZWFyUHJlZml4IiwibW0vZGQveXl5eSIsInl5eXkvbW0vZGQiLCJkZC5tbS55eXl5IiwiZGQtbW0teXl5eSIsIm1tLmRkLnl5eXkiLCJtbS1kZC15eXl5IiwieXl5eS5tbS5kZCIsInl5eXktbW0tZGQiLCJocnNwcmUiLCJocnMyNCIsImhycyIsImFtcG0iLCJtc3ByZSIsInRpbWVzZXBhcmF0b3IiLCJob3VyRm9ybWF0IiwidG1wIiwiZGF0ZXRpbWUxMiIsIm1tL2RkL3l5eXkgaGg6bW0geG0iLCJoaDptbSB0IiwiaDpzIHQiLCJoaDptbTpzcyIsImhoOm1tIiwibW0veXl5eSIsInNoYW1zaSIsIkEiLCImIiwiIyIsImRlZmF1bHRQcmVmaXgiLCJ1cmxwcmUxIiwidXJscHJlMiIsInVybHByZTMiLCJ1cmxwcmU0IiwidXJscHJlNSIsInVybHByZTYiLCJ1cmxwcmU3IiwidXJscHJlOCIsInByZWZpeExpbWl0IiwiaXAiLCJtYXNrZWRWYWx1ZSIsIm1hYyIsIm51bWVyaWMiLCJhdXRvRXNjYXBlIiwidHh0IiwiZXNjYXBlZFR4dCIsImludGVnZXJEaWdpdHMiLCJhdXRvR3JvdXAiLCJncm91cFNpemUiLCJzZXBzIiwibW9kIiwiaW50ZWdlck9wdGlvbmFsIiwiZGlnaXRzT3B0aW9uYWwiLCJkaWdpdHMiLCJkZWNpbWFsUHJvdGVjdCIsInByZWZpeCIsIm5lZ2F0aW9uU3ltYm9sIiwic3VmZml4IiwiYWxsb3dQbHVzIiwiYWxsb3dNaW51cyIsImZyb250Iiwic3RlcCIsInVubWFza0FzTnVtYmVyIiwicG9zdEZvcm1hdCIsInJlZm9ybWF0T25seSIsInN1ZmZpeFN0cmlwcGVkIiwibmVlZHNSZWZyZXNoIiwiY2hhckF0UG9zIiwiY2J1ZiIsImJ1ZlZhbCIsImJ1ZlZhbE9yaWdpbiIsImVzY2FwZWRHcm91cFNlcGFyYXRvciIsInJhZGl4U3BsaXQiLCJyZWciLCJwcm9jZXNzVmFsdWUiLCJ0bXBCdWZTcGxpdCIsIm1hdGNoUnNsdCIsImludGVnZXJQYXJ0IiwibWF0Y2hSc2x0RGlnaXRzIiwiaW50ZWdlck5QYXJ0IiwicmFkaXhQb3NpdGlvbiIsInNpZ25IYW5kbGVyIiwicmFkaXhIYW5kbGVyIiwiaW50ZWdlclZhbHVlIiwibGVhZGluZ1plcm9IYW5kbGVyIiwiX3JhZGl4UG9zaXRpb24iLCJkaWdpdHNNYXRjaCIsImludGVnZXJNYXRjaCIsIn4iLCIrIiwiLSIsIjoiLCJyYWRpeCIsImJ1ZkNsb25lIiwia29tbWFNYXRjaGVzIiwiZG90TWF0Y2hlcyIsInZhbHVlUGFydHMiLCJkZWNQYXJ0IiwiZGlnaXRzRmFjdG9yIiwicG93Iiwicm91bmQiLCJwb3NpdGlvbklucHV0IiwiY2FuQ2xlYXIiLCJyYWRpeEluamVjdGlvbiIsImlzTnVsbCIsImludFBhcnQiLCJyYWRpeFBhcnQiLCJjdXJyZW5jeSIsImRlY2ltYWwiLCJpbnRlZ2VyIiwicGVyY2VudGFnZSIsImNvdW50cnljb2RlIiwibWFza0xpc3QiLCJhamF4IiwiYXN5bmMiLCJkYXRhVHlwZSIsImFqYXhPcHRpb25zIiwidGhyb3duRXJyb3IiLCJwcm9jZXNzZWRWYWx1ZSIsInBob25lYmUiLCJSZWdleCIsInJlZ2V4VG9rZW5zIiwicXVhbnRpZmllckZpbHRlciIsIlJlZ2V4VG9rZW4iLCJyZXBlYXRlclBhcnQiLCJhbmFseXNlUmVnZXgiLCJvcGVuZ3JvdXBzIiwicXVhbnRpZmllclRva2VuIiwidmFsaWRhdGVSZWdleFRva2VuIiwiZnJvbUdyb3VwIiwiaXN2YWxpZCIsInJlZ2V4UGFydCIsIm9wZW5Hcm91cENvdW50IiwibWF0Y2hUb2tlbiIsImNycm50bmR4IiwibWF0Y2hHcm91cCIsInJlZ2V4UGFydEJhayIsInFtIiwidGVzdEV4cCIsImV4cCIsImJ1ZmZlclN0ciIsInRsIiwiY2J1ZmZlciIsInJlZ2V4VG9rZW4iLCJhcHAiLCJydW4iLCIkdWliTW9kYWxTdGFjayIsImF1dGhlbnRpY2F0ZSIsImRpc21pc3NBbGwiLCJjb25maWciLCIkc3RhdGVQcm92aWRlciIsIiR1cmxSb3V0ZXJQcm92aWRlciIsIm90aGVyd2lzZSIsInZpZXdzIiwibWFwRmlsdGVyc0BtYXAiLCJzZW5zVCIsIm5ldHdOIiwibWFwU2l0ZUluZm9AbWFwIiwibWFwUGVha3NWaWV3QG1hcCIsIm1hcFNlbnNvclByb3Bvc2VAbWFwIiwiYWJzdHJhY3QiLCJtZW1iZXJJZCIsInJvbGVJZCIsImh3bVQiLCJzc3RhdCIsInNxdWFzaCIsImxhdGxvbmdhcnJheSIsInZlcnREYXRzIiwidmVydENvbE1ldCIsIm9wUXVhbCIsInNlbnQiLCJhTWFwIiwiVmlld1R5cGUiLCJwZWFrIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUVBLFlBRUEsRUFBQSxHQUdBQSxpQkFIQUMsUUFBQUMsT0FBQSx1QkFDQSxrQkFBQSxjQUFBLGlCQUFBLFlBQUEsa0JBQUEsaUJBRUFELFFBQUFDLE9BQUEscUJBQ0FELFNBQUFDLE9BQUEsdUJBVUFGLGVBQUFHLFNBQUEsVUFDQUMsU0FBQSw4TENuQkEsV0FFQSxZQUNBLElBQUFKLGdCQUFBQyxRQUFBQyxPQUFBLGlCQUlBRixnQkFBQUssVUFBQSxhQUFBLFNBQUEsU0FBQUMsUUFDQSxHQUFBQyw0QkFFQUMsU0FBQSxJQUVBQyxTQUFBLEVBQ0FDLE9BQ0FDLEtBQUEsa0JBRUFDLEtBQUEsU0FBQUYsTUFBQUcsUUFBQUMsT0FFQSxHQUVBQyxRQUZBRCxNQUFBRSxjQUFBQyxNQUFBLEtBRUFDLEdBQUFDLE9BQUFOLFFBQUEsSUFFQUUsT0FBQUssT0FBQSxPQUFBQyxLQUFBLFFBQUEsU0FDQUMsVUFBQSxPQUNBWCxLQUFBRCxNQUFBQyxNQUFBWSxRQUFBSCxPQUFBLE9BQ0FJLGFBQUFDLEtBQUEsV0FDQUMsTUFBQSxRQUFBLFNBQUFDLEdBQUEsTUFBQUEsR0FBQSxNQUNBQyxLQUFBLFNBQUFELEdBQUEsTUFBQUEsR0FBQSxNQUVBakIsTUFBQW1CLE9BQUEsT0FBQSxTQUFBQyxTQUFBQyxVQUNBckIsTUFBQUMsS0FBQW1CLFlBSUEsT0FBQXZCLDhCQUVBUCxlQUFBSyxVQUFBLGFBQUEsV0FDQSxP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QkFDQWxQLGVBQUEsU0FBQWtQLElBQ0EsTUFBQUEsSUFBQXhOLFNBQUExWCxVQUVBdEwsRUFBQSxRQUNBeWtCLFVBQUEsU0FBQXprQixFQUFBOHRELGNBQ0EsTUFBQSxVQUFBQSxhQUFBdnhELEdBQUF5RCxFQUFBZ2pCLFNBQUExWCxTQUFBLFFBRUFnL0YsS0FBQSxjQUNBL29GLGVBQUEsU0FBQStvRixLQUFBeDhDLGNBQ0EsTUFBQSxVQUFBQSxhQUFBdnhELEdBQUErdEcsS0FBQXRuRixTQUFBMVgsU0FBQSxRQUVBeStCLEdBQUEsZUFDQXJsQixnQkFBQSxTQUFBcWxCLEdBQUErakIsY0FDQSxNQUFBLFVBQUFBLGFBQUF2eEQsR0FBQXd0QyxHQUFBL21CLFNBQUExWCxTQUFBLFFBTUF5SyxHQUFBLGVBQ0FvTCxnQkFBQSxTQUFBcEwsSUFDQSxNQUFBQSxJQUFBaU4sU0FBQTFYIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xyXG4gICAgLyogY29udHJvbGxlcnMuanMsICdsZWFmbGV0LWRpcmVjdGl2ZScndWkudW5pcXVlJywnbmdUYWdzSW5wdXQnLCovXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFNldHRpbmdzQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU2V0dGluZ3NDb250cm9sbGVycycsXHJcbiAgICAgIFsnbmdJbnB1dE1vZGlmaWVkJywgJ3VpLnZhbGlkYXRlJywgJ2FuZ3VsYXIuZmlsdGVyJywgJ3hlZGl0YWJsZScsICdjaGVja2xpc3QtbW9kZWwnLCAnbmdGaWxlVXBsb2FkJ10pO1xyXG5cclxuICAgIHZhciBTVE5Db250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTVE5Db250cm9sbGVycycsIFtdKTtcclxuICAgIHZhciBNb2RhbENvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ01vZGFsQ29udHJvbGxlcnMnLCBbXSk7XHJcblxyXG4gICAgLy8jcmVnaW9uICRjY29raWVzIHZhcmlhYmxlc1xyXG4gICAgLypcclxuICAgICogU1ROQ3JlZHMsIFNUTlVzZXJuYW1lLCB1c2Vyc05hbWUsIG1JRCwgdXNlcnNSb2xlLCBTZXNzaW9uRXZlbnRJRCwgU2Vzc2lvbkV2ZW50TmFtZVxyXG4gICAgKi9cclxuICAgIC8vI2VuZHJlZ2lvbiAkY29va2llcyB2YXJpYWJsZXNcclxuXHJcbiAgICAvLyNyZWdpb24gQ09OU1RBTlRTICAgIFxyXG4gICAgLy9yZWd1bGFyIGV4cHJlc3Npb24gZm9yIGEgcGFzc3dvcmQgcmVxdWlyZW1lbnQgb2YgYXQgbGVhc3QgOCBjaGFyYWN0ZXJzIGxvbmcgYW5kIGF0IGxlYXN0IDMgb2YgNCBjaGFyYWN0ZXIgY2F0ZWdvcmllcyB1c2VkICh1cHBlciwgbG93ZXIsIGRpZ2l0LCBzcGVjaWFsXHJcbiAgICBTVE5Db250cm9sbGVycy5jb25zdGFudCgnUmVnRXhwJywge1xyXG4gICAgICAgIFBBU1NXT1JEOiAvXigoKD89LipbYS16XSkoPz0uKltBLVpdKSg/PS4qWzAtOV0pKXwoKD89LipbYS16XSkoPz0uKltBLVpdKSg/PS4qWyFAQD8jJCVeJl86Oy1dKSl8KCg/PS4qW2Etel0pKD89LipbMC05XSkoPz0uKlshQEA/IyQlXiZfOjstXSkpfCgoPz0uKltBLVpdKSg/PS4qWzAtOV0pKD89LipbIUBAPyMkJV4mXzo7LV0pKSkuezgsfSQvXHJcbiAgICB9KTtcclxuICAgIC8vI2VuZHJlZ2lvbiBDT05TVEFOVFNcclxuXHJcbiAgICBcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgLyogY29udHJvbGxlcnMuanMsICdsZWFmbGV0LWRpcmVjdGl2ZScndWkudW5pcXVlJywnbmdUYWdzSW5wdXQnLCovXHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICB2YXIgU1ROQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQ29udHJvbGxlcnMnKTtcclxuICAgIFxyXG4gICAgLy90cnkgdGhpcyBvbmUgTW9uZGF5Ojo6XHJcbiAgICAvL2h0dHA6Ly93d3cubmctbmV3c2xldHRlci5jb20vcG9zdHMvZDMtb24tYW5ndWxhci5odG1sXHJcbiAgICBTVE5Db250cm9sbGVycy5kaXJlY3RpdmUoJ2JhcnNDaGFydCcsWyckcGFyc2UnLCBmdW5jdGlvbiAoJHBhcnNlKSB7XHJcbiAgICAgICAgdmFyIGRpcmVjdGl2ZURlZmluaXRpb25PYmplY3QgPSB7XHJcbiAgICAgICAgICAgIC8vV2UgcmVzdHJpY3QgaXRzIHVzZSB0byBhbiBlbGVtZW50IGFzIHVzdWFsbHkgIDxiYXJzLWNoYXJ0PiBpcyBzZW1hbnRpY2FsbHkgbW9yZSB1bmRlcnN0YW5kYWJsZVxyXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgICAgICAvL3RoaXMgaXMgaW1wb3J0YW50LCB3ZSBkb24ndCB3YW50IHRvIG92ZXJ3cml0ZSBvdXIgZGlyZWN0aXZlIGRlY2xhcmF0aW9uIGluIHRoZSBIVE1MIG1hcmstdXBcclxuICAgICAgICAgICAgcmVwbGFjZTogZmFsc2UsXHJcbiAgICAgICAgICAgIHNjb3BlOiB7XHJcbiAgICAgICAgICAgICAgICBkYXRhOiAnPWVsZXZhdGlvbkRhdGEnXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuICAgICAgICAgICAgICAgIC8vY29udmVydGluZyBhbGwgZGF0YSBwYXNzZWQgdGhydSBpbnRvIGFuIGFycmF5XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YSA9IGF0dHJzLmVsZXZhdGlvbkRhdGEuc3BsaXQoJywnKTtcclxuICAgICAgICAgICAgICAgIC8vaW4gRDMsIGFueSBzZWxlY3Rpb25bMF0gY29udGFpbnMgdGhlIGdyb3VwIHNlbGVjdGlvblswXVswXSBpcyB0aGUgRE9NIG5vZGUgYnV0IHdlIHdvbid0IG5lZWQgdGhhdCB0aGlzIHRpbWVcclxuICAgICAgICAgICAgICAgIHZhciBjaGFydCA9IGQzLnNlbGVjdChlbGVtZW50WzBdKTtcclxuICAgICAgICAgICAgICAgIC8vdG8gb3VyIG9yaWdpbmFsIGRpcmVjdGl2ZSBtYXJrdXAgYmFycy1jaGFydCB3ZSBhZGQgYSBkaXYgd2l0aCBvdXQgY2hhcnQgc3RsaW5nIGFuZCBiaW5kIGVhY2ggZGF0YSBlbnRyeSB0byB0aGUgY2hhcnRcclxuICAgICAgICAgICAgICAgIGNoYXJ0LmFwcGVuZChcImRpdlwiKS5hdHRyKFwiY2xhc3NcIiwgXCJjaGFydFwiKVxyXG4gICAgICAgICAgICAgICAgIC5zZWxlY3RBbGwoJ2RpdicpXHJcbiAgICAgICAgICAgICAgICAgLmRhdGEoc2NvcGUuZGF0YSkuZW50ZXIoKS5hcHBlbmQoXCJkaXZcIilcclxuICAgICAgICAgICAgICAgICAudHJhbnNpdGlvbigpLmVhc2UoXCJlbGFzdGljXCIpXHJcbiAgICAgICAgICAgICAgICAgLnN0eWxlKFwid2lkdGhcIiwgZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQgKyBcIiVcIjsgfSlcclxuICAgICAgICAgICAgICAgICAudGV4dChmdW5jdGlvbiAoZCkgeyByZXR1cm4gZCArIFwiJVwiOyB9KTtcclxuICAgICAgICAgICAgICAgIC8vYSBsaXR0bGUgb2YgbWFnaWM6IHNldHRpbmcgaXQncyB3aWR0aCBiYXNlZCBvbiB0aGUgZGF0YSB2YWx1ZSAoZCkgYW5kIHRleHQgYWxsIHdpdGggYSBzbW9vdGggdHJhbnNpdGlvblxyXG4gICAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKCdkYXRhJywgZnVuY3Rpb24gKG5ld1ZhbHVlLCBvbGRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLmRhdGEgPSBuZXdWYWx1ZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICByZXR1cm4gZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdDtcclxuICAgIH1dKTtcclxuICAgIFNUTkNvbnRyb2xsZXJzLmRpcmVjdGl2ZSgnc2l0ZVNlYXJjaCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0UnLFxyXG4gICAgICAgICAgICBzY29wZToge1xyXG4gICAgICAgICAgICAgICAgbW9kZWw6ICc9bmdNb2RlbCcsXHJcbiAgICAgICAgICAgICAgICBzZWFyY2hCeTogJz0nLCAvL3JlcXVpcmVkXHJcbiAgICAgICAgICAgICAgICBzZWFyY2hUZXJtOiAnPSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmVwbGFjZTogdHJ1ZSxcclxuICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwic2VhcmNobmF2XCI+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZWFyY2hieVwiPjxiPlNlYXJjaCBCeTo8L2I+JytcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZWFyY2hieW9wdGlvblwiPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwiU2VhcmNoQnlcIiBuZy1tb2RlbD1cInNlYXJjaEJ5LnZhbFwiIHZhbHVlPVwiYnlTaXRlSWRcIiAvPklEPC9kaXY+JytcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZWFyY2hieW9wdGlvblwiPjxpbnB1dCB0eXBlPVwicmFkaW9cIiBuYW1lPVwiU2VhcmNoQnlcIiBuZy1tb2RlbD1cInNlYXJjaEJ5LnZhbFwiIHZhbHVlPVwiYnlTaXRlTm9cIiAvPk51bWJlcjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlYXJjaGJ5b3B0aW9uXCI+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJTZWFyY2hCeVwiIG5nLW1vZGVsPVwic2VhcmNoQnkudmFsXCIgdmFsdWU9XCJieVNpdGVOYW1lXCIgLz5OYW1lPC9kaXY+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2VhcmNoLWlucHV0XCI+PGlucHV0IG5nLWZvY3VzPVwiZ29TZWFyY2hcIiB0eXBlPVwidGV4dFwiIG5nLW1vZGVsPVwic2VhcmNoVGVybVwiIG5nLWVudGVyPVwiSW5kZXhTZWFyY2hTaXRlcygpXCIgcGxhY2Vob2xkZXI9XCJTZWFyY2ggU2l0ZXMuLi5cIiAvPicrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJvcmRlckxlc3NcIiBuZy1jbGljaz1cIkluZGV4U2VhcmNoU2l0ZXMoKVwiPlNlYXJjaCA8aSBjbGFzcz1cImlvbi1zZWFyY2hcIj48L2k+PC9idXR0b24+PC9kaXY+PC9kaXY+JyxcclxuXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6IFtcclxuICAgICAgICAgICAgICAgICckc2NvcGUnLCAnJHN0YXRlJywgJyRodHRwJywgJ1NJVEUnLCAnJHVpYk1vZGFsJyxcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRzdGF0ZSwgJGh0dHAsIFNJVEUsICR1aWJNb2RhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWFyY2hUZXJtID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaEJ5ID0geyB2YWw6ICdieVNpdGVObycgfTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGxhY2Vob2xkZXIgPSAnLi4uJztcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSW5kZXhTZWFyY2hTaXRlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5zZWFyY2hUZXJtICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCRzY29wZS5zZWFyY2hCeS52YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdieVNpdGVObyc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNJVEUuZ2V0U2VhcmNoZWRTaXRlKHsgYnlTaXRlTm86ICRzY29wZS5zZWFyY2hUZXJtIH0sIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZVNlYXJjaFJlc3BvbnNlKHJlc3ApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXRlU2VhcmNoUmVzcG9uc2UoZXJyb3JSZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdieVNpdGVJZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNJVEUuZ2V0U2VhcmNoZWRTaXRlKHsgYnlTaXRlSWQ6ICRzY29wZS5zZWFyY2hUZXJtIH0sIGZ1bmN0aW9uIChyZXNwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXRlU2VhcmNoUmVzcG9uc2UocmVzcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXRlU2VhcmNoUmVzcG9uc2UoZXJyb3JSZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdieVNpdGVOYW1lJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU0lURS5nZXRTZWFyY2hlZFNpdGUoeyBieVNpdGVOYW1lOiAkc2NvcGUuc2VhcmNoVGVybSB9LCBmdW5jdGlvbiAocmVzcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZVNlYXJjaFJlc3BvbnNlKHJlc3ApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZVNlYXJjaFJlc3BvbnNlKGVycm9yUmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzaXRlU2VhcmNoUmVzcG9uc2UgPSBmdW5jdGlvbiAocykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocy5zdGF0dXMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9lcnJvcnN0YXR1cyBzaG93IG1vZGFsIHdpdGggZXJyb3IgbWVzc2FnZSAnbm8gc2l0ZSBmb3VuZCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvck1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5ObyBzaXRlIGZvdW5kLiBGb3IgbW9yZSBzaXRlIHNlYXJjaCBvcHRpb25zLCBnbyB0byB0aGUgU2l0ZXMgbmF2aWdhdGlvbiB0YWIgdG8gc2VhcmNoIGZvciBzaXRlcy48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVycm9yTW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWFyY2hUZXJtID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaEJ5ID0geyB2YWw6ICdieVNpdGVObycgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVzZXQgc2VhcmNoIGFuZCBnbyB0byB0aGUgc2l0ZSBkYXNoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoVGVybSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaEJ5ID0geyB2YWw6ICdieVNpdGVObycgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnc2l0ZS5kYXNoYm9hcmQnLCB7IGlkOiBzLnNpdGVfaWQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vVGhpcyBkaXJlY3RpdmUgYWxsb3dzIHVzIHRvIHBhc3MgYSBmdW5jdGlvbiBpbiBvbiBhbiBlbnRlciBrZXkgdG8gZG8gd2hhdCB3ZSB3YW50LlxyXG4gICAgU1ROQ29udHJvbGxlcnMuZGlyZWN0aXZlKCduZ0VudGVyJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnQuYmluZChcImtleWRvd24ga2V5cHJlc3NcIiwgZnVuY3Rpb24gKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZXZlbnQud2hpY2ggPT09IDEzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGV2YWwoYXR0cnMubmdFbnRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vZm9jdXMgb24gdGhlIGZpcnN0IGVsZW1lbnQgb2YgdGhlIHBhZ2VcclxuICAgIFNUTkNvbnRyb2xsZXJzLmRpcmVjdGl2ZSgnbnVtZXJpY09ubHknLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBtb2RlbEN0cmwpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBtb2RlbEN0cmwuJHBhcnNlcnMucHVzaChmdW5jdGlvbiAoaW5wdXRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0cmFuc2Zvcm1lZElucHV0ID0gaW5wdXRWYWx1ZSA/IGlucHV0VmFsdWUucmVwbGFjZSgvW15cXGQuLV0vZywgJycpIDogbnVsbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRyYW5zZm9ybWVkSW5wdXQgIT0gaW5wdXRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbEN0cmwuJHNldFZpZXdWYWx1ZSh0cmFuc2Zvcm1lZElucHV0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxDdHJsLiRyZW5kZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1lZElucHV0O1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSk7XHJcblxyXG4gICAgLy8gZm9ybWF0IHRoZSBuZy1tb2RlbCBkYXRlIGFzIGRhdGUgb24gaW5pdGlhbCBsb2FkXHJcbiAgICBTVE5Db250cm9sbGVycy5kaXJlY3RpdmUoJ2RhdGVwaWNrZXJQb3B1cCcsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0VBQycsXHJcbiAgICAgICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyLCBjb250cm9sbGVyKSB7XHJcbiAgICAgICAgICAgICAgICAvL3JlbW92ZSB0aGUgZGVmYXVsdCBmb3JtYXR0ZXIgZnJvbSB0aGUgaW5wdXQgZGlyZWN0aXZlIHRvIHByZXZlbnQgY29uZmxpY3RcclxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXIuJGZvcm1hdHRlcnMuc2hpZnQoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuXHJcbiAgICBTVE5Db250cm9sbGVycy5kaXJlY3RpdmUoJ2ZvY3VzJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJpYnV0ZXMpIHtcclxuICAgICAgICAgICAgZWxlbWVudFswXS5mb2N1cygpO1xyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuXHJcbiAgICBTVE5Db250cm9sbGVycy5kaXJlY3RpdmUoJ2JhY2tCdXR0b24nLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5iaW5kKCdjbGljaycsIGdvQmFjayk7XHJcblxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gZ29CYWNrKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGhpc3RvcnkuYmFjaygpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vdmFsaWRhdGUgcGFzc3dvcmRcclxuICAgIFNUTkNvbnRyb2xsZXJzLmRpcmVjdGl2ZSgncGFzc3dvcmRWYWxpZGF0ZScsIFsnUmVnRXhwJywgZnVuY3Rpb24gKHJlZ2V4KSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsbSwgYXR0cnMsIGN0cmwpIHtcclxuICAgICAgICAgICAgICAgIGVsbS51bmJpbmQoJ2tleWRvd24nKS51bmJpbmQoJ2NoYW5nZScpO1xyXG4gICAgICAgICAgICAgICAgZWxtLmJpbmQoJ2JsdXInLCBmdW5jdGlvbiAodmlld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKChyZWdleC5QQVNTV09SRCkudGVzdCh2aWV3VmFsdWUudGFyZ2V0LnZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pdCBpcyB2YWxpZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkoXCJwYXNzd29yZFZhbGlkYXRlXCIsIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZpZXdWYWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaXQgaXMgaW52YWxpZCwgcmV0dXJuIHVuZGVmaW5lZCAtIG5vIG1vZGVsIHVwZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkoXCJwYXNzd29yZFZhbGlkYXRlXCIsIGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcclxuXHJcbiAgICBTVE5Db250cm9sbGVycy5kaXJlY3RpdmUoJ3NhbWVBcycsIFsnJHBhcnNlJywgZnVuY3Rpb24gKCRwYXJzZSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbG0sIGF0dHJzLCBjdHJsKSB7XHJcbiAgICAgICAgICAgICAgICBlbG0udW5iaW5kKCdrZXlkb3duJykudW5iaW5kKCdjaGFuZ2UnKTtcclxuICAgICAgICAgICAgICAgIGVsbS5iaW5kKCdibHVyJywgZnVuY3Rpb24gKHZpZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkcGFyc2UoYXR0cnMuc2FtZUFzKShzY29wZSkgPT09IGN0cmwuJG1vZGVsVmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGN1cnJlbnRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdHJsLiRzZXRWYWxpZGl0eSgncGFzc3dvcmRNaXNtYXRjaCcsIGN1cnJlbnRWYWx1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XHJcblxyXG4gICAgLy9tYWtlIHRleHRhcmVhIGhlaWdodCBlcXVhbCB0byBjb250ZW50IGluc2lkZSBpdCAobm8gc2Nyb2xsYmFycykgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy8xNzc3MjI2MC90ZXh0YXJlYS1hdXRvLWhlaWdodFxyXG4gICAgU1ROQ29udHJvbGxlcnMuZGlyZWN0aXZlKCdlbGFzdGljJywgWyckdGltZW91dCcsIGZ1bmN0aW9uICgkdGltZW91dCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uICgkc2NvcGUsIGVsZW1lbnQpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pbml0aWFsSGVpZ2h0ID0gJHNjb3BlLmluaXRpYWxIZWlnaHQgfHwgZWxlbWVudFswXS5zdHlsZS5oZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVzaXplID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRbMF0uc3R5bGUuaGVpZ2h0ID0gJHNjb3BlLmluaXRpYWxIZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbWVudFswXS5zdHlsZS5oZWlnaHQgPSBcIlwiICsgZWxlbWVudFswXS5zY3JvbGxIZWlnaHQgKyBcInB4XCI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgZWxlbWVudC5vbihcImlucHV0IGNoYW5nZVwiLCByZXNpemUpO1xyXG4gICAgICAgICAgICAgICAgJHRpbWVvdXQocmVzaXplLCAwKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XHJcblxyXG4gICAgU1ROQ29udHJvbGxlcnMuZGlyZWN0aXZlKCdteUlucHV0TWFzaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0FDJyxcclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbCwgYXR0cnMpIHtcclxuICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzayhzY29wZS4kZXZhbChhdHRycy5teUlucHV0TWFzaykpO1xyXG4gICAgICAgICAgICAgICAgZWwub24oJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBzY29wZS4kZXZhbChhdHRycy5uZ01vZGVsICsgXCI9J1wiICsgZWwudmFsKCkgKyBcIidcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gb3Igc2NvcGVbYXR0cnMubmdNb2RlbF0gPSBlbC52YWwoKSBpZiB5b3VyIGV4cHJlc3Npb24gZG9lc24ndCBjb250YWluIGRvdC5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vYmluZCBmaWxlIHVwbG9hZCBmaWxlIHRvIGEgbW9kZWwgc2NvcGUgdmFyXHJcbiAgICBTVE5Db250cm9sbGVycy5kaXJlY3RpdmUoJ2ZpbGVNb2RlbCcsIFsnJHBhcnNlJywgZnVuY3Rpb24gKCRwYXJzZSkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtb2RlbCA9ICRwYXJzZShhdHRycy5maWxlTW9kZWwpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vZGVsU2V0dGVyID0gbW9kZWwuYXNzaWduO1xyXG5cclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuYmluZCgnY2hhbmdlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsU2V0dGVyKHNjb3BlLCBlbGVtZW50WzBdLmZpbGVzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcclxuXHJcbiAgICAvL3VzZWQgb24gZXZlbnQgbmFtZSB0byBtYWtlIHN1cmUgbm8gc3BlY2lhbCBjaGFyYWN0ZXJzXHJcbiAgICBTVE5Db250cm9sbGVycy5kaXJlY3RpdmUoJ2lucHV0UmVzdHJpY3RvcicsIFtcclxuICAgICAgICBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICByZXN0cmljdDogJ0EnLFxyXG4gICAgICAgICAgICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxyXG4gICAgICAgICAgICAgICAgbGluazogZnVuY3Rpb24oc2NvcGUsIGVsZW1lbnQsIGF0dHIsIG5nTW9kZWxDdHJsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhdHRlcm4gPSAvW15hLXpBLVowLTktIF9dL2c7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGZyb21Vc2VyKHRleHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF0ZXh0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRleHQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNmb3JtZWRJbnB1dCA9IHRleHQucmVwbGFjZShwYXR0ZXJuLCAnJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1lZElucHV0ICE9PSB0ZXh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKHRyYW5zZm9ybWVkSW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmdNb2RlbEN0cmwuJHJlbmRlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cmFuc2Zvcm1lZElucHV0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBuZ01vZGVsQ3RybC4kcGFyc2Vycy5wdXNoKGZyb21Vc2VyKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XHJcbiAgICBdKTtcclxuXHJcbiAgICBTVE5Db250cm9sbGVycy5kaXJlY3RpdmUoJ2xhYmVsTGltaXRMZW5ndGgnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVzdHJpY3Q6IFwiQVwiLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW0sIGF0dHJzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGltaXQgPSBwYXJzZUludChhdHRycy5sYWJlbExpbWl0TGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChlbGVtKS5vbihcImtleXByZXNzXCIsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMudmFsdWUubGVuZ3RoID09IGxpbWl0KSBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuICAgIFxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBTVE5Db250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTVE5Db250cm9sbGVycycpO1xyXG5cclxuICAgIFNUTkNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ3NpdGVTZWFyY2hDdHJsJywgWyckc2NvcGUnLCAnJGNvb2tpZXMnLCAnJHJvb3RTY29wZScsICckbG9jYXRpb24nLCAnc3RhdGVMaXN0JywgJ3NlbnNvclR5cGVzJywgJ25ldHdvcmtOYW1lcycsICdTSVRFJywgXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGNvb2tpZXMsICRyb290U2NvcGUsICRsb2NhdGlvbiwgc3RhdGVMaXN0LCBzZW5zb3JUeXBlcywgbmV0d29ya05hbWVzLCBTSVRFKSB7XHJcbiAgICAgICAgICAgIGlmICgkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IHVuZGVmaW5lZCB8fCAkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hdXRoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnRoaXNQYWdlID0gXCJTaXRlIFNlYXJjaFwiO1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5hY3RpdmVNZW51ID0gXCJzaXRlc1wiOyAvLyByZXBvcnQsIHNldHRpbmdzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyB3YXRjaCBmb3IgdGhlIHNlc3Npb24gZXZlbnQgdG8gY2hhbmdlIGFuZCB1cGRhdGVcclxuICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJyk7IH0sIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXNzaW9uRXZlbnQgPSAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudE5hbWUnKSAhPT0gbnVsbCAmJiAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudE5hbWUnKSAhPT0gdW5kZWZpbmVkID8gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJykgOiBcIkFsbCBFdmVudHNcIjtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRlcyA9IHN0YXRlTGlzdDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZW5UeXBlcyA9IHNlbnNvclR5cGVzO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ldE5hbWVzID0gbmV0d29ya05hbWVzO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkNob3NlbiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNob3NlblN0YXRlcyA9IFtdOyAvL3VzZWQgdG8gam9pbiBlYWNoIGFiYnJldiB0byBwYXNzIHRvIGNhbGxcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaXRlUmVzcG9uc2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jaGVja2JveE1vZGVsID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGh3bU9ubHk6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgc2VuT25seTogMCxcclxuICAgICAgICAgICAgICAgICAgICByZGdPbmx5OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wRGVmaW5lZDogMFxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjaGFuZ2Ugc29ydGluZyBvcmRlclxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNvcnRfYnkgPSBmdW5jdGlvbiAobmV3U29ydGluZ09yZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5zb3J0aW5nT3JkZXIgPT0gbmV3U29ydGluZ09yZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXZlcnNlID0gISRzY29wZS5yZXZlcnNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc29ydGluZ09yZGVyID0gbmV3U29ydGluZ09yZGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGljb24gc2V0dXBcclxuICAgICAgICAgICAgICAgICAgICAkKCd0aCBpJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGljb24gcmVzZXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygpLmFkZENsYXNzKCdnbHlwaGljb24gZ2x5cGhpY29uLXNvcnQnKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnJldmVyc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgndGguJyArIG5ld1NvcnRpbmdPcmRlciArICcgaScpLnJlbW92ZUNsYXNzKCkuYWRkQ2xhc3MoJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJ3RoLicgKyBuZXdTb3J0aW5nT3JkZXIgKyAnIGknKS5yZW1vdmVDbGFzcygpLmFkZENsYXNzKCdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93bicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy9pZiB0aGV5IGFyZSBjb21pbmcgYmFjayBoZXJlLCBzZWUgaWYgYSBzZWFyY2ggaGFzIGJlZW4gc3RvcmVkIGxhc3QgdGltZS5cclxuICAgICAgICAgICAgICAgIGlmICgkcm9vdFNjb3BlLnNlYXJjaFBhcmFtcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNTZWFyY2ggPSAkcm9vdFNjb3BlLnNlYXJjaFBhcmFtcztcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vzc2lvbkV2ZW50ID0gTnVtYmVyKHRoaXNTZWFyY2guZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZm9yIGVhY2ggc3RhdGUsIHNlbGVjdGVkPXRydWVcclxuICAgICAgICAgICAgICAgICAgICAvL2dvIHRocm91Z2ggc3RhdGVzIGFuZCBhZGQgc2VsZWN0ZWQgUHJvcGVydHkuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAkc2NvcGUuc3RhdGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZm9yIGVhY2ggb25lLCBpZiByZXNwb25zZSBoYXMgdGhpcyBpZCwgYWRkICdzZWxlY3RlZDp0cnVlJyBlbHNlIGFkZCAnc2VsZWN0ZWQ6ZmFsc2UnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgdGhpc1NlYXJjaC5zdGF0ZS5sZW5ndGg7IHkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTZWFyY2guc3RhdGVbeV0gPT0gJHNjb3BlLnN0YXRlc1tpXS5zdGF0ZV9hYmJyZXYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVzW2ldLnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gdGhpc1NlYXJjaC5zdGF0ZS5sZW5ndGg7IC8vZW5zdXJlcyBpdCBkb2Vzbid0IHNldCBpdCBhcyBmYWxzZSBhZnRlciBzZXR0aW5nIGl0IGFzIHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZXNbaV0uc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1NlYXJjaC5zdGF0ZS5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVzW2ldLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jaG9zZW5TdGF0ZXMgPSB0aGlzU2VhcmNoLnN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5DaG9zZW4uc2Vuc29yID0gdGhpc1NlYXJjaC5TZW5zb3JUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5DaG9zZW4ubmV0d29yayA9IHRoaXNTZWFyY2guTmV0d29ya05hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkNob3Nlbi5zdXJ2ZXkgPSB0aGlzU2VhcmNoLkhXTVN1cnZleWVkO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jaGVja2JveE1vZGVsLmh3bU9ubHkgPSB0aGlzU2VhcmNoLkhXTU9ubHk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNoZWNrYm94TW9kZWwuc2VuT25seSA9IHRoaXNTZWFyY2guU2Vuc29yT25seTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2hlY2tib3hNb2RlbC5yZGdPbmx5ID0gdGhpc1NlYXJjaC5SREdPbmx5O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jaGVja2JveE1vZGVsLm9wRGVmaW5lZCA9IHRoaXNTZWFyY2guT1BEZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIFNJVEUuZ2V0RmlsdGVyZWRTaXRlcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50OiAkc2NvcGUuc2Vzc2lvbkV2ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTdGF0ZTogJHNjb3BlLmNob3NlblN0YXRlcy5qb2luKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNlbnNvclR5cGU6ICRzY29wZS5DaG9zZW4uc2Vuc29yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBOZXR3b3JrTmFtZTogJHNjb3BlLkNob3Nlbi5uZXR3b3JrLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBIV01Pbmx5OiAkc2NvcGUuY2hlY2tib3hNb2RlbC5od21Pbmx5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBIV01TdXJ2ZXllZDogJHNjb3BlLkNob3Nlbi5zdXJ2ZXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNlbnNvck9ubHk6ICRzY29wZS5jaGVja2JveE1vZGVsLnNlbk9ubHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJER09ubHk6ICRzY29wZS5jaGVja2JveE1vZGVsLnJkZ09ubHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9QRGVmaW5lZDogJHNjb3BlLmNoZWNrYm94TW9kZWwub3BEZWZpbmVkXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlTGlzdCA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZVJlc3BvbnNlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsgLy8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vZmlsdGVyIG9wdGlvbnMgY2hvc2VuLCBnbyBnZXQgdGhlc2Ugc2l0ZXMgdG8gc2hvdyBpbiBhIHRhYmxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoU2l0ZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IHRydWU7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vc3RvcmUgc2VhcmNoIGluIGNhc2UgdGhleSBsZWF2ZSBhbmQgY2xpY2sgYmFja1xyXG4gICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlU3RyaW5nID0gJHNjb3BlLmNob3NlblN0YXRlcy5qb2luKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVSZXNwb25zZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBldklEID0gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnRJRCcpICE9PSBudWxsICYmICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSAhPT0gdW5kZWZpbmVkID8gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnRJRCcpIDogMDtcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnNlYXJjaFBhcmFtcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2SUQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiAkc2NvcGUuY2hvc2VuU3RhdGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZW5zb3JUeXBlOiAkc2NvcGUuQ2hvc2VuLnNlbnNvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgTmV0d29ya05hbWU6ICRzY29wZS5DaG9zZW4ubmV0d29yayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgSFdNT25seTogJHNjb3BlLmNoZWNrYm94TW9kZWwuaHdtT25seSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgSFdNU3VydmV5ZWQ6ICRzY29wZS5DaG9zZW4uc3VydmV5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZW5zb3JPbmx5OiAkc2NvcGUuY2hlY2tib3hNb2RlbC5zZW5Pbmx5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSREdPbmx5OiAkc2NvcGUuY2hlY2tib3hNb2RlbC5yZGdPbmx5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBPUERlZmluZWQ6ICRzY29wZS5jaGVja2JveE1vZGVsLm9wRGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgU0lURS5nZXRGaWx0ZXJlZFNpdGVzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnQ6IGV2SUQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRlOiBzdGF0ZVN0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2Vuc29yVHlwZTogJHNjb3BlLkNob3Nlbi5zZW5zb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE5ldHdvcmtOYW1lOiAkc2NvcGUuQ2hvc2VuLm5ldHdvcmssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEhXTU9ubHk6ICRzY29wZS5jaGVja2JveE1vZGVsLmh3bU9ubHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEhXTVN1cnZleWVkOiAkc2NvcGUuQ2hvc2VuLnN1cnZleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2Vuc29yT25seTogJHNjb3BlLmNoZWNrYm94TW9kZWwuc2VuT25seSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgUkRHT25seTogJHNjb3BlLmNoZWNrYm94TW9kZWwucmRnT25seSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgT1BEZWZpbmVkOiAkc2NvcGUuY2hlY2tib3hNb2RlbC5vcERlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVMaXN0ID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlUmVzcG9uc2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTsvL2VuZCBzZWFyY2hTaXRlcyBjbGljayBhY3Rpb25cclxuXHJcbiAgICAgICAgICAgICAgICAvL2FkZCBlYWNoIHN0YXRlIHRvIGFuIGFycmF5IHRvIGJlIGpvaW5lZCBpbiB0aGUgR0VUXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVDbGljayA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc2VsZWN0ZWQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNob3NlblN0YXRlcy5wdXNoKGRhdGEuc3RhdGVfYWJicmV2KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc2VsZWN0ZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmQgPSAkc2NvcGUuY2hvc2VuU3RhdGVzLmluZGV4T2YoZGF0YS5zdGF0ZV9hYmJyZXYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jaG9zZW5TdGF0ZXMuc3BsaWNlKGluZCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vY2xlYXIgdGhlIGZpbHRlciBjaG9pY2VzIChzdGFydCBvdmVyKVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNsZWFyRmlsdGVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2hlY2tib3hNb2RlbCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHdtT25seTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuT25seTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmRnT25seTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BEZWZpbmVkOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQ2hvc2VuID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNob3NlblN0YXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLnN0YXRlcywgZnVuY3Rpb24gKHN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0LnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfV0pO1xyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIE1vZGFsQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnTW9kYWxDb250cm9sbGVycycpO1xyXG5cclxuICAgIE1vZGFsQ29udHJvbGxlcnMuY29udHJvbGxlcignc2l0ZU1vZGFsQ3RybCcsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGNvb2tpZXMnLCAnJHEnLCAnJGxvY2F0aW9uJywgJyRzdGF0ZScsICckaHR0cCcsICckc2NlJywgJyR0aW1lb3V0JywgJyR1aWJNb2RhbCcsICckdWliTW9kYWxJbnN0YW5jZScsICckZmlsdGVyJywgJ2xlYWZsZXRNYXJrZXJFdmVudHMnLCAnYWxsRHJvcERvd25QYXJ0cycsXHJcbiAgICAgICAgJ2ZpbGVUeXBlcycsICdhZ2VuY3lMaXN0JywgJ2xhdGxvbmcnLCAndGhpc1NpdGVTdHVmZicsICdhbGxNZW1iZXJzJywgJ1NJVEUnLCAnU0lURV9IT1VTSU5HJywgJ1NpdGVfRmlsZXMnLCAnTUVNQkVSJywgJ0lOU1RSVU1FTlQnLCAnSU5TVFJVTUVOVF9TVEFUVVMnLCAnTEFORE9XTkVSX0NPTlRBQ1QnLCAnR0VPQ09ERScsICdGSUxFX1NUQU1QJywgJ0ZJTEUnLCAnU09VUkNFJywgJ1NFUlZFUl9VUkwnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRjb29raWVzLCAkcSwgJGxvY2F0aW9uLCAkc3RhdGUsICRodHRwLCAkc2NlLCAkdGltZW91dCwgJHVpYk1vZGFsLCAkdWliTW9kYWxJbnN0YW5jZSwgJGZpbHRlciwgbGVhZmxldE1hcmtlckV2ZW50cywgYWxsRHJvcERvd25QYXJ0cywgZmlsZVR5cGVzLCBhZ2VuY3lMaXN0LCBsYXRsb25nLCB0aGlzU2l0ZVN0dWZmLCBhbGxNZW1iZXJzLCBTSVRFLFxyXG4gICAgICAgICAgICBTSVRFX0hPVVNJTkcsIFNpdGVfRmlsZXMsIE1FTUJFUiwgSU5TVFJVTUVOVCwgSU5TVFJVTUVOVF9TVEFUVVMsIExBTkRPV05FUl9DT05UQUNULCBHRU9DT0RFLCBGSUxFX1NUQU1QLCBGSUxFLCBTT1VSQ0UsIFNFUlZFUl9VUkwpIHtcclxuICAgICAgICAgICAgLy9kcm9wZG93bnMgXHJcbiAgICAgICAgICAgICRzY29wZS5Ib3Jpem9udGFsRGF0dW1MaXN0ID0gYWxsRHJvcERvd25QYXJ0c1swXTtcclxuICAgICAgICAgICAgJHNjb3BlLkhvckNvbGxNZXRob2RMaXN0ID0gYWxsRHJvcERvd25QYXJ0c1sxXTtcclxuICAgICAgICAgICAgJHNjb3BlLlN0YXRlTGlzdCA9IGFsbERyb3BEb3duUGFydHNbMl07XHJcbiAgICAgICAgICAgICRzY29wZS5BbGxDb3VudHlMaXN0ID0gYWxsRHJvcERvd25QYXJ0c1szXTtcclxuICAgICAgICAgICAgJHNjb3BlLnN0YXRlQ291bnR5TGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAkc2NvcGUuRE1TID0ge307IC8vaG9sZGVyIG9mIGRlZyBtaW4gc2VjIHZhbHVlc1xyXG4gICAgICAgICAgICAkc2NvcGUuYWxsSG91c2luZ1R5cGVMaXN0ID0gYWxsRHJvcERvd25QYXJ0c1s0XTtcclxuICAgICAgICAgICAgJHNjb3BlLkRlcFByaW9yaXR5TGlzdCA9IGFsbERyb3BEb3duUGFydHNbNV07XHJcbiAgICAgICAgICAgICRzY29wZS5OZXROYW1lTGlzdCA9IGFsbERyb3BEb3duUGFydHNbNl07XHJcbiAgICAgICAgICAgICRzY29wZS5OZXRUeXBlTGlzdCA9IGFsbERyb3BEb3duUGFydHNbN107XHJcbiAgICAgICAgICAgICRzY29wZS5Qcm9wb3NlZFNlbnMgPSBhbGxEcm9wRG93blBhcnRzWzhdO1xyXG4gICAgICAgICAgICAkc2NvcGUuU2Vuc29yRGVwbG95bWVudCA9IGFsbERyb3BEb3duUGFydHNbOV07XHJcbiAgICAgICAgICAgICRzY29wZS51c2VyUm9sZSA9ICRjb29raWVzLmdldCgndXNlcnNSb2xlJyk7XHJcbiAgICAgICAgICAgICRzY29wZS5jbG9zZVNpdGVzID0gMDtcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dNYXAgPSBmYWxzZTtcclxuICAgICAgICAgICAgJHNjb3BlLnNpdGVMYXQgPSAwO1xyXG4gICAgICAgICAgICAkc2NvcGUuc2l0ZUxvbmcgPSAwO1xyXG4gICAgICAgICAgICAkc2NvcGUuaHRtbERlc2NyaXB0aW9uVGlwID0gJHNjZS50cnVzdEFzSHRtbCgnUmVxdWlyZWQgYnkgTldJUy4gQ2FuIGJlIGxpc3RlZCBhcyA8ZW0+XFwndW5rbm93blxcJzwvZW0+IG9yIDxlbT5cXCdBdGxhbnRpYyBPY2VhblxcJzwvZW0+Jyk7XHJcbiAgICAgICAgICAgICRzY29wZS5tYXBDZW50ZXIgPSB7XHJcbiAgICAgICAgICAgICAgICBsYXQ6ICRzY29wZS5zaXRlTGF0LFxyXG4gICAgICAgICAgICAgICAgbG5nOiAkc2NvcGUuc2l0ZUxvbmcsXHJcbiAgICAgICAgICAgICAgICB6b29tOiAxN1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmV2ZW50cyA9IHtcclxuICAgICAgICAgICAgICAgIG1hcE1hcmtlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBlbmFibGU6IGxlYWZsZXRNYXJrZXJFdmVudHMuZ2V0QXZhaWxhYmxlRXZlbnRzKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgJHNjb3BlLm1hcE1hcmtlcnMgPSBbXTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBpY29ucyA9IHtcclxuICAgICAgICAgICAgICAgIHN0bjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgICAgIGljb25TaXplOiBbMTAsIDEwXSxcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdzdG5TaXRlSWNvbidcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBuZXdTVE46IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGl2JyxcclxuICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogWzEwLCAxMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbmV3U2l0ZUljb24nLFxyXG4gICAgICAgICAgICAgICAgICAgIGljb25BbmNob3I6IFs1LCA1XVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvL2NvbnZlcnQgZGVnIG1pbiBzZWMgdG8gZGVjIGRlZ3JlZXNcclxuICAgICAgICAgICAgdmFyIGF6aW11dGggPSBmdW5jdGlvbiAoZGVnLCBtaW4sIHNlYykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGF6aSA9IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVnIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGF6aSA9IC0xLjAgKiBkZWcgKyAxLjAgKiBtaW4gLyA2MC4wICsgMS4wICogc2VjIC8gMzYwMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoLTEuMCAqIGF6aSkudG9GaXhlZCg1KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGF6aSA9IDEuMCAqIGRlZyArIDEuMCAqIG1pbiAvIDYwLjAgKyAxLjAgKiBzZWMgLyAzNjAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChhemkpLnRvRml4ZWQoNSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUudXBkYXRlQWRkcmVzc09ubHkgPSBmdW5jdGlvbiAoKSB7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ETVMuTEFEZWcgIT09IHVuZGVmaW5lZCkgJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxBRGVnLCAkc2NvcGUuRE1TLkxBTWluLCAkc2NvcGUuRE1TLkxBU2VjKTtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxPRGVnICE9PSB1bmRlZmluZWQpICRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTE9EZWcsICRzY29wZS5ETVMuTE9NaW4sICRzY29wZS5ETVMuTE9TZWMpO1xyXG4gICAgICAgICAgICAgICAgZGVsZXRlICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb247XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICBHRU9DT0RFLmdldEFkZHJlc3NQYXJ0cyh7IExvbmdpdHVkZTogJHNjb3BlLmFTaXRlLmxvbmdpdHVkZV9kZCwgTGF0aXR1ZGU6ICRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnJlc3VsdC5nZW9ncmFwaGllcy5Db3VudGllcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZUZJUFMgPSByZXNwb25zZS5yZXN1bHQuZ2VvZ3JhcGhpZXMuQ291bnRpZXNbMF0uU1RBVEU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb3VudHlOYW1lID0gcmVzcG9uc2UucmVzdWx0Lmdlb2dyYXBoaWVzLkNvdW50aWVzWzBdLk5BTUU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzU3RhdGVJRCA9ICRzY29wZS5BbGxDb3VudHlMaXN0LmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5zdGF0ZV9maXAgPT0gc3RhdGVGSVBTOyB9KVswXS5zdGF0ZV9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNTdGF0ZSA9ICRzY29wZS5TdGF0ZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnN0YXRlX2lkID09IHRoaXNTdGF0ZUlEOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTdGF0ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuc3RhdGUgPSB0aGlzU3RhdGUuc3RhdGVfYWJicmV2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRlQ291bnR5TGlzdCA9ICRzY29wZS5BbGxDb3VudHlMaXN0LmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5zdGF0ZV9pZCA9PSB0aGlzU3RhdGUuc3RhdGVfaWQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLmNvdW50eSA9IGNvdW50eU5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJUaGUgTGF0aXR1ZGUvTG9uZ2l0dWRlIGRpZCBub3QgcmV0dXJuIGEgcmVjb2duaXplZCBzdGF0ZS4gUGxlYXNlIGNob29zZSBvbmUgZnJvbSB0aGUgZHJvcGRvd24uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJObyBsb2NhdGlvbiBpbmZvcm1hdGlvbiBjYW1lIGJhY2sgZnJvbSB0aGF0IGxhdC9sb25nXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yIChlcnJvclJlc3BvbnNlKXtcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBnZXR0aW5nIGxvY2F0aW9uIGluZm9ybWF0aW9uLlwiKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLy91cGRhdGUgbmV3U2l0ZSBsYXQvbG5nIGFmdGVyIGRyYWdlbmRcclxuICAgICAgICAgICAgJHNjb3BlLiRvbihcImxlYWZsZXREaXJlY3RpdmVNYXJrZXIuZHJhZ2VuZFwiLCBmdW5jdGlvbiAoZXZlbnQsIGFyZ3MpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkcmFnZW5kTG9jYXRpb24gPSBhcmdzLm1vZGVsO1xyXG4gICAgICAgICAgICAgICAgLy91cGRhdGUgbGF0L2xvbmdcclxuICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCA9IHBhcnNlRmxvYXQoZHJhZ2VuZExvY2F0aW9uLmxhdC50b0ZpeGVkKDYpKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQgPSBwYXJzZUZsb2F0KGRyYWdlbmRMb2NhdGlvbi5sbmcudG9GaXhlZCg2KSk7XHJcbiAgICAgICAgICAgICAgICAvL3VwZGF0ZSBkbXMgYWxzbyBpbiBjYXNlIHRoZXkgaGF2ZSB0aGF0IHNob3dpbmdcclxuICAgICAgICAgICAgICAgIHZhciBsYXRETVMgPSAoZGVnX3RvX2Rtcygkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQpKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxhZERNU2FycmF5ID0gbGF0RE1TLnNwbGl0KCc6Jyk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxBRGVnID0gbGFkRE1TYXJyYXlbMF07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxBTWluID0gbGFkRE1TYXJyYXlbMV07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxBU2VjID0gbGFkRE1TYXJyYXlbMl07XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGxvbmdETVMgPSBkZWdfdG9fZG1zKCRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGxvbmdETVNhcnJheSA9IGxvbmdETVMuc3BsaXQoJzonKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTE9EZWcgPSBsb25nRE1TYXJyYXlbMF0gKiAtMTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTE9NaW4gPSBsb25nRE1TYXJyYXlbMV07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPU2VjID0gbG9uZ0RNU2FycmF5WzJdO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVBZGRyZXNzT25seSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vZ2V0IGFkZHJlc3MgcGFydHMgYW5kIGV4aXN0aW5nIHNpdGVzIFxyXG4gICAgICAgICAgICAkc2NvcGUuZ2V0QWRkcmVzcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxBRGVnICE9PSB1bmRlZmluZWQpICRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MQURlZywgJHNjb3BlLkRNUy5MQU1pbiwgJHNjb3BlLkRNUy5MQVNlYyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MT0RlZyAhPT0gdW5kZWZpbmVkKSAkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxPRGVnLCAkc2NvcGUuRE1TLkxPTWluLCAkc2NvcGUuRE1TLkxPU2VjKTtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkICE9PSB1bmRlZmluZWQgJiYgIWlzTmFOKCRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCkgJiYgIWlzTmFOKCRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcENlbnRlciA9IHsgbGF0OiBwYXJzZUZsb2F0KCRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCksIGxuZzogcGFyc2VGbG9hdCgkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkKSwgem9vbTogMTggfTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFwTWFya2VycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSB0cnVlOyAvL2xvYWRpbmcuLi5cclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgR0VPQ09ERS5nZXRBZGRyZXNzUGFydHMoeyBMb25naXR1ZGU6ICRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQsIExhdGl0dWRlOiAkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQgfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UucmVzdWx0Lmdlb2dyYXBoaWVzLkNvdW50aWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZUZJUFMgPSByZXNwb25zZS5yZXN1bHQuZ2VvZ3JhcGhpZXMuQ291bnRpZXNbMF0uU1RBVEU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY291bnR5TmFtZSA9IHJlc3BvbnNlLnJlc3VsdC5nZW9ncmFwaGllcy5Db3VudGllc1swXS5OQU1FO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNTdGF0ZUlEID0gJHNjb3BlLkFsbENvdW50eUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnN0YXRlX2ZpcCA9PSBzdGF0ZUZJUFM7IH0pWzBdLnN0YXRlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNTdGF0ZSA9ICRzY29wZS5TdGF0ZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnN0YXRlX2lkID09IHRoaXNTdGF0ZUlEOyB9KVswXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1N0YXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuc3RhdGUgPSB0aGlzU3RhdGUuc3RhdGVfYWJicmV2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZUNvdW50eUxpc3QgPSAkc2NvcGUuQWxsQ291bnR5TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuc3RhdGVfaWQgPT0gdGhpc1N0YXRlLnN0YXRlX2lkOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuY291bnR5ID0gY291bnR5TmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3NlZSBpZiB0aGVyZSBhcmUgYW55IHNpdGVzIHdpdGhpbiBhIDAuMDAwNSBidWZmZXIgb2YgaGVyZSBmb3IgdGhlbSB0byB1c2UgaW5zdGVhZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNJVEUuZ2V0UHJveGltaXR5U2l0ZXMoeyBMYXRpdHVkZTogJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkLCBMb25naXR1ZGU6ICRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQsIEJ1ZmZlcjogMC4wMDA1IH0sIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNsb3NlU2l0ZXMgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jbG9zZVNpdGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLmNsb3NlU2l0ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9ICRzY29wZS5jbG9zZVNpdGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXBNYXJrZXJzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXQ6IGEubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogYS5sb25naXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6IGEuc2l0ZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9ubzogYS5zaXRlX25vLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpY29ucy5zdG4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGEuc2l0ZV9ubyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXM6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcE1hcmtlcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXQ6IHBhcnNlRmxvYXQoJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogcGFyc2VGbG9hdCgkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IGljb25zLm5ld1NUTixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdOZXcgZHJhZ2dhYmxlIFNUTiBzaXRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dNYXAgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJUaGUgTGF0aXR1ZGUvTG9uZ2l0dWRlIGRpZCBub3QgcmV0dXJuIGEgcmVjb2duaXplZCBzdGF0ZS4gUGxlYXNlIGNob29zZSBvbmUgZnJvbSB0aGUgZHJvcGRvd24uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3IgZ2V0dGluZyBhZGRyZXNzIGxvY2F0aW9uLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdGhleSBkaWQgbm90IHR5cGUgYSBsYXQvbG9uZyBmaXJzdC4uLlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbXB0eUxhdExvbmdNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5QbGVhc2UgcHJvdmlkZSBhIExhdGl0dWRlIGFuZCBMb25naXR1ZGUgYmVmb3JlIGNsaWNraW5nIFZlcmlmeSBMb2NhdGlvbjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vZ2xvYmFscyBcclxuICAgICAgICAgICAgJHNjb3BlLmhvdXNlRGlydHkgPSBmYWxzZTsgJHNjb3BlLm5ldFR5cGVEaXJ0eSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkc2NvcGUuc2l0ZUhvdXNlVHlwZXNUYWJsZSA9IFtdO1xyXG4gICAgICAgICAgICAkc2NvcGUuYVNpdGUgPSB7fTtcclxuXHJcbiAgICAgICAgICAgIC8vaWYgbGF0bG9uZywgdGhlbiBpdCdzIGNvbWluZyBmcm9tIHRoZSBtYXAgdGFiLiBwb3B1bGF0ZSBsYXQsbG9uZyxoZGF0dW0gYW5kIGRvIGdlb3NlYXJjaFxyXG4gICAgICAgICAgICBpZiAobGF0bG9uZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQgPSBwYXJzZUZsb2F0KGxhdGxvbmdbMF0udG9GaXhlZCg2KSk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkID0gcGFyc2VGbG9hdChsYXRsb25nWzFdLnRvRml4ZWQoNikpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLmhkYXR1bV9pZCA9IDQ7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuaGNvbGxlY3RfbWV0aG9kX2lkID0gNDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5nZXRBZGRyZXNzKCk7IC8vZ2V0IHRoZSBhZGRyZXNzIHVzaW5nIHBhc3NlZCBpbiBsYXQvbG9uZyBhbmQgY2hlY2sgZm9yIG5lYXJieSBzaXRlc1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuYVNpdGUuZGVjRGVnT1JkbXMgPSAnZGQnO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgJHNjb3BlLm9yaWdpbmFsU2l0ZUhvdXNpbmdzID0gW107XHJcbiAgICAgICAgICAgICRzY29wZS5jaGVja2VkID0gXCJcIjsgJHNjb3BlLmNoZWNrZWROYW1lID0gXCJOb3QgRGVmaW5lZFwiOyAvL2NvbXBhcmVycyBmb3IgZGlzYWJsaW5nIG5ldHdvcmsgbmFtZXMgaWYgJ05vdCBEZWZpbmVkJyBjaGVja2VkXHJcbiAgICAgICAgICAgICRzY29wZS5sYW5kb3duZXIgPSB7fTtcclxuICAgICAgICAgICAgJHNjb3BlLmFkZExhbmRvd25lciA9IGZhbHNlOyAvL2hpZGUgbGFuZG93bmVyIGZpZWxkc1xyXG4gICAgICAgICAgICAkc2NvcGUuZGlzYWJsZVNlbnNvclBhcnRzID0gZmFsc2U7IC8vdG9nZ2xlIHRvIGRpc2FibGUvZW5hYmxlIHNlbnNvciBob3VzaW5nIGluc3RhbGxlZCBhbmQgYWRkIHByb3Bvc2VkIHNlbnNvclxyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd1NpdGVIb3VzZVRhYmxlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICRzY29wZS5zaXRlSG91c2VUeXBlc1RhYmxlID0gW107IC8vaG9sZGVyIGZvciB3aGVuIGFkZGluZyBob3VzaW5nIHR5cGUgdG8gcGFnZSBmcm9tIG11bHRpc2VsZWN0XHJcbiAgICAgICAgICAgICRzY29wZS5zaXRlSG91c2VzTW9kZWwgPSB7fTtcclxuICAgICAgICAgICAgJHNjb3BlLnNpdGVIb3VzZXNUb1JlbW92ZSA9IFtdOyAvL2hvbGRlciBmb3IgZWRpdGluZyBzaXRlIHRvIGFkZCByZW1vdmluZyBob3VzZSB0eXBlcyB0byBmb3IgUFVUXHJcbiAgICAgICAgICAgICRzY29wZS5OZXR3b3JrTkFNRVRvQWRkID0gW107IC8vaG9sZGVyIGZvciBvYmplY3RpdmUgdHlwZXMgYWRkZWRcclxuICAgICAgICAgICAgJHNjb3BlLk5ldHdvcmtOQU1FVG9SZW1vdmUgPSBbXTsgLy9ob2xkZXIgZm9yIG9iamVjdGl2ZSB0eXBlcyByZW1vdmVkIG9uIGV4aXN0aW5nIHByb2plY3RzIChlZGl0KVxyXG4gICAgICAgICAgICAkc2NvcGUuTmV0d29ya1RZUEVUb0FkZCA9IFtdOyAvL2hvbGRlciBmb3Igb2JqZWN0aXZlIHR5cGVzIGFkZGVkXHJcbiAgICAgICAgICAgICRzY29wZS5OZXR3b3JrVFlQRVRvUmVtb3ZlID0gW107IC8vaG9sZGVyIGZvciBvYmplY3RpdmUgdHlwZXMgcmVtb3ZlZCBvbiBleGlzdGluZyBwcm9qZWN0cyAoZWRpdClcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5zaXRlTmV0d29ya05hbWVzID0gW107IC8vaG9sZHMgdGhlIE5ldHdvcmtOYW1lIChsaXN0IG9mIHN0cmluZ3MpIHRvIHBhc3MgYmFjaztcclxuICAgICAgICAgICAgJHNjb3BlLnNpdGVOZXR3b3JrVHlwZXMgPSBbXTsgLy9ob2xkcyB0aGUgTmV0d29ya1R5cGUgKGxpc3Qgb2Ygc3RyaW5ncykgdG8gcGFzcyBiYWNrO1xyXG4gICAgICAgICAgIFxyXG4gICAgICAgICAgICAvL1NJVEUgRklMRSBQQVJUIC8vLy8vICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICRzY29wZS5zZXJ2ZXJVUkwgPSBTRVJWRVJfVVJMOyAvL2NvbnN0YW50IHdpdGggc3RudGVzdC53aW0udXNncy5nb3YvU1ROU2VydmljZXMyIFxyXG4gICAgICAgICAgICAkc2NvcGUuZmlsZVR5cGVMaXN0ID0gZmlsZVR5cGVzLmZpbHRlcihmdW5jdGlvbiAoZnQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmdC5maWxldHlwZSA9PT0gJ1Bob3RvJyB8fCBmdC5maWxldHlwZSA9PT0gJ0hpc3RvcmljIENpdGF0aW9uJyB8fCBmdC5maWxldHlwZSA9PT0gJ0ZpZWxkIFNoZWV0cycgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdC5maWxldHlwZSA9PT0gJ0xldmVsIE5vdGVzJyB8fCBmdC5maWxldHlwZSA9PT0gJ1NpdGUgU2tldGNoJyB8fCBmdC5maWxldHlwZSA9PT0gJ090aGVyJyB8fCBmdC5maWxldHlwZSA9PT0gJ0xpbmsnIHx8IGZ0LmZpbGV0eXBlID09PSAnU2tldGNoJyB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ0LmZpbGV0eXBlID09PSAnTGFuZG93bmVyIFBlcm1pc3Npb24gRm9ybSc7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzID0gU2l0ZV9GaWxlcy5nZXRBbGxTaXRlRmlsZXMoKTtcclxuICAgICAgICAgICAgLy9pZiB0aGlzU2l0ZVN0dWZmIGlzIG5vdCB1bmRlZmluZWQsIGZpbHRlciB0aGUgYWxsU0ZpbGVzIGFuZCBnaXZlIG1lIGp1c3QgdGhvc2UgZm9yIHRoZSBzaXRlIE9OTFlcclxuICAgICAgICAgICAgJHNjb3BlLlNJVEVGaWxlcyA9IHRoaXNTaXRlU3R1ZmYgIT09IHVuZGVmaW5lZCA/XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzLmZpbHRlcihmdW5jdGlvbiAoc2YpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2Yuc2l0ZV9pZCA9PSB0aGlzU2l0ZVN0dWZmWzBdLnNpdGVfaWQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHNmLmh3bV9pZCA9PT0gdW5kZWZpbmVkIHx8IHNmLmh3bV9pZCA9PT0gMCkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgKHNmLmluc3RydW1lbnRfaWQgPT09IHVuZGVmaW5lZCB8fCBzZi5pbnN0cnVtZW50X2lkID09PSAwKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoc2Yub2JqZWN0aXZlX3BvaW50X2lkID09PSB1bmRlZmluZWQgfHwgc2Yub2JqZWN0aXZlX3BvaW50X2lkID09PSAwKTtcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICA6IFtdOy8vIGhvbGRlciBmb3Igc2l0ZSBmaWxlcyBhZGRlZFxyXG4gICAgICAgICAgICAkc2NvcGUuc2l0ZUltYWdlRmlsZXMgPSAkc2NvcGUuU0lURUZpbGVzLmZpbHRlcihmdW5jdGlvbiAoaGYpIHsgcmV0dXJuIGhmLmZpbGV0eXBlX2lkID09PSAxOyB9KTsgLy9pbWFnZSBmaWxlcyBmb3IgY2Fyb3VzZWxcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IGZhbHNlOyAvL2hpZGRlbiBmb3JtIHRvIGFkZCBmaWxlIHRvIHNpdGVcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vI3JlZ2lvbiBGSUxFIFNUVUZGXHJcbiAgICAgICAgICAgICRzY29wZS5zdGFtcCA9IEZJTEVfU1RBTVAuZ2V0U3RhbXAoKTsgJHNjb3BlLmZpbGVJdGVtRXhpc3RzID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy9uZWVkIHRvIHJldXBsb2FkIGZpbGVJdGVtIHRvIHRoaXMgZXhpc3RpbmcgZmlsZSBPUiBDaGFuZ2Ugb3V0IGV4aXN0aW5nIGZpbGVJdGVtIGZvciBuZXcgb25lXHJcbiAgICAgICAgICAgICRzY29wZS5zYXZlRmlsZVVwbG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHZhciBmaWxlUGFydHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRmlsZUVudGl0eToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2lkOiAkc2NvcGUuYUZpbGUuZmlsZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJHNjb3BlLmFGaWxlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAkc2NvcGUuYUZpbGUuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RpcmVjdGlvbjogJHNjb3BlLmFGaWxlLnBob3RvX2RpcmVjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGVfZGQ6ICRzY29wZS5hRmlsZS5sYXRpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlX2RkOiAkc2NvcGUuYUZpbGUubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2RhdGU6ICRzY29wZS5hRmlsZS5maWxlX2RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6ICRzY29wZS5hRmlsZS5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxldHlwZV9pZDogJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VfaWQ6ICRzY29wZS5hRmlsZS5zb3VyY2VfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6ICRzY29wZS5hRmlsZS5wYXRoLCAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwaG90b19kYXRlOiAkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNfbndpczogJHNjb3BlLmFGaWxlLmlzX253aXMgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIEZpbGU6ICRzY29wZS5hRmlsZS5GaWxlMSAhPT0gdW5kZWZpbmVkID8gJHNjb3BlLmFGaWxlLkZpbGUxIDogJHNjb3BlLmFGaWxlLkZpbGVcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvL25lZWQgdG8gcHV0IHRoZSBmaWxlUGFydHMgaW50byBjb3JyZWN0IGZvcm1hdCBmb3IgcG9zdFxyXG4gICAgICAgICAgICAgICAgdmFyIGZkID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgICAgICAgICAgICBmZC5hcHBlbmQoXCJGaWxlRW50aXR5XCIsIEpTT04uc3RyaW5naWZ5KGZpbGVQYXJ0cy5GaWxlRW50aXR5KSk7XHJcbiAgICAgICAgICAgICAgICBmZC5hcHBlbmQoXCJGaWxlXCIsIGZpbGVQYXJ0cy5GaWxlKTtcclxuICAgICAgICAgICAgICAgIC8vbm93IFBPU1QgaXQgKGZpbGVwYXJ0cylcclxuICAgICAgICAgICAgICAgIEZJTEUudXBsb2FkRmlsZShmZCkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoZnJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIFVwbG9hZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zcmMgPSAkc2NvcGUuc2VydmVyVVJMICsgJy9GaWxlcy8nICsgJHNjb3BlLmFGaWxlLmZpbGVfaWQgKyAnL0l0ZW0nICsgRklMRV9TVEFNUC5nZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIEZJTEVfU1RBTVAuc2V0U3RhbXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhbXAgPSBGSUxFX1NUQU1QLmdldFN0YW1wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5GaWxlMS50eXBlLmluZGV4T2YoXCJpbWFnZVwiKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1Bob3RvID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgJHNjb3BlLmlzUGhvdG8gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUubmFtZSA9IGZyZXNwb25zZS5uYW1lOyAkc2NvcGUuYUZpbGUucGF0aCA9IGZyZXNwb25zZS5wYXRoO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuRmlsZTEgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuRmlsZSA9ICRzY29wZS5hRmlsZS5GaWxlMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLkZpbGUxID0gdW5kZWZpbmVkOyAvL3B1dCBpdCBhcyBmaWxlIGFuZCByZW1vdmUgaXQgZnJvbSAxXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGZyZXNwb25zZS5maWxlQmVsb25nc1RvID0gXCJTaXRlIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU0lURUZpbGVzLnNwbGljZSgkc2NvcGUuZXhpc3RGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5TSVRFRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmcmVzcG9uc2UuZmlsZXR5cGVfaWQgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVJbWFnZUZpbGVzLnNwbGljZSgkc2NvcGUuZXhpc3RGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZUltYWdlRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzWyRzY29wZS5hbGxTRmlsZUluZGV4XSA9IGZyZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuYWxsU0ZpbGVzKTsgLy91cGRhdGVzIHRoZSBmaWxlIGxpc3Qgb24gdGhlIHNpdGVkYXNoYm9hcmRcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlSXRlbUV4aXN0cyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGZpbGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9zaG93IGEgbW9kYWwgd2l0aCB0aGUgbGFyZ2VyIGltYWdlIGFzIGEgcHJldmlldyBvbiB0aGUgcGhvdG8gZmlsZSBmb3IgdGhpcyBod21cclxuICAgICAgICAgICAgJHNjb3BlLnNob3dJbWFnZU1vZGFsID0gZnVuY3Rpb24gKGltYWdlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW1hZ2VNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkltYWdlIEZpbGUgUHJldmlldzwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxpbWcgbmctc3JjPVwie3tzZXRTUkN9fVwiIC8+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbWFnZUlkID0gaW1hZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXRTUkMgPSBTRVJWRVJfVVJMICsgJy9GaWxlcy8nICsgJHNjb3BlLmltYWdlSWQgKyAnL0l0ZW0nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdtZCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy93YW50IHRvIGFkZCBvciBlZGl0IGZpbGVcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlID0gZnVuY3Rpb24gKGZpbGUpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5maWxlVHlwZXMgPSAkc2NvcGUuZmlsZVR5cGVMaXN0O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFnZW5jaWVzID0gYWdlbmN5TGlzdDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5leGlzdEZpbGVJbmRleCA9IC0xOyAkc2NvcGUuZXhpc3RJTUdGaWxlSW5kZXggPSAtMTsgJHNjb3BlLmFsbFNGaWxlSW5kZXggPSAtMTsgLy9pbmRleGVzIGZvciBzcGxpY2UvY2hhbmdlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUgPSB7fTsgLy9ob2xkZXIgZm9yIGZpbGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlID0ge307IC8vaG9sZGVyIGZvciBmaWxlIHNvdXJjZVxyXG4gICAgICAgICAgICAgICAgLy9TSVRFIHdpbGwgbm90IGhhdmUgZGF0YWZpbGUgXHJcbiAgICAgICAgICAgICAgICBpZiAoZmlsZSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZWRpdCBzaXRlIGZpbGVcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhpc3RGaWxlSW5kZXggPSAkc2NvcGUuU0lURUZpbGVzLmluZGV4T2YoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlSW5kZXggPSAkc2NvcGUuYWxsU0ZpbGVzLmluZGV4T2YoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4aXN0SU1HRmlsZUluZGV4ID0gJHNjb3BlLnNpdGVJbWFnZUZpbGVzLmxlbmd0aCA+IDAgPyAkc2NvcGUuc2l0ZUltYWdlRmlsZXMuaW5kZXhPZihmaWxlKSA6IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZSA9IGFuZ3VsYXIuY29weShmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICBGSUxFLmdldEZpbGVJdGVtKHsgaWQ6ICRzY29wZS5hRmlsZS5maWxlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlSXRlbUV4aXN0cyA9IHJlc3BvbnNlLkxlbmd0aCA+IDAgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmZpbGVUeXBlID0gJHNjb3BlLmZpbGVUeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGZ0KSB7IHJldHVybiBmdC5maWxldHlwZV9pZCA9PSAkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQ7IH0pWzBdLmZpbGV0eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZGV0ZXJtaW5lIGlmIGV4aXN0aW5nIGZpbGUgaXMgYSBwaG90byAoZXZlbiBpZiB0eXBlIGlzIG5vdCApXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5uYW1lICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZJID0gJHNjb3BlLmFGaWxlLm5hbWUubGFzdEluZGV4T2YoXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZUV4dCA9ICRzY29wZS5hRmlsZS5uYW1lLnN1YnN0cmluZyhmSSArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUV4dC5tYXRjaCgvKGpwZ3xKUEd8anBlZ3xKUEVHfHBuZ3xQTkd8Z2lmfEdJRikkLykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1Bob3RvID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlICRzY29wZS5pc1Bob3RvID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zcmMgPSAkc2NvcGUuc2VydmVyVVJMICsgJy9GaWxlcy8nICsgJHNjb3BlLmFGaWxlLmZpbGVfaWQgKyAnL0l0ZW0nICsgRklMRV9TVEFNUC5nZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5maWxlX2RhdGUgPSBuZXcgRGF0ZSgkc2NvcGUuYUZpbGUuZmlsZV9kYXRlKTsgLy9kYXRlIGZvciB2YWxpZGl0eSBvZiBmb3JtIG9uIFBVVFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSAhPT0gdW5kZWZpbmVkKSAkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5hRmlsZS5waG90b19kYXRlKTsgLy9kYXRlIGZvciB2YWxpZGl0eSBvZiBmb3JtIG9uIFBVVFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlLnNvdXJjZV9pZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTT1VSQ0UucXVlcnkoeyBpZDogZmlsZS5zb3VyY2VfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UgPSBzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UuRlVMTG5hbWUgPSAkc2NvcGUuYVNvdXJjZS5zb3VyY2VfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY3lOYW1lRm9yQ2FwID0gJHNjb3BlLmFnZW5jaWVzLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gJHNjb3BlLmFTb3VyY2UuYWdlbmN5X2lkOyB9KVswXS5hZ2VuY3lfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfS8vZW5kIGlmIHNvdXJjZVxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIGV4aXN0aW5nIGZpbGVcclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5maWxlX2RhdGUgPSBuZXcgRGF0ZSgpOyAkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT0gJGNvb2tpZXMuZ2V0KCdtSUQnKTsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UuRlVMTG5hbWUgPSAkc2NvcGUuYVNvdXJjZS5mbmFtZSArIFwiIFwiICsgJHNjb3BlLmFTb3VyY2UubG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFnZW5jeU5hbWVGb3JDYXAgPSAkc2NvcGUuYWdlbmNpZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLmFnZW5jeV9pZCA9PSAkc2NvcGUuYVNvdXJjZS5hZ2VuY3lfaWQ7IH0pWzBdLmFnZW5jeV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgfSAvL2VuZCBuZXcgZmlsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVBZ2VuY3lGb3JDYXB0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQgPT0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFnZW5jeU5hbWVGb3JDYXAgPSAkc2NvcGUuYWdlbmNpZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLmFnZW5jeV9pZCA9PSAkc2NvcGUuYVNvdXJjZS5hZ2VuY3lfaWQ7IH0pWzBdLmFnZW5jeV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9jcmVhdGUgdGhpcyBuZXcgZmlsZVxyXG4gICAgICAgICAgICAkc2NvcGUuY3JlYXRlRmlsZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNJVEVmaWxlSXNVcGxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoZVNvdXJjZSA9IHsgc291cmNlX25hbWU6ICRzY29wZS5hU291cmNlLkZVTExuYW1lLCBhZ2VuY3lfaWQ6ICRzY29wZS5hU291cmNlLmFnZW5jeV9pZCB9O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcG9zdCBzb3VyY2UgZmlyc3QgdG8gZ2V0IHNvdXJjZV9pZFxyXG4gICAgICAgICAgICAgICAgICAgIFNPVVJDRS5zYXZlKHRoZVNvdXJjZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5maWxldHlwZV9pZCAhPT0gOCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90aGVuIFBPU1QgZmlsZVBhcnRzIChTZXJ2aWNlcyBwb3B1bGF0ZSBQQVRIKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVQYXJ0cyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlRW50aXR5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlX2lkOiAkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICRzY29wZS5hRmlsZS5GaWxlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVfZGF0ZTogJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9fZGF0ZTogJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAkc2NvcGUuYUZpbGUuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6ICRzY29wZS5hU2l0ZS5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VfaWQ6IHJlc3BvbnNlLnNvdXJjZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9fZGlyZWN0aW9uOiAkc2NvcGUuYUZpbGUucGhvdG9fZGlyZWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZV9kZDogJHNjb3BlLmFGaWxlLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGVfZGQ6ICRzY29wZS5hRmlsZS5sb25naXR1ZGVfZGRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGU6ICRzY29wZS5hRmlsZS5GaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9uZWVkIHRvIHB1dCB0aGUgZmlsZVBhcnRzIGludG8gY29ycmVjdCBmb3JtYXQgZm9yIHBvc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZUVudGl0eVwiLCBKU09OLnN0cmluZ2lmeShmaWxlUGFydHMuRmlsZUVudGl0eSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZVwiLCBmaWxlUGFydHMuRmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBQT1NUIGl0IChmaWxlcGFydHMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGSUxFLnVwbG9hZEZpbGUoZmQpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGxvYWRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiU2l0ZSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNJVEVGaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2l0ZV9GaWxlcy5zZXRBbGxTaXRlRmlsZXMoJHNjb3BlLmFsbFNGaWxlcyk7IC8vdXBkYXRlcyB0aGUgZmlsZSBsaXN0IG9uIHRoZSBzaXRlZGFzaGJvYXJkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZyZXNwb25zZS5maWxldHlwZV9pZCA9PT0gMSkgJHNjb3BlLnNpdGVJbWFnZUZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVGb3JtID0gZmFsc2U7ICRzY29wZS5TSVRFZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TSVRFZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3IgdXBsb2FkaW5nIGZpbGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLnNvdXJjZV9pZCA9IHJlc3BvbnNlLnNvdXJjZV9pZDsgJHNjb3BlLmFGaWxlLnNpdGVfaWQgPSAkc2NvcGUuYVNpdGUuc2l0ZV9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZJTEUuc2F2ZSgkc2NvcGUuYUZpbGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiTGluayBzYXZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiU2l0ZSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNJVEVGaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2l0ZV9GaWxlcy5zZXRBbGxTaXRlRmlsZXMoJHNjb3BlLmFsbFNGaWxlcyk7IC8vdXBkYXRlcyB0aGUgZmlsZSBsaXN0IG9uIHRoZSBzaXRlZGFzaGJvYXJkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVGb3JtID0gZmFsc2U7ICRzY29wZS5TSVRFZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TSVRFZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGZpbGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TSVRFZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIGNyZWF0aW5nIFNvdXJjZSBpbmZvOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgc291cmNlLnNhdmUoKSAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgdmFsaWRcclxuICAgICAgICAgICAgfTsvL2VuZCBjcmVhdGUoKVxyXG5cclxuICAgICAgICAgICAgLy91cGRhdGUgdGhpcyBmaWxlXHJcbiAgICAgICAgICAgICRzY29wZS5zYXZlRmlsZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNJVEVmaWxlSXNVcGxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vb25seSBwaG90byBvciBvdGhlciBmaWxlIHR5cGUgKG5vIGRhdGEgZmlsZSBoZXJlKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vcHV0IHNvdXJjZSBvciBkYXRhZmlsZSwgcHV0IGZpbGVcclxuICAgICAgICAgICAgICAgICAgICB2YXIgd2hhdGtpbmQgPSAkc2NvcGUuYUZpbGUuZmlsZUJlbG9uZ3NUbztcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNvdXJjZS5zb3VyY2VfaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwb3N0IGFnYWluIChpZiBubyBjaGFuZ2UsIHdpbGwgcmV0dXJuIGV4aXN0aW5nIG9uZS4gaWYgZWRpdGVkLCB3aWxsIGNyZWF0ZSBhIG5ldyBvbmUgLS1pbnN0ZWFkIG9mIGVkaXRpbmcgYWxsIGZpbGVzIHRoYXQgdXNlIHRoaXMgc291cmNlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhlU291cmNlID0geyBzb3VyY2VfbmFtZTogJHNjb3BlLmFTb3VyY2UuRlVMTG5hbWUsIGFnZW5jeV9pZDogJHNjb3BlLmFTb3VyY2UuYWdlbmN5X2lkIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNPVVJDRS5zYXZlKHRoZVNvdXJjZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5zb3VyY2VfaWQgPSByZXNwb25zZS5zb3VyY2VfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgLy8gU09VUkNFLnVwZGF0ZSh7IGlkOiAkc2NvcGUuYVNvdXJjZS5zb3VyY2VfaWQgfSwgJHNjb3BlLmFTb3VyY2UpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRklMRS51cGRhdGUoeyBpZDogJHNjb3BlLmFGaWxlLmZpbGVfaWQgfSwgJHNjb3BlLmFGaWxlKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChmaWxlUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlUmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiU2l0ZSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNJVEVGaWxlc1skc2NvcGUuZXhpc3RGaWxlSW5kZXhdID0gZmlsZVJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZXNbJHNjb3BlLmFsbFNGaWxlSW5kZXhdID0gZmlsZVJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgJHNjb3BlLlNJVEVmaWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNJVEVmaWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU0lURWZpbGVJc1VwbG9hZGluZyA9IGZhbHNlOyAvL0xvYWRpbmcuLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBmaWxlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0vL2VuZCB2YWxpZFxyXG4gICAgICAgICAgICB9Oy8vZW5kIHNhdmUoKVxyXG5cclxuICAgICAgICAgICAgLy9kZWxldGUgdGhpcyBmaWxlXHJcbiAgICAgICAgICAgICRzY29wZS5kZWxldGVGaWxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIERlbGV0ZU1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5hRmlsZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiRmlsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgRGVsZXRlTW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoZmlsZVRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgIEZJTEUuZGVsZXRlKHsgaWQ6IGZpbGVUb1JlbW92ZS5maWxlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNJVEVGaWxlcy5zcGxpY2UoJHNjb3BlLmV4aXN0RmlsZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlcy5zcGxpY2UoJHNjb3BlLmFsbFNGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZUltYWdlRmlsZXMuc3BsaWNlKCRzY29wZS5leGlzdElNR0ZpbGVJbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVGb3JtID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7Ly9lbmQgRGVsZXRlTW9kYWwucmVzdWx0LnRoZW5cclxuICAgICAgICAgICAgfTsvL2VuZCBkZWxldGUoKVxyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbEZpbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlID0ge307XHJcbiAgICAgICAgICAgICAgICAvLyAgJHNjb3BlLmRhdGFmaWxlID0ge307XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVGb3JtID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBGSUxFIFNUVUZGXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvL2xhdCBtb2RhbCBcclxuICAgICAgICAgICAgdmFyIG9wZW5MYXRNb2RhbCA9IGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGF0TW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBMYXRpdHVkZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNzMuMDwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBsYXRNb2RhbC5yZXN1bHQudGhlbihmdW5jdGlvbiAoZmllbGRGb2N1cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3ID09ICdsYXRsb25nJykgJChcIiNsYXRpdHVkZV9kZFwiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgJChcIiNMYURlZ1wiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2xvbmcgbW9kYWxcclxuICAgICAgICAgICAgdmFyIG9wZW5Mb25nTW9kYWwgPSBmdW5jdGlvbiAodykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxvbmdNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+VGhlIExvbmdpdHVkZSBtdXN0IGJlIGJldHdlZW4gLTE3NS4wIGFuZCAtNjAuMDwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBsb25nTW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGZpZWxkRm9jdXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodyA9PSAnbGF0bG9uZycpICQoXCIjbG9uZ2l0dWRlX2RkXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSAkKFwiI0xvRGVnXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vbWFrZSBzdXJlIGxhdC9sb25nIGFyZSByaWdodCBudW1iZXIgcmFuZ2VcclxuICAgICAgICAgICAgJHNjb3BlLmNoZWNrVmFsdWUgPSBmdW5jdGlvbiAoZCxkaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIGlmIChkID09ICdkbXMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jaGVjayB0aGUgZGVncmVlIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PSAnbGF0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MQURlZyA8IDAgfHwgJHNjb3BlLkRNUy5MQURlZyA+IDczIHx8IChpc05hTigkc2NvcGUuRE1TLkxBRGVnKSAmJiAkc2NvcGUuRE1TLkxBRGVnICE9PSB1bmRlZmluZWQpIHx8IChpc05hTigkc2NvcGUuRE1TLkxBTWluKSAmJiAkc2NvcGUuRE1TLkxBTWluICE9PSB1bmRlZmluZWQpIHx8IChpc05hTigkc2NvcGUuRE1TLkxBU2VjKSAmJiAkc2NvcGUuRE1TLkxBU2VjICE9PSB1bmRlZmluZWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuTGF0TW9kYWwoJ2RtcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiBub3QgYSBudW1iZXIsIGNsZWFyIHRoZSBpbXB1dHMgdG8gdHJpZ2dlciB0aGUgdmFsaWRhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKCRzY29wZS5ETVMuTEFEZWcpKSAkc2NvcGUuRE1TLkxBRGVnID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKCRzY29wZS5ETVMuTEFNaW4pKSAkc2NvcGUuRE1TLkxBTWluID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKCRzY29wZS5ETVMuTEFTZWMpKSAkc2NvcGUuRE1TLkxBU2VjID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT0gJ2xvbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxPRGVnIDwgLTE3NSB8fCAkc2NvcGUuRE1TLkxPRGVnID4gLTYwIHx8IChpc05hTigkc2NvcGUuRE1TLkxPRGVnKSAmJiAkc2NvcGUuRE1TLkxPRGVnICE9PSB1bmRlZmluZWQpIHx8IChpc05hTigkc2NvcGUuRE1TLkxPTWluKSAmJiAkc2NvcGUuRE1TLkxPTWluICE9PSB1bmRlZmluZWQpIHx8IChpc05hTigkc2NvcGUuRE1TLkxPU2VjKSAmJiAkc2NvcGUuRE1TLkxPU2VjICE9PSB1bmRlZmluZWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuTG9uZ01vZGFsKCdkbXMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgbm90IGEgbnVtYmVyLCBjbGVhciB0aGUgaW1wdXRzIHRvIHRyaWdnZXIgdGhlIHZhbGlkYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTigkc2NvcGUuRE1TLkxPRGVnKSkgJHNjb3BlLkRNUy5MT0RlZyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTigkc2NvcGUuRE1TLkxPTWluKSkgJHNjb3BlLkRNUy5MT01pbiA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTigkc2NvcGUuRE1TLkxPU2VjKSkgJHNjb3BlLkRNUy5MT1NlYyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jaGVjayB0aGUgbGF0aXR1ZGUvbG9uZ2l0dWRlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PSAnbGF0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkIDwgMCB8fCAkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQgPiA3MyB8fCBpc05hTigkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuTGF0TW9kYWwoJ2xhdGxvbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgbm90IGEgbnVtYmVyLCBjbGVhciB0aGUgaW1wdXRzIHRvIHRyaWdnZXIgdGhlIHZhbGlkYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTigkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT0gJ2xvbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkIDwgLTE3NSB8fCAkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkID4gLTYwIHx8IGlzTmFOKCRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuTG9uZ01vZGFsKCdsYXRsb25nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIG5vdCBhIG51bWJlciwgY2xlYXIgdGhlIGltcHV0cyB0byB0cmlnZ2VyIHRoZSB2YWxpZGF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oJHNjb3BlLmFTaXRlLmxvbmdpdHVkZV9kZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9jb252ZXJ0IGRlYyBkZWdyZWVzIHRvIGRtc1xyXG4gICAgICAgICAgICB2YXIgZGVnX3RvX2RtcyA9IGZ1bmN0aW9uIChkZWcpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkZWcgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVnID0gZGVnLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vbG9uZ2l0dWRlLCByZW1vdmUgdGhlIC0gc2lnblxyXG4gICAgICAgICAgICAgICAgICAgIGRlZyA9IGRlZy5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgZCA9IE1hdGguZmxvb3IoZGVnKTtcclxuICAgICAgICAgICAgICAgIHZhciBtaW5mbG9hdCA9IChkZWcgLSBkKSAqIDYwO1xyXG4gICAgICAgICAgICAgICAgdmFyIG0gPSBNYXRoLmZsb29yKG1pbmZsb2F0KTtcclxuICAgICAgICAgICAgICAgIHZhciBzID0gKChtaW5mbG9hdCAtIG0pICogNjApLnRvRml4ZWQoMyk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcIlwiICsgZCArIFwiOlwiICsgbSArIFwiOlwiICsgcyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL3RoZXkgY2hhbmdlZCByYWRpbyBidXR0b24gZm9yIGRtcyBkZWMgZGVnXHJcbiAgICAgICAgICAgICRzY29wZS5sYXRMb25nQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU2l0ZS5kZWNEZWdPUmRtcyA9PSBcImRkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3RoZXkgY2xpY2tlZCBEZWMgRGVnLi5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoKCRzY29wZS5ETVMuTEFEZWcgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuRE1TLkxBTWluICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLkRNUy5MQVNlYyAhPT0gdW5kZWZpbmVkKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAoJHNjb3BlLkRNUy5MT0RlZyAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5ETVMuTE9NaW4gIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuRE1TLkxPU2VjICE9PSB1bmRlZmluZWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29udmVydCB3aGF0J3MgaGVyZSBmb3IgZWFjaCBsYXQgYW5kIGxvbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxBRGVnLCAkc2NvcGUuRE1TLkxBTWluLCAkc2NvcGUuRE1TLkxBU2VjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLmxvbmdpdHVkZV9kZCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MT0RlZywgJHNjb3BlLkRNUy5MT01pbiwgJHNjb3BlLkRNUy5MT1NlYyk7ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zaG93IG1vZGFsIHRlbGxpbmcgdGhlbSB0byBwb3B1bGF0ZSBhbGwgdGhyZWUgKERNUykgZm9yIGNvbnZlcnNpb24gdG8gd29ya1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgRE1TTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5QbGVhc2UgcG9wdWxhdGUgYWxsIHRocmVlIGlucHV0cyBmb3IgY29udmVyc2lvbiBmcm9tIERNUyB0byBEZWNpbWFsIERlZ3JlZXMgdG8gd29yay48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRE1TTW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ETVMuTEFEZWcgIT09IHVuZGVmaW5lZCB8fCAkc2NvcGUuRE1TLkxBTWluICE9PSB1bmRlZmluZWQgfHwgJHNjb3BlLkRNUy5MQVNlYyAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjTGFEZWdcIikuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxPRGVnICE9PSB1bmRlZmluZWQgfHwgJHNjb3BlLkRNUy5MT01pbiAhPT0gdW5kZWZpbmVkIHx8ICRzY29wZS5ETVMuTE9TZWMgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKFwiI0xvRGVnXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuZGVjRGVnT1JkbXMgPSBcImRtc1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdGhleSBjbGlja2VkIGRtcyAoY29udmVydCBsYXQvbG9uZyB0byBkbXMpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYXRETVMgPSAoZGVnX3RvX2Rtcygkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQpKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFkRE1TYXJyYXkgPSBsYXRETVMuc3BsaXQoJzonKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MQURlZyA9IGxhZERNU2FycmF5WzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxBTWluID0gbGFkRE1TYXJyYXlbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTEFTZWMgPSBsYWRETVNhcnJheVsyXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb25nRE1TID0gZGVnX3RvX2Rtcygkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvbmdETVNhcnJheSA9IGxvbmdETVMuc3BsaXQoJzonKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MT0RlZyA9IGxvbmdETVNhcnJheVswXSAqIC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPTWluID0gbG9uZ0RNU2FycmF5WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPU2VjID0gbG9uZ0RNU2FycmF5WzJdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vbmV0d29ya1R5cGUgY2hlY2sgZXZlbnQgLS10cmlnZ2VyIGRpcnR5XHJcbiAgICAgICAgICAgICRzY29wZS5uZXRUeXBlQ2hnID0gZnVuY3Rpb24gKG50KSB7XHJcbiAgICAgICAgICAgICAgICAvL3N0b3JlIHRoaXMgdG8gaGFuZGxlIGluIFBVVCBvciBQT1NUXHJcbiAgICAgICAgICAgICAgICBpZiAobnQuc2VsZWN0ZWQpIHsgLy9zZWxlY3RlZFxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5OZXR3b3JrVFlQRVRvQWRkLnB1c2gobnQpOyBcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFTaXRlLnNpdGVfaWQgIT09IHVuZGVmaW5lZCkgeyAvL2lmIHRoaXMgaXMgZWRpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2VkaXRpbmcgKHJlbW92ZSBmcm9tIHJlbW92ZSBsaXN0IGlmIHRoZXJlKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9ICRzY29wZS5OZXR3b3JrVFlQRVRvUmVtb3ZlLm1hcChmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5uZXR3b3JrX3R5cGVfaWQ7IH0pLmluZGV4T2YobnQubmV0d29ya190eXBlX2lkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPj0gMCkgJHNjb3BlLk5ldHdvcmtUWVBFVG9SZW1vdmUuc3BsaWNlKGksIDEpOyAvL3JlbW92ZSBmcm9tIHJlbW92ZUxpc3QgLi5pbiBjYXNlIHRoZXkgcmVtb3ZlZCBhbmQgdGhlbiBhZGRlZCBpdCBiYWNrXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL24uc2VsZWN0ZWQgPT0gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kID0gJHNjb3BlLk5ldHdvcmtUWVBFVG9BZGQubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLm5ldHdvcmtfdHlwZV9pZDsgfSkuaW5kZXhPZihudC5uZXR3b3JrX3R5cGVfaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmQgPj0gMCkgJHNjb3BlLk5ldHdvcmtUWVBFVG9BZGQuc3BsaWNlKGluZCwgMSk7IC8vcmVtb3ZlIGl0IGZyb20gYWRkTGlzdCBpZiB0aGV5IGFkZGVkIHRoZW4gcmVtb3ZlZFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFTaXRlLnNpdGVfaWQgIT09IHVuZGVmaW5lZCkgeyAvL2VkaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5ldHdvcmtUWVBFVG9SZW1vdmUucHVzaChudCk7IC8vYWRkIGl0IHRvIHJlbW92ZUxpc3RcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL25ldHdvcmtOYW1lIGNoZWNrIGV2ZW50Li4gaWYgXCJOb3QgRGVmaW5lZFwiIGNob3NlbiwgZGlzYWJsZSB0aGUgb3RoZXIgMiBjaGVja2JveGVzXHJcbiAgICAgICAgICAgICRzY29wZS53aGljaE9uZSA9IGZ1bmN0aW9uIChuKSB7XHJcbiAgICAgICAgICAgICAgICAvL3N0b3JlIHRoaXMgdG8gaGFuZGxlIGluIFBVVCBvciBQT1NUXHJcbiAgICAgICAgICAgICAgICBpZiAobi5zZWxlY3RlZCkgeyAvL3NlbGVjdGVkXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5ldHdvcmtOQU1FVG9BZGQucHVzaChuKTsgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU2l0ZS5zaXRlX2lkICE9PSB1bmRlZmluZWQpIHsgLy9pZiB0aGlzIGlzIGVkaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9lZGl0aW5nIChyZW1vdmUgZnJvbSByZW1vdmUgbGlzdCBpZiB0aGVyZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAkc2NvcGUuTmV0d29ya05BTUVUb1JlbW92ZS5tYXAoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUubmV0d29ya19uYW1lX2lkOyB9KS5pbmRleE9mKG4ubmV0d29ya19uYW1lX2lkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGkgPj0gMCkgJHNjb3BlLk5ldHdvcmtOQU1FVG9SZW1vdmUuc3BsaWNlKGksIDEpOyAvL3JlbW92ZSBmcm9tIHJlbW92ZUxpc3QgLi5pbiBjYXNlIHRoZXkgcmVtb3ZlZCBhbmQgdGhlbiBhZGRlZCBpdCBiYWNrXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL24uc2VsZWN0ZWQgPT0gZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kID0gJHNjb3BlLk5ldHdvcmtOQU1FVG9BZGQubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLm5ldHdvcmtfbmFtZV9pZDsgfSkuaW5kZXhPZihuLm5ldHdvcmtfbmFtZV9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluZCA+PSAwKSAkc2NvcGUuTmV0d29ya05BTUVUb0FkZC5zcGxpY2UoaW5kLCAxKTsgLy9yZW1vdmUgaXQgZnJvbSBhZGRMaXN0IGlmIHRoZXkgYWRkZWQgdGhlbiByZW1vdmVkXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNpdGUuc2l0ZV9pZCAhPT0gdW5kZWZpbmVkKSB7IC8vZWRpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTmV0d29ya05BTUVUb1JlbW92ZS5wdXNoKG4pOyAvL2FkZCBpdCB0byByZW1vdmVMaXN0XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKG4ubmFtZSA9PSBcIk5vdCBEZWZpbmVkXCIgJiYgbi5zZWxlY3RlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdGhleSBjaGVja2VkIFwibm90IGRlZmluZWRcIlxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5uID0gMDsgbm4gPCAkc2NvcGUuTmV0TmFtZUxpc3QubGVuZ3RoOyBubisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdW5zZWxlY3QgYWxsIGJ1dCBub3QgZGVmaW5lZCBUT0RPOjo6OiBJZiBhbnksIHB1dCB0aGVtIGluIE5ldHdvcmtOQU1FVG9SZW1vdmUgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLk5ldE5hbWVMaXN0W25uXS5uYW1lICE9IFwiTm90IERlZmluZWRcIiAmJiAkc2NvcGUuTmV0TmFtZUxpc3Rbbm5dLnNlbGVjdGVkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTmV0d29ya05BTUVUb1JlbW92ZS5wdXNoKCRzY29wZS5OZXROYW1lTGlzdFtubl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5ldE5hbWVMaXN0W25uXS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vbWFrZSB0aGVzZSBtYXRjaCBzbyByZXN0IGdldCBkaXNhYmxlZFxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jaGVja2VkID0gXCJOb3QgRGVmaW5lZFwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy90aGV5IHRoZXkgdW5jaGVja2VkIG5vdCBkZWZpbmUsIHVubWF0Y2ggdmFycyBzbyB0aGUgb3RoZXIgYmVjb21lIGVuYWJsZWRcclxuICAgICAgICAgICAgICAgIGlmIChuLm5hbWUgPT0gXCJOb3QgRGVmaW5lZFwiICYmIG4uc2VsZWN0ZWQgPT09IGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jaGVja2VkID0gXCJcIjtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vdG9nZ2xlIGRpbSBvbiBkaXYgZm9yIHNlbnNvciBub3QgYXBwcm9wcmlhdGUgY2xpY2tcclxuICAgICAgICAgICAgJHNjb3BlLmRpbUFjdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNpdGUuc2Vuc29yX25vdF9hcHByb3ByaWF0ZSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc2FibGVTZW5zb3JQYXJ0cyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jbGVhciByYWRpbyBhbmQgY2hlY2tib3hlcyBpZiBkaXNhYmxpbmdcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8ICRzY29wZS5Qcm9wb3NlZFNlbnMubGVuZ3RoOyB4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlByb3Bvc2VkU2Vuc1t4XS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuaXNfcGVybWFuZW50X2hvdXNpbmdfaW5zdGFsbGVkID0gXCJOb1wiO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzYWJsZVNlbnNvclBhcnRzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUudXNlU2l0ZUFkZHJlc3M7XHJcbiAgICAgICAgICAgICRzY29wZS51c2VBZGRyZXNzZm9yTE8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnVzZVNpdGVBZGRyZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxhbmRvd25lci5hZGRyZXNzID0gJHNjb3BlLmFTaXRlLmFkZHJlc3M7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxhbmRvd25lci5jaXR5ID0gJHNjb3BlLmFTaXRlLmNpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxhbmRvd25lci5zdGF0ZSA9ICRzY29wZS5hU2l0ZS5zdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGFuZG93bmVyLnppcCA9ICRzY29wZS5hU2l0ZS56aXA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sYW5kb3duZXIuYWRkcmVzcyA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxhbmRvd25lci5jaXR5ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGFuZG93bmVyLnN0YXRlID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGFuZG93bmVyLnppcCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vc2l0ZSBQVVRcclxuICAgICAgICAgICAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSB0cnVlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZSB0aGUgc2l0ZVxyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9kaWQgdGhleSBhZGQgb3IgZWRpdCB0aGUgbGFuZG93bmVyXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hZGRMYW5kb3duZXIgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGVyZSdzIGEgbGFuZG93bmVyLi4gZWRpdCBvciBhZGQ/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNpdGUubGFuZG93bmVyY29udGFjdF9pZCAhPT0gbnVsbCAmJiAkc2NvcGUuYVNpdGUubGFuZG93bmVyY29udGFjdF9pZCAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5hU2l0ZS5sYW5kb3duZXJjb250YWN0X2lkID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9kaWQgdGhleSBjaGFuZ2UgYW55dGhpbmcgdG8gd2FycmVudCBhIHB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTEFORE9XTkVSX0NPTlRBQ1QudXBkYXRlKHsgaWQ6ICRzY29wZS5hU2l0ZS5sYW5kb3duZXJjb250YWN0X2lkIH0sICRzY29wZS5sYW5kb3duZXIpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1dFNpdGVBbmRQYXJ0cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmxhbmRvd25lci5mbmFtZSAhPT0gdW5kZWZpbmVkIHx8ICRzY29wZS5sYW5kb3duZXIubG5hbWUgIT09IHVuZGVmaW5lZCB8fCAkc2NvcGUubGFuZG93bmVyLnRpdGxlICE9PSB1bmRlZmluZWQgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGFuZG93bmVyLmFkZHJlc3MgIT09IHVuZGVmaW5lZCB8fCAkc2NvcGUubGFuZG93bmVyLmNpdHkgIT09IHVuZGVmaW5lZCB8fCAkc2NvcGUubGFuZG93bmVyLnByaW1hcnlwaG9uZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RoZXkgYWRkZWQgc29tZXRoaW5nLi4gUE9TVCAocmF0aGVyIHRoYW4ganVzdCBjbGlja2luZyBidXR0b24gYW5kIG5vdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExBTkRPV05FUl9DT05UQUNULnNhdmUoJHNjb3BlLmxhbmRvd25lciwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5sYW5kb3duZXJjb250YWN0X2lkID0gcmVzcG9uc2UubGFuZG93bmVyY29udGFjdGlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1dFNpdGVBbmRQYXJ0cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkgeyB0b2FzdHIuZXJyb3IoXCJFcnJvciBhZGRpbmcgTGFuZG93bmVyOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgcHV0U2l0ZUFuZFBhcnRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHB1dFNpdGVBbmRQYXJ0cygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9Oy8vZW5kIHNhdmVcclxuICAgICAgICAgICAgdmFyIHB1dFNpdGVBbmRQYXJ0cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxBRGVnICE9PSB1bmRlZmluZWQpICRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MQURlZywgJHNjb3BlLkRNUy5MQU1pbiwgJHNjb3BlLkRNUy5MQVNlYyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MT0RlZyAhPT0gdW5kZWZpbmVkKSAkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxPRGVnLCAkc2NvcGUuRE1TLkxPTWluLCAkc2NvcGUuRE1TLkxPU2VjKTtcclxuICAgICAgICAgICAgICAgIHZhciB1cGRhdGVTaXRlID0gYW5ndWxhci5jb3B5KCRzY29wZS5hU2l0ZSk7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdXBkYXRlU2l0ZS5DcmVhdG9yOyBkZWxldGUgdXBkYXRlU2l0ZS5Ib3Jpem9udGFsQ29sbGVjdE1ldGhvZDsgZGVsZXRlIHVwZGF0ZVNpdGUuSG9yaXpvbnRhbERhdHVtOyBkZWxldGUgdXBkYXRlU2l0ZS5Qcmlvcml0eU5hbWU7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdXBkYXRlU2l0ZS5kZWNEZWdPUmRtczsgXHJcbiAgICAgICAgICAgICAgICBTSVRFLnVwZGF0ZSh7IGlkOiAkc2NvcGUuYVNpdGUuc2l0ZV9pZCB9LCB1cGRhdGVTaXRlLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy91cGRhdGUgc2l0ZSBob3VzaW5nc1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWZlciA9ICRxLmRlZmVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIFJlbW92ZVByb21pc2VzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIEFkZFByb21pc2VzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgLy9SZW1vdmUgc2l0ZUhvdXNpbmdzICh0aGVzZSBhcmUganVzdCBzaXRlX2hvdXNpbmdfaWQgJ3NcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLnNpdGVIb3VzZXNUb1JlbW92ZSwgZnVuY3Rpb24gKHNoSUQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbFNIUHJvbSA9IFNJVEVfSE9VU0lORy5kZWxldGUoeyBpZDogc2hJRCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUmVtb3ZlUHJvbWlzZXMucHVzaChkZWxTSFByb20pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vUmVtb3ZlIE5ldE5hbWVzICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuTmV0d29ya05BTUVUb1JlbW92ZSwgZnVuY3Rpb24gKG5uTCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsTk5Qcm9tID0gU0lURS5kZWxldGVTaXRlTmV0d29ya05hbWUoeyBzaXRlSWQ6ICRzY29wZS5hU2l0ZS5zaXRlX2lkLCBuZXR3b3JrTmFtZUlkOiBubkwubmV0d29ya19uYW1lX2lkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBSZW1vdmVQcm9taXNlcy5wdXNoKGRlbE5OUHJvbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vUmVtb3ZlIE5ldFR5cGVzXHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5OZXR3b3JrVFlQRVRvUmVtb3ZlLCBmdW5jdGlvbiAobnRMKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWxOVFByb20gPSBTSVRFLmRlbGV0ZVNpdGVOZXR3b3JrVHlwZSh7IHNpdGVJZDogJHNjb3BlLmFTaXRlLnNpdGVfaWQsIG5ldHdvcmtUeXBlSWQ6IG50TC5uZXR3b3JrX3R5cGVfaWQgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJlbW92ZVByb21pc2VzLnB1c2goZGVsTlRQcm9tKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vQWRkIHNpdGVIb3VzaW5nc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuaG91c2VEaXJ0eSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLnNpdGVIb3VzZVR5cGVzVGFibGUsIGZ1bmN0aW9uIChodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFkZEh0UHJvbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChodC5zaXRlX2hvdXNpbmdfaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vUFVUIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkSHRQcm9tID0gU0lURV9IT1VTSU5HLnVwZGF0ZSh7IGlkOiBodC5zaXRlX2hvdXNpbmdfaWQgfSwgaHQpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1BPU1QgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodC5zaXRlX2lkID0gJHNjb3BlLmFTaXRlLnNpdGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkSHRQcm9tID0gU0lURV9IT1VTSU5HLnNhdmUoaHQpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQWRkUHJvbWlzZXMucHVzaChhZGRIdFByb20pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9BZGQgTmV0TmFtZXNcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLk5ldHdvcmtOQU1FVG9BZGQsIGZ1bmN0aW9uIChBbm5MKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlTmV0d29ya05hbWVzLnB1c2goQW5uTC5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFkZE5OUHJvbSA9IFNJVEUucG9zdFNpdGVOZXR3b3JrTmFtZSh7IHNpdGVJZDogJHNjb3BlLmFTaXRlLnNpdGVfaWQsIG5ldHdvcmtOYW1lSWQ6IEFubkwubmV0d29ya19uYW1lX2lkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBBZGRQcm9taXNlcy5wdXNoKGFkZE5OUHJvbSk7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAvL0FkZCBOZXRUeXBlc1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuTmV0d29ya1RZUEVUb0FkZCwgZnVuY3Rpb24gKEFuVEwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVOZXR3b3JrVHlwZXMucHVzaChBblRMLm5ldHdvcmtfdHlwZV9uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFkZE5UUHJvbSA9IFNJVEUucG9zdFNpdGVOZXR3b3JrVHlwZSh7IHNpdGVJZDogJHNjb3BlLmFTaXRlLnNpdGVfaWQsIG5ldHdvcmtUeXBlSWQ6IEFuVEwubmV0d29ya190eXBlX2lkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBBZGRQcm9taXNlcy5wdXNoKGFkZE5UUHJvbSk7ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vb2sgbm93IHJ1biB0aGUgcmVtb3ZlcywgdGhlbiB0aGUgYWRkcyBhbmQgdGhlbiBwYXNzIHRoZSBzdHVmZiBiYWNrIG91dCBvZiBoZXJlLlxyXG4gICAgICAgICAgICAgICAgICAgICRxLmFsbChSZW1vdmVQcm9taXNlcykudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRxLmFsbChBZGRQcm9taXNlcykudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlTmV0d29ya05hbWVzID0gW107ICRzY29wZS5zaXRlTmV0d29ya1R5cGVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLk5ldE5hbWVMaXN0LCBmdW5jdGlvbiAobm4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobm4uc2VsZWN0ZWQgPT09IHRydWUpICRzY29wZS5zaXRlTmV0d29ya05hbWVzLnB1c2gobm4ubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuTmV0VHlwZUxpc3QsIGZ1bmN0aW9uIChudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudC5zZWxlY3RlZCA9PT0gdHJ1ZSkgJHNjb3BlLnNpdGVOZXR3b3JrVHlwZXMucHVzaChudC5uZXR3b3JrX3R5cGVfbmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW5kQmFjayA9IFskc2NvcGUuYVNpdGUsICRzY29wZS5zaXRlTmV0d29ya05hbWVzLCAkc2NvcGUuc2l0ZU5ldHdvcmtUeXBlc107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZW5kQmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJTaXRlIHVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyRsb2NhdGlvbi5wYXRoKCcvU2l0ZS8nICsgJHNjb3BlLmFTaXRlLnNpdGVfaWQgKyAnL1NpdGVEYXNoYm9hcmQnKS5yZXBsYWNlKCk7Ly8ubm90aWZ5KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLmFwcGx5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS5jYXRjaChmdW5jdGlvbiBlcnJvcihtc2cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IobXNnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IobXNnKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTsgLy9hbGwgYWRkZWRcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHVwZGF0aW5nIFNpdGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgIH0pOy8vZW5kIFNJVEUuc2F2ZSguLi5cclxuICAgICAgICAgICAgfTsgLy8gZW5kIFBVVHNpdGUoKVxyXG5cclxuICAgICAgICAgICAgLy9jcmVhdGUgdGhpcyBzaXRlIGNsaWNrZWQgKDMgc2VwYXJhdGUgZnVuY3Rpb25zLi4gMTogbGFuZG93bmVyLCAyOiB0aGUgc2l0ZSBhbmQgcHJvcG9zZWQgaW5zdHJ1bWVudHMsIDM6IG5ldHdvcmsgbmFtZXMgJiB0eXBlcywgaG91c2luZyB0eXBlc1xyXG4gICAgICAgICAgICB2YXIgZmluaXNoUE9TVCA9IGZ1bmN0aW9uIChzSUQpIHtcclxuICAgICAgICAgICAgICAgIC8vZG8gYWxsIHRoZSByZXN0Li4uLlxyXG4gICAgICAgICAgICAgICAgdmFyIGRlZmVyID0gJHEuZGVmZXIoKTtcclxuICAgICAgICAgICAgICAgIHZhciBwb3N0UHJvbWlzZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIC8vc2l0ZV9ob3VzaW5nVHlwZXMgKGlmIGFueSlcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuc2l0ZUhvdXNlVHlwZXNUYWJsZSwgZnVuY3Rpb24gKGh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaHR5cGUuc2l0ZV9pZCA9IHNJRDtcclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgaHR5cGUudHlwZV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBoVFByb21pc2UgPSBTSVRFX0hPVVNJTkcuc2F2ZShodHlwZSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zdFByb21pc2VzLnB1c2goaFRQcm9taXNlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy9zaXRlX05ldHdvcmtOYW1lc1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5OZXROYW1lTGlzdCwgZnVuY3Rpb24gKG5OYW1lKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5OYW1lLnNlbGVjdGVkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuTlByb21pc2UgPSBTSVRFLnBvc3RTaXRlTmV0d29ya05hbWUoeyBzaXRlSWQ6IHNJRCwgbmV0d29ya05hbWVJZDogbk5hbWUubmV0d29ya19uYW1lX2lkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3N0UHJvbWlzZXMucHVzaChuTlByb21pc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy9zaXRlX05ldHdvcmtUeXBlc1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5OZXRUeXBlTGlzdCwgZnVuY3Rpb24gKG5UeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5UeXBlLnNlbGVjdGVkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuVFByb21pc2UgPSBTSVRFLnBvc3RTaXRlTmV0d29ya1R5cGUoeyBzaXRlSWQ6IHNJRCwgbmV0d29ya1R5cGVJZDogblR5cGUubmV0d29ya190eXBlX2lkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3N0UHJvbWlzZXMucHVzaChuVFByb21pc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy93aGVuIGFsbCB0aGUgcHJvbWlzZXMgYXJlIGRvbmVcclxuICAgICAgICAgICAgICAgICRxLmFsbChwb3N0UHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFueXRoaW5nIHlvdSB3YW50IGNhbiBnbyBoZXJlIGFuZCB3aWxsIHNhZmVseSBiZSBydW4gb24gdGhlIG5leHQgZGlnZXN0LiAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdzaXRlLmRhc2hib2FyZCcsIHsgaWQ6IHNJRCB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pOy8vZW5kICRxXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRzY29wZS5jcmVhdGUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSB0cnVlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAvL1BPU1QgbGFuZG93bmVyLCBpZiB0aGV5IGFkZGVkIG9uZVxyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlICRzY29wZS5hU2l0ZS5DcmVhdG9yOyBkZWxldGUgJHNjb3BlLmFTaXRlLmRlY0RlZ09SZG1zO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYWRkTGFuZG93bmVyID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubGFuZG93bmVyLmZuYW1lICE9PSB1bmRlZmluZWQgfHwgJHNjb3BlLmxhbmRvd25lci5sbmFtZSAhPT0gdW5kZWZpbmVkIHx8ICRzY29wZS5sYW5kb3duZXIudGl0bGUgIT09IHVuZGVmaW5lZCB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGFuZG93bmVyLmFkZHJlc3MgIT09IHVuZGVmaW5lZCB8fCAkc2NvcGUubGFuZG93bmVyLmNpdHkgIT09IHVuZGVmaW5lZCB8fCAkc2NvcGUubGFuZG93bmVyLnByaW1hcnlwaG9uZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBMQU5ET1dORVJfQ09OVEFDVC5zYXZlKCRzY29wZS5sYW5kb3duZXIsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUubGFuZG93bmVyY29udGFjdF9pZCA9IHJlc3BvbnNlLmxhbmRvd25lcmNvbnRhY3RpZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBwb3N0IHRoZSBzaXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zdFNpdGVBbmRQYXJ0cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsgLy8gbG9hZGluZy4uIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHBvc3RpbmcgbGFuZG93bmVyOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RTaXRlQW5kUGFydHMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RTaXRlQW5kUGFydHMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciBwb3N0U2l0ZUFuZFBhcnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgbG9uZ2l0dWRlIGlzIDwgMCwgb3RoZXJ3aXNlICogKC0xKSxcclxuICAgICAgICAgICAgICAgIHZhciBjcmVhdGVkU2l0ZUlEID0gMDtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxBRGVnICE9PSB1bmRlZmluZWQpICRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MQURlZywgJHNjb3BlLkRNUy5MQU1pbiwgJHNjb3BlLkRNUy5MQVNlYyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MT0RlZyAhPT0gdW5kZWZpbmVkKSAkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxPRGVnLCAkc2NvcGUuRE1TLkxPTWluLCAkc2NvcGUuRE1TLkxPU2VjKTtcclxuICAgICAgICAgICAgICAgIC8vUE9TVCBzaXRlXHJcbiAgICAgICAgICAgICAgICBTSVRFLnNhdmUoJHNjb3BlLmFTaXRlLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFNpdGVJRCA9IHJlc3BvbnNlLnNpdGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9kbyBwcm9wb3NlZCBzZW5zb3JzIGZpcnN0IHNpbmNlIGl0J3MgMiBwYXJ0cyB0byBpdC5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmRpc2FibGVTZW5zb3JQYXJ0cyA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3QgZGlzYWJsZWQuLmNvdWxkIGJlIHNlbGVjdGVkIHByb3Bvc2VkIHNlbnNvcnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkUHJvcG9zZWRTZW5zb3JzID0gJHNjb3BlLlByb3Bvc2VkU2Vucy5maWx0ZXIoZnVuY3Rpb24gKHApIHsgcmV0dXJuIHAuc2VsZWN0ZWQgPT09IHRydWU7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRQcm9wb3NlZFNlbnNvcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNlbGVjdGVkUHJvcG9zZWRTZW5zb3JzLCBmdW5jdGlvbiAocHJvcFNlbnMsIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9QT1NUIGVhY2ggc2Vuc29yIGFuZCBzdGF0dXMgdHlwZSAoYWZ0ZXIgZ29pbmcgdGhydSB0aGUgc2Vuc0RlcHMgdG8gZ2V0IHRoZSBtYXRjaGluZyBkZXBsb3ltZW50dHlwZWlkIGZyb20gZWFjaCBzZW5zb3IncyBpbm5lciBsaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNJRCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5TZW5zb3JEZXBsb3ltZW50LCBmdW5jdGlvbiAoc2R0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgc2R0LmRlcGxveW1lbnR0eXBlcy5sZW5ndGg7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNkdC5kZXBsb3ltZW50dHlwZXNbeF0uZGVwbG95bWVudF90eXBlX2lkID09IHByb3BTZW5zLmRlcGxveW1lbnRfdHlwZV9pZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzSUQgPSBzZHQuc2Vuc29yX3R5cGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbnNvclR5cGVJRCA9IHNJRDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5zdCA9IHsgZGVwbG95bWVudF90eXBlX2lkOiBwcm9wU2Vucy5kZXBsb3ltZW50X3R5cGVfaWQsIHNpdGVfaWQ6IGNyZWF0ZWRTaXRlSUQsIHNlbnNvcl90eXBlX2lkOiBzZW5zb3JUeXBlSUQgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJTlNUUlVNRU5ULnNhdmUoaW5zdCkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoaW5zUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RTdGF0ID0geyBpbnN0cnVtZW50X2lkOiBpbnNSZXNwb25zZS5pbnN0cnVtZW50X2lkLCBzdGF0dXNfdHlwZV9pZDogNCwgbWVtYmVyX2lkOiAkc2NvcGUuYVNpdGUubWVtYmVyX2lkLCB0aW1lX3N0YW1wOiBuZXcgRGF0ZSgpLCB0aW1lX3pvbmU6ICdVVEMnIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElOU1RSVU1FTlRfU1RBVFVTLnNhdmUoaW5zdFN0YXQpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy93aGVuIGRvbmUgbG9vcGluZywgZ28gdG8gbGFzdCBzdGVwIGluIHRoaXMgcG9zdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGluZGV4ID09IHNlbGVjdGVkUHJvcG9zZWRTZW5zb3JzLmxlbmd0aCAtIDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmluaXNoUE9TVChjcmVhdGVkU2l0ZUlEKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsgLy8gbG9hZGluZy4uIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3IgYWRkaW5nIHByb3Bvc2VkIFNlbnNvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBzdGF0dXMgcG9zdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsgLy8gbG9hZGluZy4uIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBhZGRpbmcgcHJvcG9zZWQgU2Vuc29yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgc2Vuc29yIHBvc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIGFuZ3VsYXIuZm9yZWFjaCBvbiBwcm9wb3NlZCBzZW5zb3JzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBmaW5pc2hQT1NUKGNyZWF0ZWRTaXRlSUQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaFBPU1QoY3JlYXRlZFNpdGVJRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLiBcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBjcmVhdGluZyBzaXRlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTsvL2VuZCBwb3N0U2l0ZWFuZCBQYXJ0c1xyXG4gICAgICAgIFxyXG4gICAgICAgICAgICBpZiAodGhpc1NpdGVTdHVmZiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gZXhpc3Rpbmcgc2l0ZSBcclxuICAgICAgICAgICAgICAgIC8vJHNjb3BlLmFTaXRlWzBdLCAkc2NvcGUub3JpZ2luYWxTaXRlSG91c2luZ3NbMV0sICRzY29wZS5leGlzdGluZ1NpdGVIb3VzZVR5cGVzVGFibGVbMl0sIHRoaXNTaXRlTmV0d29ya05hbWVzWzNdLCBzaXRlTmV0d29ya1R5cGVzWzRdLCAkc2NvcGUubGFuZG93bmVyWzVdXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUgPSBhbmd1bGFyLmNvcHkodGhpc1NpdGVTdHVmZlswXSk7XHJcbiAgICAgICAgICAgICAgICAvL2ZvciBzb21lIHJlYXNvbiB0aGVyZSBhcmUgdG9ucyBvZiBzaXRlcyB3aXRoIGhjb2xsZWN0X21ldGhvZF9pZCBzZXQgdG8gMCB3aGVuIGl0J3MgcmVxdWlyZWQuLm1ha2UgaXQgbnVsbCBzbyB2YWxpZGF0aW9uIHBpY2tzIHVwIG9uIHJlcXVpcmVkIGZpZWxkXHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFTaXRlLmhjb2xsZWN0X21ldGhvZF9pZCA8PSAwKSAkc2NvcGUuYVNpdGUuaGNvbGxlY3RfbWV0aG9kX2lkID0gbnVsbDtcclxuICAgICAgICAgICAgICAgIC8vaWYgdGhpcyBzaXRlIGlzIG5vdCBhcHByb3ByaWF0ZSBmb3Igc2Vuc29yLCBkaW0gbmV4dCAyIGZpZWxkc1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU2l0ZS5zZW5zb3Jfbm90X2FwcHJvcHJpYXRlID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNhYmxlU2Vuc29yUGFydHMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY2xlYXIgcmFkaW8gYW5kIGNoZWNrYm94ZXMgaWYgZGlzYWJsaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCAkc2NvcGUuUHJvcG9zZWRTZW5zLmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5Qcm9wb3NlZFNlbnNbeF0uc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLmlzX3Blcm1hbmVudF9ob3VzaW5nX2luc3RhbGxlZCA9IFwiTm9cIjtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL3VwZGF0ZSBjb3VudGllc0xpc3Qgd2l0aCB0aGlzIHN0YXRlJ3MgY291bnRpZXNcclxuICAgICAgICAgICAgICAgIHZhciB0aGlzU3RhdGUgPSAkc2NvcGUuU3RhdGVMaXN0LmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcy5zdGF0ZV9hYmJyZXYgPT0gJHNjb3BlLmFTaXRlLnN0YXRlOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZUNvdW50eUxpc3QgPSAkc2NvcGUuQWxsQ291bnR5TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuc3RhdGVfaWQgPT0gdGhpc1N0YXRlLnN0YXRlX2lkOyB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2FwcGx5IGFueSBzaXRlIGhvdXNpbmdzIGZvciBFRElUXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpc1NpdGVTdHVmZlsxXS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9yaWdpbmFsU2l0ZUhvdXNpbmdzID0gdGhpc1NpdGVTdHVmZlsxXTsgLy9mb3IgbXVsdGlzZWxlY3QgLnNlbGVjdGVkID0gdHJ1ZS9mYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93U2l0ZUhvdXNlVGFibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlSG91c2VUeXBlc1RhYmxlID0gdGhpc1NpdGVTdHVmZlsyXTsgLy9mb3IgdGFibGUgdG8gc2hvdyBhbGwgaW5mbyBvbiBob3VzZSB0eXBlXHJcbiAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvL2dvIHRocm91Z2ggYWxsSG91c2luZ1R5cGVMaXN0IGFuZCBhZGQgc2VsZWN0ZWQgUHJvcGVydHkuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaHQgPSAwOyBodCA8ICRzY29wZS5hbGxIb3VzaW5nVHlwZUxpc3QubGVuZ3RoOyBodCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZm9yIGVhY2ggb25lLCBpZiB0aGlzU2l0ZUhvdXNpbmdzIGhhcyB0aGlzIGlkLCBhZGQgJ3NlbGVjdGVkOnRydWUnIGVsc2UgYWRkICdzZWxlY3RlZDpmYWxzZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCAkc2NvcGUub3JpZ2luYWxTaXRlSG91c2luZ3MubGVuZ3RoOyB5KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUub3JpZ2luYWxTaXRlSG91c2luZ3NbeV0uaG91c2luZ190eXBlX2lkID09ICRzY29wZS5hbGxIb3VzaW5nVHlwZUxpc3RbaHRdLmhvdXNpbmdfdHlwZV9pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxIb3VzaW5nVHlwZUxpc3RbaHRdLnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gJHNjb3BlLm9yaWdpbmFsU2l0ZUhvdXNpbmdzLmxlbmd0aDsgLy9lbnN1cmVzIGl0IGRvZXNuJ3Qgc2V0IGl0IGFzIGZhbHNlIGFmdGVyIHNldHRpbmcgaXQgYXMgdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbEhvdXNpbmdUeXBlTGlzdFtodF0uc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLm9yaWdpbmFsU2l0ZUhvdXNpbmdzLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxIb3VzaW5nVHlwZUxpc3RbaHRdLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0vL2VuZCBpZiB0aGlzU2l0ZUhvdXNpbmdzICE9IHVuZGVmaW5lZFxyXG5cclxuICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgIC8vYXBwbHkgYW55IHNpdGUgbmV0d29yayBuYW1lcyBvciB0eXBlc1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXNTaXRlU3R1ZmZbM10ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9qTk5hbWVzID0gYW5ndWxhci5jb3B5KHRoaXNTaXRlU3R1ZmZbM10pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZm9yIGVhY2ggJHNjb3BlLk5ldE5hbWVMaXN0IC4uIGFkZCAuc2VsZWN0ZWQgcHJvcGVydHkgPSB0cnVlL2ZhbHNlIGlmIHRoaXNzaXRlbmV0d29ya25hbWVzID09XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYSA9IDA7IGEgPCAkc2NvcGUuTmV0TmFtZUxpc3QubGVuZ3RoOyBhKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZSA9IDA7IGUgPCBwcm9qTk5hbWVzLmxlbmd0aDsgZSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvak5OYW1lc1tlXS5uZXR3b3JrX25hbWVfaWQgPT0gJHNjb3BlLk5ldE5hbWVMaXN0W2FdLm5ldHdvcmtfbmFtZV9pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OZXROYW1lTGlzdFthXS5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZSA9IHByb2pOTmFtZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTmV0TmFtZUxpc3RbYV0uc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2pOTmFtZXMubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5ldE5hbWVMaXN0W2FdLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuTmV0TmFtZUxpc3RbMF0uc2VsZWN0ZWQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHRoZXNlIG1hdGNoIHNvIHJlc3QgZ2V0IGRpc2FibGVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jaGVja2VkID0gXCJOb3QgRGVmaW5lZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0vL2VuZCBpZiB0aGlzU2l0ZU5ldHdvcmtOYW1lcyAhPSB1bmRlZmluZWRcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpc1NpdGVTdHVmZls0XS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb2pOVHlwZSA9IGFuZ3VsYXIuY29weSh0aGlzU2l0ZVN0dWZmWzRdKTtcclxuICAgICAgICAgICAgICAgICAgICAvL2ZvciBlYWNoICRzY29wZS5OZXRUeXBlTGlzdCAuLiBhZGQgLnNlbGVjdGVkIHByb3BlcnR5ID0gdHJ1ZS9mYWxzZSBpZiB0aGlzc2l0ZW5ldHdvcmt0eXBlcyA9PVxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5pID0gMDsgbmkgPCAkc2NvcGUuTmV0VHlwZUxpc3QubGVuZ3RoOyBuaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG55ID0gMDsgbnkgPCBwcm9qTlR5cGUubGVuZ3RoOyBueSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocHJvak5UeXBlW255XS5uZXR3b3JrX3R5cGVfaWQgPT0gJHNjb3BlLk5ldFR5cGVMaXN0W25pXS5uZXR3b3JrX3R5cGVfaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTmV0VHlwZUxpc3RbbmldLnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBueSA9IHByb2pOVHlwZS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OZXRUeXBlTGlzdFtuaV0uc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByb2pOVHlwZS5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTmV0VHlwZUxpc3RbbmldLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIGlmIHRoaXNTaXRlTmV0d29ya05hbWVzICE9IHVuZGVmaW5lZCAgIFxyXG5cclxuICAgICAgICAgICAgICAgIC8vbGFuZG93bmVyIHN0dWZmXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpc1NpdGVTdHVmZls1XSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxhbmRvd25lciA9IHRoaXNTaXRlU3R1ZmZbNV07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZExhbmRvd25lciA9ICRzY29wZS5sYW5kb3duZXIuZm5hbWUgIT09IHVuZGVmaW5lZCB8fCAkc2NvcGUubGFuZG93bmVyLmxuYW1lICE9PSB1bmRlZmluZWQgfHwgJHNjb3BlLmxhbmRvd25lci5hZGRyZXNzICE9PSB1bmRlZmluZWQgfHwgJHNjb3BlLmxhbmRvd25lci5wcmltYXJ5cGhvbmUgIT09IHVuZGVmaW5lZCA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucyA9IHsgc09wZW46IGZhbHNlLCBzRmlsZU9wZW46IGZhbHNlIH07IC8vYWNjb3JkaW9uc1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIGV4aXN0aW5nIHNpdGUgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gdGhpcyBpcyBhIE5FVyBTSVRFIENSRUFURSAoc2l0ZSA9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAvL2dldCBsb2dnZWQgaW4gbWVtYmVyIHRvIG1ha2UgdGhlbSBjcmVhdG9yXHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICBNRU1CRVIucXVlcnkoeyBpZDogJGNvb2tpZXMuZ2V0KCdtSUQnKSB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLkNyZWF0b3IgPSByZXNwb25zZS5mbmFtZSArIFwiIFwiICsgcmVzcG9uc2UubG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLm1lbWJlcl9pZCA9IHJlc3BvbnNlLm1lbWJlcl9pZDtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuaXNfcGVybWFuZW50X2hvdXNpbmdfaW5zdGFsbGVkID0gXCJOb1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5hY2Nlc3NfZ3JhbnRlZCA9IFwiTm90IE5lZWRlZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vVE9ETzogZ2V0IG1lbWJlcidzIGlkIGluIHRoZXJlIHRvb1xyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIGdldHRpbmcgTWVtYmVyIGluZm86IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnMgPSB7IHNPcGVuOiB0cnVlIH07IC8vYWNjb3JkaW9uc1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHRoaXMgaXMgYSBORVcgU0lURSBDUkVBVEUgKHNpdGUgPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB9Ly9lbmQgbmV3IHNpdGVcclxuXHJcbiAgICAgICAgICAgIC8vICBsYXQvbG9uZyA9aXMgbnVtYmVyXHJcbiAgICAgICAgICAgICRzY29wZS5pc051bSA9IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0aGVFdmVudCA9IGV2dCB8fCB3aW5kb3cuZXZlbnQ7XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gdGhlRXZlbnQua2V5Q29kZSB8fCB0aGVFdmVudC53aGljaDtcclxuICAgICAgICAgICAgICAgIGlmIChrZXkgIT0gNDYgJiYga2V5ICE9IDQ1ICYmIGtleSA+IDMxICYmIChrZXkgPCA0OCB8fCBrZXkgPiA1NykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGVFdmVudC5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGVFdmVudC5wcmV2ZW50RGVmYXVsdCkgdGhlRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vbXVsdGlzZWxlY3Qgb25lIGNoZWNrZWQuLlxyXG4gICAgICAgICAgICAkc2NvcGUuSG91c2VUeXBlQ2xpY2sgPSBmdW5jdGlvbiAoaHQpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5ob3VzZURpcnR5ID0gdHJ1ZTsgLy90aGV5IGNsaWNrZWQgaXQuLnVzZWQgd2hlbiBwb3N0L3B1dFxyXG4gICAgICAgICAgICAgICAgLy9hZGQvcmVtb3ZlIGhvdXNlIHR5cGUgYW5kIGlucHV0cyB0byB0YWJsZSByb3cgLS0gZm9yZWFjaCBvbiBwb3N0IG9yIHB1dCB3aWxsIGhhbmRsZSB0aGUgcmVzdFxyXG4gICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy9uZXcgc2l0ZSBiZWluZyBjcmVhdGVkXHJcbiAgICAgICAgICAgICAgICBpZiAoaHQuc2VsZWN0ZWQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaG91c2VUID0geyB0eXBlX25hbWU6IGh0LnR5cGVfbmFtZSwgaG91c2luZ190eXBlX2lkOiBodC5ob3VzaW5nX3R5cGVfaWQsIGxlbmd0aDogaHQubGVuZ3RoLCBtYXRlcmlhbDogaHQubWF0ZXJpYWwsIG5vdGVzOiBodC5ub3RlcywgYW1vdW50OiAxIH07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVIb3VzZVR5cGVzVGFibGUucHVzaChob3VzZVQpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93U2l0ZUhvdXNlVGFibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGh0LnNlbGVjdGVkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNpdGUuc2l0ZV9pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzSF9JRCA9ICRzY29wZS5zaXRlSG91c2VUeXBlc1RhYmxlLmZpbHRlcihmdW5jdGlvbiAoaCkgeyByZXR1cm4gaC50eXBlX25hbWUgPT0gaHQudHlwZV9uYW1lOyB9KVswXS5zaXRlX2hvdXNpbmdfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlSG91c2VzVG9SZW1vdmUucHVzaChzSF9JRCk7IC8vZWRpdCBwYWdlLCBhZGQgc2l0ZV9ob3VzaW5nX2lkIHRvIHJlbW92ZSBsaXN0IGZvciBQVVRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAkc2NvcGUuc2l0ZUhvdXNlVHlwZXNUYWJsZS5pbmRleE9mKCRzY29wZS5zaXRlSG91c2VUeXBlc1RhYmxlLmZpbHRlcihmdW5jdGlvbiAoaCkgeyByZXR1cm4gaC50eXBlX25hbWUgPT0gaHQudHlwZV9uYW1lOyB9KVswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVIb3VzZVR5cGVzVGFibGUuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuc2l0ZUhvdXNlVHlwZXNUYWJsZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dTaXRlSG91c2VUYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyB3YW50IHRvIGFkZCBhIGxhbmRvd25lciBjb250YWN0XHJcbiAgICAgICAgICAgICRzY29wZS5zaG93TGFuZE93bmVyUGFydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGRMYW5kb3duZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy93aGVuIHN0YXRlIGNoYW5nZXMsIHVwZGF0ZSBjb3VudHkgbGlzdFxyXG4gICAgICAgICAgICAkc2NvcGUudXBkYXRlQ291bnR5TGlzdCA9IGZ1bmN0aW9uIChzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGhpc1N0YXRlID0gJHNjb3BlLlN0YXRlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHN0KSB7IHJldHVybiBzdC5zdGF0ZV9hYmJyZXYgPT0gczsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVDb3VudHlMaXN0ID0gJHNjb3BlLkFsbENvdW50eUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnN0YXRlX2lkID09IHRoaXNTdGF0ZS5zdGF0ZV9pZDsgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2NhbmNlbCBtb2RhbFxyXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9kZWxldGUgdGhpcyBTaXRlXHJcbiAgICAgICAgICAgICRzY29wZS5kZWxldGVTaXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRoaXNTaXRlID0gJHNjb3BlLmFTaXRlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRTaXRlTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5EZWxldGUgU2l0ZTwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgc2l0ZSB7e3NpdGVOb319PzwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGFuZ2VyXCIgbmctY2xpY2s9XCJkZWxldGVJdCgpXCI+RGVsZXRlPC9idXR0b24+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cIm9rKClcIj5DYW5jZWw8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVObyA9IHRoaXNTaXRlLnNpdGVfbm87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVsZXRlSXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2RlbGV0ZSB0aGUgc2l0ZSBhbmQgYWxsIHRoaW5ncyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHRoaXNTaXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGRTaXRlTW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgU0lURS5kZWxldGUoeyBpZDogcy5zaXRlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlNpdGUgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbmRCYWNrID0gXCJEZWxldGVkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHNlbmRCYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+e3ttZXNzYWdlfX08L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJvaygpXCI+Q2FuY2VsPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVzc2FnZSA9IGVycm9yUmVzcG9uc2UuaGVhZGVycyhcInVzZ3N3aW0tbWVzc2FnZXNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgIH0pOy8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgfV0pO1xyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAvKiBjb250cm9sbGVycy5qcywgJ2xlYWZsZXQtZGlyZWN0aXZlJyd1aS51bmlxdWUnLCduZ1RhZ3NJbnB1dCcsKi9cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU1ROQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQ29udHJvbGxlcnMnKTtcclxuXHJcbiAgICBTVE5Db250cm9sbGVycy5jb250cm9sbGVyKCdzaXRlTWFwQ3RybCcsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGNvb2tpZXMnLCAnJGxvY2F0aW9uJywgJyRzdGF0ZScsICdTSVRFJywgJ3NpdGVIV01zJywgJ2RlcGxveW1lbnRUeXBlcycsXHJcbiAgICAgICAgJ2Jhcm9TZW5zb3JzJywgJ21ldFNlbnNvcnMnLCAncmRnU2Vuc29ycycsICdzdG9ybVNlbnNvcnMnLCAnd2F2ZVNlbnNvcnMnLCAncHJlc1RlbXBTZW5zb3JzJywgJ3RoZXJtU2Vuc29ycycsICd3ZWJjYW1TZW5zb3JzJywgJ3JhaW5nYWdlU2Vuc29ycycsICdsZWFmbGV0RGF0YScsICdhU2l0ZScsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICRsb2NhdGlvbiwgJHN0YXRlLCBTSVRFLCBzaXRlSFdNcywgZGVwbG95bWVudFR5cGVzLFxyXG4gICAgICAgICAgICBiYXJvU2Vuc29ycywgbWV0U2Vuc29ycywgcmRnU2Vuc29ycywgc3Rvcm1TZW5zb3JzLCB3YXZlU2Vuc29ycywgcHJlc1RlbXBTZW5zb3JzLCB0aGVybVNlbnNvcnMsIHdlYmNhbVNlbnNvcnMsIHJhaW5nYWdlU2Vuc29ycywgbGVhZmxldERhdGEsIGFTaXRlKSB7XHJcbiAgICAgICAgICAgIGlmIChhU2l0ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubWFwU3R1ZmYgPSBcImhlcmUncyB0aGUgbWFwIGFjY29yZGlvbiBjb250ZW50XCI7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudGhpc1NpdGUgPSBhU2l0ZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hbGxTaXRlSFdNcyA9IHNpdGVIV01zO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNpdGVCYXJvU2Vuc29ycyA9IGJhcm9TZW5zb3JzLmZpbHRlcihmdW5jdGlvbiAoYnMpIHsgcmV0dXJuIGJzLnNpdGVfaWQgPT0gYVNpdGUuc2l0ZV9pZDsgfSk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU2l0ZU1ldFNlbnNvcnMgPSBtZXRTZW5zb3JzLmZpbHRlcihmdW5jdGlvbiAoYnMpIHsgcmV0dXJuIGJzLnNpdGVfaWQgPT0gYVNpdGUuc2l0ZV9pZDsgfSk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU2l0ZVJER1NlbnNvcnMgPSByZGdTZW5zb3JzLmZpbHRlcihmdW5jdGlvbiAoYnMpIHsgcmV0dXJuIGJzLnNpdGVfaWQgPT0gYVNpdGUuc2l0ZV9pZDsgfSk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU2l0ZVN0b3JtU2Vuc29ycyA9IHN0b3JtU2Vuc29ycy5maWx0ZXIoZnVuY3Rpb24gKGJzKSB7IHJldHVybiBicy5zaXRlX2lkID09IGFTaXRlLnNpdGVfaWQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNpdGVXYXZlU2Vuc29ycyA9IHdhdmVTZW5zb3JzLmZpbHRlcihmdW5jdGlvbiAoYnMpIHsgcmV0dXJuIGJzLnNpdGVfaWQgPT0gYVNpdGUuc2l0ZV9pZDsgfSk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU2l0ZVByZXNUZW1wU2Vuc29ycyA9IHByZXNUZW1wU2Vuc29ycy5maWx0ZXIoZnVuY3Rpb24gKGJzKSB7IHJldHVybiBicy5zaXRlX2lkID09IGFTaXRlLnNpdGVfaWQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNpdGVUaGVybVNlbnNvcnMgPSB0aGVybVNlbnNvcnMuZmlsdGVyKGZ1bmN0aW9uIChicykgeyByZXR1cm4gYnMuc2l0ZV9pZCA9PSBhU2l0ZS5zaXRlX2lkOyB9KTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hbGxTaXRlV2ViU2Vuc29ycyA9IHdlYmNhbVNlbnNvcnMuZmlsdGVyKGZ1bmN0aW9uIChicykgeyByZXR1cm4gYnMuc2l0ZV9pZCA9PSBhU2l0ZS5zaXRlX2lkOyB9KTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hbGxTaXRlUmFpblNlbnNvcnMgPSByYWluZ2FnZVNlbnNvcnMuZmlsdGVyKGZ1bmN0aW9uIChicykgeyByZXR1cm4gYnMuc2l0ZV9pZCA9PSBhU2l0ZS5zaXRlX2lkOyB9KTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hbGxEZXBsb3ltZW50VHlwZXMgPSBkZXBsb3ltZW50VHlwZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnBhdGhzID0ge307XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubWFya2VycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8vbmVlZCB0byB3YXRjaCBmb3Igc2Vzc2lvbiBldmVudCBpZCwgZG8gbmV3IGNhbGwgdG8gc2VydmVyIHdoZW4gdGhhdCBjaGFuZ2VzXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKTsgfSwgZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBnZXRQcm94aW1pdHlTaXRlcygpOyAvL2dldCBhbGwgdGhvc2UgbmVhcmJ5XHJcbiAgICAgICAgICAgICAgICAgICAgLy9wdXNoIHRoaXMgc2l0ZSBpblxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXJrZXJzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogJ3N0blNpdGVzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJzxkaXY+PGI+VGhpcyBTaXRlIE5hbWU6PC9iPiAnICsgJHNjb3BlLnRoaXNTaXRlLnNpdGVfbm8gKyAnPC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiAkc2NvcGUudGhpc1NpdGUubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogJHNjb3BlLnRoaXNTaXRlLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogaWNvbnMuc2VsZWN0ZWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnU2l0ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SUQ6IDBcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAvL25vdyBmaWx0ZXIgaHdtcyBhbmQgc2Vuc29ycyBieSBldmVudFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZW1wdHkgbWFya2VycyBhbmQgc3RhcnQgYWdhaW4gZnJvbSBzaXRlSFdNcyB0byBtYWtlIHN1cmUgZWFjaCB0aW1lIHdlIGFyZSBmaWx0ZXJpbmcgYmFzZWQgb24gYWxsICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaCA9IDA7IGggPCAkc2NvcGUuYWxsU2l0ZUhXTXMubGVuZ3RoOyBoKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlYWNoSFdNID0gJHNjb3BlLmFsbFNpdGVIV01zW2hdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVhY2hIV00uZXZlbnRfaWQgPT0gbmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3B1c2ggaHdtcyBpbiB0aGF0IGhhdmUgdGhpcyBldmVudF9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXJrZXJzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogJ3N0blNpdGVzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJzxkaXY+PGI+SFdNOjwvYj4gJyArIGVhY2hIV00uaHdtX2xhYmVsICsgJzwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdDogZWFjaEhXTS5sYXRpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG5nOiBlYWNoSFdNLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogaWNvbnMuaHdtSWNvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdIV00nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudElEOiBlYWNoSFdNLmV2ZW50X2lkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgaWYgZXZlbnRfaWQgPT0gbmV3VmFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9maWx0ZXIgYWxsIHNlbnNvciB0eXBlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRTZW5zb3JzKG5ld1ZhbHVlKTsgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5vRXZlbnRIID0gMDsgbm9FdmVudEggPCAkc2NvcGUuYWxsU2l0ZUhXTXMubGVuZ3RoOyBub0V2ZW50SCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWFjaG5vRUhXTSA9ICRzY29wZS5hbGxTaXRlSFdNc1tub0V2ZW50SF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFya2Vycy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogJ3N0blNpdGVzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnPGRpdj48Yj5IV006PC9iPiAnICsgZWFjaG5vRUhXTS5od21fbGFiZWwgKyAnPC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXQ6IGVhY2hub0VIV00ubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG5nOiBlYWNobm9FSFdNLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpY29ucy5od21JY29uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnSFdNJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudElEOiBlYWNobm9FSFdNLmV2ZW50X2lkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2ZpbHRlciBhbGwgc2Vuc29yIHR5cGVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZFNlbnNvcnMoMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2NhbGxlZCBmcm9tICR3YXRjaCBvbiBldmVudCBjaGFuZ2UgdG8gdXBkYXRlIGFsbCB0aGUgc2Vuc29yIHR5cGVzIHZpZXdlZCBmcm9tIHNpdGVtYXBcclxuICAgICAgICAgICAgICAgIHZhciBhZGRTZW5zb3JzID0gZnVuY3Rpb24gKGV2ZW50SUQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRJRCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9iYXJvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGJzID0gMDsgYnMgPCAkc2NvcGUuYWxsU2l0ZUJhcm9TZW5zb3JzLmxlbmd0aDsgYnMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJTZW5zb3IgPSAkc2NvcGUuYWxsU2l0ZUJhcm9TZW5zb3JzW2JzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChiU2Vuc29yLmV2ZW50X2lkID09IGV2ZW50SUQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3B1c2ggc2Vuc29yIGluIHRoYXQgaGF2ZSB0aGlzIGV2ZW50X2lkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyOiAnc3RuU2l0ZXMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnPGRpdj48Yj4nICsgJHNjb3BlLmFsbERlcGxveW1lbnRUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuZGVwbG95bWVudF90eXBlX2lkID09IGJTZW5zb3IuZGVwbG95bWVudF90eXBlX2lkOyB9KVswXS5tZXRob2QgKyAnIFNlbnNvciBTdGF0dXM6PC9iPiAnICsgYlNlbnNvci5zdGF0dXMgKyAnPC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiBiU2Vuc29yLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbmc6IGJTZW5zb3IubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpY29ucy5iYXJvSWNvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdCYXJvIFNlbnNvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SUQ6IGJTZW5zb3IuZXZlbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0vL2VuZCBpZiBldmVudF9pZCA9PSBuZXdWYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21ldFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBtcyA9IDA7IG1zIDwgJHNjb3BlLmFsbFNpdGVNZXRTZW5zb3JzLmxlbmd0aDsgbXMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1TZW5zb3IgPSAkc2NvcGUuYWxsU2l0ZU1ldFNlbnNvcnNbbXNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1TZW5zb3IuZXZlbnRfaWQgPT0gZXZlbnRJRCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcHVzaCBzZW5zb3IgaW4gdGhhdCBoYXZlIHRoaXMgZXZlbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFya2Vycy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6ICdzdG5TaXRlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICc8ZGl2PjxiPicgKyAkc2NvcGUuYWxsRGVwbG95bWVudFR5cGVzLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5kZXBsb3ltZW50X3R5cGVfaWQgPT0gbVNlbnNvci5kZXBsb3ltZW50X3R5cGVfaWQ7IH0pWzBdLm1ldGhvZCArICcgU2Vuc29yIFN0YXR1czo8L2I+ICcgKyBtU2Vuc29yLnN0YXR1cyArICc8L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXQ6IG1TZW5zb3IubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogbVNlbnNvci5sb25naXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IGljb25zLm1ldEljb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnTWV0IFNlbnNvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SUQ6IG1TZW5zb3IuZXZlbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3JkZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBycyA9IDA7IHJzIDwgJHNjb3BlLmFsbFNpdGVSREdTZW5zb3JzLmxlbmd0aDsgcnMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJTZW5zb3IgPSAkc2NvcGUuYWxsU2l0ZVJER1NlbnNvcnNbcnNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJTZW5zb3IuZXZlbnRfaWQgPT0gZXZlbnRJRCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcHVzaCBzZW5zb3IgaW4gdGhhdCBoYXZlIHRoaXMgZXZlbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFya2Vycy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6ICdzdG5TaXRlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICc8ZGl2PjxiPicgKyAkc2NvcGUuYWxsRGVwbG95bWVudFR5cGVzLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5kZXBsb3ltZW50X3R5cGVfaWQgPT0gclNlbnNvci5kZXBsb3ltZW50X3R5cGVfaWQ7IH0pWzBdLm1ldGhvZCArICcgU2Vuc29yIFN0YXR1czo8L2I+ICcgKyByU2Vuc29yLnN0YXR1cyArICc8L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXQ6IHJTZW5zb3IubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogclNlbnNvci5sb25naXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IGljb25zLnJkZ0ljb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnUkRHIFNlbnNvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SUQ6IHJTZW5zb3IuZXZlbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3N0b3JtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHNzID0gMDsgc3MgPCAkc2NvcGUuYWxsU2l0ZVN0b3JtU2Vuc29ycy5sZW5ndGg7IHNzKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzU2Vuc29yID0gJHNjb3BlLmFsbFNpdGVTdG9ybVNlbnNvcnNbc3NdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNTZW5zb3IuZXZlbnRfaWQgPT0gZXZlbnRJRCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcHVzaCBzZW5zb3IgaW4gdGhhdCBoYXZlIHRoaXMgZXZlbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFya2Vycy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6ICdzdG5TaXRlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICc8ZGl2PjxiPicgKyAkc2NvcGUuYWxsRGVwbG95bWVudFR5cGVzLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5kZXBsb3ltZW50X3R5cGVfaWQgPT0gc1NlbnNvci5kZXBsb3ltZW50X3R5cGVfaWQ7IH0pWzBdLm1ldGhvZCArICcgU2Vuc29yIFN0YXR1czo8L2I+ICcgKyBzU2Vuc29yLnN0YXR1cyArICc8L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXQ6IHNTZW5zb3IubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogc1NlbnNvci5sb25naXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IGljb25zLnN0b3JtSWNvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdTdG9ybXRpZGUgU2Vuc29yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRJRDogc1NlbnNvci5ldmVudF9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vd2F2ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB3cyA9IDA7IHdzIDwgJHNjb3BlLmFsbFNpdGVXYXZlU2Vuc29ycy5sZW5ndGg7IHdzKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3U2Vuc29yID0gJHNjb3BlLmFsbFNpdGVXYXZlU2Vuc29yc1t3c107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAod1NlbnNvci5ldmVudF9pZCA9PSBldmVudElEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wdXNoIHNlbnNvciBpbiB0aGF0IGhhdmUgdGhpcyBldmVudF9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXJrZXJzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogJ3N0blNpdGVzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJzxkaXY+PGI+JyArICRzY29wZS5hbGxEZXBsb3ltZW50VHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmRlcGxveW1lbnRfdHlwZV9pZCA9PSB3U2Vuc29yLmRlcGxveW1lbnRfdHlwZV9pZDsgfSlbMF0ubWV0aG9kICsgJyBTZW5zb3IgU3RhdHVzOjwvYj4gJyArIHdTZW5zb3Iuc3RhdHVzICsgJzwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdDogd1NlbnNvci5sYXRpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG5nOiB3U2Vuc29yLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogaWNvbnMud2F2ZUljb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnV2F2ZWhlaWdodCBTZW5zb3InLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudElEOiB3U2Vuc29yLmV2ZW50X2lkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9wcmVzc3VyZVRlbXBcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcHMgPSAwOyBwcyA8ICRzY29wZS5hbGxTaXRlUHJlc1RlbXBTZW5zb3JzLmxlbmd0aDsgcHMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBTZW5zb3IgPSAkc2NvcGUuYWxsU2l0ZVByZXNUZW1wU2Vuc29yc1twc107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocFNlbnNvci5ldmVudF9pZCA9PSBldmVudElEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wdXNoIHNlbnNvciBpbiB0aGF0IGhhdmUgdGhpcyBldmVudF9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXJrZXJzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogJ3N0blNpdGVzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJzxkaXY+PGI+JyArICRzY29wZS5hbGxEZXBsb3ltZW50VHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmRlcGxveW1lbnRfdHlwZV9pZCA9PSBwU2Vuc29yLmRlcGxveW1lbnRfdHlwZV9pZDsgfSlbMF0ubWV0aG9kICsgJyBTZW5zb3IgU3RhdHVzOjwvYj4gJyArIHBTZW5zb3Iuc3RhdHVzICsgJzwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdDogcFNlbnNvci5sYXRpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG5nOiBwU2Vuc29yLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogaWNvbnMucHJlc3N1cmVJY29uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1ByZXNzdXJlVGVtcCBTZW5zb3InLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudElEOiBwU2Vuc29yLmV2ZW50X2lkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGVybW9tZXRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB0cyA9IDA7IHRzIDwgJHNjb3BlLmFsbFNpdGVUaGVybVNlbnNvcnMubGVuZ3RoOyB0cysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdFNlbnNvciA9ICRzY29wZS5hbGxTaXRlVGhlcm1TZW5zb3JzW3RzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0U2Vuc29yLmV2ZW50X2lkID09IGV2ZW50SUQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3B1c2ggc2Vuc29yIGluIHRoYXQgaGF2ZSB0aGlzIGV2ZW50X2lkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyOiAnc3RuU2l0ZXMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnPGRpdj48Yj4nICsgJHNjb3BlLmFsbERlcGxveW1lbnRUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuZGVwbG95bWVudF90eXBlX2lkID09IHRTZW5zb3IuZGVwbG95bWVudF90eXBlX2lkOyB9KVswXS5tZXRob2QgKyAnIFNlbnNvciBTdGF0dXM6PC9iPiAnICsgdFNlbnNvci5zdGF0dXMgKyAnPC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiB0U2Vuc29yLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbmc6IHRTZW5zb3IubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpY29ucy50aGVybUljb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnVGhlcm1vbWV0ZXIgU2Vuc29yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRJRDogdFNlbnNvci5ldmVudF9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vd2ViY2FtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHdlYnMgPSAwOyB3ZWJzIDwgJHNjb3BlLmFsbFNpdGVXZWJTZW5zb3JzLmxlbmd0aDsgd2VicysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2ViU2Vuc29yID0gJHNjb3BlLmFsbFNpdGVXZWJTZW5zb3JzW3dlYnNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHdlYlNlbnNvci5ldmVudF9pZCA9PSBldmVudElEKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wdXNoIHNlbnNvciBpbiB0aGF0IGhhdmUgdGhpcyBldmVudF9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXJrZXJzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogJ3N0blNpdGVzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJzxkaXY+PGI+JyArICRzY29wZS5hbGxEZXBsb3ltZW50VHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmRlcGxveW1lbnRfdHlwZV9pZCA9PSB3ZWJTZW5zb3IuZGVwbG95bWVudF90eXBlX2lkOyB9KVswXS5tZXRob2QgKyAnIFNlbnNvciBTdGF0dXM6PC9iPiAnICsgd2ViU2Vuc29yLnN0YXR1cyArICc8L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXQ6IHdlYlNlbnNvci5sYXRpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG5nOiB3ZWJTZW5zb3IubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpY29ucy53ZWJjYW1JY29uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1dlYmNhbSBTZW5zb3InLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudElEOiB3ZWJTZW5zb3IuZXZlbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3JhaW5nYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHJhaW5zID0gMDsgcmFpbnMgPCAkc2NvcGUuYWxsU2l0ZVJhaW5TZW5zb3JzLmxlbmd0aDsgcmFpbnMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhaW5TZW5zb3IgPSAkc2NvcGUuYWxsU2l0ZVJhaW5TZW5zb3JzW3JhaW5zXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYWluU2Vuc29yLmV2ZW50X2lkID09IGV2ZW50SUQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3B1c2ggc2Vuc29yIGluIHRoYXQgaGF2ZSB0aGlzIGV2ZW50X2lkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyOiAnc3RuU2l0ZXMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnPGRpdj48Yj4nICsgJHNjb3BlLmFsbERlcGxveW1lbnRUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuZGVwbG95bWVudF90eXBlX2lkID09IHJhaW5TZW5zb3IuZGVwbG95bWVudF90eXBlX2lkOyB9KVswXS5tZXRob2QgKyAnIFNlbnNvciBTdGF0dXM6PC9iPiAnICsgcmFpblNlbnNvci5zdGF0dXMgKyAnPC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiByYWluU2Vuc29yLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbmc6IHJhaW5TZW5zb3IubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpY29ucy5yYWluZ2FnZUljb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnUmFpbmdhZ2UgU2Vuc29yJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRJRDogcmFpblNlbnNvci5ldmVudF9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9iYXJvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5vRWJzID0gMDsgbm9FYnMgPCAkc2NvcGUuYWxsU2l0ZUJhcm9TZW5zb3JzLmxlbmd0aDsgbm9FYnMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vRWJTZW5zb3IgPSAkc2NvcGUuYWxsU2l0ZUJhcm9TZW5zb3JzW25vRWJzXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcHVzaCBzZW5zb3IgaW4gdGhhdCBoYXZlIHRoaXMgZXZlbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXJrZXJzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyOiAnc3RuU2l0ZXMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICc8ZGl2PjxiPicgKyAkc2NvcGUuYWxsRGVwbG95bWVudFR5cGVzLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5kZXBsb3ltZW50X3R5cGVfaWQgPT0gbm9FYlNlbnNvci5kZXBsb3ltZW50X3R5cGVfaWQ7IH0pWzBdLm1ldGhvZCArICcgU2Vuc29yIFN0YXR1czo8L2I+ICcgKyBub0ViU2Vuc29yLnN0YXR1cyArICc8L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdDogbm9FYlNlbnNvci5sYXRpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbmc6IG5vRWJTZW5zb3IubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IGljb25zLmJhcm9JY29uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnQmFybyBTZW5zb3InLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SUQ6IG5vRWJTZW5zb3IuZXZlbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21ldFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBub0VtcyA9IDA7IG5vRW1zIDwgJHNjb3BlLmFsbFNpdGVNZXRTZW5zb3JzLmxlbmd0aDsgbm9FbXMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vRW1TZW5zb3IgPSAkc2NvcGUuYWxsU2l0ZU1ldFNlbnNvcnNbbm9FbXNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wdXNoIHNlbnNvciBpbiB0aGF0IGhhdmUgdGhpcyBldmVudF9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6ICdzdG5TaXRlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJzxkaXY+PGI+JyArICRzY29wZS5hbGxEZXBsb3ltZW50VHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmRlcGxveW1lbnRfdHlwZV9pZCA9PSBub0VtU2Vuc29yLmRlcGxveW1lbnRfdHlwZV9pZDsgfSlbMF0ubWV0aG9kICsgJyBTZW5zb3IgU3RhdHVzOjwvYj4gJyArIG5vRW1TZW5zb3Iuc3RhdHVzICsgJzwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiBub0VtU2Vuc29yLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogbm9FbVNlbnNvci5sb25naXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogaWNvbnMubWV0SWNvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ01ldCBTZW5zb3InLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SUQ6IG5vRW1TZW5zb3IuZXZlbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3JkZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBub0VycyA9IDA7IG5vRXJzIDwgJHNjb3BlLmFsbFNpdGVSREdTZW5zb3JzLmxlbmd0aDsgbm9FcnMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vRXJTZW5zb3IgPSAkc2NvcGUuYWxsU2l0ZVJER1NlbnNvcnNbbm9FcnNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wdXNoIHNlbnNvciBpbiB0aGF0IGhhdmUgdGhpcyBldmVudF9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6ICdzdG5TaXRlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJzxkaXY+PGI+JyArICRzY29wZS5hbGxEZXBsb3ltZW50VHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmRlcGxveW1lbnRfdHlwZV9pZCA9PSBub0VyU2Vuc29yLmRlcGxveW1lbnRfdHlwZV9pZDsgfSlbMF0ubWV0aG9kICsgJyBTZW5zb3IgU3RhdHVzOjwvYj4gJyArIG5vRXJTZW5zb3Iuc3RhdHVzICsgJzwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiBub0VyU2Vuc29yLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogbm9FclNlbnNvci5sb25naXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogaWNvbnMucmRnSWNvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1JERyBTZW5zb3InLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SUQ6IG5vRXJTZW5zb3IuZXZlbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3N0b3JtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5vRXNzID0gMDsgbm9Fc3MgPCAkc2NvcGUuYWxsU2l0ZVN0b3JtU2Vuc29ycy5sZW5ndGg7IG5vRXNzKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub0VzU2Vuc29yID0gJHNjb3BlLmFsbFNpdGVTdG9ybVNlbnNvcnNbbm9Fc3NdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wdXNoIHNlbnNvciBpbiB0aGF0IGhhdmUgdGhpcyBldmVudF9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6ICdzdG5TaXRlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJzxkaXY+PGI+JyArICRzY29wZS5hbGxEZXBsb3ltZW50VHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmRlcGxveW1lbnRfdHlwZV9pZCA9PSBub0VzU2Vuc29yLmRlcGxveW1lbnRfdHlwZV9pZDsgfSlbMF0ubWV0aG9kICsgJyBTZW5zb3IgU3RhdHVzOjwvYj4gJyArIG5vRXNTZW5zb3Iuc3RhdHVzICsgJzwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiBub0VzU2Vuc29yLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogbm9Fc1NlbnNvci5sb25naXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogaWNvbnMuc3Rvcm1JY29uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnU3Rvcm10aWRlIFNlbnNvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRJRDogbm9Fc1NlbnNvci5ldmVudF9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3dhdmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbm9Fd3MgPSAwOyBub0V3cyA8ICRzY29wZS5hbGxTaXRlV2F2ZVNlbnNvcnMubGVuZ3RoOyBub0V3cysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9Fd1NlbnNvciA9ICRzY29wZS5hbGxTaXRlV2F2ZVNlbnNvcnNbbm9Fd3NdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wdXNoIHNlbnNvciBpbiB0aGF0IGhhdmUgdGhpcyBldmVudF9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6ICdzdG5TaXRlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJzxkaXY+PGI+JyArICRzY29wZS5hbGxEZXBsb3ltZW50VHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmRlcGxveW1lbnRfdHlwZV9pZCA9PSBub0V3U2Vuc29yLmRlcGxveW1lbnRfdHlwZV9pZDsgfSlbMF0ubWV0aG9kICsgJyBTZW5zb3IgU3RhdHVzOjwvYj4gJyArIG5vRXdTZW5zb3Iuc3RhdHVzICsgJzwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiBub0V3U2Vuc29yLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogbm9Fd1NlbnNvci5sb25naXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogaWNvbnMud2F2ZUljb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdXYXZlaGVpZ2h0IFNlbnNvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRJRDogbm9Fd1NlbnNvci5ldmVudF9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcHJlc3N1cmVUZW1wXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5vRXBzID0gMDsgbm9FcHMgPCAkc2NvcGUuYWxsU2l0ZVByZXNUZW1wU2Vuc29ycy5sZW5ndGg7IG5vRXBzKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub0VwU2Vuc29yID0gJHNjb3BlLmFsbFNpdGVQcmVzVGVtcFNlbnNvcnNbbm9FcHNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wdXNoIHNlbnNvciBpbiB0aGF0IGhhdmUgdGhpcyBldmVudF9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6ICdzdG5TaXRlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJzxkaXY+PGI+JyArICRzY29wZS5hbGxEZXBsb3ltZW50VHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmRlcGxveW1lbnRfdHlwZV9pZCA9PSBub0VwU2Vuc29yLmRlcGxveW1lbnRfdHlwZV9pZDsgfSlbMF0ubWV0aG9kICsgJyBTZW5zb3IgU3RhdHVzOjwvYj4gJyArIG5vRXBTZW5zb3Iuc3RhdHVzICsgJzwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiBub0VwU2Vuc29yLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogbm9FcFNlbnNvci5sb25naXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogaWNvbnMucHJlc3N1cmVJY29uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnUHJlc3N1cmVUZW1wIFNlbnNvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRJRDogbm9FcFNlbnNvci5ldmVudF9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhlcm1vbWV0ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbm9FdHMgPSAwOyBub0V0cyA8ICRzY29wZS5hbGxTaXRlVGhlcm1TZW5zb3JzLmxlbmd0aDsgbm9FdHMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5vRXRTZW5zb3IgPSAkc2NvcGUuYWxsU2l0ZVRoZXJtU2Vuc29yc1tub0V0c107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3B1c2ggc2Vuc29yIGluIHRoYXQgaGF2ZSB0aGlzIGV2ZW50X2lkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFya2Vycy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogJ3N0blNpdGVzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnPGRpdj48Yj4nICsgJHNjb3BlLmFsbERlcGxveW1lbnRUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuZGVwbG95bWVudF90eXBlX2lkID09IG5vRXRTZW5zb3IuZGVwbG95bWVudF90eXBlX2lkOyB9KVswXS5tZXRob2QgKyAnU2Vuc29yIFN0YXR1czo8L2I+ICcgKyBub0V0U2Vuc29yLnN0YXR1cyArICc8L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdDogbm9FdFNlbnNvci5sYXRpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbmc6IG5vRXRTZW5zb3IubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IGljb25zLnRoZXJtSWNvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogJ1RoZXJtb21ldGVyIFNlbnNvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRJRDogbm9FdFNlbnNvci5ldmVudF9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vd2ViY2FtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5vRXdlYnMgPSAwOyBub0V3ZWJzIDwgJHNjb3BlLmFsbFNpdGVXZWJTZW5zb3JzLmxlbmd0aDsgbm9Fd2VicysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm9Fd2ViU2Vuc29yID0gJHNjb3BlLmFsbFNpdGVXZWJTZW5zb3JzW25vRXdlYnNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wdXNoIHNlbnNvciBpbiB0aGF0IGhhdmUgdGhpcyBldmVudF9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6ICdzdG5TaXRlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJzxkaXY+PGI+JyArICRzY29wZS5hbGxEZXBsb3ltZW50VHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmRlcGxveW1lbnRfdHlwZV9pZCA9PSBub0V3ZWJTZW5zb3IuZGVwbG95bWVudF90eXBlX2lkOyB9KVswXS5tZXRob2QgKyAnIFNlbnNvciBTdGF0dXM6PC9iPiAnICsgbm9Fd2ViU2Vuc29yLnN0YXR1cyArICc8L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdDogbm9Fd2ViU2Vuc29yLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogbm9Fd2ViU2Vuc29yLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpY29ucy53ZWJjYW1JY29uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiAnV2ViY2FtIFNlbnNvcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRJRDogbm9Fd2ViU2Vuc29yLmV2ZW50X2lkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9yYWluZ2FnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBub0VyYWlucyA9IDA7IG5vRXJhaW5zIDwgJHNjb3BlLmFsbFNpdGVSYWluU2Vuc29ycy5sZW5ndGg7IG5vRXJhaW5zKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBub0VyYWluU2Vuc29yID0gJHNjb3BlLmFsbFNpdGVSYWluU2Vuc29yc1tub0VyYWluc107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3B1c2ggc2Vuc29yIGluIHRoYXQgaGF2ZSB0aGlzIGV2ZW50X2lkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFya2Vycy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogJ3N0blNpdGVzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiAnPGRpdj48Yj4nICsgJHNjb3BlLmFsbERlcGxveW1lbnRUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuZGVwbG95bWVudF90eXBlX2lkID09IG5vRXJhaW5TZW5zb3IuZGVwbG95bWVudF90eXBlX2lkOyB9KVswXS5tZXRob2QgKyAnIFNlbnNvciBTdGF0dXM6PC9iPiAnICsgbm9FcmFpblNlbnNvci5zdGF0dXMgKyAnPC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXQ6IG5vRXJhaW5TZW5zb3IubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG5nOiBub0VyYWluU2Vuc29yLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpY29ucy5yYWluZ2FnZUljb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6ICdSYWluZ2FnZSBTZW5zb3InLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50SUQ6IG5vRXJhaW5TZW5zb3IuZXZlbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH07Ly9lbmQgYWRkU2Vuc29ycyB3aGVuIGV2ZW50IGNoYW5nZXNcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgaWNvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RuOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogWzEwLCAxMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3N0blNpdGVJY29uJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25TaXplOiBbMTIsIDEyXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnc2VsZWN0ZWRJY29uJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgaHdtSWNvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGl2JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvblNpemU6IFsxNiwgMjBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdzdG5IV01JY29uJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgYmFyb0ljb246IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25TaXplOiBbMTYsIDIwXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnc3RuQmFyb1NlbnNvckljb24nXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBtZXRJY29uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogWzIwLCAyMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3N0bk1ldFNlbnNvckljb24nXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICByZGdJY29uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogWzIyLCAyMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3N0blJER1NlbnNvckljb24nXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBzdG9ybUljb246IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25TaXplOiBbMjAsIDIwXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnc3RuU3Rvcm1TZW5zb3JJY29uJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgd2F2ZUljb246IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25TaXplOiBbMjAsIDIwXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnc3RuV2F2ZVNlbnNvckljb24nXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBwcmVzc3VyZUljb246IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25TaXplOiBbMjAsIDIwXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnc3RuUHJlc3N1cmVTZW5zb3JJY29uJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgdGhlcm1JY29uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogWzE2LCAyMl0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3N0blRoZXJtU2Vuc29ySWNvbidcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHdlYmNhbUljb246IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25TaXplOiBbMjAsIDIwXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnc3RuV2ViY2FtU2Vuc29ySWNvbidcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHJhaW5nYWdlSWNvbjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGl2JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvblNpemU6IFsyMCwgMjBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdzdG5SYWluZ2FnZVNlbnNvckljb24nXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5wYXRoc09iaiA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjaXJjbGVNYXJrZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJjaXJjbGVNYXJrZXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOiAyMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2VpZ2h0OiAzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMDAwOTknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXRsbmdzOiB7fVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB2YXIgYWRkU2hhcGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhdGhzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhdGhzT2JqLmNpcmNsZU1hcmtlci5sYXRsbmdzID0geyBsYXQ6ICRzY29wZS50aGlzU2l0ZS5sYXRpdHVkZV9kZCwgbG5nOiAkc2NvcGUudGhpc1NpdGUubG9uZ2l0dWRlX2RkIH07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhdGhzLmNpcmNsZU1hcmtlciA9ICRzY29wZS5wYXRoc09iai5jaXJjbGVNYXJrZXI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgYWRkU2hhcGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmV4dGVuZCgkc2NvcGUsIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXBDZW50ZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiAkc2NvcGUudGhpc1NpdGUubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogJHNjb3BlLnRoaXNTaXRlLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgem9vbTogMTYsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pblpvb206IDE2XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBtYXJrZXJzOiAkc2NvcGUubWFya2VycyxcclxuICAgICAgICAgICAgICAgICAgICBtYXJrZXJzTGF0TG5nQXJyYXk6IFtdLCAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VsYXllcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvcG86IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIldvcmxkIFRvcG9ncmFwaGljXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZ3NCYXNlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6IFwiVG9wb2dyYXBoaWNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdmVybGF5czoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RuU2l0ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnbWFya2VyY2x1c3RlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1NUTiBTaXRlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7Ly9lbmQgYW5ndWxhciAkc2NvcGUuZXh0ZW5kIHN0YXRlbWVudFxyXG5cclxuICAgICAgICAgICAgICAgIHZhciBnZXRQcm94aW1pdHlTaXRlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBTSVRFLmdldFByb3hpbWl0eVNpdGVzKHsgTGF0aXR1ZGU6ICRzY29wZS50aGlzU2l0ZS5sYXRpdHVkZV9kZCwgTG9uZ2l0dWRlOiAkc2NvcGUudGhpc1NpdGUubG9uZ2l0dWRlX2RkLCBCdWZmZXI6IDAuMDUgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNsb3NlU2l0ZXMgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY2xvc2VTaXRlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAkc2NvcGUuY2xvc2VTaXRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9ICRzY29wZS5jbG9zZVNpdGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYS5zaXRlX2lkICE9PSAkc2NvcGUudGhpc1NpdGUuc2l0ZV9pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6ICdzdG5TaXRlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJzxkaXY+PGI+TmVhcmJ5IFNpdGUgTmFtZTo8L2I+ICcgKyBhLnNpdGVfbm8gKyAnPC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXQ6IGEubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG5nOiBhLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpY29ucy5zdG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAvLyBnZXRQcm94aW1pdHlTaXRlcygpO1xyXG4gICAgICAgICAgICB9Ly9lbmQgaWYgYVNpdGUgIT09IHVuZGVmaW5lZFxyXG4gICAgICAgIH1dKTsvL2VuZCBjb250cm9sbGVyXHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFNUTkNvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NUTkNvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgU1ROQ29udHJvbGxlcnMuY29udHJvbGxlcignc2l0ZUN0cmwnLCBbJyRzY29wZScsICckc3RhdGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckbG9jYXRpb24nLCAnJGh0dHAnLCAnJHVpYk1vZGFsJywgJyRmaWx0ZXInLCAndGhpc1NpdGUnLCAnbGF0bG9uZycsICd0aGlzU2l0ZU5ldHdvcmtOYW1lcycsICd0aGlzU2l0ZU5ldHdvcmtUeXBlcycsICd0aGlzU2l0ZUhvdXNpbmdzJyxcclxuICAgICAgICAnU0lURScsICdNRU1CRVInLCAnRklMRV9UWVBFJywgJ0FHRU5DWScsICdhbGxIb3JEYXR1bXMnLCAnYWxsSG9yQ29sbE1ldGhvZHMnLCAnYWxsU3RhdGVzJywgJ2FsbENvdW50aWVzJywgJ2FsbERlcGxveVByaW9yaXRpZXMnLCAnYWxsSG91c2luZ1R5cGVzJywgJ2FsbE5ldHdvcmtOYW1lcycsICdhbGxOZXR3b3JrVHlwZXMnLCAnYWxsRGVwbG95VHlwZXMnLCAnYWxsU2Vuc29yVHlwZXMnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRzdGF0ZSwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICRsb2NhdGlvbiwgJGh0dHAsICR1aWJNb2RhbCwgJGZpbHRlciwgdGhpc1NpdGUsIGxhdGxvbmcsIHRoaXNTaXRlTmV0d29ya05hbWVzLCB0aGlzU2l0ZU5ldHdvcmtUeXBlcywgdGhpc1NpdGVIb3VzaW5ncywgU0lURSwgTUVNQkVSLCBGSUxFX1RZUEUsIEFHRU5DWSwgYWxsSG9yRGF0dW1zLFxyXG4gICAgICAgICAgICBhbGxIb3JDb2xsTWV0aG9kcywgYWxsU3RhdGVzLCBhbGxDb3VudGllcywgYWxsRGVwbG95UHJpb3JpdGllcywgYWxsSG91c2luZ1R5cGVzLCBhbGxOZXR3b3JrTmFtZXMsIGFsbE5ldHdvcmtUeXBlcywgYWxsRGVwbG95VHlwZXMsIGFsbFNlbnNvclR5cGVzKSB7XHJcbiAgICAgICAgICAgIGlmICgkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IHVuZGVmaW5lZCB8fCAkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hdXRoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnRoaXNQYWdlID0gXCJTaXRlIERhc2hib2FyZFwiO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlID0ge307XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFwT3BlbjogZmFsc2UsIHNpdGVPcGVuOiB0cnVlLCBvcE9wZW46IGZhbHNlLCBzZW5zb3JPcGVuOiBmYWxzZSwgaHdtT3BlbjogZmFsc2UsIGZpbGVzT3BlbjogZmFsc2UsIHBlYWtPcGVuOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS50aGlzU2l0ZUhvdXNlVHlwZU1vZGVsID0gW107IC8vaG9sZGVyIGZvciB3aGVuIGFkZGluZyBob3VzaW5nIHR5cGUgdG8gcGFnZSBmcm9tIG11bHRpc2VsZWN0XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy9vcGVuIG1vZGFsIHRvIGVkaXQgb3IgY3JlYXRlIGEgc2l0ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm9wZW5TaXRlQ3JlYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSB0cnVlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZHJvcGRvd25QYXJ0cyA9W2FsbEhvckRhdHVtcywgYWxsSG9yQ29sbE1ldGhvZHMsIGFsbFN0YXRlcywgYWxsQ291bnRpZXMsIGFsbEhvdXNpbmdUeXBlcywgYWxsRGVwbG95UHJpb3JpdGllcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsTmV0d29ya05hbWVzLCBhbGxOZXR3b3JrVHlwZXMsIGFsbERlcGxveVR5cGVzLCBhbGxTZW5zb3JUeXBlc107XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNpdGVOTmFtZXNUb1Bhc3MgPVtdOyAvL21ha2Ugc3VyZSBvbmx5IHBhc3NpbmcgdG8gZWRpdCB0aG9zZSB0aGF0IGFyZSBvbiB0aGlzIHNpdGUgKGluIGNhc2UgdGhleSBlZGl0LCBzYXZlLCBlZGl0IGFnYWluKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuc2l0ZU5ldHdvcmtOYW1lcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGFOTiA9IDA7IGFOTiA8IGFsbE5ldHdvcmtOYW1lcy5sZW5ndGg7IGFOTisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIG5hbWUgbWF0Y2hlcyBhbnkgb2YgdGhlIG5hbWVzIGluICRzY29wZS5TaXRlTmV0d29ya05hbWVzLCBnZXQgdGhlIGZ1bGwgbmV0d29ya19uYW1lIHRvIHBhc3MgdG8gdGhlIG1vZGFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9ICRzY29wZS5zaXRlTmV0d29ya05hbWVzLm1hcChmdW5jdGlvbiAoZSkgeyByZXR1cm4gZTsgfSkuaW5kZXhPZihhbGxOZXR3b3JrTmFtZXNbYU5OXS5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpID4gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZU5OYW1lc1RvUGFzcy5wdXNoKGFsbE5ldHdvcmtOYW1lc1thTk5dKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2l0ZU5UeXBlc1RvUGFzcyA9IFtdOyAvL21ha2Ugc3VyZSBvbmx5IHBhc3NpbmcgdG8gZWRpdCB0aG9zZSB0aGF0IGFyZSBvbiB0aGlzIHNpdGUgKGluIGNhc2UgdGhleSBlZGl0LCBzYXZlLCBlZGl0IGFnYWluKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuc2l0ZU5ldHdvcmtUeXBlcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGFOVCA9IDA7IGFOVCA8IGFsbE5ldHdvcmtUeXBlcy5sZW5ndGg7IGFOVCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIG5hbWUgbWF0Y2hlcyBhbnkgb2YgdGhlIG5hbWVzIGluICRzY29wZS5TaXRlTmV0d29ya05hbWVzLCBnZXQgdGhlIGZ1bGwgbmV0d29ya19uYW1lIHRvIHBhc3MgdG8gdGhlIG1vZGFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9ICRzY29wZS5zaXRlTmV0d29ya1R5cGVzLm1hcChmdW5jdGlvbiAoZSkgeyByZXR1cm4gZTsgfSkuaW5kZXhPZihhbGxOZXR3b3JrVHlwZXNbYU5UXS5uZXR3b3JrX3R5cGVfbmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoYSA+IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVOVHlwZXNUb1Bhc3MucHVzaChhbGxOZXR3b3JrVHlwZXNbYU5UXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9tb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdTSVRFbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc2l0ZU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnbGcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Q2xhc3M6ICdyZXAtZGlhbG9nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxEcm9wRG93blBhcnRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkcm9wZG93blBhcnRzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1NpdGVTdHVmZjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFTaXRlLnNpdGVfaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWdTaXRlSG91c2VzID0gJHNjb3BlLm9yaWdpbmFsU2l0ZUhvdXNpbmdzICE9PSB1bmRlZmluZWQgPyAkc2NvcGUub3JpZ2luYWxTaXRlSG91c2luZ3MgOiBbXTsgLy9uZWVkZWQgZm9yIG11bHRpIHNlbGVjdCB0byBzZXQgcHJvcCBzZWxlY3RlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNIb3VzZVR5cGVNb2RlbCA9ICRzY29wZS50aGlzU2l0ZUhvdXNlVHlwZU1vZGVsLmxlbmd0aCA+IDAgPyAkc2NvcGUudGhpc1NpdGVIb3VzZVR5cGVNb2RlbCA6IFtdOyAvL2hlcmUncyB3aGF0IHRoZSBzaXRlIGFscmVhZHkgaGFzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc05ldE5hbWVzID0gc2l0ZU5OYW1lc1RvUGFzcy5sZW5ndGggPiAwID8gc2l0ZU5OYW1lc1RvUGFzcyA6IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNOZXRUeXBlcyA9IHNpdGVOVHlwZXNUb1Bhc3MubGVuZ3RoID4gMCA/IHNpdGVOVHlwZXNUb1Bhc3MgOiBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsbyA9ICRzY29wZS5sYW5kb3duZXIgIT09IHVuZGVmaW5lZCA/ICRzY29wZS5sYW5kb3duZXIgOiB7IH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2l0ZVJlbGF0ZWRTdHVmZiA9IFskc2NvcGUuYVNpdGUsIG9yaWdTaXRlSG91c2VzLCBzSG91c2VUeXBlTW9kZWwsIHNOZXROYW1lcywgc05ldFR5cGVzLCBsb107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzaXRlUmVsYXRlZFN0dWZmO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlVHlwZXM6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRklMRV9UWVBFLmdldEFsbCgpLiRwcm9taXNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsTWVtYmVyczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1FTUJFUi5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnZW5jeUxpc3Q6IGZ1bmN0aW9uKCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gQUdFTkNZLmdldEFsbCgpLiRwcm9taXNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0bG9uZzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF0bG9uZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbGF0bG9uZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHIgIT09ICdEZWxldGVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlID0gclswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldExhbmRPd25lckNvbnRhY3QoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5Ib3Jpem9udGFsRGF0dW0gPSAkc2NvcGUuYVNpdGUuaGRhdHVtX2lkID4gMCA/IGFsbEhvckRhdHVtcy5maWx0ZXIoZnVuY3Rpb24gKGhkKSB7IHJldHVybiBoZC5kYXR1bV9pZCA9PSAkc2NvcGUuYVNpdGUuaGRhdHVtX2lkOyB9KVswXS5kYXR1bV9uYW1lIDogXCItLS1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5Ib3Jpem9udGFsQ29sbGVjdE1ldGhvZCA9ICRzY29wZS5hU2l0ZS5oY29sbGVjdF9tZXRob2RfaWQgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuYVNpdGUuaGNvbGxlY3RfbWV0aG9kX2lkID4gMCA/IGFsbEhvckNvbGxNZXRob2RzLmZpbHRlcihmdW5jdGlvbiAoaGMpIHsgcmV0dXJuIGhjLmhjb2xsZWN0X21ldGhvZF9pZCA9PSAkc2NvcGUuYVNpdGUuaGNvbGxlY3RfbWV0aG9kX2lkOyB9KVswXS5oY29sbGVjdF9tZXRob2QgOiBcIi0tLVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLlByaW9yaXR5TmFtZSA9ICRzY29wZS5hU2l0ZS5wcmlvcml0eV9pZCAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5hU2l0ZS5wcmlvcml0eV9pZCA+IDAgPyBhbGxEZXBsb3lQcmlvcml0aWVzLmZpbHRlcihmdW5jdGlvbiAoZHApIHsgcmV0dXJuIGRwLnByaW9yaXR5X2lkID09ICRzY29wZS5hU2l0ZS5wcmlvcml0eV9pZDsgfSlbMF0ucHJpb3JpdHlfbmFtZSA6IFwiLS0tXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVOZXR3b3JrTmFtZXMgPSByWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVOZXR3b3JrVHlwZXMgPSByWzJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ21hcCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsgLy8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGlzIHRoaXMgY3JlYXRlIG5ldyBzaXRlIG9yIHZpZXcgZXhpc3Rpbmc/PyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXNTaXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyNyZWdpb24gZXhpc3RpbmdTaXRlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTaXRlLnNpdGVfaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUgPSB0aGlzU2l0ZTsgICAgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5kZWNEZWdPUmRtcyA9ICdkZCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5Ib3Jpem9udGFsRGF0dW0gPSAkc2NvcGUuYVNpdGUuaGRhdHVtX2lkID4gMCA/IGFsbEhvckRhdHVtcy5maWx0ZXIoZnVuY3Rpb24gKGhkKSB7IHJldHVybiBoZC5kYXR1bV9pZCA9PSAkc2NvcGUuYVNpdGUuaGRhdHVtX2lkOyB9KVswXS5kYXR1bV9uYW1lIDogXCItLS1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLkhvcml6b250YWxDb2xsZWN0TWV0aG9kID0gJHNjb3BlLmFTaXRlLmhjb2xsZWN0X21ldGhvZF9pZCAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5hU2l0ZS5oY29sbGVjdF9tZXRob2RfaWQgPiAwID8gYWxsSG9yQ29sbE1ldGhvZHMuZmlsdGVyKGZ1bmN0aW9uIChoYykgeyByZXR1cm4gaGMuaGNvbGxlY3RfbWV0aG9kX2lkID09ICRzY29wZS5hU2l0ZS5oY29sbGVjdF9tZXRob2RfaWQ7IH0pWzBdLmhjb2xsZWN0X21ldGhvZCA6IFwiLS0tXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5Qcmlvcml0eU5hbWUgPSAkc2NvcGUuYVNpdGUucHJpb3JpdHlfaWQgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuYVNpdGUucHJpb3JpdHlfaWQgPiAwID8gYWxsRGVwbG95UHJpb3JpdGllcy5maWx0ZXIoZnVuY3Rpb24gKGRwKSB7IHJldHVybiBkcC5wcmlvcml0eV9pZCA9PSAkc2NvcGUuYVNpdGUucHJpb3JpdHlfaWQ7IH0pWzBdLnByaW9yaXR5X25hbWU6IFwiLS0tXCI7XHJcbiAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9hcHBseSBhbnkgc2l0ZSBob3VzaW5nc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1NpdGVIb3VzaW5ncy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3JpZ2luYWxTaXRlSG91c2luZ3MgPSBhbmd1bGFyLmNvcHkodGhpc1NpdGVIb3VzaW5ncyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1NpdGVIb3VzZVRhYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZm9ybWF0IGZvciB0YWJsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeiA9IDA7IHogPCAkc2NvcGUub3JpZ2luYWxTaXRlSG91c2luZ3MubGVuZ3RoOyB6KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9mb3IgZWFjaCBob3VzaW5ndHlwZWxpc3QuLm1ha2Ugc2VsZWN0ZWQgPSB0cnVlIGZvciB0aGVzZSAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhvdXNlVHlwZU5hbWUgPSBhbGxIb3VzaW5nVHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7IHJldHVybiBoLmhvdXNpbmdfdHlwZV9pZCA9PSAkc2NvcGUub3JpZ2luYWxTaXRlSG91c2luZ3Nbel0uaG91c2luZ190eXBlX2lkOyB9KVswXS50eXBlX25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhvdXNlVCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZV9uYW1lOiBob3VzZVR5cGVOYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBob3VzaW5nX3R5cGVfaWQgOiAkc2NvcGUub3JpZ2luYWxTaXRlSG91c2luZ3Nbel0uaG91c2luZ190eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXRlX2hvdXNpbmdfaWQ6ICRzY29wZS5vcmlnaW5hbFNpdGVIb3VzaW5nc1t6XS5zaXRlX2hvdXNpbmdfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxlbmd0aDogJHNjb3BlLm9yaWdpbmFsU2l0ZUhvdXNpbmdzW3pdLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0ZXJpYWw6ICRzY29wZS5vcmlnaW5hbFNpdGVIb3VzaW5nc1t6XS5tYXRlcmlhbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm90ZXM6ICRzY29wZS5vcmlnaW5hbFNpdGVIb3VzaW5nc1t6XS5ub3RlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW1vdW50OiAkc2NvcGUub3JpZ2luYWxTaXRlSG91c2luZ3Nbel0uYW1vdW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudGhpc1NpdGVIb3VzZVR5cGVNb2RlbC5wdXNoKGhvdXNlVCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0vL2VuZCBpZiB0aGlzU2l0ZUhvdXNpbmdzICE9IHVuZGVmaW5lZFxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9hcHBseSBhbnkgc2l0ZSBuZXR3b3JrIG5hbWVzIG9yIHR5cGVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlTmV0d29ya05hbWVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzU2l0ZU5ldHdvcmtOYW1lcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhID0gMDsgYSA8IHRoaXNTaXRlTmV0d29ya05hbWVzLmxlbmd0aDsgYSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG5uID0gYWxsTmV0d29ya05hbWVzLmZpbHRlcihmdW5jdGlvbiAobikgeyByZXR1cm4gbi5uZXR3b3JrX25hbWVfaWQgPT0gdGhpc1NpdGVOZXR3b3JrTmFtZXNbYV0ubmV0d29ya19uYW1lX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZU5ldHdvcmtOYW1lcy5wdXNoKG5uLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYXBwbHkgYW55IHNpdGUgbmV0d29yayBuYW1lcyBvciB0eXBlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZU5ldHdvcmtUeXBlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1NpdGVOZXR3b3JrVHlwZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYiA9IDA7IGIgPCB0aGlzU2l0ZU5ldHdvcmtUeXBlcy5sZW5ndGg7IGIrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBudCA9IGFsbE5ldHdvcmtUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKG50KSB7IHJldHVybiBudC5uZXR3b3JrX3R5cGVfaWQgPT0gdGhpc1NpdGVOZXR3b3JrVHlwZXNbYl0ubmV0d29ya190eXBlX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZU5ldHdvcmtUeXBlcy5wdXNoKG50Lm5ldHdvcmtfdHlwZV9uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFTaXRlLnNlbnNvcl9ub3RfYXBwcm9wcmlhdGUgIT09IHVuZGVmaW5lZCB8fCAkc2NvcGUuYVNpdGUuc2Vuc29yX25vdF9hcHByb3ByaWF0ZSA+IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yTm90QXBwciA9IFwiWWVzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZW5zb3JOb3RBcHByID0gXCJOb1wiO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZ2V0IG1lbWJlciBuYW1lIGZvciBkaXNwbGF5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNpdGUubWVtYmVyX2lkICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLmFTaXRlLm1lbWJlcl9pZCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1FTUJFUi5xdWVyeSh7IGlkOiAkc2NvcGUuYVNpdGUubWVtYmVyX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLkNyZWF0b3IgPSByZXNwb25zZS5mbmFtZSArIFwiIFwiICsgcmVzcG9uc2UubG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuQ3JlYXRvciA9IFwiTm90IHJlY29yZGVkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlICRzY29wZS5hU2l0ZS5DcmVhdG9yID0gXCJOb3QgcmVjb3JkZWRcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZ2V0IHRoZSBsYW5kb3duZXJDT250YWN0IHdpdGggZ2V0Q3JlZHMgKGNhbGxlZCB3aGVuIGNvbWluZyBiYWNrIGZyb20gbW9kYWwgdG9vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnZXRMYW5kT3duZXJDb250YWN0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU2l0ZS5sYW5kb3duZXJjb250YWN0X2lkICE9PSBudWxsICYmICRzY29wZS5hU2l0ZS5sYW5kb3duZXJjb250YWN0X2lkICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLmFTaXRlLmxhbmRvd25lcmNvbnRhY3RfaWQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTSVRFLmdldFNpdGVMYW5kT3duZXIoeyBpZDogJHNjb3BlLmFTaXRlLnNpdGVfaWQgfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGFuZG93bmVyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRMYW5kb3duZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3IgZ2V0dGluZyBMYW5kb3duZXIgSW5mb3JtYXRpb246IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0vL2VuZCBpZiBzaXRlIGhhcyBsYW5kb3duZXJjb250YWN0IGlkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TGFuZE93bmVyQ29udGFjdCgpOyAvL2NhbGwgaXQgZnJvbSBoZXJlIGFuZCBmcm9tIG1vZGFscmVzcG9uc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2l0ZSAhPSB1bmRlZmluZWQgYnV0IHRoZSBzaXRlLnNpdGVfaWQgaXMgPT0gdGhpcyBzaXRlIGRvZXNuJ3QgZXhpc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiVGhpcyBzaXRlIGRvZXMgbm90IGV4aXN0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL0hvbWUnKS5yZXBsYWNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBseTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBleGlzdGluZ1NpdGVcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9vcGVuIG1vZGFsIGlmIG5ldyBzaXRlIGZvciBjcmVhdGVcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3BlblNpdGVDcmVhdGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfS8vZW5kIGVsc2UgY2hlY2tDcmVkcyBpcyBnb29kXHJcbiAgICAgICAgfV0pOyAgICBcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgLyogY29udHJvbGxlcnMuanMsICdsZWFmbGV0LWRpcmVjdGl2ZScndWkudW5pcXVlJywnbmdUYWdzSW5wdXQnLCovXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFNUTkNvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NUTkNvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgU1ROQ29udHJvbGxlcnMuY29udHJvbGxlcigncXVpY2tDcmVhdGVDdHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckbG9jYXRpb24nLCAnJHN0YXRlJywgJyRodHRwJywgJyR1aWJNb2RhbCcsICckZmlsdGVyJywgJyRzY2UnLCAnd2hpY2hRdWljaycsICdhbGxIb3JEYXR1bXMnLFxyXG4gICAgICAgICdhbGxIb3JDb2xsTWV0aG9kcycsICdhbGxTdGF0ZXMnLCAnYWxsQ291bnRpZXMnLCAnYWxsT1BUeXBlcycsICdhbGxWZXJ0RGF0dW1zJywgJ2FsbFZlcnRDb2xNZXRob2RzJywgJ2FsbE9QUXVhbGl0aWVzJywgJ2FsbEhXTVR5cGVzJywgJ2FsbEhXTVF1YWxpdGllcycsICdhbGxNYXJrZXJzJyxcclxuICAgICAgICAnYWxsRXZlbnRzJywgJ2FsbFNlbnNvclR5cGVzJywgJ2FsbFNlbnNvckJyYW5kcycsICdhbGxEZXBsb3lUeXBlcycsICdhbGxIb3VzaW5nVHlwZXMnLCAnU0lURScsICdPQkpFQ1RJVkVfUE9JTlQnLCAnSFdNJywgJ01FTUJFUicsICdJTlNUUlVNRU5UJywgJ0lOU1RSVU1FTlRfU1RBVFVTJywgJ09QX01FQVNVUkUnLCAnT1BfQ09OVFJPTF9JREVOVElGSUVSJywgJ0dFT0NPREUnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRjb29raWVzLCAkbG9jYXRpb24sICRzdGF0ZSwgJGh0dHAsICR1aWJNb2RhbCwgJGZpbHRlciwgJHNjZSwgd2hpY2hRdWljaywgYWxsSG9yRGF0dW1zLCBhbGxIb3JDb2xsTWV0aG9kcywgYWxsU3RhdGVzLCBhbGxDb3VudGllcywgYWxsT1BUeXBlcyxcclxuICAgICAgICAgICAgYWxsVmVydERhdHVtcywgYWxsVmVydENvbE1ldGhvZHMsIGFsbE9QUXVhbGl0aWVzLCBhbGxIV01UeXBlcywgYWxsSFdNUXVhbGl0aWVzLCBhbGxNYXJrZXJzLCBhbGxFdmVudHMsIGFsbFNlbnNvclR5cGVzLCBhbGxTZW5zb3JCcmFuZHMsIGFsbERlcGxveVR5cGVzLCBhbGxIb3VzaW5nVHlwZXMsIFxyXG4gICAgICAgICAgICBTSVRFLCBPQkpFQ1RJVkVfUE9JTlQsIEhXTSwgTUVNQkVSLCBJTlNUUlVNRU5ULCBJTlNUUlVNRU5UX1NUQVRVUywgT1BfTUVBU1VSRSwgT1BfQ09OVFJPTF9JREVOVElGSUVSLCBHRU9DT0RFKSB7XHJcbiAgICAgICAgICAgIGlmICgkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IHVuZGVmaW5lZCB8fCAkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hdXRoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvL2dsb2JhbCB2YXJzXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQ3JlYXRlV2hhdCA9IHdoaWNoUXVpY2s7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaHRtbERlc2NyaXB0aW9uVGlwID0gJHNjZS50cnVzdEFzSHRtbCgnUmVxdWlyZWQgYnkgTldJUy4gQ2FuIGJlIGxpc3RlZCBhcyA8ZW0+XFwndW5rbm93blxcJzwvZW0+IG9yIDxlbT5cXCdBdGxhbnRpYyBPY2VhblxcJzwvZW0+Jyk7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICBNRU1CRVIucXVlcnkoeyBpZDogJGNvb2tpZXMuZ2V0KCdtSUQnKSB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sb2dnZWRJbk1lbWJlciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnRoaXNQYWdlID0gXCJRdWlja1wiICsgd2hpY2hRdWljaztcclxuICAgICAgICAgICAgICAgICRzY29wZS5xdWlja0Zvcm0gPSB7fTsgLy9mb3JtcyB3aXRoaW4gdGhlIGFjY29yZGlvbiAuU2l0ZSwgLk9QLCAuSFdNXHJcbiAgICAgICAgICAgICAgICAvL2NhbGxlZCBhIGZldyB0aW1lcyB0byBmb3JtYXQganVzdCB0aGUgZGF0ZSAobm8gdGltZSlcclxuICAgICAgICAgICAgICAgIHZhciBtYWtlQWRhdGUgPSBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQgIT09IFwiXCIgJiYgZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcHJvdmlkZWQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhRGF0ZSA9IG5ldyBEYXRlKGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHllYXIgPSBhRGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb250aCA9IGFEYXRlLmdldE1vbnRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRheSA9ICgnMCcgKyBhRGF0ZS5nZXREYXRlKCkpLnNsaWNlKC0yKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9udGhOYW1lcyA9IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZVdPdGltZSA9IG5ldyBEYXRlKG1vbnRoTmFtZXNbbW9udGhdICsgXCIgXCIgKyBkYXkgKyBcIiwgXCIgKyB5ZWFyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZVdPdGltZTtcclxuICAgICAgICAgICAgICAgIH07Ly9lbmQgbWFrZUFkYXRlKClcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWNEZWdPUmRtcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkV2ZW50TmFtZSA9ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50TmFtZScpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlID0geyBtZW1iZXJfaWQ6ICRjb29raWVzLmdldCgnbUlEJykgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hT1AgPSB7ZGF0ZV9lc3RhYmxpc2hlZDogbWFrZUFkYXRlKFwiXCIpfTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHsgc2l0ZU9wZW46IHRydWUsIG9wT3BlbjogZmFsc2UsIGh3bU9wZW46IGZhbHNlIH07IC8vYWNjb3JkaW9uIGZvciBwYXJ0c1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlbW92ZU9QQ2FycmF5ID0gW107IC8vaG9sZGVyIGlmIHRoZXkgcmVtb3ZlIGFueSBPUCBjb250cm9sc1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZGVkSWRlbnRpZmllcnMgPSBbXTsgLy9ob2xkZXIgZm9yIGFkZGVkIElkZW50aWZpZXJzXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0NvbnRyb2xJRGlucHV0ID0gZmFsc2U7IC8vaW5pdGlhbGx5IGhpZGUgdGhlIGFyZWEgY29udGFpbmluZyBhZGRlZCBjb250cm9sIElkZW50aWZpZXJzXHJcblxyXG4gICAgICAgICAgICAgICAgLy9kcm9wZG93bnNcclxuICAgICAgICAgICAgICAgICRzY29wZS5ob3JEYXR1bUxpc3QgPSBhbGxIb3JEYXR1bXM7ICRzY29wZS5ob3JDb2xsTWV0aG9kTGlzdCA9IGFsbEhvckNvbGxNZXRob2RzO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRlTGlzdCA9IGFsbFN0YXRlczsgJHNjb3BlLmFsbENvdW50eUxpc3QgPSBhbGxDb3VudGllczsgJHNjb3BlLnN0YXRlQ291bnR5TGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm9wVHlwZUxpc3QgPSBhbGxPUFR5cGVzOyAkc2NvcGUudmVydERhdHVtTGlzdCA9IGFsbFZlcnREYXR1bXM7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudmVydENvbGxNZXRob2RMaXN0ID0gYWxsVmVydENvbE1ldGhvZHM7ICRzY29wZS5vcFF1YWxMaXN0ID0gYWxsT1BRdWFsaXRpZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9od20gZHJvcGRvd25zXHJcbiAgICAgICAgICAgICAgICBpZiAod2hpY2hRdWljayA9PSAnSFdNJykge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNID0geyBod21fbGFiZWw6ICdod20tMScsIGh3bV9lbnZpcm9ubWVudDogJ1JpdmVyaW5lJywgZXZlbnRfaWQ6ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSwgYmFuazogJ04vQScsIGZsYWdfZGF0ZTogbWFrZUFkYXRlKFwiXCIpLCBzdGlsbHdhdGVyOiAwLCBmbGFnX21lbWJlcl9pZDogJGNvb2tpZXMuZ2V0KCdtSUQnKSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5od21UeXBlTGlzdCA9IGFsbEhXTVR5cGVzOyAkc2NvcGUuaHdtUXVhbExpc3QgPSBhbGxIV01RdWFsaXRpZXM7ICRzY29wZS5tYXJrZXJMaXN0ID0gYWxsTWFya2VycztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vc2Vuc29yIGRyb3Bkb3duc1xyXG4gICAgICAgICAgICAgICAgaWYgKHdoaWNoUXVpY2sgPT0gJ1NlbnNvcicpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZ2V0VGltZVpvbmVTdGFtcCA9IGZ1bmN0aW9uIChkc2VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VuZFRoaXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZHNlbnQgIT09IHVuZGVmaW5lZCkgZCA9IG5ldyBEYXRlKGRzZW50KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSBkID0gbmV3IERhdGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSAoZC50b1N0cmluZygpKS5zdWJzdHJpbmcoMzUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgem9uZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAob2Zmc2V0LnN1YnN0cigwLCAzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkNlblwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvbmUgPSAnQ1NUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJFYXNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b25lID0gJ0VTVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiTW91XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgem9uZSA9ICdNU1QnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlBhY1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvbmUgPSAnUFNUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5kVGhpcyA9IFtkLCB6b25lXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbmRUaGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFR5cGVMaXN0ID0gYWxsRGVwbG95VHlwZXM7IC8vZ2V0IGZyZXNoIHZlcnNpb24gc28gbm90IG1lc3NlZCB1cCB3aXRoIHRoZSBUZW1wZXJhdHVyZSB0d2ljZVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ob3VzZVR5cGVMaXN0ID0gYWxsSG91c2luZ1R5cGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50aW1lWm9uZUxpc3QgPSBbJ1VUQycsICdQU1QnLCAnTVNUJywgJ0NTVCcsICdFU1QnXTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNvciA9IHsgZXZlbnRfaWQ6ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSwgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zU3RhdHVzID0geyBzdGF0dXNfdHlwZV9pZDogMSwgbWVtYmVyX2lkOiAkY29va2llcy5nZXQoJ21JRCcpIH07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV2ZW50TGlzdCA9IGFsbEV2ZW50czsgJHNjb3BlLnNlbnNvclR5cGVMaXN0ID0gYWxsU2Vuc29yVHlwZXM7ICRzY29wZS5zZW5zb3JCcmFuZExpc3QgPSBhbGxTZW5zb3JCcmFuZHM7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkludGVydmFsVHlwZSA9IHsgdHlwZTogJ1NlY29uZHMnIH07IC8vZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAgICAgIC8vZGlzcGxheWluZyBkYXRlIC8gdGltZSBpdCB1c2VyJ3MgdGltZXpvbmVcclxuICAgICAgICAgICAgICAgICAgICB2YXIgRGVwdGltZVBhcnRzID0gZ2V0VGltZVpvbmVTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc1N0YXR1cy50aW1lX3N0YW1wID0gRGVwdGltZVBhcnRzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc1N0YXR1cy50aW1lX3pvbmUgPSBEZXB0aW1lUGFydHNbMV07IC8vd2lsbCBiZSBjb252ZXJ0ZWQgdG8gdXRjIG9uIHBvc3QvcHV0XHJcbiAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUuRGVwbG95ZXIgPSAkc2NvcGUubG9nZ2VkSW5NZW1iZXI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vZ2V0IGRlcGxveW1lbnQgdHlwZXMgZm9yIHNlbnNvciB0eXBlIGNob3NlblxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5nZXREZXBUeXBlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbHRlcmVkRGVwbG95bWVudFR5cGVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaGluZ1NlbnNEZXBsaXN0ID0gYWxsU2Vuc29yVHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChzZCkgeyByZXR1cm4gc2Quc2Vuc29yX3R5cGVfaWQgPT0gJHNjb3BlLmFTZW5zb3Iuc2Vuc29yX3R5cGVfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RoaXMgaXMgMSBzZW5zb3JUeXBlIHdpdGggaW5uZXIgbGlzdCBvZiAgLmRlcGxveW1lbnR0eXBlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmlsdGVyZWREZXBsb3ltZW50VHlwZXMgPSBtYXRjaGluZ1NlbnNEZXBsaXN0LmRlcGxveW1lbnR0eXBlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5maWx0ZXJlZERlcGxveW1lbnRUeXBlcy5sZW5ndGggPT0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc29yLmRlcGxveW1lbnRfdHlwZV9pZCA9ICRzY29wZS5maWx0ZXJlZERlcGxveW1lbnRUeXBlc1swXS5kZXBsb3ltZW50X3R5cGVfaWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy9kZWZhdWx0IHJhZGlvc1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkZUb3JNRVRFUiA9ICdmdCc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuRlRvckNNID0gJ2Z0JztcclxuXHJcbiAgICAgICAgICAgICAgICAvL3dhbnQgdG8gYWRkIE9QIGlkZW50aWZpZXJcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGROZXdJZGVudGlmaWVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRlZElkZW50aWZpZXJzLnB1c2goeyBpZGVudGlmaWVyOiBcIlwiLCBpZGVudGlmaWVyX3R5cGU6IFwiXCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dDb250cm9sSURpbnB1dCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9Oy8vZW5kIGFkZE5ld0lkZW50aWZpZXIgZm9yIE9QXHJcblxyXG4gICAgICAgICAgICAgICAgLy9pcyBpdCBVVEMgb3IgbG9jYWwgdGltZS4ubWFrZSBzdXJlIGl0IHN0YXlzIFVUQ1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlYWxXaXRoVGltZVN0YW1wYjRTZW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgYW5kIHNlZSBpZiB0aGV5IGFyZSBub3QgdXNpbmcgVVRDXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU2Vuc1N0YXR1cy50aW1lX3pvbmUgIT0gXCJVVENcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnZlcnQgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHV0Y0RhdGVUaW1lID0gbmV3IERhdGUoJHNjb3BlLmFTZW5zU3RhdHVzLnRpbWVfc3RhbXApLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc1N0YXR1cy50aW1lX3N0YW1wID0gdXRjRGF0ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc1N0YXR1cy50aW1lX3pvbmUgPSAnVVRDJztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSAnR01UJyBpcyB0YWNrZWQgb24gc28gaXQgZG9lc24ndCB0cnkgdG8gYWRkIGhycyB0byBtYWtlIHRoZSBhbHJlYWR5IHV0YyBhIHV0YyBpbiBkYlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaSA9ICRzY29wZS5hU2Vuc1N0YXR1cy50aW1lX3N0YW1wLnRvU3RyaW5nKCkuaW5kZXhPZignR01UJykgKyAzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMudGltZV9zdGFtcCA9ICRzY29wZS5hU2Vuc1N0YXR1cy50aW1lX3N0YW1wLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIERhdGVwaWNrZXJcclxuICAgICAgICAgICAgICAgICRzY29wZS5kYXRlcGlja3JzID0ge307XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUub3BlbiA9IGZ1bmN0aW9uICgkZXZlbnQsIHdoaWNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tyc1t3aGljaF0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBsYXQvbG9uZyBzdHVmZlxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWNEZWdPUmRtcy52YWwgPSAnZGQnO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkRNUyA9IHt9OyAvL2hvbGRlciBvZiBkZWcgbWluIHNlYyB2YWx1ZXNcclxuXHJcbiAgICAgICAgICAgICAgICAvL2NvbnZlcnQgZGVnIG1pbiBzZWMgdG8gZGVjIGRlZ3JlZXNcclxuICAgICAgICAgICAgICAgIHZhciBhemltdXRoID0gZnVuY3Rpb24gKGRlZywgbWluLCBzZWMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXppID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVnIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvbmdpdHVkZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhemkgPSAtMS4wICogZGVnICsgMS4wICogbWluIC8gNjAuMCArIDEuMCAqIHNlYyAvIDM2MDAuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgtMS4wICogYXppKS50b0ZpeGVkKDUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXppID0gMS4wICogZGVnICsgMS4wICogbWluIC8gNjAuMCArIDEuMCAqIHNlYyAvIDM2MDAuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChhemkpLnRvRml4ZWQoNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2NvbnZlcnQgZGVjIGRlZ3JlZXMgdG8gZG1zXHJcbiAgICAgICAgICAgICAgICB2YXIgZGVnX3RvX2RtcyA9IGZ1bmN0aW9uIChkZWcpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVnIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWcgPSBkZWcudG9TdHJpbmcoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbG9uZ2l0dWRlLCByZW1vdmUgdGhlIC0gc2lnblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWcgPSBkZWcuc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IE1hdGguZmxvb3IoZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWluZmxvYXQgPSAoZGVnIC0gZCkgKiA2MDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbSA9IE1hdGguZmxvb3IobWluZmxvYXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gKChtaW5mbG9hdCAtIG0pICogNjApLnRvRml4ZWQoMyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCJcIiArIGQgKyBcIjpcIiArIG0gKyBcIjpcIiArIHMpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3RoZXkgY2hhbmdlZCByYWRpbyBidXR0b24gZm9yIGRtcyBkZWMgZGVnXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubGF0TG9uZ0NoYW5nZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmRlY0RlZ09SZG1zLnZhbCA9PSBcImRkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGV5IGNsaWNrZWQgRGVjIERlZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoJHNjb3BlLkRNUy5MQURlZyAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5ETVMuTEFNaW4gIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuRE1TLkxBU2VjICE9PSB1bmRlZmluZWQpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPRGVnICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLkRNUy5MT01pbiAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5ETVMuTE9TZWMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb252ZXJ0IHdoYXQncyBoZXJlIGZvciBlYWNoIGxhdCBhbmQgbG9uZyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MQURlZywgJHNjb3BlLkRNUy5MQU1pbiwgJHNjb3BlLkRNUy5MQVNlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxPRGVnLCAkc2NvcGUuRE1TLkxPTWluLCAkc2NvcGUuRE1TLkxPU2VjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2hvdyBtb2RhbCB0ZWxsaW5nIHRoZW0gdG8gcG9wdWxhdGUgYWxsIHRocmVlIChETVMpIGZvciBjb252ZXJzaW9uIHRvIHdvcmtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBETVNNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+UGxlYXNlIHBvcHVsYXRlIGFsbCB0aHJlZSBpbnB1dHMgZm9yIGNvbnZlcnNpb24gZnJvbSBETVMgdG8gRGVjaW1hbCBEZWdyZWVzIHRvIHdvcmsuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERNU01vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MQURlZyAhPT0gdW5kZWZpbmVkIHx8ICRzY29wZS5ETVMuTEFNaW4gIT09IHVuZGVmaW5lZCB8fCAkc2NvcGUuRE1TLkxBU2VjICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjTGFEZWdcIikuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MT0RlZyAhPT0gdW5kZWZpbmVkIHx8ICRzY29wZS5ETVMuTE9NaW4gIT09IHVuZGVmaW5lZCB8fCAkc2NvcGUuRE1TLkxPU2VjICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjTG9EZWdcIikuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVjRGVnT1JkbXMudmFsID0gXCJkbXNcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGV5IGNsaWNrZWQgZG1zIChjb252ZXJ0IGxhdC9sb25nIHRvIGRtcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGF0RE1TID0gKGRlZ190b19kbXMoJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkKSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYWRETVNhcnJheSA9IGxhdERNUy5zcGxpdCgnOicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MQURlZyA9IGxhZERNU2FycmF5WzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MQU1pbiA9IGxhZERNU2FycmF5WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MQVNlYyA9IGxhZERNU2FycmF5WzJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9uZ0RNUyA9IGRlZ190b19kbXMoJHNjb3BlLmFTaXRlLmxvbmdpdHVkZV9kZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9uZ0RNU2FycmF5ID0gbG9uZ0RNUy5zcGxpdCgnOicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MT0RlZyA9IGxvbmdETVNhcnJheVswXSAqIC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MT01pbiA9IGxvbmdETVNhcnJheVsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTE9TZWMgPSBsb25nRE1TYXJyYXlbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vbGF0IG1vZGFsIFxyXG4gICAgICAgICAgICAgICAgdmFyIG9wZW5MYXRNb2RhbCA9IGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhdE1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBMYXRpdHVkZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNzMuMDwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGxhdE1vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChmaWVsZEZvY3VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3ID09ICdsYXRsb25nJykgJChcIiNTSVRFX2xhdGl0dWRlX2RkXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgJChcIiNMYURlZ1wiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2xvbmcgbW9kYWxcclxuICAgICAgICAgICAgICAgIHZhciBvcGVuTG9uZ01vZGFsID0gZnVuY3Rpb24gKHcpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbG9uZ01vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBMb25naXR1ZGUgbXVzdCBiZSBiZXR3ZWVuIC0xNzUuMCBhbmQgLTYwLjA8L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBsb25nTW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGZpZWxkRm9jdXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHcgPT0gJ2xhdGxvbmcnKSAkKFwiI1NJVEVfbG9uZ2l0dWRlX2RkXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgJChcIiNMb0RlZ1wiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSBsYXQvbG9uZyBhcmUgcmlnaHQgbnVtYmVyIHJhbmdlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY2hlY2tWYWx1ZSA9IGZ1bmN0aW9uIChkLCBkaXJlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZCA9PSAnZG1zJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIHRoZSBkZWdyZWUgdmFsdWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PSAnbGF0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ETVMuTEFEZWcgPCAwIHx8ICRzY29wZS5ETVMuTEFEZWcgPiA3MyB8fCAoaXNOYU4oJHNjb3BlLkRNUy5MQURlZykgJiYgJHNjb3BlLkRNUy5MQURlZyAhPT0gdW5kZWZpbmVkKSB8fCAoaXNOYU4oJHNjb3BlLkRNUy5MQU1pbikgJiYgJHNjb3BlLkRNUy5MQU1pbiAhPT0gdW5kZWZpbmVkKSB8fCAoaXNOYU4oJHNjb3BlLkRNUy5MQVNlYykgJiYgJHNjb3BlLkRNUy5MQVNlYyAhPT0gdW5kZWZpbmVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5MYXRNb2RhbCgnZG1zJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiBub3QgYSBudW1iZXIsIGNsZWFyIHRoZSBpbXB1dHMgdG8gdHJpZ2dlciB0aGUgdmFsaWRhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTigkc2NvcGUuRE1TLkxBRGVnKSkgJHNjb3BlLkRNUy5MQURlZyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oJHNjb3BlLkRNUy5MQU1pbikpICRzY29wZS5ETVMuTEFNaW4gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKCRzY29wZS5ETVMuTEFTZWMpKSAkc2NvcGUuRE1TLkxBU2VjID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT0gJ2xvbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MT0RlZyA8IC0xNzUgfHwgJHNjb3BlLkRNUy5MT0RlZyA+IC02MCB8fCAoaXNOYU4oJHNjb3BlLkRNUy5MT0RlZykgJiYgJHNjb3BlLkRNUy5MT0RlZyAhPT0gdW5kZWZpbmVkKSB8fCAoaXNOYU4oJHNjb3BlLkRNUy5MT01pbikgJiYgJHNjb3BlLkRNUy5MT01pbiAhPT0gdW5kZWZpbmVkKSB8fCAoaXNOYU4oJHNjb3BlLkRNUy5MT1NlYykgJiYgJHNjb3BlLkRNUy5MT1NlYyAhPT0gdW5kZWZpbmVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5Mb25nTW9kYWwoJ2RtcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgbm90IGEgbnVtYmVyLCBjbGVhciB0aGUgaW1wdXRzIHRvIHRyaWdnZXIgdGhlIHZhbGlkYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oJHNjb3BlLkRNUy5MT0RlZykpICRzY29wZS5ETVMuTE9EZWcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKCRzY29wZS5ETVMuTE9NaW4pKSAkc2NvcGUuRE1TLkxPTWluID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTigkc2NvcGUuRE1TLkxPU2VjKSkgJHNjb3BlLkRNUy5MT1NlYyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgdGhlIGxhdGl0dWRlL2xvbmdpdHVkZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGlyZWN0aW9uID09ICdsYXQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkIDwgMCB8fCAkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQgPiA3MyB8fCBpc05hTigkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkxhdE1vZGFsKCdsYXRsb25nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiBub3QgYSBudW1iZXIsIGNsZWFyIHRoZSBpbXB1dHMgdG8gdHJpZ2dlciB0aGUgdmFsaWRhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTigkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PSAnbG9uZycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkIDwgLTE3NSB8fCAkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkID4gLTYwIHx8IGlzTmFOKCRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkxvbmdNb2RhbCgnbGF0bG9uZycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgbm90IGEgbnVtYmVyLCBjbGVhciB0aGUgaW1wdXRzIHRvIHRyaWdnZXIgdGhlIHZhbGlkYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oJHNjb3BlLmFTaXRlLmxvbmdpdHVkZV9kZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLmxvbmdpdHVkZV9kZCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vICBsYXQvbG9uZyA9aXMgbnVtYmVyXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNOdW0gPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoZUV2ZW50ID0gZXZ0IHx8IHdpbmRvdy5ldmVudDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gdGhlRXZlbnQua2V5Q29kZSB8fCB0aGVFdmVudC53aGljaDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ICE9IDQ2ICYmIGtleSAhPSA0NSAmJiBrZXkgPiAzMSAmJiAoa2V5IDwgNDggfHwga2V5ID4gNTcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoZUV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGVFdmVudC5wcmV2ZW50RGVmYXVsdCkgdGhlRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vZ2V0IGFkZHJlc3MgcGFydHMgYW5kIGV4aXN0aW5nIHNpdGVzIFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmdldEFkZHJlc3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jbGVhciB0aGVtIGFsbCBmaXJzdFxyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSAkc2NvcGUuYVNpdGUuYWRkcmVzczsgZGVsZXRlICRzY29wZS5hU2l0ZS5jaXR5OyBkZWxldGUgJHNjb3BlLmFTaXRlLnN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZUNvdW50eUxpc3QgPSBbXTsgZGVsZXRlICRzY29wZS5hU2l0ZS56aXA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ETVMuTEFEZWcgIT09IHVuZGVmaW5lZCkgJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxBRGVnLCAkc2NvcGUuRE1TLkxBTWluLCAkc2NvcGUuRE1TLkxBU2VjKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MT0RlZyAhPT0gdW5kZWZpbmVkKSAkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxPRGVnLCAkc2NvcGUuRE1TLkxPTWluLCAkc2NvcGUuRE1TLkxPU2VjKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLmFTaXRlLmxvbmdpdHVkZV9kZCAhPT0gdW5kZWZpbmVkICYmICFpc05hTigkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQpICYmICFpc05hTigkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gdHJ1ZTsgLy9sb2FkaW5nLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEdFT0NPREUuZ2V0QWRkcmVzc1BhcnRzKHsgTG9uZ2l0dWRlOiAkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkLCBMYXRpdHVkZTogJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkIH0sIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5yZXN1bHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5yZXN1bHQuZ2VvZ3JhcGhpZXMuQ291bnRpZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGVGSVBTID0gcmVzcG9uc2UucmVzdWx0Lmdlb2dyYXBoaWVzLkNvdW50aWVzWzBdLlNUQVRFO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY291bnR5TmFtZSA9IHJlc3BvbnNlLnJlc3VsdC5nZW9ncmFwaGllcy5Db3VudGllc1swXS5OQU1FO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc1N0YXRlSUQgPSAkc2NvcGUuYWxsQ291bnR5TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuc3RhdGVfZmlwID09IHN0YXRlRklQUzsgfSlbMF0uc3RhdGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzU3RhdGUgPSAkc2NvcGUuc3RhdGVMaXN0LmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcy5zdGF0ZV9pZCA9PSB0aGlzU3RhdGVJRDsgfSlbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1N0YXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5zdGF0ZSA9IHRoaXNTdGF0ZS5zdGF0ZV9hYmJyZXY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVDb3VudHlMaXN0ID0gJHNjb3BlLmFsbENvdW50eUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnN0YXRlX2lkID09IHRoaXNTdGF0ZS5zdGF0ZV9pZDsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuY291bnR5ID0gY291bnR5TmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiVGhlIExhdGl0dWRlL0xvbmdpdHVkZSBkaWQgbm90IHJldHVybiBhIHJlY29nbml6ZWQgc3RhdGUuIFBsZWFzZSBjaG9vc2Ugb25lIGZyb20gdGhlIGRyb3Bkb3duLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiTm8gbG9jYXRpb24gaW5mb3JtYXRpb24gY2FtZSBiYWNrIGZyb20gdGhhdCBsYXQvbG9uZ1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBnZXR0aW5nIGFkZHJlc3MuIENob29zZSBTdGF0ZSBhbmQgQ291bnR5IGZyb20gZHJvcGRvd25zLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3IgZ2V0dGluZyBhZGRyZXNzOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhleSBkaWQgbm90IHR5cGUgYSBsYXQvbG9uZyBmaXJzdC4uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbXB0eUxhdExvbmdNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlBsZWFzZSBwcm92aWRlIGEgTGF0aXR1ZGUgYW5kIExvbmdpdHVkZSBiZWZvcmUgY2xpY2tpbmcgVmVyaWZ5IExvY2F0aW9uPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9Oy8vZW5kIGdldEFkZHJlc3MoKVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBsYXQvbG9uZyBzdHVmZlxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vaHdtX3VuY2VydGFpbnR5IHR5cGVkIGluLCBjaG9vc2UgY29vcmVzcG9uZGluZyBod21fZW52aXJvbm1lbnRcclxuICAgICAgICAgICAgICAgICRzY29wZS5jaG9vc2VRdWFsaXR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUhXTS5od21fdW5jZXJ0YWludHkgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBOdW1iZXIoJHNjb3BlLmFIV00uaHdtX3VuY2VydGFpbnR5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgIEV4Y2VsbGVudCAgICArLTAuMDUgICAgICAgMCAgICAgIC0gIDAuMDUwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICBHb29kICAgICAgICAgKy0wLjEwICAgICAgIDAuMDUxICAtICAwLjEwMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgRmFpciAgICAgICAgICstMC4yMCAgICAgICAwLjEwMSAgLSAgMC4yMDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgIFBvb3IgICAgICAgICArLTAuNDAgICAgICAgMC4yMDEgIC0gIDAuNDAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICBWIFBvb3IgICAgICAgPiAwLjQwICAgICAgIDAuNDAxICAtICBpbmZpbml0eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5od21fcXVhbGl0eV9pZCA9ICRzY29wZS5od21RdWFsTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGgpIHsgcmV0dXJuIGgubWluX3JhbmdlIDw9IHggJiYgaC5tYXhfcmFuZ2UgPj0geDsgfSlbMF0uaHdtX3F1YWxpdHlfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vaHdtIHF1YWxpdHkgY2hvc2VuIChvciBpdCBjaGFuZ2VkIGZyb20gYWJvdmUpLCBjaGVjayB0byBtYWtlIHN1cmUgaXQgaXMgY29uZ3J1ZW50IHdpdGggaW5wdXQgYWJvdmVcclxuICAgICAgICAgICAgICAgICRzY29wZS5jb21wYXJlVG9VbmNlcnRhaW50eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFIV00uaHdtX3VuY2VydGFpbnR5ICE9PSBcIlwiICYmICRzY29wZS5hSFdNLmh3bV91bmNlcnRhaW50eSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB4ID0gTnVtYmVyKCRzY29wZS5hSFdNLmh3bV91bmNlcnRhaW50eSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaGluZ1F1YWxJZCA9ICRzY29wZS5od21RdWFsTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGgpIHsgcmV0dXJuIGgubWluX3JhbmdlIDw9IHggJiYgaC5tYXhfcmFuZ2UgPj0geDsgfSlbMF0uaHdtX3F1YWxpdHlfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUhXTS5od21fcXVhbGl0eV9pZCAhPT0gbWF0Y2hpbmdRdWFsSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2hvdyB3YXJuaW5nIG1vZGFsIGFuZCBmb2N1cyBpbiB1bmNlcnRhaW50eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluY29uZ3J1ZW50TW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5XYXJuaW5nPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+VGhlcmUgaXMgYSBtaXNtYXRjaCBiZXR3ZWVuIHRoZSBod20gcXVhbGl0eSBjaG9zZW4gYW5kIHRoZSBod20gdW5jZXJ0YWludHkgYWJvdmUuIFBsZWFzZSBjb3JyZWN0IHlvdXIgaHdtIHVuY2VydGFpbnR5LjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluY29uZ3J1ZW50TW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChcIltuYW1lPSdod21fdW5jZXJ0YWludHknXVwiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHdhdGNoIGZvciB0aGUgc2Vzc2lvbiBldmVudCB0byBjaGFuZ2UgYW5kIHVwZGF0ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudE5hbWUnKTsgfSwgZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlc3Npb25FdmVudE5hbWUgPSBuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkID8gbmV3VmFsdWUgOiBcIkFsbCBFdmVudHNcIjtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vzc2lvbkV2ZW50RXhpc3RzID0gJHNjb3BlLnNlc3Npb25FdmVudE5hbWUgIT0gXCJBbGwgRXZlbnRzXCIgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3doZW4gU0lURS5zdGF0ZSBjaGFuZ2VzLCB1cGRhdGUgY291bnR5IGxpc3RcclxuICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVDb3VudHlMaXN0ID0gZnVuY3Rpb24gKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc1N0YXRlID0gJHNjb3BlLnN0YXRlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHN0KSB7IHJldHVybiBzdC5zdGF0ZV9hYmJyZXYgPT0gczsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRlQ291bnR5TGlzdCA9ICRzY29wZS5hbGxDb3VudHlMaXN0LmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5zdGF0ZV9pZCA9PSB0aGlzU3RhdGUuc3RhdGVfaWQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgfTsvL2VuZCB1cGRhdGVDb3VudHlMaXN0KCkgZm9yIFNpdGVcclxuXHJcbiAgICAgICAgICAgICAgICAvL21ha2UgdW5jZXJ0YWludHkgY2xlYXJlZCBhbmQgZGlzYWJsZWQgd2hlbiAndW5xdWFudGlmaWVkJyBpcyBjaGVja2VkXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuVW5xdWFudENoZWNrZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hT1AudW5xdWFudGlmaWVkID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hT1AudW5jZXJ0YWludHkgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfTsvL2VuZCB1bnF1YW50Q2hlY2tlZCgpIGZvciBvcFxyXG5cclxuICAgICAgICAgICAgICAgIC8vanVzdCBuZWVkIGFuIE9CSkVDVElWRV9QT0lOVCBvYmplY3QgdG8gcG9zdC9wdXRcclxuICAgICAgICAgICAgICAgIHZhciB0cmltT1AgPSBmdW5jdGlvbiAob3ApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgT0JKX1BUID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RpdmVfcG9pbnRfaWQ6IG9wLm9iamVjdGl2ZV9wb2ludF9pZCAhPT0gdW5kZWZpbmVkID8gb3Aub2JqZWN0aXZlX3BvaW50X2lkIDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogb3AubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246IG9wLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGV2X2Z0OiBvcC5lbGV2X2Z0ICE9PSB1bmRlZmluZWQgPyBvcC5lbGV2X2Z0IDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZV9lc3RhYmxpc2hlZDogb3AuZGF0ZV9lc3RhYmxpc2hlZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BfaXNfZGVzdHJveWVkOiBvcC5vcF9pc19kZXN0cm95ZWQgIT09IHVuZGVmaW5lZCA/IG9wLm9wX2lzX2Rlc3Ryb3llZCA6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wX25vdGVzOiBvcC5vcF9ub3RlcyAhPT0gdW5kZWZpbmVkID8gb3Aub3Bfbm90ZXMgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXRlX2lkOiBvcC5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZGF0dW1faWQ6IG9wLnZkYXR1bV9pZCAhPT0gdW5kZWZpbmVkID8gb3AudmRhdHVtX2lkIDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGVfZGQ6IG9wLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGVfZGQ6IG9wLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGRhdHVtX2lkOiBvcC5oZGF0dW1faWQgIT09IHVuZGVmaW5lZCA/IG9wLmhkYXR1bV9pZCA6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhjb2xsZWN0X21ldGhvZF9pZDogb3AuaGNvbGxlY3RfbWV0aG9kX2lkICE9PSB1bmRlZmluZWQgPyBvcC5oY29sbGVjdF9tZXRob2RfaWQgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2Y29sbGVjdF9tZXRob2RfaWQ6IG9wLnZjb2xsZWN0X21ldGhvZF9pZCAhPT0gdW5kZWZpbmVkID8gb3AudmNvbGxlY3RfbWV0aG9kX2lkIDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BfdHlwZV9pZDogb3Aub3BfdHlwZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0ZV9yZWNvdmVyZWQ6IG9wLmRhdGVfcmVjb3ZlcmVkICE9PSB1bmRlZmluZWQgPyBvcC5kYXRlX3JlY292ZXJlZCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuY2VydGFpbnR5OiBvcC51bmNlcnRhaW50eSAhPT0gdW5kZWZpbmVkID8gb3AudW5jZXJ0YWludHkgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bnF1YW50aWZpZWQ6IG9wLnVucXVhbnRpZmllZCAhPT0gdW5kZWZpbmVkID8gb3AudW5xdWFudGlmaWVkIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BfcXVhbGl0eV9pZDogb3Aub3BfcXVhbGl0eV9pZCAhPT0gdW5kZWZpbmVkID8gb3Aub3BfcXVhbGl0eV9pZCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gT0JKX1BUO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL1ggd2FzIGNsaWNrZWQgbmV4dCB0byBleGlzdGluZyBDb250cm9sIElkZW50aWZpZXIgdG8gaGF2ZSBpdCByZW1vdmVkLCBzdG9yZSBpbiByZW1vdmUgYXJyYXkgZm9yIFNhdmUoKVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLlJlbW92ZUlEID0gZnVuY3Rpb24gKG9wQ29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vb25seSBhZGQgdG8gcmVtb3ZlIGxpc3QgaWYgaXQncyBhbiBleGlzdGluZyBvbmUgdG8gREVMRVRFXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAkc2NvcGUuYWRkZWRJZGVudGlmaWVycy5pbmRleE9mKG9wQ29udHJvbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wQ29udHJvbC5vcF9jb250cm9sX2lkZW50aWZpZXJfaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVtb3ZlT1BDYXJyYXkucHVzaChvcENvbnRyb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkZWRJZGVudGlmaWVycy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZGVkSWRlbnRpZmllcnMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy9maXggZGVmYXVsdCByYWRpb3MgYW5kIGxhdC9sb25nXHJcbiAgICAgICAgICAgICAgICB2YXIgZm9ybWF0RGVmYXVsdHMgPSBmdW5jdGlvbiAodGhlT1ApIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5PUC5GVG9yTUVURVIgbmVlZHMgdG8gYmUgJ2Z0Jy4gaWYgJ21ldGVyJyA9PWNvbnZlcnQgdmFsdWUgdG8gZnQgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoZU9QLkZUb3JNRVRFUiA9PSBcIm1ldGVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFPUC5GVG9yTUVURVIgPSAnZnQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYU9QLmVsZXZfZnQgPSAkc2NvcGUuYU9QLmVsZXZfZnQgKiAzLjI4MDg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLk9QLkZUb3JDTSBuZWVkcyB0byBiZSAnZnQnLiBpZiAnY20nID09Y29udmVydCB2YWx1ZSB0byBmdCBcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhlT1AuRlRvckNNID09IFwiY21cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYU9QLkZUb3JDTSA9ICdmdCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hT1AudW5jZXJ0YWludHkgPSAkc2NvcGUuYU9QLnVuY2VydGFpbnR5IC8gMzAuNDg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS50YXBlZG93biA9IHsgT3BlbjogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIC8vc2Vuc29yIHNlY3Rpb24sIGNsaWNrZWQgU2hvdy9IaWRlIFRhcGUgZG93biBpbmZvcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgdmFyIHNob3dOZWVkT1BmaXJzdE1vZGFsID0gZnVuY3Rpb24gKCkgeyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5lZWRPUE1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPk5vIERhdHVtIExvY2F0aW9uPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPkluIG9yZGVyIHRvIGFkZCB0YXBlIGRvd24gaW5mb3JtYXRpb24sIHBsZWFzZSBwb3B1bGF0ZSB0aGUgRGF0dW0gTG9jYXRpb24gc2VjdGlvbiBhYm92ZSBmaXJzdC48L3A+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPHA+VGhlIGZvbGxvd2luZyBmaWVsZHMgYXJlIHJlcXVpcmVkIGZvciB0aGUgdGFwZSBkb3duIHNlY3Rpb246IDxiPk5hbWU8L2I+LCA8Yj5FbGV2YXRpb248L2I+IGFuZCA8Yj5WZXJ0aWNhbCBEYXR1bTwvYj4uPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbmVlZE9QTW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudGFwZWRvd24uT3BlbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS50YXBlRG93blRhYmxlID0gW107IC8vaG9sZGVyIGZvciB0aGUgb3AgaWYgdGhleSBjaG9vc2UgaXQgZnJvbSB0aGUgZHJvcGRvd24gZm9yIHRhcGUgZG93blxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlbW92ZU9QID0gZnVuY3Rpb24gKCkgeyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy90aGV5IHVuY2hlY2tlZCB0aGUgb3AgdG8gcmVtb3ZlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlbW92ZU9QTWVhcyA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+UmVtb3ZlIE9QIE1lYXN1cmU8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+QXJlIHlvdSBzdXJlIHlvdSBkb25cXCd0IHdhbnQgdG8gYWRkIHRoaXMgT1AgTWVhc3VyZW1lbnQgdG8gdGhpcyBxdWljayBzZW5zb3I/PC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+WWVzPC9idXR0b24+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwiY2FuY2VsKClcIj5DYW5jZWw8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoJ3JlbW92ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZW1vdmVPUE1lYXMucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHllc09yTm8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHllc09yTm8gPT0gJ3JlbW92ZScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50YXBlZG93bi5PcGVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3JlbW92ZSBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRhcGVEb3duVGFibGUuc3BsaWNlKDAsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9Qc0ZvclRhcGVEb3duID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BNZWFzdXJlID0ge307ICRzY29wZS5hZGRUYXBlZG93biA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zU3RhdHVzLnNlbnNvcl9lbGV2YXRpb24gPSAnJzsgJHNjb3BlLmFTZW5zU3RhdHVzLndzX2VsZXZhdGlvbiA9ICcnOyAkc2NvcGUuYVNlbnNTdGF0dXMuZ3NfZWxldmF0aW9uID0gJyc7ICRzY29wZS5hU2Vuc1N0YXR1cy52ZGF0dW1faWQgPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGRUYXBlZG93biA9IGZhbHNlOyAvL3RvZ2dsZSB0YXBlZG93biBzZWN0aW9uICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk9Qc0ZvclRhcGVEb3duID0gW107IC8vd2lsbCBob2xkIE9QIHRoZXkgYWRkIGluIG9wIGFjY29yZGlvbi4uIGdldCB0aGlzIHdoZW4gdGhleSBjbGljayB0aGUgYnV0dG9uIGFuZCBzaG93IG1vZGFsIGlmIHRoZXkgaGF2ZW4ndCBwb3B1bGF0ZWQgaXQgeWV0LlxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dUYXBlZG93blBhcnQgPSBmdW5jdGlvbiAoKSB7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnRhcGVEb3duVGFibGUubGVuZ3RoIDwgMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RoZXkgYXJlIG9wZW5pbmcgdG8gYWRkIHRhcGUgZG93biBpbmZvcm1hdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFPUC5uYW1lICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLmFPUC5lbGV2X2Z0ICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLmFPUC52ZGF0dW1faWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QTWVhc3VyZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QTWVhc3VyZS5vcF9uYW1lID0gJHNjb3BlLmFPUC5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QTWVhc3VyZS5lbGV2YXRpb24gPSAkc2NvcGUuYU9QLmVsZXZfZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BNZWFzdXJlLlZkYXR1bSA9ICRzY29wZS52ZXJ0RGF0dW1MaXN0LmZpbHRlcihmdW5jdGlvbiAodmQpIHsgcmV0dXJuIHZkLmRhdHVtX2lkID09ICRzY29wZS5hT1AudmRhdHVtX2lkOyB9KVswXS5kYXR1bV9hYmJyZXZpYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudGFwZURvd25UYWJsZS5wdXNoKCRzY29wZS5PUE1lYXN1cmUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PUHNGb3JUYXBlRG93bi5wdXNoKCRzY29wZS5hT1ApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZFRhcGVkb3duID0gdHJ1ZTsgJHNjb3BlLnRhcGVkb3duLk9wZW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zU3RhdHVzLnZkYXR1bV9pZCA9ICRzY29wZS5hT1AudmRhdHVtX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd05lZWRPUGZpcnN0TW9kYWwoKTsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkVGFwZWRvd24gPSB0cnVlOyAkc2NvcGUudGFwZWRvd24uT3BlbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaXRlRXJyb3JzID0gZmFsc2U7ICRzY29wZS5vcEVycm9ycyA9IGZhbHNlOyAkc2NvcGUuaHdtRXJyb3JzID0gZmFsc2U7IFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNyZWF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gdHJ1ZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGhlRm9ybSA9ICRzY29wZS5xdWlja0Zvcm0ucXVpY2s7ICRzY29wZS5zaXRlRXJyb3JzID0gZmFsc2U7ICRzY29wZS5vcEVycm9ycyA9IGZhbHNlOyAkc2NvcGUuaHdtRXJyb3JzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoZUZvcm0uJHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2l0ZSBQT1NUXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkID09PSB1bmRlZmluZWQpICRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MQURlZywgJHNjb3BlLkRNUy5MQU1pbiwgJHNjb3BlLkRNUy5MQVNlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkID09PSB1bmRlZmluZWQpICRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTE9EZWcsICRzY29wZS5ETVMuTE9NaW4sICRzY29wZS5ETVMuTE9TZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlZFNpdGVJRCA9IDA7ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vUE9TVCBzaXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNJVEUuc2F2ZSgkc2NvcGUuYVNpdGUsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRTaXRlSUQgPSByZXNwb25zZS5zaXRlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFPUC5zaXRlX2lkID0gY3JlYXRlZFNpdGVJRDsgJHNjb3BlLmFPUC5sYXRpdHVkZV9kZCA9IHJlc3BvbnNlLmxhdGl0dWRlX2RkOyAkc2NvcGUuYU9QLmxvbmdpdHVkZV9kZCA9IHJlc3BvbnNlLmxvbmdpdHVkZV9kZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hT1AuaGRhdHVtX2lkID0gcmVzcG9uc2UuaGRhdHVtX2lkOyAkc2NvcGUuYU9QLmhjb2xsZWN0X21ldGhvZF9pZCA9IHJlc3BvbnNlLmhjb2xsZWN0X21ldGhvZF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuQ3JlYXRlV2hhdCA9PSAnSFdNJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLnNpdGVfaWQgPSBjcmVhdGVkU2l0ZUlEOyAkc2NvcGUuYUhXTS53YXRlcmJvZHkgPSByZXNwb25zZS53YXRlcmJvZHk7ICRzY29wZS5hSFdNLmxhdGl0dWRlX2RkID0gcmVzcG9uc2UubGF0aXR1ZGVfZGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00ubG9uZ2l0dWRlX2RkID0gcmVzcG9uc2UubG9uZ2l0dWRlX2RkOyAkc2NvcGUuYUhXTS5oY29sbGVjdF9tZXRob2RfaWQgPSByZXNwb25zZS5oY29sbGVjdF9tZXRob2RfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uaGRhdHVtX2lkID0gcmVzcG9uc2UuaGRhdHVtX2lkOyAkc2NvcGUuYUhXTS5mbGFnX21lbWJlcl9pZCA9IHJlc3BvbnNlLm1lbWJlcl9pZDsgJHNjb3BlLmFIV00uZXZlbnRfaWQgPSAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudElEJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL09QIHN0dWZmIFBPU1RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjcmVhdGVkT1AgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcG9zdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0RGVmYXVsdHMoJHNjb3BlLmFPUCk7IC8vJHNjb3BlLk9QLkZUb3JNRVRFUiwgRlRvckNNLCBkZWNEZWdPUmRtcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBPUHRvUE9TVCA9IHRyaW1PUCgkc2NvcGUuYU9QKTsgLy9tYWtlIGl0IGFuIE9CSkVDVElWRV9QT0lOVCBmb3Igc2F2aW5nXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT0JKRUNUSVZFX1BPSU5ULnNhdmUoT1B0b1BPU1QsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkT1AgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFkZGVkSWRlbnRpZmllcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3Bvc3QgZWFjaCBvbmUgVEhJUyBXSUxMIENIQU5HRSBTT09OIFRPIEhBVkUgb2JqZWN0aXZlX3BvaW50X2lkIGFscmVhZHkgYWRkZWQgYW5kIG5vdCBzZW50IGFsb25nIHdpdGggaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgb3BjID0gMDsgb3BjIDwgJHNjb3BlLmFkZGVkSWRlbnRpZmllcnMubGVuZ3RoOyBvcGMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNPUENvbnRyb2xJRCA9ICRzY29wZS5hZGRlZElkZW50aWZpZXJzW29wY107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzT1BDb250cm9sSUQub2JqZWN0aXZlX3BvaW50X2lkID0gcmVzcG9uc2Uub2JqZWN0aXZlX3BvaW50X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT1BfQ09OVFJPTF9JREVOVElGSUVSLnNhdmUodGhpc09QQ29udHJvbElEKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0hXTSBzdHVmZiBQT1NUIGlmIEhXTVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuQ3JlYXRlV2hhdCA9PSAnSFdNJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlZEhXTSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIHRoZXkgZW50ZXJlZCBhIHN1cnZleSBkYXRlIG9yIGVsZXZhdGlvbiwgdGhlbiBzZXQgc3VydmV5IG1lbWJlciBhcyB0aGUgZmxhZyBtZW1iZXIgKGZsYWdnaW5nIGFuZCBzdXJ2ZXlpbmcgYXQgc2FtZSB0aW1lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUhXTS5zdXJ2ZXlfZGF0ZSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uc3VydmV5X21lbWJlcl9pZCA9ICRzY29wZS5hSFdNLmZsYWdfbWVtYmVyX2lkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hSFdNLmVsZXZfZnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgdGhleSBhZGRlZCB0aGUgc3VydmV5IGRhdGUgaWYgdGhleSBhZGRlZCBhbiBlbGV2YXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUhXTS5zdXJ2ZXlfZGF0ZSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLnN1cnZleV9kYXRlID0gbWFrZUFkYXRlKFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLnN1cnZleV9tZW1iZXJfaWQgPSAkc2NvcGUuYUhXTS5mbGFnX21lbWJlcl9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIV00uc2F2ZSgkc2NvcGUuYUhXTSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiUXVpY2sgSFdNIGNyZWF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL1NpdGUvJyArIGNyZWF0ZWRTaXRlSUQgKyAnL1NpdGVEYXNoYm9hcmQnKS5yZXBsYWNlKCk7Ly8ubm90aWZ5KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBseTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgSFdNLnNhdmUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0vL2VuZCBIV00gY3JlYXRpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkNyZWF0ZVdoYXQgPT0gJ1NlbnNvcicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNyZWF0ZWRTZW5zb3IgPSB7fTsgdmFyIGRlcFNlblN0YXQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5JbnRlcnZhbFR5cGUudHlwZSA9PSBcIk1pbnV0ZXNcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc29yLmludGVydmFsID0gJHNjb3BlLmFTZW5zb3IuaW50ZXJ2YWwgKiA2MDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc29yLnNpdGVfaWQgPSBjcmVhdGVkU2l0ZUlEO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWFsV2l0aFRpbWVTdGFtcGI0U2VuZCgpOyAvL1VUQyBvciBsb2NhbD9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIElOU1RSVU1FTlQuc2F2ZSgkc2NvcGUuYVNlbnNvcikuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY3JlYXRlIGluc3RydW1lbnRzdGF0dXMgdG9vIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFNlbnNvciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zU3RhdHVzLmluc3RydW1lbnRfaWQgPSByZXNwb25zZS5pbnN0cnVtZW50X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSU5TVFJVTUVOVF9TVEFUVVMuc2F2ZSgkc2NvcGUuYVNlbnNTdGF0dXMpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHN0YXRSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYWRkZWQgdGFwZSBkb3ducz9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnRhcGVEb3duVGFibGUubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc1RhcGUgPSAkc2NvcGUudGFwZURvd25UYWJsZVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1RhcGUuaW5zdHJ1bWVudF9zdGF0dXNfaWQgPSBzdGF0UmVzcG9uc2UuaW5zdHJ1bWVudF9zdGF0dXNfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNUYXBlLm9iamVjdGl2ZV9wb2ludF9pZCA9IGNyZWF0ZWRPUC5vYmplY3RpdmVfcG9pbnRfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vL1BPU1QgSVQvLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT1BfTUVBU1VSRS5zYXZlKHRoaXNUYXBlKS4kcHJvbWlzZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJRdWljayBTZW5zb3IgY3JlYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9TaXRlLycgKyBjcmVhdGVkU2l0ZUlEICsgJy9TaXRlRGFzaGJvYXJkJykucmVwbGFjZSgpOy8vLm5vdGlmeShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFwcGx5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgSW5zdHJ1bWVudCBTdGF0dXMgc2F2ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBpbnN0cnVtZW50U2F2ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0vL2VuZCBpZiBzZW5zb3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIE9QLnNhdmUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBTSVRFLnNhdmUoKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMuc2l0ZU9wZW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzLm9wT3BlbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMuaHdtT3BlbiA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoXCJbbmFtZT0nXCIgKyB0aGVGb3JtLiRuYW1lICsgXCInXVwiKS5maW5kKCcubmctaW52YWxpZDp2aXNpYmxlOmZpcnN0JykuZm9jdXMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGVGb3JtLnNpdGVfZGVzY3JpcHRpb24uJGludmFsaWQgfHwgdGhlRm9ybS5sYXRpdHVkZV9kZC4kaW52YWxpZCB8fCB0aGVGb3JtLmxvbmdpdHVkZV9kZC4kaW52YWxpZCB8fCB0aGVGb3JtLmhkYXR1bV9pZC4kaW52YWxpZCB8fCB0aGVGb3JtLmhjb2xsZWN0X21ldGhvZF9pZC4kaW52YWxpZCB8fCB0aGVGb3JtLndhdGVyYm9keS4kaW52YWxpZCB8fCB0aGVGb3JtLnN0YXRlLiRpbnZhbGlkdiB8fCB0aGVGb3JtLmNvdW50eS4kaW52YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVFcnJvcnMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGVGb3JtLm9wX3R5cGVfaWQuJGludmFsaWQgfHwgdGhlRm9ybS5uYW1lLiRpbnZhbGlkIHx8IHRoZUZvcm0uZGVzY3JpcHRpb24uJGludmFsaWQgfHwgdGhlRm9ybS5kZS4kaW52YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9wRXJyb3JzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhlRm9ybS5od21fdHlwZV9pZC4kaW52YWxpZCB8fCB0aGVGb3JtLmh3bV9lbnZpcm9ubWVudC4kaW52YWxpZCB8fCB0aGVGb3JtLmh3bV9xdWFsaXR5X2lkLiRpbnZhbGlkIHx8IHRoZUZvcm0uZmQuJGludmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5od21FcnJvcnMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIlF1aWNrIEhXTSBub3QgY3JlYXRlZC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfS8vZW5kIGVsc2UgKGxvZ2dlZCBpbilcclxuICAgICAgICB9XSk7XHJcbiAgXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU2V0dGluZ3NDb250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTZXR0aW5nc0NvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgU2V0dGluZ3NDb250cm9sbGVycy5jb250cm9sbGVyKCdzZXR0aW5nc0N0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRjb29raWVzJywgJyRsb2NhdGlvbicsICckc3RhdGUnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRjb29raWVzLCAkbG9jYXRpb24sICRzdGF0ZSkge1xyXG4gICAgICAgICAgICBpZiAoJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSB1bmRlZmluZWQgfHwgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYXV0aCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS50aGlzUGFnZSA9IFwiU2V0dGluZ3NcIjtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuYWN0aXZlTWVudSA9IFwic2V0dGluZ3NcIjtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZXR0aW5ncyA9IFwiV2VsY29tZSB0byB0aGUgbmV3IFNUTiBTZXR0aW5ncyBQYWdlISFcIjtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jaGFuZ2VWaWV3ID0gZnVuY3Rpb24gKHZpZXcpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28odmlldyk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICB9XSk7XHJcblxyXG59KCkpO1xyXG4iLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwic2Vuc29yTW9kYWxDdHJsLmpzXCIgLz5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgTW9kYWxDb250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdNb2RhbENvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgLy9kZXBsb3kgbmV3IG9yIHByb3Bvc2VkIHNlbnNvciwgZWRpdCBkZXBsb3llZCBtb2RhbFxyXG4gICAgTW9kYWxDb250cm9sbGVycy5jb250cm9sbGVyKCdzZW5zb3JNb2RhbEN0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyR0aW1lb3V0JywgJyRjb29raWVzJywgJyRodHRwJywgJyRzY2UnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCAnJHVpYk1vZGFsJywgJ1NFUlZFUl9VUkwnLCdGSUxFX1NUQU1QJywgJ2FsbERyb3Bkb3ducycsICdhZ2VuY3lMaXN0JywgJ1NpdGVfRmlsZXMnLCAnYWxsRGVwVHlwZXMnLCAndGhpc1NlbnNvcicsICdTZW5zb3JTaXRlJywgJ3NpdGVPUHMnLCAnYWxsTWVtYmVycycsICdJTlNUUlVNRU5UJywgJ0lOU1RSVU1FTlRfU1RBVFVTJywgJ0RBVEFfRklMRScsICdGSUxFJywgJ1NPVVJDRScsJ09QX01FQVNVUkUnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICR0aW1lb3V0LCAkY29va2llcywgJGh0dHAsICRzY2UsICR1aWJNb2RhbEluc3RhbmNlLCAkdWliTW9kYWwsIFNFUlZFUl9VUkwsIEZJTEVfU1RBTVAsIGFsbERyb3Bkb3ducywgYWdlbmN5TGlzdCwgU2l0ZV9GaWxlcywgYWxsRGVwVHlwZXMsIHRoaXNTZW5zb3IsIFNlbnNvclNpdGUsIHNpdGVPUHMsIGFsbE1lbWJlcnMsIElOU1RSVU1FTlQsIElOU1RSVU1FTlRfU1RBVFVTLCBEQVRBX0ZJTEUsIEZJTEUsIFNPVVJDRSwgT1BfTUVBU1VSRSkge1xyXG4gICAgICAgICAgIC8vZHJvcGRvd25zIFswXWFsbFNlbnNvclR5cGVzLCBbMV1hbGxTZW5zb3JCcmFuZHMsIFsyXWFsbEhvdXNpbmdUeXBlcywgWzNdYWxsU2Vuc0RlcHMsIFs0XWFsbEV2ZW50cyAgICAgIFxyXG4gICAgICAgICAgICRzY29wZS5zZW5zb3JUeXBlTGlzdCA9IGFsbERyb3Bkb3duc1swXTtcclxuICAgICAgICAgICAkc2NvcGUuc2Vuc29yQnJhbmRMaXN0ID0gYWxsRHJvcGRvd25zWzFdO1xyXG4gICAgICAgICAgICRzY29wZS5ob3VzZVR5cGVMaXN0ID0gYWxsRHJvcGRvd25zWzJdO1xyXG4gICAgICAgICAgLy8gJHNjb3BlLnNlbnNvckRlcGxveUxpc3QgPSBhbGxEcm9wZG93bnNbM107XHJcbiAgICAgICAgICAgJHNjb3BlLmV2ZW50TGlzdCA9IGFsbERyb3Bkb3duc1szXTtcclxuICAgICAgICAgICAkc2NvcGUuZmlsZVR5cGVMaXN0ID0gYWxsRHJvcGRvd25zWzRdOyAvL3VzZWQgaWYgY3JlYXRpbmcvZWRpdGluZyBkZXBTZW5zIGZpbGVcclxuICAgICAgICAgICAkc2NvcGUudmVydERhdHVtTGlzdCA9IGFsbERyb3Bkb3duc1s1XTtcclxuICAgICAgICAgICAkc2NvcGUuZGVwU2VuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7IC8vTG9hZGluZy4uLlxyXG4gICAgICAgICAgICRzY29wZS5hbGxTRmlsZXMgPSBTaXRlX0ZpbGVzLmdldEFsbFNpdGVGaWxlcygpO1xyXG4gICAgICAgICAgICRzY29wZS5EZXBTZW5zb3JGaWxlcyA9IHRoaXNTZW5zb3IgIT09IFwiZW1wdHlcIiA/ICRzY29wZS5hbGxTRmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChzZikgeyByZXR1cm4gc2YuaW5zdHJ1bWVudF9pZCA9PSB0aGlzU2Vuc29yLmluc3RydW1lbnRfaWQ7IH0pIDogW107Ly8gaG9sZGVyIGZvciBod20gZmlsZXMgYWRkZWRcclxuICAgICAgICAgICAkc2NvcGUuZGVwU2Vuc0ltYWdlRmlsZXMgPSAkc2NvcGUuRGVwU2Vuc29yRmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChoZikgeyByZXR1cm4gaGYuZmlsZXR5cGVfaWQgPT09IDE7IH0pOyAvL2ltYWdlIGZpbGVzIGZvciBjYXJvdXNlbFxyXG4gICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgLy9oaWRkZW4gZm9ybSB0byBhZGQgZmlsZSB0byBod21cclxuICAgICAgICAgICAkc2NvcGUuc2hvd05XSVNGaWxlRm9ybSA9IGZhbHNlOyAvL2hpZGRlbiBmb3JtIHRvIGFkZCBud2lzIGZpbGUgdG8gc2Vuc29yXHJcbiAgICAgICAgICAgJHNjb3BlLk9Qc1ByZXNlbnQgPSBzaXRlT1BzLmxlbmd0aCA+IDAgPyB0cnVlIDogZmFsc2U7ICAgICAgICAgICBcclxuICAgICAgICAgICAkc2NvcGUuT1BzRm9yVGFwZURvd24gPSBzaXRlT1BzO1xyXG4gICAgICAgICAgICRzY29wZS5yZW1vdmVPUExpc3QgPSBbXTtcclxuICAgICAgICAgICAkc2NvcGUudGFwZURvd25UYWJsZSA9IFtdOyAvL2hvbGRlciBvZiB0YXBlZG93biBPUF9NRUFTVVJFTUVOVFNcclxuICAgICAgICAgICAkc2NvcGUuZGVwVHlwZUxpc3QgPSBhbGxEZXBUeXBlczsgLy9nZXQgZnJlc2ggdmVyc2lvbiBzbyBub3QgbWVzc2VkIHVwIHdpdGggdGhlIFRlbXBlcmF0dXJlIHR3aWNlXHJcbiAgICAgICAgICAgJHNjb3BlLmZpbHRlcmVkRGVwbG95bWVudFR5cGVzID0gW107XHJcbiAgICAgICAgICAgJHNjb3BlLnRpbWVab25lTGlzdCA9IFsnVVRDJywgJ1BTVCcsICdNU1QnLCAnQ1NUJywgJ0VTVCddO1xyXG4gICAgICAgICAgICRzY29wZS51c2VyUm9sZSA9ICRjb29raWVzLmdldCgndXNlcnNSb2xlJyk7XHJcbiAgICAgICAgICAgJHNjb3BlLnNob3dFdmVudEREID0gZmFsc2U7IC8vdG9nZ2xlIHRvIHNob3cvaGlkZSBldmVudCBkZCAoYWRtaW4gb25seSlcclxuICAgICAgICAgICAkc2NvcGUuYWRtaW5DaGFuZ2VkID0ge307IC8vd2lsbCBob2xkIGV2ZW50X2lkIGlmIGFkbWluIGNoYW5nZXMgaXQuIGFwcGx5IHdoZW4gUFVUdGluZ1xyXG4gICAgICAgICAgICRzY29wZS5JbnRlcnZhbFR5cGUgPSB7fTsgLy9ob2xkZXIgZm9yIG1pbnV0ZS9zZWNvbmQgcmFkaW8gYnV0dG9uc1xyXG4gICAgICAgICAgICRzY29wZS53aGljaEJ1dHRvbiA9IFwiXCI7IC8vaG9sZGVyIGZvciBzYXZlL2RlcGxveSBidXR0b24gYXQgZW5kIC4uICdkZXBsb3knIGlmIHByb3Bvc2VkLT5kZXBsb3llZCwgYW5kIGZvciBkZXBsb3lpbmcgbmV3IG9yIHNhdmUgaWYgZWRpdGluZyBleGlzdGluZ1xyXG4gICAgICAgICAgICRzY29wZS5zZXJ2ZXJVUkwgPSBTRVJWRVJfVVJMO1xyXG4gICAgICAgICAgICRzY29wZS5ud2lzSGVhZGVyVGlwID0gJHNjZS50cnVzdEFzSHRtbCgnQ29ubmVjdCB5b3VyIHRyYW5zbWl0dGluZyBzZW5zb3Igd2l0aCBOV0lTIHZpYSA8ZW0+U3RhdGlvbiBJRCBmb3IgVVNHUyBnYWdlPC9lbT4gZnJvbSB0aGUgU2l0ZSBkZXRhaWxzLicpO1xyXG4gICAgICAgICAgICRzY29wZS52aWV3ID0geyBERVB2YWw6ICdkZXRhaWwnLCBSRVR2YWw6ICdkZXRhaWwnIH07XHJcbiAgICAgICAgICAgJHNjb3BlLnNlbnNvckRhdGFOV0lTID0gZmFsc2U7IC8vaXMgdGhpcyBhIHJhaW4gZ2FnZSwgbWV0IHN0YXRpb24sIG9yIHJkZyBzZW5zb3IgLS0gaWYgc28sIGRhdGEgZmlsZSBtdXN0IGJlIGNyZWF0ZWQgcG9pbnRpbmcgdG8gbndpcyAod2UgZG9uJ3Qgc3RvcmUgYWN0dWFsIGZpbGUsIGp1c3QgbWV0YWRhdGEgd2l0aCBsaW5rKVxyXG4gICAgICAgICAgICRzY29wZS5zID0geyBkZXBPcGVuOiB0cnVlLCBzRmlsZU9wZW46IGZhbHNlLCBOV0lTRmlsZU9wZW46IGZhbHNlfTtcclxuICAgICAgICAgICAvL2Zvcm1hdHRpbmcgZGF0ZSBhbmQgdGltZSBwcm9wZXJseSBmb3IgY2hyb21lIGFuZCBmZlxyXG4gICAgICAgICAgIHZhciBnZXREYXRlVGltZVBhcnRzID0gZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgICAgdmFyIHRoZURhdGU7XHJcbiAgICAgICAgICAgICAgIHZhciBpc0RhdGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcclxuICAgICAgICAgICAgICAgaWYgKGlzRGF0ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgIHZhciB5ID0gZC5zdWJzdHIoMCwgNCk7XHJcbiAgICAgICAgICAgICAgICAgICB2YXIgbSA9IGQuc3Vic3RyKDUsIDIpIC0gMTsgLy9zdWJ0cmFjdCAxIGZvciBpbmRleCB2YWx1ZSAoSmFudWFyeSBpcyAwKVxyXG4gICAgICAgICAgICAgICAgICAgdmFyIGRhID0gZC5zdWJzdHIoOCwgMik7XHJcbiAgICAgICAgICAgICAgICAgICB2YXIgaCA9IGQuc3Vic3RyKDExLCAyKTtcclxuICAgICAgICAgICAgICAgICAgIHZhciBtaSA9IGQuc3Vic3RyKDE0LCAyKTtcclxuICAgICAgICAgICAgICAgICAgIHZhciBzZWMgPSBkLnN1YnN0cigxNywgMik7XHJcbiAgICAgICAgICAgICAgICAgICB0aGVEYXRlID0gbmV3IERhdGUoeSwgbSwgZGEsIGgsIG1pLCBzZWMpO1xyXG4gICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgdGhlRGF0ZSA9IGQ7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgcmV0dXJuIHRoZURhdGU7XHJcbiAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vbmV3IGRhdGV0aW1lcGlja2VyIGh0dHBzOi8vZ2l0aHViLmNvbS96aGFiZXIvYW5ndWxhci1qcy1ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXJcclxuICAgICAgICAgICAkc2NvcGUuZGF0ZU9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgIHN0YXJ0aW5nRGF5OiAxLFxyXG4gICAgICAgICAgICAgICBzaG93V2Vla3M6IGZhbHNlXHJcbiAgICAgICAgICAgfTtcclxuICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tycyA9IHt9O1xyXG4gICAgICAgICAgICRzY29wZS5vcGVuID0gZnVuY3Rpb24gKCRldmVudCwgd2hpY2gpIHtcclxuICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICRzY29wZS5kYXRlcGlja3JzW3doaWNoXSA9IHRydWU7XHJcbiAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vI3JlZ2lvbiBmaWxlIFVwbG9hZFxyXG4gICAgICAgICAgICRzY29wZS5zdGFtcCA9IEZJTEVfU1RBTVAuZ2V0U3RhbXAoKTsgJHNjb3BlLmZpbGVJdGVtRXhpc3RzID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy9uZWVkIHRvIHJldXBsb2FkIGZpbGVJdGVtIHRvIHRoaXMgZXhpc3RpbmcgZmlsZSBPUiBDaGFuZ2Ugb3V0IGV4aXN0aW5nIGZpbGVJdGVtIGZvciBuZXcgb25lXHJcbiAgICAgICAgICAgJHNjb3BlLnNhdmVGaWxlVXBsb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgJHNjb3BlLnNGaWxlSXNVcGxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICB2YXIgZmlsZVBhcnRzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgRmlsZUVudGl0eToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGZpbGVfaWQ6ICRzY29wZS5hRmlsZS5maWxlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICRzY29wZS5hRmlsZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAkc2NvcGUuYUZpbGUuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9fZGlyZWN0aW9uOiAkc2NvcGUuYUZpbGUucGhvdG9fZGlyZWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlX2RkOiAkc2NvcGUuYUZpbGUubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlX2RkOiAkc2NvcGUuYUZpbGUubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIGZpbGVfZGF0ZTogJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICBod21faWQ6ICRzY29wZS5hRmlsZS5od21faWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogJHNjb3BlLmFGaWxlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgZmlsZXR5cGVfaWQ6ICRzY29wZS5hRmlsZS5maWxldHlwZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VfaWQ6ICRzY29wZS5hRmlsZS5zb3VyY2VfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogJHNjb3BlLmFGaWxlLnBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgZGF0YV9maWxlX2lkOiAkc2NvcGUuYUZpbGUuZGF0YV9maWxlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnRfaWQ6ICRzY29wZS5hRmlsZS5pbnN0cnVtZW50X2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RhdGU6ICRzY29wZS5hRmlsZS5waG90b19kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIGlzX253aXM6ICRzY29wZS5hRmlsZS5pc19ud2lzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIG9iamVjdGl2ZV9wb2ludF9pZDogJHNjb3BlLmFGaWxlLm9iamVjdGl2ZV9wb2ludF9pZFxyXG4gICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgIEZpbGU6ICRzY29wZS5hRmlsZS5GaWxlMSAhPT0gdW5kZWZpbmVkID8gJHNjb3BlLmFGaWxlLkZpbGUxIDogJHNjb3BlLmFGaWxlLkZpbGVcclxuICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgLy9uZWVkIHRvIHB1dCB0aGUgZmlsZVBhcnRzIGludG8gY29ycmVjdCBmb3JtYXQgZm9yIHBvc3RcclxuICAgICAgICAgICAgICAgdmFyIGZkID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgICAgICAgICAgIGZkLmFwcGVuZChcIkZpbGVFbnRpdHlcIiwgSlNPTi5zdHJpbmdpZnkoZmlsZVBhcnRzLkZpbGVFbnRpdHkpKTtcclxuICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZVwiLCBmaWxlUGFydHMuRmlsZSk7XHJcbiAgICAgICAgICAgICAgIC8vbm93IFBPU1QgaXQgKGZpbGVwYXJ0cylcclxuICAgICAgICAgICAgICAgRklMRS51cGxvYWRGaWxlKGZkKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChmcmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGxvYWRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5zcmMgPSAkc2NvcGUuc2VydmVyVVJMICsgJy9GaWxlcy8nICsgJHNjb3BlLmFGaWxlLmZpbGVfaWQgKyAnL0l0ZW0nICsgRklMRV9TVEFNUC5nZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgRklMRV9TVEFNUC5zZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YW1wID0gRklMRV9TVEFNUC5nZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5GaWxlMS50eXBlLmluZGV4T2YoXCJpbWFnZVwiKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzUGhvdG8gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgfSBlbHNlICRzY29wZS5pc1Bob3RvID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUubmFtZSA9IGZyZXNwb25zZS5uYW1lOyAkc2NvcGUuYUZpbGUucGF0aCA9IGZyZXNwb25zZS5wYXRoO1xyXG4gICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5GaWxlMSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLkZpbGUgPSAkc2NvcGUuYUZpbGUuRmlsZTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLkZpbGUxID0gdW5kZWZpbmVkOyAvL3B1dCBpdCBhcyBmaWxlIGFuZCByZW1vdmUgaXQgZnJvbSAxXHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICBmcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9ICRzY29wZS5hRmlsZS5maWxldHlwZV9pZCA9PSAyID8gXCJEYXRhRmlsZSBGaWxlXCIgOiBcIlNlbnNvciBGaWxlXCI7ICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgaWYgKGZyZXNwb25zZS5maWxldHlwZV9pZCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBTZW5zSW1hZ2VGaWxlcy5zcGxpY2UoJHNjb3BlLmV4aXN0SU1HRmlsZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU2Vuc0ltYWdlRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLkRlcFNlbnNvckZpbGVzWyRzY29wZS5leGlzdEZpbGVJbmRleF0gPSBmcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzWyRzY29wZS5hbGxTRmlsZUluZGV4XSA9IGZyZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLnNGaWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlSXRlbUV4aXN0cyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGZpbGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vc2hvdyBhIG1vZGFsIHdpdGggdGhlIGxhcmdlciBpbWFnZSBhcyBhIHByZXZpZXcgb24gdGhlIHBob3RvIGZpbGUgZm9yIHRoaXMgb3BcclxuICAgICAgICAgICAkc2NvcGUuc2hvd0ltYWdlTW9kYWwgPSBmdW5jdGlvbiAoaW1hZ2UpIHtcclxuICAgICAgICAgICAgICAgdmFyIGltYWdlTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkltYWdlIEZpbGUgUHJldmlldzwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PGltZyBuZy1zcmM9XCJ7e3NldFNSQ319XCIgLz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmltYWdlSWQgPSBpbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2V0U1JDID0gU0VSVkVSX1VSTCArICcvRmlsZXMvJyArICRzY29wZS5pbWFnZUlkICsgJy9JdGVtJztcclxuICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgc2l6ZTogJ21kJ1xyXG4gICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy93YW50IHRvIGFkZCBvciBlZGl0IGZpbGVcclxuICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGUgPSBmdW5jdGlvbiAoZmlsZSkge1xyXG4gICAgICAgICAgICAgICAkc2NvcGUuZmlsZVR5cGVzID0gJHNjb3BlLmZpbGVUeXBlTGlzdDtcclxuICAgICAgICAgICAgICAgJHNjb3BlLmFnZW5jaWVzID0gYWdlbmN5TGlzdDtcclxuICAgICAgICAgICAgICAgJHNjb3BlLmV4aXN0RmlsZUluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICRzY29wZS5leGlzdElNR0ZpbGVJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVJbmRleCA9IC0xOyAvL2luZGV4ZXMgZm9yIHNwbGljZS9jaGFuZ2VcclxuICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlID0ge307IC8vaG9sZGVyIGZvciBmaWxlXHJcbiAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlID0ge307IC8vaG9sZGVyIGZvciBmaWxlIHNvdXJjZVxyXG4gICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUgPSB7fTsgLy9ob2xkZXIgZm9yIGZpbGUgZGF0YWZpbGVcclxuICAgICAgICAgICAgICAgaWYgKGZpbGUgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgIC8vZWRpdCBvcCBmaWxlXHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhpc3RGaWxlSW5kZXggPSAkc2NvcGUuRGVwU2Vuc29yRmlsZXMuaW5kZXhPZihmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZUluZGV4ID0gJHNjb3BlLmFsbFNGaWxlcy5pbmRleE9mKGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4aXN0SU1HRmlsZUluZGV4ID0gJHNjb3BlLmRlcFNlbnNJbWFnZUZpbGVzLmxlbmd0aCA+IDAgPyAkc2NvcGUuZGVwU2Vuc0ltYWdlRmlsZXMuaW5kZXhPZihmaWxlKSA6IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlID0gYW5ndWxhci5jb3B5KGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgRklMRS5nZXRGaWxlSXRlbSh7IGlkOiAkc2NvcGUuYUZpbGUuZmlsZV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlSXRlbUV4aXN0cyA9IHJlc3BvbnNlLkxlbmd0aCA+IDAgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5maWxlVHlwZSA9ICRzY29wZS5maWxlVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChmdCkgeyByZXR1cm4gZnQuZmlsZXR5cGVfaWQgPT0gJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkOyB9KVswXS5maWxldHlwZTtcclxuICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUubmFtZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZJID0gJHNjb3BlLmFGaWxlLm5hbWUubGFzdEluZGV4T2YoXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlRXh0ID0gJHNjb3BlLmFGaWxlLm5hbWUuc3Vic3RyaW5nKGZJICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVFeHQubWF0Y2goLyhqcGd8SlBHfGpwZWd8SlBFR3xwbmd8UE5HfGdpZnxHSUYpJC8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1Bob3RvID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgJHNjb3BlLmlzUGhvdG8gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5zcmMgPSAkc2NvcGUuc2VydmVyVVJMICsgJy9GaWxlcy8nICsgJHNjb3BlLmFGaWxlLmZpbGVfaWQgKyAnL0l0ZW0nICsgRklMRV9TVEFNUC5nZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5hRmlsZS5maWxlX2RhdGUpOyAvL2RhdGUgZm9yIHZhbGlkaXR5IG9mIGZvcm0gb24gUFVUXHJcbiAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUgIT09IHVuZGVmaW5lZCkgJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUgPSBuZXcgRGF0ZSgkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSk7IC8vZGF0ZSBmb3IgdmFsaWRpdHkgb2YgZm9ybSBvbiBQVVRcclxuICAgICAgICAgICAgICAgICAgIGlmIChmaWxlLnNvdXJjZV9pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgU09VUkNFLnF1ZXJ5KHsgaWQ6IGZpbGUuc291cmNlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UgPSBzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZS5GVUxMbmFtZSA9ICRzY29wZS5hU291cmNlLnNvdXJjZV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FkZCBhZ2VuY3kgbmFtZSB0byBwaG90byBjYXB0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQgPT0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY3lOYW1lRm9yQ2FwID0gJHNjb3BlLmFnZW5jaWVzLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gJHNjb3BlLmFTb3VyY2UuYWdlbmN5X2lkOyB9KVswXS5hZ2VuY3lfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgIH0vL2VuZCBpZiBzb3VyY2VcclxuICAgICAgICAgICAgICAgICAgIGlmIChmaWxlLmRhdGFfZmlsZV9pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgREFUQV9GSUxFLnF1ZXJ5KHsgaWQ6IGZpbGUuZGF0YV9maWxlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZSA9IGRmO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc29yID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRzY29wZS5kYXRhZmlsZS5wcm9jZXNzb3JfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUuY29sbGVjdF9kYXRlID0gbmV3IERhdGUoJHNjb3BlLmRhdGFmaWxlLmNvbGxlY3RfZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0ID0gZ2V0RGF0ZVRpbWVQYXJ0cygkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCA9IGdldERhdGVUaW1lUGFydHMoJHNjb3BlLmRhdGFmaWxlLmdvb2RfZW5kKTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfS8vZW5kIGV4aXN0aW5nIGZpbGVcclxuICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAvL2NyZWF0aW5nIGEgZmlsZVxyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSA9IG5ldyBEYXRlKCk7ICRzY29wZS5hRmlsZS5waG90b19kYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRjb29raWVzLmdldCgnbUlEJyk7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UuRlVMTG5hbWUgPSAkc2NvcGUuYVNvdXJjZS5mbmFtZSArIFwiIFwiICsgJHNjb3BlLmFTb3VyY2UubG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc29yID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRjb29raWVzLmdldCgnbUlEJyk7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgdmFyIGR0ID0gZ2V0VGltZVpvbmVTdGFtcCgpOyAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmNvbGxlY3RfZGF0ZSA9IGR0WzBdO1xyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLnRpbWVfem9uZSA9IGR0WzFdOyAvL3dpbGwgYmUgY29udmVydGVkIHRvIHV0YyBvbiBwb3N0L3B1dCBcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0ID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgIH0gLy9lbmQgbmV3IGZpbGVcclxuICAgICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAkc2NvcGUudXBkYXRlQWdlbmN5Rm9yQ2FwdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQgPT0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWdlbmN5TmFtZUZvckNhcCA9ICRzY29wZS5hZ2VuY2llcy5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuYWdlbmN5X2lkID09ICRzY29wZS5hU291cmNlLmFnZW5jeV9pZDsgfSlbMF0uYWdlbmN5X25hbWU7XHJcbiAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9jcmVhdGUgdGhpcyBuZXcgZmlsZVxyXG4gICAgICAgICAgICRzY29wZS5jcmVhdGVGaWxlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQgPT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgZW5kIGRhdGUgaXMgYWZ0ZXIgc3RhcnQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgdmFyIHMgPSAkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydDsvL25lZWQgdG8gZ2V0IGRlcCBzdGF0dXMgZGF0ZSBpbiBzYW1lIGZvcm1hdCBhcyByZXRyaWV2ZWQgdG8gY29tcGFyZVxyXG4gICAgICAgICAgICAgICAgICAgdmFyIGUgPSAkc2NvcGUuZGF0YWZpbGUuZ29vZF9lbmQ7IC8vc3R1cGlkIGNvbW1hIGluIHRoZXJlIG1ha2luZyBpdCBub3QgdGhlIHNhbWVcclxuICAgICAgICAgICAgICAgICAgIGlmIChuZXcgRGF0ZShlKSA8IG5ldyBEYXRlKHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICB2YXIgZml4RGF0ZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGUgZ29vZCBlbmQgZGF0ZSBtdXN0IGJlIGFmdGVyIHRoZSBnb29kIHN0YXJ0IGRhdGUuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgZml4RGF0ZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU2VuZmlsZUlzVXBsb2FkaW5nID0gdHJ1ZTsgLy9Mb2FkaW5nLi4uXHJcbiAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAvL3Bvc3Qgc291cmNlIG9yIGRhdGFmaWxlIGZpcnN0IHRvIGdldCBzb3VyY2VfaWQgb3IgZGF0YV9maWxlX2lkXHJcbiAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkID09IDIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgIC8vZGV0ZXJtaW5lIHRpbWV6b25lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5kYXRhZmlsZS50aW1lX3pvbmUgIT0gXCJVVENcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnZlcnQgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHV0Y1N0YXJ0RGF0ZVRpbWUgPSBuZXcgRGF0ZSgkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHV0Y0VuZERhdGVUaW1lID0gbmV3IERhdGUoJHNjb3BlLmRhdGFmaWxlLmdvb2RfZW5kKS50b1VUQ1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydCA9IHV0Y1N0YXJ0RGF0ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCA9IHV0Y0VuZERhdGVUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUudGltZV96b25lID0gJ1VUQyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgJ0dNVCcgaXMgdGFja2VkIG9uIHNvIGl0IGRvZXNuJ3QgdHJ5IHRvIGFkZCBocnMgdG8gbWFrZSB0aGUgYWxyZWFkeSB1dGMgYSB1dGMgaW4gZGJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNpID0gJHNjb3BlLmRhdGFmaWxlLmdvb2Rfc3RhcnQudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArIDM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlaSA9ICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZC50b1N0cmluZygpLmluZGV4T2YoJ0dNVCcpICsgMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmdvb2Rfc3RhcnQgPSAkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydC50b1N0cmluZygpLnN1YnN0cmluZygwLCBzaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCA9ICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZC50b1N0cmluZygpLnN1YnN0cmluZygwLCBlaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5pbnN0cnVtZW50X2lkID0gdGhpc1NlbnNvci5pbnN0cnVtZW50X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5wcm9jZXNzb3JfaWQgPSAkY29va2llcy5nZXQoJ21JRCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIERBVEFfRklMRS5zYXZlKCRzY29wZS5kYXRhZmlsZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoZGZSZXNvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhlbiBQT1NUIGZpbGVQYXJ0cyAoU2VydmljZXMgcG9wdWxhdGUgUEFUSClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVQYXJ0cyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGVFbnRpdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxldHlwZV9pZDogJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICRzY29wZS5hRmlsZS5GaWxlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9kYXRlOiAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAkc2NvcGUuYUZpbGUuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogJHNjb3BlLnRoaXNTZW5zb3JTaXRlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YV9maWxlX2lkOiBkZlJlc29uc2UuZGF0YV9maWxlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RpcmVjdGlvbjogJHNjb3BlLmFGaWxlLnBob3RvX2RpcmVjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZV9kZDogJHNjb3BlLmFGaWxlLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZV9kZDogJHNjb3BlLmFGaWxlLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVtZW50X2lkOiB0aGlzU2Vuc29yLmluc3RydW1lbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlOiAkc2NvcGUuYUZpbGUuRmlsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAvL25lZWQgdG8gcHV0IHRoZSBmaWxlUGFydHMgaW50byBjb3JyZWN0IGZvcm1hdCBmb3IgcG9zdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZUVudGl0eVwiLCBKU09OLnN0cmluZ2lmeShmaWxlUGFydHMuRmlsZUVudGl0eSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBmZC5hcHBlbmQoXCJGaWxlXCIsIGZpbGVQYXJ0cy5GaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3cgUE9TVCBpdCAoZmlsZXBhcnRzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBGSUxFLnVwbG9hZEZpbGUoZmQpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIFVwbG9hZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJlc3BvbnNlLmZpbGVCZWxvbmdzVG8gPSBcIkRhdGFGaWxlIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5EZXBTZW5zb3JGaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZyZXNwb25zZS5maWxldHlwZV9pZCA9PT0gMSkgJHNjb3BlLmRlcFNlbnNJbWFnZUZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgJHNjb3BlLmRlcFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGZpbGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgU291cmNlIGluZm86IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBkYXRhZmlsZS5zYXZlKClcclxuICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgLy9pdCdzIG5vdCBhIGRhdGEgZmlsZSwgc28gZG8gdGhlIHNvdXJjZVxyXG4gICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGVTb3VyY2UgPSB7IHNvdXJjZV9uYW1lOiAkc2NvcGUuYVNvdXJjZS5GVUxMbmFtZSwgYWdlbmN5X2lkOiAkc2NvcGUuYVNvdXJjZS5hZ2VuY3lfaWR9Oy8vLCBTT1VSQ0VfREFURTogJHNjb3BlLmFTb3VyY2UuU09VUkNFX0RBVEUgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICBTT1VSQ0Uuc2F2ZSh0aGVTb3VyY2UpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQgIT09IDgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhlbiBQT1NUIGZpbGVQYXJ0cyAoU2VydmljZXMgcG9wdWxhdGUgUEFUSClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlUGFydHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZUVudGl0eToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxldHlwZV9pZDogJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAkc2NvcGUuYUZpbGUuRmlsZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2RhdGU6ICRzY29wZS5hRmlsZS5maWxlX2RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RhdGU6ICRzY29wZS5hRmlsZS5waG90b19kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJHNjb3BlLmFGaWxlLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXRlX2lkOiAkc2NvcGUudGhpc1NlbnNvclNpdGUuc2l0ZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlX2lkOiByZXNwb25zZS5zb3VyY2VfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RpcmVjdGlvbjogJHNjb3BlLmFGaWxlLnBob3RvX2RpcmVjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGVfZGQ6ICRzY29wZS5hRmlsZS5sYXRpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlX2RkOiAkc2NvcGUuYUZpbGUubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVtZW50X2lkOiB0aGlzU2Vuc29yLmluc3RydW1lbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGU6ICRzY29wZS5hRmlsZS5GaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9uZWVkIHRvIHB1dCB0aGUgZmlsZVBhcnRzIGludG8gY29ycmVjdCBmb3JtYXQgZm9yIHBvc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZUVudGl0eVwiLCBKU09OLnN0cmluZ2lmeShmaWxlUGFydHMuRmlsZUVudGl0eSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZVwiLCBmaWxlUGFydHMuRmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBQT1NUIGl0IChmaWxlcGFydHMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGSUxFLnVwbG9hZEZpbGUoZmQpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGxvYWRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiU2Vuc29yIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRGVwU2Vuc29yRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmcmVzcG9uc2UuZmlsZXR5cGVfaWQgPT09IDEpICRzY29wZS5kZXBTZW5zSW1hZ2VGaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IGZhbHNlOyAkc2NvcGUuZGVwU2VuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBTZW5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RoaXMgaXMgYSBsaW5rIGZpbGUsIG5vIGZpbGVJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuc291cmNlX2lkID0gcmVzcG9uc2Uuc291cmNlX2lkOyAkc2NvcGUuYUZpbGUuc2l0ZV9pZCA9ICRzY29wZS50aGlzU2Vuc29yU2l0ZS5zaXRlX2lkOyAkc2NvcGUuYUZpbGUuaW5zdHJ1bWVudF9pZCA9IHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZJTEUuc2F2ZSgkc2NvcGUuYUZpbGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGxvYWRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiU2Vuc29yIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRGVwU2Vuc29yRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgJHNjb3BlLmRlcFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU2VuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGZpbGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9IC8vZW5kIGVsc2UgKGl0J3MgYSBMaW5rIGZpbGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgU291cmNlIGluZm86IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBzb3VyY2Uuc2F2ZSgpXHJcbiAgICAgICAgICAgICAgICAgICB9Ly9lbmQgaWYgc291cmNlXHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgdmFsaWQgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgfTsvL2VuZCBjcmVhdGUoKVxyXG5cclxuICAgICAgICAgICAkc2NvcGUuc2F2ZUZpbGUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5maWxldHlwZV9pZCA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSBlbmQgZGF0ZSBpcyBhZnRlciBzdGFydCBkYXRlXHJcbiAgICAgICAgICAgICAgICAgICB2YXIgcyA9ICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0Oy8vbmVlZCB0byBnZXQgZGVwIHN0YXR1cyBkYXRlIGluIHNhbWUgZm9ybWF0IGFzIHJldHJpZXZlZCB0byBjb21wYXJlXHJcbiAgICAgICAgICAgICAgICAgICB2YXIgZSA9ICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZDsgLy9zdHVwaWQgY29tbWEgaW4gdGhlcmUgbWFraW5nIGl0IG5vdCB0aGUgc2FtZVxyXG4gICAgICAgICAgICAgICAgICAgaWYgKG5ldyBEYXRlKGUpIDwgbmV3IERhdGUocykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXhEYXRlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBnb29kIGVuZCBkYXRlIG11c3QgYmUgYWZ0ZXIgdGhlIGdvb2Qgc3RhcnQgZGF0ZS48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICBmaXhEYXRlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBTZW5maWxlSXNVcGxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgLy9wdXQgc291cmNlIG9yIGRhdGFmaWxlLCBwdXQgZmlsZVxyXG4gICAgICAgICAgICAgICAgICAgdmFyIHdoYXRraW5kID0gJHNjb3BlLmFGaWxlLmZpbGVCZWxvbmdzVG87XHJcbiAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmRhdGFmaWxlLmRhdGFfZmlsZV9pZCAhPT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAvL2hhcyBEQVRBX0ZJTEVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jaGVjayB0aW1lem9uZSBhbmQgbWFrZSBzdXJlIGRhdGUgc3RheXMgdXRjXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZGF0YWZpbGUudGltZV96b25lICE9IFwiVVRDXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29udmVydCBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHV0Y1N0YXJ0RGF0ZVRpbWUgPSBuZXcgRGF0ZSgkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1dGNFbmREYXRlVGltZSA9IG5ldyBEYXRlKCRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0ID0gdXRjU3RhcnREYXRlVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCA9IHV0Y0VuZERhdGVUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLnRpbWVfem9uZSA9ICdVVEMnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgJ0dNVCcgaXMgdGFja2VkIG9uIHNvIGl0IGRvZXNuJ3QgdHJ5IHRvIGFkZCBocnMgdG8gbWFrZSB0aGUgYWxyZWFkeSB1dGMgYSB1dGMgaW4gZGJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaSA9ICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0LnRvU3RyaW5nKCkuaW5kZXhPZignR01UJykgKyAzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVpID0gJHNjb3BlLmRhdGFmaWxlLmdvb2RfZW5kLnRvU3RyaW5nKCkuaW5kZXhPZignR01UJykgKyAzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmdvb2Rfc3RhcnQgPSAkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydC50b1N0cmluZygpLnN1YnN0cmluZygwLCBzaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUuZ29vZF9lbmQgPSAkc2NvcGUuZGF0YWZpbGUuZ29vZF9lbmQudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgZWkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIERBVEFfRklMRS51cGRhdGUoeyBpZDogJHNjb3BlLmRhdGFmaWxlLmRhdGFfZmlsZV9pZCB9LCAkc2NvcGUuZGF0YWZpbGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRklMRS51cGRhdGUoeyBpZDogJHNjb3BlLmFGaWxlLmZpbGVfaWQgfSwgJHNjb3BlLmFGaWxlKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChmaWxlUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlUmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiRGF0YUZpbGUgRmlsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5EZXBTZW5zb3JGaWxlc1skc2NvcGUuZXhpc3RGaWxlSW5kZXhdID0gZmlsZVJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZXNbJHNjb3BlLmFsbFNGaWxlSW5kZXhdID0gZmlsZVJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgJHNjb3BlLmRlcFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBTZW5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTsgLy9Mb2FkaW5nLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGRhdGEgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIC8vaGFzIFNPVVJDRVxyXG4gICAgICAgICAgICAgICAgICAgICAgIC8vIHBvc3QgYWdhaW4gKGlmIG5vIGNoYW5nZSwgd2lsbCByZXR1cm4gZXhpc3Rpbmcgb25lLiBpZiBlZGl0ZWQsIHdpbGwgY3JlYXRlIGEgbmV3IG9uZSAtLWluc3RlYWQgb2YgZWRpdGluZyBhbGwgZmlsZXMgdGhhdCB1c2UgdGhpcyBzb3VyY2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoZVNvdXJjZSA9IHsgc291cmNlX25hbWU6ICRzY29wZS5hU291cmNlLkZVTExuYW1lLCBhZ2VuY3lfaWQ6ICRzY29wZS5hU291cmNlLmFnZW5jeV9pZCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgIFNPVVJDRS5zYXZlKHRoZVNvdXJjZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHsgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLnNvdXJjZV9pZCA9IHJlc3BvbnNlLnNvdXJjZV9pZDtcclxuICAvLyAgICAgICAgICAgICAgICAgICAgICAgU09VUkNFLnVwZGF0ZSh7IGlkOiAkc2NvcGUuYVNvdXJjZS5zb3VyY2VfaWQgfSwgJHNjb3BlLmFTb3VyY2UpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBGSUxFLnVwZGF0ZSh7IGlkOiAkc2NvcGUuYUZpbGUuZmlsZV9pZCB9LCAkc2NvcGUuYUZpbGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZpbGVSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlUmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiU2Vuc29yIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5EZXBTZW5zb3JGaWxlc1skc2NvcGUuZXhpc3RGaWxlSW5kZXhdID0gZmlsZVJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlc1skc2NvcGUuYWxsU0ZpbGVJbmRleF0gPSBmaWxlUmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuYWxsU0ZpbGVzKTsgLy91cGRhdGVzIHRoZSBmaWxlIGxpc3Qgb24gdGhlIHNpdGVkYXNoYm9hcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgJHNjb3BlLmRlcFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU2VuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGZpbGU6IFwiICtlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU2VuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7IC8vTG9hZGluZy4uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIHNvdXJjZTogXCIgK2Vycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICB9Ly9lbmQgdmFsaWRcclxuICAgICAgICAgICB9Oy8vZW5kIHNhdmUoKVxyXG5cclxuICAgICAgICAgICAkc2NvcGUuZGVsZXRlRmlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgdmFyIERlbGV0ZU1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5hRmlsZTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiRmlsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICBEZWxldGVNb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChmaWxlVG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgIEZJTEUuZGVsZXRlKHsgaWQ6IGZpbGVUb1JlbW92ZS5maWxlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBSZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5EZXBTZW5zb3JGaWxlcy5zcGxpY2UoJHNjb3BlLmV4aXN0RmlsZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzLnNwbGljZSgkc2NvcGUuYWxsU0ZpbGVJbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFNlbnNJbWFnZUZpbGVzLnNwbGljZSgkc2NvcGUuZXhpc3RJTUdGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgIH0pOy8vZW5kIERlbGV0ZU1vZGFsLnJlc3VsdC50aGVuXHJcbiAgICAgICAgICAgfTsvL2VuZCBkZWxldGUoKVxyXG5cclxuICAgICAgICAgICAkc2NvcGUuY2FuY2VsRmlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlID0ge307XHJcbiAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlID0ge307XHJcbiAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVGb3JtID0gZmFsc2U7XHJcbiAgICAgICAgICAgfTsgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyNlbmRyZWdpb24gZmlsZSBVcGxvYWRcclxuXHJcbiAgICAgICAgICAgIC8vI3JlZ2lvbiBOV0lTIENvbm5lY3Rpb25cclxuICAgICAgICAgICAgJHNjb3BlLnNob3dOV0lTRmlsZSA9IGZ1bmN0aW9uIChmKSB7XHJcbiAgICAgICAgICAgICAgICAvL3dhbnQgdG8gYWRkIG9yIGVkaXQgZmlsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmV4aXN0RmlsZUluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVJbmRleCA9IC0xOyAvL2luZGV4ZXMgZm9yIHNwbGljZS9jaGFuZ2VcclxuICAgICAgICAgICAgICAgIGlmIChmICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9lZGl0IE5XSVMgZmlsZVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5leGlzdEZpbGVJbmRleCA9ICRzY29wZS5zZW5zb3JOV0lTRmlsZXMuaW5kZXhPZihmKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVJbmRleCA9ICRzY29wZS5hbGxTRmlsZXMuaW5kZXhPZihmKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0ZpbGUgPSBhbmd1bGFyLmNvcHkoZik7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNGaWxlLmZpbGVfZGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5OV0lTRmlsZS5maWxlX2RhdGUpOyAvL2RhdGUgZm9yIHZhbGlkaXR5IG9mIGZvcm0gb24gUFVUXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNGaWxlLkZpbGVUeXBlID0gXCJEYXRhXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgREFUQV9GSUxFLnF1ZXJ5KHsgaWQ6IGYuZGF0YV9maWxlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYgPSBkZjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm53aXNQcm9jZXNzb3IgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT0gJHNjb3BlLk5XSVNERi5wcm9jZXNzb3JfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0RGLmNvbGxlY3RfZGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5OV0lTREYuY29sbGVjdF9kYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERi5nb29kX3N0YXJ0ID0gZ2V0RGF0ZVRpbWVQYXJ0cygkc2NvcGUuTldJU0RGLmdvb2Rfc3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0RGLmdvb2RfZW5kID0gZ2V0RGF0ZVRpbWVQYXJ0cygkc2NvcGUuTldJU0RGLmdvb2RfZW5kKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAvL2VuZCBleGlzdGluZyBmaWxlXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY3JlYXRpbmcgYSBud2lzIGZpbGVcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0ZpbGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdodHRwOi8vd2F0ZXJkYXRhLnVzZ3MuZ292L253aXMvdXY/c2l0ZV9ubz0nICsgJHNjb3BlLnRoaXNTZW5zb3JTaXRlLnVzZ3Nfc2lkLCAgLy8gaWYgW2ZpbGwgaW4gaWYgbm90IGhlcmUuLiBUT0RPLi4uJmJlZ2luX2RhdGU9MjAxNjA0MTMmZW5kX2RhdGU9MjAxNjA0MTkgKGV2ZW50IHN0YXJ0L2VuZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogJzxsaW5rPicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVfZGF0ZTogbmV3IERhdGUoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXR5cGVfaWQ6IDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEZpbGVUeXBlOiAnRGF0YScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6ICRzY29wZS5hU2Vuc29yLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFfZmlsZV9pZDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1bWVudF9pZDogJHNjb3BlLmFTZW5zb3IuaW5zdHJ1bWVudF9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNfbndpczogMVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc29yX2lkOiAkY29va2llcy5nZXQoXCJtSURcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnRfaWQ6ICRzY29wZS5hU2Vuc29yLmluc3RydW1lbnRfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3RfZGF0ZTogZHRbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVfem9uZTogZHRbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdvb2Rfc3RhcnQ6IG5ldyBEYXRlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdvb2RfZW5kOiBuZXcgRGF0ZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubndpc1Byb2Nlc3NvciA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1lbWJlcl9pZCA9PSAkY29va2llcy5nZXQoJ21JRCcpOyB9KVswXTtcclxuICAgICAgICAgICAgICAgIH0gLy9lbmQgbmV3IGZpbGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93TldJU0ZpbGVGb3JtID0gdHJ1ZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdmFyIHBvc3RBcHByb3ZhbEZvck5XSVNmaWxlID0gZnVuY3Rpb24gKERGaWQpIHtcclxuICAgICAgICAgICAgICAgIERBVEFfRklMRS5hcHByb3ZlTldJU0RGKHsgaWQ6IERGaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoYXBwcm92YWxSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuYXBwcm92YWxfaWQgPSBhcHByb3ZhbFJlc3BvbnNlLmFwcHJvdmFsX2lkO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRzY29wZS5jcmVhdGVOV0lTRmlsZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgZW5kIGRhdGUgaXMgYWZ0ZXIgc3RhcnQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgdmFyIHMgPSAkc2NvcGUuTldJU0RGLmdvb2Rfc3RhcnQ7Ly9uZWVkIHRvIGdldCBkZXAgc3RhdHVzIGRhdGUgaW4gc2FtZSBmb3JtYXQgYXMgcmV0cmlldmVkIHRvIGNvbXBhcmVcclxuICAgICAgICAgICAgICAgIHZhciBlID0gJHNjb3BlLk5XSVNERi5nb29kX2VuZDsgLy9zdHVwaWQgY29tbWEgaW4gdGhlcmUgbWFraW5nIGl0IG5vdCB0aGUgc2FtZVxyXG4gICAgICAgICAgICAgICAgaWYgKG5ldyBEYXRlKGUpIDwgbmV3IERhdGUocykpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaXhEYXRlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBnb29kIGVuZCBkYXRlIG11c3QgYmUgYWZ0ZXIgdGhlIGdvb2Qgc3RhcnQgZGF0ZS48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBmaXhEYXRlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBOV0lTU2VuZmlsZUlzVXBsb2FkaW5nID0gdHJ1ZTsgLy9Mb2FkaW5nLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICskY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcG9zdCBkYXRhZmlsZSBmaXJzdCB0byBnZXQgb3IgZGF0YV9maWxlX2lkXHJcbiAgICAgICAgICAgICAgICAgICAgLy9kZXRlcm1pbmUgdGltZXpvbmVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLk5XSVNERi50aW1lX3pvbmUgIT0gXCJVVENcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnZlcnQgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHV0Y1N0YXJ0RGF0ZVRpbWUgPSBuZXcgRGF0ZSgkc2NvcGUuTldJU0RGLmdvb2Rfc3RhcnQpLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1dGNFbmREYXRlVGltZSA9IG5ldyBEYXRlKCRzY29wZS5OV0lTREYuZ29vZF9lbmQpLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuZ29vZF9zdGFydCA9IHV0Y1N0YXJ0RGF0ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuZ29vZF9lbmQgPSB1dGNFbmREYXRlVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERi50aW1lX3pvbmUgPSAnVVRDJztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSAnR01UJyBpcyB0YWNrZWQgb24gc28gaXQgZG9lc24ndCB0cnkgdG8gYWRkIGhycyB0byBtYWtlIHRoZSBhbHJlYWR5IHV0YyBhIHV0YyBpbiBkYlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2kgPSAkc2NvcGUuTldJU0RGLmdvb2Rfc3RhcnQudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArIDM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlaSA9ICRzY29wZS5OV0lTREYuZ29vZF9lbmQudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArIDM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuZ29vZF9zdGFydCA9ICRzY29wZS5OV0lTREYuZ29vZF9zdGFydC50b1N0cmluZygpLnN1YnN0cmluZygwLCBzaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuZ29vZF9lbmQgPSAkc2NvcGUuTldJU0RGLmdvb2RfZW5kLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIGVpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUuc2F2ZSgkc2NvcGUuTldJU0RGKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChOZGZSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBjcmVhdGUgYW4gYXBwcm92YWwgd2l0aCB0aGUgZXZlbnQncyBjb29yZGluYXRvciBhbmQgYWRkIHRoZSBhcHByb3ZhbF9pZCwgcHV0IGl0LCB0aGVuIHBvc3QgdGhlIGZpbGUgVE9ETyA6OjogTkVXIEVORFBPSU5UIEZPUiBUSElTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhlbiBQT1NUIGZpbGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERi5kYXRhX2ZpbGVfaWQgPSBOZGZSZXNwb25zZS5kYXRhX2ZpbGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RBcHByb3ZhbEZvck5XSVNmaWxlKE5kZlJlc3BvbnNlLmRhdGFfZmlsZV9pZCk7IC8vcHJvY2VzcyBhcHByb3ZhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBQT1NUIEZpbGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNGaWxlLmRhdGFfZmlsZV9pZCA9IE5kZlJlc3BvbnNlLmRhdGFfZmlsZV9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNGaWxlLnBhdGggPSAnPGxpbms+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlICRzY29wZS5OV0lTRmlsZS5GaWxlVHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRklMRS5zYXZlKCRzY29wZS5OV0lTRmlsZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoRnJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgRGF0YSBzYXZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZyZXNwb25zZS5maWxlQmVsb25nc1RvID0gXCJEYXRhRmlsZSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yTldJU0ZpbGVzLnB1c2goRnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZXMucHVzaChGcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU2l0ZV9GaWxlcy5zZXRBbGxTaXRlRmlsZXMoJHNjb3BlLmFsbFNGaWxlcyk7IC8vdXBkYXRlcyB0aGUgZmlsZSBsaXN0IG9uIHRoZSBzaXRlZGFzaGJvYXJkICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93TldJU0ZpbGVGb3JtID0gZmFsc2U7ICRzY29wZS5kZXBOV0lTU2VuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7IC8vTG9hZGluZy4uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcE5XSVNTZW5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTsgLy9Mb2FkaW5nLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwTldJU1NlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlOyAvL0xvYWRpbmcuLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGRhdGEgZmlsZSBpbmZvOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgc291cmNlLnNhdmUoKVxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIHZhbGlkXHJcbiAgICAgICAgICAgIH07Ly8gZW5kIGNyZWF0ZSBOV0lTIGZpbGVcclxuICAgICAgICAgICAgLy91cGRhdGUgdGhpcyBOV0lTIGZpbGVcclxuICAgICAgICAgICAgJHNjb3BlLnNhdmVOV0lTRmlsZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgZW5kIGRhdGUgaXMgYWZ0ZXIgc3RhcnQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgdmFyIHMgPSAkc2NvcGUuTldJU0RGLmdvb2Rfc3RhcnQ7Ly9uZWVkIHRvIGdldCBkZXAgc3RhdHVzIGRhdGUgaW4gc2FtZSBmb3JtYXQgYXMgcmV0cmlldmVkIHRvIGNvbXBhcmVcclxuICAgICAgICAgICAgICAgIHZhciBlID0gJHNjb3BlLk5XSVNERi5nb29kX2VuZDsgLy9zdHVwaWQgY29tbWEgaW4gdGhlcmUgbWFraW5nIGl0IG5vdCB0aGUgc2FtZVxyXG4gICAgICAgICAgICAgICAgaWYgKG5ldyBEYXRlKGUpIDwgbmV3IERhdGUocykpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaXhEYXRlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBnb29kIGVuZCBkYXRlIG11c3QgYmUgYWZ0ZXIgdGhlIGdvb2Qgc3RhcnQgZGF0ZS48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBmaXhEYXRlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcHV0IHNvdXJjZSBvciBkYXRhZmlsZSwgcHV0IGZpbGVcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgdGltZXpvbmUgYW5kIG1ha2Ugc3VyZSBkYXRlIHN0YXlzIHV0Y1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuTldJU0RGLnRpbWVfem9uZSAhPSBcIlVUQ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29udmVydCBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXRjU3RhcnREYXRlVGltZSA9IG5ldyBEYXRlKCRzY29wZS5OV0lTREYuZ29vZF9zdGFydCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHV0Y0VuZERhdGVUaW1lID0gbmV3IERhdGUoJHNjb3BlLk5XSVNERi5nb29kX2VuZCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERi5nb29kX3N0YXJ0ID0gdXRjU3RhcnREYXRlVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERi5nb29kX2VuZCA9IHV0Y0VuZERhdGVUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0RGLnRpbWVfem9uZSA9ICdVVEMnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlICdHTVQnIGlzIHRhY2tlZCBvbiBzbyBpdCBkb2Vzbid0IHRyeSB0byBhZGQgaHJzIHRvIG1ha2UgdGhlIGFscmVhZHkgdXRjIGEgdXRjIGluIGRiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaSA9ICRzY29wZS5OV0lTREYuZ29vZF9zdGFydC50b1N0cmluZygpLmluZGV4T2YoJ0dNVCcpICsgMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVpID0gJHNjb3BlLk5XSVNERi5nb29kX2VuZC50b1N0cmluZygpLmluZGV4T2YoJ0dNVCcpICsgMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERi5nb29kX3N0YXJ0ID0gJHNjb3BlLk5XSVNERi5nb29kX3N0YXJ0LnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIHNpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERi5nb29kX2VuZCA9ICRzY29wZS5OV0lTREYuZ29vZF9lbmQudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgZWkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUudXBkYXRlKHsgaWQ6ICRzY29wZS5OV0lTREYuZGF0YV9maWxlX2lkIH0sICRzY29wZS5OV0lTREYpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBGSUxFLnVwZGF0ZSh7IGlkOiAkc2NvcGUuTldJU0ZpbGUuZmlsZV9pZCB9LCAkc2NvcGUuTldJU0ZpbGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZpbGVSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIERhdGEgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVSZXNwb25zZS5maWxlQmVsb25nc1RvID0gXCJEYXRhRmlsZSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yTldJU0ZpbGVzWyRzY29wZS5leGlzdEZpbGVJbmRleF0gPSBmaWxlUmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzWyRzY29wZS5hbGxTRmlsZUluZGV4XSA9IGZpbGVSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dOV0lTRmlsZUZvcm0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBmaWxlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBkYXRhOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgdmFsaWRcclxuICAgICAgICAgICAgfTsvL2VuZCBzYXZlKClcclxuICAgICAgICAgICAgLy9kZWxldGUgdGhpcyBmaWxlXHJcbiAgICAgICAgICAgICRzY29wZS5kZWxldGVOV0lTRmlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBEZWxldGVNb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5OV0lTRmlsZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiRmlsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgRGVsZXRlTW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoZmlsZVRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICskY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgRklMRS5kZWxldGUoeyBpZDogZmlsZVRvUmVtb3ZlLmZpbGVfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBSZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yTldJU0ZpbGVzLnNwbGljZSgkc2NvcGUuZXhpc3RGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzLnNwbGljZSgkc2NvcGUuYWxsU0ZpbGVJbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd05XSVNGaWxlRm9ybSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pOy8vZW5kIERlbGV0ZU1vZGFsLnJlc3VsdC50aGVuXHJcbiAgICAgICAgICAgIH07Ly9lbmQgZGVsZXRlKClcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWxOV0lTRmlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OV0lTRmlsZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dOV0lTRmlsZUZvcm0gPSBmYWxzZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgICAgICAgICAvLyNyZWdpb24gdGFwZSBkb3duIHNlY3Rpb24gICAgICAgICAgIFxyXG4gICAgICAgICAgICAkc2NvcGUuT1BjaG9zZW4gPSBmdW5jdGlvbiAob3BDaG9zZW4pIHtcclxuICAgICAgICAgICAgICAgdmFyIG9wSSA9ICRzY29wZS5PUHNGb3JUYXBlRG93bi5tYXAoZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8ub2JqZWN0aXZlX3BvaW50X2lkOyB9KS5pbmRleE9mKG9wQ2hvc2VuLm9iamVjdGl2ZV9wb2ludF9pZCk7ICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgIGlmIChvcENob3Nlbi5zZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgLy90aGV5IHBpY2tlZCBhbiBPUCB0byB1c2UgZm9yIHRhcGVkb3duXHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BNZWFzdXJlID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BNZWFzdXJlLm9wX25hbWUgPSBvcENob3Nlbi5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QTWVhc3VyZS5lbGV2YXRpb24gPSBvcENob3Nlbi5lbGV2X2Z0O1xyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QTWVhc3VyZS5WZGF0dW0gPSAkc2NvcGUudmVydERhdHVtTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHZkKSB7IHJldHVybiB2ZC5kYXR1bV9pZCA9PSBvcENob3Nlbi52ZGF0dW1faWQ7IH0pWzBdLmRhdHVtX2FiYnJldmlhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5PUE1lYXN1cmUub2JqZWN0aXZlX3BvaW50X2lkID0gb3BDaG9zZW4ub2JqZWN0aXZlX3BvaW50X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgLy9hcmUgd2UgbG9va2luZyBhdCBjcmVhdGUgZGVwbG95bWVudCBvciBlZGl0IGRlcGxveW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFTZW5zb3IuaW5zdHJ1bWVudF9pZCAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5hU2Vuc1N0YXR1cy5zdGF0dXNfdHlwZV9pZCAhPT0gNCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBUYXBlQ29weS5wdXNoKCRzY29wZS5PUE1lYXN1cmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBTdHVmZkNvcHlbMV0udmRhdHVtX2lkID0gb3BDaG9zZW4udmRhdHVtX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudGFwZURvd25UYWJsZS5wdXNoKCRzY29wZS5PUE1lYXN1cmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc1N0YXR1cy52ZGF0dW1faWQgPSBvcENob3Nlbi52ZGF0dW1faWQ7XHJcbiAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgLy90aGV5IHVuY2hlY2tlZCB0aGUgb3AgdG8gcmVtb3ZlXHJcbiAgICAgICAgICAgICAgICAgICAvL2FzayB0aGVtIGFyZSB0aGV5IHN1cmU/XHJcbiAgICAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlT1BNZWFzID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5SZW1vdmUgT1AgTWVhc3VyZTwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byByZW1vdmUgdGhpcyBPUCBNZWFzdXJlbWVudCBmcm9tIHRoaXMgc2Vuc29yPzwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJjYW5jZWwoKVwiPkNhbmNlbDwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgncmVtb3ZlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgnY2FuY2VsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICByZW1vdmVPUE1lYXMucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHllc09yTm8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICBpZiAoeWVzT3JObyA9PSAncmVtb3ZlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FkZCB0byByZW1vdmUgaXQgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlT3JFZGl0ID0gJHNjb3BlLmFTZW5zb3IuaW5zdHJ1bWVudF9pZCAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5hU2Vuc1N0YXR1cy5zdGF0dXNfdHlwZV9pZCAhPT0gNCA/IFwiZWRpdFwiIDogXCJjcmVhdGVcIjsgLy8gZWRpdCBkZXBsb3ltZW50IG9yIGNyZWF0aW5nIGEgZGVwbG95bWVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFwZURvd25Ub1JlbW92ZSA9IGNyZWF0ZU9yRWRpdCA9PSAnZWRpdCcgPyAkc2NvcGUuZGVwVGFwZUNvcHkuZmlsdGVyKGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGEub2JqZWN0aXZlX3BvaW50X2lkID09IG9wQ2hvc2VuLm9iamVjdGl2ZV9wb2ludF9pZDsgfSlbMF0gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRhcGVEb3duVGFibGUuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLm9iamVjdGl2ZV9wb2ludF9pZCA9PSBvcENob3Nlbi5vYmplY3RpdmVfcG9pbnRfaWQ7IH0pWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRJbmQgPSBjcmVhdGVPckVkaXQgPT0gJ2VkaXQnID8gJHNjb3BlLmRlcFRhcGVDb3B5Lm1hcChmdW5jdGlvbihvKSB7IHJldHVybiBvLm9iamVjdGl2ZV9wb2ludF9pZDsgfSkuaW5kZXhPZih0YXBlRG93blRvUmVtb3ZlLm9iamVjdGl2ZV9wb2ludF9pZCkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50YXBlRG93blRhYmxlLm1hcChmdW5jdGlvbiAobykgeyByZXR1cm4gby5vYmplY3RpdmVfcG9pbnRfaWQ7IH0pLmluZGV4T2YodGFwZURvd25Ub1JlbW92ZS5vYmplY3RpdmVfcG9pbnRfaWQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcGVEb3duVG9SZW1vdmUub3BfbWVhc3VyZW1lbnRzX2lkICE9PSB1bmRlZmluZWQpICRzY29wZS5yZW1vdmVPUExpc3QucHVzaCh0YXBlRG93blRvUmVtb3ZlLm9wX21lYXN1cmVtZW50c19pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZU9yRWRpdCA9PSAnZWRpdCcgPyAkc2NvcGUuZGVwVGFwZUNvcHkuc3BsaWNlKHRJbmQsIDEpIDogJHNjb3BlLnRhcGVEb3duVGFibGUuc3BsaWNlKHRJbmQsIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiB0aGlzIGVtcHRpZXMgdGhlIHRhYmxlLCBjbGVhciB0aGUgc2Vuc1N0YXR1cyBmaWVsZHMgcmVsYXRlZCB0byB0YXBlZG93bnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZU9yRWRpdCA9PSAnZWRpdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZGVwVGFwZUNvcHkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFN0dWZmQ29weVsxXS52ZGF0dW1faWQgPSAwOyAkc2NvcGUuZGVwU3R1ZmZDb3B5WzFdLmdzX2VsZXZhdGlvbiA9ICcnOyAkc2NvcGUuZGVwU3R1ZmZDb3B5WzFdLndzX2VsZXZhdGlvbiA9ICcnOyAkc2NvcGUuZGVwU3R1ZmZDb3B5WzFdLnNlbnNvcl9lbGV2YXRpb24gPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUudGFwZURvd25UYWJsZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMudmRhdHVtX2lkID0gMDsgJHNjb3BlLmFTZW5zU3RhdHVzLmdzX2VsZXZhdGlvbiA9ICcnOyAkc2NvcGUuYVNlbnNTdGF0dXMud3NfZWxldmF0aW9uID0gJyc7ICRzY29wZS5hU2Vuc1N0YXR1cy5zZW5zb3JfZWxldmF0aW9uID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAvL25ldmVyIG1pbmQsIG1ha2UgaXQgc2VsZWN0ZWQgYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9Qc0ZvclRhcGVEb3duW29wSV0uc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyNlbmRyZWdpb24gdGFwZSBkb3duIHNlY3Rpb24gXHJcblxyXG4gICAgICAgICAgIC8vZ2V0IHRpbWV6b25lIGFuZCB0aW1lc3RhbXAgZm9yIHRoZWlyIHRpbWV6b25lIGZvciBzaG93aW5nLi4gcG9zdC9wdXQgd2lsbCBjb252ZXJ0IGl0IHRvIHV0Y1xyXG4gICAgICAgICAgIHZhciBnZXRUaW1lWm9uZVN0YW1wID0gZnVuY3Rpb24gKGRzZW50KSB7XHJcbiAgICAgICAgICAgICAgIHZhciBzZW5kVGhpcyA9IFtdO1xyXG4gICAgICAgICAgICAgICB2YXIgZDtcclxuXHJcbiAgICAgICAgICAgICAgIGlmIChkc2VudCAhPT0gdW5kZWZpbmVkKSBkID0gbmV3IERhdGUoZHNlbnQpO1xyXG4gICAgICAgICAgICAgICBlbHNlIGQgPSBuZXcgRGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IChkLnRvU3RyaW5nKCkpLnN1YnN0cmluZygzNSk7XHJcbiAgICAgICAgICAgICAgIHZhciB6b25lID0gXCJcIjtcclxuICAgICAgICAgICAgICAgc3dpdGNoIChvZmZzZXQuc3Vic3RyKDAsIDMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICBjYXNlIFwiQ2VuXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgem9uZSA9ICdDU1QnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgY2FzZSBcIkVhc1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgIHpvbmUgPSAnRVNUJztcclxuICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgIGNhc2UgXCJNb3VcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICB6b25lID0gJ01TVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICBjYXNlIFwiUGFjXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgem9uZSA9ICdQU1QnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIHNlbmRUaGlzID0gW2QsIHpvbmVdO1xyXG4gICAgICAgICAgICAgICByZXR1cm4gc2VuZFRoaXM7XHJcbiAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgLy9idXR0b24gY2xpY2sgdG8gc2hvdyBldmVudCBkcm9wZG93biB0byBjaGFuZ2UgaXQgb24gZXhpc3RpbmcgaHdtIChhZG1pbiBvbmx5KVxyXG4gICAgICAgICAgICRzY29wZS5zaG93Q2hhbmdlRXZlbnRERCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgJHNjb3BlLnNob3dFdmVudEREID0gISRzY29wZS5zaG93RXZlbnRERDtcclxuICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAvL2NoYW5nZSBldmVudCA9IGFwcGx5IGl0IHRvIHRoZSAkc2NvcGUuRXZlbnROYW1lXHJcbiAgICAgICAgICAgJHNjb3BlLkNoYW5nZUV2ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAkc2NvcGUuRXZlbnROYW1lID0gJHNjb3BlLmV2ZW50TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7IHJldHVybiBlbC5ldmVudF9pZCA9PSAkc2NvcGUuYWRtaW5DaGFuZ2VkLmV2ZW50X2lkOyB9KVswXS5ldmVudF9uYW1lO1xyXG4gICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgIC8vZ2V0IGRlcGxveW1lbnQgdHlwZXMgZm9yIHNlbnNvciB0eXBlIGNob3NlblxyXG4gICAgICAgICAgICRzY29wZS5nZXREZXBUeXBlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgJHNjb3BlLmZpbHRlcmVkRGVwbG95bWVudFR5cGVzID0gW107XHJcbiAgICAgICAgICAgICAgIHZhciBtYXRjaGluZ1NlbnNEZXBsaXN0ID0gJHNjb3BlLnNlbnNvclR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoc2QpIHsgcmV0dXJuIHNkLnNlbnNvcl90eXBlX2lkID09ICRzY29wZS5hU2Vuc29yLnNlbnNvcl90eXBlX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgLy90aGlzIGlzIDEgc2Vuc29yVHlwZSB3aXRoIGlubmVyIGxpc3Qgb2YgIC5kZXBsb3ltZW50dHlwZXNcclxuICAgICAgICAgICAgICAgJHNjb3BlLmZpbHRlcmVkRGVwbG95bWVudFR5cGVzID0gbWF0Y2hpbmdTZW5zRGVwbGlzdC5kZXBsb3ltZW50dHlwZXM7XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICBpZiAoJHNjb3BlLmZpbHRlcmVkRGVwbG95bWVudFR5cGVzLmxlbmd0aCA9PSAxKSBcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc29yLmRlcGxveW1lbnRfdHlwZV9pZCA9ICRzY29wZS5maWx0ZXJlZERlcGxveW1lbnRUeXBlc1swXS5kZXBsb3ltZW50X3R5cGVfaWQ7XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgIC8vICRzY29wZS5zZXNzaW9uRXZlbnQgPSAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudE5hbWUnKTtcclxuICAgICAgICAgICAkc2NvcGUuTG9nZ2VkSW5NZW1iZXIgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT0gJGNvb2tpZXMuZ2V0KCdtSUQnKTsgfSlbMF07XHJcblxyXG4gICAgICAgICAgICRzY29wZS5hU2Vuc29yID0ge307XHJcbiAgICAgICAgICAgJHNjb3BlLmFTZW5zU3RhdHVzID0ge307XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgJHNjb3BlLnRoaXNTZW5zb3JTaXRlID0gU2Vuc29yU2l0ZTtcclxuXHJcbiAgICAgICAgICAgLy9jYW5jZWxcclxuICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLiBcclxuICAgICAgICAgICAgICAgdmFyIHNlbnNvck9iamVjdFRvU2VuZEJhY2sgPSB0aGlzU2Vuc29yO1xyXG4gICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAvLyBhbnl0aGluZyB5b3Ugd2FudCBjYW4gZ28gaGVyZSBhbmQgd2lsbCBzYWZlbHkgYmUgcnVuIG9uIHRoZSBuZXh0IGRpZ2VzdC4gICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICB2YXIgc2VuZEJhY2sgPSBbc2Vuc29yT2JqZWN0VG9TZW5kQmFja107XHJcbiAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZW5kQmFjayk7XHJcbiAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgIC8vIGlzIGludGVydmFsIGlzIG51bWJlclxyXG4gICAgICAgICAgICRzY29wZS5pc051bSA9IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICAgICAgdmFyIHRoZUV2ZW50ID0gZXZ0IHx8IHdpbmRvdy5ldmVudDtcclxuICAgICAgICAgICAgICAgdmFyIGtleSA9IHRoZUV2ZW50LmtleUNvZGUgfHwgdGhlRXZlbnQud2hpY2g7XHJcbiAgICAgICAgICAgICAgIGlmIChrZXkgIT0gNDYgJiYga2V5ICE9IDQ1ICYmIGtleSA+IDMxICYmIChrZXkgPCA0OCB8fCBrZXkgPiA1NykpIHtcclxuICAgICAgICAgICAgICAgICAgIHRoZUV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICBpZiAodGhlRXZlbnQucHJldmVudERlZmF1bHQpIHRoZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAvL2lzIGl0IFVUQyBvciBsb2NhbCB0aW1lLi5tYWtlIHN1cmUgaXQgc3RheXMgVVRDXHJcbiAgICAgICAgICAgdmFyIGRlYWxXaXRoVGltZVN0YW1wYjRTZW5kID0gZnVuY3Rpb24gKHcpIHtcclxuICAgICAgICAgICAgICAgLy9jaGVjayBhbmQgc2VlIGlmIHRoZXkgYXJlIG5vdCB1c2luZyBVVENcclxuICAgICAgICAgICAgICAgaWYgKHcgPT0gJ3NhdmluZycpe1xyXG4gICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5kZXBTdHVmZkNvcHlbMV0udGltZV96b25lICE9IFwiVVRDXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnZlcnQgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXRjRGF0ZVRpbWVTID0gbmV3IERhdGUoJHNjb3BlLmRlcFN0dWZmQ29weVsxXS50aW1lX3N0YW1wKS50b1VUQ1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBTdHVmZkNvcHlbMV0udGltZV9zdGFtcCA9IHV0Y0RhdGVUaW1lUztcclxuICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU3R1ZmZDb3B5WzFdLnRpbWVfem9uZSA9ICdVVEMnO1xyXG4gICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSAnR01UJyBpcyB0YWNrZWQgb24gc28gaXQgZG9lc24ndCB0cnkgdG8gYWRkIGhycyB0byBtYWtlIHRoZSBhbHJlYWR5IHV0YyBhIHV0YyBpbiBkYlxyXG4gICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gJHNjb3BlLmRlcFN0dWZmQ29weVsxXS50aW1lX3N0YW1wLnRvU3RyaW5nKCkuaW5kZXhPZignR01UJykgKzM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFN0dWZmQ29weVsxXS50aW1lX3N0YW1wID0gJHNjb3BlLmRlcFN0dWZmQ29weVsxXS50aW1lX3N0YW1wLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU2Vuc1N0YXR1cy50aW1lX3pvbmUgIT0gXCJVVENcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIC8vY29udmVydCBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHZhciB1dGNEYXRlVGltZUQgPSBuZXcgRGF0ZSgkc2NvcGUuYVNlbnNTdGF0dXMudGltZV9zdGFtcCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMudGltZV9zdGFtcCA9IHV0Y0RhdGVUaW1lRDtcclxuICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMudGltZV96b25lID0gJ1VUQyc7XHJcbiAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlICdHTVQnIGlzIHRhY2tlZCBvbiBzbyBpdCBkb2Vzbid0IHRyeSB0byBhZGQgaHJzIHRvIG1ha2UgdGhlIGFscmVhZHkgdXRjIGEgdXRjIGluIGRiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgdmFyIERpID0gJHNjb3BlLmFTZW5zU3RhdHVzLnRpbWVfc3RhbXAudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArIDM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zU3RhdHVzLnRpbWVfc3RhbXAgPSAkc2NvcGUuYVNlbnNTdGF0dXMudGltZV9zdGFtcC50b1N0cmluZygpLnN1YnN0cmluZygwLCBEaSk7XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9zYXZlIGFTZW5zb3JcclxuICAgICAgICAgICAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZWRTZW5zb3IgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZFNlblN0YXQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAvL2FkbWluIGNoYW5nZWQgdGhlIGV2ZW50IGZvciB0aGlzIHNlbnNvci4uXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hZG1pbkNoYW5nZWQuZXZlbnRfaWQgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFN0dWZmQ29weVswXS5ldmVudF9pZCA9ICRzY29wZS5hZG1pbkNoYW5nZWQuZXZlbnRfaWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vc2VlIGlmIHRoZXkgdXNlZCBNaW51dGVzIG9yIHNlY29uZHMgZm9yIGludGVydmFsLiBuZWVkIHRvIHN0b3JlIGluIHNlY29uZHNcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkludGVydmFsVHlwZS50eXBlID09IFwiTWludXRlc1wiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU3R1ZmZDb3B5WzBdLmludGVydmFsID0gJHNjb3BlLmRlcFN0dWZmQ29weVswXS5pbnRlcnZhbCAqIDYwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkZWFsV2l0aFRpbWVTdGFtcGI0U2VuZCgnc2F2aW5nJyk7IC8vVVRDIG9yIGxvY2FsP1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgSU5TVFJVTUVOVC51cGRhdGUoeyBpZDogJHNjb3BlLmRlcFN0dWZmQ29weVswXS5pbnN0cnVtZW50X2lkIH0sICRzY29wZS5kZXBTdHVmZkNvcHlbMF0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRTZW5zb3IgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFNlbnNvci5kZXBsb3ltZW50VHlwZSA9ICRzY29wZS5kZXBTdHVmZkNvcHlbMF0uZGVwbG95bWVudF90eXBlX2lkID4gMCA/ICRzY29wZS5kZXBUeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuZGVwbG95bWVudF90eXBlX2lkID09ICRzY29wZS5kZXBTdHVmZkNvcHlbMF0uZGVwbG95bWVudF90eXBlX2lkOyB9KVswXS5tZXRob2QgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFNlbnNvci5ob3VzaW5nVHlwZSA9ICRzY29wZS5kZXBTdHVmZkNvcHlbMF0uaG91c2luZ190eXBlX2lkID4gMCA/ICRzY29wZS5ob3VzZVR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoaCkgeyByZXR1cm4gaC5ob3VzaW5nX3R5cGVfaWQgPT0gJHNjb3BlLmRlcFN0dWZmQ29weVswXS5ob3VzaW5nX3R5cGVfaWQ7IH0pWzBdLnR5cGVfbmFtZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkU2Vuc29yLnNlbnNvckJyYW5kID0gJHNjb3BlLnNlbnNvckJyYW5kTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc2Vuc29yX2JyYW5kX2lkID09ICRzY29wZS5kZXBTdHVmZkNvcHlbMF0uc2Vuc29yX2JyYW5kX2lkOyB9KVswXS5icmFuZF9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkU2Vuc29yLnNlbnNvclR5cGUgPSAkc2NvcGUuc2Vuc29yVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0LnNlbnNvcl90eXBlX2lkID09ICRzY29wZS5kZXBTdHVmZkNvcHlbMF0uc2Vuc29yX3R5cGVfaWQ7IH0pWzBdLnNlbnNvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgSU5TVFJVTUVOVF9TVEFUVVMudXBkYXRlKHsgaWQ6ICRzY29wZS5kZXBTdHVmZkNvcHlbMV0uaW5zdHJ1bWVudF9zdGF0dXNfaWQgfSwgJHNjb3BlLmRlcFN0dWZmQ29weVsxXSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoc3RhdFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZGVhbCB3aXRoIHRhcGVkb3ducy4gcmVtb3ZlL2FkZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcnQgPSAwOyBydCA8ICRzY29wZS5yZW1vdmVPUExpc3QubGVuZ3RoOyBydCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkVG9SZW1vdmUgPSAkc2NvcGUucmVtb3ZlT1BMaXN0W3J0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUF9NRUFTVVJFLmRlbGV0ZSh7IGlkOiBpZFRvUmVtb3ZlIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRhcGVEb3duVGFibGUgPSAkc2NvcGUuZGVwVGFwZUNvcHkubGVuZ3RoID4gMCA/IFtdIDogJHNjb3BlLnRhcGVEb3duVGFibGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhdCA9IDA7IGF0IDwgJHNjb3BlLmRlcFRhcGVDb3B5Lmxlbmd0aDsgYXQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBERVB0aGlzVGFwZSA9ICRzY29wZS5kZXBUYXBlQ29weVthdF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKERFUHRoaXNUYXBlLm9wX21lYXN1cmVtZW50c19pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZXhpc3RpbmcsIHB1dCBpbiBjYXNlIHRoZXkgY2hhbmdlZCBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUF9NRUFTVVJFLnVwZGF0ZSh7IGlkOiBERVB0aGlzVGFwZS5vcF9tZWFzdXJlbWVudHNfaWQgfSwgREVQdGhpc1RhcGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHRhcGVSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFwZVJlc3BvbnNlLm9wX25hbWUgPSBERVB0aGlzVGFwZS5vcF9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFwZVJlc3BvbnNlLlZkYXR1bSA9IERFUHRoaXNUYXBlLlZkYXR1bTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50YXBlRG93blRhYmxlLnB1c2godGFwZVJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9uZXcgb25lIGFkZGVkLCBwb3N0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERFUHRoaXNUYXBlLmluc3RydW1lbnRfc3RhdHVzX2lkID0gc3RhdFJlc3BvbnNlLmluc3RydW1lbnRfc3RhdHVzX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUF9NRUFTVVJFLnNhdmUoREVQdGhpc1RhcGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHRhcGVSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFwZVJlc3BvbnNlLm9wX25hbWUgPSBERVB0aGlzVGFwZS5vcF9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFwZVJlc3BvbnNlLlZkYXR1bSA9IERFUHRoaXNUYXBlLlZkYXR1bTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50YXBlRG93blRhYmxlLnB1c2godGFwZVJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3cgYWRkIGluc3RydW1lbnQgYW5kIGluc3RydW1lbnQgc3RhdHVzIHRvIHNlbmQgYmFja1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFNlblN0YXQgPSBzdGF0UmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkU2VuU3RhdC5zdGF0dXMgPSAnRGVwbG95ZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RydW1lbnRfc3RhdHVzZXNIb2xkZXIgPSAkc2NvcGUuYVNlbnNvci5pbnN0cnVtZW50X3N0YXR1czsgLy9wdXQgdGhlbSBoZXJlIHNvIHRoZXkgY2FuIGJlIHVwZGF0ZWQgYW5kIHJlYWRkZWQgKGFsbCB2ZXJzaW9ucylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc29yID0gdXBkYXRlZFNlbnNvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNTZW5zb3IgPSB1cGRhdGVkU2Vuc29yOyB0aGlzU2Vuc29yLmluc3RydW1lbnRfc3RhdHVzID0gaW5zdHJ1bWVudF9zdGF0dXNlc0hvbGRlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc1N0YXR1cyA9IHVwZGF0ZWRTZW5TdGF0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zU3RhdHVzLnRpbWVfc3RhbXAgPSBnZXREYXRlVGltZVBhcnRzKCRzY29wZS5hU2Vuc1N0YXR1cy50aW1lX3N0YW1wKTsvL3RoaXMga2VlcHMgaXQgYXMgdXRjIGluIGRpc3BsYXlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmQgPSB0aGlzU2Vuc29yLmluc3RydW1lbnRfc3RhdHVzLm1hcChmdW5jdGlvbiAoaSkgeyByZXR1cm4gaS5zdGF0dXNfdHlwZV9pZDsgfSkuaW5kZXhPZigxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9zdGF0dXNbaW5kXSA9ICRzY29wZS5hU2Vuc1N0YXR1cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBTdHVmZkNvcHkgPSBbXTsgJHNjb3BlLkludGVydmFsVHlwZSA9IHsgdHlwZTogJ1NlY29uZHMnIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudmlldy5ERVB2YWwgPSAnZGV0YWlsJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiU2Vuc29yIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJlcnJvciBzYXZpbmcgc2Vuc29yIHN0YXR1czogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJlcnJvciBzYXZpbmcgc2Vuc29yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICB9Oy8vZW5kIHNhdmUoKVxyXG5cclxuICAgICAgICAgICAvL2NyZWF0ZSAoUE9TVCkgYSBkZXBsb3llZCBzZW5zb3IgY2xpY2tcclxuICAgICAgICAgICAkc2NvcGUuZGVwbG95ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICBpZiAodGhpcy5TZW5zb3JGb3JtLiR2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgLy9zZWUgaWYgdGhleSB1c2VkIE1pbnV0ZXMgb3Igc2Vjb25kcyBmb3IgaW50ZXJ2YWwuIG5lZWQgdG8gc3RvcmUgaW4gc2Vjb25kc1xyXG4gICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5JbnRlcnZhbFR5cGUudHlwZSA9PSBcIk1pbnV0ZXNcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNvci5pbnRlcnZhbCA9ICRzY29wZS5hU2Vuc29yLmludGVydmFsICogNjA7XHJcbiAgICAgICAgICAgICAgICAgICAvL3NldCBldmVudF9pZFxyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zb3IuZXZlbnRfaWQgPSAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudElEJyk7XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNvci5zaXRlX2lkID0gU2Vuc29yU2l0ZS5zaXRlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgZGVhbFdpdGhUaW1lU3RhbXBiNFNlbmQoJ2RlcGxveScpOyAvL1VUQyBvciBsb2NhbD9cclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc1N0YXR1cy5zdGF0dXNfdHlwZV9pZCA9IDE7IC8vZGVwbG95ZWQgc3RhdHVzXHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMubWVtYmVyX2lkID0gJGNvb2tpZXMuZ2V0KCdtSUQnKTsgLy91c2VyIHRoYXQgbG9nZ2VkIGluIGlzIGRlcGxveWVyXHJcbiAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlZFNlbnNvciA9IHt9OyB2YXIgZGVwU2VuU3RhdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgIC8vREVQTE9ZIFBST1BPU0VEIG9yIENSRUFURSBORVcgZGVwbG95bWVudD9cclxuICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNlbnNvci5pbnN0cnVtZW50X2lkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAvL3B1dCBpbnN0cnVtZW50LCBwb3N0IHN0YXR1cyBmb3IgZGVwbG95aW5nIFBST1BPU0VEIHNlbnNvclxyXG4gICAgICAgICAgICAgICAgICAgICAgIElOU1RSVU1FTlQudXBkYXRlKHsgaWQ6ICRzY29wZS5hU2Vuc29yLmluc3RydW1lbnRfaWQgfSwgJHNjb3BlLmFTZW5zb3IpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY3JlYXRlIGluc3RydW1lbnRzdGF0dXMgdG9vIG5lZWQ6IHN0YXR1c190eXBlX2lkIGFuZCBpbnN0cnVtZW50X2lkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRTZW5zb3IgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFNlbnNvci5kZXBsb3ltZW50VHlwZSA9ICRzY29wZS5hU2Vuc29yLmRlcGxveW1lbnRUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkU2Vuc29yLmhvdXNpbmdUeXBlID0gcmVzcG9uc2UuaG91c2luZ190eXBlX2lkID4gMCA/ICRzY29wZS5ob3VzZVR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoaCkgeyByZXR1cm4gaC5ob3VzaW5nX3R5cGVfaWQgPT0gcmVzcG9uc2UuaG91c2luZ190eXBlX2lkOyB9KVswXS50eXBlX25hbWUgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFNlbnNvci5zZW5zb3JCcmFuZCA9ICRzY29wZS5zZW5zb3JCcmFuZExpc3QuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnNlbnNvcl9icmFuZF9pZCA9PSByZXNwb25zZS5zZW5zb3JfYnJhbmRfaWQ7IH0pWzBdLmJyYW5kX25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRTZW5zb3Iuc2Vuc29yVHlwZSA9ICRzY29wZS5zZW5zb3JUeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQuc2Vuc29yX3R5cGVfaWQgPT0gcmVzcG9uc2Uuc2Vuc29yX3R5cGVfaWQ7IH0pWzBdLnNlbnNvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zU3RhdHVzLmluc3RydW1lbnRfaWQgPSByZXNwb25zZS5pbnN0cnVtZW50X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBJTlNUUlVNRU5UX1NUQVRVUy5zYXZlKCRzY29wZS5hU2Vuc1N0YXR1cykuJHByb21pc2UudGhlbihmdW5jdGlvbiAoc3RhdFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FueSB0YXBlIGRvd25zP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS50YXBlRG93blRhYmxlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB0ID0gMDsgdCA8ICRzY29wZS50YXBlRG93blRhYmxlLmxlbmd0aDsgdCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzVGFwZSA9ICRzY29wZS50YXBlRG93blRhYmxlW3RdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzVGFwZS5pbnN0cnVtZW50X3N0YXR1c19pZCA9IHN0YXRSZXNwb25zZS5pbnN0cnVtZW50X3N0YXR1c19pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vUE9TVCBJVC8vL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUF9NRUFTVVJFLnNhdmUodGhpc1RhcGUpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYnVpbGQgdGhlIGNyZWF0ZWRTZW5zb3IgdG8gc2VuZCBiYWNrIGFuZCBhZGQgdG8gdGhlIGxpc3QgcGFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwU2VuU3RhdCA9IHN0YXRSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYWRkIFN0YXR1c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwU2VuU3RhdC5zdGF0dXMgPSAnRGVwbG95ZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFNlbnNvci5pbnN0cnVtZW50X3N0YXR1cyA9IFtkZXBTZW5TdGF0LCAkc2NvcGUucHJldmlvdXNTdGF0ZVN0YXR1c107ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFueXRoaW5nIHlvdSB3YW50IGNhbiBnbyBoZXJlIGFuZCB3aWxsIHNhZmVseSBiZSBydW4gb24gdGhlIG5leHQgZGlnZXN0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiU2Vuc29yIGRlcGxveWVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9ICRzY29wZS53aGljaEJ1dHRvbiA9PSAnZGVwbG95UCcgPyAncHJvcG9zZWREZXBsb3llZCcgOiAnbmV3RGVwbG95ZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW5kQmFjayA9IFtjcmVhdGVkU2Vuc29yLCBzdGF0ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uoc2VuZEJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAvL3Bvc3QgaW5zdHJ1bWVudCBhbmQgc3RhdHVzIGZvciBkZXBsb3lpbmcgTkVXIHNlbnNvclxyXG4gICAgICAgICAgICAgICAgICAgICAgIElOU1RSVU1FTlQuc2F2ZSgkc2NvcGUuYVNlbnNvcikuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jcmVhdGUgaW5zdHJ1bWVudHN0YXR1cyB0b28gbmVlZDogc3RhdHVzX3R5cGVfaWQgYW5kIGluc3RydW1lbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFNlbnNvciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkU2Vuc29yLmRlcGxveW1lbnRUeXBlID0gcmVzcG9uc2UuZGVwbG95bWVudF90eXBlX2lkICE9PSBudWxsICYmIHJlc3BvbnNlLmRlcGxveW1lbnRfdHlwZV9pZCAhPT0gdW5kZWZpbmVkID8gJHNjb3BlLmRlcFR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5kZXBsb3ltZW50X3R5cGVfaWQgPT0gcmVzcG9uc2UuZGVwbG95bWVudF90eXBlX2lkOyB9KVswXS5tZXRob2QgOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkU2Vuc29yLmhvdXNpbmdUeXBlID0gcmVzcG9uc2UuaG91c2luZ190eXBlX2lkICE9PSBudWxsICYmIHJlc3BvbnNlLmhvdXNpbmdfdHlwZV9pZCAhPT0gdW5kZWZpbmVkID8gJHNjb3BlLmhvdXNlVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChoKSB7IHJldHVybiBoLmhvdXNpbmdfdHlwZV9pZCA9PSByZXNwb25zZS5ob3VzaW5nX3R5cGVfaWQ7IH0pWzBdLnR5cGVfbmFtZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkU2Vuc29yLnNlbnNvckJyYW5kID0gJHNjb3BlLnNlbnNvckJyYW5kTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc2Vuc29yX2JyYW5kX2lkID09IHJlc3BvbnNlLnNlbnNvcl9icmFuZF9pZDsgfSlbMF0uYnJhbmRfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFNlbnNvci5zZW5zb3JUeXBlID0gJHNjb3BlLnNlbnNvclR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5zZW5zb3JfdHlwZV9pZCA9PSByZXNwb25zZS5zZW5zb3JfdHlwZV9pZDsgfSlbMF0uc2Vuc29yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMuaW5zdHJ1bWVudF9pZCA9IHJlc3BvbnNlLmluc3RydW1lbnRfaWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBJTlNUUlVNRU5UX1NUQVRVUy5zYXZlKCRzY29wZS5hU2Vuc1N0YXR1cykuJHByb21pc2UudGhlbihmdW5jdGlvbiAoc3RhdFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FueSB0YXBlIGRvd25zP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS50YXBlRG93blRhYmxlLmxlbmd0aCA+IDApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgJHNjb3BlLnRhcGVEb3duVGFibGUubGVuZ3RoOyB0Kyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc1RhcGUgPSAkc2NvcGUudGFwZURvd25UYWJsZVt0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1RhcGUuaW5zdHJ1bWVudF9zdGF0dXNfaWQgPSBzdGF0UmVzcG9uc2UuaW5zdHJ1bWVudF9zdGF0dXNfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vL1BPU1QgSVQvLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT1BfTUVBU1VSRS5zYXZlKHRoaXNUYXBlKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9idWlsZCB0aGUgY3JlYXRlZFNlbnNvciB0byBzZW5kIGJhY2sgYW5kIGFkZCB0byB0aGUgbGlzdCBwYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBTZW5TdGF0ID0gc3RhdFJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwU2VuU3RhdC5zdGF0dXMgPSAnRGVwbG95ZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFNlbnNvci5pbnN0cnVtZW50X3N0YXR1cyA9IFtkZXBTZW5TdGF0XTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlNlbnNvciBkZXBsb3llZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9ICRzY29wZS53aGljaEJ1dHRvbiA9PSAnZGVwbG95UCcgPyAncHJvcG9zZWREZXBsb3llZCcgOiAnbmV3RGVwbG95ZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbmRCYWNrID0gW2NyZWF0ZWRTZW5zb3IsIHN0YXRlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHNlbmRCYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfTsvL2VuZCBkZXBsb3koKVxyXG5cclxuICAgICAgICAgICAvL2RlbGV0ZSBhU2Vuc29yIGFuZCBzZW5zb3Igc3RhdHVzZXNcclxuICAgICAgICAgICAkc2NvcGUuZGVsZXRlUyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgLy9UT0RPOjogRGVsZXRlIHRoZSBmaWxlcyBmb3IgdGhpcyBzZW5zb3IgdG9vIG9yIHJlYXNzaWduIHRvIHRoZSBTaXRlPz8gU2VydmljZXMgb3IgY2xpZW50IGhhbmRsaW5nP1xyXG4gICAgICAgICAgICAgICB2YXIgRGVsZXRlTW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLmFTZW5zb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlNlbnNvclwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICBEZWxldGVNb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChzZW5zb3JUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgLy90aGlzIHdpbGwgZGVsZXRlIHRoZSBpbnN0cnVtZW50IGFuZCBhbGwgaXQncyBzdGF0dXNlc1xyXG4gICAgICAgICAgICAgICAgICAgSU5TVFJVTUVOVC5kZWxldGUoeyBpZDogc2Vuc29yVG9SZW1vdmUuaW5zdHJ1bWVudF9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRGVwU2Vuc29yRmlsZXMgPSBbXTsgLy9jbGVhciBvdXQgc2Vuc29yRmlsZXMgZm9yIHRoaXMgc2Vuc29yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFNlbnNJbWFnZUZpbGVzID0gW107IC8vY2xlYXIgb3V0IGltYWdlIGZpbGVzIGZvciB0aGlzIHNlbnNvclxyXG4gICAgICAgICAgICAgICAgICAgICAgIC8vbm93IHJlbW92ZSBhbGwgdGhlc2UgZmlsZXMgZnJvbSBTaXRlRmlsZXNcclxuICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9ICRzY29wZS5hbGxTRmlsZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChsLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hbGxTRmlsZXNbbF0uaW5zdHJ1bWVudF9pZCA9PSBzZW5zb3JUb1JlbW92ZS5pbnN0cnVtZW50X2lkKSAkc2NvcGUuYWxsU0ZpbGVzLnNwbGljZShsLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgLy91cGRhdGVzIHRoZSBmaWxlIGxpc3Qgb24gdGhlIHNpdGVkYXNoYm9hcmRcclxuICAgICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuYWxsU0ZpbGVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlNlbnNvciBSZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW5kQmFjayA9IFtcImRlXCIsICdkZWxldGVkJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uoc2VuZEJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgIH0pOy8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgaWYgKHRoaXNTZW5zb3IgIT0gXCJlbXB0eVwiKSB7XHJcbiAgICAgICAgICAgICAgIC8vYWN0aW9uczogJ2RlcFByb3AnLCAnZWRpdERlcCcsICdyZXRyaWV2ZScsICdlZGl0UmV0J1xyXG4gICAgICAgICAgICAgICAvLyNyZWdpb24gZXhpc3RpbmcgZGVwbG95ZWQgU2Vuc29yIC4uIGJyZWFrIGFwYXJ0IHRoZSAndGhpc1NlbnNvcicgaW50byAnYVNlbnNvcicgYW5kICdhU2Vuc1N0YXR1cydcclxuICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zb3IgPSBhbmd1bGFyLmNvcHkodGhpc1NlbnNvcik7XHJcbiAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc1N0YXR1cyA9IGFuZ3VsYXIuY29weSh0aGlzU2Vuc29yLmluc3RydW1lbnRfc3RhdHVzWzBdKTtcclxuICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvckRhdGFOV0lTID0gKCgkc2NvcGUuYVNlbnNvci5zZW5zb3JfdHlwZV9pZCA9PSAyIHx8ICRzY29wZS5hU2Vuc29yLnNlbnNvcl90eXBlX2lkID09IDUpIHx8ICRzY29wZS5hU2Vuc29yLnNlbnNvcl90eXBlX2lkID09IDYpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAkc2NvcGUuZ2V0RGVwVHlwZXMoKTsvL3BvcHVsYXRlICRzY29wZS5maWx0ZXJlZERlcGxveW1lbnRUeXBlcyBmb3IgZHJvcGRvd24gb3B0aW9uc1xyXG4gICAgICAgICAgICAgICAkc2NvcGUuSW50ZXJ2YWxUeXBlLnR5cGUgPSAnU2Vjb25kcyc7IC8vZGVmYXVsdFxyXG4gICAgICAgICAgICAgICBpZiAoJHNjb3BlLnNlbnNvckRhdGFOV0lTKSB7XHJcbiAgICAgICAgICAgICAgICAgICAvL0ZJTEUuVkFMSURBVEVEIGJlaW5nIHVzZWQgdG8gc3RvcmUgMSBpZiB0aGlzIGlzIGFuIG53aXMgZmlsZSBtZXRhZGF0YSBsaW5rXHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yTldJU0ZpbGVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhaSA9ICRzY29wZS5EZXBTZW5zb3JGaWxlcy5sZW5ndGggLSAxOyBhaSA+PSAwOyBhaS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5EZXBTZW5zb3JGaWxlc1thaV0uaXNfbndpcyA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZW5zb3JOV0lTRmlsZXMucHVzaCgkc2NvcGUuRGVwU2Vuc29yRmlsZXNbYWldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRlcFNlbnNvckZpbGVzLnNwbGljZShhaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgdmFyIGR0ID0gZ2V0VGltZVpvbmVTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNGaWxlID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0RGID0ge307XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgIC8vYXJlIHdlIGRlcGxveWluZyBhIHByb3Bvc2VkIHNlbnNvciBvciBlZGl0aW5nIGEgZGVwbG95ZWQgc2Vuc29yPz9cclxuICAgICAgICAgICAgICAgaWYgKHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9zdGF0dXNbMF0uc3RhdHVzID09IFwiUHJvcG9zZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgLy9kZXBsb3lpbmcgcHJvcG9zZWRcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5wcmV2aW91c1N0YXRlU3RhdHVzID0gYW5ndWxhci5jb3B5KHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9zdGF0dXNbMF0pOyAvL2hvbGQgdGhlIHByb3Bvc2VkIHN0YXRlIChwcm9wb3NlZCB0byBkZXBsb3llZClcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS53aGljaEJ1dHRvbiA9ICdkZXBsb3lQJztcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc29yLmludGVydmFsID0gJHNjb3BlLmFTZW5zb3IuaW50ZXJ2YWwgPT09IDAgPyBudWxsIDogJHNjb3BlLmFTZW5zb3IuaW50ZXJ2YWw7IC8vY2xlYXIgb3V0IHRoZSAnMCcgdmFsdWUgaGVyZSAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAvL2Rpc3BsYXlpbmcgZGF0ZSAvIHRpbWUgaXQgdXNlcidzIHRpbWV6b25lXHJcbiAgICAgICAgICAgICAgICAgICB2YXIgdGltZVBhcnRzID0gZ2V0VGltZVpvbmVTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zU3RhdHVzLnRpbWVfc3RhbXAgPSB0aW1lUGFydHNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMudGltZV96b25lID0gdGltZVBhcnRzWzFdOyAvL3dpbGwgYmUgY29udmVydGVkIHRvIHV0YyBvbiBwb3N0L3B1dFxyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zU3RhdHVzLm1lbWJlcl9pZCA9ICRjb29raWVzLmdldCgnbUlEJyk7IC8vIG1lbWJlciBsb2dnZWQgaW4gaXMgZGVwbG95aW5nIGl0XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuRXZlbnROYW1lID0gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJyk7XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuRGVwbG95ZXIgPSAkc2NvcGUuTG9nZ2VkSW5NZW1iZXI7XHJcbiAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAvL2VkaXRpbmcgZGVwbG95ZWRcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS53aGljaEJ1dHRvbiA9ICdlZGl0JztcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc29yLmludGVydmFsID0gJHNjb3BlLmFTZW5zb3IuaW50ZXJ2YWwgPT09IDAgPyBudWxsIDogJHNjb3BlLmFTZW5zb3IuaW50ZXJ2YWw7IC8vY2xlYXIgb3V0IHRoZSAnMCcgdmFsdWUgaGVyZSAgIFxyXG4gICAgICAgICAgICAgICAgICAgLy9nZXQgdGhpcyBkZXBsb3llZCBzZW5zb3IncyBldmVudCBuYW1lXHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuRXZlbnROYW1lID0gJHNjb3BlLmV2ZW50TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUuZXZlbnRfaWQgPT0gJHNjb3BlLmFTZW5zb3IuZXZlbnRfaWQ7IH0pWzBdLmV2ZW50X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAvL2RhdGUgZm9ybWF0dGluZy4gdGhpcyBrZWVwcyBpdCBpbiB1dGMgZm9yIGRpc3BsYXlcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc1N0YXR1cy50aW1lX3N0YW1wID0gZ2V0RGF0ZVRpbWVQYXJ0cygkc2NvcGUuYVNlbnNTdGF0dXMudGltZV9zdGFtcCk7XHJcbiAgICAgICAgICAgICAgICAgICAvL2dldCBjb2xsZWN0aW9uIG1lbWJlcidzIG5hbWUgXHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuRGVwbG95ZXIgPSAkc2NvcGUuYVNlbnNTdGF0dXMubWVtYmVyX2lkICE9PSBudWxsIHx8ICRzY29wZS5hU2Vuc1N0YXR1cy5tZW1iZXJfaWQgIT09IHVuZGVmaW5lZCA/IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1lbWJlcl9pZCA9PSAkc2NvcGUuYVNlbnNTdGF0dXMubWVtYmVyX2lkOyB9KVswXSA6IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgT1BfTUVBU1VSRS5nZXRJbnN0U3RhdE9QTWVhc3VyZXMoe2luc3RydW1lbnRTdGF0dXNJZDogJHNjb3BlLmFTZW5zU3RhdHVzLmluc3RydW1lbnRfc3RhdHVzX2lkfSkuJHByb21pc2UudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCByZXNwb25zZS5sZW5ndGg7IHIrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Vuc01lYXN1cmVzID0gcmVzcG9uc2Vbcl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3aGljaE9QID0gc2l0ZU9Qcy5maWx0ZXIoZnVuY3Rpb24gKG9wKSB7IHJldHVybiBvcC5vYmplY3RpdmVfcG9pbnRfaWQgPT0gcmVzcG9uc2Vbcl0ub2JqZWN0aXZlX3BvaW50X2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vuc01lYXN1cmVzLmVsZXZhdGlvbiA9IHdoaWNoT1AuZWxldl9mdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vuc01lYXN1cmVzLlZkYXR1bSA9ICRzY29wZS52ZXJ0RGF0dW1MaXN0LmZpbHRlcihmdW5jdGlvbiAodmQpIHsgcmV0dXJuIHZkLmRhdHVtX2lkID09IHdoaWNoT1AudmRhdHVtX2lkOyB9KVswXS5kYXR1bV9hYmJyZXZpYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbnNNZWFzdXJlcy5vcF9uYW1lID0gd2hpY2hPUC5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudGFwZURvd25UYWJsZS5wdXNoKHNlbnNNZWFzdXJlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2dvIHRocm91Z2ggT1BzRm9yVGFwZURvd24gYW5kIGFkZCBzZWxlY3RlZCBQcm9wZXJ0eS5cclxuICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRzY29wZS5PUHNGb3JUYXBlRG93bi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAvL2ZvciBlYWNoIG9uZSwgaWYgcmVzcG9uc2UgaGFzIHRoaXMgaWQsIGFkZCAnc2VsZWN0ZWQ6dHJ1ZScgZWxzZSBhZGQgJ3NlbGVjdGVkOmZhbHNlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHJlc3BvbnNlLmxlbmd0aDsgeSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2VbeV0ub2JqZWN0aXZlX3BvaW50X2lkID09ICRzY29wZS5PUHNGb3JUYXBlRG93bltpXS5vYmplY3RpdmVfcG9pbnRfaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BzRm9yVGFwZURvd25baV0uc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSByZXNwb25zZS5sZW5ndGg7IC8vZW5zdXJlcyBpdCBkb2Vzbid0IHNldCBpdCBhcyBmYWxzZSBhZnRlciBzZXR0aW5nIGl0IGFzIHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PUHNGb3JUYXBlRG93bltpXS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BzRm9yVGFwZURvd25baV0uc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAvL2VuZCBpZiB0aGlzU2l0ZUhvdXNpbmdzICE9IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gZXhpc3RpbmcgU2Vuc29yXHJcbiAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgLy8jcmVnaW9uIERlcGxveWluZyBuZXcgU2Vuc29yXHJcbiAgICAgICAgICAgICAgICRzY29wZS53aGljaEJ1dHRvbiA9ICdkZXBsb3knO1xyXG4gICAgICAgICAgICAgICAkc2NvcGUuSW50ZXJ2YWxUeXBlLnR5cGUgPSAnU2Vjb25kcyc7IC8vZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAvL2Rpc3BsYXlpbmcgZGF0ZSAvIHRpbWUgaXQgdXNlcidzIHRpbWV6b25lXHJcbiAgICAgICAgICAgICAgIHZhciBEZXB0aW1lUGFydHMgPSBnZXRUaW1lWm9uZVN0YW1wKCk7XHJcbiAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc1N0YXR1cy50aW1lX3N0YW1wID0gRGVwdGltZVBhcnRzWzBdO1xyXG4gICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMudGltZV96b25lID0gRGVwdGltZVBhcnRzWzFdOyAvL3dpbGwgYmUgY29udmVydGVkIHRvIHV0YyBvbiBwb3N0L3B1dCAgICAgICAgICBcclxuICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zU3RhdHVzLm1lbWJlcl9pZCA9ICRjb29raWVzLmdldCgnbUlEJyk7IC8vIG1lbWJlciBsb2dnZWQgaW4gaXMgZGVwbG95aW5nIGl0XHJcbiAgICAgICAgICAgICAgICRzY29wZS5FdmVudE5hbWUgPSAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudE5hbWUnKTtcclxuICAgICAgICAgICAgICAgJHNjb3BlLkRlcGxveWVyID0gJHNjb3BlLkxvZ2dlZEluTWVtYmVyO1xyXG4gICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBuZXcgU2Vuc29yXHJcbiAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAkc2NvcGUubXlEYXRhID0gWyRzY29wZS5hU2Vuc1N0YXR1cy5zZW5zb3JfZWxldmF0aW9uLCAkc2NvcGUuYVNlbnNTdGF0dXMud3NfZWxldmF0aW9uLCAkc2NvcGUuYVNlbnNTdGF0dXMuZ3NfZWxldmF0aW9uXTtcclxuICAgICAgICAgICAgLy9lZGl0IGJ1dHRvbiBjbGlja2VkLiBtYWtlIGNvcHkgb2YgZGVwbG95ZWQgaW5mbyBcclxuICAgICAgICAgICAkc2NvcGUud2FubmFFZGl0RGVwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAkc2NvcGUudmlldy5ERVB2YWwgPSAnZWRpdCc7XHJcbiAgICAgICAgICAgICAgICRzY29wZS5kZXBTdHVmZkNvcHkgPSBbYW5ndWxhci5jb3B5KCRzY29wZS5hU2Vuc29yKSwgYW5ndWxhci5jb3B5KCRzY29wZS5hU2Vuc1N0YXR1cyldO1xyXG4gICAgICAgICAgICAgICAkc2NvcGUuZGVwVGFwZUNvcHkgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLnRhcGVEb3duVGFibGUpO1xyXG4gICAgICAgICAgIH07XHJcbiAgICAgICAgICAgJHNjb3BlLmNhbmNlbERlcEVkaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICRzY29wZS52aWV3LkRFUHZhbCA9ICdkZXRhaWwnO1xyXG4gICAgICAgICAgICAgICAkc2NvcGUuZGVwU3R1ZmZDb3B5ID0gW107XHJcbiAgICAgICAgICAgICAgICRzY29wZS5kZXBUYXBlQ29weSA9IFtdO1xyXG4gICAgICAgICAgICAgICAvL01BS0UgU1VSRSBBTEwgU0VMRUNURUQgT1AnUyBTVEFZIFNFTEVDVEVEXHJcbiAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLk9Qc0ZvclRhcGVEb3duLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAvL2ZvciBlYWNoIG9uZSwgaWYgcmVzcG9uc2UgaGFzIHRoaXMgaWQsIGFkZCAnc2VsZWN0ZWQ6dHJ1ZScgZWxzZSBhZGQgJ3NlbGVjdGVkOmZhbHNlJ1xyXG4gICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCAkc2NvcGUudGFwZURvd25UYWJsZS5sZW5ndGg7IHkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUudGFwZURvd25UYWJsZVt5XS5vYmplY3RpdmVfcG9pbnRfaWQgPT0gJHNjb3BlLk9Qc0ZvclRhcGVEb3duW2ldLm9iamVjdGl2ZV9wb2ludF9pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BzRm9yVGFwZURvd25baV0uc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gJHNjb3BlLnRhcGVEb3duVGFibGUubGVuZ3RoOyAvL2Vuc3VyZXMgaXQgZG9lc24ndCBzZXQgaXQgYXMgZmFsc2UgYWZ0ZXIgc2V0dGluZyBpdCBhcyB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BzRm9yVGFwZURvd25baV0uc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnRhcGVEb3duVGFibGUubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PUHNGb3JUYXBlRG93bltpXS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgfV0pOyAvL2VuZCBTRU5TT1JcclxuXHJcbiAgICAvLyBSZXRyaWV2ZSBhIFNlbnNvciBtb2RhbFxyXG4gICAgTW9kYWxDb250cm9sbGVycy5jb250cm9sbGVyKCdzZW5zb3JSZXRyaWV2YWxNb2RhbEN0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyR0aW1lb3V0JywgJyRjb29raWVzJywgJyRodHRwJywgJyR1aWJNb2RhbEluc3RhbmNlJywgJyR1aWJNb2RhbCcsICd0aGlzU2Vuc29yJywgJ1NlbnNvclNpdGUnLCAnc2l0ZU9QcycsICdhbGxFdmVudExpc3QnLCAnYWxsVkRhdHVtTGlzdCcsICdhbGxNZW1iZXJzJywgJ2FsbFN0YXR1c1R5cGVzJywgJ2FsbEluc3RDb2xsQ29uZCcsICdJTlNUUlVNRU5UJywgJ0lOU1RSVU1FTlRfU1RBVFVTJywgJ09QX01FQVNVUkUnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICR0aW1lb3V0LCAkY29va2llcywgJGh0dHAsICR1aWJNb2RhbEluc3RhbmNlLCAkdWliTW9kYWwsIHRoaXNTZW5zb3IsIFNlbnNvclNpdGUsIHNpdGVPUHMsIGFsbEV2ZW50TGlzdCwgYWxsVkRhdHVtTGlzdCwgYWxsTWVtYmVycywgYWxsU3RhdHVzVHlwZXMsIGFsbEluc3RDb2xsQ29uZCwgSU5TVFJVTUVOVCwgSU5TVFJVTUVOVF9TVEFUVVMsIE9QX01FQVNVUkUpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmFTZW5zb3IgPSB0aGlzU2Vuc29yO1xyXG4gICAgICAgICAgICAkc2NvcGUuRXZlbnROYW1lID0gYWxsRXZlbnRMaXN0LmZpbHRlcihmdW5jdGlvbiAocikge3JldHVybiByLmV2ZW50X2lkID09ICRzY29wZS5hU2Vuc29yLmV2ZW50X2lkO30pWzBdLmV2ZW50X25hbWU7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICRzY29wZS5kZXBTZW5zU3RhdHVzID0gYW5ndWxhci5jb3B5KHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9zdGF0dXNbMF0pO1xyXG4gICAgICAgICAgICB2YXIgaXNEYXRlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCRzY29wZS5kZXBTZW5zU3RhdHVzLnRpbWVfc3RhbXApID09PSAnW29iamVjdCBEYXRlXSc7XHJcbiAgICAgICAgICAgIGlmIChpc0RhdGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgeSA9ICRzY29wZS5kZXBTZW5zU3RhdHVzLnRpbWVfc3RhbXAuc3Vic3RyKDAsIDQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG0gPSAkc2NvcGUuZGVwU2Vuc1N0YXR1cy50aW1lX3N0YW1wLnN1YnN0cig1LCAyKSAtIDE7IC8vc3VidHJhY3QgMSBmb3IgaW5kZXggdmFsdWUgKEphbnVhcnkgaXMgMClcclxuICAgICAgICAgICAgICAgIHZhciBkID0gJHNjb3BlLmRlcFNlbnNTdGF0dXMudGltZV9zdGFtcC5zdWJzdHIoOCwgMik7XHJcbiAgICAgICAgICAgICAgICB2YXIgaCA9ICRzY29wZS5kZXBTZW5zU3RhdHVzLnRpbWVfc3RhbXAuc3Vic3RyKDExLCAyKTtcclxuICAgICAgICAgICAgICAgIHZhciBtaSA9ICRzY29wZS5kZXBTZW5zU3RhdHVzLnRpbWVfc3RhbXAuc3Vic3RyKDE0LCAyKTtcclxuICAgICAgICAgICAgICAgIHZhciBzZWMgPSAkc2NvcGUuZGVwU2Vuc1N0YXR1cy50aW1lX3N0YW1wLnN1YnN0cigxNywgMik7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU2Vuc1N0YXR1cy50aW1lX3N0YW1wID0gbmV3IERhdGUoeSwgbSwgZCwgaCwgbWksIHNlYyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCRzY29wZS5kZXBTZW5zU3RhdHVzLnZkYXR1bV9pZCAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5kZXBTZW5zU3RhdHVzLnZkYXR1bV9pZCA+IDApXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU2Vuc1N0YXR1cy5WRGF0dW0gPSBhbGxWRGF0dW1MaXN0LmZpbHRlcihmdW5jdGlvbiAodikgeyByZXR1cm4gdi5kYXR1bV9pZCA9PSAkc2NvcGUuZGVwU2Vuc1N0YXR1cy52ZGF0dW1faWQ7IH0pWzBdLmRhdHVtX2FiYnJldmlhdGlvbjtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5PUHNGb3JUYXBlRG93biA9IHNpdGVPUHM7XHJcbiAgICAgICAgICAgICRzY29wZS5PUHNQcmVzZW50ID0gc2l0ZU9Qcy5sZW5ndGggPiAwID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAkc2NvcGUudmVydERhdHVtTGlzdCA9IGFsbFZEYXR1bUxpc3Q7XHJcbiAgICAgICAgICAgICRzY29wZS5yZW1vdmVPUExpc3QgPSBbXTtcclxuICAgICAgICAgICAgJHNjb3BlLnRhcGVEb3duVGFibGUgPSBbXTsgLy9ob2xkZXIgb2YgdGFwZWRvd24gT1BfTUVBU1VSRU1FTlRTXHJcbiAgICAgICAgICAgICRzY29wZS5ERVB0YXBlRG93blRhYmxlID0gW107IC8vaG9sZHMgYW55IGRlcGxveWVkIHRhcGVkb3duc1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLkRlcGxveWVyID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRzY29wZS5kZXBTZW5zU3RhdHVzLm1lbWJlcl9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICRzY29wZS53aGljaEJ1dHRvbiA9ICdSZXRyaWV2ZSc7XHJcbiAgICAgICAgICAgICRzY29wZS5zdGF0dXNUeXBlTGlzdCA9IGFsbFN0YXR1c1R5cGVzLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcy5zdGF0dXMgPT0gXCJSZXRyaWV2ZWRcIiB8fCBzLnN0YXR1cyA9PSBcIkxvc3RcIjsgfSk7XHJcbiAgICAgICAgICAgICRzY29wZS5jb2xsZWN0Q29uZExpc3QgPSBhbGxJbnN0Q29sbENvbmQ7XHJcbiAgICAgICAgICAgICRzY29wZS50aW1lWm9uZUxpc3QgPSBbJ1VUQycsICdQU1QnLCAnTVNUJywgJ0NTVCcsICdFU1QnXTtcclxuICAgICAgICAgICAgJHNjb3BlLnVzZXJSb2xlID0gJGNvb2tpZXMuZ2V0KCd1c2Vyc1JvbGUnKTtcclxuICAgICAgICAgICAgLy9mb3JtYXR0ZXIgZm9yIGRhdGUvdGltZSBhbmQgY2hvc2VuIHpvbmUgYmFzZWQgb24gdGhlaXIgbG9jYXRpb25cclxuICAgICAgICAgICAgdmFyIGdldFRpbWVab25lU3RhbXAgPSBmdW5jdGlvbiAoZHNlbnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzZW5kVGhpcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGQ7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRzZW50ICE9PSB1bmRlZmluZWQpIGQgPSBuZXcgRGF0ZShkc2VudCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGQgPSBuZXcgRGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSAoZC50b1N0cmluZygpKS5zdWJzdHJpbmcoMzUpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHpvbmUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChvZmZzZXQuc3Vic3RyKDAsIDMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkNlblwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB6b25lID0gJ0NTVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJFYXNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgem9uZSA9ICdFU1QnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiTW91XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHpvbmUgPSAnTVNUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlBhY1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB6b25lID0gJ1BTVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2VuZFRoaXMgPSBbZCwgem9uZV07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VuZFRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyNyZWdpb24gdGFwZSBkb3duIHNlY3Rpb24gICAgICAgICAgICBcclxuICAgICAgICAgICAgJHNjb3BlLk9QY2hvc2VuID0gZnVuY3Rpb24gKG9wQ2hvc2VuKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb3BJID0gJHNjb3BlLk9Qc0ZvclRhcGVEb3duLm1hcChmdW5jdGlvbiAobykgeyByZXR1cm4gby5vYmplY3RpdmVfcG9pbnRfaWQ7IH0pLmluZGV4T2Yob3BDaG9zZW4ub2JqZWN0aXZlX3BvaW50X2lkKTtcclxuICAgICAgICAgICAgICAgIGlmIChvcENob3Nlbi5zZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdGhleSBwaWNrZWQgYW4gT1AgdG8gdXNlIGZvciB0YXBlZG93blxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5PUE1lYXN1cmUgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BNZWFzdXJlLm9wX25hbWUgPSBvcENob3Nlbi5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5PUE1lYXN1cmUuZWxldmF0aW9uID0gb3BDaG9zZW4uZWxldl9mdDtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BNZWFzdXJlLlZkYXR1bSA9ICRzY29wZS52ZXJ0RGF0dW1MaXN0LmZpbHRlcihmdW5jdGlvbiAodmQpIHsgcmV0dXJuIHZkLmRhdHVtX2lkID09IG9wQ2hvc2VuLnZkYXR1bV9pZDsgfSlbMF0uZGF0dW1fYWJicmV2aWF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5PUE1lYXN1cmUub2JqZWN0aXZlX3BvaW50X2lkID0gb3BDaG9zZW4ub2JqZWN0aXZlX3BvaW50X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLk9QTWVhc3VyZS5vcF9uYW1lID0gb3BOYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50YXBlRG93blRhYmxlLnB1c2goJHNjb3BlLk9QTWVhc3VyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFSZXRyaWV2YWwudmRhdHVtX2lkID0gb3BDaG9zZW4udmRhdHVtX2lkO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3RoZXkgdW5jaGVja2VkIHRoZSBvcCB0byByZW1vdmVcclxuICAgICAgICAgICAgICAgICAgICAvL2FzayB0aGVtIGFyZSB0aGV5IHN1cmU/XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlbW92ZU9QTWVhcyA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+UmVtb3ZlIE9QIE1lYXN1cmU8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+QXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlbW92ZSB0aGlzIE9QIE1lYXN1cmVtZW50IGZyb20gdGhpcyBzZW5zb3I/PC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJjYW5jZWwoKVwiPkNhbmNlbDwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgncmVtb3ZlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgnY2FuY2VsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZU9QTWVhcy5yZXN1bHQudGhlbihmdW5jdGlvbiAoeWVzT3JObykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeWVzT3JObyA9PSAncmVtb3ZlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hZGQgdG8gcmVtb3ZlIGl0IGxpc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXBlRG93blRvUmVtb3ZlID0gJHNjb3BlLnRhcGVEb3duVGFibGUuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLm9iamVjdGl2ZV9wb2ludF9pZCA9PSBvcENob3Nlbi5vYmplY3RpdmVfcG9pbnRfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRJbmQgPSAkc2NvcGUudGFwZURvd25UYWJsZS5tYXAoZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8ub2JqZWN0aXZlX3BvaW50X2lkOyB9KS5pbmRleE9mKHRhcGVEb3duVG9SZW1vdmUub2JqZWN0aXZlX3BvaW50X2lkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXBlRG93blRvUmVtb3ZlLm9wX21lYXN1cmVtZW50c19pZCAhPT0gdW5kZWZpbmVkKSAkc2NvcGUucmVtb3ZlT1BMaXN0LnB1c2godGFwZURvd25Ub1JlbW92ZS5vcF9tZWFzdXJlbWVudHNfaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRhcGVEb3duVGFibGUuc3BsaWNlKHRJbmQsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS50YXBlRG93blRhYmxlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hUmV0cmlldmFsLnZkYXR1bV9pZCA9IDA7ICRzY29wZS5hUmV0cmlldmFsLmdzX2VsZXZhdGlvbiA9ICcnOyAkc2NvcGUuYVJldHJpZXZhbC53c19lbGV2YXRpb24gPSAnJzsgJHNjb3BlLmFSZXRyaWV2YWwuc2Vuc29yX2VsZXZhdGlvbiA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9uZXZlciBtaW5kLCBtYWtlIGl0IHNlbGVjdGVkIGFnYWluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BzRm9yVGFwZURvd25bb3BJXS5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9nZXQgZGVwbG95IHN0YXR1cyB0YXBlZG93bnMgdG8gYWRkIHRvIHRvcCBmb3IgZGlzcGxheVxyXG4gICAgICAgICAgICBPUF9NRUFTVVJFLmdldEluc3RTdGF0T1BNZWFzdXJlcyh7IGluc3RydW1lbnRTdGF0dXNJZDogJHNjb3BlLmRlcFNlbnNTdGF0dXMuaW5zdHJ1bWVudF9zdGF0dXNfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgcmVzcG9uc2UubGVuZ3RoOyByKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2Vuc01lYXN1cmVzID0gcmVzcG9uc2Vbcl07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdoaWNoT1AgPSBzaXRlT1BzLmZpbHRlcihmdW5jdGlvbiAob3ApIHsgcmV0dXJuIG9wLm9iamVjdGl2ZV9wb2ludF9pZCA9PSByZXNwb25zZVtyXS5vYmplY3RpdmVfcG9pbnRfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbnNNZWFzdXJlcy5lbGV2YXRpb24gPSB3aGljaE9QLmVsZXZfZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgc2Vuc01lYXN1cmVzLlZkYXR1bSA9ICRzY29wZS52ZXJ0RGF0dW1MaXN0LmZpbHRlcihmdW5jdGlvbiAodmQpIHsgcmV0dXJuIHZkLmRhdHVtX2lkID09IHdoaWNoT1AudmRhdHVtX2lkOyB9KVswXS5kYXR1bV9hYmJyZXZpYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgc2Vuc01lYXN1cmVzLm9wX25hbWUgPSB3aGljaE9QLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRFUHRhcGVEb3duVGFibGUucHVzaChzZW5zTWVhc3VyZXMpO1xyXG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyNlbmRyZWdpb24gdGFwZSBkb3duIHNlY3Rpb24gXHJcblxyXG4gICAgICAgICAgICAvL2RlZmF1bHQgZm9ybWF0dGluZyBmb3IgcmV0cmlldmFsXHJcbiAgICAgICAgICAgIHZhciBkdHBhcnRzID0gZ2V0VGltZVpvbmVTdGFtcCgpO1xyXG4gICAgICAgICAgICAkc2NvcGUuYVJldHJpZXZhbCA9IHsgdGltZV9zdGFtcDogZHRwYXJ0c1swXSwgdGltZV96b25lOiBkdHBhcnRzWzFdLCBpbnN0cnVtZW50X2lkOiAkc2NvcGUuYVNlbnNvci5pbnN0cnVtZW50X2lkLCBtZW1iZXJfaWQ6ICRjb29raWVzLmdldCgnbUlEJykgfTtcclxuICAgICAgICAgICAgJHNjb3BlLlJldHJpZXZlciA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChhbSkgeyByZXR1cm4gYW0ubWVtYmVyX2lkID09ICRjb29raWVzLmdldCgnbUlEJyk7IH0pWzBdO1xyXG5cclxuICAgICAgICAgICAgLy9pcyBpdCBVVEMgb3IgbG9jYWwgdGltZS4ubWFrZSBzdXJlIGl0IHN0YXlzIFVUQ1xyXG4gICAgICAgICAgICB2YXIgZGVhbFdpdGhUaW1lU3RhbXBiNFNlbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvL2NoZWNrIGFuZCBzZWUgaWYgdGhleSBhcmUgbm90IHVzaW5nIFVUQ1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hUmV0cmlldmFsLnRpbWVfem9uZSAhPSBcIlVUQ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb252ZXJ0IGl0XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHV0Y0RhdGVUaW1lID0gbmV3IERhdGUoJHNjb3BlLmFSZXRyaWV2YWwudGltZV9zdGFtcCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVJldHJpZXZhbC50aW1lX3N0YW1wID0gdXRjRGF0ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFSZXRyaWV2YWwudGltZV96b25lID0gJ1VUQyc7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlICdHTVQnIGlzIHRhY2tlZCBvbiBzbyBpdCBkb2Vzbid0IHRyeSB0byBhZGQgaHJzIHRvIG1ha2UgdGhlIGFscmVhZHkgdXRjIGEgdXRjIGluIGRiXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAkc2NvcGUuYVJldHJpZXZhbC50aW1lX3N0YW1wLnRvU3RyaW5nKCkuaW5kZXhPZignR01UJykgKyAzO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hUmV0cmlldmFsLnRpbWVfc3RhbXAgPSAkc2NvcGUuYVJldHJpZXZhbC50aW1lX3N0YW1wLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIGkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9jYW5jZWxcclxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2YXIgZGVwVGltZVN0YW1wYjRTZW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy9jaGVjayBhbmQgc2VlIGlmIHRoZXkgYXJlIG5vdCB1c2luZyBVVENcclxuICAgICAgICAgICAgICAgIHZhciByZXR1cm5UaGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlICdHTVQnIGlzIHRhY2tlZCBvbiBzbyBpdCBkb2Vzbid0IHRyeSB0byBhZGQgaHJzIHRvIG1ha2UgdGhlIGFscmVhZHkgdXRjIGEgdXRjIGluIGRiXHJcbiAgICAgICAgICAgICAgICB2YXIgaSA9ICRzY29wZS5kZXBTZW5zU3RhdHVzLnRpbWVfc3RhbXAudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArIDM7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5UaGlzID0gJHNjb3BlLmRlcFNlbnNTdGF0dXMudGltZV9zdGFtcC50b1N0cmluZygpLnN1YnN0cmluZygwLCBpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXR1cm5UaGlzO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9jYW5jZWxcclxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9yZXRyaWV2ZSB0aGUgc2Vuc29yXHJcbiAgICAgICAgICAgICRzY29wZS5yZXRyaWV2ZVMgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlYWxXaXRoVGltZVN0YW1wYjRTZW5kKCk7IC8vZm9yIHJldHJpZXZhbCBmb3IgcG9zdCBhbmQgZm9yIGNvbXBhcmlzb24gdG8gZGVwbG95ZWQgKGVuc3VyZSBpdCdzIGFmdGVyKVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXBTZW5UUyA9IGRlcFRpbWVTdGFtcGI0U2VuZCgpOy8vbmVlZCB0byBnZXQgZGVwIHN0YXR1cyBkYXRlIGluIHNhbWUgZm9ybWF0IGFzIHJldHJpZXZlZCB0byBjb21wYXJlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldFNlblRTID0gYW5ndWxhci5jb3B5KCRzY29wZS5hUmV0cmlldmFsLnRpbWVfc3RhbXAucmVwbGFjZSgvXFwsL2csIFwiXCIpKTsgLy9zdHVwaWQgY29tbWEgaW4gdGhlcmUgbWFraW5nIGl0IG5vdCB0aGUgc2FtZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXcgRGF0ZShyZXRTZW5UUykgPCBuZXcgRGF0ZShkZXBTZW5UUykpIHsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpeERhdGUgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGUgcmV0cmlldmFsIGRhdGUgbXVzdCBiZSBhZnRlciB0aGUgZGVwbG95ZWQgZGF0ZS48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXhEYXRlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVzZXQgdG8gbm93XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVJldHJpZXZhbC50aW1lX3N0YW1wID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVJldHJpZXZhbC50aW1lX3N0YW1wID0gZ2V0VGltZVpvbmVTdGFtcCgpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFSZXRyaWV2YWwudGltZV96b25lID0gZ2V0VGltZVpvbmVTdGFtcCgpWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjcmV0cmlldmFsRGF0ZScpLnRyaWdnZXIoJ2ZvY3VzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZFNlbnNvciA9IHt9OyB2YXIgY3JlYXRlUmV0U2VucyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBJTlNUUlVNRU5ULnVwZGF0ZSh7IGlkOiAkc2NvcGUuYVNlbnNvci5pbnN0cnVtZW50X2lkIH0sICRzY29wZS5hU2Vuc29yKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jcmVhdGUgaW5zdHJ1bWVudHN0YXR1cyB0b28gbmVlZDogc3RhdHVzX3R5cGVfaWQgYW5kIGluc3RydW1lbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRTZW5zb3IgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRTZW5zb3IuZGVwbG95bWVudFR5cGUgPSAkc2NvcGUuYVNlbnNvci5kZXBsb3ltZW50VHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRTZW5zb3IuaG91c2luZ1R5cGUgPSAkc2NvcGUuYVNlbnNvci5ob3VzaW5nVHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRTZW5zb3Iuc2Vuc29yQnJhbmQgPSAkc2NvcGUuYVNlbnNvci5zZW5zb3JCcmFuZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRTZW5zb3Iuc2Vuc29yVHlwZSA9ICRzY29wZS5hU2Vuc29yLnNlbnNvclR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkU2Vuc29yLmluc3RDb2xsZWN0aW9uID0gJHNjb3BlLmNvbGxlY3RDb25kTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGkuaWQgPT09ICRzY29wZS5hU2Vuc29yLmluc3RfY29sbGVjdGlvbl9pZDsgfSlbMF0uY29uZGl0aW9uO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIElOU1RSVU1FTlRfU1RBVFVTLnNhdmUoJHNjb3BlLmFSZXRyaWV2YWwpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHN0YXRSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYW55IHRhcGUgZG93bnM/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS50YXBlRG93blRhYmxlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdCA9IDA7IHQgPCAkc2NvcGUudGFwZURvd25UYWJsZS5sZW5ndGg7IHQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNUYXBlID0gJHNjb3BlLnRhcGVEb3duVGFibGVbdF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzVGFwZS5pbnN0cnVtZW50X3N0YXR1c19pZCA9IHN0YXRSZXNwb25zZS5pbnN0cnVtZW50X3N0YXR1c19pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vL1BPU1QgSVQvLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9QX01FQVNVUkUuc2F2ZSh0aGlzVGFwZSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9idWlsZCB0aGUgY3JlYXRlZFNlbnNvciB0byBzZW5kIGJhY2sgYW5kIGFkZCB0byB0aGUgbGlzdCBwYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlUmV0U2VucyA9IHN0YXRSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVSZXRTZW5zLnN0YXR1cyA9IHN0YXRSZXNwb25zZS5zdGF0dXNfdHlwZV9pZCA9PSAyID8gJ1JldHJpZXZlZCcgOiAnTG9zdCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFNlbnNvci5pbnN0cnVtZW50X3N0YXR1cyA9IFtjcmVhdGVSZXRTZW5zLCB0aGlzU2Vuc29yLmluc3RydW1lbnRfc3RhdHVzWzBdXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFueXRoaW5nIHlvdSB3YW50IGNhbiBnbyBoZXJlIGFuZCB3aWxsIHNhZmVseSBiZSBydW4gb24gdGhlIG5leHQgZGlnZXN0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlNlbnNvciByZXRyaWV2ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9ICdyZXRyaWV2ZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VuZEJhY2sgPSBbdXBkYXRlZFNlbnNvciwgc3RhdGVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZW5kQmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSAvL2VuZCByZXRyIGRhdGUgaXMgY29ycmVjdFxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIGlmIHZhbGlkXHJcbiAgICAgICAgICAgIH07Ly9lbmQgcmV0cmlldmVTXHJcbiAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICB9XSk7Ly9lbmQgc2Vuc29yUmV0cmlldmFsTW9kYWxDdHJsXHJcblxyXG4gICAgLy8gdmlldy9lZGl0IHJldHJpZXZlZCBzZW5zb3IgKGRlcGxveWVkIGluY2x1ZGVkIGhlcmUpIG1vZGFsXHJcbiAgICBNb2RhbENvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ2Z1bGxTZW5zb3JNb2RhbEN0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRmaWx0ZXInLCAnJHRpbWVvdXQnLCAnJGNvb2tpZXMnLCAnJGh0dHAnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCAnJHVpYk1vZGFsJywgJ1NFUlZFUl9VUkwnLCAnRklMRV9TVEFNUCcsICdhbGxEZXBEcm9wZG93bnMnLCAnYWdlbmN5TGlzdCcsICdTaXRlX0ZpbGVzJywgJ2FsbFN0YXR1c1R5cGVzJywgJ2FsbEluc3RDb2xsQ29uZCcsICdhbGxFdmVudHMnLCAnYWxsRGVwVHlwZXMnLCAndGhpc1NlbnNvcicsICdTZW5zb3JTaXRlJywgJ3NpdGVPUHMnLCAnYWxsTWVtYmVycycsICdJTlNUUlVNRU5UJywgJ0lOU1RSVU1FTlRfU1RBVFVTJywgJ0RBVEFfRklMRScsICdGSUxFJywgJ1NPVVJDRScsICdPUF9NRUFTVVJFJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkZmlsdGVyLCAkdGltZW91dCwgJGNvb2tpZXMsICRodHRwLCAkdWliTW9kYWxJbnN0YW5jZSwgJHVpYk1vZGFsLCBTRVJWRVJfVVJMLEZJTEVfU1RBTVAsIGFsbERlcERyb3Bkb3ducywgYWdlbmN5TGlzdCwgU2l0ZV9GaWxlcywgYWxsU3RhdHVzVHlwZXMsIGFsbEluc3RDb2xsQ29uZCwgYWxsRXZlbnRzLCBhbGxEZXBUeXBlcywgdGhpc1NlbnNvciwgU2Vuc29yU2l0ZSwgc2l0ZU9QcywgYWxsTWVtYmVycywgSU5TVFJVTUVOVCwgSU5TVFJVTUVOVF9TVEFUVVMsIERBVEFfRklMRSwgRklMRSwgU09VUkNFLCBPUF9NRUFTVVJFKSB7XHJcbiAgICAgICAgICAgIC8qYWxsU2Vuc29yVHlwZXMsIGFsbFNlbnNvckJyYW5kcywgYWxsSG91c2luZ1R5cGVzLCBhbGxTZW5zRGVwcyovXHJcbiAgICAgICAgICAgICRzY29wZS5zZXJ2ZXJVUkwgPSBTRVJWRVJfVVJMO1xyXG4gICAgICAgICAgICAkc2NvcGUuZnVsbFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlOyAvL0xvYWRpbmcuLi4gICBcclxuICAgICAgICAgICAgJHNjb3BlLnNlbnNvclR5cGVMaXN0ID0gYWxsRGVwRHJvcGRvd25zWzBdO1xyXG4gICAgICAgICAgICAkc2NvcGUuc2Vuc29yQnJhbmRMaXN0ID0gYWxsRGVwRHJvcGRvd25zWzFdO1xyXG4gICAgICAgICAgICAkc2NvcGUuaG91c2VUeXBlTGlzdCA9IGFsbERlcERyb3Bkb3duc1syXTtcclxuICAgICAgICAgICAgJHNjb3BlLmZpbGVUeXBlTGlzdCA9IGFsbERlcERyb3Bkb3duc1szXTsgLy91c2VkIGlmIGNyZWF0aW5nL2VkaXRpbmcgZGVwU2VucyBmaWxlXHJcbiAgICAgICAgICAgICRzY29wZS52ZXJ0RGF0dW1MaXN0ID0gYWxsRGVwRHJvcGRvd25zWzRdO1xyXG4gICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzID0gU2l0ZV9GaWxlcy5nZXRBbGxTaXRlRmlsZXMoKTtcclxuICAgICAgICAgICAgJHNjb3BlLnNlbnNvckZpbGVzID0gdGhpc1NlbnNvciAhPT0gXCJlbXB0eVwiID8gJHNjb3BlLmFsbFNGaWxlcy5maWx0ZXIoZnVuY3Rpb24gKHNmKSB7IHJldHVybiBzZi5pbnN0cnVtZW50X2lkID09IHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9pZDsgfSkgOiBbXTsvLyBob2xkZXIgZm9yIGh3bSBmaWxlcyBhZGRlZFxyXG4gICAgICAgICAgICAkc2NvcGUuc2Vuc0ltYWdlRmlsZXMgPSAkc2NvcGUuc2Vuc29yRmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChoZikgeyByZXR1cm4gaGYuZmlsZXR5cGVfaWQgPT09IDE7IH0pOyAvL2ltYWdlIGZpbGVzIGZvciBjYXJvdXNlbFxyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVGb3JtID0gZmFsc2U7IC8vaGlkZGVuIGZvcm0gdG8gYWRkIGZpbGUgdG8gc2Vuc29yXHJcbiAgICAgICAgICAgICRzY29wZS5zaG93TldJU0ZpbGVGb3JtID0gZmFsc2U7IC8vaGlkZGVuIGZvcm0gdG8gYWRkIG53aXMgZmlsZSB0byBzZW5zb3JcclxuICAgICAgICAgICAgJHNjb3BlLnNlbnNvckRhdGFOV0lTID0gZmFsc2U7IC8vaXMgdGhpcyBhIHJhaW4gZ2FnZSwgbWV0IHN0YXRpb24sIG9yIHJkZyBzZW5zb3IgLS0gaWYgc28sIGRhdGEgZmlsZSBtdXN0IGJlIGNyZWF0ZWQgcG9pbnRpbmcgdG8gbndpcyAod2UgZG9uJ3Qgc3RvcmUgYWN0dWFsIGZpbGUsIGp1c3QgbWV0YWRhdGEgd2l0aCBsaW5rKVxyXG4gICAgICAgICAgICAkc2NvcGUuY29sbGVjdENvbmRMaXN0ID0gYWxsSW5zdENvbGxDb25kO1xyXG4gICAgICAgICAgICAkc2NvcGUuT1BzUHJlc2VudCA9IHNpdGVPUHMubGVuZ3RoID4gMCA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgJHNjb3BlLkRFUE9Qc0ZvclRhcGVEb3duID0gYW5ndWxhci5jb3B5KHNpdGVPUHMpO1xyXG4gICAgICAgICAgICAkc2NvcGUuUkVUT1BzRm9yVGFwZURvd24gPSBhbmd1bGFyLmNvcHkoc2l0ZU9Qcyk7XHJcbiAgICAgICAgICAgICRzY29wZS5kZXBUeXBlTGlzdCA9IGFsbERlcFR5cGVzOyAvL2dldCBmcmVzaCB2ZXJzaW9uIHNvIG5vdCBtZXNzZWQgdXAgd2l0aCB0aGUgVGVtcGVyYXR1cmUgdHdpY2VcclxuICAgICAgICAgICAgJHNjb3BlLmZpbHRlcmVkRGVwbG95bWVudFR5cGVzID0gW107IC8vd2lsbCBiZSBwb3B1bGF0ZWQgYmFzZWQgb24gdGhlIHNlbnNvciB0eXBlIGNob3NlblxyXG4gICAgICAgICAgICAkc2NvcGUudGltZVpvbmVMaXN0ID0gWydVVEMnLCAnUFNUJywgJ01TVCcsICdDU1QnLCAnRVNUJ107XHJcbiAgICAgICAgICAgICRzY29wZS5zdGF0dXNUeXBlTGlzdCA9IGFsbFN0YXR1c1R5cGVzLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcy5zdGF0dXMgPT0gJ1JldHJpZXZlZCcgfHwgcy5zdGF0dXMgPT0gJ0xvc3QnOyB9KTtcclxuICAgICAgICAgICAgLy9kZWZhdWx0IHNldHRpbmcgZm9yIGludGVydmFsXHJcbiAgICAgICAgICAgICRzY29wZS5JbnRlcnZhbFR5cGUgPSB7IHR5cGU6ICdTZWNvbmRzJyB9O1xyXG4gICAgICAgICAgICAvL25nLXNob3cgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZXkgYXJlIGVkaXRpbmcgb3Igdmlld2luZyBkZXRhaWxzXHJcbiAgICAgICAgICAgICRzY29wZS52aWV3ID0geyBERVB2YWw6ICdkZXRhaWwnLCBSRVR2YWw6ICdkZXRhaWwnIH07XHJcbiAgICAgICAgICAgIC8vZ2V0IHRpbWV6b25lIGFuZCB0aW1lc3RhbXAgZm9yIHRoZWlyIHRpbWV6b25lIGZvciBzaG93aW5nLi4gcG9zdC9wdXQgd2lsbCBjb252ZXJ0IGl0IHRvIHV0Y1xyXG4gICAgICAgICAgICB2YXIgZ2V0VGltZVpvbmVTdGFtcCA9IGZ1bmN0aW9uIChkc2VudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlbmRUaGlzID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgZDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZHNlbnQgIT09IHVuZGVmaW5lZCkgZCA9IG5ldyBEYXRlKGRzZW50KTtcclxuICAgICAgICAgICAgICAgIGVsc2UgZCA9IG5ldyBEYXRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IChkLnRvU3RyaW5nKCkpLnN1YnN0cmluZygzNSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgem9uZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG9mZnNldC5zdWJzdHIoMCwgMykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiQ2VuXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHpvbmUgPSAnQ1NUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkVhc1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB6b25lID0gJ0VTVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJNb3VcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgem9uZSA9ICdNU1QnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiUGFjXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHpvbmUgPSAnUFNUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzZW5kVGhpcyA9IFtkLCB6b25lXTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZW5kVGhpcztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vZm9ybWF0dGluZyBkYXRlIGFuZCB0aW1lIHByb3Blcmx5IGZvciBjaHJvbWUgYW5kIGZmXHJcbiAgICAgICAgICAgIHZhciBnZXREYXRlVGltZVBhcnRzID0gZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0aGVEYXRlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzRGF0ZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzRGF0ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IGQuc3Vic3RyKDAsIDQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtID0gZC5zdWJzdHIoNSwgMikgLSAxOyAvL3N1YnRyYWN0IDEgZm9yIGluZGV4IHZhbHVlIChKYW51YXJ5IGlzIDApXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhID0gZC5zdWJzdHIoOCwgMik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGggPSBkLnN1YnN0cigxMSwgMik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pID0gZC5zdWJzdHIoMTQsIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWMgPSBkLnN1YnN0cigxNywgMik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhlRGF0ZSA9IG5ldyBEYXRlKHksIG0sIGRhLCBoLCBtaSwgc2VjKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy90aGlzIGlzIGFscmVhZHkgYSBkYXRlLCByZXR1cm4gaXQgYmFja1xyXG4gICAgICAgICAgICAgICAgICAgIHRoZURhdGUgPSBkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoZURhdGU7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUudGhpc1NlbnNvclNpdGUgPSBTZW5zb3JTaXRlOyAkc2NvcGUudXNlclJvbGUgPSAkY29va2llcy5nZXQoJ3VzZXJzUm9sZScpO1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLnNlbnNvciA9IGFuZ3VsYXIuY29weSh0aGlzU2Vuc29yKTtcclxuICAgICAgICAgICAgJHNjb3BlLnNlbnNvckRhdGFOV0lTID0gKCgkc2NvcGUuc2Vuc29yLnNlbnNvcl90eXBlX2lkID09IDIgfHwgJHNjb3BlLnNlbnNvci5zZW5zb3JfdHlwZV9pZCA9PSA1KSB8fCAkc2NvcGUuc2Vuc29yLnNlbnNvcl90eXBlX2lkID09IDYpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy9kZXBsb3kgcGFydCAvLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgJHNjb3BlLkRlcGxveWVkU2Vuc29yU3RhdCA9IGFuZ3VsYXIuY29weSh0aGlzU2Vuc29yLmluc3RydW1lbnRfc3RhdHVzLmZpbHRlcihmdW5jdGlvbiAoaW5zdCkgeyByZXR1cm4gaW5zdC5zdGF0dXMgPT09IFwiRGVwbG95ZWRcIjsgfSlbMF0pO1xyXG4gICAgICAgICAgICAkc2NvcGUuRGVwbG95ZWRTZW5zb3JTdGF0LnRpbWVfc3RhbXAgPSBnZXREYXRlVGltZVBhcnRzKCRzY29wZS5EZXBsb3llZFNlbnNvclN0YXQudGltZV9zdGFtcCk7IC8vdGhpcyBrZWVwcyBpdCBhcyB1dGMgaW4gZGlzcGxheVxyXG4gICAgICAgICAgICAvL2lmICgkc2NvcGUuRGVwbG95ZWRTZW5zb3JTdGF0LnZkYXR1bV9pZCAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAvLyAgICAkc2NvcGUuRGVwbG95ZWRTZW5zb3JTdGF0LnZkYXR1bU5hbWUgPSAkc2NvcGUudmVydERhdHVtTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHZkKSB7IHJldHVybiB2ZC5kYXR1bV9pZCA9PSAkc2NvcGUuRGVwbG95ZWRTZW5zb3JTdGF0LnZkYXR1bV9pZDsgfSlbMF0uZGF0dW1fYWJicmV2aWF0aW9uO1xyXG4gICAgICAgICAgICAkc2NvcGUuRGVwbG95ZXIgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT09ICRzY29wZS5EZXBsb3llZFNlbnNvclN0YXQubWVtYmVyX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgJHNjb3BlLkRFUHJlbW92ZU9QTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAkc2NvcGUuREVQdGFwZURvd25UYWJsZSA9IFtdOyAvL2hvbGRlciBvZiB0YXBlZG93biBPUF9NRUFTVVJFTUVOVFNcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5ERVBPUGNob3NlbiA9IGZ1bmN0aW9uIChERVBvcENob3Nlbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9wSSA9ICRzY29wZS5ERVBPUHNGb3JUYXBlRG93bi5tYXAoZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8ub2JqZWN0aXZlX3BvaW50X2lkOyB9KS5pbmRleE9mKERFUG9wQ2hvc2VuLm9iamVjdGl2ZV9wb2ludF9pZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoREVQb3BDaG9zZW4uc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3RoZXkgcGlja2VkIGFuIE9QIHRvIHVzZSBmb3IgdGFwZWRvd25cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuREVQT1BNZWFzdXJlID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRFUE9QTWVhc3VyZS5vcF9uYW1lID0gREVQb3BDaG9zZW4ubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuREVQT1BNZWFzdXJlLmVsZXZhdGlvbiA9IERFUG9wQ2hvc2VuLmVsZXZfZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRFUE9QTWVhc3VyZS5WZGF0dW0gPSAkc2NvcGUudmVydERhdHVtTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHZkKSB7IHJldHVybiB2ZC5kYXR1bV9pZCA9PSBERVBvcENob3Nlbi52ZGF0dW1faWQ7IH0pWzBdLmRhdHVtX2FiYnJldmlhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuREVQT1BNZWFzdXJlLm9iamVjdGl2ZV9wb2ludF9pZCA9IERFUG9wQ2hvc2VuLm9iamVjdGl2ZV9wb2ludF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5ERVB0YXBlRG93blRhYmxlLnB1c2goJHNjb3BlLkRFUE9QTWVhc3VyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFRhcGVDb3B5LnB1c2goJHNjb3BlLkRFUE9QTWVhc3VyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFN0dWZmQ29weVsxXS52ZGF0dW1faWQgPSBERVBvcENob3Nlbi52ZGF0dW1faWQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdGhleSB1bmNoZWNrZWQgdGhlIG9wIHRvIHJlbW92ZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vYXNrIHRoZW0gYXJlIHRoZXkgc3VyZT9cclxuICAgICAgICAgICAgICAgICAgICB2YXIgREVQcmVtb3ZlT1BNZWFzID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5SZW1vdmUgT1AgTWVhc3VyZTwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5BcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVtb3ZlIHRoaXMgT1AgTWVhc3VyZW1lbnQgZnJvbSB0aGlzIGRlcGxveWVkIHNlbnNvcj88L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cIkRFUG9rKClcIj5PSzwvYnV0dG9uPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cIkRFUGNhbmNlbCgpXCI+Q2FuY2VsPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRFUG9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCdyZW1vdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuREVQY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCdjYW5jZWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgREVQcmVtb3ZlT1BNZWFzLnJlc3VsdC50aGVuKGZ1bmN0aW9uICh5ZXNPck5vKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5ZXNPck5vID09ICdyZW1vdmUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FkZCB0byByZW1vdmUgaXQgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIERFUHRhcGVEb3duVG9SZW1vdmUgPSAkc2NvcGUuZGVwVGFwZUNvcHkuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLm9iamVjdGl2ZV9wb2ludF9pZCA9PSBERVBvcENob3Nlbi5vYmplY3RpdmVfcG9pbnRfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIERFUHRJbmQgPSAkc2NvcGUuZGVwVGFwZUNvcHkubWFwKGZ1bmN0aW9uIChvKSB7IHJldHVybiBvLm9iamVjdGl2ZV9wb2ludF9pZDsgfSkuaW5kZXhPZihERVB0YXBlRG93blRvUmVtb3ZlLm9iamVjdGl2ZV9wb2ludF9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoREVQdGFwZURvd25Ub1JlbW92ZS5vcF9tZWFzdXJlbWVudHNfaWQgIT09IHVuZGVmaW5lZCkgJHNjb3BlLkRFUHJlbW92ZU9QTGlzdC5wdXNoKERFUHRhcGVEb3duVG9SZW1vdmUub3BfbWVhc3VyZW1lbnRzX2lkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBUYXBlQ29weS5zcGxpY2UoREVQdEluZCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmRlcFRhcGVDb3B5Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBTdHVmZkNvcHlbMV0udmRhdHVtX2lkID0gMDsgJHNjb3BlLmRlcFN0dWZmQ29weVsxXS5nc19lbGV2YXRpb24gPSAnJzsgJHNjb3BlLmRlcFN0dWZmQ29weVsxXS53c19lbGV2YXRpb24gPSAnJzsgJHNjb3BlLmRlcFN0dWZmQ29weVsxXS5zZW5zb3JfZWxldmF0aW9uID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25ldmVyIG1pbmQsIG1ha2UgaXQgc2VsZWN0ZWQgYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ERVBPUHNGb3JUYXBlRG93bltvcEldLnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvL29ubHkgY2hlY2sgZm9yIGluc3RydW1lbnQgb3BNZWFzdXJlcyBpZiB0aGVyZSBhcmUgYW55IG9wcyBvbiB0aGlzIHNpdGUgdG8gYmVnaW4gd2l0aC5cclxuICAgICAgICAgICAgaWYgKCRzY29wZS5PUHNQcmVzZW50KSB7XHJcbiAgICAgICAgICAgICAgICBPUF9NRUFTVVJFLmdldEluc3RTdGF0T1BNZWFzdXJlcyh7IGluc3RydW1lbnRTdGF0dXNJZDogJHNjb3BlLkRlcGxveWVkU2Vuc29yU3RhdC5pbnN0cnVtZW50X3N0YXR1c19pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChERVByZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgREVQcmVzcG9uc2UubGVuZ3RoOyByKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIERFUHNlbnNNZWFzdXJlcyA9IERFUHJlc3BvbnNlW3JdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2hpY2hPUCA9IHNpdGVPUHMuZmlsdGVyKGZ1bmN0aW9uIChvcCkgeyByZXR1cm4gb3Aub2JqZWN0aXZlX3BvaW50X2lkID09IERFUHJlc3BvbnNlW3JdLm9iamVjdGl2ZV9wb2ludF9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERFUHNlbnNNZWFzdXJlcy5lbGV2YXRpb24gPSB3aGljaE9QLmVsZXZfZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERFUHNlbnNNZWFzdXJlcy5WZGF0dW0gPSAkc2NvcGUudmVydERhdHVtTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHZkKSB7IHJldHVybiB2ZC5kYXR1bV9pZCA9PSB3aGljaE9QLnZkYXR1bV9pZDsgfSlbMF0uZGF0dW1fYWJicmV2aWF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBERVBzZW5zTWVhc3VyZXMub3BfbmFtZSA9ICRzY29wZS5ERVBPUHNGb3JUYXBlRG93bi5maWx0ZXIoZnVuY3Rpb24gKG9wKSB7IHJldHVybiBvcC5vYmplY3RpdmVfcG9pbnRfaWQgPT0gREVQcmVzcG9uc2Vbcl0ub2JqZWN0aXZlX3BvaW50X2lkOyB9KVswXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuREVQdGFwZURvd25UYWJsZS5wdXNoKERFUHNlbnNNZWFzdXJlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vZ28gdGhyb3VnaCBPUHNGb3JUYXBlRG93biBhbmQgYWRkIHNlbGVjdGVkIFByb3BlcnR5LlxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLkRFUE9Qc0ZvclRhcGVEb3duLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZm9yIGVhY2ggb25lLCBpZiByZXNwb25zZSBoYXMgdGhpcyBpZCwgYWRkICdzZWxlY3RlZDp0cnVlJyBlbHNlIGFkZCAnc2VsZWN0ZWQ6ZmFsc2UnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgREVQcmVzcG9uc2UubGVuZ3RoOyB5KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChERVByZXNwb25zZVt5XS5vYmplY3RpdmVfcG9pbnRfaWQgPT0gJHNjb3BlLkRFUE9Qc0ZvclRhcGVEb3duW2ldLm9iamVjdGl2ZV9wb2ludF9pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ERVBPUHNGb3JUYXBlRG93bltpXS5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IERFUHJlc3BvbnNlLmxlbmd0aDsgLy9lbnN1cmVzIGl0IGRvZXNuJ3Qgc2V0IGl0IGFzIGZhbHNlIGFmdGVyIHNldHRpbmcgaXQgYXMgdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRFUE9Qc0ZvclRhcGVEb3duW2ldLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKERFUHJlc3BvbnNlLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ERVBPUHNGb3JUYXBlRG93bltpXS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvL2VuZCBpZiB0aGlzU2l0ZUhvdXNpbmdzICE9IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9yZXRyaWV2ZSBwYXJ0IC8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgICAgICAkc2NvcGUuUmV0cmlldmVkU2Vuc29yU3RhdCA9IGFuZ3VsYXIuY29weSh0aGlzU2Vuc29yLmluc3RydW1lbnRfc3RhdHVzLmZpbHRlcihmdW5jdGlvbiAoaW5zdCkgeyByZXR1cm4gaW5zdC5zdGF0dXMgPT09IFwiUmV0cmlldmVkXCI7IH0pWzBdKTtcclxuICAgICAgICAgICAgLy9pZiB0aGVyZSBpc24ndCBvbmUgLi4gdGhlbiB0aGlzIGlzIGEgbG9zdCBzdGF0dXNcclxuICAgICAgICAgICAgaWYgKCRzY29wZS5SZXRyaWV2ZWRTZW5zb3JTdGF0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5SZXRyaWV2ZWRTZW5zb3JTdGF0ID0gYW5ndWxhci5jb3B5KHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9zdGF0dXMuZmlsdGVyKGZ1bmN0aW9uIChpbnN0KSB7IHJldHVybiBpbnN0LnN0YXR1cyA9PT0gXCJMb3N0XCI7IH0pWzBdKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5tb3N0UmVjZW50U3RhdHVzID0gXCJMb3N0XCI7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubW9zdFJlY2VudFN0YXR1cyA9IFwiUmV0cmlldmVkXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCRzY29wZS5SZXRyaWV2ZWRTZW5zb3JTdGF0LnZkYXR1bV9pZCAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5SZXRyaWV2ZWRTZW5zb3JTdGF0LnZkYXR1bV9pZCA+IDApIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5SZXRyaWV2ZWRTZW5zb3JTdGF0LnZkYXR1bU5hbWUgPSAkc2NvcGUudmVydERhdHVtTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHZkKSB7IHJldHVybiB2ZC5kYXR1bV9pZCA9PSAkc2NvcGUuUmV0cmlldmVkU2Vuc29yU3RhdC52ZGF0dW1faWQ7IH0pWzBdLmRhdHVtX2FiYnJldmlhdGlvbjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUuUmV0cmlldmVkU2Vuc29yU3RhdC50aW1lX3N0YW1wID0gZ2V0RGF0ZVRpbWVQYXJ0cygkc2NvcGUuUmV0cmlldmVkU2Vuc29yU3RhdC50aW1lX3N0YW1wKTsgLy90aGlzIGtlZXBzIGl0IGFzIHV0YyBpbiBkaXNwbGF5XHJcbiAgICAgICAgICAgICRzY29wZS5SZXRyaWV2ZXIgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT09ICRzY29wZS5SZXRyaWV2ZWRTZW5zb3JTdGF0Lm1lbWJlcl9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICRzY29wZS5SRVRyZW1vdmVPUExpc3QgPVtdO1xyXG4gICAgICAgICAgICAkc2NvcGUuUkVUdGFwZURvd25UYWJsZSA9W107IC8vaG9sZGVyIG9mIHRhcGVkb3duIE9QX01FQVNVUkVNRU5UU1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLlJFVE9QY2hvc2VuID0gZnVuY3Rpb24gKFJFVG9wQ2hvc2VuKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb3BJID0gJHNjb3BlLlJFVE9Qc0ZvclRhcGVEb3duLm1hcChmdW5jdGlvbiAobykgeyByZXR1cm4gby5vYmplY3RpdmVfcG9pbnRfaWQ7IH0pLmluZGV4T2YoUkVUb3BDaG9zZW4ub2JqZWN0aXZlX3BvaW50X2lkKTtcclxuICAgICAgICAgICAgICAgIGlmIChSRVRvcENob3Nlbi5zZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdGhleSBwaWNrZWQgYW4gT1AgdG8gdXNlIGZvciB0YXBlZG93blxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5SRVRPUE1lYXN1cmUgPSB7IH07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJFVE9QTWVhc3VyZS5vcF9uYW1lID0gUkVUb3BDaG9zZW4ubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUkVUT1BNZWFzdXJlLmVsZXZhdGlvbiA9IFJFVG9wQ2hvc2VuLmVsZXZfZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJFVE9QTWVhc3VyZS5WZGF0dW0gPSAkc2NvcGUudmVydERhdHVtTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHZkKSB7IHJldHVybiB2ZC5kYXR1bV9pZCA9PSBSRVRvcENob3Nlbi52ZGF0dW1faWQ7fSlbMF0uZGF0dW1fYWJicmV2aWF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5SRVRPUE1lYXN1cmUub2JqZWN0aXZlX3BvaW50X2lkID0gUkVUb3BDaG9zZW4ub2JqZWN0aXZlX3BvaW50X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXRUYXBlQ29weS5wdXNoKCRzY29wZS5SRVRPUE1lYXN1cmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXRTdHVmZkNvcHlbMV0udmRhdHVtX2lkID0gUkVUb3BDaG9zZW4udmRhdHVtX2lkO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3RoZXkgdW5jaGVja2VkIHRoZSBvcCB0byByZW1vdmVcclxuICAgICAgICAgICAgICAgICAgICAvL2FzayB0aGVtIGFyZSB0aGV5IHN1cmU/XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIFJFVHJlbW92ZU9QTWVhcyA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+UmVtb3ZlIE9QIE1lYXN1cmU8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5BcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVtb3ZlIHRoaXMgT1AgTWVhc3VyZW1lbnQgZnJvbSB0aGlzIHJldHJpZXZlZCBzZW5zb3I/PC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cIlJFVG9rKClcIj5PSzwvYnV0dG9uPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cIlJFVGNhbmNlbCgpXCI+Q2FuY2VsPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJFVG9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCdyZW1vdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUkVUY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCdjYW5jZWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgUkVUcmVtb3ZlT1BNZWFzLnJlc3VsdC50aGVuKGZ1bmN0aW9uICh5ZXNPck5vKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5ZXNPck5vID09ICdyZW1vdmUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FkZCB0byByZW1vdmUgaXQgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFJFVHRhcGVEb3duVG9SZW1vdmUgPSAkc2NvcGUucmV0VGFwZUNvcHkuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLm9iamVjdGl2ZV9wb2ludF9pZCA9PSBSRVRvcENob3Nlbi5vYmplY3RpdmVfcG9pbnRfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFJFVHRJbmQgPSAkc2NvcGUucmV0VGFwZUNvcHkubWFwKGZ1bmN0aW9uIChvKSB7IHJldHVybiBvLm9iamVjdGl2ZV9wb2ludF9pZDsgfSkuaW5kZXhPZihSRVR0YXBlRG93blRvUmVtb3ZlLm9iamVjdGl2ZV9wb2ludF9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUkVUcmVtb3ZlT1BMaXN0LnB1c2goUkVUdGFwZURvd25Ub1JlbW92ZS5vcF9tZWFzdXJlbWVudHNfaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJldFRhcGVDb3B5LnNwbGljZShSRVR0SW5kLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucmV0VGFwZUNvcHkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJldFN0dWZmQ29weVsxXS52ZGF0dW1faWQgPSAwOyAkc2NvcGUucmV0U3R1ZmZDb3B5WzFdLmdzX2VsZXZhdGlvbiA9ICcnOyAkc2NvcGUucmV0U3R1ZmZDb3B5WzFdLndzX2VsZXZhdGlvbiA9ICcnOyAkc2NvcGUucmV0U3R1ZmZDb3B5WzFdLnNlbnNvcl9lbGV2YXRpb24gPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbmV2ZXIgbWluZCwgbWFrZSBpdCBzZWxlY3RlZCBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJFVE9Qc0ZvclRhcGVEb3duW29wSV0uc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvL29ubHkgY2FyZSBhYm91dCBvcCBNZWFzdXJlcyBpZiB0aGVyZSBhcmUgb3BzIG9uIHRoaXMgc2l0ZVxyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLk9Qc1ByZXNlbnQpIHtcclxuICAgICAgICAgICAgICAgIE9QX01FQVNVUkUuZ2V0SW5zdFN0YXRPUE1lYXN1cmVzKHsgaW5zdHJ1bWVudFN0YXR1c0lkOiAkc2NvcGUuUmV0cmlldmVkU2Vuc29yU3RhdC5pbnN0cnVtZW50X3N0YXR1c19pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChSRVRyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgUkVUcmVzcG9uc2UubGVuZ3RoOyByKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFJFVHNlbnNNZWFzdXJlcyA9IFJFVHJlc3BvbnNlW3JdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2hpY2hPUCA9IHNpdGVPUHMuZmlsdGVyKGZ1bmN0aW9uIChvcCkgeyByZXR1cm4gb3Aub2JqZWN0aXZlX3BvaW50X2lkID09IFJFVHJlc3BvbnNlW3JdLm9iamVjdGl2ZV9wb2ludF9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJFVHNlbnNNZWFzdXJlcy5lbGV2YXRpb24gPSB3aGljaE9QLmVsZXZfZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJFVHNlbnNNZWFzdXJlcy5WZGF0dW0gPSAkc2NvcGUudmVydERhdHVtTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHZkKSB7IHJldHVybiB2ZC5kYXR1bV9pZCA9PSB3aGljaE9QLnZkYXR1bV9pZDsgfSlbMF0uZGF0dW1fYWJicmV2aWF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBSRVRzZW5zTWVhc3VyZXMub3BfbmFtZSA9ICRzY29wZS5SRVRPUHNGb3JUYXBlRG93bi5maWx0ZXIoZnVuY3Rpb24gKG9wKSB7IHJldHVybiBvcC5vYmplY3RpdmVfcG9pbnRfaWQgPT0gUkVUcmVzcG9uc2Vbcl0ub2JqZWN0aXZlX3BvaW50X2lkOyB9KVswXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUkVUdGFwZURvd25UYWJsZS5wdXNoKFJFVHNlbnNNZWFzdXJlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vZ28gdGhyb3VnaCBPUHNGb3JUYXBlRG93biBhbmQgYWRkIHNlbGVjdGVkIFByb3BlcnR5LlxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLlJFVE9Qc0ZvclRhcGVEb3duLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZm9yIGVhY2ggb25lLCBpZiByZXNwb25zZSBoYXMgdGhpcyBpZCwgYWRkICdzZWxlY3RlZDp0cnVlJyBlbHNlIGFkZCAnc2VsZWN0ZWQ6ZmFsc2UnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgUkVUcmVzcG9uc2UubGVuZ3RoOyB5KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChSRVRyZXNwb25zZVt5XS5vYmplY3RpdmVfcG9pbnRfaWQgPT0gJHNjb3BlLlJFVE9Qc0ZvclRhcGVEb3duW2ldLm9iamVjdGl2ZV9wb2ludF9pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5SRVRPUHNGb3JUYXBlRG93bltpXS5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IFJFVHJlc3BvbnNlLmxlbmd0aDsgLy9lbnN1cmVzIGl0IGRvZXNuJ3Qgc2V0IGl0IGFzIGZhbHNlIGFmdGVyIHNldHRpbmcgaXQgYXMgdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJFVE9Qc0ZvclRhcGVEb3duW2ldLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFJFVHJlc3BvbnNlLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5SRVRPUHNGb3JUYXBlRG93bltpXS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuRXZlbnROYW1lID0gYWxsRXZlbnRzLmZpbHRlcihmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5ldmVudF9pZCA9PT0gJHNjb3BlLnNlbnNvci5ldmVudF9pZDsgfSlbMF0uZXZlbnRfbmFtZTtcclxuXHJcbiAgICAgICAgICAgIC8vYWNjb3JkaW9uIG9wZW4vY2xvc2UgZ2x5cGhzXHJcbiAgICAgICAgICAgICRzY29wZS5zID0geyBkZXBPcGVuOiBmYWxzZSwgcmV0T3BlbjogdHJ1ZSwgc0ZpbGVPcGVuOiBmYWxzZSwgTldJU0ZpbGVPcGVuOiBmYWxzZSB9O1xyXG5cclxuICAgICAgICAgICAgLy8jcmVnaW9uIGRhdGV0aW1lcGlja2VyXHJcbiAgICAgICAgICAgICRzY29wZS5kYXRlT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0aW5nRGF5OiAxLFxyXG4gICAgICAgICAgICAgICAgc2hvd1dlZWtzOiBmYWxzZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tycyA9IHsgfTtcclxuICAgICAgICAgICAgJHNjb3BlLm9wZW4gPSBmdW5jdGlvbiAoJGV2ZW50LCB3aGljaCkge1xyXG4gICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tyc1t3aGljaF09IHRydWU7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgICAgICAgICAgLy8gaXMgaW50ZXJ2YWwgaXMgbnVtYmVyXHJcbiAgICAgICAgICAgICRzY29wZS5pc051bSA9IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0aGVFdmVudCA9IGV2dCB8fCB3aW5kb3cuZXZlbnQ7XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gdGhlRXZlbnQua2V5Q29kZSB8fCB0aGVFdmVudC53aGljaDtcclxuICAgICAgICAgICAgICAgIGlmIChrZXkgIT0gNDYgJiYga2V5ICE9IDQ1ICYmIGtleSA+IDMxICYmIChrZXkgPCA0OCB8fCBrZXkgPiA1NykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGVFdmVudC5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGVFdmVudC5wcmV2ZW50RGVmYXVsdCkgdGhlRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vZ2V0IGRlcGxveW1lbnQgdHlwZXMgZm9yIHNlbnNvciB0eXBlIGNob3NlblxyXG4gICAgICAgICAgICAkc2NvcGUuZ2V0RGVwVHlwZXMgPSBmdW5jdGlvbiAoc2Vuc1R5cGUpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5maWx0ZXJlZERlcGxveW1lbnRUeXBlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoaW5nU2Vuc0RlcGxpc3QgPSAkc2NvcGUuc2Vuc29yVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChzZCkgeyByZXR1cm4gc2Quc2Vuc29yX3R5cGVfaWQgPT0gc2Vuc1R5cGUuc2Vuc29yX3R5cGVfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgLy90aGlzIGlzIDEgc2Vuc29yVHlwZSB3aXRoIGlubmVyIGxpc3Qgb2YgIC5kZXBsb3ltZW50dHlwZXNcclxuICAgICAgICAgICAgICAgICRzY29wZS5maWx0ZXJlZERlcGxveW1lbnRUeXBlcyA9IG1hdGNoaW5nU2Vuc0RlcGxpc3QuZGVwbG95bWVudHR5cGVzO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmdldERlcFR5cGVzKCRzY29wZS5zZW5zb3IpOyAvL2NhbGwgaXQgZmlyc3QgdGltZSB0aHJvdWdoXHJcblxyXG4gICAgICAgICAgICAvL2NhbmNlbFxyXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkgeyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyBhbnl0aGluZyB5b3Ugd2FudCBjYW4gZ28gaGVyZSBhbmQgd2lsbCBzYWZlbHkgYmUgcnVuIG9uIHRoZSBuZXh0IGRpZ2VzdC4gICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbmRCYWNrID0gW3RoaXNTZW5zb3JdO1xyXG4gICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHNlbmRCYWNrKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9Eb25lIGR1cmluZyBlZGl0IFBVVCB0byBlbnN1cmUgdGltZXpvbmUgZG9lc24ndCBhZmZlY3QgZGIgdGltZSB2YWx1ZSAoaXMgaXQgVVRDIG9yIGxvY2FsIHRpbWUuLm1ha2Ugc3VyZSBpdCBzdGF5cyBVVEMpXHJcbiAgICAgICAgICAgIHZhciBkZWFsV2l0aFRpbWVTdGFtcGI0U2VuZCA9IGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICAvL2RlcGxveWVkIG9yIHJldHJpZXZlZD8/ICAgICAgXHJcbiAgICAgICAgICAgICAgICB2YXIgdXRjRGF0ZVRpbWU7IHZhciBpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHcgPT09ICdkZXBsb3llZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIGFuZCBzZWUgaWYgdGhleSBhcmUgbm90IHVzaW5nIFVUQ1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZGVwU3R1ZmZDb3B5WzFdLnRpbWVfem9uZSAhPSBcIlVUQ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29udmVydCBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGNEYXRlVGltZSA9IG5ldyBEYXRlKCRzY29wZS5kZXBTdHVmZkNvcHlbMV0udGltZV9zdGFtcCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFN0dWZmQ29weVsxXS50aW1lX3N0YW1wID0gdXRjRGF0ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBTdHVmZkNvcHlbMV0udGltZV96b25lID0gJ1VUQyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgJ0dNVCcgaXMgdGFja2VkIG9uIHNvIGl0IGRvZXNuJ3QgdHJ5IHRvIGFkZCBocnMgdG8gbWFrZSB0aGUgYWxyZWFkeSB1dGMgYSB1dGMgaW4gZGJcclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9ICRzY29wZS5kZXBTdHVmZkNvcHlbMV0udGltZV9zdGFtcC50b1N0cmluZygpLmluZGV4T2YoJ0dNVCcpICszO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU3R1ZmZDb3B5WzFdLnRpbWVfc3RhbXAgPSAkc2NvcGUuZGVwU3R1ZmZDb3B5WzFdLnRpbWVfc3RhbXAudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIGFuZCBzZWUgaWYgdGhleSBhcmUgbm90IHVzaW5nIFVUQ1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucmV0U3R1ZmZDb3B5WzFdLnRpbWVfem9uZSAhPSBcIlVUQ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29udmVydCBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB1dGNEYXRlVGltZSA9IG5ldyBEYXRlKCRzY29wZS5yZXRTdHVmZkNvcHlbMV0udGltZV9zdGFtcCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJldFN0dWZmQ29weVsxXS50aW1lX3N0YW1wID0gdXRjRGF0ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXRTdHVmZkNvcHlbMV0udGltZV96b25lID0gJ1VUQyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgJ0dNVCcgaXMgdGFja2VkIG9uIHNvIGl0IGRvZXNuJ3QgdHJ5IHRvIGFkZCBocnMgdG8gbWFrZSB0aGUgYWxyZWFkeSB1dGMgYSB1dGMgaW4gZGJcclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9ICRzY29wZS5yZXRTdHVmZkNvcHlbMV0udGltZV9zdGFtcC50b1N0cmluZygpLmluZGV4T2YoJ0dNVCcpICszO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmV0U3R1ZmZDb3B5WzFdLnRpbWVfc3RhbXAgPSAkc2NvcGUucmV0U3R1ZmZDb3B5WzFdLnRpbWVfc3RhbXAudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8jcmVnaW9uIGRlcGxveSBlZGl0XHJcbiAgICAgICAgICAgIC8vZWRpdCBidXR0b24gY2xpY2tlZC4gbWFrZSBjb3B5IG9mIGRlcGxveWVkIGluZm8gXHJcbiAgICAgICAgICAgICRzY29wZS53YW5uYUVkaXREZXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudmlldy5ERVB2YWwgPSAnZWRpdCc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU3R1ZmZDb3B5ID1bYW5ndWxhci5jb3B5KCRzY29wZS5zZW5zb3IpLCBhbmd1bGFyLmNvcHkoJHNjb3BlLkRlcGxveWVkU2Vuc29yU3RhdCldO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlcFRhcGVDb3B5ID0gYW5ndWxhci5jb3B5KCRzY29wZS5ERVB0YXBlRG93blRhYmxlKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgICAgICAvL3NhdmUgRGVwbG95ZWQgc2Vuc29yIGluZm9cclxuICAgICAgICAgICAgJHNjb3BlLnNhdmVEZXBsb3llZCA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZWRTZW5zb3IgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZFNlblN0YXQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAvL3NlZSBpZiB0aGV5IHVzZWQgTWludXRlcyBvciBzZWNvbmRzIGZvciBpbnRlcnZhbC4gbmVlZCB0byBzdG9yZSBpbiBzZWNvbmRzXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5JbnRlcnZhbFR5cGUudHlwZSA9PSBcIk1pbnV0ZXNcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFN0dWZmQ29weVswXS5pbnRlcnZhbCA9ICRzY29wZS5kZXBTdHVmZkNvcHlbMF0uaW50ZXJ2YWwgKiA2MDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVhbFdpdGhUaW1lU3RhbXBiNFNlbmQoJ2RlcGxveWVkJyk7IC8vVVRDIG9yIGxvY2FsPyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIElOU1RSVU1FTlQudXBkYXRlKHsgaWQ6ICRzY29wZS5kZXBTdHVmZkNvcHlbMF0uaW5zdHJ1bWVudF9pZCB9LCAkc2NvcGUuZGVwU3R1ZmZDb3B5WzBdKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFNlbnNvciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFNlbnNvci5kZXBsb3ltZW50VHlwZSA9ICRzY29wZS5kZXBTdHVmZkNvcHlbMF0uZGVwbG95bWVudF90eXBlX2lkID4gMCA/ICRzY29wZS5kZXBUeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuZGVwbG95bWVudF90eXBlX2lkID09PSAkc2NvcGUuZGVwU3R1ZmZDb3B5WzBdLmRlcGxveW1lbnRfdHlwZV9pZDsgfSlbMF0ubWV0aG9kIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkU2Vuc29yLmhvdXNpbmdUeXBlID0gJHNjb3BlLmRlcFN0dWZmQ29weVswXS5ob3VzaW5nX3R5cGVfaWQgPiAwID8gJHNjb3BlLmhvdXNlVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChoKSB7IHJldHVybiBoLmhvdXNpbmdfdHlwZV9pZCA9PT0gJHNjb3BlLmRlcFN0dWZmQ29weVswXS5ob3VzaW5nX3R5cGVfaWQ7IH0pWzBdLnR5cGVfbmFtZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFNlbnNvci5zZW5zb3JCcmFuZCA9ICRzY29wZS5zZW5zb3JCcmFuZExpc3QuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnNlbnNvcl9icmFuZF9pZCA9PT0gJHNjb3BlLmRlcFN0dWZmQ29weVswXS5zZW5zb3JfYnJhbmRfaWQ7IH0pWzBdLmJyYW5kX25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkU2Vuc29yLnNlbnNvclR5cGUgPSAkc2NvcGUuc2Vuc29yVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0LnNlbnNvcl90eXBlX2lkID09PSAkc2NvcGUuZGVwU3R1ZmZDb3B5WzBdLnNlbnNvcl90eXBlX2lkOyB9KVswXS5zZW5zb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkU2Vuc29yLmluc3RDb2xsZWN0aW9uID0gJHNjb3BlLmNvbGxlY3RDb25kTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGkuaWQgPT09ICRzY29wZS5kZXBTdHVmZkNvcHlbMF0uaW5zdF9jb2xsZWN0aW9uX2lkOyB9KVswXS5jb25kaXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJTlNUUlVNRU5UX1NUQVRVUy51cGRhdGUoeyBpZDogJHNjb3BlLmRlcFN0dWZmQ29weVsxXS5pbnN0cnVtZW50X3N0YXR1c19pZCB9LCAkc2NvcGUuZGVwU3R1ZmZDb3B5WzFdKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChzdGF0UmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2RlYWwgd2l0aCB0YXBlZG93bnMuIHJlbW92ZS9hZGRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBydCA9IDA7IHJ0IDwgJHNjb3BlLkRFUHJlbW92ZU9QTGlzdC5sZW5ndGg7IHJ0KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIERFUGlkVG9SZW1vdmUgPSAkc2NvcGUuREVQcmVtb3ZlT1BMaXN0W3J0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT1BfTUVBU1VSRS5kZWxldGUoeyBpZDogREVQaWRUb1JlbW92ZSB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRFUHRhcGVEb3duVGFibGUgPSAkc2NvcGUuZGVwVGFwZUNvcHkubGVuZ3RoID4gMCA/IFtdIDogJHNjb3BlLkRFUHRhcGVEb3duVGFibGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYXQgPSAwOyBhdCA8ICRzY29wZS5kZXBUYXBlQ29weS5sZW5ndGg7IGF0KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIERFUHRoaXNUYXBlID0gJHNjb3BlLmRlcFRhcGVDb3B5W2F0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKERFUHRoaXNUYXBlLm9wX21lYXN1cmVtZW50c19pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2V4aXN0aW5nLCBwdXQgaW4gY2FzZSB0aGV5IGNoYW5nZWQgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9QX01FQVNVUkUudXBkYXRlKHsgaWQ6IERFUHRoaXNUYXBlLm9wX21lYXN1cmVtZW50c19pZCB9LCBERVB0aGlzVGFwZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAodGFwZVJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFwZVJlc3BvbnNlLm9wX25hbWUgPSBERVB0aGlzVGFwZS5vcF9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcGVSZXNwb25zZS5WZGF0dW0gPSBERVB0aGlzVGFwZS5WZGF0dW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRFUHRhcGVEb3duVGFibGUucHVzaCh0YXBlUmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25ldyBvbmUgYWRkZWQsIHBvc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERFUHRoaXNUYXBlLmluc3RydW1lbnRfc3RhdHVzX2lkID0gc3RhdFJlc3BvbnNlLmluc3RydW1lbnRfc3RhdHVzX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT1BfTUVBU1VSRS5zYXZlKERFUHRoaXNUYXBlKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICh0YXBlUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXBlUmVzcG9uc2Uub3BfbmFtZSA9IERFUHRoaXNUYXBlLm9wX25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFwZVJlc3BvbnNlLlZkYXR1bSA9IERFUHRoaXNUYXBlLlZkYXR1bTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuREVQdGFwZURvd25UYWJsZS5wdXNoKHRhcGVSZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkU2VuU3RhdCA9IHN0YXRSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkU2VuU3RhdC5zdGF0dXMgPSBcIkRlcGxveWVkXCI7IC8vY2FuJ3QgY2hhbmdlIHN0YXR1cyBvbiBhIGRlcGxveWVkIGVkaXQuLnN0aWxsIGRlcGxveWVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvciA9IHVwZGF0ZWRTZW5zb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsbFN0YXR1c0hvbGRlciA9IHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9zdGF0dXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1NlbnNvciA9IHVwZGF0ZWRTZW5zb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRlcGxveWVkU2Vuc29yU3RhdCA9IHVwZGF0ZWRTZW5TdGF0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRGVwbG95ZWRTZW5zb3JTdGF0LnRpbWVfc3RhbXAgPSBnZXREYXRlVGltZVBhcnRzKCRzY29wZS5EZXBsb3llZFNlbnNvclN0YXQudGltZV9zdGFtcCk7Ly90aGlzIGtlZXBzIGl0IGFzIHV0YyBpbiBkaXNwbGF5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1NlbnNvci5pbnN0cnVtZW50X3N0YXR1cyA9IGFsbFN0YXR1c0hvbGRlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kID0gdGhpc1NlbnNvci5pbnN0cnVtZW50X3N0YXR1cy5tYXAoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGkuc3RhdHVzX3R5cGVfaWQ7IH0pLmluZGV4T2YoMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1NlbnNvci5pbnN0cnVtZW50X3N0YXR1c1tpbmRdID0gJHNjb3BlLkRlcGxveWVkU2Vuc29yU3RhdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yLmluc3RydW1lbnRfc3RhdHVzID0gdGhpc1NlbnNvci5pbnN0cnVtZW50X3N0YXR1cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU3R1ZmZDb3B5ID0gW107ICRzY29wZS5kZXBUYXBlQ29weSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5JbnRlcnZhbFR5cGUgPSB7IHR5cGU6ICdTZWNvbmRzJyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS52aWV3LkRFUHZhbCA9ICdkZXRhaWwnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiU2Vuc29yIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcImVycm9yIHNhdmluZyBzZW5zb3Igc3RhdHVzOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcImVycm9yIHNhdmluZyBzZW5zb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgaWYgdmFsaWRcclxuICAgICAgICAgICAgfTsvL2VuZCBzYXZlRGVwbG95ZWQoKVxyXG5cclxuICAgICAgICAgICAgLy9uZXZlciBtaW5kLCBkb24ndCB3YW50IHRvIGVkaXQgZGVwbG95ZWQgc2Vuc29yXHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWxEZXBFZGl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZpZXcuREVQdmFsID0gJ2RldGFpbCc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU3R1ZmZDb3B5ID1bXTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZXBUYXBlQ29weSA9W107XHJcbiAgICAgICAgICAgICAgICAvL01BS0UgU1VSRSBBTEwgU0VMRUNURUQgT1AnUyBTVEFZIFNFTEVDVEVEXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRzY29wZS5ERVBPUHNGb3JUYXBlRG93bi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZm9yIGVhY2ggb25lLCBpZiByZXNwb25zZSBoYXMgdGhpcyBpZCwgYWRkICdzZWxlY3RlZDp0cnVlJyBlbHNlIGFkZCAnc2VsZWN0ZWQ6ZmFsc2UnXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCAkc2NvcGUuREVQdGFwZURvd25UYWJsZS5sZW5ndGg7IHkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRFUHRhcGVEb3duVGFibGVbeV0ub2JqZWN0aXZlX3BvaW50X2lkID09ICRzY29wZS5ERVBPUHNGb3JUYXBlRG93bltpXS5vYmplY3RpdmVfcG9pbnRfaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ERVBPUHNGb3JUYXBlRG93bltpXS5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gJHNjb3BlLkRFUHRhcGVEb3duVGFibGUubGVuZ3RoOyAvL2Vuc3VyZXMgaXQgZG9lc24ndCBzZXQgaXQgYXMgZmFsc2UgYWZ0ZXIgc2V0dGluZyBpdCBhcyB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRFUE9Qc0ZvclRhcGVEb3duW2ldLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuREVQdGFwZURvd25UYWJsZS5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ERVBPUHNGb3JUYXBlRG93bltpXS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyNlbmRyZWdpb24gZGVwbG95IGVkaXRcclxuXHJcbiAgICAgICAgICAgIC8vI3JlZ2lvbiBSZXRyaWV2ZSBlZGl0XHJcbiAgICAgICAgICAgIC8vZWRpdCBidXR0b24gY2xpY2tlZC4gbWFrZSBjb3B5IG9mIGRlcGxveWVkIGluZm8gXHJcbiAgICAgICAgICAgICRzY29wZS53YW5uYUVkaXRSZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudmlldy5SRVR2YWwgPSAnZWRpdCc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucmV0U3R1ZmZDb3B5ID1bYW5ndWxhci5jb3B5KCRzY29wZS5zZW5zb3IpLCBhbmd1bGFyLmNvcHkoJHNjb3BlLlJldHJpZXZlZFNlbnNvclN0YXQpXTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5yZXRUYXBlQ29weSA9IGFuZ3VsYXIuY29weSgkc2NvcGUuUkVUdGFwZURvd25UYWJsZSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL3NhdmUgUmV0cmlldmVkIHNlbnNvciBpbmZvXHJcbiAgICAgICAgICAgICRzY29wZS5zYXZlUmV0cmlldmVkID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZFJldFNlbnNvciA9IHt9OyB2YXIgdXBkYXRlZFJldFNlblN0YXQgPSB7IH07XHJcbiAgICAgICAgICAgICAgICAgICAgZGVhbFdpdGhUaW1lU3RhbXBiNFNlbmQoJ3JldHJpZXZlZCcpOyAvL1VUQyBvciBsb2NhbD9cclxuICAgICAgICAgICAgICAgICAgICAvLyAkc2NvcGUucmV0U3R1ZmZDb3B5WzFdLnRpbWVfc3RhbXAgPSBuZXcgRGF0ZSgkc2NvcGUucmV0U3R1ZmZDb3B5WzFdLnRpbWVfc3RhbXApOy8vZGF0ZXRpbWUgaXMgYW5ub3lpbmdcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgSU5TVFJVTUVOVC51cGRhdGUoeyBpZDogJHNjb3BlLnJldFN0dWZmQ29weVswXS5pbnN0cnVtZW50X2lkIH0sICRzY29wZS5yZXRTdHVmZkNvcHlbMF0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRSZXRTZW5zb3IgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFJldFNlbnNvci5kZXBsb3ltZW50VHlwZSA9ICRzY29wZS5yZXRTdHVmZkNvcHlbMF0uZGVwbG95bWVudF90eXBlX2lkID4gMCA/ICRzY29wZS5kZXBUeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuZGVwbG95bWVudF90eXBlX2lkID09PSAkc2NvcGUucmV0U3R1ZmZDb3B5WzBdLmRlcGxveW1lbnRfdHlwZV9pZDsgfSlbMF0ubWV0aG9kIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRSZXRTZW5zb3IuaG91c2luZ1R5cGUgPSAkc2NvcGUucmV0U3R1ZmZDb3B5WzBdLmhvdXNpbmdfdHlwZV9pZCA+IDAgPyAkc2NvcGUuaG91c2VUeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGgpIHsgcmV0dXJuIGguaG91c2luZ190eXBlX2lkID09PSAkc2NvcGUucmV0U3R1ZmZDb3B5WzBdLmhvdXNpbmdfdHlwZV9pZDsgfSlbMF0udHlwZV9uYW1lIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRSZXRTZW5zb3Iuc2Vuc29yQnJhbmQgPSAkc2NvcGUuc2Vuc29yQnJhbmRMaXN0LmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcy5zZW5zb3JfYnJhbmRfaWQgPT09ICRzY29wZS5yZXRTdHVmZkNvcHlbMF0uc2Vuc29yX2JyYW5kX2lkOyB9KVswXS5icmFuZF9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkUmV0U2Vuc29yLnNlbnNvclR5cGUgPSAkc2NvcGUuc2Vuc29yVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0LnNlbnNvcl90eXBlX2lkID09PSAkc2NvcGUucmV0U3R1ZmZDb3B5WzBdLnNlbnNvcl90eXBlX2lkOyB9KVswXS5zZW5zb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRSZXRTZW5zb3IuaW5zdENvbGxlY3Rpb24gPSAkc2NvcGUuY29sbGVjdENvbmRMaXN0LmZpbHRlcihmdW5jdGlvbiAoaSkgeyByZXR1cm4gaS5pZCA9PT0gJHNjb3BlLnJldFN0dWZmQ29weVswXS5pbnN0X2NvbGxlY3Rpb25faWQ7IH0pWzBdLmNvbmRpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy91cGRhdGUgY29waWVkIHJlZmVyZW5jZXMgZm9yIHBhc3NpbmcgYmFjayB0byBsaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZW5zb3IgPSB1cGRhdGVkUmV0U2Vuc29yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdHNIb2xkZXIgPSB0aGlzU2Vuc29yLmluc3RydW1lbnRfc3RhdHVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzU2Vuc29yID0gdXBkYXRlZFJldFNlbnNvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1NlbnNvci5pbnN0cnVtZW50X3N0YXR1cyA9IHN0YXRzSG9sZGVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBJTlNUUlVNRU5UX1NUQVRVUy51cGRhdGUoeyBpZDogJHNjb3BlLnJldFN0dWZmQ29weVsxXS5pbnN0cnVtZW50X3N0YXR1c19pZCB9LCAkc2NvcGUucmV0U3R1ZmZDb3B5WzFdKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChzdGF0UmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tb3N0UmVjZW50U3RhdHVzID0gc3RhdFJlc3BvbnNlLnN0YXR1c190eXBlX2lkID09IDIgPyBcIlJldHJpZXZlZFwiIDogXCJMb3N0XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUmV0cmlldmVkU2Vuc29yU3RhdCA9IHN0YXRSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5SZXRyaWV2ZWRTZW5zb3JTdGF0LnN0YXR1cyA9IHN0YXRSZXNwb25zZS5zdGF0dXNfdHlwZV9pZCA9PSAyID8gXCJSZXRyaWV2ZWRcIiA6IFwiTG9zdFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJldHJpZXZlZFNlbnNvclN0YXQudGltZV9zdGFtcCA9IGdldERhdGVUaW1lUGFydHMoJHNjb3BlLlJldHJpZXZlZFNlbnNvclN0YXQudGltZV9zdGFtcCk7Ly90aGlzIGtlZXBzIGl0IGFzIHV0YyBpbiBkaXNwbGF5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzU2Vuc29yLmluc3RydW1lbnRfc3RhdHVzWzBdID0gJHNjb3BlLlJldHJpZXZlZFNlbnNvclN0YXQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9kZWFsIHdpdGggdGFwZWRvd25zLiByZW1vdmUvYWRkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBydCA9IDA7IHJ0IDwgJHNjb3BlLlJFVHJlbW92ZU9QTGlzdC5sZW5ndGg7IHJ0KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgUkVUaWRUb1JlbW92ZSA9ICRzY29wZS5SRVRyZW1vdmVPUExpc3RbcnRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9QX01FQVNVUkUuZGVsZXRlKHsgaWQ6IFJFVGlkVG9SZW1vdmUgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUkVUdGFwZURvd25UYWJsZSA9ICRzY29wZS5yZXRUYXBlQ29weS5sZW5ndGggPiAwID8gW10gOiAkc2NvcGUuUkVUdGFwZURvd25UYWJsZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGF0ID0gMDsgYXQgPCAkc2NvcGUucmV0VGFwZUNvcHkubGVuZ3RoOyBhdCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFJFVHRoaXNUYXBlID0gJHNjb3BlLnJldFRhcGVDb3B5W2F0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoUkVUdGhpc1RhcGUub3BfbWVhc3VyZW1lbnRzX2lkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9leGlzdGluZywgcHV0IGluIGNhc2UgdGhleSBjaGFuZ2VkIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9QX01FQVNVUkUudXBkYXRlKHsgaWQ6IFJFVHRoaXNUYXBlLm9wX21lYXN1cmVtZW50c19pZCB9LCBSRVR0aGlzVGFwZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAodGFwZVJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXBlUmVzcG9uc2Uub3BfbmFtZSA9IFJFVHRoaXNUYXBlLm9wX25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXBlUmVzcG9uc2UuVmRhdHVtID0gUkVUdGhpc1RhcGUuVmRhdHVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJFVHRhcGVEb3duVGFibGUucHVzaCh0YXBlUmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25ldyBvbmUgYWRkZWQsIHBvc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUkVUdGhpc1RhcGUuaW5zdHJ1bWVudF9zdGF0dXNfaWQgPSBzdGF0UmVzcG9uc2UuaW5zdHJ1bWVudF9zdGF0dXNfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9QX01FQVNVUkUuc2F2ZShSRVR0aGlzVGFwZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAodGFwZVJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXBlUmVzcG9uc2Uub3BfbmFtZSA9IFJFVHRoaXNUYXBlLm9wX25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXBlUmVzcG9uc2UuVmRhdHVtID0gUkVUdGhpc1RhcGUuVmRhdHVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJFVHRhcGVEb3duVGFibGUucHVzaCh0YXBlUmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmV0U3R1ZmZDb3B5ID0gW107ICRzY29wZS5yZXRUYXBlQ29weSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnZpZXcuUkVUdmFsID0gJ2RldGFpbCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlNlbnNvciB1cGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiZXJyb3Igc2F2aW5nIHNlbnNvciBzdGF0dXM6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiZXJyb3Igc2F2aW5nIHNlbnNvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfS8vZW5kIGlmIHZhbGlkXHJcbiAgICAgICAgfTsvL2VuZCBzYXZlUmV0cmlldmVkKCkgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIC8vbmV2ZXIgbWluZCwgZG9uJ3Qgd2FudCB0byBlZGl0IHJldHJpZXZlZCBzZW5zb3JcclxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbFJldEVkaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudmlldy5SRVR2YWwgPSAnZGV0YWlsJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5yZXRTdHVmZkNvcHkgPVtdO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnJldFRhcGVDb3B5ID1bXTtcclxuICAgICAgICAgICAgICAgIC8vTUFLRSBTVVJFIEFMTCBTRUxFQ1RFRCBPUCdTIFNUQVkgU0VMRUNURURcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLlJFVE9Qc0ZvclRhcGVEb3duLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9mb3IgZWFjaCBvbmUsIGlmIHJlc3BvbnNlIGhhcyB0aGlzIGlkLCBhZGQgJ3NlbGVjdGVkOnRydWUnIGVsc2UgYWRkICdzZWxlY3RlZDpmYWxzZSdcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8ICRzY29wZS5SRVR0YXBlRG93blRhYmxlLmxlbmd0aDsgeSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuUkVUdGFwZURvd25UYWJsZVt5XS5vYmplY3RpdmVfcG9pbnRfaWQgPT0gJHNjb3BlLlJFVE9Qc0ZvclRhcGVEb3duW2ldLm9iamVjdGl2ZV9wb2ludF9pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJFVE9Qc0ZvclRhcGVEb3duW2ldLnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSAkc2NvcGUuUkVUdGFwZURvd25UYWJsZS5sZW5ndGg7IC8vZW5zdXJlcyBpdCBkb2Vzbid0IHNldCBpdCBhcyBmYWxzZSBhZnRlciBzZXR0aW5nIGl0IGFzIHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUkVUT1BzRm9yVGFwZURvd25baV0uc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5SRVR0YXBlRG93blRhYmxlLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJFVE9Qc0ZvclRhcGVEb3duW2ldLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBSZXRyaWV2ZSBlZGl0XHJcbiAgICAgIFxyXG4gICAgICAgICAgICAvL2RlbGV0ZSBhU2Vuc29yIGFuZCBzZW5zb3Igc3RhdHVzZXNcclxuICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZVMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvL1RPRE86OiBEZWxldGUgdGhlIGZpbGVzIGZvciB0aGlzIHNlbnNvciB0b28gb3IgcmVhc3NpZ24gdG8gdGhlIFNpdGU/PyBTZXJ2aWNlcyBvciBjbGllbnQgaGFuZGxpbmc/XHJcbiAgICAgICAgICAgICAgICB2YXIgRGVsZXRlTW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkc2NvcGUuc2Vuc29yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJTZW5zb3JcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIERlbGV0ZU1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHNlbnNvclRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICskY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy90aGlzIHdpbGwgZGVsZXRlIHRoZSBpbnN0cnVtZW50IGFuZCBhbGwgaXQncyBzdGF0dXNlc1xyXG4gICAgICAgICAgICAgICAgICAgIElOU1RSVU1FTlQuZGVsZXRlKHsgaWQ6IHNlbnNvclRvUmVtb3ZlLmluc3RydW1lbnRfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZW5zb3JGaWxlcyA9W107IC8vY2xlYXIgb3V0IHNlbnNvckZpbGVzIGZvciB0aGlzIHNlbnNvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc0ltYWdlRmlsZXMgPVtdOyAvL2NsZWFyIG91dCBpbWFnZSBmaWxlcyBmb3IgdGhpcyBzZW5zb3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3cgcmVtb3ZlIGFsbCB0aGVzZSBmaWxlcyBmcm9tIFNpdGVGaWxlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9ICRzY29wZS5hbGxTRmlsZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobC0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFsbFNGaWxlc1tsXS5pbnN0cnVtZW50X2lkID09IHNlbnNvclRvUmVtb3ZlLmluc3RydW1lbnRfaWQpICRzY29wZS5hbGxTRmlsZXMuc3BsaWNlKGwsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdXBkYXRlcyB0aGUgZmlsZSBsaXN0IG9uIHRoZSBzaXRlZGFzaGJvYXJkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlNlbnNvciBSZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VuZEJhY2sgPVtcImRlXCIsICdkZWxldGVkJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHNlbmRCYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vbG9naWMgZm9yIGNhbmNlbFxyXG4gICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vI3JlZ2lvbiBGSUxFIFNUVUZGXHJcbiAgICAgICAgICAgICRzY29wZS5zdGFtcCA9IEZJTEVfU1RBTVAuZ2V0U3RhbXAoKTsgJHNjb3BlLmZpbGVJdGVtRXhpc3RzID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy9uZWVkIHRvIHJldXBsb2FkIGZpbGVJdGVtIHRvIHRoaXMgZXhpc3RpbmcgZmlsZSBPUiBDaGFuZ2Ugb3V0IGV4aXN0aW5nIGZpbGVJdGVtIGZvciBuZXcgb25lXHJcbiAgICAgICAgICAgICRzY29wZS5zYXZlRmlsZVVwbG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHZhciBmaWxlUGFydHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRmlsZUVudGl0eToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2lkOiAkc2NvcGUuYUZpbGUuZmlsZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJHNjb3BlLmFGaWxlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAkc2NvcGUuYUZpbGUuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RpcmVjdGlvbjogJHNjb3BlLmFGaWxlLnBob3RvX2RpcmVjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGVfZGQ6ICRzY29wZS5hRmlsZS5sYXRpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlX2RkOiAkc2NvcGUuYUZpbGUubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2RhdGU6ICRzY29wZS5hRmlsZS5maWxlX2RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh3bV9pZDogJHNjb3BlLmFGaWxlLmh3bV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogJHNjb3BlLmFGaWxlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlX2lkOiAkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZV9pZDogJHNjb3BlLmFGaWxlLnNvdXJjZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogJHNjb3BlLmFGaWxlLnBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFfZmlsZV9pZDogJHNjb3BlLmFGaWxlLmRhdGFfZmlsZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1bWVudF9pZDogJHNjb3BlLmFGaWxlLmluc3RydW1lbnRfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RhdGU6ICRzY29wZS5hRmlsZS5waG90b19kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc19ud2lzOiAkc2NvcGUuYUZpbGUuaXNfbndpcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0aXZlX3BvaW50X2lkOiAkc2NvcGUuYUZpbGUub2JqZWN0aXZlX3BvaW50X2lkXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBGaWxlOiAkc2NvcGUuYUZpbGUuRmlsZTEgIT09IHVuZGVmaW5lZCA/ICRzY29wZS5hRmlsZS5GaWxlMSA6ICRzY29wZS5hRmlsZS5GaWxlXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy9uZWVkIHRvIHB1dCB0aGUgZmlsZVBhcnRzIGludG8gY29ycmVjdCBmb3JtYXQgZm9yIHBvc3RcclxuICAgICAgICAgICAgICAgIHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZUVudGl0eVwiLCBKU09OLnN0cmluZ2lmeShmaWxlUGFydHMuRmlsZUVudGl0eSkpO1xyXG4gICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZVwiLCBmaWxlUGFydHMuRmlsZSk7XHJcbiAgICAgICAgICAgICAgICAvL25vdyBQT1NUIGl0IChmaWxlcGFydHMpXHJcbiAgICAgICAgICAgICAgICBGSUxFLnVwbG9hZEZpbGUoZmQpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGxvYWRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3JjID0gJHNjb3BlLnNlcnZlclVSTCArICcvRmlsZXMvJyArICRzY29wZS5hRmlsZS5maWxlX2lkICsgJy9JdGVtJyArIEZJTEVfU1RBTVAuZ2V0U3RhbXAoKTtcclxuICAgICAgICAgICAgICAgICAgICBGSUxFX1NUQU1QLnNldFN0YW1wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YW1wID0gRklMRV9TVEFNUC5nZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuRmlsZTEudHlwZS5pbmRleE9mKFwiaW1hZ2VcIikgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNQaG90byA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlICRzY29wZS5pc1Bob3RvID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLm5hbWUgPSBmcmVzcG9uc2UubmFtZTsgJHNjb3BlLmFGaWxlLnBhdGggPSBmcmVzcG9uc2UucGF0aDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLkZpbGUxICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLkZpbGUgPSAkc2NvcGUuYUZpbGUuRmlsZTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5GaWxlMSA9IHVuZGVmaW5lZDsgLy9wdXQgaXQgYXMgZmlsZSBhbmQgcmVtb3ZlIGl0IGZyb20gMVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9ICRzY29wZS5hRmlsZS5maWxldHlwZV9pZCA9PSAyID8gXCJEYXRhRmlsZSBGaWxlXCIgOiBcIlNlbnNvciBGaWxlXCI7ICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmcmVzcG9uc2UuZmlsZXR5cGVfaWQgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNJbWFnZUZpbGVzLnNwbGljZSgkc2NvcGUuZXhpc3RJTUdGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc0ltYWdlRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yRmlsZXNbJHNjb3BlLmV4aXN0RmlsZUluZGV4XSA9IGZyZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzWyRzY29wZS5hbGxTRmlsZUluZGV4XSA9IGZyZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuYWxsU0ZpbGVzKTsgLy91cGRhdGVzIHRoZSBmaWxlIGxpc3Qgb24gdGhlIHNpdGVkYXNoYm9hcmRcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlSXRlbUV4aXN0cyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGZpbGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvL3Nob3cgYSBtb2RhbCB3aXRoIHRoZSBsYXJnZXIgaW1hZ2UgYXMgYSBwcmV2aWV3IG9uIHRoZSBwaG90byBmaWxlIGZvciB0aGlzIG9wXHJcbiAgICAgICAgICAgICRzY29wZS5zaG93SW1hZ2VNb2RhbCA9IGZ1bmN0aW9uIChpbWFnZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGltYWdlTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5JbWFnZSBGaWxlIFByZXZpZXc8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48aW1nIG5nLXNyYz1cInt7c2V0U1JDfX1cIiAvPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW1hZ2VJZCA9IGltYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2V0U1JDID0gU0VSVkVSX1VSTCArICcvRmlsZXMvJyArJHNjb3BlLmltYWdlSWQgKyAnL0l0ZW0nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdtZCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy93YW50IHRvIGFkZCBvciBlZGl0IGZpbGVcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlID0gZnVuY3Rpb24gKGZpbGUpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5maWxlVHlwZXMgPSAkc2NvcGUuZmlsZVR5cGVMaXN0O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFnZW5jaWVzID0gYWdlbmN5TGlzdDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5leGlzdEZpbGVJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmV4aXN0SU1HRmlsZUluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVJbmRleCA9IC0xOyAvL2luZGV4ZXMgZm9yIHNwbGljZS9jaGFuZ2VcclxuICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZSA9IHt9OyAvL2hvbGRlciBmb3IgZmlsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UgPSB7fTsgLy9ob2xkZXIgZm9yIGZpbGUgc291cmNlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUgPSB7fTsgLy9ob2xkZXIgZm9yIGZpbGUgZGF0YWZpbGVcclxuICAgICAgICAgICAgICAgIGlmIChmaWxlICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9lZGl0IG9wIGZpbGVcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhpc3RGaWxlSW5kZXggPSAkc2NvcGUuc2Vuc29yRmlsZXMuaW5kZXhPZihmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVJbmRleCA9ICRzY29wZS5hbGxTRmlsZXMuaW5kZXhPZihmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhpc3RJTUdGaWxlSW5kZXggPSAkc2NvcGUuc2Vuc0ltYWdlRmlsZXMubGVuZ3RoID4gMCA/ICRzY29wZS5zZW5zSW1hZ2VGaWxlcy5pbmRleE9mKGZpbGUpOiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUgPSBhbmd1bGFyLmNvcHkoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgRklMRS5nZXRGaWxlSXRlbSh7IGlkOiAkc2NvcGUuYUZpbGUuZmlsZV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZUl0ZW1FeGlzdHMgPSByZXNwb25zZS5MZW5ndGggPiAwID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5maWxlVHlwZSA9ICRzY29wZS5maWxlVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChmdCkgeyByZXR1cm4gZnQuZmlsZXR5cGVfaWQgPT0gJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkOyB9KVswXS5maWxldHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAvL2RldGVybWluZSBpZiBleGlzdGluZyBmaWxlIGlzIGEgcGhvdG8gKGV2ZW4gaWYgdHlwZSBpcyBub3QgKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUubmFtZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmSSA9ICRzY29wZS5hRmlsZS5uYW1lLmxhc3RJbmRleE9mKFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVFeHQgPSAkc2NvcGUuYUZpbGUubmFtZS5zdWJzdHJpbmcoZkkgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVFeHQubWF0Y2goLyhqcGd8SlBHfGpwZWd8SlBFR3xwbmd8UE5HfGdpZnxHSUYpJC8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNQaG90byA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSAkc2NvcGUuaXNQaG90byA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3JjID0gJHNjb3BlLnNlcnZlclVSTCArICcvRmlsZXMvJyArICRzY29wZS5hRmlsZS5maWxlX2lkICsgJy9JdGVtJyArIEZJTEVfU1RBTVAuZ2V0U3RhbXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlID0gbmV3IERhdGUoJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSk7IC8vZGF0ZSBmb3IgdmFsaWRpdHkgb2YgZm9ybSBvbiBQVVRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUgIT09IHVuZGVmaW5lZCkgJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUgPSBuZXcgRGF0ZSgkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSk7IC8vZGF0ZSBmb3IgdmFsaWRpdHkgb2YgZm9ybSBvbiBQVVRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZS5zb3VyY2VfaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTT1VSQ0UucXVlcnkoeyBpZDogZmlsZS5zb3VyY2VfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UgPSBzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UuRlVMTG5hbWUgPSAkc2NvcGUuYVNvdXJjZS5zb3VyY2VfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYWRkIGFnZW5jeSBuYW1lIHRvIHBob3RvIGNhcHRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQgPT0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWdlbmN5TmFtZUZvckNhcCA9ICRzY29wZS5hZ2VuY2llcy5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuYWdlbmN5X2lkID09ICRzY29wZS5hU291cmNlLmFnZW5jeV9pZDsgfSlbMF0uYWdlbmN5X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0vL2VuZCBpZiBzb3VyY2VcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZS5kYXRhX2ZpbGVfaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQXBwcm92YWxJbmZvID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERBVEFfRklMRS5xdWVyeSh7IGlkOiBmaWxlLmRhdGFfZmlsZV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkZikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlID0gZGY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc29yID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRzY29wZS5kYXRhZmlsZS5wcm9jZXNzb3JfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmNvbGxlY3RfZGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5kYXRhZmlsZS5jb2xsZWN0X2RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmdvb2Rfc3RhcnQgPSBnZXREYXRlVGltZVBhcnRzKCRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCA9IGdldERhdGVUaW1lUGFydHMoJHNjb3BlLmRhdGFmaWxlLmdvb2RfZW5kKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZi5hcHByb3ZhbF9pZCAhPT0gdW5kZWZpbmVkICYmIGRmLmFwcHJvdmFsX2lkICE9PSBudWxsICYmIGRmLmFwcHJvdmFsX2lkID49IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUuZ2V0REZBcHByb3ZhbCh7IGlkOiBkZi5kYXRhX2ZpbGVfaWQgfSwgZnVuY3Rpb24gc3VjY2VzcyhhcHByb3ZhbFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5BcHByb3ZhbEluZm8uYXBwcm92YWxEYXRlID0gbmV3IERhdGUoYXBwcm92YWxSZXNwb25zZS5hcHByb3ZhbF9kYXRlKTsgLy9pbmNsdWRlIG5vdGUgdGhhdCBpdCdzIGRpc3BsYXllZCBpbiB0aGVpciBsb2NhbCB0aW1lIGJ1dCBzdG9yZWQgaW4gVVRDXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5BcHByb3ZhbEluZm8uTWVtYmVyID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKGFtZW0pIHsgcmV0dXJuIGFtZW0ubWVtYmVyX2lkID09IGFwcHJvdmFsUmVzcG9uc2UubWVtYmVyX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIGdldHRpbmcgZGF0YSBmaWxlIGFwcHJvdmFsIGluZm9ybWF0aW9uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgZXhpc3RpbmcgZmlsZVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jcmVhdGluZyBhIGZpbGVcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlID0gbmV3IERhdGUoKTsgJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRjb29raWVzLmdldCgnbUlEJyk7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlLkZVTExuYW1lID0gJHNjb3BlLmFTb3VyY2UuZm5hbWUgKyBcIiBcIiArJHNjb3BlLmFTb3VyY2UubG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NvciA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1lbWJlcl9pZCA9PSAkY29va2llcy5nZXQoJ21JRCcpOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZHQgPSBnZXRUaW1lWm9uZVN0YW1wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmNvbGxlY3RfZGF0ZSA9IGR0WzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS50aW1lX3pvbmUgPSBkdFsxXTsgLy93aWxsIGJlIGNvbnZlcnRlZCB0byB1dGMgb24gcG9zdC9wdXQgXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmdvb2Rfc3RhcnQgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICB9IC8vZW5kIG5ldyBmaWxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVGb3JtID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVBZ2VuY3lGb3JDYXB0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQgPT0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFnZW5jeU5hbWVGb3JDYXAgPSAkc2NvcGUuYWdlbmNpZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLmFnZW5jeV9pZCA9PSAkc2NvcGUuYVNvdXJjZS5hZ2VuY3lfaWQ7IH0pWzBdLmFnZW5jeV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vY3JlYXRlIHRoaXMgbmV3IGZpbGVcclxuICAgICAgICAgICAgJHNjb3BlLmNyZWF0ZUZpbGUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQgPT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlIGVuZCBkYXRlIGlzIGFmdGVyIHN0YXJ0IGRhdGVcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9ICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0Oy8vbmVlZCB0byBnZXQgZGVwIHN0YXR1cyBkYXRlIGluIHNhbWUgZm9ybWF0IGFzIHJldHJpZXZlZCB0byBjb21wYXJlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSAkc2NvcGUuZGF0YWZpbGUuZ29vZF9lbmQ7IC8vc3R1cGlkIGNvbW1hIGluIHRoZXJlIG1ha2luZyBpdCBub3QgdGhlIHNhbWVcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3IERhdGUoZSkgPCBuZXcgRGF0ZShzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZml4RGF0ZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBnb29kIGVuZCBkYXRlIG11c3QgYmUgYWZ0ZXIgdGhlIGdvb2Qgc3RhcnQgZGF0ZS48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXhEYXRlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5mdWxsU2VuZmlsZUlzVXBsb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAvL3Bvc3Qgc291cmNlIG9yIGRhdGFmaWxlIGZpcnN0IHRvIGdldCBzb3VyY2VfaWQgb3IgZGF0YV9maWxlX2lkXHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkID09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2RldGVybWluZSB0aW1lem9uZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZGF0YWZpbGUudGltZV96b25lICE9IFwiVVRDXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jb252ZXJ0IGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1dGNTdGFydERhdGVUaW1lID0gbmV3IERhdGUoJHNjb3BlLmRhdGFmaWxlLmdvb2Rfc3RhcnQpLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1dGNFbmREYXRlVGltZSA9IG5ldyBEYXRlKCRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmdvb2Rfc3RhcnQgPSB1dGNTdGFydERhdGVUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUuZ29vZF9lbmQgPSB1dGNFbmREYXRlVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLnRpbWVfem9uZSA9ICdVVEMnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlICdHTVQnIGlzIHRhY2tlZCBvbiBzbyBpdCBkb2Vzbid0IHRyeSB0byBhZGQgaHJzIHRvIG1ha2UgdGhlIGFscmVhZHkgdXRjIGEgdXRjIGluIGRiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaSA9ICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0LnRvU3RyaW5nKCkuaW5kZXhPZignR01UJykgKzM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlaSA9ICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZC50b1N0cmluZygpLmluZGV4T2YoJ0dNVCcpICszO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydCA9ICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0LnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIHNpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmdvb2RfZW5kID0gJHNjb3BlLmRhdGFmaWxlLmdvb2RfZW5kLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIGVpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmluc3RydW1lbnRfaWQgPSB0aGlzU2Vuc29yLmluc3RydW1lbnRfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLnByb2Nlc3Nvcl9pZCA9ICRjb29raWVzLmdldCgnbUlEJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgREFUQV9GSUxFLnNhdmUoJHNjb3BlLmRhdGFmaWxlKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkZlJlc29uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGVuIFBPU1QgZmlsZVBhcnRzIChTZXJ2aWNlcyBwb3B1bGF0ZSBQQVRIKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZVBhcnRzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZUVudGl0eToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlX2lkOiAkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJHNjb3BlLmFGaWxlLkZpbGUubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2RhdGU6ICRzY29wZS5hRmlsZS5maWxlX2RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICRzY29wZS5hRmlsZS5kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXRlX2lkOiAkc2NvcGUudGhpc1NlbnNvclNpdGUuc2l0ZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXRhX2ZpbGVfaWQ6IGRmUmVzb25zZS5kYXRhX2ZpbGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9fZGlyZWN0aW9uOiAkc2NvcGUuYUZpbGUucGhvdG9fZGlyZWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlX2RkOiAkc2NvcGUuYUZpbGUubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlX2RkOiAkc2NvcGUuYUZpbGUubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnRfaWQ6IHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGU6ICRzY29wZS5hRmlsZS5GaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbmVlZCB0byBwdXQgdGhlIGZpbGVQYXJ0cyBpbnRvIGNvcnJlY3QgZm9ybWF0IGZvciBwb3N0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmZC5hcHBlbmQoXCJGaWxlRW50aXR5XCIsIEpTT04uc3RyaW5naWZ5KGZpbGVQYXJ0cy5GaWxlRW50aXR5KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZkLmFwcGVuZChcIkZpbGVcIiwgZmlsZVBhcnRzLkZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBQT1NUIGl0IChmaWxlcGFydHMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEZJTEUudXBsb2FkRmlsZShmZCkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoZnJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgVXBsb2FkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiRGF0YUZpbGUgRmlsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvckZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU2l0ZV9GaWxlcy5zZXRBbGxTaXRlRmlsZXMoJHNjb3BlLmFsbFNGaWxlcyk7IC8vdXBkYXRlcyB0aGUgZmlsZSBsaXN0IG9uIHRoZSBzaXRlZGFzaGJvYXJkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnJlc3BvbnNlLmZpbGV0eXBlX2lkID09PSAxKSAkc2NvcGUuc2Vuc0ltYWdlRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IGZhbHNlOyAkc2NvcGUuZnVsbFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZ1bGxTZW5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBmaWxlOiBcIiArZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZ1bGxTZW5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGRhdGEgZmlsZTogXCIgK2Vycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgZGF0YWZpbGUuc2F2ZSgpXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vaXQncyBub3QgYSBkYXRhIGZpbGUsIHNvIGRvIHRoZSBzb3VyY2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoZVNvdXJjZSA9IHsgc291cmNlX25hbWU6ICRzY29wZS5hU291cmNlLkZVTExuYW1lLCBhZ2VuY3lfaWQ6ICRzY29wZS5hU291cmNlLmFnZW5jeV9pZH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNPVVJDRS5zYXZlKHRoZVNvdXJjZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhlbiBQT1NUIGZpbGVQYXJ0cyAoU2VydmljZXMgcG9wdWxhdGUgUEFUSClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlUGFydHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZUVudGl0eToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxldHlwZV9pZDogJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAkc2NvcGUuYUZpbGUuRmlsZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2RhdGU6ICRzY29wZS5hRmlsZS5maWxlX2RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RhdGU6ICRzY29wZS5hRmlsZS5waG90b19kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJHNjb3BlLmFGaWxlLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXRlX2lkOiAkc2NvcGUudGhpc1NlbnNvclNpdGUuc2l0ZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlX2lkOiByZXNwb25zZS5zb3VyY2VfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RpcmVjdGlvbjogJHNjb3BlLmFGaWxlLnBob3RvX2RpcmVjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGVfZGQ6ICRzY29wZS5hRmlsZS5sYXRpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlX2RkOiAkc2NvcGUuYUZpbGUubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVtZW50X2lkOiB0aGlzU2Vuc29yLmluc3RydW1lbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGU6ICRzY29wZS5hRmlsZS5GaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9uZWVkIHRvIHB1dCB0aGUgZmlsZVBhcnRzIGludG8gY29ycmVjdCBmb3JtYXQgZm9yIHBvc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZUVudGl0eVwiLCBKU09OLnN0cmluZ2lmeShmaWxlUGFydHMuRmlsZUVudGl0eSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZVwiLCBmaWxlUGFydHMuRmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBQT1NUIGl0IChmaWxlcGFydHMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGSUxFLnVwbG9hZEZpbGUoZmQpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGxvYWRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiU2Vuc29yIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmcmVzcG9uc2UuZmlsZXR5cGVfaWQgPT09IDEpICRzY29wZS5zZW5zSW1hZ2VGaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IGZhbHNlOyAkc2NvcGUuZnVsbFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZnVsbFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBmaWxlOiBcIiArZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZ1bGxTZW5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBzb3VyY2UgaW5mbzogXCIgK2Vycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIHNvdXJjZS5zYXZlKClcclxuICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgaWYgc291cmNlXHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgdmFsaWRcclxuICAgICAgICAgICAgfTsvL2VuZCBjcmVhdGUoKVxyXG5cclxuICAgICAgICAgICAgLy91cGRhdGUgdGhpcyBmaWxlXHJcbiAgICAgICAgICAgICRzY29wZS5zYXZlRmlsZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5maWxldHlwZV9pZCA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgZW5kIGRhdGUgaXMgYWZ0ZXIgc3RhcnQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gJHNjb3BlLmRhdGFmaWxlLmdvb2Rfc3RhcnQ7Ly9uZWVkIHRvIGdldCBkZXAgc3RhdHVzIGRhdGUgaW4gc2FtZSBmb3JtYXQgYXMgcmV0cmlldmVkIHRvIGNvbXBhcmVcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZSA9ICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZDsgLy9zdHVwaWQgY29tbWEgaW4gdGhlcmUgbWFraW5nIGl0IG5vdCB0aGUgc2FtZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXcgRGF0ZShlKSA8IG5ldyBEYXRlKHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXhEYXRlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+VGhlIGdvb2QgZW5kIGRhdGUgbXVzdCBiZSBhZnRlciB0aGUgZ29vZCBzdGFydCBkYXRlLjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpeERhdGUucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZ1bGxTZW5maWxlSXNVcGxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcHV0IHNvdXJjZSBvciBkYXRhZmlsZSwgcHV0IGZpbGVcclxuICAgICAgICAgICAgICAgICAgICB2YXIgd2hhdGtpbmQgPSAkc2NvcGUuYUZpbGUuZmlsZUJlbG9uZ3NUbztcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5kYXRhZmlsZS5kYXRhX2ZpbGVfaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2hhcyBEQVRBX0ZJTEVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jaGVjayB0aW1lem9uZSBhbmQgbWFrZSBzdXJlIGRhdGUgc3RheXMgdXRjXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZGF0YWZpbGUudGltZV96b25lICE9IFwiVVRDXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29udmVydCBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHV0Y1N0YXJ0RGF0ZVRpbWUgPSBuZXcgRGF0ZSgkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1dGNFbmREYXRlVGltZSA9IG5ldyBEYXRlKCRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0ID0gdXRjU3RhcnREYXRlVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCA9IHV0Y0VuZERhdGVUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLnRpbWVfem9uZSA9ICdVVEMnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgJ0dNVCcgaXMgdGFja2VkIG9uIHNvIGl0IGRvZXNuJ3QgdHJ5IHRvIGFkZCBocnMgdG8gbWFrZSB0aGUgYWxyZWFkeSB1dGMgYSB1dGMgaW4gZGJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaSA9ICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0LnRvU3RyaW5nKCkuaW5kZXhPZignR01UJykgKzM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWkgPSAkc2NvcGUuZGF0YWZpbGUuZ29vZF9lbmQudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0ID0gJHNjb3BlLmRhdGFmaWxlLmdvb2Rfc3RhcnQudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgc2kpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmdvb2RfZW5kID0gJHNjb3BlLmRhdGFmaWxlLmdvb2RfZW5kLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIGVpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUudXBkYXRlKHsgaWQ6ICRzY29wZS5kYXRhZmlsZS5kYXRhX2ZpbGVfaWQgfSwgJHNjb3BlLmRhdGFmaWxlKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZJTEUudXBkYXRlKHsgaWQ6ICRzY29wZS5hRmlsZS5maWxlX2lkIH0sICRzY29wZS5hRmlsZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoZmlsZVJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVJlc3BvbnNlLmZpbGVCZWxvbmdzVG8gPSBcIkRhdGFGaWxlIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yRmlsZXNbJHNjb3BlLmV4aXN0RmlsZUluZGV4XT0gZmlsZVJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZXNbJHNjb3BlLmFsbFNGaWxlSW5kZXhdPSBmaWxlUmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2l0ZV9GaWxlcy5zZXRBbGxTaXRlRmlsZXMoJHNjb3BlLmFsbFNGaWxlcyk7IC8vdXBkYXRlcyB0aGUgZmlsZSBsaXN0IG9uIHRoZSBzaXRlZGFzaGJvYXJkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IGZhbHNlOyAkc2NvcGUuZnVsbFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZnVsbFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBmaWxlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5mdWxsU2VuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7IC8vTG9hZGluZy4uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGRhdGEgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2hhcyBTT1VSQ0VcclxuICAgICAgICAgICAgICAgICAgICAvLyBwb3N0IGFnYWluIChpZiBubyBjaGFuZ2UsIHdpbGwgcmV0dXJuIGV4aXN0aW5nIG9uZS4gaWYgZWRpdGVkLCB3aWxsIGNyZWF0ZSBhIG5ldyBvbmUgLS1pbnN0ZWFkIG9mIGVkaXRpbmcgYWxsIGZpbGVzIHRoYXQgdXNlIHRoaXMgc291cmNlKVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGVTb3VyY2UgPSB7IHNvdXJjZV9uYW1lOiAkc2NvcGUuYVNvdXJjZS5GVUxMbmFtZSwgYWdlbmN5X2lkOiAkc2NvcGUuYVNvdXJjZS5hZ2VuY3lfaWQgfTtcclxuICAgICAgICAgICAgICAgICAgICBTT1VSQ0Uuc2F2ZSh0aGVTb3VyY2UpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLnNvdXJjZV9pZCA9IHJlc3BvbnNlLnNvdXJjZV9pZDtcclxuICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5hU291cmNlLnNvdXJjZV9uYW1lID0gJHNjb3BlLmFTb3VyY2UuRlVMTG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAvLyBTT1VSQ0UudXBkYXRlKHsgaWQ6ICRzY29wZS5hU291cmNlLnNvdXJjZV9pZCB9LCAkc2NvcGUuYVNvdXJjZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEZJTEUudXBkYXRlKHsgaWQ6ICRzY29wZS5hRmlsZS5maWxlX2lkIH0sICRzY29wZS5hRmlsZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoZmlsZVJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVSZXNwb25zZS5maWxlQmVsb25nc1RvID0gXCJTZW5zb3IgRmlsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvckZpbGVzWyRzY29wZS5leGlzdEZpbGVJbmRleF09IGZpbGVSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZXNbJHNjb3BlLmFsbFNGaWxlSW5kZXhdPSBmaWxlUmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuYWxsU0ZpbGVzKTsgLy91cGRhdGVzIHRoZSBmaWxlIGxpc3Qgb24gdGhlIHNpdGVkYXNoYm9hcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgJHNjb3BlLmZ1bGxTZW5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5mdWxsU2VuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZnVsbFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlOyAvL0xvYWRpbmcuLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIHNvdXJjZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9Ly9lbmQgdmFsaWRcclxuICAgICAgICB9Oy8vZW5kIHNhdmUoKVxyXG5cclxuICAgICAgICAgICAgLy9kZWxldGUgdGhpcyBmaWxlXHJcbiAgICAgICAgICAgICRzY29wZS5kZWxldGVGaWxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIERlbGV0ZU1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLmFGaWxlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBEZWxldGVNb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChmaWxlVG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICBGSUxFLmRlbGV0ZSh7IGlkOiBmaWxlVG9SZW1vdmUuZmlsZV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZW5zb3JGaWxlcy5zcGxpY2UoJHNjb3BlLmV4aXN0RmlsZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlcy5zcGxpY2UoJHNjb3BlLmFsbFNGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc0ltYWdlRmlsZXMuc3BsaWNlKCRzY29wZS5leGlzdElNR0ZpbGVJbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVGb3JtID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7Ly9lbmQgRGVsZXRlTW9kYWwucmVzdWx0LnRoZW5cclxuICAgICAgICAgICAgfTsvL2VuZCBkZWxldGUoKVxyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbEZpbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUgPSB7IH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZSA9IHsgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZSA9IHsgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vYXBwcm92ZSB0aGlzIGRhdGFmaWxlIChpZiBhZG1pbiBvciBtYW5hZ2VyKVxyXG4gICAgICAgICAgICAkc2NvcGUuYXBwcm92ZURGID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy90aGlzIGlzIHZhbGlkLCBzaG93IG1vZGFsIHRvIGNvbmZpcm0gdGhleSB3YW50IHRvIGFwcHJvdmUgaXRcclxuICAgICAgICAgICAgICAgIHZhciB0aGlzREYgPSAkc2NvcGUuZGF0YWZpbGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXBwcm92ZU1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxkaXYgY2xhc3M9J21vZGFsLWhlYWRlcic+PGgzIGNsYXNzPSdtb2RhbC10aXRsZSc+QXBwcm92ZSBEYXRhIEZpbGU8L2gzPjwvZGl2PlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdtb2RhbC1ib2R5Jz48cD5BcmUgeW91IHJlYWR5IHRvIGFwcHJvdmUgdGhpcyBEYXRhIEZpbGU/PC9wPjwvZGl2PlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdtb2RhbC1mb290ZXInPjxidXR0b24gY2xhc3M9J2J0biBidG4tcHJpbWFyeScgbmctY2xpY2s9J2FwcHJvdmVJdCgpJz5BcHByb3ZlPC9idXR0b24+PGJ1dHRvbiBjbGFzcz0nYnRuIGJ0bi13YXJuaW5nJyBuZy1jbGljaz0nY2FuY2VsKCknPkNhbmNlbDwvYnV0dG9uPjwvZGl2PlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXBwcm92ZUl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9kZWxldGUgdGhlIHNpdGUgYW5kIGFsbCB0aGluZ3MgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSh0aGlzREYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYXBwcm92ZU1vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChkZikge1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUuYXBwcm92ZURGKHsgaWQ6IGRmLmRhdGFfZmlsZV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChhcHByb3ZhbFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRmLmFwcHJvdmFsX2lkID0gYXBwcm92YWxSZXNwb25zZS5hcHByb3ZhbF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlID0gZGY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRGF0YSBGaWxlIEFwcHJvdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQXBwcm92YWxJbmZvLmFwcHJvdmFsRGF0ZSA9IG5ldyBEYXRlKGFwcHJvdmFsUmVzcG9uc2UuYXBwcm92YWxfZGF0ZSk7IC8vaW5jbHVkZSBub3RlIHRoYXQgaXQncyBkaXNwbGF5ZWQgaW4gdGhlaXIgbG9jYWwgdGltZSBidXQgc3RvcmVkIGluIFVUQ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQXBwcm92YWxJbmZvLk1lbWJlciA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChhbWVtKSB7IHJldHVybiBhbWVtLm1lbWJlcl9pZCA9PSBhcHByb3ZhbFJlc3BvbnNlLm1lbWJlcl9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbG9naWMgZm9yIGNhbmNlbFxyXG4gICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vYXBwcm92ZSB0aGlzIGh3bSAoaWYgYWRtaW4gb3IgbWFuYWdlcilcclxuICAgICAgICAgICAgJHNjb3BlLnVuQXBwcm92ZURGID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy90aGlzIGlzIHZhbGlkLCBzaG93IG1vZGFsIHRvIGNvbmZpcm0gdGhleSB3YW50IHRvIGFwcHJvdmUgaXRcclxuICAgICAgICAgICAgICAgIHZhciB0aGlzREYgPSAkc2NvcGUuZGF0YWZpbGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgdW5hcHByb3ZlTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwiPGRpdiBjbGFzcz0nbW9kYWwtaGVhZGVyJz48aDMgY2xhc3M9J21vZGFsLXRpdGxlJz5SZW1vdmUgQXBwcm92YWw8L2gzPjwvZGl2PlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdtb2RhbC1ib2R5Jz48cD5BcmUgeW91IHN1cmUgeW91IHdhbiB0byB1bmFwcHJvdmUgdGhpcyBEYXRhIEZpbGU/PC9wPjwvZGl2PlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdtb2RhbC1mb290ZXInPjxidXR0b24gY2xhc3M9J2J0biBidG4tcHJpbWFyeScgbmctY2xpY2s9J3VuQXBwcm92ZUl0KCknPlVuYXBwcm92ZTwvYnV0dG9uPjxidXR0b24gY2xhc3M9J2J0biBidG4td2FybmluZycgbmctY2xpY2s9J2NhbmNlbCgpJz5DYW5jZWw8L2J1dHRvbj48L2Rpdj5cIixcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVuQXBwcm92ZUl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9kZWxldGUgdGhlIHNpdGUgYW5kIGFsbCB0aGluZ3MgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSh0aGlzREYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdW5hcHByb3ZlTW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGRmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgIERBVEFfRklMRS51bkFwcHJvdmVERih7IGlkOiBkZi5kYXRhX2ZpbGVfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRmLmFwcHJvdmFsX2lkID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlID0gZGY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRGF0YSBGaWxlIFVuYXBwcm92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5BcHByb3ZhbEluZm8gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyNlbmRyZWdpb24gRklMRSBTVFVGRlxyXG5cclxuICAgICAgICAgICAgLy8jcmVnaW9uIE5XSVMgREFUQV9GSUxFXHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuc2Vuc29yRGF0YU5XSVMpIHtcclxuICAgICAgICAgICAgICAgIC8vRklMRS5WQUxJREFURUQgYmVpbmcgdXNlZCB0byBzdG9yZSAxIGlmIHRoaXMgaXMgYW4gbndpcyBmaWxlIG1ldGFkYXRhIGxpbmtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZW5zb3JOV0lTRmlsZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGFpID0gJHNjb3BlLnNlbnNvckZpbGVzLmxlbmd0aCAtIDE7IGFpID49IDA7IGFpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnNlbnNvckZpbGVzW2FpXS5pc19ud2lzID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvck5XSVNGaWxlcy5wdXNoKCRzY29wZS5zZW5zb3JGaWxlc1thaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yRmlsZXMuc3BsaWNlKGFpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgZHQgPSBnZXRUaW1lWm9uZVN0YW1wKCk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0ZpbGUgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYgPSB7fTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd05XSVNGaWxlID0gZnVuY3Rpb24gKGYpIHtcclxuICAgICAgICAgICAgICAgIC8vd2FudCB0byBhZGQgb3IgZWRpdCBmaWxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXhpc3RGaWxlSW5kZXggPSAtMTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZUluZGV4ID0gLTE7IC8vaW5kZXhlcyBmb3Igc3BsaWNlL2NoYW5nZVxyXG4gICAgICAgICAgICAgICAgaWYgKGYgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2VkaXQgTldJUyBmaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4aXN0RmlsZUluZGV4ID0gJHNjb3BlLnNlbnNvck5XSVNGaWxlcy5pbmRleE9mKGYpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZUluZGV4ID0gJHNjb3BlLmFsbFNGaWxlcy5pbmRleE9mKGYpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTRmlsZSA9IGFuZ3VsYXIuY29weShmKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0ZpbGUuZmlsZV9kYXRlID0gbmV3IERhdGUoJHNjb3BlLk5XSVNGaWxlLmZpbGVfZGF0ZSk7IC8vZGF0ZSBmb3IgdmFsaWRpdHkgb2YgZm9ybSBvbiBQVVRcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0ZpbGUuRmlsZVR5cGUgPSBcIkRhdGFcIjtcclxuICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUucXVlcnkoeyBpZDogZi5kYXRhX2ZpbGVfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoZGYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERiA9IGRmO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubndpc1Byb2Nlc3NvciA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1lbWJlcl9pZCA9PSAkc2NvcGUuTldJU0RGLnByb2Nlc3Nvcl9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuY29sbGVjdF9kYXRlID0gbmV3IERhdGUoJHNjb3BlLk5XSVNERi5jb2xsZWN0X2RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0RGLmdvb2Rfc3RhcnQgPSBnZXREYXRlVGltZVBhcnRzKCRzY29wZS5OV0lTREYuZ29vZF9zdGFydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuZ29vZF9lbmQgPSBnZXREYXRlVGltZVBhcnRzKCRzY29wZS5OV0lTREYuZ29vZF9lbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZW5kIGV4aXN0aW5nIGZpbGVcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jcmVhdGluZyBhIG53aXMgZmlsZVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTRmlsZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9kYXRlOiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxldHlwZV9pZDogMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2h0dHA6Ly93YXRlcmRhdGEudXNncy5nb3Yvbndpcy91dj9zaXRlX25vPScgKyAkc2NvcGUudGhpc1NlbnNvclNpdGUudXNnc19zaWQsICAvLyBpZiBbZmlsbCBpbiBpZiBub3QgaGVyZS4uIFRPRE8uLi4mYmVnaW5fZGF0ZT0yMDE2MDQxMyZlbmRfZGF0ZT0yMDE2MDQxOSAoZXZlbnQgc3RhcnQvZW5kKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiAnPGxpbms+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgRmlsZVR5cGU6ICdEYXRhJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogJHNjb3BlLnNlbnNvci5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhX2ZpbGVfaWQ6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnRfaWQ6ICRzY29wZS5zZW5zb3IuaW5zdHJ1bWVudF9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNfbndpczogMVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc29yX2lkOiAkY29va2llcy5nZXQoXCJtSURcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnRfaWQ6ICRzY29wZS5zZW5zb3IuaW5zdHJ1bWVudF9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdF9kYXRlOiBkdFswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZV96b25lOiBkdFsxXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ29vZF9zdGFydDogbmV3IERhdGUoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ29vZF9lbmQ6IG5ldyBEYXRlKClcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ud2lzUHJvY2Vzc29yID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRjb29raWVzLmdldCgnbUlEJyk7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgfSAvL2VuZCBuZXcgZmlsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dOV0lTRmlsZUZvcm0gPSB0cnVlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2YXIgcG9zdEFwcHJvdmFsRm9yTldJU2ZpbGUgPSBmdW5jdGlvbiAoREZpZCkge1xyXG4gICAgICAgICAgICAgICAgREFUQV9GSUxFLmFwcHJvdmVOV0lTREYoeyBpZDogREZpZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChhcHByb3ZhbFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNGaWxlLmFwcHJvdmFsX2lkID0gYXBwcm92YWxSZXNwb25zZS5hcHByb3ZhbF9pZDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkc2NvcGUuY3JlYXRlTldJU0ZpbGUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlIGVuZCBkYXRlIGlzIGFmdGVyIHN0YXJ0IGRhdGVcclxuICAgICAgICAgICAgICAgIHZhciBzID0gJHNjb3BlLk5XSVNERi5nb29kX3N0YXJ0Oy8vbmVlZCB0byBnZXQgZGVwIHN0YXR1cyBkYXRlIGluIHNhbWUgZm9ybWF0IGFzIHJldHJpZXZlZCB0byBjb21wYXJlXHJcbiAgICAgICAgICAgICAgICB2YXIgZSA9ICRzY29wZS5OV0lTREYuZ29vZF9lbmQ7IC8vc3R1cGlkIGNvbW1hIGluIHRoZXJlIG1ha2luZyBpdCBub3QgdGhlIHNhbWVcclxuICAgICAgICAgICAgICAgIGlmIChuZXcgRGF0ZShlKSA8IG5ldyBEYXRlKHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZml4RGF0ZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGUgZ29vZCBlbmQgZGF0ZSBtdXN0IGJlIGFmdGVyIHRoZSBnb29kIHN0YXJ0IGRhdGUuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZml4RGF0ZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICskY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcG9zdCBkYXRhZmlsZSBmaXJzdCB0byBnZXQgb3IgZGF0YV9maWxlX2lkXHJcbiAgICAgICAgICAgICAgICAgICAgLy9kZXRlcm1pbmUgdGltZXpvbmVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLk5XSVNERi50aW1lX3pvbmUgIT0gXCJVVENcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnZlcnQgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHV0Y1N0YXJ0RGF0ZVRpbWUgPSBuZXcgRGF0ZSgkc2NvcGUuTldJU0RGLmdvb2Rfc3RhcnQpLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1dGNFbmREYXRlVGltZSA9IG5ldyBEYXRlKCRzY29wZS5OV0lTREYuZ29vZF9lbmQpLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuZ29vZF9zdGFydCA9IHV0Y1N0YXJ0RGF0ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuZ29vZF9lbmQgPSB1dGNFbmREYXRlVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERi50aW1lX3pvbmUgPSAnVVRDJztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSAnR01UJyBpcyB0YWNrZWQgb24gc28gaXQgZG9lc24ndCB0cnkgdG8gYWRkIGhycyB0byBtYWtlIHRoZSBhbHJlYWR5IHV0YyBhIHV0YyBpbiBkYlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2kgPSAkc2NvcGUuTldJU0RGLmdvb2Rfc3RhcnQudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArIDM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlaSA9ICRzY29wZS5OV0lTREYuZ29vZF9lbmQudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArIDM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuZ29vZF9zdGFydCA9ICRzY29wZS5OV0lTREYuZ29vZF9zdGFydC50b1N0cmluZygpLnN1YnN0cmluZygwLCBzaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuZ29vZF9lbmQgPSAkc2NvcGUuTldJU0RGLmdvb2RfZW5kLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIGVpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgREFUQV9GSUxFLnNhdmUoJHNjb3BlLk5XSVNERikuJHByb21pc2UudGhlbihmdW5jdGlvbiAoTmRmUmVzb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RoZW4gUE9TVCBmaWxlUGFydHMgKFNlcnZpY2VzIHBvcHVsYXRlIFBBVEgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTRmlsZS5kYXRhX2ZpbGVfaWQgPSBOZGZSZXNvbnNlLmRhdGFfZmlsZV9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdEFwcHJvdmFsRm9yTldJU2ZpbGUoTmRmUmVzb25zZS5kYXRhX2ZpbGVfaWQpOyAvL3Byb2Nlc3MgYXBwcm92YWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3cgUE9TVCBGaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEZJTEUuc2F2ZSgkc2NvcGUuTldJU0ZpbGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKEZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIERhdGEgc2F2ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiRGF0YUZpbGUgRmlsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUuc2Vuc29yRmlsZXMucHVzaChGcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvck5XSVNGaWxlcy5wdXNoKEZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzLnB1c2goRnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZCAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93TldJU0ZpbGVGb3JtID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfS8vZW5kIHZhbGlkXHJcbiAgICAgICAgICAgIH07Ly8gZW5kIGNyZWF0ZSBOV0lTIGZpbGVcclxuICAgICAgICAgICAgLy91cGRhdGUgdGhpcyBOV0lTIGZpbGVcclxuICAgICAgICAgICAgJHNjb3BlLnNhdmVOV0lTRmlsZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgZW5kIGRhdGUgaXMgYWZ0ZXIgc3RhcnQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgdmFyIHMgPSAkc2NvcGUuTldJU0RGLmdvb2Rfc3RhcnQ7Ly9uZWVkIHRvIGdldCBkZXAgc3RhdHVzIGRhdGUgaW4gc2FtZSBmb3JtYXQgYXMgcmV0cmlldmVkIHRvIGNvbXBhcmVcclxuICAgICAgICAgICAgICAgIHZhciBlID0gJHNjb3BlLk5XSVNERi5nb29kX2VuZDsgLy9zdHVwaWQgY29tbWEgaW4gdGhlcmUgbWFraW5nIGl0IG5vdCB0aGUgc2FtZVxyXG4gICAgICAgICAgICAgICAgaWYgKG5ldyBEYXRlKGUpIDwgbmV3IERhdGUocykpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaXhEYXRlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBnb29kIGVuZCBkYXRlIG11c3QgYmUgYWZ0ZXIgdGhlIGdvb2Qgc3RhcnQgZGF0ZS48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBmaXhEYXRlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcHV0IHNvdXJjZSBvciBkYXRhZmlsZSwgcHV0IGZpbGVcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jaGVjayB0aW1lem9uZSBhbmQgbWFrZSBzdXJlIGRhdGUgc3RheXMgdXRjXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5OV0lTREYudGltZV96b25lICE9IFwiVVRDXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jb252ZXJ0IGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1dGNTdGFydERhdGVUaW1lID0gbmV3IERhdGUoJHNjb3BlLk5XSVNERi5nb29kX3N0YXJ0KS50b1VUQ1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXRjRW5kRGF0ZVRpbWUgPSBuZXcgRGF0ZSgkc2NvcGUuTldJU0RGLmdvb2RfZW5kKS50b1VUQ1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0RGLmdvb2Rfc3RhcnQgPSB1dGNTdGFydERhdGVUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0RGLmdvb2RfZW5kID0gdXRjRW5kRGF0ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYudGltZV96b25lID0gJ1VUQyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgJ0dNVCcgaXMgdGFja2VkIG9uIHNvIGl0IGRvZXNuJ3QgdHJ5IHRvIGFkZCBocnMgdG8gbWFrZSB0aGUgYWxyZWFkeSB1dGMgYSB1dGMgaW4gZGJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNpID0gJHNjb3BlLk5XSVNERi5nb29kX3N0YXJ0LnRvU3RyaW5nKCkuaW5kZXhPZignR01UJykgKzM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlaSA9ICRzY29wZS5OV0lTREYuZ29vZF9lbmQudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERi5nb29kX3N0YXJ0ID0gJHNjb3BlLk5XSVNERi5nb29kX3N0YXJ0LnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIHNpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERi5nb29kX2VuZCA9ICRzY29wZS5OV0lTREYuZ29vZF9lbmQudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgZWkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUudXBkYXRlKHsgaWQ6ICRzY29wZS5OV0lTREYuZGF0YV9maWxlX2lkIH0sICRzY29wZS5OV0lTREYpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBGSUxFLnVwZGF0ZSh7IGlkOiAkc2NvcGUuTldJU0ZpbGUuZmlsZV9pZCB9LCAkc2NvcGUuTldJU0ZpbGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZpbGVSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIERhdGEgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVSZXNwb25zZS5maWxlQmVsb25nc1RvID0gXCJEYXRhRmlsZSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yTldJU0ZpbGVzWyRzY29wZS5leGlzdEZpbGVJbmRleF0gPSBmaWxlUmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzWyRzY29wZS5hbGxTRmlsZUluZGV4XSA9IGZpbGVSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dOV0lTRmlsZUZvcm0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgdmFsaWRcclxuICAgICAgICAgICAgfTsvL2VuZCBzYXZlKClcclxuXHJcbiAgICAgICAgICAgIC8vZGVsZXRlIHRoaXMgZmlsZVxyXG4gICAgICAgICAgICAkc2NvcGUuZGVsZXRlTldJU0ZpbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgRGVsZXRlTW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkc2NvcGUuTldJU0ZpbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIERlbGV0ZU1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGZpbGVUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgIEZJTEUuZGVsZXRlKHsgaWQ6IGZpbGVUb1JlbW92ZS5maWxlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvck5XSVNGaWxlcy5zcGxpY2UoJHNjb3BlLmV4aXN0RmlsZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlcy5zcGxpY2UoJHNjb3BlLmFsbFNGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuYWxsU0ZpbGVzKTsgLy91cGRhdGVzIHRoZSBmaWxlIGxpc3Qgb24gdGhlIHNpdGVkYXNoYm9hcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dOV0lTRmlsZUZvcm0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTsvL2VuZCBEZWxldGVNb2RhbC5yZXN1bHQudGhlblxyXG4gICAgICAgICAgICB9Oy8vZW5kIGRlbGV0ZSgpXHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsTldJU0ZpbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0ZpbGUgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93TldJU0ZpbGVGb3JtID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vI2VuZHJlZ2lvblxyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgfV0pOy8vZW5kIGZ1bGxTZW5zb3JNb2RhbEN0cmxcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBTVE5Db250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTVE5Db250cm9sbGVycycpO1xyXG5cclxuICAgIFNUTkNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ3NlbnNvckN0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRxJywgJyRjb29raWVzJywgJyRsb2NhdGlvbicsICckc3RhdGUnLCAnJGh0dHAnLCAnJHVpYk1vZGFsJywgJyRmaWx0ZXInLCAnJHRpbWVvdXQnLCAndGhpc1NpdGUnLCAnSW5zdHJ1bWVudF9TZXJ2aWNlJywgJ3RoaXNTaXRlU2Vuc29ycycsICdhbGxTZW5zb3JCcmFuZHMnLCAnYWxsQWdlbmNpZXMnLCAnYWxsVmVydERhdHVtcycsICdhbGxEZXBsb3lUeXBlcycsICdhbGxTZW5zb3JUeXBlcycsICdhbGxIb3VzaW5nVHlwZXMnLCAnYWxsRXZlbnRzJywgJ2FsbEZpbGVUeXBlcycsICdJTlNUUlVNRU5UJywgJ0lOU1RSVU1FTlRfU1RBVFVTJywgJ1NJVEUnLCAnTUVNQkVSJywgJ0RFUExPWU1FTlRfVFlQRScsICdTVEFUVVNfVFlQRScsICdJTlNUX0NPTExfQ09ORElUSU9OJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkcSwgJGNvb2tpZXMsICRsb2NhdGlvbiwgJHN0YXRlLCAkaHR0cCwgJHVpYk1vZGFsLCAkZmlsdGVyLCAkdGltZW91dCwgdGhpc1NpdGUsIEluc3RydW1lbnRfU2VydmljZSwgdGhpc1NpdGVTZW5zb3JzLCBhbGxTZW5zb3JCcmFuZHMsIGFsbEFnZW5jaWVzLCBhbGxWZXJ0RGF0dW1zLCBhbGxEZXBsb3lUeXBlcywgYWxsU2Vuc29yVHlwZXMsIGFsbEhvdXNpbmdUeXBlcywgYWxsRXZlbnRzLCBhbGxGaWxlVHlwZXMsIElOU1RSVU1FTlQsIElOU1RSVU1FTlRfU1RBVFVTLCBTSVRFLCBNRU1CRVIsIERFUExPWU1FTlRfVFlQRSwgU1RBVFVTX1RZUEUsIElOU1RfQ09MTF9DT05ESVRJT04pIHtcclxuICAgICAgICAgICAgaWYgKCRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gdW5kZWZpbmVkIHx8ICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmF1dGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbG9naW4nKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vZ2xvYmFsIHZhcnNcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZW5zb3JDb3VudCA9IHsgdG90YWw6IHRoaXNTaXRlU2Vuc29ycy5sZW5ndGggfTsgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVwbG95VHlwZUxpc3QgPSBhbmd1bGFyLmNvcHkoYWxsRGVwbG95VHlwZXMpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRlbXBEZXBUeXBlSUQgPSAwO1xyXG4gICAgICAgICAgICAgICAgLy9maXggZGVwbG95bWVudCB0eXBlcyBzbyB0aGF0IFwiVGVtcGVyYXR1cmVcIiBiZWNvbWVzIDIgOiBUZW1wZXJhdHVyZSAoTWV0IHNlbnNvciktU2Vuc29yVHlwZToyIGFuZCBUZW1wZXJhdHVyZSAocHJlc3N1cmUgdHJhbnNkdWNlciktU2Vuc29yVHlwZToxIC0tIGp1c3QgZm9yIHByb3Bvc2VkXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBkID0gMDsgZCA8ICRzY29wZS5kZXBsb3lUeXBlTGlzdC5sZW5ndGg7IGQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZGVwbG95VHlwZUxpc3RbZF0ubWV0aG9kID09PSBcIlRlbXBlcmF0dXJlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcERlcFR5cGVJRCA9ICRzY29wZS5kZXBsb3lUeXBlTGlzdFtkXS5kZXBsb3ltZW50X3R5cGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBsb3lUeXBlTGlzdFtkXS5tZXRob2QgPSBcIlRlbXBlcmF0dXJlIChNZXQgc2Vuc29yKVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICRzY29wZS5kZXBsb3lUeXBlTGlzdC5wdXNoKHsgZGVwbG95bWVudF90eXBlX2lkOiB0ZW1wRGVwVHlwZUlELCBtZXRob2Q6IFwiVGVtcGVyYXR1cmUgKFByZXNzdXJlIFRyYW5zZHVjZXIpXCIgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNEZXBUeXBlcyA9IGFsbFNlbnNvclR5cGVzOy8vIGFsbFNlbnNEZXBzO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dQcm9wb3NlZCA9IGZhbHNlOyAvL3RoZXkgd2FudCB0byBhZGQgYSBwcm9wb3NlZCBzZW5zb3IsIG9wZW4gb3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgLy9uZWVkIHRvIG1ha2Ugc3VyZSB0aGUgaW5zdHJ1bWVudF9zdGF0dXNlcyBhcmUgaW4gdGhlIGNvcnJlY3Qgb3JkZXIgKFswXVJldHJpZXZlZCwgWzFdRGVwbG95ZWQsIFsyXVByb3Bvc2VkICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcyA9IDA7IHMgPCB0aGlzU2l0ZVNlbnNvcnMubGVuZ3RoOyBzKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY29ycmVjdE9yZGVyU1MgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2Vuc29yU3RhdHVzZXMgPSB0aGlzU2l0ZVNlbnNvcnNbc10uaW5zdHJ1bWVudF9zdGF0dXM7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2Vuc29yU3RhdHVzZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL29ubHkgY2FyZSBhYm91dCBvcmRlciBpZiB0aGVyZSdzIG1vcmUgdGhhbiAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9wb3NlZFN0YXQgPSBzZW5zb3JTdGF0dXNlcy5maWx0ZXIoZnVuY3Rpb24gKHBzKSB7IHJldHVybiBwcy5zdGF0dXMgPT0gXCJQcm9wb3NlZFwiOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlcGxveWVkU3RhdCA9IHNlbnNvclN0YXR1c2VzLmZpbHRlcihmdW5jdGlvbiAocHMpIHsgcmV0dXJuIHBzLnN0YXR1cyA9PSBcIkRlcGxveWVkXCI7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmV0TG9zdFN0YXQgPSBzZW5zb3JTdGF0dXNlcy5maWx0ZXIoZnVuY3Rpb24gKHBzKSB7IHJldHVybiBwcy5zdGF0dXMgPT0gXCJSZXRyaWV2ZWRcIiB8fCBwcy5zdGF0dXMgPT0gXCJMb3N0XCI7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBhZGQgdGhlbSBiYWNrIGluIGNvcnJlY3RseVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0TG9zdFN0YXQpIGNvcnJlY3RPcmRlclNTLnB1c2gocmV0TG9zdFN0YXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVwbG95ZWRTdGF0KSBjb3JyZWN0T3JkZXJTUy5wdXNoKGRlcGxveWVkU3RhdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wb3NlZFN0YXQpIGNvcnJlY3RPcmRlclNTLnB1c2gocHJvcG9zZWRTdGF0KTsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3JyZWN0T3JkZXJTUy5wdXNoKHNlbnNvclN0YXR1c2VzWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9ub3cgcHV0IGl0IGJhY2sgaW4gdGhlIG9iamVjdFxyXG4gICAgICAgICAgICAgICAgICAgIHRoaXNTaXRlU2Vuc29yc1tzXS5pbnN0cnVtZW50X3N0YXR1cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXNTaXRlU2Vuc29yc1tzXS5pbnN0cnVtZW50X3N0YXR1cyA9IGNvcnJlY3RPcmRlclNTO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZVNlbnNvcnMgPSB0aGlzU2l0ZVNlbnNvcnM7XHJcbiAgICAgICAgICAgICAgICBJbnN0cnVtZW50X1NlcnZpY2Uuc2V0QWxsU2l0ZVNlbnNvcnMoJHNjb3BlLlNpdGVTZW5zb3JzKTtcclxuICAgICAgICAgICAgICAgIC8vdG8gcGFzcyB0byB0aGUgc2Vuc29yIG1vZGFscyBmb3Igc2Vuc29yIGZpbGVzXHJcbiAgICAgICAgICAgICAgICB2YXIgU2Vuc0ZpbGVUeXBlcyA9IGFsbEZpbGVUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKHNmdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vUGhvdG8gKDEpLCBEYXRhICgyKSwgSGlzdG9yaWMgKDMpLCBGaWVsZCBTaGVldHMgKDQpLCBMZXZlbCBOb3RlcyAoNSksIE90aGVyICg3KSwgTGluayAoOCksIFNrZXRjaCAoMTApXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNmdC5maWxldHlwZSA9PT0gJ1Bob3RvJyB8fCBzZnQuZmlsZXR5cGUgPT09ICdEYXRhJyB8fCBzZnQuZmlsZXR5cGUgPT09ICdIaXN0b3JpYyBDaXRhdGlvbicgfHwgc2Z0LmZpbGV0eXBlID09PSAnRmllbGQgU2hlZXRzJyB8fCBzZnQuZmlsZXR5cGUgPT09ICdMZXZlbCBOb3RlcycgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICBzZnQuZmlsZXR5cGUgPT09ICdPdGhlcicgfHwgc2Z0LmZpbGV0eXBlID09PSAnTGluaycgfHwgc2Z0LmZpbGV0eXBlID09PSAnU2tldGNoJztcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy9zaG93L2hpZGUgcHJvcG9zZWQgc2Vuc29ycyB0byBhZGRcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93SGlkZVByb3Bvc2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93UHJvcG9zZWQgPSAhJHNjb3BlLnNob3dQcm9wb3NlZDtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvL2FkZCB0aGVzZSBjaGVja2VkIFByb3Bvc2VkIHNlbnNvcnMgdG8gdGhpcyBzaXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQWRkUHJvcG9zZWQgPSBmdW5jdGlvbiAoKSB7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB2YXIgVGltZV9TVEFNUCA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZHQgPSAwOyBkdCA8ICRzY29wZS5kZXBsb3lUeXBlTGlzdC5sZW5ndGg7IGR0KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5kZXBsb3lUeXBlTGlzdFtkdF0uc2VsZWN0ZWQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwcm9wb3NlZFRvQWRkID0ge307IHZhciBwcm9wU3RhdFRvQWRkID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmRlcGxveVR5cGVMaXN0W2R0XS5tZXRob2Quc3Vic3RyaW5nKDAsIDQpID09IFwiVGVtcFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90ZW1wZXJhdHVyZSBwcm9wb3NlZCBzZW5zb3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NlZFRvQWRkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBsb3ltZW50X3R5cGVfaWQ6ICRzY29wZS5kZXBsb3lUeXBlTGlzdFtkdF0uZGVwbG95bWVudF90eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXRlX2lkOiB0aGlzU2l0ZS5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5zb3JfdHlwZV9pZDogJHNjb3BlLmRlcGxveVR5cGVMaXN0W2R0XS5tZXRob2QgPT0gXCJUZW1wZXJhdHVyZSAoUHJlc3N1cmUgVHJhbnNkdWNlcilcIiA/IDEgOiAyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZ28gdGhyb3VnaCB0aGUgbmV3IGZ1bGxJbnN0cnVtZW50IGFuZCBzZWUgaWYgYW55IG9mIHRoZSBzZW5zb3IncyBkZXBsb3ltZW50dHlwZXMgYXJlIHRoaXMgZGVwbG95bWVudCB0eXBlIHRvIHNldCB0aGUgc2Vuc29yX3R5cGVfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc0lEID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLnNlbnNEZXBUeXBlcywgZnVuY3Rpb24gKHNkdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHNkdC5kZXBsb3ltZW50dHlwZXMubGVuZ3RoOyB4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZHQuZGVwbG95bWVudHR5cGVzW3hdLmRlcGxveW1lbnRfdHlwZV9pZCA9PSAkc2NvcGUuZGVwbG95VHlwZUxpc3RbZHRdLmRlcGxveW1lbnRfdHlwZV9pZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzSUQgPSBzZHQuc2Vuc29yX3R5cGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FueSBvdGhlciB0eXBlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zZWRUb0FkZCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwbG95bWVudF90eXBlX2lkOiAkc2NvcGUuZGVwbG95VHlwZUxpc3RbZHRdLmRlcGxveW1lbnRfdHlwZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogdGhpc1NpdGUuc2l0ZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vuc29yX3R5cGVfaWQ6IHNJRCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3cgcG9zdCBpdCAoSW5zdHJ1bWVudCBmaXJzdCwgdGhlbiBJbnN0cnVtZW50IFN0YXR1c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIElOU1RSVU1FTlQuc2F2ZShwcm9wb3NlZFRvQWRkKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjcmVhdGVkUHJvcFNlbnNvciA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwbG95bWVudF90eXBlX2lkOiByZXNwb25zZS5kZXBsb3ltZW50X3R5cGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6IHJlc3BvbnNlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbnNvcl90eXBlX2lkOiByZXNwb25zZS5zZW5zb3JfdHlwZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1bWVudF9pZDogcmVzcG9uc2UuaW5zdHJ1bWVudF9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwbG95bWVudFR5cGU6ICRzY29wZS5kZXBsb3lUeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGR0bCkgeyByZXR1cm4gZHRsLmRlcGxveW1lbnRfdHlwZV9pZCA9PSByZXNwb25zZS5kZXBsb3ltZW50X3R5cGVfaWQ7IH0pWzBdLm1ldGhvZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vuc29yVHlwZTogJHNjb3BlLnNlbnNEZXBUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc2Vuc29yX3R5cGVfaWQgPT0gcmVzcG9uc2Uuc2Vuc29yX3R5cGVfaWQ7fSlbMF0uc2Vuc29yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wU3RhdFRvQWRkID0geyBpbnN0cnVtZW50X2lkOiByZXNwb25zZS5pbnN0cnVtZW50X2lkLCBzdGF0dXNfdHlwZV9pZDogNCwgbWVtYmVyX2lkOiAkY29va2llcy5nZXQoJ21JRCcpLCB0aW1lX3N0YW1wOiBUaW1lX1NUQU1QLCB0aW1lX3pvbmU6ICdVVEMnLCB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJTlNUUlVNRU5UX1NUQVRVUy5zYXZlKHByb3BTdGF0VG9BZGQpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHN0YXRSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wU3RhdFRvQWRkLnN0YXR1cyA9ICdQcm9wb3NlZCc7IHByb3BTdGF0VG9BZGQuaW5zdHJ1bWVudF9zdGF0dXNfaWQgPSBzdGF0UmVzcG9uc2UuaW5zdHJ1bWVudF9zdGF0dXNfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRQcm9wU2Vuc29yLmluc3RydW1lbnRfc3RhdHVzID0gW3Byb3BTdGF0VG9BZGRdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVTZW5zb3JzLnB1c2goY3JlYXRlZFByb3BTZW5zb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yQ291bnQgPSB7IHRvdGFsOiAkc2NvcGUuU2l0ZVNlbnNvcnMubGVuZ3RoIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY2xlYW4gdXAgLi4uYWxsIHVuY2hlY2tlZCBhbmQgdGhlbiBoaWRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGRlcCA9IDA7IGRlcCA8ICRzY29wZS5kZXBsb3lUeXBlTGlzdC5sZW5ndGg7IGRlcCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwbG95VHlwZUxpc3RbZGVwXS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFueXRoaW5nIHlvdSB3YW50IGNhbiBnbyBoZXJlIGFuZCB3aWxsIHNhZmVseSBiZSBydW4gb24gdGhlIG5leHQgZGlnZXN0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dQcm9wb3NlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJQcm9wb3NlZCBzZW5zb3IgY3JlYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBTZW5zb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBJTlNUUlVNRU5UX1NUQVRVUy5zYXZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBTZW5zb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAvL2VuZCBJTlNUUlVNRU5ULnNhdmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfS8vZW5kIGlmIHNlbGVjdGVkID09IHRydWVcclxuICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgZm9yZWFjaCBkZXBsb3lUeXBlTGlzdFxyXG4gICAgICAgICAgICAgICAgfTsvL2VuZCBBZGRQcm9wb3NlZCgpXHJcblxyXG4gICAgICAgICAgICAgICAgLy93YW50IHRvIHJldHJpZXZlIHRoaXMgZGVwbG95ZWQgc2Vuc29yXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1JldHJpZXZlTW9kYWwgPSBmdW5jdGlvbiAoc2Vuc29yQ2xpY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbmVlZCBzdGF0dXNUeXBlcywgQ29sbGVjdENvbmRpdGlvbnMgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXhDbGlja2VkID0gJHNjb3BlLlNpdGVTZW5zb3JzLmluZGV4T2Yoc2Vuc29yQ2xpY2tlZCk7IHZhciBhbGxpbmRleCA9IHRoaXNTaXRlU2Vuc29ycy5pbmRleE9mKHNlbnNvckNsaWNrZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSB0cnVlOy8vIGxvYWRpbmcuLi8vJChcIi5wYWdlLWxvYWRpbmdcIikucmVtb3ZlQ2xhc3MoXCJoaWRkZW5cIik7IC8vbG9hZGluZy4uLlxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdTZW5zb3JSZXRyaWV2YWxNb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NlbnNvclJldHJpZXZhbE1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdsZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Q2xhc3M6ICdyZXAtZGlhbG9nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZTogeyAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1NlbnNvcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZW5zb3JDbGlja2VkICE9PSAwID8gc2Vuc29yQ2xpY2tlZCA6IFwiZW1wdHlcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZW5zb3JTaXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNTaXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbEV2ZW50TGlzdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhbGxFdmVudHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZU9QczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTSVRFLmdldFNpdGVPUHMoeyBpZDogdGhpc1NpdGUuc2l0ZV9pZCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxNZW1iZXJzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTUVNQkVSLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFN0YXR1c1R5cGVzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNUQVRVU19UWVBFLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbEluc3RDb2xsQ29uZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlNUX0NPTExfQ09ORElUSU9OLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFZEYXR1bUxpc3Q6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWxsVmVydERhdHVtcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHJldHJpZXZlZFNlbnNvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0cmlldmVkU2Vuc29yWzFdID09ICdyZXRyaWV2ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZVNlbnNvcnNbaW5kZXhDbGlja2VkXSA9IHJldHJpZXZlZFNlbnNvclswXTsgdGhpc1NpdGVTZW5zb3JzW2FsbGluZGV4XSA9IHJldHJpZXZlZFNlbnNvclswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmV0cmlldmVkU2Vuc29yWzFdID09ICdkZWxldGVkUicpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleENsaWNrZWQxID0gJHNjb3BlLlNpdGVTZW5zb3JzLmluZGV4T2Yoc2Vuc29yQ2xpY2tlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZVNlbnNvcnMuc3BsaWNlKGluZGV4Q2xpY2tlZDEsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvckNvdW50LnRvdGFsID0gJHNjb3BlLlNpdGVTZW5zb3JzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTsvL2VuZCBzaG93UmV0cmlldmVNb2RhbFxyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93UHJvcG9zZWRTZW5zb3IgPSBmdW5jdGlvbiAocHJvcG9zZWRTZW5zb3JDbGlja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3BJbmRleCA9ICRzY29wZS5TaXRlU2Vuc29ycy5pbmRleE9mKHByb3Bvc2VkU2Vuc29yQ2xpY2tlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHByb3BNb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ1Byb3Bvc2VkU2Vuc29yLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsICdwcm9wb3NlZFNlbnNvcicsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlLCBwcm9wb3NlZFNlbnNvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRoaXNQcm9wb3NlZFNlbnNvciA9IHByb3Bvc2VkU2Vuc29yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZVByb3Bvc2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBEZWxldGVNb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAnUHJvcG9zZWQgU2Vuc29yJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiUHJvcG9zZWQgU2Vuc29yXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZWxldGVNb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoJ2RlbGV0ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ3JlcC1kaWFsb2cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NlZFNlbnNvcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwcm9wb3NlZFNlbnNvckNsaWNrZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBwcm9wTW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZCA9PSAnZGVsZXRlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSU5TVFJVTUVOVC5kZWxldGUoeyBpZDogcHJvcG9zZWRTZW5zb3JDbGlja2VkLmluc3RydW1lbnRfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1NpdGVTZW5zb3JzLnNwbGljZShwcm9wSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlU2Vuc29ycyA9IHRoaXNTaXRlU2Vuc29ycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yQ291bnQudG90YWwgPSAkc2NvcGUuU2l0ZVNlbnNvcnMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEluc3RydW1lbnRfU2VydmljZS5zZXRBbGxTaXRlU2Vuc29ycygkc2NvcGUuU2l0ZVNlbnNvcnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiUHJvcG9zZWQgc2Vuc29yIGRlbGV0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIGRlbGV0aW5nIHByb3Bvc2VkIHNlbnNvci4gUmVmcmVzaCBhbmQgdHJ5IGFnYWluLiBFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvL3dhbnQgdG8gZGVwbG95IGEgcHJvcG9zZWQgc2Vuc29yLCBlZGl0IGEgZGVwbG95ZWQgc2Vuc29yIG9yIGNyZWF0ZSBhIG5ldyBkZXBsb3llZCBzZW5zb3JcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93U2Vuc29yTW9kYWwgPSBmdW5jdGlvbiAoc2Vuc29yQ2xpY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXNzQWxsTGlzdHMgPSBbYWxsU2Vuc29yVHlwZXMsIGFsbFNlbnNvckJyYW5kcywgYWxsSG91c2luZ1R5cGVzLCBhbGxFdmVudHMsIFNlbnNGaWxlVHlwZXMsIGFsbFZlcnREYXR1bXNdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleENsaWNrZWQgPSAkc2NvcGUuU2l0ZVNlbnNvcnMuaW5kZXhPZihzZW5zb3JDbGlja2VkKTtcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gdHJ1ZTsvLyBsb2FkaW5nLi4vLyAkKFwiLnBhZ2UtbG9hZGluZ1wiKS5yZW1vdmVDbGFzcyhcImhpZGRlblwiKTsgLy9sb2FkaW5nLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiB0aGlzIGlzIGEgY3JlYXRlLCBzaG93IHRoZSBzZW5zb3Jtb2RhbC5odG1sLCBpZiBsb29raW5nIGF0IGRlcGxveWVkIHNlbnNvciwgZ28gdG8gdGhlIGRlcHNlbnNvcm1vZGFsLmh0bWxcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IHNlbnNvckNsaWNrZWQgPT09IDAgfHwgc2Vuc29yQ2xpY2tlZC5pbnN0cnVtZW50X3N0YXR1c1swXS5zdGF0dXNfdHlwZV9pZCA9PT0gNCA/ICdTZW5zb3Jtb2RhbC5odG1sJyA6ICdEZXBTZW5zb3Jtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NlbnNvck1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdsZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ3JlcC1kaWFsb2cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxEcm9wZG93bnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFzc0FsbExpc3RzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbERlcFR5cGVzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERFUExPWU1FTlRfVFlQRS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzU2Vuc29yOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbnNvckNsaWNrZWQgIT09IDAgPyBzZW5zb3JDbGlja2VkIDogXCJlbXB0eVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlbnNvclNpdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1NpdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZU9QczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTSVRFLmdldFNpdGVPUHMoeyBpZDogdGhpc1NpdGUuc2l0ZV9pZCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZ2VuY3lMaXN0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFsbEFnZW5jaWVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbE1lbWJlcnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNRU1CRVIuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChjcmVhdGVkU2Vuc29yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gJHNjb3BlLlNpdGVTZW5zb3JzLmluZGV4T2Yoc2Vuc29yQ2xpY2tlZCk7IHZhciBzaSA9IHRoaXNTaXRlU2Vuc29ycy5pbmRleE9mKHNlbnNvckNsaWNrZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLydkZXBsb3lQJyAtPiBjcmVhdGVkU2Vuc29yWzFdIHdpbGwgYmU6ICdwcm9wb3NlZERlcGxveWVkJyBkZXBsb3kgbmV3IC0+IGNyZWF0ZWRTZW5zb3JbMV0gd2lsbCBiZTogJ25ld0RlcGxveWVkJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZWRTZW5zb3JbMV0gPT0gJ3Byb3Bvc2VkRGVwbG95ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZVNlbnNvcnNbaV0gPSBjcmVhdGVkU2Vuc29yWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1NpdGVTZW5zb3JzW3NpXSA9IGNyZWF0ZWRTZW5zb3JbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnN0cnVtZW50X1NlcnZpY2Uuc2V0QWxsU2l0ZVNlbnNvcnMoJHNjb3BlLlNpdGVTZW5zb3JzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXRlZFNlbnNvclsxXSA9PSAnbmV3RGVwbG95ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZVNlbnNvcnMucHVzaChjcmVhdGVkU2Vuc29yWzBdKTsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yQ291bnQudG90YWwgPSAkc2NvcGUuU2l0ZVNlbnNvcnMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5zdHJ1bWVudF9TZXJ2aWNlLnNldEFsbFNpdGVTZW5zb3JzKCRzY29wZS5TaXRlU2Vuc29ycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZWRTZW5zb3JbMV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90aGlzIGlzIGZyb20gZWRpdCAtLSByZWZyZXNoIHBhZ2U/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZSB0aGUgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVTZW5zb3JzW2luZGV4Q2xpY2tlZF0gPSBjcmVhdGVkU2Vuc29yWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcmVhdGVkU2Vuc29yWzFdID09ICdkZWxldGVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVTZW5zb3JzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZW5zb3JDb3VudC50b3RhbCA9ICRzY29wZS5TaXRlU2Vuc29ycy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnN0cnVtZW50X1NlcnZpY2Uuc2V0QWxsU2l0ZVNlbnNvcnMoJHNjb3BlLlNpdGVTZW5zb3JzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vd2FudCB0byBzZWUgdGhlIHJldHJpZXZlZCBzZW5zb3IgKGNhbiBlZGl0IGRlcGxveWVkIHBhcnQgYW5kIHJldHJpZXZlZCBwYXJ0IG9uIGhlcmUpXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0Z1bGxTZW5zb3JNb2RhbCA9IGZ1bmN0aW9uIChzZW5zb3JDbGlja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9zZW5kIGFsbCBkZXBsb3llZCBzdHVmZiBhbmQgcmV0cmlldmVkIHN0dWZmIHRvIG1vZGFsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlcGxveWVkU3R1ZmYgPSBbYWxsU2Vuc29yVHlwZXMsIGFsbFNlbnNvckJyYW5kcywgYWxsSG91c2luZ1R5cGVzLCBTZW5zRmlsZVR5cGVzLCBhbGxWZXJ0RGF0dW1zXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0cmlldmVkU3R1ZmYgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXhDbGlja2VkID0gJHNjb3BlLlNpdGVTZW5zb3JzLmluZGV4T2Yoc2Vuc29yQ2xpY2tlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IHRydWU7Ly8gbG9hZGluZy4uLy8gJChcIi5wYWdlLWxvYWRpbmdcIikucmVtb3ZlQ2xhc3MoXCJoaWRkZW5cIik7IC8vbG9hZGluZy4uLlxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdmdWxsU2Vuc29ybW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdmdWxsU2Vuc29yTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ2xnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd0NsYXNzOiAncmVwLWRpYWxvZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbERlcERyb3Bkb3duczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXBsb3llZFN0dWZmO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFN0YXR1c1R5cGVzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNUQVRVU19UWVBFLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbEluc3RDb2xsQ29uZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlNUX0NPTExfQ09ORElUSU9OLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhbGxFdmVudHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsRGVwVHlwZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gREVQTE9ZTUVOVF9UWVBFLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNTZW5zb3I6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2Vuc29yQ2xpY2tlZCAhPT0gMCA/IHNlbnNvckNsaWNrZWQgOiBcImVtcHR5XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU2Vuc29yU2l0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzU2l0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXRlT1BzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNJVEUuZ2V0U2l0ZU9Qcyh7IGlkOiB0aGlzU2l0ZS5zaXRlX2lkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnZW5jeUxpc3Q6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWxsQWdlbmNpZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsTWVtYmVyczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1FTUJFUi5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGNyZWF0ZWRTZW5zb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZWRTZW5zb3JbMV0gPT0gJ2RlbGV0ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZVNlbnNvcnMuc3BsaWNlKGluZGV4Q2xpY2tlZCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yQ291bnQudG90YWwgPSAkc2NvcGUuU2l0ZVNlbnNvcnMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5zdHJ1bWVudF9TZXJ2aWNlLnNldEFsbFNpdGVTZW5zb3JzKCRzY29wZS5TaXRlU2Vuc29ycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZSB0aGUgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVTZW5zb3JzW2luZGV4Q2xpY2tlZF0gPSBjcmVhdGVkU2Vuc29yWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyB3YXRjaCBmb3IgdGhlIHNlc3Npb24gZXZlbnQgdG8gY2hhbmdlIGFuZCB1cGRhdGVcclxuICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJyk7IH0sIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXNzaW9uRXZlbnROYW1lID0gbmV3VmFsdWUgIT09IHVuZGVmaW5lZCA/IG5ld1ZhbHVlIDogXCJBbGwgRXZlbnRzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlc3Npb25FdmVudEV4aXN0cyA9ICRzY29wZS5zZXNzaW9uRXZlbnROYW1lICE9IFwiQWxsIEV2ZW50c1wiID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlU2Vuc29ycyA9IHRoaXNTaXRlU2Vuc29ycy5maWx0ZXIoZnVuY3Rpb24gKGgpIHsgcmV0dXJuIChoLmV2ZW50X2lkID09ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSkgfHwgaC5pbnN0cnVtZW50X3N0YXR1c1swXS5zdGF0dXNfdHlwZV9pZCA9PSA0OyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvckNvdW50ID0geyB0b3RhbDogJHNjb3BlLlNpdGVTZW5zb3JzLmxlbmd0aCB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlU2Vuc29ycyA9IHRoaXNTaXRlU2Vuc29ycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvckNvdW50ID0geyB0b3RhbDogJHNjb3BlLlNpdGVTZW5zb3JzLmxlbmd0aCB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IC8vZW5kIGVsc2Ugbm90IGF1dGhcclxuICAgICAgICB9XSk7XHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU2V0dGluZ3NDb250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTZXR0aW5nc0NvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgU2V0dGluZ3NDb250cm9sbGVycy5jb250cm9sbGVyKCdyZXNvdXJjZXNDdHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckbG9jYXRpb24nLCAnJHN0YXRlJywgJyRodHRwJywgJyRmaWx0ZXInLCAnJHVpYk1vZGFsJywgJ0FHRU5DWScsICdDT05UQUNUX1RZUEUnLCAnREVQTE9ZTUVOVF9QUklPUklUWScsICdFVkVOVF9TVEFUVVMnLFxyXG4gICAgICAgICdFVkVOVF9UWVBFJywgJ0ZJTEVfVFlQRScsICdIT1JJWk9OVEFMX0NPTExfTUVUSE9EUycsICdIT1JJWk9OVEFMX0RBVFVNJywgJ0hPVVNJTkdfVFlQRScsICdIV01fUVVBTElUWScsICdIV01fVFlQRScsICdJTlNUX0NPTExfQ09ORElUSU9OJywgJ01BUktFUicsICdORVRXT1JLX05BTUUnLCAnT1BfUVVBTElUWScsXHJcbiAgICAgICAgJ09QX1RZUEUnLCAnU0VOU09SX0JSQU5EJywgJ0RFUExPWU1FTlRfVFlQRScsICdTRU5TT1JfVFlQRScsICdORVRXT1JLX1RZUEUnLCAnU1RBVFVTX1RZUEUnLCAnVkVSVElDQUxfQ09MTF9NRVRIT0QnLCAnVkVSVElDQUxfREFUVU0nLCAnYWxsU3RhdGVzJywgJ2FsbEFnZW5jaWVzJywgJ2FsbENvbnRhY3RUeXBlcycsICdhbGxEZXBsb3lQcmlvcml0aWVzJywgJ2FsbEV2ZW50U3RhdHMnLCAnYWxsRXZlbnRUeXBlcycsXHJcbiAgICAgICAgJ2FsbEZpbGVUeXBlcycsICdhbGxIb3JDb2xsTWV0aG9kcycsICdhbGxIb3JEYXR1bXMnLCAnYWxsSG91c2VUeXBlcycsICdhbGxIV01xdWFsaXRpZXMnLCAnYWxsSFdNdHlwZXMnLCAnYWxsSW5zdENvbGxlY3RDb25kaXRpb25zJywgJ2FsbE1hcmtlcnMnLCAnYWxsTmV0d29ya05hbWVzJywgJ2FsbE9ialB0UXVhbGl0aWVzJyxcclxuICAgICAgICAnYWxsT2JqUHRUeXBlcycsICdhbGxTZW5zb3JCcmFuZHMnLCAnYWxsRGVwbG95bWVudFR5cGVzJywgJ2FsbFN0YXR1c1R5cGVzJywgJ2FsbFNlbnNvclR5cGVzJywgJ2FsbE5ldHdvcmtUeXBlcycsICdhbGxWZXJ0aWNhbENvbGxNZXRob2RzJywgJ2FsbFZlcnRpY2FsRGF0dW1zJywgXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICRsb2NhdGlvbiwgJHN0YXRlLCAkaHR0cCwgJGZpbHRlciwgJHVpYk1vZGFsLCBBR0VOQ1ksIENPTlRBQ1RfVFlQRSwgREVQTE9ZTUVOVF9QUklPUklUWSwgRVZFTlRfU1RBVFVTLCBFVkVOVF9UWVBFLCBGSUxFX1RZUEUsIFxyXG4gICAgICAgICAgICBIT1JJWk9OVEFMX0NPTExfTUVUSE9EUywgSE9SSVpPTlRBTF9EQVRVTSwgSE9VU0lOR19UWVBFLCBIV01fUVVBTElUWSwgSFdNX1RZUEUsIElOU1RfQ09MTF9DT05ESVRJT04sIE1BUktFUiwgTkVUV09SS19OQU1FLCBPUF9RVUFMSVRZLCBPUF9UWVBFLCBTRU5TT1JfQlJBTkQsIERFUExPWU1FTlRfVFlQRSwgXHJcbiAgICAgICAgICAgIFNFTlNPUl9UWVBFLCBORVRXT1JLX1RZUEUsIFNUQVRVU19UWVBFLCBWRVJUSUNBTF9DT0xMX01FVEhPRCwgVkVSVElDQUxfREFUVU0sIGFsbFN0YXRlcywgYWxsQWdlbmNpZXMsIGFsbENvbnRhY3RUeXBlcywgYWxsRGVwbG95UHJpb3JpdGllcywgYWxsRXZlbnRTdGF0cywgYWxsRXZlbnRUeXBlcywgYWxsRmlsZVR5cGVzLFxyXG4gICAgICAgICAgICBhbGxIb3JDb2xsTWV0aG9kcywgYWxsSG9yRGF0dW1zLCBhbGxIb3VzZVR5cGVzLCBhbGxIV01xdWFsaXRpZXMsIGFsbEhXTXR5cGVzLCBhbGxJbnN0Q29sbGVjdENvbmRpdGlvbnMsIGFsbE1hcmtlcnMsIGFsbE5ldHdvcmtOYW1lcywgYWxsT2JqUHRRdWFsaXRpZXMsIGFsbE9ialB0VHlwZXMsXHJcbiAgICAgICAgICAgIGFsbFNlbnNvckJyYW5kcywgYWxsRGVwbG95bWVudFR5cGVzLCBhbGxTdGF0dXNUeXBlcywgYWxsU2Vuc29yVHlwZXMsIGFsbE5ldHdvcmtUeXBlcywgYWxsVmVydGljYWxDb2xsTWV0aG9kcywgYWxsVmVydGljYWxEYXR1bXMpIHtcclxuICAgICAgICAgICAgaWYgKCRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gdW5kZWZpbmVkIHx8ICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmF1dGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbG9naW4nKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUudGhpc1BhZ2UgPSBcIlNldHRpbmdzL1Jlc291cmNlc1wiO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFjY291bnRSb2xlID0gJGNvb2tpZXMuZ2V0KCd1c2Vyc1JvbGUnKTtcclxuICAgICAgICAgICAgICAgIC8vIGNoYW5nZSBzb3J0aW5nIG9yZGVyXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc29ydF9ieSA9IGZ1bmN0aW9uIChuZXdTb3J0aW5nT3JkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnNvcnRpbmdPcmRlciA9PSBuZXdTb3J0aW5nT3JkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJldmVyc2UgPSAhJHNjb3BlLnJldmVyc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zb3J0aW5nT3JkZXIgPSBuZXdTb3J0aW5nT3JkZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWNvbiBzZXR1cFxyXG4gICAgICAgICAgICAgICAgICAgICQoJ3RoIGknKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWNvbiByZXNldFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCkuYWRkQ2xhc3MoJ2dseXBoaWNvbiBnbHlwaGljb24tc29ydCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucmV2ZXJzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCd0aC4nICsgbmV3U29ydGluZ09yZGVyICsgJyBpJykucmVtb3ZlQ2xhc3MoKS5hZGRDbGFzcygnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgndGguJyArIG5ld1NvcnRpbmdPcmRlciArICcgaScpLnJlbW92ZUNsYXNzKCkuYWRkQ2xhc3MoJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1kb3duJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9va3VwRm9ybSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRBZ0Zvcm0gPSBmYWxzZTsgLy9hZGQgc29tZXRoaW5nIG5ldyB0byBhIGxvb2t1cCBjbGlja2VkICh3aWxsIHVuaGlkZSBmb3JtIGJlbG93IGl0KSBGYWxzZS0+IGZvcm06IGhpZGRlbiwgVHJ1ZS0+IGZvcm06IHZpc2libGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGRBZ0J1dHRvblNob3dpbmcgPSB0cnVlOyAvL3N0YXJ0IGl0IGF0IHRydWUuLndoZW4gY2xpY2tlZCwgc2hvdyBmb3JtLCBoaWRlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFjdGl2ZU1lbnUgPSAnJzsgLy9zY29wZSBmb3IgYWN0aXZlIHNpZGViYXIgaXRlbSBjbGlja1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRlTGlzdCA9IGFsbFN0YXRlcztcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gQUxMIExPT0tVUFMgKGFkZC91cGRhdGUvZGVsZXRlKVxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIEFnZW5jeSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFnZW5jeUxpc3QgPSBhbGxBZ2VuY2llczsgLy9BZ1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRBZ0Zvcm0gPSBmYWxzZTsgLy9hZGQgc29tZXRoaW5nIG5ldyB0byBhIGxvb2t1cCBjbGlja2VkICh3aWxsIHVuaGlkZSBmb3JtIGJlbG93IGl0KSBGYWxzZS0+IGZvcm06IGhpZGRlbiwgVHJ1ZS0+IGZvcm06IHZpc2libGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGRBZ0J1dHRvblNob3dpbmcgPSB0cnVlOyAvL3N0YXJ0IGl0IGF0IHRydWUuLndoZW4gY2xpY2tlZCwgc2hvdyBmb3JtLCBoaWRlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld0FnID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zaG93IEFkZCBOZXcgLi4uLiBjbGlja2VkLCBoaWRlIHRoZSBidXR0b24gYW5kIHNob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkQWdDbGlja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkQWdGb3JtID0gdHJ1ZTsgLy9zaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZEFnQnV0dG9uU2hvd2luZyA9IGZhbHNlOyAvL2hpZGUgYnV0dG9uICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OZXZlck1pbmRBZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3QWcgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEFnRm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkQWdCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IGJ1dHRvbiAgIFxyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkFkZEFnZW5jeSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgQUdFTkNZLnNhdmUoJHNjb3BlLm5ld0FnLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWdlbmN5TGlzdC5wdXNoKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdBZyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRBZ0Zvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkQWdCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IHRoZSBidXR0b24gYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiQWdlbmN5IEFkZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhdmVBZ2VuY3kgPSBmdW5jdGlvbiAoZGF0YSwgaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIEFHRU5DWS51cGRhdGUoeyBpZDogaWQgfSwgZGF0YSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkFnZW5jeSBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZUFnZW5jeSA9IGZ1bmN0aW9uIChhZykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkFnZW5jeVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoa2V5VG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy95ZXMsIHJlbW92ZSB0aGlzIGtleXdvcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJHNjb3BlLmFnZW5jeUxpc3QuaW5kZXhPZihhZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vREVMRVRFIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQUdFTkNZLmRlbGV0ZSh7IGlkOiBhZy5hZ2VuY3lfaWQgfSwgYWcsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY3lMaXN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkFnZW5jeSBSZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbG9naWMgZm9yIGNhbmNlbFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dTdGF0ZUFiYnJldiA9IGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGEuc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQgPSAkZmlsdGVyKCdmaWx0ZXInKSgkc2NvcGUuc3RhdGVMaXN0LCB7IHN0YXRlX2FiYnJldjogYS5zdGF0ZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGVkLmxlbmd0aCA/IHNlbGVjdGVkWzBdLnN0YXRlX2FiYnJldiA6ICcnO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBBZ2VuY3kgQWRkL1VwZGF0ZS9EZWxldGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gQ29udGFjdFR5cGUgQWRkL1VwZGF0ZS9EZWxldGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5jb250YWN0VHlwZUxpc3QgPSBhbGxDb250YWN0VHlwZXM7IC8vY3RcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkQ1RGb3JtID0gZmFsc2U7IC8vYWRkIHNvbWV0aGluZyBuZXcgdG8gYSBsb29rdXAgY2xpY2tlZCAod2lsbCB1bmhpZGUgZm9ybSBiZWxvdyBpdCkgRmFsc2UtPiBmb3JtOiBoaWRkZW4sIFRydWUtPiBmb3JtOiB2aXNpYmxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkQ1RCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zdGFydCBpdCBhdCB0cnVlLi53aGVuIGNsaWNrZWQsIHNob3cgZm9ybSwgaGlkZSBidXR0b25cclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdDVCA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vc2hvdyBBZGQgTmV3IC4uLi4gY2xpY2tlZCwgaGlkZSB0aGUgYnV0dG9uIGFuZCBzaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZENUQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZENURm9ybSA9IHRydWU7IC8vc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRDVEJ1dHRvblNob3dpbmcgPSBmYWxzZTsgLy9oaWRlIGJ1dHRvbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuTmV2ZXJNaW5kQ1QgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0NUID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRDVEZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZENUQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyBidXR0b24gICBcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5BZGRDb250YWN0VHlwZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgQ09OVEFDVF9UWVBFLnNhdmUoJHNjb3BlLm5ld0NULCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29udGFjdFR5cGVMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0NUID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZENURm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRDVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJDb250YWN0IFR5cGUgQWRkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhdmVDb250YWN0VHlwZSA9IGZ1bmN0aW9uIChkYXRhLCBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgQ09OVEFDVF9UWVBFLnVwZGF0ZSh7IGlkOiBpZCB9LCBkYXRhLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiQ29udGFjdCBUeXBlIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cjtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZUNvbnRhY3RUeXBlID0gZnVuY3Rpb24gKGN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9tb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiQ29udGFjdCBUeXBlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChrZXlUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3llcywgcmVtb3ZlIHRoaXMga2V5d29yZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuY29udGFjdFR5cGVMaXN0LmluZGV4T2YoY3QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL0RFTEVURSBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENPTlRBQ1RfVFlQRS5kZWxldGUoeyBpZDogY3QuY29udGFjdF90eXBlX2lkIH0sIGN0LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY29udGFjdFR5cGVMaXN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkNvbnRhY3QgVHlwZSBSZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbG9naWMgZm9yIGNhbmNlbFxyXG4gICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIENvbnRhY3RUeXBlIEFkZC9VcGRhdGUvRGVsZXRlXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIGRlcGxveW1lbnRQcmlvcml0eSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlcGxveVByaW9yaXR5TGlzdCA9IGFsbERlcGxveVByaW9yaXRpZXM7IC8vZHBcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkRFBGb3JtID0gZmFsc2U7IC8vYWRkIHNvbWV0aGluZyBuZXcgdG8gYSBsb29rdXAgY2xpY2tlZCAod2lsbCB1bmhpZGUgZm9ybSBiZWxvdyBpdCkgRmFsc2UtPiBmb3JtOiBoaWRkZW4sIFRydWUtPiBmb3JtOiB2aXNpYmxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkRFBCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zdGFydCBpdCBhdCB0cnVlLi53aGVuIGNsaWNrZWQsIHNob3cgZm9ybSwgaGlkZSBidXR0b25cclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdEUCA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vc2hvdyBBZGQgTmV3IC4uLi4gY2xpY2tlZCwgaGlkZSB0aGUgYnV0dG9uIGFuZCBzaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZERQQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZERQRm9ybSA9IHRydWU7IC8vc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGREUEJ1dHRvblNob3dpbmcgPSBmYWxzZTsgLy9oaWRlIGJ1dHRvbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuTmV2ZXJNaW5kRFAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0RQID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGREUEZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZERQQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyBidXR0b24gICBcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkFkZERlcFByaW9yaXR5ID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBERVBMT1lNRU5UX1BSSU9SSVRZLnNhdmUoJHNjb3BlLm5ld0RQLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwbG95UHJpb3JpdHlMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0RQID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZERQRm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGREUEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJEZXBsb3ltZW50IFByaW9yaXR5IEFkZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhdmVEZXBQcmlvcml0eSA9IGZ1bmN0aW9uIChkYXRhLCBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgREVQTE9ZTUVOVF9QUklPUklUWS51cGRhdGUoeyBpZDogaWQgfSwgZGF0YSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkRlcGxveW1lbnQgUHJpb3JpdHkgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWxldGVEZXBQcmlvcml0eSA9IGZ1bmN0aW9uIChkcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiRGVwbG95bWVudCBQcmlvcml0eVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoa2V5VG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJHNjb3BlLmRlcGxveVByaW9yaXR5TGlzdC5pbmRleE9mKGRwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBERVBMT1lNRU5UX1BSSU9SSVRZLmRlbGV0ZSh7IGlkOiBkcC5wcmlvcml0eV9pZCB9LCBkcCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcGxveVByaW9yaXR5TGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJEZXBsb3ltZW50IFByaW9yaXR5IFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gZGVwbG95bWVudFByaW9yaXR5IEFkZC9VcGRhdGUvRGVsZXRlXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIGV2ZW50U3RhdHVzIEFkZC9VcGRhdGUvRGVsZXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXZlbnRTdGF0TGlzdCA9IGFsbEV2ZW50U3RhdHM7IC8vZXNcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkRVNGb3JtID0gZmFsc2U7IC8vYWRkIHNvbWV0aGluZyBuZXcgdG8gYSBsb29rdXAgY2xpY2tlZCAod2lsbCB1bmhpZGUgZm9ybSBiZWxvdyBpdCkgRmFsc2UtPiBmb3JtOiBoaWRkZW4sIFRydWUtPiBmb3JtOiB2aXNpYmxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkRVNCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zdGFydCBpdCBhdCB0cnVlLi53aGVuIGNsaWNrZWQsIHNob3cgZm9ybSwgaGlkZSBidXR0b25cclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdFUyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vc2hvdyBBZGQgTmV3IC4uLi4gY2xpY2tlZCwgaGlkZSB0aGUgYnV0dG9uIGFuZCBzaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEVTQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEVTRm9ybSA9IHRydWU7IC8vc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRFU0J1dHRvblNob3dpbmcgPSBmYWxzZTsgLy9oaWRlIGJ1dHRvbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuTmV2ZXJNaW5kRVMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0VTID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRFU0Zvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZEVTQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyBidXR0b24gICBcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkFkZEV2ZW50U3RhdCA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgRVZFTlRfU1RBVFVTLnNhdmUoJHNjb3BlLm5ld0VTLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXZlbnRTdGF0TGlzdC5wdXNoKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdFUyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRFU0Zvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkRVNCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IHRoZSBidXR0b24gYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRXZlbnQgU3RhdHVzIEFkZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhdmVFdmVudFN0YXQgPSBmdW5jdGlvbiAoZGF0YSwgaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIEVWRU5UX1NUQVRVUy51cGRhdGUoeyBpZDogaWQgfSwgZGF0YSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkV2ZW50IFN0YXR1cyBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZUV2ZW50U3RhdCA9IGZ1bmN0aW9uIChlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiRXZlbnQgU3RhdHVzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChrZXlUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuZXZlbnRTdGF0TGlzdC5pbmRleE9mKGVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBFVkVOVF9TVEFUVVMuZGVsZXRlKHsgaWQ6IGVzLmV2ZW50X3N0YXR1c19pZCB9LCBlcywgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV2ZW50U3RhdExpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRXZlbnQgU3RhdHVzIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gZXZlbnRTdGF0dXMgQWRkL1VwZGF0ZS9EZWxldGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gRXZlbnRUeXBlIEFkZC9VcGRhdGUvRGVsZXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXZlbnRUeXBlTGlzdCA9IGFsbEV2ZW50VHlwZXM7IC8vZXRcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkRVRGb3JtID0gZmFsc2U7IC8vYWRkIHNvbWV0aGluZyBuZXcgdG8gYSBsb29rdXAgY2xpY2tlZCAod2lsbCB1bmhpZGUgZm9ybSBiZWxvdyBpdCkgRmFsc2UtPiBmb3JtOiBoaWRkZW4sIFRydWUtPiBmb3JtOiB2aXNpYmxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkRVRCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zdGFydCBpdCBhdCB0cnVlLi53aGVuIGNsaWNrZWQsIHNob3cgZm9ybSwgaGlkZSBidXR0b25cclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdFVCA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vc2hvdyBBZGQgTmV3IC4uLi4gY2xpY2tlZCwgaGlkZSB0aGUgYnV0dG9uIGFuZCBzaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEVUQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEVURm9ybSA9IHRydWU7IC8vc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRFVEJ1dHRvblNob3dpbmcgPSBmYWxzZTsgLy9oaWRlIGJ1dHRvbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuTmV2ZXJNaW5kRVQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0VUID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRFVEZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZEVUQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyBidXR0b24gICBcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5BZGRFdmVudFR5cGUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEVWRU5UX1RZUEUuc2F2ZSgkc2NvcGUubmV3RVQsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFR5cGVMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0VUID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEVURm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRFVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJFdmVudCBUeXBlIEFkZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5zYXZlRXZlbnRUeXBlID0gZnVuY3Rpb24gKGRhdGEsIGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBFVkVOVF9UWVBFLnVwZGF0ZSh7IGlkOiBpZCB9LCBkYXRhLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRXZlbnQgVHlwZSBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWxldGVFdmVudFR5cGUgPSBmdW5jdGlvbiAoZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL21vZGFsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJFdmVudCBUeXBlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChrZXlUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3llcywgcmVtb3ZlIHRoaXMga2V5d29yZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuZXZlbnRUeXBlTGlzdC5pbmRleE9mKGV0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ERUxFVEUgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBFVkVOVF9UWVBFLmRlbGV0ZSh7IGlkOiBldC5ldmVudF90eXBlX2lkIH0sIGV0LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXZlbnRUeXBlTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJFdmVudCBUeXBlIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gRXZlbnRUeXBlIEFkZC9VcGRhdGUvRGVsZXRlXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIGZpbGVUeXBlIEFkZC9VcGRhdGUvRGVsZXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZVR5cGVMaXN0ID0gYWxsRmlsZVR5cGVzOyAvL2Z0XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEZURm9ybSA9IGZhbHNlOyAvL2FkZCBzb21ldGhpbmcgbmV3IHRvIGEgbG9va3VwIGNsaWNrZWQgKHdpbGwgdW5oaWRlIGZvcm0gYmVsb3cgaXQpIEZhbHNlLT4gZm9ybTogaGlkZGVuLCBUcnVlLT4gZm9ybTogdmlzaWJsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZEZUQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc3RhcnQgaXQgYXQgdHJ1ZS4ud2hlbiBjbGlja2VkLCBzaG93IGZvcm0sIGhpZGUgYnV0dG9uXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV3RlQgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3Nob3cgQWRkIE5ldyAuLi4uIGNsaWNrZWQsIGhpZGUgdGhlIGJ1dHRvbiBhbmQgc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRGVENsaWNrZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRGVEZvcm0gPSB0cnVlOyAvL3Nob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkRlRCdXR0b25TaG93aW5nID0gZmFsc2U7IC8vaGlkZSBidXR0b24gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk5ldmVyTWluZEZUID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdGVCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkRlRGb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRGVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgYnV0dG9uICAgXHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5BZGRGaWxlVHlwZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgRklMRV9UWVBFLnNhdmUoJHNjb3BlLm5ld0ZULCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZVR5cGVMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0ZUID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEZURm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRGVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIFR5cGUgQWRkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZUZpbGVUeXBlID0gZnVuY3Rpb24gKGRhdGEsIGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBGSUxFX1RZUEUudXBkYXRlKHsgaWQ6IGlkIH0sIGRhdGEsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIFR5cGUgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWxldGVGaWxlVHlwZSA9IGZ1bmN0aW9uIChmdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiRmlsZSBUeXBlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChrZXlUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuZmlsZVR5cGVMaXN0LmluZGV4T2YoZnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEZJTEVfVFlQRS5kZWxldGUoeyBpZDogZnQuZmlsZXR5cGVfaWQgfSwgZnQsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlVHlwZUxpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBUeXBlIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gZmlsZVR5cGUgQWRkL1VwZGF0ZS9EZWxldGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gSG9yQ29sbE1ldGhvZHMgQWRkL1VwZGF0ZS9EZWxldGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5ob3JDb2xNZXRoTGlzdCA9IGFsbEhvckNvbGxNZXRob2RzOyAvL2hjbVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRIQ01Gb3JtID0gZmFsc2U7IC8vYWRkIHNvbWV0aGluZyBuZXcgdG8gYSBsb29rdXAgY2xpY2tlZCAod2lsbCB1bmhpZGUgZm9ybSBiZWxvdyBpdCkgRmFsc2UtPiBmb3JtOiBoaWRkZW4sIFRydWUtPiBmb3JtOiB2aXNpYmxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSENNQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc3RhcnQgaXQgYXQgdHJ1ZS4ud2hlbiBjbGlja2VkLCBzaG93IGZvcm0sIGhpZGUgYnV0dG9uXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV3SENNID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zaG93IEFkZCBOZXcgLi4uLiBjbGlja2VkLCBoaWRlIHRoZSBidXR0b24gYW5kIHNob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkSENNQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEhDTUZvcm0gPSB0cnVlOyAvL3Nob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSENNQnV0dG9uU2hvd2luZyA9IGZhbHNlOyAvL2hpZGUgYnV0dG9uICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OZXZlck1pbmRIQ00gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0hDTSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkSENNRm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSENNQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyBidXR0b24gICBcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkFkZEhvckNvbGxNZXRob2QgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEhPUklaT05UQUxfQ09MTF9NRVRIT0RTLnNhdmUoJHNjb3BlLm5ld0hDTSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmhvckNvbE1ldGhMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0hDTSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRIQ01Gb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZEhDTUJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJIb3Jpem9udGFsIENvbGxlY3Rpb24gTWV0aG9kIEFkZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhdmVIb3JDb2xsTWV0aG9kID0gZnVuY3Rpb24gKGRhdGEsIGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBIT1JJWk9OVEFMX0NPTExfTUVUSE9EUy51cGRhdGUoeyBpZDogaWQgfSwgZGF0YSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkhvcml6b250YWwgQ29sbGVjdGlvbiBNZXRob2QgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWxldGVIb3JDb2xsTWV0aG9kID0gZnVuY3Rpb24gKGhjbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoY207XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkhvcml6b250YWwgQ29sbGVjdGlvbiBNZXRob2RcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGtleVRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICRzY29wZS5ob3JDb2xNZXRoTGlzdC5pbmRleE9mKGhjbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgSE9SSVpPTlRBTF9DT0xMX01FVEhPRFMuZGVsZXRlKHsgaWQ6IGhjbS5oY29sbGVjdF9tZXRob2RfaWQgfSwgaGNtLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaG9yQ29sTWV0aExpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiSG9yaXpvbnRhbCBDb2xsZWN0aW9uIE1ldGhvZCBSZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbG9naWMgZm9yIGNhbmNlbFxyXG4gICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIEhvckNvbGxNZXRob2RzIEFkZC9VcGRhdGUvRGVsZXRlXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIEhvckRhdHVtIEFkZC9VcGRhdGUvRGVsZXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaG9yRGF0TGlzdCA9IGFsbEhvckRhdHVtczsgLy9oZFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRIREZvcm0gPSBmYWxzZTsgLy9hZGQgc29tZXRoaW5nIG5ldyB0byBhIGxvb2t1cCBjbGlja2VkICh3aWxsIHVuaGlkZSBmb3JtIGJlbG93IGl0KSBGYWxzZS0+IGZvcm06IGhpZGRlbiwgVHJ1ZS0+IGZvcm06IHZpc2libGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGRIREJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3N0YXJ0IGl0IGF0IHRydWUuLndoZW4gY2xpY2tlZCwgc2hvdyBmb3JtLCBoaWRlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld0hEID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zaG93IEFkZCBOZXcgLi4uLiBjbGlja2VkLCBoaWRlIHRoZSBidXR0b24gYW5kIHNob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkSERDbGlja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkSERGb3JtID0gdHJ1ZTsgLy9zaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZEhEQnV0dG9uU2hvd2luZyA9IGZhbHNlOyAvL2hpZGUgYnV0dG9uICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OZXZlck1pbmRIRCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3SEQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEhERm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSERCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IGJ1dHRvbiAgIFxyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkFkZEhvckRhdHVtID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBIT1JJWk9OVEFMX0RBVFVNLnNhdmUoJHNjb3BlLm5ld0hELCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaG9yRGF0TGlzdC5wdXNoKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdIRCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRIREZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSERCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IHRoZSBidXR0b24gYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiSG9yaXpvbnRhbCBEYXR1bSBBZGRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZUhvckRhdHVtID0gZnVuY3Rpb24gKGRhdGEsIGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBIT1JJWk9OVEFMX0RBVFVNLnVwZGF0ZSh7IGlkOiBpZCB9LCBkYXRhLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiSG9yaXpvbnRhbCBEYXR1bSBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWxldGVIb3JEYXR1bSA9IGZ1bmN0aW9uIChoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkhvcml6b250YWwgRGF0dW1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGtleVRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8veWVzLCByZW1vdmUgdGhpcyBrZXl3b3JkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICRzY29wZS5ob3JEYXRMaXN0LmluZGV4T2YoaGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL0RFTEVURSBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEhPUklaT05UQUxfREFUVU0uZGVsZXRlKHsgaWQ6IGhkLmRhdHVtX2lkIH0sIGhkLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaG9yRGF0TGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJIb3Jpem9udGFsIERhdHVtIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gSG9yRGF0dW0gQWRkL1VwZGF0ZS9EZWxldGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gaG91c2VUeXBlIEFkZC9VcGRhdGUvRGVsZXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaG91c2VUeXBlTGlzdCA9IGFsbEhvdXNlVHlwZXM7IC8vaHRcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkSFRGb3JtID0gZmFsc2U7IC8vYWRkIHNvbWV0aGluZyBuZXcgdG8gYSBsb29rdXAgY2xpY2tlZCAod2lsbCB1bmhpZGUgZm9ybSBiZWxvdyBpdCkgRmFsc2UtPiBmb3JtOiBoaWRkZW4sIFRydWUtPiBmb3JtOiB2aXNpYmxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSFRCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zdGFydCBpdCBhdCB0cnVlLi53aGVuIGNsaWNrZWQsIHNob3cgZm9ybSwgaGlkZSBidXR0b25cclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdIVCA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vc2hvdyBBZGQgTmV3IC4uLi4gY2xpY2tlZCwgaGlkZSB0aGUgYnV0dG9uIGFuZCBzaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEhUQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEhURm9ybSA9IHRydWU7IC8vc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRIVEJ1dHRvblNob3dpbmcgPSBmYWxzZTsgLy9oaWRlIGJ1dHRvbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuTmV2ZXJNaW5kSFQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0hUID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRIVEZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZEhUQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyBidXR0b24gICBcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkFkZEhvdXNlVHlwZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgSE9VU0lOR19UWVBFLnNhdmUoJHNjb3BlLm5ld0hULCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaG91c2VUeXBlTGlzdC5wdXNoKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdIVCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRIVEZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSFRCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IHRoZSBidXR0b24gYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiSG91c2luZyBUeXBlIEFkZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhdmVIb3VzZVR5cGUgPSBmdW5jdGlvbiAoZGF0YSwgaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIEhPVVNJTkdfVFlQRS51cGRhdGUoeyBpZDogaWQgfSwgZGF0YSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkhvdXNpbmcgVHlwZSBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZUhvdXNlVHlwZSA9IGZ1bmN0aW9uIChodCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBodDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiSG91c2luZyBUeXBlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChrZXlUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuaG91c2VUeXBlTGlzdC5pbmRleE9mKGh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBIT1VTSU5HX1RZUEUuZGVsZXRlKHsgaWQ6IGh0LmhvdXNpbmdfdHlwZV9pZCB9LCBodCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmhvdXNlVHlwZUxpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiSG91c2luZyBUeXBlIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gaG91c2luZ1R5cGUgQWRkL1VwZGF0ZS9EZWxldGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gaHdtUXVhbGl0eSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmh3bVF1YWxMaXN0ID0gYWxsSFdNcXVhbGl0aWVzOyAvL2h3bXFcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkSFdNUUZvcm0gPSBmYWxzZTsgLy9hZGQgc29tZXRoaW5nIG5ldyB0byBhIGxvb2t1cCBjbGlja2VkICh3aWxsIHVuaGlkZSBmb3JtIGJlbG93IGl0KSBGYWxzZS0+IGZvcm06IGhpZGRlbiwgVHJ1ZS0+IGZvcm06IHZpc2libGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGRIV01RQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc3RhcnQgaXQgYXQgdHJ1ZS4ud2hlbiBjbGlja2VkLCBzaG93IGZvcm0sIGhpZGUgYnV0dG9uXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV3SFdNUSA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vc2hvdyBBZGQgTmV3IC4uLi4gY2xpY2tlZCwgaGlkZSB0aGUgYnV0dG9uIGFuZCBzaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEhXTVFDbGlja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkSFdNUUZvcm0gPSB0cnVlOyAvL3Nob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSFdNUUJ1dHRvblNob3dpbmcgPSBmYWxzZTsgLy9oaWRlIGJ1dHRvbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuTmV2ZXJNaW5kSFdNUSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3SFdNUSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkSFdNUUZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZEhXTVFCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IGJ1dHRvbiAgIFxyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQWRkSHdtUXVhbGl0eSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgSFdNX1FVQUxJVFkuc2F2ZSgkc2NvcGUubmV3SFdNUSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bVF1YWxMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0hXTVEgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkSFdNUUZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSFdNUUJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJIV00gUXVhbGl0eSBBZGRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zYXZlSHdtUXVhbGl0eSA9IGZ1bmN0aW9uIChkYXRhLCBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgSFdNX1FVQUxJVFkudXBkYXRlKHsgaWQ6IGlkIH0sIGRhdGEsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJIV00gUXVhbGl0eSBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZUh3bVF1YWxpdHkgPSBmdW5jdGlvbiAoaHdtcSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBod21xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJIV00gUXVhbGl0eVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoa2V5VG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJHNjb3BlLmh3bVF1YWxMaXN0LmluZGV4T2YoaHdtcSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgSFdNX1FVQUxJVFkuZGVsZXRlKHsgaWQ6IGh3bXEuaHdtX3F1YWxpdHlfaWQgfSwgaHdtcSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bVF1YWxMaXN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkhXTSBRdWFsaXR5IFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gZXZlbnRTdGF0dXMgQWRkL1VwZGF0ZS9EZWxldGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gSHdtVHlwZSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmh3bVR5cGVMaXN0ID0gYWxsSFdNdHlwZXM7IC8vaHdtdFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRIV01URm9ybSA9IGZhbHNlOyAvL2FkZCBzb21ldGhpbmcgbmV3IHRvIGEgbG9va3VwIGNsaWNrZWQgKHdpbGwgdW5oaWRlIGZvcm0gYmVsb3cgaXQpIEZhbHNlLT4gZm9ybTogaGlkZGVuLCBUcnVlLT4gZm9ybTogdmlzaWJsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZEhXTVRCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zdGFydCBpdCBhdCB0cnVlLi53aGVuIGNsaWNrZWQsIHNob3cgZm9ybSwgaGlkZSBidXR0b25cclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdIV01UID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zaG93IEFkZCBOZXcgLi4uLiBjbGlja2VkLCBoaWRlIHRoZSBidXR0b24gYW5kIHNob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkSFdNVENsaWNrZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRIV01URm9ybSA9IHRydWU7IC8vc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRIV01UQnV0dG9uU2hvd2luZyA9IGZhbHNlOyAvL2hpZGUgYnV0dG9uICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OZXZlck1pbmRIV01UID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdIV01UID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRIV01URm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSFdNVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgYnV0dG9uICAgXHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQWRkSHdtVHlwZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgSFdNX1RZUEUuc2F2ZSgkc2NvcGUubmV3SFdNVCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bVR5cGVMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0hXTVQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkSFdNVEZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSFdNVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJIV00gVHlwZSBBZGRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZUh3bVR5cGUgPSBmdW5jdGlvbiAoZGF0YSwgaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIEhXTV9UWVBFLnVwZGF0ZSh7IGlkOiBpZCB9LCBkYXRhLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiSFdNIFR5cGUgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVsZXRlSHdtVHlwZSA9IGZ1bmN0aW9uIChod210KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9tb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBod210O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJIV00gVHlwZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoa2V5VG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy95ZXMsIHJlbW92ZSB0aGlzIGtleXdvcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJHNjb3BlLmh3bVR5cGVMaXN0LmluZGV4T2YoaHdtdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vREVMRVRFIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgSFdNX1RZUEUuZGVsZXRlKHsgaWQ6IGh3bXQuaHdtX3R5cGVfaWQgfSwgaHdtdCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bVR5cGVMaXN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkhXTSBUeXBlIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gSHdtVHlwZSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBJbnN0Q29sQ29uZCBBZGQvVXBkYXRlL0RlbGV0ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmluc3RDb2xDb25kTGlzdCA9IGFsbEluc3RDb2xsZWN0Q29uZGl0aW9uczsgLy9pY2NcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkSUNDRm9ybSA9IGZhbHNlOyAvL2FkZCBzb21ldGhpbmcgbmV3IHRvIGEgbG9va3VwIGNsaWNrZWQgKHdpbGwgdW5oaWRlIGZvcm0gYmVsb3cgaXQpIEZhbHNlLT4gZm9ybTogaGlkZGVuLCBUcnVlLT4gZm9ybTogdmlzaWJsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZElDQ0J1dHRvblNob3dpbmcgPSB0cnVlOyAvL3N0YXJ0IGl0IGF0IHRydWUuLndoZW4gY2xpY2tlZCwgc2hvdyBmb3JtLCBoaWRlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld0lDQyA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vc2hvdyBBZGQgTmV3IC4uLi4gY2xpY2tlZCwgaGlkZSB0aGUgYnV0dG9uIGFuZCBzaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZElDQ0NsaWNrZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRJQ0NGb3JtID0gdHJ1ZTsgLy9zaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZElDQ0J1dHRvblNob3dpbmcgPSBmYWxzZTsgLy9oaWRlIGJ1dHRvbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuTmV2ZXJNaW5kSUNDID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdJQ0MgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZElDQ0Zvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZElDQ0J1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgYnV0dG9uICAgXHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5BZGRJbnN0Q29sQ29uZCA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgSU5TVF9DT0xMX0NPTkRJVElPTi5zYXZlKCRzY29wZS5uZXdJQ0MsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbnN0Q29sQ29uZExpc3QucHVzaChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3SUNDID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZElDQ0Zvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSUNDQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyB0aGUgYnV0dG9uIGFnYWluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkluc3RydW1lbnQgQ29sbGVjdGlvbiBDb25kaXRpb24gQWRkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZUluc3RDb2xDb25kID0gZnVuY3Rpb24gKGRhdGEsIGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBJTlNUX0NPTExfQ09ORElUSU9OLnVwZGF0ZSh7IGlkOiBpZCB9LCBkYXRhLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiSW5zdHJ1bWVudCBDb2xsZWN0aW9uIENvbmRpdGlvbiBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZUluc3RDb2xDb25kID0gZnVuY3Rpb24gKGljYykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpY2M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkluc3RydW1lbnQgQ29sbGVjdGlvbiBDb25kaXRpb25cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGtleVRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICRzY29wZS5pbnN0Q29sQ29uZExpc3QuaW5kZXhPZihpY2MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIElOU1RfQ09MTF9DT05ESVRJT04uZGVsZXRlKHsgaWQ6IGljYy5pZCB9LCBpY2MsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbnN0Q29sQ29uZExpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiSW5zdHJ1bWVudCBDb2xsZWN0aW9uIENvbmRpdGlvbiBSZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbG9naWMgZm9yIGNhbmNlbFxyXG4gICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIEluc3RDb2xDb25kIEFkZC9VcGRhdGUvRGVsZXRlXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIE1hcmtlciBBZGQvVXBkYXRlL0RlbGV0ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtMaXN0ID0gYWxsTWFya2VyczsgLy9tXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZE1Gb3JtID0gZmFsc2U7IC8vYWRkIHNvbWV0aGluZyBuZXcgdG8gYSBsb29rdXAgY2xpY2tlZCAod2lsbCB1bmhpZGUgZm9ybSBiZWxvdyBpdCkgRmFsc2UtPiBmb3JtOiBoaWRkZW4sIFRydWUtPiBmb3JtOiB2aXNpYmxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkTUJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3N0YXJ0IGl0IGF0IHRydWUuLndoZW4gY2xpY2tlZCwgc2hvdyBmb3JtLCBoaWRlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld00gPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3Nob3cgQWRkIE5ldyAuLi4uIGNsaWNrZWQsIGhpZGUgdGhlIGJ1dHRvbiBhbmQgc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRNQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZE1Gb3JtID0gdHJ1ZTsgLy9zaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZE1CdXR0b25TaG93aW5nID0gZmFsc2U7IC8vaGlkZSBidXR0b24gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk5ldmVyTWluZE0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld00gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZE1Gb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRNQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyBidXR0b24gICBcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkFkZE1hcmtlciA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgTUFSS0VSLnNhdmUoJHNjb3BlLm5ld00sIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXJrTGlzdC5wdXNoKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdNID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZE1Gb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZE1CdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IHRoZSBidXR0b24gYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiTWFya2VyIEFkZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhdmVNYXJrZXIgPSBmdW5jdGlvbiAoZGF0YSwgaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIE1BUktFUi51cGRhdGUoeyBpZDogaWQgfSwgZGF0YSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIk1hcmtlciBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZU1hcmtlciA9IGZ1bmN0aW9uIChtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIk1hcmtlclwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoa2V5VG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJHNjb3BlLm1hcmtMaXN0LmluZGV4T2YobSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTUFSS0VSLmRlbGV0ZSh7IGlkOiBtLm1hcmtlcl9pZCB9LCBtLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFya0xpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiTWFya2VyIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gTWFya2VyIEFkZC9VcGRhdGUvRGVsZXRlXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIE5ldHdvcmtOYW1lIEFkZC9VcGRhdGUvRGVsZXRlIG5uXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV0TmFtZUxpc3QgPSBhbGxOZXR3b3JrTmFtZXM7IC8vbm5cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkTk5Gb3JtID0gZmFsc2U7IC8vYWRkIHNvbWV0aGluZyBuZXcgdG8gYSBsb29rdXAgY2xpY2tlZCAod2lsbCB1bmhpZGUgZm9ybSBiZWxvdyBpdCkgRmFsc2UtPiBmb3JtOiBoaWRkZW4sIFRydWUtPiBmb3JtOiB2aXNpYmxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkTk5CdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zdGFydCBpdCBhdCB0cnVlLi53aGVuIGNsaWNrZWQsIHNob3cgZm9ybSwgaGlkZSBidXR0b25cclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdOTiA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vc2hvdyBBZGQgTmV3IC4uLi4gY2xpY2tlZCwgaGlkZSB0aGUgYnV0dG9uIGFuZCBzaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZE5OQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZE5ORm9ybSA9IHRydWU7IC8vc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGROTkJ1dHRvblNob3dpbmcgPSBmYWxzZTsgLy9oaWRlIGJ1dHRvbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuTmV2ZXJNaW5kTk4gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld05OID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGROTkZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZE5OQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyBidXR0b24gICBcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkFkZE5ldHdvcmtOYW1lID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBORVRXT1JLX05BTUUuc2F2ZSgkc2NvcGUubmV3Tk4sIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXROYW1lTGlzdC5wdXNoKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdOTiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGROTkZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkTk5CdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IHRoZSBidXR0b24gYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiTmV0d29yayBOYW1lIEFkZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhdmVOZXR3b3JrTmFtZSA9IGZ1bmN0aW9uIChkYXRhLCBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgTkVUV09SS19OQU1FLnVwZGF0ZSh7IGlkOiBpZCB9LCBkYXRhLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiTmV0d29yayBOYW1lIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cjtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVsZXRlTmV0d29ya05hbWUgPSBmdW5jdGlvbiAobm4pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIk5ldHdvcmsgTmFtZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoa2V5VG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJHNjb3BlLm5ldE5hbWVMaXN0LmluZGV4T2Yobm4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE5FVFdPUktfTkFNRS5kZWxldGUoeyBpZDogbm4ubmV0d29ya19uYW1lX2lkIH0sIG5uLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV0TmFtZUxpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiTmV0d29yayBOYW1lIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gTmV0d29ya05hbWUgQWRkL1VwZGF0ZS9EZWxldGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gT1BRdWFsaXR5IEFkZC9VcGRhdGUvRGVsZXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUub3BRdWFsTGlzdCA9IGFsbE9ialB0UXVhbGl0aWVzOyAvL29wcVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRPUFFGb3JtID0gZmFsc2U7IC8vYWRkIHNvbWV0aGluZyBuZXcgdG8gYSBsb29rdXAgY2xpY2tlZCAod2lsbCB1bmhpZGUgZm9ybSBiZWxvdyBpdCkgRmFsc2UtPiBmb3JtOiBoaWRkZW4sIFRydWUtPiBmb3JtOiB2aXNpYmxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkT1BRQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc3RhcnQgaXQgYXQgdHJ1ZS4ud2hlbiBjbGlja2VkLCBzaG93IGZvcm0sIGhpZGUgYnV0dG9uXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV3T1BRID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zaG93IEFkZCBOZXcgLi4uLiBjbGlja2VkLCBoaWRlIHRoZSBidXR0b24gYW5kIHNob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkT1BRQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZE9QUUZvcm0gPSB0cnVlOyAvL3Nob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkT1BRQnV0dG9uU2hvd2luZyA9IGZhbHNlOyAvL2hpZGUgYnV0dG9uICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OZXZlck1pbmRPUFEgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld09QUSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkT1BRRm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkT1BRQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyBidXR0b24gICBcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5BZGRPUFF1YWxpdHkgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9QX1FVQUxJVFkuc2F2ZSgkc2NvcGUubmV3T1BRLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3BRdWFsTGlzdC5wdXNoKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdPUFEgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkT1BRRm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRPUFFCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IHRoZSBidXR0b24gYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiT2JqZWN0aXZlIFBvaW50IFF1YWxpdHkgQWRkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhdmVPUFF1YWxpdHkgPSBmdW5jdGlvbiAoZGF0YSwgaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIE9QX1FVQUxJVFkudXBkYXRlKHsgaWQ6IGlkIH0sIGRhdGEsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJPYmplY3RpdmUgUG9pbnQgUXVhbGl0eSBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWxldGVPUFF1YWxpdHkgPSBmdW5jdGlvbiAob3BxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9tb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIk9iamVjdGl2ZSBQb2ludCBRdWFsaXR5XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChrZXlUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3llcywgcmVtb3ZlIHRoaXMga2V5d29yZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUub3BRdWFsTGlzdC5pbmRleE9mKG9wcSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vREVMRVRFIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgT1BfUVVBTElUWS5kZWxldGUoeyBpZDogb3BxLm9wX3F1YWxpdHlfaWQgfSwgb3BxLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3BRdWFsTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJPYmplY3RpdmUgUG9pbnQgUXVhbGl0eSBSZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbG9naWMgZm9yIGNhbmNlbFxyXG4gICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIE9QUXVhbGl0eSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBPUFR5cGUgQWRkL1VwZGF0ZS9EZWxldGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5vcFR5cGVMaXN0ID0gYWxsT2JqUHRUeXBlczsgLy9vcHRcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkT1BURm9ybSA9IGZhbHNlOyAvL2FkZCBzb21ldGhpbmcgbmV3IHRvIGEgbG9va3VwIGNsaWNrZWQgKHdpbGwgdW5oaWRlIGZvcm0gYmVsb3cgaXQpIEZhbHNlLT4gZm9ybTogaGlkZGVuLCBUcnVlLT4gZm9ybTogdmlzaWJsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZE9QVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3N0YXJ0IGl0IGF0IHRydWUuLndoZW4gY2xpY2tlZCwgc2hvdyBmb3JtLCBoaWRlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld09QVCA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vc2hvdyBBZGQgTmV3IC4uLi4gY2xpY2tlZCwgaGlkZSB0aGUgYnV0dG9uIGFuZCBzaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZE9QVENsaWNrZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRPUFRGb3JtID0gdHJ1ZTsgLy9zaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZE9QVEJ1dHRvblNob3dpbmcgPSBmYWxzZTsgLy9oaWRlIGJ1dHRvbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuTmV2ZXJNaW5kT1BUID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdPUFQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZE9QVEZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZE9QVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgYnV0dG9uICAgXHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5BZGRPUFR5cGUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9QX1RZUEUuc2F2ZSgkc2NvcGUubmV3T1BULCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3BUeXBlTGlzdC5wdXNoKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdPUFQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkT1BURm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRPUFRCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IHRoZSBidXR0b24gYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiT2JqZWN0aXZlIFBvaW50IFR5cGUgQWRkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZU9QVHlwZSA9IGZ1bmN0aW9uIChkYXRhLCBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgT1BfVFlQRS51cGRhdGUoeyBpZDogaWQgfSwgZGF0YSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIk9iamVjdGl2ZSBQb2ludCBUeXBlIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cjtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVsZXRlT1BUeXBlID0gZnVuY3Rpb24gKG9wdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIk9iamVjdGl2ZSBQb2ludCBUeXBlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChrZXlUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUub3BUeXBlTGlzdC5pbmRleE9mKG9wdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgT1BfVFlQRS5kZWxldGUoeyBpZDogb3B0Lm9iamVjdGl2ZV9wb2ludF90eXBlX2lkIH0sIG9wdCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9wVHlwZUxpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiT2JqZWN0aXZlIFBvaW50IFR5cGUgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBPUFR5cGUgQWRkL1VwZGF0ZS9EZWxldGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gU2Vuc29yQnJhbmQgQWRkL1VwZGF0ZS9EZWxldGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZW5zQnJhbmRMaXN0ID0gYWxsU2Vuc29yQnJhbmRzOyAvL3NiXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZFNCRm9ybSA9IGZhbHNlOyAvL2FkZCBzb21ldGhpbmcgbmV3IHRvIGEgbG9va3VwIGNsaWNrZWQgKHdpbGwgdW5oaWRlIGZvcm0gYmVsb3cgaXQpIEZhbHNlLT4gZm9ybTogaGlkZGVuLCBUcnVlLT4gZm9ybTogdmlzaWJsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZFNCQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc3RhcnQgaXQgYXQgdHJ1ZS4ud2hlbiBjbGlja2VkLCBzaG93IGZvcm0sIGhpZGUgYnV0dG9uXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV3U0IgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3Nob3cgQWRkIE5ldyAuLi4uIGNsaWNrZWQsIGhpZGUgdGhlIGJ1dHRvbiBhbmQgc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRTQkNsaWNrZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRTQkZvcm0gPSB0cnVlOyAvL3Nob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkU0JCdXR0b25TaG93aW5nID0gZmFsc2U7IC8vaGlkZSBidXR0b24gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk5ldmVyTWluZFNCID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdTQiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkU0JGb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRTQkJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgYnV0dG9uICAgXHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5BZGRTZW5zb3JCcmFuZCA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgU0VOU09SX0JSQU5ELnNhdmUoJHNjb3BlLm5ld1NCLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc0JyYW5kTGlzdC5wdXNoKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdTQiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRTQkZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkU0JCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IHRoZSBidXR0b24gYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiU2Vuc29yIEJyYW5kIEFkZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhdmVTZW5zb3JCcmFuZCA9IGZ1bmN0aW9uIChkYXRhLCBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgU0VOU09SX0JSQU5ELnVwZGF0ZSh7IGlkOiBpZCB9LCBkYXRhLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiU2Vuc29yIEJyYW5kIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cjtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVsZXRlU2Vuc29yQnJhbmQgPSBmdW5jdGlvbiAoc2IpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlNlbnNvciBCcmFuZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoa2V5VG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJHNjb3BlLnNlbnNCcmFuZExpc3QuaW5kZXhPZihzYik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU0VOU09SX0JSQU5ELmRlbGV0ZSh7IGlkOiBzYi5zZW5zb3JfYnJhbmRfaWQgfSwgc2IsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZW5zQnJhbmRMaXN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlNlbnNvciBCcmFuZCBSZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbG9naWMgZm9yIGNhbmNlbFxyXG4gICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIFNlbnNvckJyYW5kIEFkZC9VcGRhdGUvRGVsZXRlXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIERlcFR5cGUgQWRkL1VwZGF0ZS9EZWxldGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZXBUeXBlTGlzdCA9IGFsbERlcGxveW1lbnRUeXBlczsgLy9kdFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGREVEZvcm0gPSBmYWxzZTsgLy9hZGQgc29tZXRoaW5nIG5ldyB0byBhIGxvb2t1cCBjbGlja2VkICh3aWxsIHVuaGlkZSBmb3JtIGJlbG93IGl0KSBGYWxzZS0+IGZvcm06IGhpZGRlbiwgVHJ1ZS0+IGZvcm06IHZpc2libGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGREVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3N0YXJ0IGl0IGF0IHRydWUuLndoZW4gY2xpY2tlZCwgc2hvdyBmb3JtLCBoaWRlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld0RUID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zaG93IEFkZCBOZXcgLi4uLiBjbGlja2VkLCBoaWRlIHRoZSBidXR0b24gYW5kIHNob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkRFRDbGlja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkRFRGb3JtID0gdHJ1ZTsgLy9zaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZERUQnV0dG9uU2hvd2luZyA9IGZhbHNlOyAvL2hpZGUgYnV0dG9uICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OZXZlck1pbmREVCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3RFQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZERURm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkRFRCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IGJ1dHRvbiAgIFxyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkFkZERlcFR5cGUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERFUExPWU1FTlRfVFlQRS5zYXZlKCRzY29wZS5uZXdEVCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFR5cGVMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0RUID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZERURm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGREVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJEZXBsb3ltZW50IFR5cGUgQWRkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhdmVEZXBUeXBlID0gZnVuY3Rpb24gKGRhdGEsIGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBERVBMT1lNRU5UX1RZUEUudXBkYXRlKHsgaWQ6IGlkIH0sIGRhdGEsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJEZXBsb3ltZW50IFR5cGUgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVsZXRlRGVwVHlwZSA9IGZ1bmN0aW9uIChkdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkRlcGxveW1lbnQgVHlwZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoa2V5VG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy95ZXMsIHJlbW92ZSB0aGlzIGtleXdvcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJHNjb3BlLmRlcFR5cGVMaXN0LmluZGV4T2YoZHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL0RFTEVURSBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERFUExPWU1FTlRfVFlQRS5kZWxldGUoeyBpZDogZHQuZGVwbG95bWVudF90eXBlX2lkIH0sIGR0LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwVHlwZUxpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRGVwbG95bWVudCBUeXBlIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gRGVwVHlwZSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBTdGF0dXNUeXBlIEFkZC9VcGRhdGUvRGVsZXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdFR5cGVMaXN0ID0gYWxsU3RhdHVzVHlwZXM7IC8vc3RhdFRcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkU3RhdFRGb3JtID0gZmFsc2U7IC8vYWRkIHNvbWV0aGluZyBuZXcgdG8gYSBsb29rdXAgY2xpY2tlZCAod2lsbCB1bmhpZGUgZm9ybSBiZWxvdyBpdCkgRmFsc2UtPiBmb3JtOiBoaWRkZW4sIFRydWUtPiBmb3JtOiB2aXNpYmxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkU3RhdFRCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zdGFydCBpdCBhdCB0cnVlLi53aGVuIGNsaWNrZWQsIHNob3cgZm9ybSwgaGlkZSBidXR0b25cclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdTdGF0VCA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vc2hvdyBBZGQgTmV3IC4uLi4gY2xpY2tlZCwgaGlkZSB0aGUgYnV0dG9uIGFuZCBzaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZFN0YXRUQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZFN0YXRURm9ybSA9IHRydWU7IC8vc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRTdGF0VEJ1dHRvblNob3dpbmcgPSBmYWxzZTsgLy9oaWRlIGJ1dHRvbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuTmV2ZXJNaW5kU3RhdFQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1N0YXRUID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRTdGF0VEZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZFN0YXRUQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyBidXR0b24gICBcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkFkZFN0YXR1c1R5cGUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNUQVRVU19UWVBFLnNhdmUoJHNjb3BlLm5ld1N0YXRULCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdFR5cGVMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1N0YXRUVCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRTdGF0VEZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkU3RhdFRCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IHRoZSBidXR0b24gYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiU3RhdHVzIFR5cGUgQWRkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZVN0YXR1c1R5cGUgPSBmdW5jdGlvbiAoZGF0YSwgaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIFNUQVRVU19UWVBFLnVwZGF0ZSh7IGlkOiBpZCB9LCBkYXRhLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiU3RhdHVzIFR5cGUgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWxldGVTdGF0dXNUeXBlID0gZnVuY3Rpb24gKHN0YXRUKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRUO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJTdGF0dXMgVHlwZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoa2V5VG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJHNjb3BlLnN0YXRUeXBlTGlzdC5pbmRleE9mKHN0YXRUKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTVEFUVVNfVFlQRS5kZWxldGUoeyBpZDogc3RhdFQuc3RhdHVzX3R5cGVfaWQgfSwgc3RhdFQsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0VHlwZUxpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiU3RhdHVzIFR5cGUgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBTdGF0dXNUeXBlIEFkZC9VcGRhdGUvRGVsZXRlXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIFNlbnNvclR5cGUgQWRkL1VwZGF0ZS9EZWxldGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZW5zVHlwZUxpc3QgPSBhbGxTZW5zb3JUeXBlczsvLyBhbGxTZW5zb3JUeXBlczsgLy9zZW5UXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV3RGVwVHlwZVJlbGF0aW5nID0gW107XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY29tbWFTZXBEZXBNRVRIT0RTID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgLy9hZGQgdGhlIGRlcGxveW1lbnQgdHlwZXNcclxuICAgICAgICAgICAgICAgICRzY29wZS5mb3JtYXR0ZWRTZW5zVHlwZUxpc3QgPSBbXTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZW5zVHlwZUxpc3QuZm9yRWFjaChmdW5jdGlvbiAoc2Vuc1R5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBTRU5TT1JfVFlQRS5nZXRTZW5zb3JEZXBsb3ltZW50VHlwZXMoeyBpZDogc2Vuc1R5cGUuc2Vuc29yX3R5cGVfaWQgfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVwcyA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5zVHlwZS5EZXBUeXBlcyA9IFtdOyB2YXIgRGVwTVN0cmluZ3MgPSBbXTsgc2Vuc1R5cGUuRGVwTUVUSE9EU3RyaW5ncyA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZXBzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcHMuZm9yRWFjaChmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbnNUeXBlLkRlcFR5cGVzLnB1c2goZC5kZXBsb3ltZW50X3R5cGVfaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERlcE1TdHJpbmdzLnB1c2goZC5tZXRob2QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbnNUeXBlLkRlcE1FVEhPRFN0cmluZ3MgPSBEZXBNU3RyaW5ncy5qb2luKCcsICcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZvcm1hdHRlZFNlbnNUeXBlTGlzdC5wdXNoKHNlbnNUeXBlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vY2hlY2tsaXN0IGZvciBkZXBsb3ltZW50IHR5cGVzXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0RlcFR5cGVzID0gZnVuY3Rpb24gKFNlblQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWQgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmRlcFR5cGVMaXN0LCBmdW5jdGlvbiAocykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoU2VuVC5EZXBUeXBlcy5pbmRleE9mKHMuZGVwbG95bWVudF90eXBlX2lkKSA+PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZC5wdXNoKHMubWV0aG9kKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZWxlY3RlZC5sZW5ndGggPyBzZWxlY3RlZC5qb2luKCcsICcpIDogXCJcIjtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVtb3ZlVGhlc2VEZXBUeXBlcyA9IFtdOyAvL3RoZXNlIGFyZSB0aGUgb25lcyB0byByZW1vdmUgd2hlbiB0aGV5IGNsaWNrIHNhdmVcclxuICAgICAgICAgICAgICAgICRzY29wZS5jaGVja0xpc3RDaGVjayA9IGZ1bmN0aW9uIChvcmlnaW5hbENoZWNrZWQsIG5vd0NoZWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL29yaWdpbmFsQ2hlY2tlZCAtLSB3aGF0IHRoZSBtb2RlbCBoYWQgYmVmb3JlIHRoaXMgY2xpY2sgZXZlbnQgd2FzIHRyaWdnZXJlZFxyXG4gICAgICAgICAgICAgICAgICAgIC8vbm93Q2hlY2tlZCAtLSB3aGF0IGRlcGxveW1lbnQgdHlwZXMgYXJlIG5vdyBjaGVja2VkLi4gbG9vayBmb3IgZGlmZmVyZW5jZXMgYW5kIHJlbW92ZSBpZiBsZXNzIHRoYW4sIG90aGVyIHdpc2UgZG8gbm90aGluZywgdGhlIHNhdmUgd2lsbCBoYW5kbGUgYWRkaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5vd0NoZWNrZWQubGVuZ3RoIDwgb3JpZ2luYWxDaGVja2VkLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3VuY2hlY2tlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gob3JpZ2luYWxDaGVja2VkLCBmdW5jdGlvbiAob2MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChub3dDaGVja2VkLmluZGV4T2Yob2MpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbm90IHRoZXJlIGFueW1vcmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsZXRlRGVwID0gJHNjb3BlLmRlcFR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoZHQpIHsgcmV0dXJuIGR0LmRlcGxveW1lbnRfdHlwZV9pZCA9PSBvYzsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgeW91IGRvbid0IGFkZCBpdCB0d2ljZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucmVtb3ZlVGhlc2VEZXBUeXBlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGQgPSAwOyBkIDwgJHNjb3BlLnJlbW92ZVRoZXNlRGVwVHlwZXMubGVuZ3RoOyBkKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucmVtb3ZlVGhlc2VEZXBUeXBlc1tkXS5kZXBsb3ltZW50X3R5cGVfaWQgPT0gZGVsZXRlRGVwLmRlcGxveW1lbnRfdHlwZV9pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZm9yZ2V0dGFib3V0IGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9ICRzY29wZS5uZXdEZXBUeXBlUmVsYXRpbmcubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVtb3ZlVGhlc2VEZXBUeXBlcy5wdXNoKGRlbGV0ZURlcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVtb3ZlVGhlc2VEZXBUeXBlcy5wdXNoKGRlbGV0ZURlcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRTZW5URm9ybSA9IGZhbHNlOyAvL2FkZCBzb21ldGhpbmcgbmV3IHRvIGEgbG9va3VwIGNsaWNrZWQgKHdpbGwgdW5oaWRlIGZvcm0gYmVsb3cgaXQpIEZhbHNlLT4gZm9ybTogaGlkZGVuLCBUcnVlLT4gZm9ybTogdmlzaWJsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZFNlblRCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zdGFydCBpdCBhdCB0cnVlLi53aGVuIGNsaWNrZWQsIHNob3cgZm9ybSwgaGlkZSBidXR0b25cclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdTZW5UID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zaG93IEFkZCBOZXcgLi4uLiBjbGlja2VkLCBoaWRlIHRoZSBidXR0b24gYW5kIHNob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkU2VuVENsaWNrZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRTZW5URm9ybSA9IHRydWU7IC8vc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRTZW5UQnV0dG9uU2hvd2luZyA9IGZhbHNlOyAvL2hpZGUgYnV0dG9uICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OZXZlck1pbmRTZW5UID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdTZW5UID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0RlcFR5cGVSZWxhdGluZyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuZGVwVHlwZUxpc3QsIGZ1bmN0aW9uIChkKSB7IGQuc2VsZWN0ZWQgPSBmYWxzZTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRTZW5URm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkU2VuVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgYnV0dG9uICAgXHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vbmV3IHNlbnNvciB0eXBlIGJlaW5nIGFkZGVkLCB0aGV5IGNoZWNrZWQgdG8gcmVsYXRlIGEgZGVwbG95bWVudCB0eXBlLiBzdG9yZSBmb3IgdXNlIGR1cmluZyBzYXZlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkRGVwVHlwZVRvTmV3U2VuVCA9IGZ1bmN0aW9uIChkdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkdC5zZWxlY3RlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2RvbnQgYWRkIGl0IG1vcmUgdGhhbiBvbmNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubmV3RGVwVHlwZVJlbGF0aW5nLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGQgPSAwOyBkIDwgJHNjb3BlLm5ld0RlcFR5cGVSZWxhdGluZy5sZW5ndGg7IGQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubmV3RGVwVHlwZVJlbGF0aW5nW2RdLmRlcGxveW1lbnRfdHlwZV9pZCA9PSBkdC5kZXBsb3ltZW50X3R5cGVfaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9mb3JnZXR0YWJvdXQgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9ICRzY29wZS5uZXdEZXBUeXBlUmVsYXRpbmcubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdEZXBUeXBlUmVsYXRpbmcucHVzaChkdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGQgPSAkc2NvcGUubmV3RGVwVHlwZVJlbGF0aW5nLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubmV3RGVwVHlwZVJlbGF0aW5nLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdEZXBUeXBlUmVsYXRpbmcucHVzaChkdCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQWRkU2Vuc29yVHlwZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbmV3U2Vuc29yID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWxhdGVkRGVwcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgU0VOU09SX1RZUEUuc2F2ZSgkc2NvcGUubmV3U2VuVCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2Vuc29yID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3U2VuVCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRTZW5URm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRTZW5UQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyB0aGUgYnV0dG9uIGFnYWluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBzZWUgaWYgdGhleSByZWxhdGVkIGFueSBkZXBsb3kgc2Vuc29yc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5uZXdEZXBUeXBlUmVsYXRpbmcubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUubmV3RGVwVHlwZVJlbGF0aW5nLCBmdW5jdGlvbiAobmR0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBuZHQuc2VsZWN0ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbGF0ZWREZXBzLnB1c2gobmR0LmRlcGxveW1lbnRfdHlwZV9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNFTlNPUl9UWVBFLmFkZFNlbnNvckRlcGxveW1lbnRUeXBlKHsgc2Vuc29yVHlwZUlkOiBuZXdTZW5zb3Iuc2Vuc29yX3R5cGVfaWQsZGVwbG95bWVudFR5cGVJZDogbmR0LmRlcGxveW1lbnRfdHlwZV9pZCB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3aGF0ID0gZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1NlbnNvci5EZXBUeXBlcyA9IHJlbGF0ZWREZXBzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZvcm1hdHRlZFNlbnNUeXBlTGlzdC5wdXNoKG5ld1NlbnNvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlNlbnNvciBUeXBlIEFkZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhdmVTZW5zb3JUeXBlID0gZnVuY3Rpb24gKGRhdGEsIGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAvL3B1bGwgb3V0IGp1c3QgdGhlIHNlbnNvciBhbmQgdGhlbiB0aGUgZGVwbG95bWVudCB0eXBlIHRvIHBvc3Qgc2VwYXJhdGVseVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBTVCA9IHsgc2Vuc29yX3R5cGVfaWQ6IGRhdGEuc2Vuc29yX3R5cGVfaWQsIHNlbnNvcjogZGF0YS5zZW5zb3IgfTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgRFRzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgLy9nZXQgdGhlIERlcGxveW1lbnQgVHlwZXMgZnJvbSB0aGUgbGlzdCBvZiBpZHMgaW4gZGF0YS5EZXBUeXBlc1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuZGVwVHlwZUxpc3QsIGZ1bmN0aW9uIChzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXRhLkRlcFR5cGVzLmluZGV4T2Yocy5kZXBsb3ltZW50X3R5cGVfaWQpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzRFQgPSB7IGRlcGxveW1lbnRfdHlwZV9pZDogcy5kZXBsb3ltZW50X3R5cGVfaWQsIG1ldGhvZDogcy5tZXRob2QgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERUcy5wdXNoKHRoaXNEVCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAvL25vdyB1cGRhdGUgdGhlIHNlbnNvciBhbmQgdGhlbiBhbnkgRGVwIFR5cGVzIHRoZXkgYWRkZWQgb3IgcmVtb3ZlZFxyXG4gICAgICAgICAgICAgICAgICAgIFNFTlNPUl9UWVBFLnVwZGF0ZSh7IGlkOiBpZCB9LCBkYXRhLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChEVHMsIGZ1bmN0aW9uIChkdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU0VOU09SX1RZUEUuYWRkU2Vuc29yRGVwbG95bWVudFR5cGUoeyBzZW5zb3JUeXBlSWQ6IGlkLCBkZXBsb3ltZW50VHlwZUlkOiBuZHQuZGVwbG95bWVudF90eXBlX2lkIH0sIGR0LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRGVwbG95bWVudCBUeXBlIGlzIG5vdyByZWxhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2hhdCA9IGVycm9yUmVzcG9uc2UxLnN0YXR1c1RleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiU2Vuc29yIFR5cGUgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2UudGhlbihcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9yZW1vdmUgdGhvc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5yZW1vdmVUaGVzZURlcFR5cGVzLCBmdW5jdGlvbiAocmR0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTRU5TT1JfVFlQRS5yZW1vdmVTZW5zb3JEZXBsb3ltZW50VHlwZSh7IHNlbnNvclR5cGVJZDogaWQsIERlcGxveW1lbnRUeXBlSWQ6IHJkdC5kZXBsb3ltZW50X3R5cGVfaWQgfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZTIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkRlcGxveW1lbnQgVHlwZSBpcyBubyBsb25nZXIgcmVsYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2hhdCA9IGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9ub3cgbWFrZSBzdXJlICRzY29wZSBtb2RlbCBpcyB1cGRhdGVkP1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cjtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVsZXRlU2Vuc29yVHlwZSA9IGZ1bmN0aW9uIChzZW5UKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlblQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlNlbnNvciBUeXBlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChrZXlUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuZm9ybWF0dGVkU2Vuc1R5cGVMaXN0LmluZGV4T2Yoc2VuVCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBTVCA9IHsgc2Vuc29yX3R5cGVfaWQ6IHNlblQuc2Vuc29yX3R5cGVfaWQsIHNlbnNvcjogc2VuVC5zZW5zb3IgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9uZWVkIHRvIGRlbGV0ZSB0aGUgcmVsYXRpb25zaGlwIGJlZm9yZSBJIGNhbiBkZWxldGUgdGhlIHNlbnNvciB0eXBlICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5kZXBUeXBlTGlzdCwgZnVuY3Rpb24gKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZW5ULkRlcFR5cGVzLmluZGV4T2Yocy5kZXBsb3ltZW50X3R5cGVfaWQpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2dldCBpdCBhbmQgdGhlbiBkZWxldGUgdGhlIHJlbGF0aW9uc2hpcFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzRFQgPSB7IGRlcGxveW1lbnRfdHlwZV9pZDogcy5kZXBsb3ltZW50X3R5cGVfaWQsIG1ldGhvZDogcy5tZXRob2QgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTRU5TT1JfVFlQRS5yZW1vdmVTZW5zb3JEZXBsb3ltZW50VHlwZSh7IHNlbnNvclR5cGVJZDogU1Quc2Vuc29yX3R5cGVfaWQsIERlcGxveW1lbnRUeXBlSWQ6IHRoaXNEVC5kZXBsb3ltZW50X3R5cGVfaWQgfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZTIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlbW92ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBkZWxldGUgdGhlIHNlbnNvciAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNFTlNPUl9UWVBFLmRlbGV0ZSh7IGlkOiBTVC5zZW5zb3JfdHlwZV9pZCB9LCBTVCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZvcm1hdHRlZFNlbnNUeXBlTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9nZXQgdGhlIERlcGxveW1lbnQgVHlwZXMgZnJvbSB0aGUgbGlzdCBvZiBpZHMgaW4gZGF0YS5EZXBUeXBlc1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiU2Vuc29yIFR5cGUgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBTZW5zb3JUeXBlIEFkZC9VcGRhdGUvRGVsZXRlXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIE5ldFR5cGUgQWRkL1VwZGF0ZS9EZWxldGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXRUeXBlTGlzdCA9IGFsbE5ldHdvcmtUeXBlczsgLy9udFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGROVEZvcm0gPSBmYWxzZTsgLy9hZGQgc29tZXRoaW5nIG5ldyB0byBhIGxvb2t1cCBjbGlja2VkICh3aWxsIHVuaGlkZSBmb3JtIGJlbG93IGl0KSBGYWxzZS0+IGZvcm06IGhpZGRlbiwgVHJ1ZS0+IGZvcm06IHZpc2libGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGROVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3N0YXJ0IGl0IGF0IHRydWUuLndoZW4gY2xpY2tlZCwgc2hvdyBmb3JtLCBoaWRlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld05UID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zaG93IEFkZCBOZXcgLi4uLiBjbGlja2VkLCBoaWRlIHRoZSBidXR0b24gYW5kIHNob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkTlRDbGlja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkTlRGb3JtID0gdHJ1ZTsgLy9zaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZE5UQnV0dG9uU2hvd2luZyA9IGZhbHNlOyAvL2hpZGUgYnV0dG9uICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OZXZlck1pbmROVCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3TlQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZE5URm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkTlRCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IGJ1dHRvbiAgIFxyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkFkZE5ldFR5cGUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE5FVFdPUktfVFlQRS5zYXZlKCRzY29wZS5uZXdOVCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ldFR5cGVMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld05UID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZE5URm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGROVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJOZXR3b3JrIFR5cGUgQWRkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhdmVOZXRUeXBlID0gZnVuY3Rpb24gKGRhdGEsIGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBORVRXT1JLX1RZUEUudXBkYXRlKHsgaWQ6IGlkIH0sIGRhdGEsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJOZXR3b3JrIFR5cGUgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVsZXRlTmV0VHlwZSA9IGZ1bmN0aW9uIChudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIk5ldHdvcmsgVHlwZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoa2V5VG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy95ZXMsIHJlbW92ZSB0aGlzIGtleXdvcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJHNjb3BlLm5ldFR5cGVMaXN0LmluZGV4T2YobnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL0RFTEVURSBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE5FVFdPUktfVFlQRS5kZWxldGUoeyBpZDogbnQubmV0d29ya190eXBlX2lkIH0sIG50LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV0VHlwZUxpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiTmV0d29yayBUeXBlIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gTmV0VHlwZSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBWZXJ0Q29sTWV0aCBBZGQvVXBkYXRlL0RlbGV0ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZlcnRDb2xNZXRoTGlzdCA9IGFsbFZlcnRpY2FsQ29sbE1ldGhvZHM7IC8vdmNtXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZFZDTUZvcm0gPSBmYWxzZTsgLy9hZGQgc29tZXRoaW5nIG5ldyB0byBhIGxvb2t1cCBjbGlja2VkICh3aWxsIHVuaGlkZSBmb3JtIGJlbG93IGl0KSBGYWxzZS0+IGZvcm06IGhpZGRlbiwgVHJ1ZS0+IGZvcm06IHZpc2libGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGRWQ01CdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zdGFydCBpdCBhdCB0cnVlLi53aGVuIGNsaWNrZWQsIHNob3cgZm9ybSwgaGlkZSBidXR0b25cclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdWQ00gPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3Nob3cgQWRkIE5ldyAuLi4uIGNsaWNrZWQsIGhpZGUgdGhlIGJ1dHRvbiBhbmQgc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRWQ01DbGlja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkVkNNRm9ybSA9IHRydWU7IC8vc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRWQ01CdXR0b25TaG93aW5nID0gZmFsc2U7IC8vaGlkZSBidXR0b24gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk5ldmVyTWluZFZDTSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3VkNNID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRWQ01Gb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRWQ01CdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IGJ1dHRvbiAgIFxyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQWRkVmVydENvbE1ldGggPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFZFUlRJQ0FMX0NPTExfTUVUSE9ELnNhdmUoJHNjb3BlLm5ld1ZDTSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnZlcnRDb2xNZXRoTGlzdC5wdXNoKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdWQ00gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkVkNNRm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRWQ01CdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IHRoZSBidXR0b24gYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiVmVydGljYWwgQ29sbGVjdGlvbiBNZXRob2QgQWRkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZVZlcnRDb2xNZXRoID0gZnVuY3Rpb24gKGRhdGEsIGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBWRVJUSUNBTF9DT0xMX01FVEhPRC51cGRhdGUoeyBpZDogaWQgfSwgZGF0YSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlZlcnRpY2FsIENvbGxlY3Rpb24gTWV0aG9kIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cjtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVsZXRlVmVydENvbE1ldGggPSBmdW5jdGlvbiAodmNtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZjbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiVmVydGljYWwgQ29sbGVjdGlvbiBNZXRob2RcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGtleVRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICRzY29wZS52ZXJ0Q29sTWV0aExpc3QuaW5kZXhPZih2Y20pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFZFUlRJQ0FMX0NPTExfTUVUSE9ELmRlbGV0ZSh7IGlkOiB2Y20udmNvbGxlY3RfbWV0aG9kX2lkIH0sIHZjbSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnZlcnRDb2xNZXRoTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJWZXJ0aWNhbCBDb2xsZWN0aW9uIE1ldGhvZCBSZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbG9naWMgZm9yIGNhbmNlbFxyXG4gICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIFZlcnRDb2xNZXRoIEFkZC9VcGRhdGUvRGVsZXRlXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIFZlcnREYXR1bSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZlcnREYXRMaXN0ID0gYWxsVmVydGljYWxEYXR1bXM7IC8vdmRcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkVkRGb3JtID0gZmFsc2U7IC8vYWRkIHNvbWV0aGluZyBuZXcgdG8gYSBsb29rdXAgY2xpY2tlZCAod2lsbCB1bmhpZGUgZm9ybSBiZWxvdyBpdCkgRmFsc2UtPiBmb3JtOiBoaWRkZW4sIFRydWUtPiBmb3JtOiB2aXNpYmxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkVkRCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zdGFydCBpdCBhdCB0cnVlLi53aGVuIGNsaWNrZWQsIHNob3cgZm9ybSwgaGlkZSBidXR0b25cclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdWRCA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vc2hvdyBBZGQgTmV3IC4uLi4gY2xpY2tlZCwgaGlkZSB0aGUgYnV0dG9uIGFuZCBzaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZFZEQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZFZERm9ybSA9IHRydWU7IC8vc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRWREJ1dHRvblNob3dpbmcgPSBmYWxzZTsgLy9oaWRlIGJ1dHRvbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuTmV2ZXJNaW5kVkQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1ZEID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRWREZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZFZEQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyBidXR0b24gICBcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkFkZFZlcnREYXR1bSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgVkVSVElDQUxfREFUVU0uc2F2ZSgkc2NvcGUubmV3VkQsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS52ZXJ0RGF0TGlzdC5wdXNoKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdWRCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRWREZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkVkRCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IHRoZSBidXR0b24gYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiVmVydGljYWwgRGF0dW0gQWRkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZVZlcnREYXR1bSA9IGZ1bmN0aW9uIChkYXRhLCBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgVkVSVElDQUxfREFUVU0udXBkYXRlKHsgaWQ6IGlkIH0sIGRhdGEsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJWZXJ0aWNhbCBEYXR1bSBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZVZlcnREYXR1bSA9IGZ1bmN0aW9uICh2ZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2ZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiVmVydGljYWwgRGF0dW1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGtleVRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICRzY29wZS52ZXJ0RGF0TGlzdC5pbmRleE9mKHZkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBWRVJUSUNBTF9EQVRVTS5kZWxldGUoeyBpZDogdmQuZGF0dW1faWQgfSwgdmQsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS52ZXJ0RGF0TGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJWZXJ0aWNhbCBEYXR1bSBSZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbG9naWMgZm9yIGNhbmNlbFxyXG4gICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIFZlcnREYXR1bSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIEFMTCBMT09LVVBTIChhZGQvdXBkYXRlL2RlbGV0ZSlcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1dKTtcclxuXHJcbn0oKSk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU1ROQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQ29udHJvbGxlcnMnKTtcclxuICAgIFNUTkNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ3N1Ym1pdFJlcG9ydEN0cmwnLCBbJyRzY29wZScsICckaHR0cCcsICckY29va2llcycsICckdWliTW9kYWwnLCAnJHN0YXRlJywgJ0NPTlRBQ1QnLCAnUkVQT1JUJywgXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsICRjb29raWVzLCAkdWliTW9kYWwsICRzdGF0ZSwgQ09OVEFDVCwgUkVQT1JUKSB7XHJcbiAgICAgICAgICAgIC8vI21ha2Ugc3VyZSB0aGlzIGNsZWFycyBleGNlcHQgZm9yIGlmIHRoZXkgYXJlIG5lZWRpbmcgdG8gY29tcGxldGUgYSByZXBvcnRcclxuICAgICAgICAgICAgaWYgKCRzY29wZS4kcGFyZW50Lm5lZWRUb0NvbXBsZXRlICE9PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJHBhcmVudC5uZXdSZXBvcnQgPSB7cmVwb3J0X2RhdGU6IG5ldyBEYXRlKCl9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy9rZWVwcyBpdCB2YWxpZCBhbmQgdGVsbHMgaXQgaXQncyB1dGMgc28gaXQgd2lsbCBjb252ZXJ0IHByb3BlciBsb2NhbFxyXG4gICAgICAgICAgICAgICAgdmFyIHlyID0gJHNjb3BlLm5ld1JlcG9ydC5yZXBvcnRfZGF0ZS5zdWJzdHIoMCwgNCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW8gPSAkc2NvcGUubmV3UmVwb3J0LnJlcG9ydF9kYXRlLnN1YnN0cig1LCAyKTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXkgPSAkc2NvcGUubmV3UmVwb3J0LnJlcG9ydF9kYXRlLnN1YnN0cig4LCAyKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQucmVwb3J0X2RhdGUgPSBuZXcgRGF0ZShtbyArIFwiL1wiICsgZGF5ICsgXCIvXCIgKyB5cik7XHJcbiAgICAgICAgICAgICAgIFxyXG4vLyAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0LnJlcG9ydF9kYXRlID0gbmV3IERhdGUoJHNjb3BlLm5ld1JlcG9ydC5yZXBvcnRfZGF0ZSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRzY29wZS5EZXBsb3lTdGFmZiA9IHt9O1xyXG4gICAgICAgICAgICAkc2NvcGUuR2VuU3RhZmYgPSB7fTtcclxuICAgICAgICAgICAgJHNjb3BlLklubGFuZFN0YWZmID0ge307XHJcbiAgICAgICAgICAgICRzY29wZS5Db2FzdFN0YWZmID0ge307XHJcbiAgICAgICAgICAgICRzY29wZS5XYXRlclN0YWZmID0ge307XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0geyBvcGVuQ29udGFjdHM6IGZhbHNlLCBvcGVuQ291bnRzOmZhbHNlLCBvcGVuUGVyc29ubmVsOmZhbHNlIH07IC8vaWYgc3VibWl0IGZvcm0gaW52YWxpZCwgb3BlbiBjb250YWN0cyB0byBzaG93IHJlcXVpcmVkIGZpZWxkXHJcbiAgICAgICAgICAgIC8vY2FsbGVkIGEgZmV3IHRpbWVzIHRvIGZvcm1hdCBqdXN0IHRoZSBkYXRlIChubyB0aW1lKVxyXG4gICAgICAgICAgICB2YXIgbWFrZUFkYXRlID0gZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZCAhPT0gXCJcIiAmJiBkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3Byb3ZpZGVkIGRhdGVcclxuICAgICAgICAgICAgICAgICAgICBhRGF0ZSA9IG5ldyBEYXRlKGQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHllYXIgPSBhRGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vbnRoID0gYURhdGUuZ2V0TW9udGgoKTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXkgPSAoJzAnICsgYURhdGUuZ2V0RGF0ZSgpKS5zbGljZSgtMik7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW9udGhOYW1lcyA9IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXRlV090aW1lID0gbmV3IERhdGUobW9udGhOYW1lc1ttb250aF0gKyBcIiBcIiArIGRheSArIFwiLCBcIiArIHllYXIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVXT3RpbWU7XHJcbiAgICAgICAgICAgIH07Ly9lbmQgbWFrZUFkYXRlKClcclxuICAgICAgICAgICAgLy9yZXNldCBpdCBoZXJlIHNvIGZvcm0gd2lsbCBjbGVhciB3aGVuIHRoZXkgbGVhdmUgYW5kIGNvbWUgYmFjay5cclxuICAgICAgICAgICAgJHNjb3BlLiRwYXJlbnQubmVlZFRvQ29tcGxldGUgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUubmV3UmVwb3J0LnJlcG9ydGluZ19tZXRyaWNzX2lkID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGlzYWJsZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgLy9nZXQgdGhpcyBldmVudCBuYW1lIGZyb20gdGhlIGV2ZW50aWRcclxuICAgICAgICAgICAgJHNjb3BlLmdldEV2ZW50TmFtZSA9IGZ1bmN0aW9uIChldklEKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmFtZTtcclxuICAgICAgICAgICAgICAgIHZhciB0aGlzRXZlbnQgPSAkc2NvcGUuZXZlbnRzLmZpbHRlcihmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5ldmVudF9pZCA9PSBldklEOyB9KVswXTtcclxuICAgICAgICAgICAgICAgIG5hbWUgPSB0aGlzRXZlbnQuZXZlbnRfbmFtZTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuYW1lO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8jcmVnaW9uIEdFVCBSZXBvcnQgQ29udGFjdHNcclxuICAgICAgICAgICAgdmFyIGdldFJlcG9ydENvbnRhY3RzID0gZnVuY3Rpb24gKHJlcG9ydElEKSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICBDT05UQUNULmdldENvbnRhY3RNb2RlbCh7IFJlcG9ydE1ldHJpYzogcmVwb3J0SUQgfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5EZXBsb3lTdGFmZiA9IHJlc3BvbnNlLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5jb250YWN0VHlwZSA9PSBcIkRlcGxveWVkIFN0YWZmXCI7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5HZW5TdGFmZiA9IHJlc3BvbnNlLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5jb250YWN0VHlwZSA9PSBcIkdlbmVyYWxcIjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLklubGFuZFN0YWZmID0gcmVzcG9uc2UuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmNvbnRhY3RUeXBlID09IFwiSW5sYW5kIEZsb29kXCI7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5Db2FzdFN0YWZmID0gcmVzcG9uc2UuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmNvbnRhY3RUeXBlID09IFwiQ29hc3RhbCBGbG9vZFwiOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuV2F0ZXJTdGFmZiA9IHJlc3BvbnNlLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5jb250YWN0VHlwZSA9PSBcIldhdGVyIFF1YWxpdHlcIjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kaXNhYmxlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyNlbmRyZWdpb24gR0VUIFJlcG9ydCBDb250YWN0c1xyXG5cclxuICAgICAgICAgICAgLy8jcmVnaW9uIFBPU1QgUmVwb3J0IENvbnRhY3RzXHJcbiAgICAgICAgICAgIHZhciBwb3N0UmVwb3J0Q29udGFjdHMgPSBmdW5jdGlvbiAocmVwb3J0SUQpIHtcclxuICAgICAgICAgICAgICAgIGlmICghYW5ndWxhci5lcXVhbHMoe30sICRzY29wZS5EZXBsb3lTdGFmZikgJiYgJHNjb3BlLkRlcGxveVN0YWZmICE9PSB1bmRlZmluZWQpIHsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIFJFUE9SVC5hZGRSZXBvcnRDb250YWN0KHsgcmVwb3J0SWQ6IHJlcG9ydElELCBjb250YWN0VHlwZUlkOiAxIH0sICRzY29wZS5EZXBsb3lTdGFmZiwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJEZXBsb3kgU3RhZmYgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2UxLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlOyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuZXF1YWxzKHt9LCAkc2NvcGUuR2VuU3RhZmYpICYmICRzY29wZS5HZW5TdGFmZiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgUkVQT1JULmFkZFJlcG9ydENvbnRhY3QoeyByZXBvcnRJZDogcmVwb3J0SUQsIGNvbnRhY3RUeXBlSWQ6IDJ9LCAkc2NvcGUuR2VuU3RhZmYsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiR2VuZXJhbCBTdGFmZiBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZTIuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuZXF1YWxzKHt9LCAkc2NvcGUuSW5sYW5kU3RhZmYpICYmICRzY29wZS5JbmxhbmRTdGFmZiAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgUkVQT1JULmFkZFJlcG9ydENvbnRhY3QoeyByZXBvcnRJZDogcmVwb3J0SUQsIGNvbnRhY3RUeXBlSWQ6IDN9LCAkc2NvcGUuSW5sYW5kU3RhZmYsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiSW5sYW5kIFN0YWZmIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZTMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlMy5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KS4kcHJvbWlzZTsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVxdWFscyh7fSwgJHNjb3BlLkNvYXN0U3RhZmYpICYmICRzY29wZS5Db2FzdFN0YWZmICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBSRVBPUlQuYWRkUmVwb3J0Q29udGFjdCh7IHJlcG9ydElkOiByZXBvcnRJRCwgY29udGFjdFR5cGVJZDogNH0sICRzY29wZS5Db2FzdFN0YWZmLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlNCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkNvYXN0YWwgU3RhZmYgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlNCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2U0LnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghYW5ndWxhci5lcXVhbHMoe30sICRzY29wZS5XYXRlclN0YWZmKSAmJiAkc2NvcGUuV2F0ZXJTdGFmZiAhPT0gdW5kZWZpbmVkKSB7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIFJFUE9SVC5hZGRSZXBvcnRDb250YWN0KHsgcmVwb3J0SWQ6IHJlcG9ydElELCBjb250YWN0VHlwZUlkOiA1fSwgJHNjb3BlLldhdGVyU3RhZmYsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2U1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiV2F0ZXIgU3RhZmYgVXBkYXRlZFwiKTsgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZTUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlNS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8jZW5kcmVnaW9uIFBPU1QgUmVwb3J0IENvbnRhY3RzXHJcblxyXG4gICAgICAgICAgICB2YXIgcmVtb3ZlSW5jb21wbGV0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vcmVtb3ZlIGl0IGZyb20gdGhlIGxpc3Qgb2YgaW5jb21wbGV0ZXNcclxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IDA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRzY29wZS5tZW1iZXJJbmNvbXBsZXRlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubWVtYmVySW5jb21wbGV0ZXNbaV0ucmVwb3J0aW5nX21ldHJpY3NfaWQgPT0gJHNjb3BlLm5ld1JlcG9ydC5yZXBvcnRpbmdfbWV0cmljc19pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmRleCA9IGk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAkc2NvcGUubWVtYmVySW5jb21wbGV0ZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICRzY29wZS5tZW1iZXJJbmNvbXBsZXRlcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9Qb3N0L1B1dCB0aGUgUmVwb3J0IGFuZCBSZXBvcnQgQ29udGFjdHMuIENhbGxlZCB0d2ljZSAoZnJvbSB3aXRoaW4gTW9kYWwgKGluY29tcGxldGUpIGFuZCBvdXRzaWRlIChjb21wbGV0ZSkpXHJcbiAgICAgICAgICAgIHZhciBQb3N0UHV0UmVwb3J0QW5kUmVwb3J0Q29udGFjdHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvL1BPU1Qgb3IgUFVUICAgICAgICBcclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQucmVwb3J0X2RhdGUgPSAkc2NvcGUubmV3UmVwb3J0LnJlcG9ydF9kYXRlLnRvRGF0ZVN0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5uZXdSZXBvcnQucmVwb3J0aW5nX21ldHJpY3NfaWQgIT09IHVuZGVmaW5lZCkgeyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy9QVVRcclxuICAgICAgICAgICAgICAgICAgICBSRVBPUlQudXBkYXRlKHsgaWQ6ICRzY29wZS5uZXdSZXBvcnQucmVwb3J0aW5nX21ldHJpY3NfaWQgfSwgJHNjb3BlLm5ld1JlcG9ydCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlJlcG9ydCBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0LmV2ZW50X25hbWUgPSAkc2NvcGUuZ2V0RXZlbnROYW1lKCRzY29wZS5uZXdSZXBvcnQuZXZlbnRfaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLm5ld1JlcG9ydC5jb21wbGV0ZSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVJbmNvbXBsZXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNDb21wbGV0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhlbiBQT1NUIHRoZSBSZXBvcnRDb250YWN0c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3N0UmVwb3J0Q29udGFjdHMoJHNjb3BlLm5ld1JlcG9ydC5yZXBvcnRpbmdfbWV0cmljc19pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZnVsbFJlcG9ydEZvcm0uc3VibWl0LiRzZXRQcmlzdGluZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZnVsbFJlcG9ydEZvcm0uc3VibWl0LmV2ZW50X2lkLiR2aWV3VmFsdWUgPSB1bmRlZmluZWQ7Ly9uZWVkZWQgZm9yIHRoZSBjaGFuZ2VTdGF0ZSB0byBub3QgdGhyb3cgdXAgbGVhdmluZyB0YWIgbWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ3JlcG9ydGluZy5yZXBvcnREYXNoJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vUE9TVFxyXG4gICAgICAgICAgICAgICAgICAgIFJFUE9SVC5zYXZlKCRzY29wZS5uZXdSZXBvcnQsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJSZXBvcnQgQ3JlYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlcG9ydHMucHVzaChyZXNwb25zZSk7IC8vYWRkIHRvIHRoZSBsaXN0IG9mIGFsbCByZXBvcnRzIGZvciBmaWx0ZXJpbmcgb24gdGhlIGdlbmVyYXRlIHRhYlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLm5ld1JlcG9ydC5jb21wbGV0ZSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVJbmNvbXBsZXRlKCk7ICRzY29wZS5pc0NvbXBsZXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0LmV2ZW50X25hbWUgPSAkc2NvcGUuZ2V0RXZlbnROYW1lKCRzY29wZS5uZXdSZXBvcnQuZXZlbnRfaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1lbWJlckluY29tcGxldGVzLnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhlbiBQT1NUIHRoZSBSZXBvcnRDb250YWN0c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0LnJlcG9ydGluZ19tZXRyaWNzX2lkID0gcmVzcG9uc2UucmVwb3J0aW5nX21ldHJpY3NfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RSZXBvcnRDb250YWN0cygkc2NvcGUubmV3UmVwb3J0LnJlcG9ydGluZ19tZXRyaWNzX2lkKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5mdWxsUmVwb3J0Rm9ybS5zdWJtaXQuJHNldFByaXN0aW5lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5mdWxsUmVwb3J0Rm9ybS5zdWJtaXQuZXZlbnRfaWQuJHZpZXdWYWx1ZSA9IHVuZGVmaW5lZDsgLy9uZWVkZWQgZm9yIHRoZSBjaGFuZ2VTdGF0ZSB0byBub3QgdGhyb3cgdXAgbGVhdmluZyB0YWIgbWVzc2FnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ3JlcG9ydGluZy5yZXBvcnREYXNoJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgcG9zdFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9nZXQgdmFsdWVzIGZvciBQZXJzb25uZWwgWWVzdGVyZGF5cywgYW5kIENvbnRhY3RzIChpZiByZXBvcnQgd2FzIGRvbmUgeWVzdGVyZGF5KSwgYW5kIGFsbCBjb3VudHMgZm9yIGluc3RydW1lbnRzICYgaHdtc1xyXG4gICAgICAgICAgICAkc2NvcGUucG9wdWxhdGVZZXN0VG90cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubmV3UmVwb3J0LnJlcG9ydF9kYXRlICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLm5ld1JlcG9ydC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5uZXdSZXBvcnQuZXZlbnRfaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmb3JtYXREYXRlID0gbmV3IERhdGUoJHNjb3BlLm5ld1JlcG9ydC5yZXBvcnRfZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0RGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXREYXRlID0gZm9ybWF0RGF0ZS50b0lTT1N0cmluZygpLnN1YnN0cigwLCAxMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG15RGF0ZSA9IGZvcm1hdERhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoZVN0YXRlID0gJHNjb3BlLm5ld1JlcG9ydC5zdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZUlEID0gJHNjb3BlLm5ld1JlcG9ydC5ldmVudF9pZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydCA9IHsgcmVwb3J0X2RhdGU6ICRzY29wZS5uZXdSZXBvcnQucmVwb3J0X2RhdGUsIHN0YXRlOiB0aGVTdGF0ZSwgZXZlbnRfaWQ6IGVJRCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5EZXBsb3lTdGFmZiA9IHt9OyAkc2NvcGUuR2VuU3RhZmYgPSB7fTsgJHNjb3BlLklubGFuZFN0YWZmID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkNvYXN0U3RhZmYgPSB7fTsgJHNjb3BlLldhdGVyU3RhZmYgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmlvdXNEYXkgPSBuZXcgRGF0ZShteURhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzRGF5LnNldEhvdXJzKDAsIDAsIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIHByZXZpb3VzRGF5ID0gcHJldmlvdXNEYXkudG9JU09TdHJpbmcoKS5zdWJzdHIoMCwgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB5ZXN0ZXJkYXlScHQgPSAkc2NvcGUucmVwb3J0cy5maWx0ZXIoZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlcERhdGUgPSByLnJlcG9ydF9kYXRlLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChyLmV2ZW50X2lkID09ICRzY29wZS5uZXdSZXBvcnQuZXZlbnRfaWQgJiYgci5zdGF0ZSA9PSAkc2NvcGUubmV3UmVwb3J0LnN0YXRlKSAmJiAocmVwRGF0ZSA9PSBwcmV2aW91c0RheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeWVzdGVyZGF5UnB0ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gUEVSU09OTkVMIHBvcHVsYXRpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydC55ZXN0X2ZpZWxkcGVycyA9IHllc3RlcmRheVJwdC50b2RfZmllbGRwZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0Lnllc3Rfb2ZmaWNlcGVycyA9IHllc3RlcmRheVJwdC50b2Rfb2ZmaWNlcGVycztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENPTlRBQ1RTIHBvcHVsYXRpbmcgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdldFJlcG9ydENvbnRhY3RzKHllc3RlcmRheVJwdC5yZXBvcnRpbmdfbWV0cmljc19pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfS8vZW5kIGlmIHllc3RlcmRheVJwdCAhPSB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydC55ZXN0X2ZpZWxkcGVycyA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQueWVzdF9vZmZpY2VwZXJzID0gMDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9ub3cgZ2V0IHRvdGFscyBmb3IgYWxsIHNlbnNvcnMgYW5kIGh3bXMgdG8gcG9wdWxhdGUgaW4gdGhpcyBuZXdSZXBvcnRcclxuICAgICAgICAgICAgICAgICAgICBSRVBPUlQuZ2V0RGFpbHlSZXBvcnRUb3RzKHsgRGF0ZTogbXlEYXRlLCBFdmVudDogJHNjb3BlLm5ld1JlcG9ydC5ldmVudF9pZCwgU3RhdGU6ICRzY29wZS5uZXdSZXBvcnQuc3RhdGUgfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZTYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9vbmx5IGNhcmUgYWJvdXQgdGhlIGNvdW50c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0LmRlcF9yYXBkZXBsX2dhZ2UgPSByZXNwb25zZTYuZGVwX3JhcGRlcGxfZ2FnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydC5yZWNfcmFwZGVwbF9nYWdlID0gcmVzcG9uc2U2LnJlY19yYXBkZXBsX2dhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQubG9zdF9yYXBkZXBsX2dhZ2UgPSByZXNwb25zZTYubG9zdF9yYXBkZXBsX2dhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQuZGVwX3d0cmxldl9zZW5zb3IgPSByZXNwb25zZTYuZGVwX3d0cmxldl9zZW5zb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQucmVjX3d0cmxldl9zZW5zb3IgPSByZXNwb25zZTYucmVjX3d0cmxldl9zZW5zb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQubG9zdF93dHJsZXZfc2Vuc29yID0gcmVzcG9uc2U2Lmxvc3Rfd3RybGV2X3NlbnNvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydC5kZXBfd3Zfc2VucyA9IHJlc3BvbnNlNi5kZXBfd3Zfc2VucztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydC5yZWNfd3Zfc2VucyA9IHJlc3BvbnNlNi5yZWNfd3Zfc2VucztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydC5sb3N0X3d2X3NlbnMgPSByZXNwb25zZTYubG9zdF93dl9zZW5zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0LmRlcF9iYXJvbWV0cmljID0gcmVzcG9uc2U2LmRlcF9iYXJvbWV0cmljO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0LnJlY19iYXJvbWV0cmljID0gcmVzcG9uc2U2LnJlY19iYXJvbWV0cmljO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0Lmxvc3RfYmFyb21ldHJpYyA9IHJlc3BvbnNlNi5sb3N0X2Jhcm9tZXRyaWM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQuZGVwX21ldGVvcm9sb2dpY2FsID0gcmVzcG9uc2U2LmRlcF9tZXRlb3JvbG9naWNhbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydC5yZWNfbWV0ZW9yb2xvZ2ljYWwgPSByZXNwb25zZTYucmVjX21ldGVvcm9sb2dpY2FsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0Lmxvc3RfbWV0ZW9yb2xvZ2ljYWwgPSByZXNwb25zZTYubG9zdF9tZXRlb3JvbG9naWNhbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydC5od21fZmxhZ2dlZCA9IHJlc3BvbnNlNi5od21fZmxhZ2dlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydC5od21fY29sbGVjdGVkID0gcmVzcG9uc2U2Lmh3bV9jb2xsZWN0ZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZTYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlNi5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiUGxlYXNlIGNob29zZSBhIGRhdGUsIGV2ZW50IGFuZCBzdGF0ZSBmaXJzdC5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07IC8vIGVuZCBwb3B1bGF0ZVllc3RUb3RzXHJcblxyXG4gICAgICAgICAgICAvL3NhdmUgdGhpcyByZXBvcnQgYW5kIGl0J3MgY29udGFjdHNcclxuICAgICAgICAgICAgJHNjb3BlLnNhdmVSZXBvcnQgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubmV3UmVwb3J0LmNvbXBsZXRlID09PSB1bmRlZmluZWQgfHwgJHNjb3BlLm5ld1JlcG9ydC5jb21wbGV0ZSA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZG9uJ3Qgd29ycnkgaWYgdmFsaWQsIGp1c3QgcG9zdHB1dCBtb2RhbCBjb25maXJtaW5nIHRoZXkgd2FudCB0byBzYXZlIHRoaXMgd2l0aG91dCBtYXJraW5nIGl0IGNvbXBsZXRlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnc2F2ZVJlcG9ydE1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnY29uZmlybVJlcG9ydE1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy95ZXMsIHBvc3QgdGhpcyBhcyBpbmNvbXBsZXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQuY29tcGxldGUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0Lm1lbWJlcl9pZCA9ICRzY29wZS5NZW1iZXJMb2dnZWRJbi5tZW1iZXJfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBvc3RQdXRSZXBvcnRBbmRSZXBvcnRDb250YWN0cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8uLmNvbXBsZXRlIGlzIDEgLi4gY2hlY2sgaWYgdmFsaWRcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGUgcmVwb3J0IGlzIGNvbXBsZXRlIGFuZCB2YWxpZCwganVzdCBwb3N0L3B1dCBpdCAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0Lm1lbWJlcl9pZCA9ICRzY29wZS5NZW1iZXJMb2dnZWRJbi5tZW1iZXJfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBvc3RQdXRSZXBvcnRBbmRSZXBvcnRDb250YWN0cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxlcnQoXCJBbGwgZmllbGRzIGFyZSByZXF1aXJlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cy5vcGVuQ29udGFjdHMgPSB0cnVlOyAkc2NvcGUuc3RhdHVzLm9wZW5Db3VudHMgPSB0cnVlOyAkc2NvcGUuc3RhdHVzLm9wZW5QZXJzb25uZWwgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoXCJbbmFtZT0nXCIgKyAkc2NvcGUuZnVsbFJlcG9ydEZvcm0uc3VibWl0LiRuYW1lICsgXCInXVwiKS5maW5kKCcubmctaW52YWxpZDp2aXNpYmxlOmZpcnN0JykuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUucG9wdWxhdGVEZXBsb3llciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5EZXBsb3lTdGFmZiA9ICRzY29wZS5NZW1iZXJMb2dnZWRJbjtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9pbmNvbXBsZXRlIHJlcG9ydCB3YXMgY2xpY2tlZCwgZ28gZ2V0IGl0IGFuZCB0aGUgY29udGFjdHMgZm9yIGl0XHJcbiAgICAgICAgICAgICRzY29wZS5nZXRJbmNvbXBsZXRlUmVwb3J0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlcG9ydElkID0gdGhpcy5pci5yZXBvcnRpbmdfbWV0cmljc19pZDtcclxuICAgICAgICAgICAgICAgIFJFUE9SVC5xdWVyeSh7IGlkOiByZXBvcnRJZCB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydCA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgQ2hyb21lLCBmb3JtYXQgZGF0ZTpcclxuICAgICAgICAgICAgICAgICAgICB2YXIgeXIgPSByZXNwb25zZS5yZXBvcnRfZGF0ZS5zdWJzdHIoMCwgNCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vID0gcmVzcG9uc2UucmVwb3J0X2RhdGUuc3Vic3RyKDUsIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXkgPSByZXNwb25zZS5yZXBvcnRfZGF0ZS5zdWJzdHIoOCwgMik7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydC5yZXBvcnRfZGF0ZSA9IG5ldyBEYXRlKG1vICsgXCIvXCIgKyBkYXkgKyBcIi9cIiArIHlyKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5uZXdSZXBvcnQucmVwb3J0X2RhdGUgPSBuZXcgRGF0ZSgkc2NvcGUubmV3UmVwb3J0LnJlcG9ydF9kYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZnVsbFJlcG9ydEZvcm0uc3VibWl0LiRzZXREaXJ0eSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZ2V0IGNvbnRhY3RzIFxyXG4gICAgICAgICAgICAgICAgICAgIGdldFJlcG9ydENvbnRhY3RzKHJlcG9ydElkKTtcclxuICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKCRzY29wZS5uZXdSZXBvcnQucmVwb3J0aW5nX21ldHJpY3NfaWQgIT09dW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgZ2V0UmVwb3J0Q29udGFjdHMoJHNjb3BlLm5ld1JlcG9ydC5yZXBvcnRpbmdfbWV0cmljc19pZCk7XHJcbiAgICAgICAgfV0pO1xyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIE1vZGFsQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnTW9kYWxDb250cm9sbGVycycpO1xyXG4gICAgTW9kYWxDb250cm9sbGVycy5jb250cm9sbGVyKCdyZXBvcnRNb2RhbEN0cmwnLCBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsICdyZXBvcnQnLCAnc3VibWl0UGVyc29uJywgJ2NvbnRhY3RzJywgXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UsIHJlcG9ydCwgc3VibWl0UGVyc29uLCBjb250YWN0cykge1xyXG4gICAgICAgICAgICAkc2NvcGUuUmVwb3J0VmlldyA9IHt9O1xyXG4gICAgICAgICAgICAkc2NvcGUuUmVwb3J0Vmlldy5SZXBvcnQgPSByZXBvcnQ7XHJcbiAgICAgICAgICAgICRzY29wZS5SZXBvcnRWaWV3LnN1Ym1pdHRlciA9IHN1Ym1pdFBlcnNvbjtcclxuICAgICAgICAgICAgJHNjb3BlLlJlcG9ydFZpZXcuZGVwbG95U3RhZmYgPSBjb250YWN0cy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuY29udGFjdFR5cGUgPT0gXCJEZXBsb3llZCBTdGFmZlwiOyB9KVswXTtcclxuICAgICAgICAgICAgJHNjb3BlLlJlcG9ydFZpZXcuZ2VuZXJhbFN0YWZmID0gY29udGFjdHMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmNvbnRhY3RUeXBlID09IFwiR2VuZXJhbFwiOyB9KVswXTtcclxuICAgICAgICAgICAgJHNjb3BlLlJlcG9ydFZpZXcuaW5sYW5kU3RhZmYgPSBjb250YWN0cy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuY29udGFjdFR5cGUgPT0gXCJJbmxhbmQgRmxvb2RcIjsgfSlbMF07XHJcbiAgICAgICAgICAgICRzY29wZS5SZXBvcnRWaWV3LmNvYXN0U3RhZmYgPSBjb250YWN0cy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuY29udGFjdFR5cGUgPT0gXCJDb2FzdGFsIEZsb29kXCI7IH0pWzBdO1xyXG4gICAgICAgICAgICAkc2NvcGUuUmVwb3J0Vmlldy53YXRlclN0YWZmID0gY29udGFjdHMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmNvbnRhY3RUeXBlID09IFwiV2F0ZXIgUXVhbGl0eVwiOyB9KVswXTtcclxuICAgICAgICAgICAgJHNjb3BlLnByaW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgd2luZG93LnByaW50KCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1dKTtcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBTVE5Db250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTVE5Db250cm9sbGVycycpO1xyXG4gICAgU1ROQ29udHJvbGxlcnMuY29udHJvbGxlcigncmVwb3J0aW5nRGFzaEN0cmwnLCBbJyRzY29wZScsICckY29va2llcycsICckZmlsdGVyJywgJyR1aWJNb2RhbCcsICckc3RhdGUnLCAnJGh0dHAnLCAnQ09OVEFDVCcsICdNRU1CRVInLCAnYWxsUmVwb3J0c0FnYWluJywgXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGNvb2tpZXMsICRmaWx0ZXIsICR1aWJNb2RhbCwgJHN0YXRlLCAkaHR0cCwgQ09OVEFDVCwgTUVNQkVSLCBhbGxSZXBvcnRzQWdhaW4pIHtcclxuICAgICAgICAgICAgJHNjb3BlLnJlcG9ydHNUb0RhdGUgPSBhbGxSZXBvcnRzQWdhaW47XHJcbiAgICAgICAgICAgICRzY29wZS50b2RheVJwdHMgPSBbXTsgJHNjb3BlLnllc3RlcmRheVJwdHMgPSBbXTsgJHNjb3BlLnBpY2tEYXRlUnB0cyA9IFtdOyAkc2NvcGUucGlja0FkYXRlUmVwb3J0cyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkc2NvcGUudG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAkc2NvcGUudG9kYXkuc2V0SG91cnMoMCwgMCwgMCwgMCk7XHJcbiAgICAgICAgICAgICRzY29wZS55ZXN0ZXJkYXkgPSBuZXcgRGF0ZSgkc2NvcGUudG9kYXkpO1xyXG4gICAgICAgICAgICAkc2NvcGUueWVzdGVyZGF5LnNldERhdGUoJHNjb3BlLnRvZGF5LmdldERhdGUoKSAtIDEpO1xyXG4gICAgICAgICAgICAkc2NvcGUudG9kYXkgPSAkc2NvcGUudG9kYXkudG9JU09TdHJpbmcoKS5zdWJzdHIoMCwgMTApO1xyXG4gICAgICAgICAgICAkc2NvcGUueWVzdGVyZGF5ID0gJHNjb3BlLnllc3RlcmRheS50b0lTT1N0cmluZygpLnN1YnN0cigwLDEwKTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5USElTX0RBVEUgPSB7fTtcclxuICAgICAgICAgICAgLy9WaWV3IFJlcG9ydCBidXR0b24gY2xpY2tlZCwgZ2V0IHN0dWZmIGFuZCBtYWtlIGEgcGRmIFxyXG4gICAgICAgICAgICAkc2NvcGUuVmlld1JlcG9ydCA9IGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAvL21vZGFsXHJcbiAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ1ZpZXdSZXBvcnQuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3JlcG9ydE1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ2xnJyxcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ3JlcC1kaWFsb2cnLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHsgIC8vVE9ETyA6OiBDaGFuZ2UgdGhpcyB0byBnZXQgUmVwb3J0TW9kZWwgLS1pbmNsdWRlcyBjb250YWN0c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXBvcnQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdWJtaXRQZXJzb246IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZW1iZXIgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1FTUJFUi5xdWVyeSh7IGlkOiByLm1lbWJlcl9pZCB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVtYmVyLm1lbSA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtZW1iZXJBZ2VuY3kgPSAkc2NvcGUuYWdlbmNpZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLmFnZW5jeV9pZCA9PSBtZW1iZXIubWVtLmFnZW5jeV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVtYmVyLmFnZW5jeV9uYW1lID0gbWVtYmVyQWdlbmN5LmFnZW5jeV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lbWJlci5hZ2VuY3lfYWRkcmVzcyA9IG1lbWJlckFnZW5jeS5hZGRyZXNzICsgXCIsIFwiICsgbWVtYmVyQWdlbmN5LmNpdHkgKyBcIiBcIiArIG1lbWJlckFnZW5jeS5zdGF0ZSArIFwiIFwiICsgbWVtYmVyQWdlbmN5LnppcDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lbWJlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGFjdHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDT05UQUNULmdldENvbnRhY3RNb2RlbCh7IFJlcG9ydE1ldHJpYzogci5yZXBvcnRpbmdfbWV0cmljc19pZCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbm90aGluZyB0byBkbyBoZXJlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgIH07Ly9lbmQgVmlld1JlcG9ydCBjbGlja1xyXG5cclxuICAgICAgICAgICAgLy9mdW5jdGlvbiBjYWxsIHRvIGFkZCBldmVudF9uYW1lIHRvIGxpc3Qgb2YgcmVwb3J0c1xyXG4gICAgICAgICAgICB2YXIgZm9ybWF0UmVwb3J0ID0gZnVuY3Rpb24gKHJlcExpc3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXR1cm5MaXN0ID0gW107XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJlcExpc3QubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVwID0gcmVwTGlzdFtpXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnQgPSAkc2NvcGUuZXZlbnRzLmZpbHRlcihmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5ldmVudF9pZCA9PSByZXAuZXZlbnRfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlcC5ldmVudF9uYW1lID0gZXZlbnQuZXZlbnRfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm5MaXN0LnB1c2gocmVwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiByZXR1cm5MaXN0O1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgdmFyIHRvZGF5UmVwb3J0cyA9ICRzY29wZS5yZXBvcnRzVG9EYXRlLmZpbHRlcihmdW5jdGlvbiAodG9kYXlyZXApIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXBvcnREYXRlID0gdG9kYXlyZXAucmVwb3J0X2RhdGUudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgMTApO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcG9ydERhdGUgPT0gJHNjb3BlLnRvZGF5O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgJHNjb3BlLnRvZGF5UnB0cyA9IGZvcm1hdFJlcG9ydCh0b2RheVJlcG9ydHMpO1xyXG5cclxuICAgICAgICAgICAgdmFyIHllc3RlcmRheVJlcG9ydHMgPSAkc2NvcGUucmVwb3J0c1RvRGF0ZS5maWx0ZXIoZnVuY3Rpb24gKHllc3RyZXApIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXBvcnREYXRlID0geWVzdHJlcC5yZXBvcnRfZGF0ZS50b1N0cmluZygpLnN1YnN0cmluZygwLCAxMCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVwb3J0RGF0ZSA9PSAkc2NvcGUueWVzdGVyZGF5O1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgJHNjb3BlLnllc3RlcmRheVJwdHMgPSBmb3JtYXRSZXBvcnQoeWVzdGVyZGF5UmVwb3J0cyk7XHJcblxyXG4gICAgICAgICAgICAvL2dpdmUgbWUgdGhlIHJlcG9ydHMgZG9uZSBvbiB0aGlzIGRhdGVcclxuICAgICAgICAgICAgJHNjb3BlLmdldFJlcG9ydHNCeURhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLlRISVNfREFURS5kYXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZm9ybWF0RGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5USElTX0RBVEUuZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0RGF0ZS5zZXRIb3VycygwLCAwLCAwLCAwKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXREYXRlID0gZm9ybWF0RGF0ZS50b0lTT1N0cmluZygpLnN1YnN0cigwLCAxMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNEYXRlUmVwb3J0cyA9ICRzY29wZS5yZXBvcnRzVG9EYXRlLmZpbHRlcihmdW5jdGlvbiAodGRhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlcG9ydERhdGUgPSB0ZGF0ZS5yZXBvcnRfZGF0ZS50b1N0cmluZygpLnN1YnN0cmluZygwLCAxMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXBvcnREYXRlID09IGZvcm1hdERhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBpY2tEYXRlUnB0cyA9IGZvcm1hdFJlcG9ydCh0aGlzRGF0ZVJlcG9ydHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5waWNrQWRhdGVSZXBvcnRzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJQaWNrIGEgZGF0ZSBmaXJzdC5cIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9jb21wbGV0ZSB0aGUgcmVwb3J0IGJ1dHRvbiBjbGlja2VkIC0tIHNlbmQgYmFjayB0byBzdWJtaXQgd2l0aCByZXBvcnQgcG9wdWxhdGVkXHJcbiAgICAgICAgICAgICRzY29wZS5Db21wbGV0ZVRoaXNSZXBvcnQgPSBmdW5jdGlvbiAocmVwKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJHBhcmVudC5uZXdSZXBvcnQgPSByZXA7XHJcbiAgICAgICAgICAgICAgIC8vICRzY29wZS4kcGFyZW50Lm5ld1JlcG9ydC5yZXBvcnRfZGF0ZSA9IG5ldyBEYXRlKHJlcC5yZXBvcnRfZGF0ZSk7IC8va2VlcHMgaXQgdmFsaWRcclxuICAgICAgICAgICAgICAgICRzY29wZS4kcGFyZW50LmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJHBhcmVudC5uZWVkVG9Db21wbGV0ZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICBDT05UQUNULmdldENvbnRhY3RNb2RlbCh7IFJlcG9ydE1ldHJpYzogcmVwLnJlcG9ydGluZ19tZXRyaWNzX2lkIH0sIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UubGVuZ3RoID49IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRwYXJlbnQuRGVwbG95U3RhZmYgPSByZXNwb25zZS5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuY29udGFjdFR5cGUgPT0gXCJEZXBsb3llZCBTdGFmZlwiOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRwYXJlbnQuR2VuU3RhZmYgPSByZXNwb25zZS5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuY29udGFjdFR5cGUgPT0gXCJHZW5lcmFsXCI7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJHBhcmVudC5JbmxhbmRTdGFmZiA9IHJlc3BvbnNlLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5jb250YWN0VHlwZSA9PSBcIklubGFuZCBGbG9vZFwiOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRwYXJlbnQuQ29hc3RTdGFmZiA9IHJlc3BvbnNlLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5jb250YWN0VHlwZSA9PSBcIkNvYXN0YWwgRmxvb2RcIjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kcGFyZW50LldhdGVyU3RhZmYgPSByZXNwb25zZS5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuY29udGFjdFR5cGUgPT0gXCJXYXRlciBRdWFsaXR5XCI7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kcGFyZW50LkRlcGxveVN0YWZmID0ge307ICRzY29wZS4kcGFyZW50LkdlblN0YWZmID0ge307ICRzY29wZS4kcGFyZW50LklubGFuZFN0YWZmID0ge307ICRzY29wZS4kcGFyZW50LkNvYXN0U3RhZmYgPSB7fTsgJHNjb3BlLiRwYXJlbnQuV2F0ZXJTdGFmZiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygncmVwb3J0aW5nLnN1Ym1pdFJlcG9ydCcpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL3Byb2plY3QgYWxlcnQgdGV4dCBpbiBtb2RhbFxyXG4gICAgICAgICAgICAkc2NvcGUuZ2V0UHJvamVjdEFsZXJ0VGV4dCA9IGZ1bmN0aW9uIChyZXApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAvL25lZWQ6IFxyXG4gICAgICAgICAgICAgICAgLy8xLiB0aGlzUmVwb3J0XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuUHJvamVjdEFsZXJ0UGFydHMgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5Qcm9qZWN0QWxlcnRQYXJ0cy5SZXBvcnQgPSByZXA7XHJcbiAgICAgICAgICAgICAgICAvLzIuIHRvdGFsIG9mIFlFU1QgRklFTERQRVJTXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuUHJvamVjdEFsZXJ0UGFydHMudG90WWVzdEZpZWxkUGVycyA9IHJlcC55ZXN0X2ZpZWxkcGVycztcclxuICAgICAgICAgICAgICAgIC8vMy4gdG90YWwgb2YgT0ZGSUNFUEVSU1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLlByb2plY3RBbGVydFBhcnRzLnRvdFllc3RPZmZpY1BlcnMgPSByZXAueWVzdF9vZmZpY2VwZXJzO1xyXG4gICAgICAgICAgICAgICAgLy80LiB0b3RhbCB0b3RfZGlzY2hhcmdlX21lYXNcclxuICAgICAgICAgICAgICAgICRzY29wZS5Qcm9qZWN0QWxlcnRQYXJ0cy5tZWFzdXJlQ3RzID0gcmVwLnRvdF9kaXNjaGFyZ2VfbWVhcztcclxuICAgICAgICAgICAgICAgIC8vNS4gdG90YWwgc3RhdGVzIHJlc3BvbmRpbmcgKGFsbCByZXBvcnRzIHdpdGggdGhpcyBldmVudF9pZCwgY291bnQgb2YgZWFjaCBzdGF0ZSlcclxuICAgICAgICAgICAgICAgIHZhciBldmVudFJlcG9ydHMgPSAkc2NvcGUucmVwb3J0c1RvRGF0ZS5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuZXZlbnRfaWQgPT0gcmVwLmV2ZW50X2lkOyB9KTtcclxuICAgICAgICAgICAgICAgIHZhciB0ZXN0ID0gJGZpbHRlcignY291bnRCeScpKGV2ZW50UmVwb3J0cywgJ3N0YXRlJyk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuUHJvamVjdEFsZXJ0UGFydHMuc3RhdGVDb3VudCA9IDA7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2godGVzdCwgZnVuY3Rpb24gKGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlByb2plY3RBbGVydFBhcnRzLnN0YXRlQ291bnQrKztcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy82LiB0aGlzIGV2ZW50XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuUHJvamVjdEFsZXJ0UGFydHMuRXZlbnQgPSAkc2NvcGUuZXZlbnRzLmZpbHRlcihmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5ldmVudF9pZCA9PSByZXAuZXZlbnRfaWQ7IH0pWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vbW9kYWxcclxuICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAkc2NvcGUuUHJvamVjdEFsZXJ0UGFydHMuRXZlbnQuZXZlbnRfdHlwZV9pZCA9PSAxID8gJ0Zsb29kUEEuaHRtbCcgOiAnSHVycmljYW5lUEEuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ1Byb2pBbGVydE1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ21kJyxcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ3JlcC1kaWFsb2cnLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUHJvakFsZXJ0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLlByb2plY3RBbGVydFBhcnRzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9ub3RoaW5nIHRvIGRvIGhlcmVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy9lbmQgbW9kYWxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XSk7XHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU1ROQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQ29udHJvbGxlcnMnKTtcclxuLy8jcmVnaW9uIFJlcG9ydGluZyBDb250cm9sbGVyXHJcbiAgICBTVE5Db250cm9sbGVycy5jb250cm9sbGVyKCdyZXBvcnRpbmdDdHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckbG9jYXRpb24nLCAnJGh0dHAnLCAnJHVpYk1vZGFsJywgJ21lbWJlclJlcG9ydHMnLCAnYWxsRXZlbnRzJywgJ2FsbFN0YXRlcycsICdhbGxSZXBvcnRzJywgJ2FsbEV2ZW50VHlwZXMnLCAnYWxsRXZlbnRTdGF0dXMnLCAnYWxsQWdlbmNpZXMnLCAnU0VSVkVSX1VSTCcsICdSRVBPUlQnLCAnTUVNQkVSJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkY29va2llcywgJGxvY2F0aW9uLCAkaHR0cCwgJHVpYk1vZGFsLCBtZW1iZXJSZXBvcnRzLCBhbGxFdmVudHMsIGFsbFN0YXRlcywgYWxsUmVwb3J0cywgYWxsRXZlbnRUeXBlcywgYWxsRXZlbnRTdGF0dXMsIGFsbEFnZW5jaWVzLCBTRVJWRVJfVVJMLCBSRVBPUlQsIE1FTUJFUikge1xyXG4gICAgICAgICAgICBpZiAoJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSB1bmRlZmluZWQgfHwgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYXV0aCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS50aGlzUGFnZSA9IFwiUmVwb3J0aW5nXCI7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmFjdGl2ZU1lbnUgPSBcInJlcG9ydFwiOyBcclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBjaGFuZ2luZyB0YWJzIGhhbmRsZXIgLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3RhcnQnLCBmdW5jdGlvbiAoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZm9ybUlzUG9wdWxhdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChmcm9tU3RhdGUudXJsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJy9TdWJtaXRSZXBvcnQnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5mdWxsUmVwb3J0Rm9ybS5zdWJtaXQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1Jc1BvcHVsYXRlZCA9ICRzY29wZS5mdWxsUmVwb3J0Rm9ybS5zdWJtaXQuJGRpcnR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1Jc1BvcHVsYXRlZCA9ICRzY29wZS5mdWxsUmVwb3J0Rm9ybS5zdWJtaXQuZXZlbnRfaWQuJHZpZXdWYWx1ZSAhPT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGZvcm1Jc1BvcHVsYXRlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybUlzUG9wdWxhdGVkKSB7IC8vaXMgZGlydHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3RvU3RhdGUubmFtZTogJyArIHRvU3RhdGUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmcm9tU3RhdGUubmFtZTogJyArIGZyb21TdGF0ZS5uYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25maXJtKFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGxlYXZlIHRoZSBTdWJtaXQgUmVwb3J0IFRhYj8gQW55IHVuc2F2ZWQgaW5mb3JtYXRpb24gd2lsbCBiZSBsb3N0LlwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2dvIHRvOiAnICsgdG9TdGF0ZS5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdGF5IGF0IHN0YXRlOiAnICsgZnJvbVN0YXRlLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUuJGFwcGx5KCk7Ly8gbG9hZGluZy4uLy8kKFwiLnBhZ2UtbG9hZGluZ1wiKS5hZGRDbGFzcyhcImhpZGRlblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2V2ZW50LnN0b3BQcm9wYWdhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIGNoYW5naW5nIHRhYnMgaGFuZGxlciAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIERhdGVwaWNrZXJcclxuICAgICAgICAgICAgICAgICRzY29wZS5kYXRlcGlja3JzID0ge307XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm9wZW4gPSBmdW5jdGlvbiAoJGV2ZW50LCB3aGljaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGVwaWNrcnNbd2hpY2hdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICAgICAgICAgICAgICAvL2Zvcm1hdCB0aGUgZGF0ZSBtbS9kZC95eXl5XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZm9ybWF0RGF0ZSA9IGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnREdCA9IG5ldyBEYXRlKGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtbSA9IGN1cnJlbnREdC5nZXRNb250aCgpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBtbSA9IChtbSA8IDEwKSA/ICcwJyArIG1tIDogbW07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRkID0gY3VycmVudER0LmdldERhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgeXl5eSA9IGN1cnJlbnREdC5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRlID0gbW0gKyAnLycgKyBkZCArICcvJyArIHl5eXk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGU7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBnbG9iYWwgdmFyc1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlcnZlclVSTCA9IFNFUlZFUl9VUkw7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZnVsbFJlcG9ydEZvcm0gPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5EZXBsb3lTdGFmZiA9IHt9OyAkc2NvcGUuR2VuU3RhZmYgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5JbmxhbmRTdGFmZiA9IHt9OyAkc2NvcGUuQ29hc3RTdGFmZiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLldhdGVyU3RhZmYgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubmVlZFRvQ29tcGxldGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5tZW1iZXJJbmNvbXBsZXRlcyA9IG1lbWJlclJlcG9ydHMuZmlsdGVyKGZ1bmN0aW9uIChpcikgeyByZXR1cm4gaXIuY29tcGxldGUgPT09IDA7IH0pO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmV2ZW50cyA9IGFsbEV2ZW50cztcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZXMgPSBhbGxTdGF0ZXM7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVwb3J0cyA9IGFsbFJlcG9ydHM7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgTUVNQkVSLnF1ZXJ5KHsgaWQ6ICRjb29raWVzLmdldCgnbUlEJykgfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5NZW1iZXJMb2dnZWRJbiA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtZW1iZXJBZ2VuY3kgPSBhbGxBZ2VuY2llcy5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuYWdlbmN5X2lkID09ICRzY29wZS5NZW1iZXJMb2dnZWRJbi5hZ2VuY3lfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5NZW1iZXJMb2dnZWRJbi5hZ2VuY3lfbmFtZSA9IG1lbWJlckFnZW5jeS5hZ2VuY3lfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTWVtYmVyTG9nZ2VkSW4uYWdlbmN5X2FkZHJlc3MgPSBtZW1iZXJBZ2VuY3kuYWRkcmVzcyArIFwiLCBcIiArIG1lbWJlckFnZW5jeS5jaXR5ICsgXCIgXCIgKyBtZW1iZXJBZ2VuY3kuc3RhdGUgKyBcIiBcIiArIG1lbWJlckFnZW5jeS56aXA7XHJcbiAgICAgICAgICAgICAgICB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgIE1FTUJFUi5nZXRBbGwoKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5tZW1iZXJzID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWdlbmNpZXMgPSBhbGxBZ2VuY2llcztcclxuICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFR5cGVzID0gYWxsRXZlbnRUeXBlcztcclxuICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFN0YXRzID0gYWxsRXZlbnRTdGF0dXM7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIGdsb2JhbCB2YXJzXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIEdlbmVyYXRlIFJlcG9ydCB0YWJcclxuICAgICAgICAgICAgICAgICRzY29wZS5TdGF0ZW1vZGVsID0ge307Ly9iaW5kaW5nIHRvIHRoZSBzdGF0ZSBtdWx0aS1zZWxlY3RcclxuICAgICAgICAgICAgICAgICRzY29wZS5nZW5TdW1tYXJ5ID0ge307Ly9iaW5kaW5nIGZvciB0aGUgZXZlbnQgY2hvc2VuLCBhbmQgZGF0ZSBjaG9zZW5cclxuICAgICAgICAgICAgICAgICRzY29wZS5maWx0ZXJlZFJlcG9ydHMgPSBbXTsgLy9yZXN1bHQgb2YgZmlsdGVyIG9wdGlvbnNcclxuXHJcbiAgICAgICAgICAgICAgICAvL2VhY2ggb3B0aW9uIHRoZSBwb3B1bGF0ZSwgbmVlZCB0byBzaG93IHNlbGVjdGlvbiBpbiAnQ29uZmlybSBTZWxlY3Rpb25zJyBzZWN0aW9uIChkYXRlIHdvcmtzKVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmdlblJlcENoYW5nZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRXZlbnROYW1lID0gJHNjb3BlLmV2ZW50cy5maWx0ZXIoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUuZXZlbnRfaWQgPT0gJHNjb3BlLmdlblN1bW1hcnkuZXZlbnRfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuYW1lcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhYmJyZXZzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5TdGF0ZW1vZGVsLnZhbHVlLCBmdW5jdGlvbiAoc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXMucHVzaChzdGF0ZS5zdGF0ZV9uYW1lKTsgYWJicmV2cy5wdXNoKHN0YXRlLnN0YXRlX2FiYnJldik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5TdGF0ZU5hbWVzID0gbmFtZXMuam9pbignLCcpOyAkc2NvcGUuU3RhdGVBYmJyZXZzID0gYWJicmV2cy5qb2luKCcsJyk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5NZXRyaWNEaXNwbGF5TW9kZWwgPSBbXTsgLy9ob2xkIGFsbCByZXBvcnRNb2RlbHMgZm9yICdEaXNwbGF5IE1ldHJpY3MgU3VtbWFyeSdcclxuICAgICAgICAgICAgICAgIC8vY2xpY2tlZCBEaXNwbGF5IE1ldHJpY3MgU3VtbWFyeSwgc2hvdyBjb250ZW50IGluIG5ldyB0YWJcclxuICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5TWV0cmljU3VtID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBzY29wZXMgbmVlZGVkIGZvciB0aGlzIGFjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTWV0cmljRGlzcGxheU1vZGVsID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5HZW5SZXBFdmVudE1vZGVsID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdyA9IHt9OyAvL21vZGVsIHRvIGhvbGQgdG90YWxzIGZvciB0YWJsZXMgbGFzdCByb3dcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93Lm5vdEFjY3RGb3JFbXBzID0gMDsgJHNjb3BlLnRvdGFsUm93LmN1bVBGaWVsZCA9IDA7ICRzY29wZS50b3RhbFJvdy55ZXNQRmllbGQgPSAwOyAkc2NvcGUudG90YWxSb3cudG9kUEZpZWxkID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LnRvbVBGaWVsZCA9IDA7ICRzY29wZS50b3RhbFJvdy5jdW1QT2ZmaWNlID0gMDsgJHNjb3BlLnRvdGFsUm93Lnllc1BPZmZpY2UgPSAwOyAkc2NvcGUudG90YWxSb3cudG9kUE9mZmljZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy50b21QT2ZmaWNlID0gMDsgJHNjb3BlLnRvdGFsUm93LnRydWNrID0gMDsgJHNjb3BlLnRvdGFsUm93LmJvYXQgPSAwOyAkc2NvcGUudG90YWxSb3cub3RoZXIgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LmdhZ2VWaXNpdHMgPSAwOyAkc2NvcGUudG90YWxSb3cuZ2FnZXNEb3duID0gMDsgJHNjb3BlLnRvdGFsUm93LmRpc0N0b0RhdGUgPSAwOyAkc2NvcGUudG90YWxSb3cuZGlzQ1BsYW5uZWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cuQ2hlY2tNZWFzVG9EYXRlID0gMDsgJHNjb3BlLnRvdGFsUm93LkNoZWNrTWVhc1BsYW5uZWQgPSAwOyAkc2NvcGUudG90YWxSb3cuaW5kTWVhcyA9IDA7ICRzY29wZS50b3RhbFJvdy5yYXRFeHQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cucGVha3NPZlJlYyA9IDA7ICRzY29wZS50b3RhbFJvdy5RV0dhZ2VWaXMgPSAwOyAkc2NvcGUudG90YWxSb3cuY29udFFXR2FnZVZpcyA9IDA7ICRzY29wZS50b3RhbFJvdy5jb250UVdHYWdlRG93biA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy5kaXNRV1NhbXBsZXMgPSAwOyAkc2NvcGUudG90YWxSb3cuc2VkU2FtcGxlcyA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cucmRnUGxhbiA9IDA7ICRzY29wZS50b3RhbFJvdy5yZGdEZXAgPSAwOyAkc2NvcGUudG90YWxSb3cucmRnUmVjID0gMDsgJHNjb3BlLnRvdGFsUm93LnJkZ0xvc3QgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cud2F0ZXJQbGFuID0gMDsgJHNjb3BlLnRvdGFsUm93LndhdGVyRGVwID0gMDsgJHNjb3BlLnRvdGFsUm93LndhdGVyUmVjID0gMDsgJHNjb3BlLnRvdGFsUm93LndhdGVyTG9zdCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy53YXZlUGxhbiA9IDA7ICRzY29wZS50b3RhbFJvdy53YXZlRGVwID0gMDsgJHNjb3BlLnRvdGFsUm93LndhdmVSZWMgPSAwOyAkc2NvcGUudG90YWxSb3cud2F2ZUxvc3QgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cuYmFyb1BsYW4gPSAwOyAkc2NvcGUudG90YWxSb3cuYmFyb0RlcCA9IDA7ICRzY29wZS50b3RhbFJvdy5iYXJvUmVjID0gMDsgJHNjb3BlLnRvdGFsUm93LmJhcm9Mb3N0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93Lm1ldFBsYW4gPSAwOyAkc2NvcGUudG90YWxSb3cubWV0RGVwID0gMDsgJHNjb3BlLnRvdGFsUm93Lm1ldFJlYyA9IDA7ICRzY29wZS50b3RhbFJvdy5tZXRMb3N0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93Lmh3bUZsYWcgPSAwOyAkc2NvcGUudG90YWxSb3cuaHdtQ29sID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHNjb3BlcyBuZWVkZWQgZm9yIHRoaXMgYWN0aW9uXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2dldCBtZXRyaWNzIHN1bW1hcnkgdG8gc2hvdyBpbiBuZXcgdGFiICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFiYnJldnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5TdGF0ZW1vZGVsLnZhbHVlLCBmdW5jdGlvbiAoc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFiYnJldnMucHVzaChzdGF0ZS5zdGF0ZV9hYmJyZXYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFiYnJldlN0cmluZyA9IGFiYnJldnMuam9pbignLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc0RhdGUgPSAkc2NvcGUuZm9ybWF0RGF0ZSgkc2NvcGUuZ2VuU3VtbWFyeS5zdW1fZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbmVlZDogXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vMS4gYWxsIHJlcG9ydHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgUkVQT1JULmdldEZpbHRlcmVkUmVwb3J0cyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudDogJHNjb3BlLkV2ZW50TmFtZS5ldmVudF9pZCwgU3RhdGVzOiBhYmJyZXZTdHJpbmcsIERhdGU6IHRoaXNEYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9mb3IgZWFjaCByZXBvcnQsIGdldCBhbGwgcmVwb3J0cyB3aXRoIHRoYXQgZXZlbnQgYW5kIHN0YXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHJlc3VsdC5sZW5ndGg7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzUlBNb2RlbCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSUE1vZGVsLnJlcG9ydCA9IHJlc3VsdFt4XTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hZGQgdG8gdG90YWxzIGZvciB0b3RhbCByb3dcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cubm90QWNjdEZvckVtcHMgKz0gKHRoaXNSUE1vZGVsLnJlcG9ydC5zd19maWVsZHBlcnNfbm90YWNjdCArIHRoaXNSUE1vZGVsLnJlcG9ydC53cV9maWVsZHBlcnNfbm90YWNjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LmN1bVBGaWVsZCArPSB0aGlzUlBNb2RlbC5yZXBvcnQueWVzdF9maWVsZHBlcnMgKyB0aGlzUlBNb2RlbC5yZXBvcnQudG9kX2ZpZWxkcGVycyArIHRoaXNSUE1vZGVsLnJlcG9ydC50bXdfZmllbGRwZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy55ZXNQRmllbGQgKz0gdGhpc1JQTW9kZWwucmVwb3J0Lnllc3RfZmllbGRwZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy50b2RQRmllbGQgKz0gdGhpc1JQTW9kZWwucmVwb3J0LnRvZF9maWVsZHBlcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LnRvbVBGaWVsZCArPSB0aGlzUlBNb2RlbC5yZXBvcnQudG13X2ZpZWxkcGVycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cuY3VtUE9mZmljZSArPSB0aGlzUlBNb2RlbC5yZXBvcnQueWVzdF9vZmZpY2VwZXJzICsgdGhpc1JQTW9kZWwucmVwb3J0LnRvZF9vZmZpY2VwZXJzICsgdGhpc1JQTW9kZWwucmVwb3J0LnRtd19vZmZpY2VwZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy55ZXNQT2ZmaWNlICs9IHRoaXNSUE1vZGVsLnJlcG9ydC55ZXN0X29mZmljZXBlcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LnRvZFBPZmZpY2UgKz0gdGhpc1JQTW9kZWwucmVwb3J0LnRvZF9vZmZpY2VwZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy50b21QT2ZmaWNlICs9IHRoaXNSUE1vZGVsLnJlcG9ydC50bXdfb2ZmaWNlcGVycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy5nYWdlVmlzaXRzICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5nYWdlX3Zpc2l0OyAkc2NvcGUudG90YWxSb3cuZ2FnZXNEb3duICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5nYWdlX2Rvd247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LmRpc0N0b0RhdGUgKz0gdGhpc1JQTW9kZWwucmVwb3J0LnRvdF9kaXNjaGFyZ2VfbWVhczsgJHNjb3BlLnRvdGFsUm93LmRpc0NQbGFubmVkICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5wbGFuX2Rpc2NoYXJnZV9tZWFzOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cuaW5kTWVhcyArPSB0aGlzUlBNb2RlbC5yZXBvcnQucGxhbl9pbmRpcmVjdF9tZWFzOyAkc2NvcGUudG90YWxSb3cucmF0RXh0ICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5yYXRpbmdfZXh0ZW5zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy5wZWFrc09mUmVjICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5nYWdlX3BlYWtfcmVjb3JkOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cuZGlzUVdTYW1wbGVzICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5xd19kaXNjcl9zYW1wbGVzOyAkc2NvcGUudG90YWxSb3cuc2VkU2FtcGxlcyArPSB0aGlzUlBNb2RlbC5yZXBvcnQuY29sbF9zZWRzYW1wbGVzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cucmRnUGxhbiArPSB0aGlzUlBNb2RlbC5yZXBvcnQucGxhbl9yYXBkZXBsX2dhZ2U7ICRzY29wZS50b3RhbFJvdy5yZGdEZXAgKz0gdGhpc1JQTW9kZWwucmVwb3J0LmRlcF9yYXBkZXBsX2dhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LnJkZ1JlYyArPSB0aGlzUlBNb2RlbC5yZXBvcnQucmVjX3JhcGRlcGxfZ2FnZTsgJHNjb3BlLnRvdGFsUm93LnJkZ0xvc3QgKz0gdGhpc1JQTW9kZWwucmVwb3J0Lmxvc3RfcmFwZGVwbF9nYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy53YXRlclBsYW4gKz0gdGhpc1JQTW9kZWwucmVwb3J0LnBsYW5fd3RybGV2X3NlbnNvcjsgJHNjb3BlLnRvdGFsUm93LndhdGVyRGVwICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5kZXBfd3RybGV2X3NlbnNvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cud2F0ZXJSZWMgKz0gdGhpc1JQTW9kZWwucmVwb3J0LnJlY193dHJsZXZfc2Vuc29yOyAkc2NvcGUudG90YWxSb3cud2F0ZXJMb3N0ICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5sb3N0X3d0cmxldl9zZW5zb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LndhdmVQbGFuICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5wbGFuX3d2X3NlbnM7ICRzY29wZS50b3RhbFJvdy53YXZlRGVwICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5kZXBfd3Zfc2VucztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cud2F2ZVJlYyArPSB0aGlzUlBNb2RlbC5yZXBvcnQucmVjX3d2X3NlbnM7ICRzY29wZS50b3RhbFJvdy53YXZlTG9zdCArPSB0aGlzUlBNb2RlbC5yZXBvcnQubG9zdF93dl9zZW5zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy5iYXJvUGxhbiArPSB0aGlzUlBNb2RlbC5yZXBvcnQucGxhbl9iYXJvbWV0cmljOyAkc2NvcGUudG90YWxSb3cuYmFyb0RlcCArPSB0aGlzUlBNb2RlbC5yZXBvcnQuZGVwX2Jhcm9tZXRyaWM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LmJhcm9SZWMgKz0gdGhpc1JQTW9kZWwucmVwb3J0LnJlY19iYXJvbWV0cmljOyAkc2NvcGUudG90YWxSb3cuYmFyb0xvc3QgKz0gdGhpc1JQTW9kZWwucmVwb3J0Lmxvc3RfYmFyb21ldHJpYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cubWV0UGxhbiArPSB0aGlzUlBNb2RlbC5yZXBvcnQucGxhbl9tZXRlb3JvbG9naWNhbDsgJHNjb3BlLnRvdGFsUm93Lm1ldERlcCArPSB0aGlzUlBNb2RlbC5yZXBvcnQuZGVwX21ldGVvcm9sb2dpY2FsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy5tZXRSZWMgKz0gdGhpc1JQTW9kZWwucmVwb3J0LnJlY19tZXRlb3JvbG9naWNhbDsgJHNjb3BlLnRvdGFsUm93Lm1ldExvc3QgKz0gdGhpc1JQTW9kZWwucmVwb3J0Lmxvc3RfbWV0ZW9yb2xvZ2ljYWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93Lmh3bUZsYWcgKz0gdGhpc1JQTW9kZWwucmVwb3J0Lmh3bV9mbGFnZ2VkOyAkc2NvcGUudG90YWxSb3cuaHdtQ29sID0gdGhpc1JQTW9kZWwucmVwb3J0Lmh3bV9jb2xsZWN0ZWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5NZXRyaWNEaXNwbGF5TW9kZWwucHVzaCh0aGlzUlBNb2RlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgZm9ybG9vcCBmb3IgUmVwb3J0TW9kZWxMaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLzIuIHRoaXMgRXZlbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5HZW5SZXBFdmVudE1vZGVsID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuR2VuUmVwRXZlbnRNb2RlbC5FdmVudCA9ICRzY29wZS5FdmVudE5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuR2VuUmVwRXZlbnRNb2RlbC5FdmVudFR5cGUgPSAkc2NvcGUuZXZlbnRUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKGV0KSB7IHJldHVybiBldC5ldmVudF90eXBlX2lkID09ICRzY29wZS5FdmVudE5hbWUuZXZlbnRfdHlwZV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuR2VuUmVwRXZlbnRNb2RlbC5FdmVudFN0YXQgPSAkc2NvcGUuZXZlbnRTdGF0cy5maWx0ZXIoZnVuY3Rpb24gKGVzKSB7IHJldHVybiBlcy5ldmVudF9zdGF0dXNfaWQgPT0gJHNjb3BlLkV2ZW50TmFtZS5ldmVudF9zdGF0dXNfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8zLiBldmVudCBDb29yZGluYXRvciBpbmZvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuR2VuUmVwRXZlbnRNb2RlbC5Db29yZGluYXRvciA9ICRzY29wZS5tZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT0gJHNjb3BlLkdlblJlcEV2ZW50TW9kZWwuRXZlbnQuZXZlbnRfY29vcmRpbmF0b3I7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkdlblJlcEV2ZW50TW9kZWwuQ29vcmRBZ2VuY3kgPSAkc2NvcGUuYWdlbmNpZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLmFnZW5jeV9pZCA9PSAkc2NvcGUuR2VuUmVwRXZlbnRNb2RlbC5Db29yZGluYXRvci5hZ2VuY3lfaWQ7IH0pWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnTWV0cmljc1N1bW1hcnkuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ2xnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ3JlcC1kaWFsb2cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlcG9ydDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5NZXRyaWNEaXNwbGF5TW9kZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNFdmVudDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5HZW5SZXBFdmVudE1vZGVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVUb3RhbFJvdzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS50b3RhbFJvdztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCAndGhpc1JlcG9ydCcsICd0aGlzRXZlbnQnLCAndGhlVG90YWxSb3cnLCAgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UsIHRoaXNSZXBvcnQsIHRoaXNFdmVudCwgdGhlVG90YWxSb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJlcG9ydCA9IHRoaXNSZXBvcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5FdmVudCA9IHRoaXNFdmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFscyA9IHRoZVRvdGFsUm93O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByaW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnByaW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3RoaW5nICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfS8vZW5kIGlmIHZhbGlkID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2NsaWNrZWQgRGlzcGxheSBDb250YWN0cyBTdW1tYXJ5LCBzaG93IGNvbnRlbnQgaW4gbmV3IHRhYlxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlDb250YWN0c1N1bSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2dldCBtZXRyaWNzIHN1bW1hcnkgdG8gc2hvdyBpbiBuZXcgdGFiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29udGFpbnMgdGhlIHN0YXRlcyBjaG9zZW4gICAgICRzY29wZS5TdGF0ZW1vZGVsLnZhbHVlOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ldmVudCBjaG9zZW4gICAgJHNjb3BlLkV2ZW50TmFtZVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFiYnJldnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5TdGF0ZW1vZGVsLnZhbHVlLCBmdW5jdGlvbiAoc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFiYnJldnMucHVzaChzdGF0ZS5zdGF0ZV9hYmJyZXYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFiYnJldlN0cmluZyA9IGFiYnJldnMuam9pbignLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc0RhdGUgPSAkc2NvcGUuZm9ybWF0RGF0ZSgkc2NvcGUuZ2VuU3VtbWFyeS5zdW1fZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXBvcnRNb2RlbCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2FsbCBmaWx0ZXJlZCByZXBvcnRzIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgUkVQT1JULmdldFJlcG9ydHdpdGhDb250YWN0cyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudDogJHNjb3BlLkV2ZW50TmFtZS5ldmVudF9pZCwgU3RhdGVzOiBhYmJyZXZTdHJpbmcsIERhdGU6IHRoaXNEYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9sb29wIHRocm91Z2ggcmVwb3J0cyBhbmQgZ2V0IGVhY2gncyBjb250YWN0c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCByZXN1bHQubGVuZ3RoOyB4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVwID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwLnJlcElEID0gcmVzdWx0W3hdLnJlcG9ydGluZ19tZXRyaWNzX2lkOyByZXAuU3RhdGUgPSByZXN1bHRbeF0uc3RhdGU7IHJlcC5yZXBvcnRfZGF0ZSA9IHJlc3VsdFt4XS5yZXBvcnRfZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3VibWl0dGVyID0gJHNjb3BlLm1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1lbWJlcl9pZCA9PSByZXN1bHRbeF0ubWVtYmVyX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3VibWl0dGVyQWdlbmN5ID0gJHNjb3BlLmFnZW5jaWVzLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gc3VibWl0dGVyLmFnZW5jeV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yi5mbmFtZSA9IHN1Ym1pdHRlci5mbmFtZTsgc3ViLmxuYW1lID0gc3VibWl0dGVyLmxuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yi5lbWFpbCA9IHN1Ym1pdHRlci5lbWFpbDsgc3ViLnBob25lID0gc3VibWl0dGVyLnBob25lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yi5hZ2VuY3luYW1lID0gc3VibWl0dGVyQWdlbmN5LmFnZW5jeV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yi5hZ2VuY3lhZGQgPSBzdWJtaXR0ZXJBZ2VuY3kuY2l0eSArIFwiIFwiICsgc3VibWl0dGVyQWdlbmN5LnN0YXRlICsgXCIgXCIgKyBzdWJtaXR0ZXJBZ2VuY3kuemlwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcC5zdWJtaXR0ZXIgPSBzdWI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwLmRlcEMgPSByZXN1bHRbeF0uUmVwb3J0Q29udGFjdHMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LnR5cGUgPT0gXCJEZXBsb3llZCBTdGFmZlwiOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXAuZ2VuQyA9IHJlc3VsdFt4XS5SZXBvcnRDb250YWN0cy5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgudHlwZSA9PSBcIkdlbmVyYWxcIjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwLmlubEMgPSByZXN1bHRbeF0uUmVwb3J0Q29udGFjdHMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LnR5cGUgPT0gXCJJbmxhbmQgRmxvb2RcIjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwLmNvYXN0QyA9IHJlc3VsdFt4XS5SZXBvcnRDb250YWN0cy5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgudHlwZSA9PSBcIkNvYXN0YWwgRmxvb2RcIjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwLndhdGVyQyA9IHJlc3VsdFt4XS5SZXBvcnRDb250YWN0cy5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgudHlwZSA9PSBcIldhdGVyIFF1YWxpdHlcIjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlcG9ydE1vZGVsLnB1c2gocmVwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gLy9lbmQgZm9yIGxvb3AgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHNob3dNb2RhbCgpOyB9LCAzMDAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBzZW5kIGl0IGFsbCB0byB0aGUgbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaG93TW9kYWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnQ29udGFjdE1ldHJpY3NTdW1tYXJ5Lmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnbGcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ3JlcC1kaWFsb2cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVzZVJlcG9ydHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLnJlcG9ydE1vZGVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNFdmVudDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5HZW5SZXBFdmVudE1vZGVsID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkdlblJlcEV2ZW50TW9kZWwuRXZlbnQgPSAkc2NvcGUuRXZlbnROYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5HZW5SZXBFdmVudE1vZGVsLkV2ZW50VHlwZSA9ICRzY29wZS5ldmVudFR5cGVzLmZpbHRlcihmdW5jdGlvbiAoZXQpIHsgcmV0dXJuIGV0LmV2ZW50X3R5cGVfaWQgPT0gJHNjb3BlLkV2ZW50TmFtZS5ldmVudF90eXBlX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuR2VuUmVwRXZlbnRNb2RlbC5FdmVudFN0YXQgPSAkc2NvcGUuZXZlbnRTdGF0cy5maWx0ZXIoZnVuY3Rpb24gKGVzKSB7IHJldHVybiBlcy5ldmVudF9zdGF0dXNfaWQgPT0gJHNjb3BlLkV2ZW50TmFtZS5ldmVudF9zdGF0dXNfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vMy4gZXZlbnQgQ29vcmRpbmF0b3IgaW5mb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5HZW5SZXBFdmVudE1vZGVsLkNvb3JkaW5hdG9yID0gJHNjb3BlLm1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1lbWJlcl9pZCA9PSAkc2NvcGUuRXZlbnROYW1lLmV2ZW50X2Nvb3JkaW5hdG9yOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuR2VuUmVwRXZlbnRNb2RlbC5Db29yZEFnZW5jeSA9ICRzY29wZS5hZ2VuY2llcy5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuYWdlbmN5X2lkID09ICRzY29wZS5HZW5SZXBFdmVudE1vZGVsLkNvb3JkaW5hdG9yLmFnZW5jeV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5HZW5SZXBFdmVudE1vZGVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckaHR0cCcsICckdWliTW9kYWxJbnN0YW5jZScsICd0aGVzZVJlcG9ydHMnLCAndGhpc0V2ZW50JywgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsICR1aWJNb2RhbEluc3RhbmNlLCB0aGVzZVJlcG9ydHMsIHRoaXNFdmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJlcG9ydHMgPSB0aGVzZVJlcG9ydHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRXZlbnQgPSB0aGlzRXZlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByaW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5wcmludCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3RoaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OyAvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IC8vZW5kIGlmIHZhbGlkXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vY2xpY2tlZCBnZW5lcmF0ZSBjc3ZcclxuICAgICAgICAgICAgICAgICRzY29wZS5nZXRDU1ZmaWxlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZ2V0IHJlcG9ydHMgYW5kIGdpdmUgYSBjc3YgZmlsZSBiYWNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICd0ZXh0L2Nzdic7XHJcbiAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSRVBPUlQuZ2V0UmVwb3J0c0NTVih7IEV2ZW50OiAkc2NvcGUuZ2VuU3VtbWFyeS5ldmVudF9pZCwgU3RhdGVzOiAkc2NvcGUuU3RhdGVBYmJyZXZzLCBEYXRlOiAkc2NvcGUuZ2VuU3VtbWFyeS5zdW1fZGF0ZSB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbmNob3IgPSBhbmd1bGFyLmVsZW1lbnQoJzxhLz4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqb2luZWRSZXNwb25zZSA9IHJlc3VsdC5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGUgPSBuZXcgQmxvYihbam9pbmVkUmVzcG9uc2VdLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9jc3YnIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVVUkwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yLmhyZWYgPSBmaWxlVVJMO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yLmRvd25sb2FkID0gJ3JlcG9ydC5jc3YnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yLmNsaWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vRmlsZS5zYXZlQXMoYmxvYiwgXCJyZXBvcnQuY3N2XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTsvLyNlbmRyZWdpb24gR2VuZXJhdGUgUmVwb3J0IHRhYlxyXG4gICAgICAgICAgICB9XHJcbiAgICB9XSk7XHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU1ROQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQ29udHJvbGxlcnMnKTtcclxuLy8jcmVnaW9uIFJlcG9ydGluZyBDb250cm9sbGVyXHJcbiAgICBTVE5Db250cm9sbGVycy5jb250cm9sbGVyKCdyZXBvcnRpbmdDdHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckbG9jYXRpb24nLCAnJGh0dHAnLCAnJHVpYk1vZGFsJywgJ21lbWJlclJlcG9ydHMnLCAnYWxsRXZlbnRzJywgJ2FsbFN0YXRlcycsICdhbGxSZXBvcnRzJywgJ2FsbEV2ZW50VHlwZXMnLCAnYWxsRXZlbnRTdGF0dXMnLCAnYWxsQWdlbmNpZXMnLCAnU0VSVkVSX1VSTCcsICdSRVBPUlQnLCAnTUVNQkVSJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkY29va2llcywgJGxvY2F0aW9uLCAkaHR0cCwgJHVpYk1vZGFsLCBtZW1iZXJSZXBvcnRzLCBhbGxFdmVudHMsIGFsbFN0YXRlcywgYWxsUmVwb3J0cywgYWxsRXZlbnRUeXBlcywgYWxsRXZlbnRTdGF0dXMsIGFsbEFnZW5jaWVzLCBTRVJWRVJfVVJMLCBSRVBPUlQsIE1FTUJFUikge1xyXG4gICAgICAgICAgICBpZiAoJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSB1bmRlZmluZWQgfHwgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYXV0aCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS50aGlzUGFnZSA9IFwiUmVwb3J0aW5nXCI7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmFjdGl2ZU1lbnUgPSBcInJlcG9ydFwiOyBcclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBjaGFuZ2luZyB0YWJzIGhhbmRsZXIgLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3RhcnQnLCBmdW5jdGlvbiAoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZm9ybUlzUG9wdWxhdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChmcm9tU3RhdGUudXJsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJy9TdWJtaXRSZXBvcnQnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5mdWxsUmVwb3J0Rm9ybS5zdWJtaXQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1Jc1BvcHVsYXRlZCA9ICRzY29wZS5mdWxsUmVwb3J0Rm9ybS5zdWJtaXQuJGRpcnR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1Jc1BvcHVsYXRlZCA9ICRzY29wZS5mdWxsUmVwb3J0Rm9ybS5zdWJtaXQuZXZlbnRfaWQuJHZpZXdWYWx1ZSAhPT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGZvcm1Jc1BvcHVsYXRlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoZm9ybUlzUG9wdWxhdGVkKSB7IC8vaXMgZGlydHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3RvU3RhdGUubmFtZTogJyArIHRvU3RhdGUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdmcm9tU3RhdGUubmFtZTogJyArIGZyb21TdGF0ZS5uYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb25maXJtKFwiQXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIGxlYXZlIHRoZSBTdWJtaXQgUmVwb3J0IFRhYj8gQW55IHVuc2F2ZWQgaW5mb3JtYXRpb24gd2lsbCBiZSBsb3N0LlwiKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2dvIHRvOiAnICsgdG9TdGF0ZS5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdzdGF5IGF0IHN0YXRlOiAnICsgZnJvbVN0YXRlLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUuJGFwcGx5KCk7Ly8gbG9hZGluZy4uLy8kKFwiLnBhZ2UtbG9hZGluZ1wiKS5hZGRDbGFzcyhcImhpZGRlblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2V2ZW50LnN0b3BQcm9wYWdhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIGNoYW5naW5nIHRhYnMgaGFuZGxlciAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIERhdGVwaWNrZXJcclxuICAgICAgICAgICAgICAgICRzY29wZS5kYXRlcGlja3JzID0ge307XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm9wZW4gPSBmdW5jdGlvbiAoJGV2ZW50LCB3aGljaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGVwaWNrcnNbd2hpY2hdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICAgICAgICAgICAgICAvL2Zvcm1hdCB0aGUgZGF0ZSBtbS9kZC95eXl5XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZm9ybWF0RGF0ZSA9IGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnREdCA9IG5ldyBEYXRlKGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtbSA9IGN1cnJlbnREdC5nZXRNb250aCgpICsgMTtcclxuICAgICAgICAgICAgICAgICAgICBtbSA9IChtbSA8IDEwKSA/ICcwJyArIG1tIDogbW07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRkID0gY3VycmVudER0LmdldERhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgeXl5eSA9IGN1cnJlbnREdC5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRlID0gbW0gKyAnLycgKyBkZCArICcvJyArIHl5eXk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGU7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBnbG9iYWwgdmFyc1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlcnZlclVSTCA9IFNFUlZFUl9VUkw7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZnVsbFJlcG9ydEZvcm0gPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5EZXBsb3lTdGFmZiA9IHt9OyAkc2NvcGUuR2VuU3RhZmYgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5JbmxhbmRTdGFmZiA9IHt9OyAkc2NvcGUuQ29hc3RTdGFmZiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLldhdGVyU3RhZmYgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kaXNhYmxlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubmVlZFRvQ29tcGxldGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5tZW1iZXJJbmNvbXBsZXRlcyA9IG1lbWJlclJlcG9ydHMuZmlsdGVyKGZ1bmN0aW9uIChpcikgeyByZXR1cm4gaXIuY29tcGxldGUgPT09IDA7IH0pO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmV2ZW50cyA9IGFsbEV2ZW50cztcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZXMgPSBhbGxTdGF0ZXM7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVwb3J0cyA9IGFsbFJlcG9ydHM7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgTUVNQkVSLnF1ZXJ5KHsgaWQ6ICRjb29raWVzLmdldCgnbUlEJykgfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5NZW1iZXJMb2dnZWRJbiA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtZW1iZXJBZ2VuY3kgPSBhbGxBZ2VuY2llcy5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuYWdlbmN5X2lkID09ICRzY29wZS5NZW1iZXJMb2dnZWRJbi5hZ2VuY3lfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5NZW1iZXJMb2dnZWRJbi5hZ2VuY3lfbmFtZSA9IG1lbWJlckFnZW5jeS5hZ2VuY3lfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTWVtYmVyTG9nZ2VkSW4uYWdlbmN5X2FkZHJlc3MgPSBtZW1iZXJBZ2VuY3kuYWRkcmVzcyArIFwiLCBcIiArIG1lbWJlckFnZW5jeS5jaXR5ICsgXCIgXCIgKyBtZW1iZXJBZ2VuY3kuc3RhdGUgKyBcIiBcIiArIG1lbWJlckFnZW5jeS56aXA7XHJcbiAgICAgICAgICAgICAgICB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgIE1FTUJFUi5nZXRBbGwoKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5tZW1iZXJzID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWdlbmNpZXMgPSBhbGxBZ2VuY2llcztcclxuICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFR5cGVzID0gYWxsRXZlbnRUeXBlcztcclxuICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFN0YXRzID0gYWxsRXZlbnRTdGF0dXM7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIGdsb2JhbCB2YXJzXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIEdlbmVyYXRlIFJlcG9ydCB0YWJcclxuICAgICAgICAgICAgICAgICRzY29wZS5TdGF0ZW1vZGVsID0ge307Ly9iaW5kaW5nIHRvIHRoZSBzdGF0ZSBtdWx0aS1zZWxlY3RcclxuICAgICAgICAgICAgICAgICRzY29wZS5nZW5TdW1tYXJ5ID0ge307Ly9iaW5kaW5nIGZvciB0aGUgZXZlbnQgY2hvc2VuLCBhbmQgZGF0ZSBjaG9zZW5cclxuICAgICAgICAgICAgICAgICRzY29wZS5maWx0ZXJlZFJlcG9ydHMgPSBbXTsgLy9yZXN1bHQgb2YgZmlsdGVyIG9wdGlvbnNcclxuXHJcbiAgICAgICAgICAgICAgICAvL2VhY2ggb3B0aW9uIHRoZSBwb3B1bGF0ZSwgbmVlZCB0byBzaG93IHNlbGVjdGlvbiBpbiAnQ29uZmlybSBTZWxlY3Rpb25zJyBzZWN0aW9uIChkYXRlIHdvcmtzKVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmdlblJlcENoYW5nZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRXZlbnROYW1lID0gJHNjb3BlLmV2ZW50cy5maWx0ZXIoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUuZXZlbnRfaWQgPT0gJHNjb3BlLmdlblN1bW1hcnkuZXZlbnRfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBuYW1lcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhYmJyZXZzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5TdGF0ZW1vZGVsLnZhbHVlLCBmdW5jdGlvbiAoc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZXMucHVzaChzdGF0ZS5zdGF0ZV9uYW1lKTsgYWJicmV2cy5wdXNoKHN0YXRlLnN0YXRlX2FiYnJldik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5TdGF0ZU5hbWVzID0gbmFtZXMuam9pbignLCcpOyAkc2NvcGUuU3RhdGVBYmJyZXZzID0gYWJicmV2cy5qb2luKCcsJyk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5NZXRyaWNEaXNwbGF5TW9kZWwgPSBbXTsgLy9ob2xkIGFsbCByZXBvcnRNb2RlbHMgZm9yICdEaXNwbGF5IE1ldHJpY3MgU3VtbWFyeSdcclxuICAgICAgICAgICAgICAgIC8vY2xpY2tlZCBEaXNwbGF5IE1ldHJpY3MgU3VtbWFyeSwgc2hvdyBjb250ZW50IGluIG5ldyB0YWJcclxuICAgICAgICAgICAgICAgICRzY29wZS5kaXNwbGF5TWV0cmljU3VtID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBzY29wZXMgbmVlZGVkIGZvciB0aGlzIGFjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTWV0cmljRGlzcGxheU1vZGVsID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5HZW5SZXBFdmVudE1vZGVsID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdyA9IHt9OyAvL21vZGVsIHRvIGhvbGQgdG90YWxzIGZvciB0YWJsZXMgbGFzdCByb3dcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93Lm5vdEFjY3RGb3JFbXBzID0gMDsgJHNjb3BlLnRvdGFsUm93LmN1bVBGaWVsZCA9IDA7ICRzY29wZS50b3RhbFJvdy55ZXNQRmllbGQgPSAwOyAkc2NvcGUudG90YWxSb3cudG9kUEZpZWxkID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LnRvbVBGaWVsZCA9IDA7ICRzY29wZS50b3RhbFJvdy5jdW1QT2ZmaWNlID0gMDsgJHNjb3BlLnRvdGFsUm93Lnllc1BPZmZpY2UgPSAwOyAkc2NvcGUudG90YWxSb3cudG9kUE9mZmljZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy50b21QT2ZmaWNlID0gMDsgJHNjb3BlLnRvdGFsUm93LnRydWNrID0gMDsgJHNjb3BlLnRvdGFsUm93LmJvYXQgPSAwOyAkc2NvcGUudG90YWxSb3cub3RoZXIgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LmdhZ2VWaXNpdHMgPSAwOyAkc2NvcGUudG90YWxSb3cuZ2FnZXNEb3duID0gMDsgJHNjb3BlLnRvdGFsUm93LmRpc0N0b0RhdGUgPSAwOyAkc2NvcGUudG90YWxSb3cuZGlzQ1BsYW5uZWQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cuQ2hlY2tNZWFzVG9EYXRlID0gMDsgJHNjb3BlLnRvdGFsUm93LkNoZWNrTWVhc1BsYW5uZWQgPSAwOyAkc2NvcGUudG90YWxSb3cuaW5kTWVhcyA9IDA7ICRzY29wZS50b3RhbFJvdy5yYXRFeHQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cucGVha3NPZlJlYyA9IDA7ICRzY29wZS50b3RhbFJvdy5RV0dhZ2VWaXMgPSAwOyAkc2NvcGUudG90YWxSb3cuY29udFFXR2FnZVZpcyA9IDA7ICRzY29wZS50b3RhbFJvdy5jb250UVdHYWdlRG93biA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy5kaXNRV1NhbXBsZXMgPSAwOyAkc2NvcGUudG90YWxSb3cuc2VkU2FtcGxlcyA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cucmRnUGxhbiA9IDA7ICRzY29wZS50b3RhbFJvdy5yZGdEZXAgPSAwOyAkc2NvcGUudG90YWxSb3cucmRnUmVjID0gMDsgJHNjb3BlLnRvdGFsUm93LnJkZ0xvc3QgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cud2F0ZXJQbGFuID0gMDsgJHNjb3BlLnRvdGFsUm93LndhdGVyRGVwID0gMDsgJHNjb3BlLnRvdGFsUm93LndhdGVyUmVjID0gMDsgJHNjb3BlLnRvdGFsUm93LndhdGVyTG9zdCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy53YXZlUGxhbiA9IDA7ICRzY29wZS50b3RhbFJvdy53YXZlRGVwID0gMDsgJHNjb3BlLnRvdGFsUm93LndhdmVSZWMgPSAwOyAkc2NvcGUudG90YWxSb3cud2F2ZUxvc3QgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cuYmFyb1BsYW4gPSAwOyAkc2NvcGUudG90YWxSb3cuYmFyb0RlcCA9IDA7ICRzY29wZS50b3RhbFJvdy5iYXJvUmVjID0gMDsgJHNjb3BlLnRvdGFsUm93LmJhcm9Mb3N0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93Lm1ldFBsYW4gPSAwOyAkc2NvcGUudG90YWxSb3cubWV0RGVwID0gMDsgJHNjb3BlLnRvdGFsUm93Lm1ldFJlYyA9IDA7ICRzY29wZS50b3RhbFJvdy5tZXRMb3N0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93Lmh3bUZsYWcgPSAwOyAkc2NvcGUudG90YWxSb3cuaHdtQ29sID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHNjb3BlcyBuZWVkZWQgZm9yIHRoaXMgYWN0aW9uXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2dldCBtZXRyaWNzIHN1bW1hcnkgdG8gc2hvdyBpbiBuZXcgdGFiICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFiYnJldnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5TdGF0ZW1vZGVsLnZhbHVlLCBmdW5jdGlvbiAoc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFiYnJldnMucHVzaChzdGF0ZS5zdGF0ZV9hYmJyZXYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFiYnJldlN0cmluZyA9IGFiYnJldnMuam9pbignLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc0RhdGUgPSAkc2NvcGUuZm9ybWF0RGF0ZSgkc2NvcGUuZ2VuU3VtbWFyeS5zdW1fZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbmVlZDogXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vMS4gYWxsIHJlcG9ydHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgUkVQT1JULmdldEZpbHRlcmVkUmVwb3J0cyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudDogJHNjb3BlLkV2ZW50TmFtZS5ldmVudF9pZCwgU3RhdGVzOiBhYmJyZXZTdHJpbmcsIERhdGU6IHRoaXNEYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9mb3IgZWFjaCByZXBvcnQsIGdldCBhbGwgcmVwb3J0cyB3aXRoIHRoYXQgZXZlbnQgYW5kIHN0YXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHJlc3VsdC5sZW5ndGg7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzUlBNb2RlbCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNSUE1vZGVsLnJlcG9ydCA9IHJlc3VsdFt4XTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hZGQgdG8gdG90YWxzIGZvciB0b3RhbCByb3dcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cubm90QWNjdEZvckVtcHMgKz0gKHRoaXNSUE1vZGVsLnJlcG9ydC5zd19maWVsZHBlcnNfbm90YWNjdCArIHRoaXNSUE1vZGVsLnJlcG9ydC53cV9maWVsZHBlcnNfbm90YWNjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LmN1bVBGaWVsZCArPSB0aGlzUlBNb2RlbC5yZXBvcnQueWVzdF9maWVsZHBlcnMgKyB0aGlzUlBNb2RlbC5yZXBvcnQudG9kX2ZpZWxkcGVycyArIHRoaXNSUE1vZGVsLnJlcG9ydC50bXdfZmllbGRwZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy55ZXNQRmllbGQgKz0gdGhpc1JQTW9kZWwucmVwb3J0Lnllc3RfZmllbGRwZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy50b2RQRmllbGQgKz0gdGhpc1JQTW9kZWwucmVwb3J0LnRvZF9maWVsZHBlcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LnRvbVBGaWVsZCArPSB0aGlzUlBNb2RlbC5yZXBvcnQudG13X2ZpZWxkcGVycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cuY3VtUE9mZmljZSArPSB0aGlzUlBNb2RlbC5yZXBvcnQueWVzdF9vZmZpY2VwZXJzICsgdGhpc1JQTW9kZWwucmVwb3J0LnRvZF9vZmZpY2VwZXJzICsgdGhpc1JQTW9kZWwucmVwb3J0LnRtd19vZmZpY2VwZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy55ZXNQT2ZmaWNlICs9IHRoaXNSUE1vZGVsLnJlcG9ydC55ZXN0X29mZmljZXBlcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LnRvZFBPZmZpY2UgKz0gdGhpc1JQTW9kZWwucmVwb3J0LnRvZF9vZmZpY2VwZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy50b21QT2ZmaWNlICs9IHRoaXNSUE1vZGVsLnJlcG9ydC50bXdfb2ZmaWNlcGVycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy5nYWdlVmlzaXRzICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5nYWdlX3Zpc2l0OyAkc2NvcGUudG90YWxSb3cuZ2FnZXNEb3duICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5nYWdlX2Rvd247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LmRpc0N0b0RhdGUgKz0gdGhpc1JQTW9kZWwucmVwb3J0LnRvdF9kaXNjaGFyZ2VfbWVhczsgJHNjb3BlLnRvdGFsUm93LmRpc0NQbGFubmVkICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5wbGFuX2Rpc2NoYXJnZV9tZWFzOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cuaW5kTWVhcyArPSB0aGlzUlBNb2RlbC5yZXBvcnQucGxhbl9pbmRpcmVjdF9tZWFzOyAkc2NvcGUudG90YWxSb3cucmF0RXh0ICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5yYXRpbmdfZXh0ZW5zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy5wZWFrc09mUmVjICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5nYWdlX3BlYWtfcmVjb3JkOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cuZGlzUVdTYW1wbGVzICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5xd19kaXNjcl9zYW1wbGVzOyAkc2NvcGUudG90YWxSb3cuc2VkU2FtcGxlcyArPSB0aGlzUlBNb2RlbC5yZXBvcnQuY29sbF9zZWRzYW1wbGVzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cucmRnUGxhbiArPSB0aGlzUlBNb2RlbC5yZXBvcnQucGxhbl9yYXBkZXBsX2dhZ2U7ICRzY29wZS50b3RhbFJvdy5yZGdEZXAgKz0gdGhpc1JQTW9kZWwucmVwb3J0LmRlcF9yYXBkZXBsX2dhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LnJkZ1JlYyArPSB0aGlzUlBNb2RlbC5yZXBvcnQucmVjX3JhcGRlcGxfZ2FnZTsgJHNjb3BlLnRvdGFsUm93LnJkZ0xvc3QgKz0gdGhpc1JQTW9kZWwucmVwb3J0Lmxvc3RfcmFwZGVwbF9nYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy53YXRlclBsYW4gKz0gdGhpc1JQTW9kZWwucmVwb3J0LnBsYW5fd3RybGV2X3NlbnNvcjsgJHNjb3BlLnRvdGFsUm93LndhdGVyRGVwICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5kZXBfd3RybGV2X3NlbnNvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cud2F0ZXJSZWMgKz0gdGhpc1JQTW9kZWwucmVwb3J0LnJlY193dHJsZXZfc2Vuc29yOyAkc2NvcGUudG90YWxSb3cud2F0ZXJMb3N0ICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5sb3N0X3d0cmxldl9zZW5zb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LndhdmVQbGFuICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5wbGFuX3d2X3NlbnM7ICRzY29wZS50b3RhbFJvdy53YXZlRGVwICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5kZXBfd3Zfc2VucztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cud2F2ZVJlYyArPSB0aGlzUlBNb2RlbC5yZXBvcnQucmVjX3d2X3NlbnM7ICRzY29wZS50b3RhbFJvdy53YXZlTG9zdCArPSB0aGlzUlBNb2RlbC5yZXBvcnQubG9zdF93dl9zZW5zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy5iYXJvUGxhbiArPSB0aGlzUlBNb2RlbC5yZXBvcnQucGxhbl9iYXJvbWV0cmljOyAkc2NvcGUudG90YWxSb3cuYmFyb0RlcCArPSB0aGlzUlBNb2RlbC5yZXBvcnQuZGVwX2Jhcm9tZXRyaWM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LmJhcm9SZWMgKz0gdGhpc1JQTW9kZWwucmVwb3J0LnJlY19iYXJvbWV0cmljOyAkc2NvcGUudG90YWxSb3cuYmFyb0xvc3QgKz0gdGhpc1JQTW9kZWwucmVwb3J0Lmxvc3RfYmFyb21ldHJpYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cubWV0UGxhbiArPSB0aGlzUlBNb2RlbC5yZXBvcnQucGxhbl9tZXRlb3JvbG9naWNhbDsgJHNjb3BlLnRvdGFsUm93Lm1ldERlcCArPSB0aGlzUlBNb2RlbC5yZXBvcnQuZGVwX21ldGVvcm9sb2dpY2FsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy5tZXRSZWMgKz0gdGhpc1JQTW9kZWwucmVwb3J0LnJlY19tZXRlb3JvbG9naWNhbDsgJHNjb3BlLnRvdGFsUm93Lm1ldExvc3QgKz0gdGhpc1JQTW9kZWwucmVwb3J0Lmxvc3RfbWV0ZW9yb2xvZ2ljYWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93Lmh3bUZsYWcgKz0gdGhpc1JQTW9kZWwucmVwb3J0Lmh3bV9mbGFnZ2VkOyAkc2NvcGUudG90YWxSb3cuaHdtQ29sID0gdGhpc1JQTW9kZWwucmVwb3J0Lmh3bV9jb2xsZWN0ZWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5NZXRyaWNEaXNwbGF5TW9kZWwucHVzaCh0aGlzUlBNb2RlbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgZm9ybG9vcCBmb3IgUmVwb3J0TW9kZWxMaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLzIuIHRoaXMgRXZlbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5HZW5SZXBFdmVudE1vZGVsID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuR2VuUmVwRXZlbnRNb2RlbC5FdmVudCA9ICRzY29wZS5FdmVudE5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuR2VuUmVwRXZlbnRNb2RlbC5FdmVudFR5cGUgPSAkc2NvcGUuZXZlbnRUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKGV0KSB7IHJldHVybiBldC5ldmVudF90eXBlX2lkID09ICRzY29wZS5FdmVudE5hbWUuZXZlbnRfdHlwZV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuR2VuUmVwRXZlbnRNb2RlbC5FdmVudFN0YXQgPSAkc2NvcGUuZXZlbnRTdGF0cy5maWx0ZXIoZnVuY3Rpb24gKGVzKSB7IHJldHVybiBlcy5ldmVudF9zdGF0dXNfaWQgPT0gJHNjb3BlLkV2ZW50TmFtZS5ldmVudF9zdGF0dXNfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8zLiBldmVudCBDb29yZGluYXRvciBpbmZvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuR2VuUmVwRXZlbnRNb2RlbC5Db29yZGluYXRvciA9ICRzY29wZS5tZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT0gJHNjb3BlLkdlblJlcEV2ZW50TW9kZWwuRXZlbnQuZXZlbnRfY29vcmRpbmF0b3I7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkdlblJlcEV2ZW50TW9kZWwuQ29vcmRBZ2VuY3kgPSAkc2NvcGUuYWdlbmNpZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLmFnZW5jeV9pZCA9PSAkc2NvcGUuR2VuUmVwRXZlbnRNb2RlbC5Db29yZGluYXRvci5hZ2VuY3lfaWQ7IH0pWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnTWV0cmljc1N1bW1hcnkuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ2xnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ3JlcC1kaWFsb2cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JlcG9ydDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5NZXRyaWNEaXNwbGF5TW9kZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNFdmVudDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5HZW5SZXBFdmVudE1vZGVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVUb3RhbFJvdzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS50b3RhbFJvdztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCAndGhpc1JlcG9ydCcsICd0aGlzRXZlbnQnLCAndGhlVG90YWxSb3cnLCAgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UsIHRoaXNSZXBvcnQsIHRoaXNFdmVudCwgdGhlVG90YWxSb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJlcG9ydCA9IHRoaXNSZXBvcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5FdmVudCA9IHRoaXNFdmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFscyA9IHRoZVRvdGFsUm93O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByaW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnByaW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3RoaW5nICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfS8vZW5kIGlmIHZhbGlkID0gdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2NsaWNrZWQgRGlzcGxheSBDb250YWN0cyBTdW1tYXJ5LCBzaG93IGNvbnRlbnQgaW4gbmV3IHRhYlxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlDb250YWN0c1N1bSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2dldCBtZXRyaWNzIHN1bW1hcnkgdG8gc2hvdyBpbiBuZXcgdGFiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29udGFpbnMgdGhlIHN0YXRlcyBjaG9zZW4gICAgICRzY29wZS5TdGF0ZW1vZGVsLnZhbHVlOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ldmVudCBjaG9zZW4gICAgJHNjb3BlLkV2ZW50TmFtZVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFiYnJldnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5TdGF0ZW1vZGVsLnZhbHVlLCBmdW5jdGlvbiAoc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFiYnJldnMucHVzaChzdGF0ZS5zdGF0ZV9hYmJyZXYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFiYnJldlN0cmluZyA9IGFiYnJldnMuam9pbignLCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc0RhdGUgPSAkc2NvcGUuZm9ybWF0RGF0ZSgkc2NvcGUuZ2VuU3VtbWFyeS5zdW1fZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXBvcnRNb2RlbCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2FsbCBmaWx0ZXJlZCByZXBvcnRzIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgUkVQT1JULmdldFJlcG9ydHdpdGhDb250YWN0cyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudDogJHNjb3BlLkV2ZW50TmFtZS5ldmVudF9pZCwgU3RhdGVzOiBhYmJyZXZTdHJpbmcsIERhdGU6IHRoaXNEYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9sb29wIHRocm91Z2ggcmVwb3J0cyBhbmQgZ2V0IGVhY2gncyBjb250YWN0c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCByZXN1bHQubGVuZ3RoOyB4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVwID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwLnJlcElEID0gcmVzdWx0W3hdLnJlcG9ydGluZ19tZXRyaWNzX2lkOyByZXAuU3RhdGUgPSByZXN1bHRbeF0uc3RhdGU7IHJlcC5yZXBvcnRfZGF0ZSA9IHJlc3VsdFt4XS5yZXBvcnRfZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3VibWl0dGVyID0gJHNjb3BlLm1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1lbWJlcl9pZCA9PSByZXN1bHRbeF0ubWVtYmVyX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3VibWl0dGVyQWdlbmN5ID0gJHNjb3BlLmFnZW5jaWVzLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gc3VibWl0dGVyLmFnZW5jeV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN1YiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yi5mbmFtZSA9IHN1Ym1pdHRlci5mbmFtZTsgc3ViLmxuYW1lID0gc3VibWl0dGVyLmxuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yi5lbWFpbCA9IHN1Ym1pdHRlci5lbWFpbDsgc3ViLnBob25lID0gc3VibWl0dGVyLnBob25lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yi5hZ2VuY3luYW1lID0gc3VibWl0dGVyQWdlbmN5LmFnZW5jeV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN1Yi5hZ2VuY3lhZGQgPSBzdWJtaXR0ZXJBZ2VuY3kuY2l0eSArIFwiIFwiICsgc3VibWl0dGVyQWdlbmN5LnN0YXRlICsgXCIgXCIgKyBzdWJtaXR0ZXJBZ2VuY3kuemlwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcC5zdWJtaXR0ZXIgPSBzdWI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwLmRlcEMgPSByZXN1bHRbeF0uUmVwb3J0Q29udGFjdHMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LnR5cGUgPT0gXCJEZXBsb3llZCBTdGFmZlwiOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXAuZ2VuQyA9IHJlc3VsdFt4XS5SZXBvcnRDb250YWN0cy5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgudHlwZSA9PSBcIkdlbmVyYWxcIjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwLmlubEMgPSByZXN1bHRbeF0uUmVwb3J0Q29udGFjdHMuZmlsdGVyKGZ1bmN0aW9uICh4KSB7IHJldHVybiB4LnR5cGUgPT0gXCJJbmxhbmQgRmxvb2RcIjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwLmNvYXN0QyA9IHJlc3VsdFt4XS5SZXBvcnRDb250YWN0cy5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgudHlwZSA9PSBcIkNvYXN0YWwgRmxvb2RcIjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwLndhdGVyQyA9IHJlc3VsdFt4XS5SZXBvcnRDb250YWN0cy5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgudHlwZSA9PSBcIldhdGVyIFF1YWxpdHlcIjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlcG9ydE1vZGVsLnB1c2gocmVwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gLy9lbmQgZm9yIGxvb3AgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHNob3dNb2RhbCgpOyB9LCAzMDAwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBzZW5kIGl0IGFsbCB0byB0aGUgbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaG93TW9kYWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnQ29udGFjdE1ldHJpY3NTdW1tYXJ5Lmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnbGcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ3JlcC1kaWFsb2cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGVzZVJlcG9ydHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLnJlcG9ydE1vZGVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNFdmVudDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5HZW5SZXBFdmVudE1vZGVsID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkdlblJlcEV2ZW50TW9kZWwuRXZlbnQgPSAkc2NvcGUuRXZlbnROYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5HZW5SZXBFdmVudE1vZGVsLkV2ZW50VHlwZSA9ICRzY29wZS5ldmVudFR5cGVzLmZpbHRlcihmdW5jdGlvbiAoZXQpIHsgcmV0dXJuIGV0LmV2ZW50X3R5cGVfaWQgPT0gJHNjb3BlLkV2ZW50TmFtZS5ldmVudF90eXBlX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuR2VuUmVwRXZlbnRNb2RlbC5FdmVudFN0YXQgPSAkc2NvcGUuZXZlbnRTdGF0cy5maWx0ZXIoZnVuY3Rpb24gKGVzKSB7IHJldHVybiBlcy5ldmVudF9zdGF0dXNfaWQgPT0gJHNjb3BlLkV2ZW50TmFtZS5ldmVudF9zdGF0dXNfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vMy4gZXZlbnQgQ29vcmRpbmF0b3IgaW5mb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5HZW5SZXBFdmVudE1vZGVsLkNvb3JkaW5hdG9yID0gJHNjb3BlLm1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1lbWJlcl9pZCA9PSAkc2NvcGUuRXZlbnROYW1lLmV2ZW50X2Nvb3JkaW5hdG9yOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuR2VuUmVwRXZlbnRNb2RlbC5Db29yZEFnZW5jeSA9ICRzY29wZS5hZ2VuY2llcy5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuYWdlbmN5X2lkID09ICRzY29wZS5HZW5SZXBFdmVudE1vZGVsLkNvb3JkaW5hdG9yLmFnZW5jeV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5HZW5SZXBFdmVudE1vZGVsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckaHR0cCcsICckdWliTW9kYWxJbnN0YW5jZScsICd0aGVzZVJlcG9ydHMnLCAndGhpc0V2ZW50JywgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsICR1aWJNb2RhbEluc3RhbmNlLCB0aGVzZVJlcG9ydHMsIHRoaXNFdmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJlcG9ydHMgPSB0aGVzZVJlcG9ydHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRXZlbnQgPSB0aGlzRXZlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByaW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5wcmludCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3RoaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9OyAvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IC8vZW5kIGlmIHZhbGlkXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vY2xpY2tlZCBnZW5lcmF0ZSBjc3ZcclxuICAgICAgICAgICAgICAgICRzY29wZS5nZXRDU1ZmaWxlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZ2V0IHJlcG9ydHMgYW5kIGdpdmUgYSBjc3YgZmlsZSBiYWNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICd0ZXh0L2Nzdic7XHJcbiAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSRVBPUlQuZ2V0UmVwb3J0c0NTVih7IEV2ZW50OiAkc2NvcGUuZ2VuU3VtbWFyeS5ldmVudF9pZCwgU3RhdGVzOiAkc2NvcGUuU3RhdGVBYmJyZXZzLCBEYXRlOiAkc2NvcGUuZ2VuU3VtbWFyeS5zdW1fZGF0ZSB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbmNob3IgPSBhbmd1bGFyLmVsZW1lbnQoJzxhLz4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqb2luZWRSZXNwb25zZSA9IHJlc3VsdC5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGUgPSBuZXcgQmxvYihbam9pbmVkUmVzcG9uc2VdLCB7IHR5cGU6ICdhcHBsaWNhdGlvbi9jc3YnIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVVUkwgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yLmhyZWYgPSBmaWxlVVJMO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yLmRvd25sb2FkID0gJ3JlcG9ydC5jc3YnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5jaG9yLmNsaWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vRmlsZS5zYXZlQXMoYmxvYiwgXCJyZXBvcnQuY3N2XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2Vycm9yJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTsvLyNlbmRyZWdpb24gR2VuZXJhdGUgUmVwb3J0IHRhYlxyXG4gICAgICAgICAgICB9XHJcbiAgICB9XSk7XHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgTW9kYWxDb250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdNb2RhbENvbnRyb2xsZXJzJyk7XHJcbiAgICBNb2RhbENvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ1Byb2pBbGVydE1vZGFsQ3RybCcsIFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgJ1Byb2pBbGVydCcsIFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlLCBQcm9qQWxlcnQpIHtcclxuICAgICAgICAgICAgJHNjb3BlLlByb2pBbGVydFBhcnRzID0gUHJvakFsZXJ0O1xyXG4gICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XSk7XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIE1vZGFsQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnTW9kYWxDb250cm9sbGVycycpO1xyXG4vL3BvcHVwIGNvbmZpcm0gYm94XHJcbiAgICBNb2RhbENvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ2NvbmZpcm1SZXBvcnRNb2RhbEN0cmwnLCBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1dKTtcclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qIGNvbnRyb2xsZXJzLmpzLCAnbGVhZmxldC1kaXJlY3RpdmUnJ3VpLnVuaXF1ZScsJ25nVGFnc0lucHV0JywqL1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBNb2RhbENvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ01vZGFsQ29udHJvbGxlcnMnKTtcclxuICAgIE1vZGFsQ29udHJvbGxlcnMuY29udHJvbGxlcigncGVha01vZGFsQ3RybCcsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGNvb2tpZXMnLCAnJGh0dHAnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCAnJHVpYk1vZGFsJywgJ1NFUlZFUl9VUkwnLCAnYWxsVmVydERhdHVtcycsICdhbGxDb2xsZWN0Q29uZGl0aW9ucycsICd0aGlzUGVhaycsICdwZWFrU2l0ZScsICdhbGxNZW1iZXJzJywgJ2FsbEV2ZW50SFdNcycsICdhbGxTaXRlU2Vuc29ycycsICdhbGxTaXRlRmlsZXMnLCAndGhpc1BlYWtERnMnLCAnREFUQV9GSUxFJywgJ1BFQUsnLCAnSFdNJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkY29va2llcywgJGh0dHAsICR1aWJNb2RhbEluc3RhbmNlLCAkdWliTW9kYWwsIFNFUlZFUl9VUkwsIGFsbFZlcnREYXR1bXMsIGFsbENvbGxlY3RDb25kaXRpb25zLCB0aGlzUGVhaywgcGVha1NpdGUsIGFsbE1lbWJlcnMsIGFsbEV2ZW50SFdNcywgYWxsU2l0ZVNlbnNvcnMsIGFsbFNpdGVGaWxlcywgdGhpc1BlYWtERnMsIERBVEFfRklMRSwgUEVBSywgSFdNKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5zZXJ2ZXJVUkwgPSBTRVJWRVJfVVJMO1xyXG4gICAgICAgICAgICAvL2Ryb3Bkb3duc1xyXG4gICAgICAgICAgICAkc2NvcGUuVkRhdHVtc0xpc3QgPSBhbGxWZXJ0RGF0dW1zO1xyXG4gICAgICAgICAgICAkc2NvcGUudGhpc1NpdGUgPSBwZWFrU2l0ZTtcclxuICAgICAgICAgICAgJHNjb3BlLm1lbWJlckxpc3QgPSBhbGxNZW1iZXJzO1xyXG4gICAgICAgICAgICAkc2NvcGUubG9nZ2VkSW5Sb2xlID0gJGNvb2tpZXMuZ2V0KCd1c2Vyc1JvbGUnKTtcclxuICAgICAgICAgICAgLy9uZWVkIGEgZGF0YWZpbGUgZm9yIHRoaXMga2luZCBvZiBzZW5zb3IsIGNoZWNrIGZpbGVzIGZvciBwcmVzZW5jZSBvZiBkZiB0byBzZXQgZmxhZyBvbiBzZW5zb3JcclxuICAgICAgICAgICAgdmFyIGRldGVybWluZURGUHJlc2VudCA9IGZ1bmN0aW9uIChmKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IGYubGVuZ3RoOyB4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZlt4XS5maWxldHlwZV9pZCA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9hZGQgc2VsZWN0ZWQgcHJvcCBub3cgZm9yIGRhdGEgZmlsZXMvc2Vuc29yIGZpbGVzIGZvciBsYXRlciB1c2VcclxuICAgICAgICAgICAgZm9yICh2YXIgc2YgPSAwOyBzZiA8IGFsbFNpdGVGaWxlcy5sZW5ndGg7IHNmKyspIHtcclxuICAgICAgICAgICAgICAgIGlmIChhbGxTaXRlRmlsZXNbc2ZdLmZpbGVCZWxvbmdzVG8gPT0gJ0RhdGFGaWxlIEZpbGUnIHx8IGFsbFNpdGVGaWxlc1tzZl0uZmlsZUJlbG9uZ3NUbyA9PSAnU2Vuc29yIEZpbGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsU2l0ZUZpbGVzW3NmXS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vbmVlZCB0byBtYWtlIHN1cmUgdGhlIGluc3RydW1lbnRfc3RhdHVzZXMgYXJlIGluIHRoZSBjb3JyZWN0IG9yZGVyIChbMF1SZXRyaWV2ZWQsIFsxXURlcGxveWVkLCBbMl1Qcm9wb3NlZCAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgZm9yICh2YXIgcyA9IDA7IHMgPCBhbGxTaXRlU2Vuc29ycy5sZW5ndGg7IHMrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvcnJlY3RPcmRlclNTID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgc2Vuc29yU3RhdHVzZXMgPSBhbGxTaXRlU2Vuc29yc1tzXS5pbnN0cnVtZW50X3N0YXR1cztcclxuICAgICAgICAgICAgICAgIGlmIChzZW5zb3JTdGF0dXNlcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9vbmx5IGNhcmUgYWJvdXQgb3JkZXIgaWYgdGhlcmUncyBtb3JlIHRoYW4gMVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9wb3NlZFN0YXQgPSBzZW5zb3JTdGF0dXNlcy5maWx0ZXIoZnVuY3Rpb24gKHBzKSB7IHJldHVybiBwcy5zdGF0dXMgPT0gXCJQcm9wb3NlZFwiOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGVwbG95ZWRTdGF0ID0gc2Vuc29yU3RhdHVzZXMuZmlsdGVyKGZ1bmN0aW9uIChwcykgeyByZXR1cm4gcHMuc3RhdHVzID09IFwiRGVwbG95ZWRcIjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldExvc3RTdGF0ID0gc2Vuc29yU3RhdHVzZXMuZmlsdGVyKGZ1bmN0aW9uIChwcykgeyByZXR1cm4gcHMuc3RhdHVzID09IFwiUmV0cmlldmVkXCIgfHwgcHMuc3RhdHVzID09IFwiTG9zdFwiOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAvL25vdyBhZGQgdGhlbSBiYWNrIGluIGNvcnJlY3RseVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXRMb3N0U3RhdCkgY29ycmVjdE9yZGVyU1MucHVzaChyZXRMb3N0U3RhdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlcGxveWVkU3RhdCkgY29ycmVjdE9yZGVyU1MucHVzaChkZXBsb3llZFN0YXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wb3NlZFN0YXQpIGNvcnJlY3RPcmRlclNTLnB1c2gocHJvcG9zZWRTdGF0KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY29ycmVjdE9yZGVyU1MucHVzaChzZW5zb3JTdGF0dXNlc1swXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL25vdyBwdXQgaXQgYmFjayBpbiB0aGUgb2JqZWN0XHJcbiAgICAgICAgICAgICAgICBhbGxTaXRlU2Vuc29yc1tzXS5pbnN0cnVtZW50X3N0YXR1cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgYWxsU2l0ZVNlbnNvcnNbc10uaW5zdHJ1bWVudF9zdGF0dXMgPSBjb3JyZWN0T3JkZXJTUztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmV2ZW50U2l0ZUhXTXMgPSBhbGxFdmVudEhXTXMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7IHJldHVybiBoLnNpdGVfaWQgPT0gcGVha1NpdGUuc2l0ZV9pZDsgfSk7XHJcbiAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuZXZlbnRTaXRlSFdNcywgZnVuY3Rpb24gKGVzaCkge1xyXG4gICAgICAgICAgICAgICAgZXNoLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBlc2guZmlsZXMgPSBhbGxTaXRlRmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChzZikgeyByZXR1cm4gc2YuaHdtX2lkID09IGVzaC5od21faWQgJiYgc2YuZmlsZUJlbG9uZ3NUbyA9PSBcIkhXTSBGaWxlXCI7IH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICRzY29wZS5ldmVudFNpdGVTZW5zb3JzID0gYWxsU2l0ZVNlbnNvcnMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLmV2ZW50X2lkID09ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKTsgfSk7IC8vbWF5YmUgZ28gZnJvbSBoZXJlIHRvIGdldCBhbGwgZGF0YWZpbGVzIGZvciBlYWNoIHNlbnNvclxyXG4gICAgICAgICAgICBmb3IgKHZhciBldlNpdGVTZW4gPSAwOyBldlNpdGVTZW4gPCAkc2NvcGUuZXZlbnRTaXRlU2Vuc29ycy5sZW5ndGg7IGV2U2l0ZVNlbisrKSB7XHJcbiAgICAgICAgICAgICAgICAvL2FuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuZXZlbnRTaXRlU2Vuc29ycywgZnVuY3Rpb24gKGVzcykge1xyXG4gICAgICAgICAgICAgICAgLy8gaWYgZXNzLlNlbnNvcl90eXBlID09IDIsIDUsIG9yIDYgLi4gYW5kIHRoZXJlIGFyZSBubyBmaWxlcy4uIHNob3cgcmVkICEgd2l0aCB0ZXh0XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXZlbnRTaXRlU2Vuc29yc1tldlNpdGVTZW5dLkNvbGxlY3RDb25kaXRpb24gPSAkc2NvcGUuZXZlbnRTaXRlU2Vuc29yc1tldlNpdGVTZW5dLmluc3RfY29sbGVjdGlvbl9pZCAhPT0gbnVsbCAmJiAkc2NvcGUuZXZlbnRTaXRlU2Vuc29yc1tldlNpdGVTZW5dLmluc3RfY29sbGVjdGlvbl9pZCA+IDAgP1xyXG4gICAgICAgICAgICAgICAgICAgIGFsbENvbGxlY3RDb25kaXRpb25zLmZpbHRlcihmdW5jdGlvbiAoY2MpIHsgcmV0dXJuIGNjLmlkID09ICRzY29wZS5ldmVudFNpdGVTZW5zb3JzW2V2U2l0ZVNlbl0uaW5zdF9jb2xsZWN0aW9uX2lkOyB9KVswXS5jb25kaXRpb24gOlxyXG4gICAgICAgICAgICAgICAgICAgICcnO1xyXG4gICAgICAgICAgICAgICAgLy9zdG9yZSBpZiB0aGlzIGlzIHJldHJpZXZlZCAoaWYgbm90LCBzaG93ICEgZm9yIHRoZW0gdG8gcmV0cmlldmUgaXQgaW4gb3JkZXIgdG8gY29tcGxldGUgdGhlIHBlYWtcclxuICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFNpdGVTZW5zb3JzW2V2U2l0ZVNlbl0uaXNSZXRyaWV2ZWQgPSAkc2NvcGUuZXZlbnRTaXRlU2Vuc29yc1tldlNpdGVTZW5dLmluc3RydW1lbnRfc3RhdHVzWzBdLnN0YXR1cyA9PSAnUmV0cmlldmVkJyA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFNpdGVTZW5zb3JzW2V2U2l0ZVNlbl0uZmlsZXMgPSBhbGxTaXRlRmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChzZikgeyByZXR1cm4gc2YuaW5zdHJ1bWVudF9pZCA9PSAkc2NvcGUuZXZlbnRTaXRlU2Vuc29yc1tldlNpdGVTZW5dLmluc3RydW1lbnRfaWQgJiYgKHNmLmZpbGVCZWxvbmdzVG8gPT0gXCJEYXRhRmlsZSBGaWxlXCIgfHwgc2YuZmlsZUJlbG9uZ3NUbyA9PSBcIlNlbnNvciBGaWxlXCIpOyB9KTtcclxuICAgICAgICAgICAgICAgIC8vdmFyIGhhc0RGID0ge3ZhbHVlOnRydWV9OyAoMjogTWV0IFN0YXRpb24sIDU6IFJhcGlkIERlcGxveW1lbnQgR2FnZSwgNjogUmFpbiBHYWdlKVxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ldmVudFNpdGVTZW5zb3JzW2V2U2l0ZVNlbl0uc2Vuc29yX3R5cGVfaWQgPT0gMiB8fCAkc2NvcGUuZXZlbnRTaXRlU2Vuc29yc1tldlNpdGVTZW5dLnNlbnNvcl90eXBlX2lkID09IDUgfHwgJHNjb3BlLmV2ZW50U2l0ZVNlbnNvcnNbZXZTaXRlU2VuXS5zZW5zb3JfdHlwZV9pZCA9PSA2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ldmVudFNpdGVTZW5zb3JzW2V2U2l0ZVNlbl0uZmlsZXMubGVuZ3RoID09PSAwKSAkc2NvcGUuZXZlbnRTaXRlU2Vuc29yc1tldlNpdGVTZW5dLk5lZWRERiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghZGV0ZXJtaW5lREZQcmVzZW50KCRzY29wZS5ldmVudFNpdGVTZW5zb3JzW2V2U2l0ZVNlbl0uZmlsZXMpKSAkc2NvcGUuZXZlbnRTaXRlU2Vuc29yc1tldlNpdGVTZW5dLk5lZWRERiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIGlmIHRoaXMgaXMgYSBkYXRhZmlsZSByZXF1aXJpbmcgc2Vuc29yXHJcbiAgICAgICAgICAgIH0vLyk7XHJcblxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gJHNjb3BlLnNpdGVGaWxlc0ZvclNlbnNvcnMgPSBhbGxTaXRlRmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChmKSB7IHJldHVybiBmLmluc3RydW1lbnRfaWQgIT09IG51bGwgJiYgZi5pbnN0cnVtZW50X2lkID4gMDsgfSk7XHJcbiAgICAgICAgICAgICRzY29wZS50aW1lWm9uZUxpc3QgPSBbJ1VUQycsICdQU1QnLCAnTVNUJywgJ0NTVCcsICdFU1QnXTtcclxuICAgICAgICAgICAgJHNjb3BlLkxvZ2dlZEluTWVtYmVyID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRjb29raWVzLmdldCgnbUlEJyk7IH0pWzBdO1xyXG4gICAgICAgICAgICAkc2NvcGUuY2hvc2VuSFdNTGlzdCA9IFtdOy8vaG9sZGVyIG9mIGNob3NlbiBod21zIGZvciB0aGlzIHBlYWtcclxuICAgICAgICAgICAgJHNjb3BlLnJlbW92ZWRDaG9zZW5IV01MaXN0ID0gW107IC8vaG9sZGVyIGZvciByZW1vdmVkIG9uZXMgZm9yIFBVVCAoaWYgdGhpcyBpcyBlZGl0KVxyXG4gICAgICAgICAgICAkc2NvcGUuY2hvc2VuREZMaXN0ID0gW107IC8vaG9sZGVyIGZvciBjaG9zZW4gZGF0YWZpbGUgZm9yIHRoaXMgcGVha1xyXG4gICAgICAgICAgICAkc2NvcGUucmVtb3ZlZENob3NlbkRGTGlzdCA9IFtdOyAvL2hvbGRlciBmb3IgcmVtb3ZlZCBvbmVzIGZvciBQVVQgKGlmIHRoaXMgaXMgZWRpdClcclxuICAgICAgICAgICAgJHNjb3BlLmh3bURldGFpbCA9IGZhbHNlOyAvL3Nob3cvaGlkZSBod20gYm94IG9mIGh3bSBkZXRhaWxzXHJcbiAgICAgICAgICAgICRzY29wZS5IV01Cb3ggPSB7fTsgLy9ob2xkcyBiaW5kaW5nIGZvciB3aGF0IHRvIHNob3cgaW4gaHdtIGRldGFpbCBib3hcclxuICAgICAgICAgICAgJHNjb3BlLnNlbnNvckRldGFpbCA9IGZhbHNlOyAvL3Nob3cvaGlkZSBzZW5zb3IgYm94IG9mIHNlbnNvciBkZXRhaWxzXHJcbiAgICAgICAgICAgICRzY29wZS5TZW5zb3JCb3ggPSB7fTsgLy9ob2xkcyBiaW5kaW5nIGZvciB3aGF0IHRvIHNob3cgaW4gdGhlIHNlbnNvciBkZXRhaWwgYm94XHJcbiAgICAgICAgICAgICRzY29wZS5kYXRhRmlsZURldGFpbCA9IGZhbHNlOyAvL3Nob3cvaGlkZSBkYXRhZmlsZSBib3ggb2YgZGF0YWZpbGUgZGV0YWlsc1xyXG4gICAgICAgICAgICAkc2NvcGUuREZCb3ggPSB7fTsgLy9ob2xkcyBiaW5kaW5nIGZvciB3aGF0IHRvIHNob3cgaW4gdGhlIGRhdGFmaWxlIGRldGFpbCBib3hcclxuICAgICAgICAgICAgJHNjb3BlLmFQZWFrID0ge307XHJcbiAgICAgICAgICAgIC8vZm9ybWF0dGluZyBkYXRlIGFuZCB0aW1lIHByb3Blcmx5IGZvciBjaHJvbWUgYW5kIGZmXHJcbiAgICAgICAgICAgIHZhciBnZXREYXRlVGltZVBhcnRzID0gZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB5ID0gZC5zdWJzdHIoMCwgNCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbSA9IGQuc3Vic3RyKDUsIDIpIC0gMTsgLy9zdWJ0cmFjdCAxIGZvciBpbmRleCB2YWx1ZSAoSmFudWFyeSBpcyAwKVxyXG4gICAgICAgICAgICAgICAgdmFyIGRhID0gZC5zdWJzdHIoOCwgMik7XHJcbiAgICAgICAgICAgICAgICB2YXIgaCA9IGQuc3Vic3RyKDExLCAyKTtcclxuICAgICAgICAgICAgICAgIHZhciBtaSA9IGQuc3Vic3RyKDE0LCAyKTtcclxuICAgICAgICAgICAgICAgIHZhciBzZWMgPSBkLnN1YnN0cigxNywgMik7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGhlRGF0ZSA9IG5ldyBEYXRlKHksIG0sIGRhLCBoLCBtaSwgc2VjKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGVEYXRlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvL2dldCB0aW1lem9uZSBhbmQgdGltZXN0YW1wIGZvciB0aGVpciB0aW1lem9uZSBmb3Igc2hvd2luZy4uIHBvc3QvcHV0IHdpbGwgY29udmVydCBpdCB0byB1dGNcclxuICAgICAgICAgICAgdmFyIGdldFRpbWVab25lU3RhbXAgPSBmdW5jdGlvbiAoZHNlbnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzZW5kVGhpcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGQ7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRzZW50ICE9PSB1bmRlZmluZWQpIGQgPSBuZXcgRGF0ZShkc2VudCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGQgPSBuZXcgRGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSAoZC50b1N0cmluZygpKS5zdWJzdHJpbmcoMzUpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHpvbmUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChvZmZzZXQuc3Vic3RyKDAsIDMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkNlblwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB6b25lID0gJ0NTVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJFYXNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgem9uZSA9ICdFU1QnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiTW91XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHpvbmUgPSAnTVNUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlBhY1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB6b25lID0gJ1BTVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2VuZFRoaXMgPSBbZCwgem9uZV07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VuZFRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL0RhdGVwaWNrZXJcclxuICAgICAgICAgICAgJHNjb3BlLmRhdGVPcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgc3RhcnRpbmdEYXk6IDEsXHJcbiAgICAgICAgICAgICAgICBzaG93V2Vla3M6IGZhbHNlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRzY29wZS5kYXRlcGlja3JzID0ge307XHJcbiAgICAgICAgICAgICRzY29wZS5vcGVuID0gZnVuY3Rpb24gKCRldmVudCwgd2hpY2gpIHtcclxuICAgICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5kYXRlcGlja3JzW3doaWNoXSA9IHRydWU7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2lzIGl0IFVUQyBvciBsb2NhbCB0aW1lLi5tYWtlIHN1cmUgaXQgc3RheXMgVVRDXHJcbiAgICAgICAgICAgIHZhciBkZWFsV2l0aFRpbWVTdGFtcGI0U2VuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vY2hlY2sgYW5kIHNlZSBpZiB0aGV5IGFyZSBub3QgdXNpbmcgVVRDXHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFQZWFrLnRpbWVfem9uZSAhPSBcIlVUQ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb252ZXJ0IGl0XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHV0Y0RhdGVUaW1lID0gbmV3IERhdGUoJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZSkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVBlYWsucGVha19kYXRlID0gdXRjRGF0ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFQZWFrLnRpbWVfem9uZSA9ICdVVEMnO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSAnR01UJyBpcyB0YWNrZWQgb24gc28gaXQgZG9lc24ndCB0cnkgdG8gYWRkIGhycyB0byBtYWtlIHRoZSBhbHJlYWR5IHV0YyBhIHV0YyBpbiBkYlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZS50b1N0cmluZygpLmluZGV4T2YoJ0dNVCcpICsgMztcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVBlYWsucGVha19kYXRlID0gJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZS50b1N0cmluZygpLnN1YnN0cmluZygwLCBpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vY2FuY2VsXHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLiBcclxuICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy9pcyBudW1iZXJcclxuICAgICAgICAgICAgJHNjb3BlLmlzTnVtID0gZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRoZUV2ZW50ID0gZXZ0IHx8IHdpbmRvdy5ldmVudDtcclxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSB0aGVFdmVudC5rZXlDb2RlIHx8IHRoZUV2ZW50LndoaWNoO1xyXG4gICAgICAgICAgICAgICAgaWYgKGtleSAhPSA0NiAmJiBrZXkgIT0gNDUgJiYga2V5ID4gMzEgJiYgKGtleSA8IDQ4IHx8IGtleSA+IDU3KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoZUV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoZUV2ZW50LnByZXZlbnREZWZhdWx0KSB0aGVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXNQZWFrICE9IFwiZW1wdHlcIikge1xyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIGV4aXN0aW5nIFBFQUtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hUGVhayA9IGFuZ3VsYXIuY29weSh0aGlzUGVhayk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYVBlYWsucGVha19kYXRlID0geyBkYXRlOiBnZXREYXRlVGltZVBhcnRzKCRzY29wZS5hUGVhay5wZWFrX2RhdGUpLCB0aW1lOiBnZXREYXRlVGltZVBhcnRzKCRzY29wZS5hUGVhay5wZWFrX2RhdGUpIH07XHJcbiAgICAgICAgICAgICAgICAvL2dldCBwZWFrIGNyZWF0b3IgbmFtZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLlBlYWtDcmVhdG9yID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRzY29wZS5hUGVhay5tZW1iZXJfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgLy9jaGVjayBvZmYgdGhvc2UgaHdtcyB1c2VkIGZvciB0aGlzIHBlYWtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGggPSAwOyBoIDwgJHNjb3BlLmV2ZW50U2l0ZUhXTXMubGVuZ3RoOyBoKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmV2ZW50U2l0ZUhXTXNbaF0ucGVha19zdW1tYXJ5X2lkID09ICRzY29wZS5hUGVhay5wZWFrX3N1bW1hcnlfaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFNpdGVIV01zW2hdLnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vY2hlY2sgb2ZmIHRob3NlIGh3bXMgdXNlZCBmb3IgdGhpcyBwZWFrXHJcbiAgICAgICAgICAgICAgICAvL2ZvciBlYWNoIGV2ZW50U2l0ZVNlbnNvci4uIGZvciBlYWNoIGZpbGUgd2l0aGluIGVhY2ggc2Vuc29yLi4uIGlmIGRhdGFGaWxlSUQgPT0gYW55IG9mIHRoZSBwZWFrREZzIGRhdGFmaWxlSUQgPT09PT4gbWFrZSB0aGF0IGZpbGUuc2VsZWN0ZWQgPXRydWVcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGVzcyA9IDA7IGVzcyA8ICRzY29wZS5ldmVudFNpdGVTZW5zb3JzLmxlbmd0aDsgZXNzKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2ZvciBlYWNoIGV2ZW50U2l0ZVNlbnNvclxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlc3NJID0gZXNzO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGRmID0gMDsgZGYgPCAkc2NvcGUuZXZlbnRTaXRlU2Vuc29yc1tlc3NJXS5maWxlcy5sZW5ndGg7IGRmKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9mb3IgZWFjaCBmaWxlIHdpdGhpbiB0aGlzIGV2ZW50U2l0ZVNlbnNvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNUaGVyZSA9IHRoaXNQZWFrREZzLmZpbHRlcihmdW5jdGlvbiAocGRmKSB7IHJldHVybiBwZGYuZGF0YV9maWxlX2lkID09ICRzY29wZS5ldmVudFNpdGVTZW5zb3JzW2Vzc0ldLmZpbGVzW2RmXS5kYXRhX2ZpbGVfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNUaGVyZSAhPT0gdW5kZWZpbmVkKSAkc2NvcGUuZXZlbnRTaXRlU2Vuc29yc1tlc3NJXS5maWxlc1tkZl0uc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBleGlzdGluZyBQRUFLXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gbmV3IFBFQUtcclxuICAgICAgICAgICAgICAgIHZhciB0aW1lUGFydHMgPSBnZXRUaW1lWm9uZVN0YW1wKCk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYVBlYWsgPSB7IHBlYWtfZGF0ZTogeyBkYXRlOiB0aW1lUGFydHNbMF0sIHRpbWU6IHRpbWVQYXJ0c1swXSB9LCB0aW1lX3pvbmU6IHRpbWVQYXJ0c1sxXSwgbWVtYmVyX2lkOiAkY29va2llcy5nZXQoJ21JRCcpIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuUGVha0NyZWF0b3IgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT0gJGNvb2tpZXMuZ2V0KCdtSUQnKTsgfSlbMF07XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIG5ldyBQRUFLXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vc2hvdyBhIG1vZGFsIHdpdGggdGhlIGxhcmdlciBmaWxlIGltYWdlIGFzIGEgcHJldmlld1xyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd0ltYWdlTW9kYWwgPSBmdW5jdGlvbiAoaW1hZ2UpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbWFnZU1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+SW1hZ2UgRmlsZSBQcmV2aWV3PC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PGltZyBuZy1zcmM9XCJ7e3NldFNSQ319XCIgLz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmltYWdlSWQgPSBpbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNldFNSQyA9IFNFUlZFUl9VUkwgKyAnL0ZpbGVzLycgKyAkc2NvcGUuaW1hZ2VJZCArICcvSXRlbSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ21kJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyNyZWdpb24gaHdtIGxpc3Qgc3R1ZmZcclxuICAgICAgICAgICAgdmFyIGZvcm1hdFNlbGVjdGVkSFdNID0gZnVuY3Rpb24gKGgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmaHdtID0ge307ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgZmh3bS5hcHByb3ZhbF9pZCA9IGguYXBwcm92YWxfaWQ7XHJcbiAgICAgICAgICAgICAgICBmaHdtLmh3bV9sYWJlbCA9IGguaHdtX2xhYmVsO1xyXG4gICAgICAgICAgICAgICAgZmh3bS5iYW5rID0gaC5iYW5rO1xyXG4gICAgICAgICAgICAgICAgZmh3bS5lbGV2X2Z0ID0gaC5lbGV2X2Z0O1xyXG4gICAgICAgICAgICAgICAgZmh3bS5ldmVudF9pZCA9IGguZXZlbnRfaWQ7XHJcbiAgICAgICAgICAgICAgICBmaHdtLmZsYWdfZGF0ZSA9IGguZmxhZ19kYXRlO1xyXG4gICAgICAgICAgICAgICAgZmh3bS5mbGFnX21lbWJlcl9pZCA9IGguZmxhZ19tZW1iZXJfaWQ7XHJcbiAgICAgICAgICAgICAgICBmaHdtLmhjb2xsZWN0X21ldGhvZF9pZCA9IGguaGNvbGxlY3RfbWV0aG9kX2lkO1xyXG4gICAgICAgICAgICAgICAgZmh3bS5oZGF0dW1faWQgPSBoLmhkYXR1bV9pZDtcclxuICAgICAgICAgICAgICAgIGZod20uaGVpZ2h0X2Fib3ZlX2duZCA9IGguaGVpZ2h0X2Fib3ZlX2duZDtcclxuICAgICAgICAgICAgICAgIGZod20uaHdtX2Vudmlyb25tZW50ID0gaC5od21fZW52aXJvbm1lbnQ7XHJcbiAgICAgICAgICAgICAgICBmaHdtLmh3bV9pZCA9IGguaHdtX2lkO1xyXG4gICAgICAgICAgICAgICAgZmh3bS5od21fbG9jYXRpb25kZXNjcmlwdGlvbiA9IGguaHdtX2xvY2F0aW9uZGVzY3JpcHRpb247XHJcbiAgICAgICAgICAgICAgICBmaHdtLmh3bV9ub3RlcyA9IGguaHdtX25vdGVzO1xyXG4gICAgICAgICAgICAgICAgZmh3bS5od21fdW5jZXJ0YWludHkgPSBoLmh3bV91bmNlcnRhaW50eTtcclxuICAgICAgICAgICAgICAgIGZod20uaHdtX3F1YWxpdHlfaWQgPSBoLmh3bV9xdWFsaXR5X2lkO1xyXG4gICAgICAgICAgICAgICAgZmh3bS5od21fdHlwZV9pZCA9IGguaHdtX3R5cGVfaWQ7XHJcbiAgICAgICAgICAgICAgICBmaHdtLmxhdGl0dWRlX2RkID0gaC5sYXRpdHVkZV9kZDtcclxuICAgICAgICAgICAgICAgIGZod20ubG9uZ2l0dWRlX2RkID0gaC5sb25naXR1ZGVfZGQ7XHJcbiAgICAgICAgICAgICAgICBmaHdtLm1hcmtlcl9pZCA9IGgubWFya2VyX2lkO1xyXG4gICAgICAgICAgICAgICAgZmh3bS5wZWFrX3N1bW1hcnlfaWQgPSBoLnBlYWtfc3VtbWFyeV9pZDtcclxuICAgICAgICAgICAgICAgIGZod20uc2l0ZV9pZCA9IGguc2l0ZV9pZDtcclxuICAgICAgICAgICAgICAgIGZod20uc3RpbGx3YXRlciA9IGguc3RpbGx3YXRlciA9PSBcIk5vXCIgPyAwIDogMTtcclxuICAgICAgICAgICAgICAgIGZod20uc3VydmV5X2RhdGUgPSBoLnN1cnZleV9kYXRlO1xyXG4gICAgICAgICAgICAgICAgZmh3bS5zdXJ2ZXlfbWVtYmVyX2lkID0gaC5zdXJ2ZXlfbWVtYmVyX2lkO1xyXG4gICAgICAgICAgICAgICAgZmh3bS52Y29sbGVjdF9tZXRob2RfaWQgPSBoLnZjb2xsZWN0X21ldGhvZF9pZDtcclxuICAgICAgICAgICAgICAgIGZod20udmRhdHVtX2lkID0gaC52ZGF0dW1faWQ7XHJcbiAgICAgICAgICAgICAgICBmaHdtLndhdGVyYm9keSA9IGgud2F0ZXJib2R5O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZod207XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vYWRkIG9yIHJlbW92ZSBhIGh3bSBmcm9tIHRoZSBsaXN0IG9mIGNob3NlbiBod21zIGZvciBkZXRlcm1pbmluZyB0aGlzIHBlYWtcclxuICAgICAgICAgICAgJHNjb3BlLmFkZEhXTSA9IGZ1bmN0aW9uIChoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYUhXTSA9IGZvcm1hdFNlbGVjdGVkSFdNKGgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGguc2VsZWN0ZWQgPT09IHRydWUpIHsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jaG9zZW5IV01MaXN0LnB1c2goYUhXTSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVBlYWsucGVha19zdW1tYXJ5X2lkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9lZGl0Li4gbmVlZCB0byBzdG9yZSByZW1vdmVkIG9uZXMgZm9yIFBVVFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVtb3ZlZENob3NlbkhXTUxpc3QucHVzaChkYXRhRmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY2hvc2VuSFdNTGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmQgPSAkc2NvcGUuY2hvc2VuSFdNTGlzdC5tYXAoZnVuY3Rpb24gKGh3bSkgeyByZXR1cm4gaHdtLmh3bV9pZDsgfSkuaW5kZXhPZihhSFdNLmh3bV9pZCk7IC8vbm90IHdvcmtpbmc6OiAkc2NvcGUuY2hvc2VuSFdNTGlzdC5pbmRleE9mKGFIV00pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2hvc2VuSFdNTGlzdC5zcGxpY2UoaW5kLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvL3RoZXkgd2FudCB0byBzZWUgdGhlIGRldGFpbHMgb2YgdGhlIGh3bSwgb3Igbm90IHNlZSBpdCBhbnltb3JlXHJcbiAgICAgICAgICAgICRzY29wZS5zaG93SFdNRGV0YWlscyA9IGZ1bmN0aW9uIChoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaHdtRGV0YWlsID0gdHJ1ZTsgJHNjb3BlLnNlbnNvckRldGFpbCA9IGZhbHNlOyAkc2NvcGUuZGF0YUZpbGVEZXRhaWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5IV01Cb3ggPSBoO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy91c2UgdGhpcyBod20gdG8gcG9wdWxhdGUgcGVhayBwYXJ0cyAocHJpbWFyeSBod20gZm9yIGRldGVybWluaW5nIHBlYWspXHJcbiAgICAgICAgICAgICRzY29wZS5wcmltYXJ5SFdNID0gZnVuY3Rpb24gKGgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzZXRQcmltSFdNID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+U2V0IGFzIFByaW1hcnk8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5BcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gc2V0IHRoaXMgYXMgdGhlIFByaW1hcnkgSFdNPyBEb2luZyBzbyB3aWxsIHBvcHVsYXRlIHRoZSBQZWFrIERhdGUgKG5vdCBpbmNsdWRpbmcgdGltZSksIFN0YWdlLCBWZXJ0aWNhbCBEYXR1bSBhbmQgSGVpZ2h0IEFib3ZlIEdyb3VuZC48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwiU2V0SXQoKVwiPlNldCBhcyBQcmltYXJ5PC9idXR0b24+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwiY2FuY2VsKClcIj5DYW5jZWw8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNldEl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoJ1llcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgc2V0UHJpbUhXTS5yZXN1bHQudGhlbihmdW5jdGlvbiAoc2V0SXQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2V0SXQgPT0gJ1llcycpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZS5kYXRlID0gbmV3IERhdGUoaC5mbGFnX2RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVBlYWsucGVha19zdGFnZSA9IGguZWxldl9mdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFQZWFrLnZkYXR1bV9pZCA9IGgudmRhdHVtX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVBlYWsuaGVpZ2h0X2Fib3ZlX2duZCA9IGguaGVpZ2h0X2Fib3ZlX2duZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGhJbmRleCA9ICRzY29wZS5ldmVudFNpdGVIV01zLmluZGV4T2YoaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFNpdGVIV01zW2hJbmRleF0uc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICAgICAgICAgICRzY29wZS5jbG9zZURldGFpbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZW5zb3JEZXRhaWwgPSBmYWxzZTsgJHNjb3BlLmh3bURldGFpbCA9IGZhbHNlOyAkc2NvcGUuZGF0YUZpbGVEZXRhaWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vI3JlZ2lvbiBzZW5zb3IgbGlzdCBzdHVmZlxyXG4gICAgICAgICAgICAvL2FkZCBvciByZW1vdmUgYSBzZW5zb3IgZnJvbSB0aGUgbGlzdCBvZiBjaG9zZW4gc2Vuc29yIGZvciBkZXRlcm1pbmluZyB0aGlzIHBlYWtcclxuICAgICAgICAgICAgJHNjb3BlLmFkZERhdGFGaWxlID0gZnVuY3Rpb24gKGRhdGFmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0YUZpbGUgPSB7fTsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBEQVRBX0ZJTEUucXVlcnkoeyBpZDogZGF0YWZpbGUuZGF0YV9maWxlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGF0YUZpbGUgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGF0YWZpbGUuc2VsZWN0ZWQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNob3NlbkRGTGlzdC5wdXNoKGRhdGFGaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFQZWFrLnBlYWtfc3VtbWFyeV9pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2VkaXQuLiBuZWVkIHRvIHN0b3JlIHJlbW92ZWQgb25lcyBmb3IgUFVUXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVtb3ZlZENob3NlbkRGTGlzdC5wdXNoKGRhdGFGaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmNob3NlbkRGTGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kID0gJHNjb3BlLmNob3NlbkRGTGlzdC5tYXAoZnVuY3Rpb24gKGRmKSB7IHJldHVybiBkZi5kYXRhX2ZpbGVfaWQ7IH0pLmluZGV4T2YoZGF0YWZpbGUuZGF0YV9maWxlX2lkKTsgLy9ub3Qgd29ya2luZzo6ICRzY29wZS5jaG9zZW5ERkxpc3QuaW5kZXhPZihzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jaG9zZW5ERkxpc3Quc3BsaWNlKGluZCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vdGhleSB3YW50IHRvIHNlZSB0aGUgZGV0YWlscyBvZiB0aGUgc2Vuc29yLCBvciBub3Qgc2VlIGl0IGFueW1vcmVcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dTZW5zb3JEZXRhaWxzID0gZnVuY3Rpb24gKHMpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZW5zb3JEZXRhaWwgPSB0cnVlOyAkc2NvcGUuaHdtRGV0YWlsID0gZmFsc2U7ICRzY29wZS5kYXRhRmlsZURldGFpbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLlNlbnNvckJveCA9IHM7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vdGhleSB3YW50IHRvIHNlZSB0aGUgZGV0YWlscyBvZiB0aGUgZGF0YWZpbGUsIG9yIG5vdCBzZWUgaXQgYW55bW9yZVxyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd0RhdGFGaWxlRGV0YWlscyA9IGZ1bmN0aW9uIChmKSB7XHJcbiAgICAgICAgICAgICAgICBEQVRBX0ZJTEUucXVlcnkoeyBpZDogZi5kYXRhX2ZpbGVfaWQgfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ERkJveCA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ERkJveC5maWxlUGF0aCA9IGYucGF0aDtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuREZCb3guZmlsZUlEID0gZi5maWxlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ERkJveC5maWxlRGVzYyA9IGYuZGVzY3JpcHRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRGQm94LnByb2Nlc3NlZEJ5ID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09IHJlc3BvbnNlLnByb2Nlc3Nvcl9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRGQm94Lm53aXNGaWxlID0gZi5pc19ud2lzID09IDEgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRGQm94LmZpbGVVUkwgPSBmLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFGaWxlRGV0YWlsID0gdHJ1ZTsgJHNjb3BlLmh3bURldGFpbCA9IGZhbHNlOyAkc2NvcGUuc2Vuc29yRGV0YWlsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vdXNlIHRoaXMgaHdtIHRvIHBvcHVsYXRlIHBlYWsgcGFydHMgKHByaW1hcnkgc2Vuc29yIGZvciBkZXRlcm1pbmluZyBwZWFrKVxyXG4gICAgICAgICAgICAvKic8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBzZXQgdGhpcyBhcyB0aGUgUHJpbWFyeSBEYXRhIGZpbGU/IERvaW5nIHNvIHdpbGwgcG9wdWxhdGUgdGhlIFBlYWsgRGF0ZSwgVGltZSBhbmQgdGltZSB6b25lLCBTdGFnZSwgVmVydGljYWwgRGF0dW0gYW5kIEhlaWdodCBBYm92ZSBHcm91bmQuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cIlNldEl0KClcIj5TZXQgYXMgUHJpbWFyeTwvYnV0dG9uPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cImNhbmNlbCgpXCI+Q2FuY2VsPC9idXR0b24+PC9kaXY+JywqL1xyXG4gICAgICAgICAgICAkc2NvcGUucHJpbWFyeURhdGFGaWxlID0gZnVuY3Rpb24gKGYpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzZXRQcmltZURGID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+U2V0IGFzIFByaW1hcnk8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5BcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gc2V0IHRoaXMgYXMgdGhlIFByaW1hcnkgRGF0YSBmaWxlPzwvcD48cD4oQ29taW5nIHNvb246IFNjcmlwdCBwcm9jZXNzaW5nIHRvIHBvcHVsYXRlIHRoZSBQZWFrIGRhdGUsIHRpbWUgYW5kIHRpbWUgem9uZSwgU3RhZ2UsIFZlcnRpY2FsIERhdHVtIGFuZCBIZWlnaHQgYWJvdmUgZ3JvdW5kKTwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJTZXRJdCgpXCI+U2V0IGFzIFByaW1hcnk8L2J1dHRvbj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJjYW5jZWwoKVwiPkNhbmNlbDwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2V0SXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgnWWVzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBzZXRQcmltZURGLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChzZXRJdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXRJdCA9PSAnWWVzJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5hUGVhay5wZWFrX2RhdGUuZGF0ZSA9IGguZmxhZ19kYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5hUGVhay5wZWFrX3N0YWdlID0gaC5lbGV2X2Z0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5hUGVhay52ZGF0dW1faWQgPSBoLnZkYXR1bV9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5hUGVhay5oZWlnaHRfYWJvdmVfZ25kID0gaC5oZWlnaHRfYWJvdmVfZ25kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VucyA9ICRzY29wZS5ldmVudFNpdGVTZW5zb3JzLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcy5pbnN0cnVtZW50X2lkID09IGYuaW5zdHJ1bWVudF9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzSW5kZXggPSAkc2NvcGUuZXZlbnRTaXRlU2Vuc29ycy5pbmRleE9mKHNlbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZkluZGV4ID0gc2Vucy5maWxlcy5pbmRleE9mKGYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXZlbnRTaXRlU2Vuc29yc1tzSW5kZXhdLmZpbGVzW2ZJbmRleF0uc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICAgICAgICAgIC8vc2F2ZSBQZWFrXHJcbiAgICAgICAgICAgICRzY29wZS5zYXZlUGVhayA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZWRQZWFrID0ge307ICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZXRpbWUgPSBuZXcgRGF0ZSgkc2NvcGUuYVBlYWsucGVha19kYXRlLmRhdGUuZ2V0RnVsbFllYXIoKSwgJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZS5kYXRlLmdldE1vbnRoKCksICRzY29wZS5hUGVhay5wZWFrX2RhdGUuZGF0ZS5nZXREYXRlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hUGVhay5wZWFrX2RhdGUudGltZS5nZXRIb3VycygpLCAkc2NvcGUuYVBlYWsucGVha19kYXRlLnRpbWUuZ2V0TWludXRlcygpLCAkc2NvcGUuYVBlYWsucGVha19kYXRlLnRpbWUuZ2V0U2Vjb25kcygpKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVBlYWsucGVha19kYXRlID0gZGF0ZXRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVhbFdpdGhUaW1lU3RhbXBiNFNlbmQoKTsgLy9VVEMgb3IgbG9jYWw/XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgUEVBSy51cGRhdGUoeyBpZDogJHNjb3BlLmFQZWFrLnBlYWtfc3VtbWFyeV9pZCB9LCAkc2NvcGUuYVBlYWspLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdXBkYXRlIGh3bXMvZGF0YWZpbGVzIHVzZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9yZW1vdmUgdGhvc2UgdW5jaG9zZW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5yZW1vdmVkQ2hvc2VuREZMaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHJlbWQgPSAwOyByZW1kIDwgJHNjb3BlLnJlbW92ZWRDaG9zZW5ERkxpc3QubGVuZ3RoOyByZW1kKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVtb3ZlZENob3NlbkRGTGlzdFtyZW1kXS5wZWFrX3N1bW1hcnlfaWQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERBVEFfRklMRS51cGRhdGUoeyBpZDogJHNjb3BlLnJlbW92ZWRDaG9zZW5ERkxpc3RbcmVtZF0uZGF0YV9maWxlX2lkIH0sICRzY29wZS5yZW1vdmVkQ2hvc2VuREZMaXN0W3JlbWRdKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnJlbW92ZWRDaG9zZW5IV01MaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHJlbWggPSAwOyByZW1oIDwgJHNjb3BlLnJlbW92ZWRDaG9zZW5IV01MaXN0Lmxlbmd0aDsgcmVtaCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlbW92ZWRDaG9zZW5IV01MaXN0W3JlbWhdLnBlYWtfc3VtbWFyeV9pZCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSFdNLnVwZGF0ZSh7IGlkOiAkc2NvcGUucmVtb3ZlZENob3NlbkhXTUxpc3RbcmVtaF0uZGF0YV9maWxlX2lkIH0sICRzY29wZS5yZW1vdmVkQ2hvc2VuSFdNTGlzdFtyZW1oXSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9hZGQgdGhvc2UgY2hvc2VuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGFkZGggPSAwOyBhZGRoIDwgJHNjb3BlLmNob3NlbkhXTUxpc3QubGVuZ3RoOyBhZGRoKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jaG9zZW5IV01MaXN0W2FkZGhdLnBlYWtfc3VtbWFyeV9pZCA9IHJlc3BvbnNlLnBlYWtfc3VtbWFyeV9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhXTS51cGRhdGUoeyBpZDogJHNjb3BlLmNob3NlbkhXTUxpc3RbYWRkaF0uaHdtX2lkIH0sICRzY29wZS5jaG9zZW5IV01MaXN0W2FkZGhdKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSAvL2VuZCBmb3JlYWNoIGh3bSBzYXZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGFkZGQgPSAwOyBhZGRkIDwgJHNjb3BlLmNob3NlbkRGTGlzdC5sZW5ndGg7IGFkZGQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNob3NlbkRGTGlzdFthZGRkXS5wZWFrX3N1bW1hcnlfaWQgPSByZXNwb25zZS5wZWFrX3N1bW1hcnlfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUudXBkYXRlKHsgaWQ6ICRzY29wZS5jaG9zZW5ERkxpc3RbYWRkZF0uZGF0YV9maWxlX2lkIH0sICRzY29wZS5jaG9zZW5ERkxpc3RbYWRkZF0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IC8vZW5kIGZvcmVhY2ggaHdtIHNhdmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJQZWFrIHVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRQZWFrID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW5kQmFjayA9IFt1cGRhdGVkUGVhaywgJ3VwZGF0ZWQnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uoc2VuZEJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9Oy8vZW5kIHNhdmUoKVxyXG5cclxuICAgICAgICAgICAgLy9kYXRhIGZpbGUgSUQgdG8gZ2V0IGRmIGFuZCByZW1vdmUgcGVha2lkIGZvciBwZWFrRGVsZXRlXHJcbiAgICAgICAgICAgIHZhciB1cGRhdGVERndvUGVha0lEID0gZnVuY3Rpb24gKGRmX2lkKSB7XHJcbiAgICAgICAgICAgICAgICAvL2dldCBpdCwgY2hhbmdlIHBlYWsgaWQsIHB1dCBpdCBiYWNrXHJcbiAgICAgICAgICAgICAgICBEQVRBX0ZJTEUucXVlcnkoeyBpZDogZGZfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICByZXMucGVha19zdW1tYXJ5X2lkID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUudXBkYXRlKHsgaWQ6IHJlcy5kYXRhX2ZpbGVfaWQgfSwgcmVzKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvL2RlbGV0ZSBQZWFrXHJcbiAgICAgICAgICAgICRzY29wZS5kZWxldGVQZWFrID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlbGV0ZVBlYWtNZGwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5SZW1vdmUgUGVhazwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgdGhpcyBQZWFrPzwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJPaygpXCI+T0s8L2J1dHRvbj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi13YXJuaW5nXCIgbmctY2xpY2s9XCJjYW5jZWwoKVwiPkNhbmNlbDwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9OyAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgZGVsZXRlUGVha01kbC5yZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBlYWtJRCA9ICRzY29wZS5hUGVhay5wZWFrX3N1bW1hcnlfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGV0aW1lID0gbmV3IERhdGUoJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZS5kYXRlLmdldEZ1bGxZZWFyKCksICRzY29wZS5hUGVhay5wZWFrX2RhdGUuZGF0ZS5nZXRNb250aCgpLCAkc2NvcGUuYVBlYWsucGVha19kYXRlLmRhdGUuZ2V0RGF0ZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVBlYWsucGVha19kYXRlLnRpbWUuZ2V0SG91cnMoKSwgJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZS50aW1lLmdldE1pbnV0ZXMoKSwgJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZS50aW1lLmdldFNlY29uZHMoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZSA9IGRhdGV0aW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZGVsZXRlIHRoZSBwZWFrIGFuZCB0aGVuIFBVVCBhbGwgaHdtIGFuZCBkZiB0aGF0IGhhdmUgcGVha0lEXHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBQRUFLLmRlbGV0ZSh7IGlkOiAkc2NvcGUuYVBlYWsucGVha19zdW1tYXJ5X2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2ZvciBlYWNoICRzY29wZS5ldmVudFNpdGVTZW5zb3JzIGZvciBlYWNoIGZpbGVzIGlmIGZpbGUuc2VsZWN0ZWQgPT0gdHJ1ZS4uIFBVVCBhbmQgcmVtb3ZlIFBFQUtJRFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRzY29wZS5ldmVudFNpdGVTZW5zb3JzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc1MgPSAkc2NvcGUuZXZlbnRTaXRlU2Vuc29yc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGYgPSAwOyBmIDwgdGhpc1MuZmlsZXMubGVuZ3RoOyBmKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc0YgPSB0aGlzUy5maWxlc1tmXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc0Yuc2VsZWN0ZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZURGd29QZWFrSUQodGhpc0YuZGF0YV9maWxlX2lkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2ZvciBlYWNoICRzY29wZS5ldmVudFNpdGVIV01zIGlmIGguc2VsZWN0ZWQgPT0gdHJ1ZS4uIFBVVCBhbmQgcmVtb3ZlIFBFQUtJRCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGggPSAwOyBoIDwgJHNjb3BlLmV2ZW50U2l0ZUhXTXMubGVuZ3RoOyBoKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzSCA9ICRzY29wZS5ldmVudFNpdGVIV01zW2hdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNILnNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9yZW1vdmUgcGVha0lEIGFuZCBQVVRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzSC5wZWFrX3N1bW1hcnlfaWQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVUaGlzSFdNID0gZm9ybWF0U2VsZWN0ZWRIV00odGhpc0gpOyAvL25lZWQgdG8gZm9ybWF0IGl0IHRvIHJlbW92ZSBhbGwgdGhlIHNpdGUgc3R1ZmZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIV00udXBkYXRlKHsgaWQ6IHRoaXNILmh3bV9pZCB9LCB1cGRhdGVUaGlzSFdNKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJQZWFrIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW5kQmFjayA9IFtcImRlXCIsICdkZWxldGVkJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHNlbmRCYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9jcmVhdGUgUGVha1xyXG4gICAgICAgICAgICAkc2NvcGUuY3JlYXRlUGVhayA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgLy9maXJzdCBkZXRlcm1pbmUgdGhhdCB0aGV5IGRpZCBjaG9vb3NlIGEgaHdtIG9yIGRhdGEgZmlsZSBmb3IgaW50ZXJwcmV0YXRvaW5cclxuICAgICAgICAgICAgICAgIHZhciBpc0h3bUNoZWNrZWQgPSBmYWxzZTsgdmFyIGlzREZDaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmV2ZW50U2l0ZUhXTXMsIGZ1bmN0aW9uIChzaHdtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNod20uc2VsZWN0ZWQpIGlzSHdtQ2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuZXZlbnRTaXRlU2Vuc29ycywgZnVuY3Rpb24gKHNzZW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBmSSA9IDA7IGZJIDwgc3Nlbi5maWxlcy5sZW5ndGg7IGZJKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNzZW4uZmlsZXNbZkldLnNlbGVjdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0RGQ2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmSSA9IHNzZW4uZmlsZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNId21DaGVja2VkIHx8IGlzREZDaGVja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy90aGV5IGNob3NlIG9uZSwgYnV0IGlzIGl0IHZhbGlkXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjcmVhdGVkUGVhayA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2Zvcm1hdCB0byBjb21iaW5lIHRoZSBkYXRlIGFuZCB0aW1lIGJhY2sgdG9nZXRoZXIgaW50byAxIGRhdGUgb2JqZWN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRldGltZSA9IG5ldyBEYXRlKCRzY29wZS5hUGVhay5wZWFrX2RhdGUuZGF0ZS5nZXRGdWxsWWVhcigpLCAkc2NvcGUuYVBlYWsucGVha19kYXRlLmRhdGUuZ2V0TW9udGgoKSwgJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZS5kYXRlLmdldERhdGUoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZS50aW1lLmdldEhvdXJzKCksICRzY29wZS5hUGVhay5wZWFrX2RhdGUudGltZS5nZXRNaW51dGVzKCksICRzY29wZS5hUGVhay5wZWFrX2RhdGUudGltZS5nZXRTZWNvbmRzKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVBlYWsucGVha19kYXRlID0gZGF0ZXRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYWxXaXRoVGltZVN0YW1wYjRTZW5kKCk7IC8vVVRDIG9yIGxvY2FsP1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFBFQUsuc2F2ZSgkc2NvcGUuYVBlYWspLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkUGVhayA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy91cGRhdGUgdGhlIGNob3NlbiBod21zL2RhdGEgZmlsZXMgd2l0aCBwZWFrIGlkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBoID0gMDsgaCA8ICRzY29wZS5jaG9zZW5IV01MaXN0Lmxlbmd0aDsgaCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNob3NlbkhXTUxpc3RbaF0ucGVha19zdW1tYXJ5X2lkID0gcmVzcG9uc2UucGVha19zdW1tYXJ5X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhXTS51cGRhdGUoeyBpZDogJHNjb3BlLmNob3NlbkhXTUxpc3RbaF0uaHdtX2lkIH0sICRzY29wZS5jaG9zZW5IV01MaXN0W2hdKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gLy9lbmQgZm9yZWFjaCBod20gc2F2ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCAkc2NvcGUuY2hvc2VuREZMaXN0Lmxlbmd0aDsgZCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNob3NlbkRGTGlzdFtkXS5wZWFrX3N1bW1hcnlfaWQgPSByZXNwb25zZS5wZWFrX3N1bW1hcnlfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgREFUQV9GSUxFLnVwZGF0ZSh7IGlkOiAkc2NvcGUuY2hvc2VuREZMaXN0W2RdLmRhdGFfZmlsZV9pZCB9LCAkc2NvcGUuY2hvc2VuREZMaXN0W2RdKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gLy9lbmQgZm9yZWFjaCBod20gc2F2ZVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiUGVhayBjcmVhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbmRCYWNrID0gW2NyZWF0ZWRQZWFrLCAnY3JlYXRlZCddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uoc2VuZEJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbm8gZGF0YSBmaWxlIG9yIGh3bSBjaGVja2VkIGFzIHVzZWQsIHNob3cgbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2V0T25lTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+WW91IG11c3QgY2hvb3NlIGF0IGxlYXN0IG9uZSBIV00gb3IgRGF0YSBGaWxlIHRvIHVzZSBmb3IgaW50ZXJwcmV0YXRpb24gZm9yIHRoaXMgUGVhayBTdW1tYXJ5LjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwiT2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07Ly9lbmQgY3JlYXRlKClcclxuICAgICAgXHJcbiAgICAgICAgICAgICRzY29wZS5zaG93SW5jb21wbGV0ZURGSW5mbyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbmNvbXBsZXRlTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5JbmNvbXBsZXRlIERhdGEgRmlsZTwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPkFsbCBSREdzLCBNZXQgU3RhdGlvbiwgYW5kIFJhaW4gR2FnZSBzZW5zb3JzIHJlcXVpcmUgZGF0YSBmaWxlIGluZm9ybWF0aW9uIGluIG9yZGVyIHRvIHVzZSBhcyBwcmltYXJ5IGluIHRoZSBQZWFrIHN1bW1hcnkuPC9wPicgKyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxwPlBsZWFzZSByZXZpc2l0IHRoZSBSZXRyaWV2ZWQgU2Vuc29yIGFuZCBjbGljayBvbiBOV0lTIERhdGEgQ29ubmVjdGlvbiB0byBhZGQgYSBsaW5rIHRvIHRoZSBOV0lTIGRhdGEgaWYgeW91IHdhbnQgdG8gdXNlIGFzIHByaW1hcnkuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cIk9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRzY29wZS5zaG93SW5jb21wbGV0ZUhXTUluZm8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5jb21wbGV0ZU1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+SW5jb21wbGV0ZSBIV008L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5TdXJ2ZXkgZGF0ZSBhbmQgZWxldmF0aW9uIGFyZSByZXF1aXJlZCBpbiBvcmRlciB0byB1c2UgYXMgcHJpbWFyeSBpbiB0aGUgUGVhayBzdW1tYXJ5LjwvcD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxwPlBsZWFzZSByZXZpc2l0IHRoZSBIV00gYW5kIGFkZCBTdXJ2ZXkgZGF0ZSBhbmQgZWxldmF0aW9uIGlmIHlvdSB3YW50IHRvIHVzZSBhcyBwcmltYXJ5LjwvcD48cD5UaGUgSFdNIGNhbiBiZSB1c2VkIGZvciBpbnRlcnByZWF0aW9uIHdpdGhvdXRoIGEgZmluYWwgZWxldmF0aW9uLjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJPaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd1JldHJpZXZlSW5mbyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBnb1JldHJpZXZlTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5EZXBsb3llZCBTZW5zb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGlzIHNlbm9zciBuZWVkcyB0byBiZSByZXRyaWV2ZWQgYmVmb3JlIGEgUGVhayBjYW4gYmUgY3JlYXRlZC48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwiT2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsgLy8gbG9hZGluZy4uXHJcbiAgICAgICAgfV0pOyAvL2VuZCBIV01cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFNUTkNvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NUTkNvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgU1ROQ29udHJvbGxlcnMuY29udHJvbGxlcigncGVha0N0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRjb29raWVzJywgJyRsb2NhdGlvbicsICckc3RhdGUnLCAnJGh0dHAnLCAnJHVpYk1vZGFsJywgJyRmaWx0ZXInLCAnJHRpbWVvdXQnLCAndGhpc1NpdGUnLCAnU2l0ZV9GaWxlcycsICd0aGlzU2l0ZVBlYWtzJywgJ2FsbFZlcnREYXR1bXMnLCAnYWxsSFdNUXVhbGl0aWVzJywgJ2FsbEhXTVR5cGVzJywgJ1BFQUsnLCAnSFdNJywgJ01FTUJFUicsICdTSVRFJywnSU5TVF9DT0xMX0NPTkRJVElPTicsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICRsb2NhdGlvbiwgJHN0YXRlLCAkaHR0cCwgJHVpYk1vZGFsLCAkZmlsdGVyLCAkdGltZW91dCwgdGhpc1NpdGUsIFNpdGVfRmlsZXMsIHRoaXNTaXRlUGVha3MsIGFsbFZlcnREYXR1bXMsIGFsbEhXTVF1YWxpdGllcywgYWxsSFdNVHlwZXMsIFBFQUssIEhXTSwgTUVNQkVSLCBTSVRFLElOU1RfQ09MTF9DT05ESVRJT04pIHtcclxuICAgICAgICAgICAgaWYgKCRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gdW5kZWZpbmVkIHx8ICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmF1dGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbG9naW4nKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vZ2xvYmFsIHZhcnNcclxuICAgICAgICAgICAgICAgICRzY29wZS5wZWFrQ291bnQgPSB7IHRvdGFsOiB0aGlzU2l0ZVBlYWtzLmxlbmd0aCB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVQZWFrcyA9IHRoaXNTaXRlUGVha3M7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9mb3IgdGhpcyB0byB3b3JrLCBJJ2QgbmVlZCB0byBicmluZyBpbiBIV01zIGFuZCBEYXRhIEZpbGVzKHRocm91Z2ggc2Vuc29ycyBzaW5jZSB0aGF0IGhvbGRzIGV2ZW50KSBmb3IgdGhpcyBldmVudCBhbmQgZmlsdGVyIGJhc2VkIG9uIHRob3NlIC4uIG9yIGp1c3QgYWRkIGV2ZW50aWQgdG8gcGVha1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudE5hbWUnKTsgfSwgZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlc3Npb25FdmVudE5hbWUgPSBuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkID8gbmV3VmFsdWUgOiBcIkFsbCBFdmVudHNcIjtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vzc2lvbkV2ZW50RXhpc3RzID0gJHNjb3BlLnNlc3Npb25FdmVudE5hbWUgIT0gXCJBbGwgRXZlbnRzXCIgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVQZWFrcyA9IHRoaXNTaXRlUGVha3MuZmlsdGVyKGZ1bmN0aW9uIChwKSB7IHJldHVybiBwLmV2ZW50X25hbWUgPT0gJHNjb3BlLnNlc3Npb25FdmVudE5hbWU7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGVha0NvdW50ID0geyB0b3RhbDogJHNjb3BlLlNpdGVQZWFrcy5sZW5ndGggfTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZVBlYWtzID0gdGhpc1NpdGVQZWFrcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBlYWtDb3VudCA9IHsgdG90YWw6ICRzY29wZS5TaXRlUGVha3MubGVuZ3RoIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9jcmVhdGUvZWRpdCBhIHBlYWsgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1BlYWtNb2RhbCA9IGZ1bmN0aW9uIChwZWFrQ2xpY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSB0cnVlOy8vIGxvYWRpbmcuLi8vICQoXCIucGFnZS1sb2FkaW5nXCIpLnJlbW92ZUNsYXNzKFwiaGlkZGVuXCIpOyAvL2xvYWRpbmcuLi5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXhDbGlja2VkID0gJHNjb3BlLlNpdGVQZWFrcy5pbmRleE9mKHBlYWtDbGlja2VkKTtcclxuICAgICAgICAgICAgICAgICAgICAvL21vZGFsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnUEVBS21vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAncGVha01vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdsZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ3JlcC1kaWFsb2cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxDb2xsZWN0Q29uZGl0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlNUX0NPTExfQ09ORElUSU9OLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFZlcnREYXR1bXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWxsVmVydERhdHVtcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUGVhazogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWFrQ2xpY2tlZCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUEVBSy5xdWVyeSh7IGlkOiBwZWFrQ2xpY2tlZC5wZWFrX3N1bW1hcnlfaWQgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgcmV0dXJuIFwiZW1wdHlcIjsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNQZWFrREZzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBlYWtDbGlja2VkICE9PSAwKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBFQUsuZ2V0UGVha1N1bW1hcnlERnMoe2lkOiBwZWFrQ2xpY2tlZC5wZWFrX3N1bW1hcnlfaWR9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVha1NpdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1NpdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsTWVtYmVyczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1FTUJFUi5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxFdmVudEhXTXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSFdNLmdldEZpbHRlcmVkSFdNcyh7IEV2ZW50OiAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudElEJyksIEV2ZW50U3RhdHVzOiAwIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFNpdGVGaWxlczogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNpdGVfRmlsZXMuZ2V0QWxsU2l0ZUZpbGVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsU2l0ZVNlbnNvcnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU0lURS5nZXRTaXRlU2Vuc29ycyh7IGlkOiB0aGlzU2l0ZS5zaXRlX2lkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGNyZWF0ZWRQZWFrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaXMgdGhlcmUgYSBuZXcgUGVhayxlZGl0ZWQgcGVhayBvciBqdXN0IGNsb3NlZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXRlZFBlYWtbMV0gPT0gJ2NyZWF0ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZVBlYWtzLnB1c2goY3JlYXRlZFBlYWtbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBlYWtDb3VudC50b3RhbCA9ICRzY29wZS5TaXRlUGVha3MubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcmVhdGVkUGVha1sxXSA9PSAndXBkYXRlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhpcyBpcyBmcm9tIGVkaXQgLS0gcmVmcmVzaCBwYWdlP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVQZWFrc1tpbmRleENsaWNrZWRdID0gY3JlYXRlZFBlYWtbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZWRQZWFrWzFdID09ICdkZWxldGVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVQZWFrcy5zcGxpY2UoaW5kZXhDbGlja2VkLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wZWFrQ291bnQudG90YWwgPSAkc2NvcGUuU2l0ZVBlYWtzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9OyAvL2VuZCBzaG93SFdNTW9kYWwgZnVuY3Rpb25cclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XSk7XHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgTW9kYWxDb250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdNb2RhbENvbnRyb2xsZXJzJyk7XHJcbiAgICBNb2RhbENvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ09QbW9kYWxDdHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckaHR0cCcsICckc2NlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgJyR1aWJNb2RhbCcsICdTRVJWRVJfVVJMJywgJ0ZJTEVfU1RBTVAnLCAnU2l0ZV9GaWxlcycsICdhbGxEcm9wZG93bnMnLCAndGhpc09QJywgJ3RoaXNPUENvbnRyb2xzJywgJ29wU2l0ZScsICdhZ2VuY3lMaXN0JywgJ2FsbE1lbWJlcnMnLCAnT0JKRUNUSVZFX1BPSU5UJywgJ09QX0NPTlRST0xfSURFTlRJRklFUicsICdPUF9NRUFTVVJFJywgJ1NPVVJDRScsICdGSUxFJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkY29va2llcywgJGh0dHAsICRzY2UsICR1aWJNb2RhbEluc3RhbmNlLCAkdWliTW9kYWwsIFNFUlZFUl9VUkwsIEZJTEVfU1RBTVAsIFNpdGVfRmlsZXMsIGFsbERyb3Bkb3ducywgdGhpc09QLCB0aGlzT1BDb250cm9scywgb3BTaXRlLCBhZ2VuY3lMaXN0LCBhbGxNZW1iZXJzLCBPQkpFQ1RJVkVfUE9JTlQsIE9QX0NPTlRST0xfSURFTlRJRklFUiwgT1BfTUVBU1VSRSwgU09VUkNFLCBGSUxFKSB7XHJcbiAgICAgICAgICAgIC8vZGVmYXVsdHMgZm9yIHJhZGlvIGJ1dHRvbnNcclxuICAgICAgICAgICAgLy9kcm9wZG93bnNcclxuICAgICAgICAgICAgJHNjb3BlLnNlcnZlclVSTCA9IFNFUlZFUl9VUkw7XHJcbiAgICAgICAgICAgICRzY29wZS52aWV3ID0geyBPUHZhbDogJ2RldGFpbCcgfTtcclxuICAgICAgICAgICAgJHNjb3BlLmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlOyAvL0xvYWRpbmcuLi4gICAgXHJcbiAgICAgICAgICAgICRzY29wZS5kbCA9IHsgZGxPcGVuOiB0cnVlLCBkbEZpbGVPcGVuOiBmYWxzZSB9Oy8vYWNjb3JkaW9uc1xyXG4gICAgICAgICAgICAkc2NvcGUuT1BUeXBlTGlzdCA9IGFsbERyb3Bkb3duc1swXTtcclxuICAgICAgICAgICAgJHNjb3BlLkhETGlzdCA9IGFsbERyb3Bkb3duc1sxXTtcclxuICAgICAgICAgICAgJHNjb3BlLkhDb2xsZWN0TWV0aG9kTGlzdCA9IGFsbERyb3Bkb3duc1syXTtcclxuICAgICAgICAgICAgJHNjb3BlLlZEYXR1bUxpc3QgPSBhbGxEcm9wZG93bnNbM107XHJcbiAgICAgICAgICAgICRzY29wZS5WQ29sbGVjdE1ldGhvZExpc3QgPSBhbGxEcm9wZG93bnNbNF07XHJcbiAgICAgICAgICAgICRzY29wZS5PUFF1YWxpdHlMaXN0ID0gYWxsRHJvcGRvd25zWzVdO1xyXG4gICAgICAgICAgICAkc2NvcGUuZmlsZVR5cGVMaXN0ID0gYWxsRHJvcGRvd25zWzZdOyAvL3VzZWQgaWYgY3JlYXRpbmcvZWRpdGluZyBPUCBmaWxlICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICRzY29wZS5odG1sRGVzY3JpcHRpb25UaXAgPSAkc2NlLnRydXN0QXNIdG1sKCdQbGVhc2UgZGVzY3JpYmUgbG9jYXRpb24gYW5kIHR5cGUgb2YgbWFyayA8ZW0+aWUuIFxcJ2NoaXNlbGVkIHNxdWFyZSBvbiB0aGlyZCBzaWRld2FsayBibG9jayBvbiB0aGUgc291dGggc2lkZSBvZiB0aGUgc3RyZWV0XFwnPC9lbT4nKTtcclxuICAgICAgICAgICAgJHNjb3BlLkhXTWZpbGVJc1VwbG9hZGluZyA9IGZhbHNlOyAvL0xvYWRpbmcuLi4gICAgXHJcbiAgICAgICAgICAgICRzY29wZS5PUCA9IHt9O1xyXG4gICAgICAgICAgICAkc2NvcGUucmVtb3ZlT1BDYXJyYXkgPSBbXTsgLy9ob2xkZXIgaWYgdGhleSByZW1vdmUgYW55IE9QIGNvbnRyb2xzXHJcbiAgICAgICAgICAgICRzY29wZS50aGlzT1BzaXRlID0gb3BTaXRlOyAvL3RoaXMgT1AncyBTSVRFXHJcbiAgICAgICAgICAgICRzY29wZS5hZGRlZElkZW50aWZpZXJzID0gW107IC8vaG9sZGVyIGZvciBhZGRlZCBJZGVudGlmaWVyc1xyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd0NvbnRyb2xJRGlucHV0ID0gZmFsc2U7IC8vaW5pdGlhbGx5IGhpZGUgdGhlIGFyZWEgY29udGFpbmluZyBhZGRlZCBjb250cm9sIElkZW50aWZpZXJzXHJcbiAgICAgICAgICAgICRzY29wZS5ETVMgPSB7fTsgLy9vYmplY3QgZm9yIERlZyBNaW4gU2VjIHZhbHVlc1xyXG4gICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzID0gU2l0ZV9GaWxlcy5nZXRBbGxTaXRlRmlsZXMoKTtcclxuICAgICAgICAgICAgJHNjb3BlLk9QRmlsZXMgPSB0aGlzT1AgIT09IFwiZW1wdHlcIiA/ICRzY29wZS5hbGxTRmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChzZikgeyByZXR1cm4gc2Yub2JqZWN0aXZlX3BvaW50X2lkID09IHRoaXNPUC5vYmplY3RpdmVfcG9pbnRfaWQ7IH0pIDogW107Ly8gb3BGaWxlczsgLy9ob2xkZXIgZm9yIG9wIGZpbGVzIGFkZGVkXHJcbiAgICAgICAgICAgICRzY29wZS5vcEltYWdlRmlsZXMgPSAkc2NvcGUuT1BGaWxlcy5maWx0ZXIoZnVuY3Rpb24gKG9wZikgeyByZXR1cm4gb3BmLmZpbGV0eXBlX2lkID09PSAxOyB9KTsgLy9pbWFnZSBmaWxlcyBmb3IgY2Fyb3VzZWxcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IGZhbHNlOyAvL2hpZGRlbiBmb3JtIHRvIGFkZCBmaWxlIHRvIG9wXHJcbiAgICAgICAgICAgIC8vbWFrZSB1bmNlcnRhaW50eSBjbGVhcmVkIGFuZCBkaXNhYmxlZCB3aGVuICd1bnF1YW50aWZpZWQnIGlzIGNoZWNrZWRcclxuICAgICAgICAgICAgJHNjb3BlLlVucXVhbnRDaGVja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5vcENvcHkudW5xdWFudGlmaWVkID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9wQ29weS51bmNlcnRhaW50eSA9IFwiXCI7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyNyZWdpb24gRklMRSBTVFVGRlxyXG4gICAgICAgICAgICAkc2NvcGUuc3RhbXAgPSBGSUxFX1NUQU1QLmdldFN0YW1wKCk7ICRzY29wZS5maWxlSXRlbUV4aXN0cyA9IHRydWU7XHJcbiAgICAgICAgICAgIC8vbmVlZCB0byByZXVwbG9hZCBmaWxlSXRlbSB0byB0aGlzIGV4aXN0aW5nIGZpbGUgT1IgQ2hhbmdlIG91dCBleGlzdGluZyBmaWxlSXRlbSBmb3IgbmV3IG9uZVxyXG4gICAgICAgICAgICAkc2NvcGUuc2F2ZUZpbGVVcGxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmlsZVBhcnRzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIEZpbGVFbnRpdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9pZDogJHNjb3BlLmFGaWxlLmZpbGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICRzY29wZS5hRmlsZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJHNjb3BlLmFGaWxlLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwaG90b19kaXJlY3Rpb246ICRzY29wZS5hRmlsZS5waG90b19kaXJlY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlX2RkOiAkc2NvcGUuYUZpbGUubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZV9kZDogJHNjb3BlLmFGaWxlLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9kYXRlOiAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBod21faWQ6ICRzY29wZS5hRmlsZS5od21faWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6ICRzY29wZS5hRmlsZS5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxldHlwZV9pZDogJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VfaWQ6ICRzY29wZS5hRmlsZS5zb3VyY2VfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6ICRzY29wZS5hRmlsZS5wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhX2ZpbGVfaWQ6ICRzY29wZS5hRmlsZS5kYXRhX2ZpbGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnRfaWQ6ICRzY29wZS5hRmlsZS5pbnN0cnVtZW50X2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwaG90b19kYXRlOiAkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNfbndpczogJHNjb3BlLmFGaWxlLmlzX253aXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdGl2ZV9wb2ludF9pZDogJHNjb3BlLmFGaWxlLm9iamVjdGl2ZV9wb2ludF9pZFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgRmlsZTogJHNjb3BlLmFGaWxlLkZpbGUxICE9PSB1bmRlZmluZWQgPyAkc2NvcGUuYUZpbGUuRmlsZTEgOiAkc2NvcGUuYUZpbGUuRmlsZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vbmVlZCB0byBwdXQgdGhlIGZpbGVQYXJ0cyBpbnRvIGNvcnJlY3QgZm9ybWF0IGZvciBwb3N0XHJcbiAgICAgICAgICAgICAgICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICAgICAgICAgIGZkLmFwcGVuZChcIkZpbGVFbnRpdHlcIiwgSlNPTi5zdHJpbmdpZnkoZmlsZVBhcnRzLkZpbGVFbnRpdHkpKTtcclxuICAgICAgICAgICAgICAgIGZkLmFwcGVuZChcIkZpbGVcIiwgZmlsZVBhcnRzLkZpbGUpO1xyXG4gICAgICAgICAgICAgICAgLy9ub3cgUE9TVCBpdCAoZmlsZXBhcnRzKVxyXG4gICAgICAgICAgICAgICAgRklMRS51cGxvYWRGaWxlKGZkKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChmcmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgVXBsb2FkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgZnJlc3BvbnNlLmZpbGVCZWxvbmdzVG8gPSBcIk9iamVjdGl2ZSBQb2ludCBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNyYyA9ICRzY29wZS5zZXJ2ZXJVUkwgKyAnL0ZpbGVzLycgKyAkc2NvcGUuYUZpbGUuZmlsZV9pZCArICcvSXRlbScgKyBGSUxFX1NUQU1QLmdldFN0YW1wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgRklMRV9TVEFNUC5zZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGFtcCA9IEZJTEVfU1RBTVAuZ2V0U3RhbXAoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLkZpbGUxLnR5cGUuaW5kZXhPZihcImltYWdlXCIpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzUGhvdG8gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSAkc2NvcGUuaXNQaG90byA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5uYW1lID0gZnJlc3BvbnNlLm5hbWU7ICRzY29wZS5hRmlsZS5wYXRoID0gZnJlc3BvbnNlLnBhdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5GaWxlMSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5GaWxlID0gJHNjb3BlLmFGaWxlLkZpbGUxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuRmlsZTEgPSB1bmRlZmluZWQ7IC8vcHV0IGl0IGFzIGZpbGUgYW5kIHJlbW92ZSBpdCBmcm9tIDFcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QRmlsZXMuc3BsaWNlKCRzY29wZS5leGlzdEZpbGVJbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmcmVzcG9uc2UuZmlsZXR5cGVfaWQgPT09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9wSW1hZ2VGaWxlcy5zcGxpY2UoJHNjb3BlLmV4aXN0RmlsZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9wSW1hZ2VGaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzWyRzY29wZS5hbGxTRmlsZUluZGV4XSA9IGZyZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuYWxsU0ZpbGVzKTsgLy91cGRhdGVzIHRoZSBmaWxlIGxpc3Qgb24gdGhlIHNpdGVkYXNoYm9hcmRcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlSXRlbUV4aXN0cyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGZpbGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9zaG93IGEgbW9kYWwgd2l0aCB0aGUgbGFyZ2VyIGltYWdlIGFzIGEgcHJldmlldyBvbiB0aGUgcGhvdG8gZmlsZSBmb3IgdGhpcyBvcFxyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd0ltYWdlTW9kYWwgPSBmdW5jdGlvbiAoaW1hZ2UpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbWFnZU1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+SW1hZ2UgRmlsZSBQcmV2aWV3PC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PGltZyBuZy1zcmM9XCJ7e3NldFNSQ319XCIgLz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6Wyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW1hZ2VJZCA9IGltYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2V0U1JDID0gU0VSVkVSX1VSTCArICcvRmlsZXMvJyArICRzY29wZS5pbWFnZUlkICsgJy9JdGVtJztcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnbWQnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vd2FudCB0byBhZGQgb3IgZWRpdCBmaWxlXHJcbiAgICAgICAgICAgICRzY29wZS5zaG93RmlsZSA9IGZ1bmN0aW9uIChmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZVR5cGVzID0gJHNjb3BlLmZpbGVUeXBlTGlzdDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY2llcyA9IGFnZW5jeUxpc3Q7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXhpc3RGaWxlSW5kZXggPSAtMTsgJHNjb3BlLmV4aXN0SU1HRmlsZUluZGV4ID0gLTE7ICRzY29wZS5hbGxTRmlsZUluZGV4ID0gLTE7IC8vaW5kZXhlcyBmb3Igc3BsaWNlL2NoYW5nZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlID0ge307IC8vaG9sZGVyIGZvciBmaWxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZSA9IHt9OyAvL2hvbGRlciBmb3IgZmlsZSBzb3VyY2VcclxuICAgICAgICAgICAgICAgIC8vT1Agd2lsbCBub3QgaGF2ZSBkYXRhZmlsZSAgICAgJHNjb3BlLmRhdGFmaWxlID0ge307IC8vaG9sZGVyIGZvciBmaWxlIGRhdGFmaWxlXHJcbiAgICAgICAgICAgICAgICBpZiAoZmlsZSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZWRpdCBvcCBmaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4aXN0RmlsZUluZGV4ID0gJHNjb3BlLk9QRmlsZXMuaW5kZXhPZihmaWxlKTsgJHNjb3BlLmFsbFNGaWxlSW5kZXggPSAkc2NvcGUuYWxsU0ZpbGVzLmluZGV4T2YoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4aXN0SU1HRmlsZUluZGV4ID0gJHNjb3BlLm9wSW1hZ2VGaWxlcy5sZW5ndGggPiAwID8gJHNjb3BlLm9wSW1hZ2VGaWxlcy5pbmRleE9mKGZpbGUpIDogLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlID0gYW5ndWxhci5jb3B5KGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5maWxlVHlwZSA9ICRzY29wZS5maWxlVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChmdCkgeyByZXR1cm4gZnQuZmlsZXR5cGVfaWQgPT0gJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkOyB9KVswXS5maWxldHlwZTtcclxuICAgICAgICAgICAgICAgICAgICBGSUxFLmdldEZpbGVJdGVtKHsgaWQ6ICRzY29wZS5hRmlsZS5maWxlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlSXRlbUV4aXN0cyA9IHJlc3BvbnNlLkxlbmd0aCA+IDAgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9kZXRlcm1pbmUgaWYgZXhpc3RpbmcgZmlsZSBpcyBhIHBob3RvIChldmVuIGlmIHR5cGUgaXMgbm90IClcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLm5hbWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZkkgPSAkc2NvcGUuYUZpbGUubmFtZS5sYXN0SW5kZXhPZihcIi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlRXh0ID0gJHNjb3BlLmFGaWxlLm5hbWUuc3Vic3RyaW5nKGZJICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlRXh0Lm1hdGNoKC8oanBnfEpQR3xqcGVnfEpQRUd8cG5nfFBOR3xnaWZ8R0lGKSQvKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzUGhvdG8gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgJHNjb3BlLmlzUGhvdG8gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNyYyA9ICRzY29wZS5zZXJ2ZXJVUkwgKyAnL0ZpbGVzLycgKyAkc2NvcGUuYUZpbGUuZmlsZV9pZCArICcvSXRlbScgKyBGSUxFX1NUQU1QLmdldFN0YW1wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5hRmlsZS5maWxlX2RhdGUpOyAvL2RhdGUgZm9yIHZhbGlkaXR5IG9mIGZvcm0gb24gUFVUXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5waG90b19kYXRlICE9PSB1bmRlZmluZWQpICRzY29wZS5hRmlsZS5waG90b19kYXRlID0gbmV3IERhdGUoJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUpOyAvL2RhdGUgZm9yIHZhbGlkaXR5IG9mIGZvcm0gb24gUFVUXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGUuc291cmNlX2lkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNPVVJDRS5xdWVyeSh7IGlkOiBmaWxlLnNvdXJjZV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZSA9IHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZS5GVUxMbmFtZSA9ICRzY29wZS5hU291cmNlLnNvdXJjZV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hZGQgYWdlbmN5IG5hbWUgdG8gcGhvdG8gY2FwdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5maWxldHlwZV9pZCA9PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY3lOYW1lRm9yQ2FwID0gJHNjb3BlLmFnZW5jaWVzLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gJHNjb3BlLmFTb3VyY2UuYWdlbmN5X2lkOyB9KVswXS5hZ2VuY3lfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfS8vZW5kIGlmIHNvdXJjZVxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIGV4aXN0aW5nIGZpbGVcclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5maWxlX2RhdGUgPSBuZXcgRGF0ZSgpOyAkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT0gJGNvb2tpZXMuZ2V0KCdtSUQnKTsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UuRlVMTG5hbWUgPSAkc2NvcGUuYVNvdXJjZS5mbmFtZSArIFwiIFwiICsgJHNjb3BlLmFTb3VyY2UubG5hbWU7XHJcbiAgICAgICAgICAgICAgICB9IC8vZW5kIG5ldyBmaWxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVGb3JtID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnVwZGF0ZUFnZW5jeUZvckNhcHRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5maWxldHlwZV9pZCA9PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWdlbmN5TmFtZUZvckNhcCA9ICRzY29wZS5hZ2VuY2llcy5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuYWdlbmN5X2lkID09ICRzY29wZS5hU291cmNlLmFnZW5jeV9pZDsgfSlbMF0uYWdlbmN5X25hbWU7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvL2NyZWF0ZSB0aGlzIG5ldyBmaWxlXHJcbiAgICAgICAgICAgICRzY29wZS5jcmVhdGVGaWxlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZUlzVXBsb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcG9zdCBzb3VyY2UgZmlyc3QgdG8gZ2V0IHNvdXJjZV9pZFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNvdXJjZS5hZ2VuY3lfaWQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoZVNvdXJjZSA9IHsgc291cmNlX25hbWU6ICRzY29wZS5hU291cmNlLkZVTExuYW1lLCBhZ2VuY3lfaWQ6ICRzY29wZS5hU291cmNlLmFnZW5jeV9pZH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbm93IFBPU1QgU09VUkNFLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgU09VUkNFLnNhdmUodGhlU291cmNlKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90aGVuIFBPU1QgZmlsZVBhcnRzIChTZXJ2aWNlcyBwb3B1bGF0ZSBQQVRIKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVQYXJ0cyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlRW50aXR5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlX2lkOiAkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICRzY29wZS5hRmlsZS5GaWxlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVfZGF0ZTogJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9fZGF0ZTogJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAkc2NvcGUuYUZpbGUuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6ICRzY29wZS50aGlzT1BzaXRlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZV9pZDogcmVzcG9uc2Uuc291cmNlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaG90b19kaXJlY3Rpb246ICRzY29wZS5hRmlsZS5waG90b19kaXJlY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlX2RkOiAkc2NvcGUuYUZpbGUubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZV9kZDogJHNjb3BlLmFGaWxlLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0aXZlX3BvaW50X2lkOiAkc2NvcGUuT1Aub2JqZWN0aXZlX3BvaW50X2lkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlOiAkc2NvcGUuYUZpbGUuRmlsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbmVlZCB0byBwdXQgdGhlIGZpbGVQYXJ0cyBpbnRvIGNvcnJlY3QgZm9ybWF0IGZvciBwb3N0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZkLmFwcGVuZChcIkZpbGVFbnRpdHlcIiwgSlNPTi5zdHJpbmdpZnkoZmlsZVBhcnRzLkZpbGVFbnRpdHkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZkLmFwcGVuZChcIkZpbGVcIiwgZmlsZVBhcnRzLkZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3cgUE9TVCBpdCAoZmlsZXBhcnRzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRklMRS51cGxvYWRGaWxlKGZkKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChmcmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgVXBsb2FkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJlc3BvbnNlLmZpbGVCZWxvbmdzVG8gPSBcIk9iamVjdGl2ZSBQb2ludCBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZJTEVfU1RBTVAuc2V0U3RhbXAoKTsgLy9ob3BlZnVsbHkgdXBkYXRlIHRoZSBmaWxlcyBpbiB0aGUgY2Fyb3VzZWwgPz8/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZyZXNwb25zZS5maWxldHlwZV9pZCA9PT0gMSkgJHNjb3BlLm9wSW1hZ2VGaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IGZhbHNlOyAkc2NvcGUuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgU291cmNlIGluZm86IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgc291cmNlLnNhdmUoKVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0vL2VuZCB2YWxpZFxyXG4gICAgICAgICAgICB9Oy8vZW5kIGNyZWF0ZSgpXHJcblxyXG4gICAgICAgICAgICAvL3VwZGF0ZSB0aGlzIGZpbGVcclxuICAgICAgICAgICAgJHNjb3BlLnNhdmVGaWxlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZUlzVXBsb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAvL29ubHkgcGhvdG8gb3Igb3RoZXIgZmlsZSB0eXBlIChubyBkYXRhIGZpbGUgaGVyZSlcclxuICAgICAgICAgICAgICAgICAgICAvL3B1dCBzb3VyY2Ugb3IgZGF0YWZpbGUsIHB1dCBmaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdoYXRraW5kID0gJHNjb3BlLmFGaWxlLmZpbGVCZWxvbmdzVG87XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFTb3VyY2Uuc291cmNlX2lkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcG9zdCBhZ2FpbiAoaWYgbm8gY2hhbmdlLCB3aWxsIHJldHVybiBleGlzdGluZyBvbmUuIGlmIGVkaXRlZCwgd2lsbCBjcmVhdGUgYSBuZXcgb25lIC0taW5zdGVhZCBvZiBlZGl0aW5nIGFsbCBmaWxlcyB0aGF0IHVzZSB0aGlzIHNvdXJjZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoZVNvdXJjZSA9IHsgc291cmNlX25hbWU6ICRzY29wZS5hU291cmNlLkZVTExuYW1lLCBhZ2VuY3lfaWQ6ICRzY29wZS5hU291cmNlLmFnZW5jeV9pZCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTT1VSQ0Uuc2F2ZSh0aGVTb3VyY2UpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1NPVVJDRS51cGRhdGUoeyBpZDogJHNjb3BlLmFTb3VyY2Uuc291cmNlX2lkIH0sICRzY29wZS5hU291cmNlKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5zb3VyY2VfaWQgPSByZXNwb25zZS5zb3VyY2VfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgIC8vICAgU09VUkNFLnVwZGF0ZSh7IGlkOiAkc2NvcGUuYVNvdXJjZS5zb3VyY2VfaWQgfSwgJHNjb3BlLmFTb3VyY2UpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRklMRS51cGRhdGUoeyBpZDogJHNjb3BlLmFGaWxlLmZpbGVfaWQgfSwgJHNjb3BlLmFGaWxlKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChmaWxlUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlUmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiT2JqZWN0aXZlIFBvaW50IEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BGaWxlc1skc2NvcGUuZXhpc3RGaWxlSW5kZXhdID0gZmlsZVJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZXNbJHNjb3BlLmFsbFNGaWxlSW5kZXhdID0gZmlsZVJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgJHNjb3BlLmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGZpbGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlOyAvL0xvYWRpbmcuLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBzb3VyY2U6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIHZhbGlkXHJcbiAgICAgICAgICAgIH07Ly9lbmQgc2F2ZSgpXHJcblxyXG4gICAgICAgICAgICAvL2RlbGV0ZSB0aGlzIGZpbGVcclxuICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZUZpbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgRGVsZXRlTW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLmFGaWxlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBEZWxldGVNb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChmaWxlVG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgRklMRS5kZWxldGUoeyBpZDogZmlsZVRvUmVtb3ZlLmZpbGVfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBSZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BGaWxlcy5zcGxpY2UoJHNjb3BlLmV4aXN0RmlsZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlcy5zcGxpY2UoJHNjb3BlLmFsbFNGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3BJbWFnZUZpbGVzLnNwbGljZSgkc2NvcGUuZXhpc3RJTUdGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuYWxsU0ZpbGVzKTsgLy91cGRhdGVzIHRoZSBmaWxlIGxpc3Qgb24gdGhlIHNpdGVkYXNoYm9hcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IGZhbHNlOyBcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTsvL2VuZCBEZWxldGVNb2RhbC5yZXN1bHQudGhlblxyXG4gICAgICAgICAgICB9Oy8vZW5kIGRlbGV0ZSgpXHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsRmlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UgPSB7fTtcclxuICAgICAgICAgICAgICAvLyAgJHNjb3BlLmRhdGFmaWxlID0ge307XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVGb3JtID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBGSUxFIFNUVUZGXHJcblxyXG4gICAgICAgICAgICAvL2NhbGxlZCBhIGZldyB0aW1lcyB0byBmb3JtYXQganVzdCB0aGUgZGF0ZSAobm8gdGltZSlcclxuICAgICAgICAgICAgdmFyIG1ha2VBZGF0ZSA9IGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYURhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGQgIT09IFwiXCIgJiYgZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9wcm92aWRlZCBkYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgYURhdGUgPSBuZXcgRGF0ZShkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgeWVhciA9IGFEYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW9udGggPSBhRGF0ZS5nZXRNb250aCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRheSA9ICgnMCcgKyBhRGF0ZS5nZXREYXRlKCkpLnNsaWNlKC0yKTtcclxuICAgICAgICAgICAgICAgIHZhciBtb250aE5hbWVzID0gW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGVXT3RpbWUgPSBuZXcgRGF0ZShtb250aE5hbWVzW21vbnRoXSArIFwiIFwiICsgZGF5ICsgXCIsIFwiICsgeWVhcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZVdPdGltZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzT1AgIT0gXCJlbXB0eVwiKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUub3BNb2RhbEhlYWRlciA9IFwiRGF0dW0gTG9jYXRpb24gSW5mb3JtYXRpb25cIjtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jcmVhdGVPUmVkaXRPUCA9ICdlZGl0JztcclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBleGlzdGluZyBPUFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk9QID0gYW5ndWxhci5jb3B5KHRoaXNPUCk7IC8vc2V0IGEgY29weSBzbyBsaXN0IHZpZXcgZG9lc250IGNoYW5nZSBpZiB0aGV5IGNhbmNlbCBmcm9tIGhlcmUgYWZ0ZXIgbWFraW5nIGNoYW5nZXNcclxuICAgICAgICAgICAgICAgIC8vZm9ybWF0dGVkIGFzIGRhdGUgZm9yIGRhdGVwaWNrZXJcclxuICAgICAgICAgICAgICAgICRzY29wZS5PUC5kYXRlX2VzdGFibGlzaGVkID0gbWFrZUFkYXRlKCRzY29wZS5PUC5kYXRlX2VzdGFibGlzaGVkKTtcclxuICAgICAgICAgICAgICAgIC8vY2hlY2sgaWYgdmRhdHVtX2lkID09IDAsIGlmIHNvIG1ha2UgdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLk9QLnZkYXR1bV9pZCA9PT0gMCkgZGVsZXRlICRzY29wZS5PUC52ZGF0dW1faWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5PUC5kYXRlX3JlY292ZXJlZCAhPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1AuZGF0ZV9yZWNvdmVyZWQgPSBtYWtlQWRhdGUoJHNjb3BlLk9QLmRhdGVfcmVjb3ZlcmVkKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpc09QQ29udHJvbHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRlZElkZW50aWZpZXJzID0gdGhpc09QQ29udHJvbHM7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dDb250cm9sSURpbnB1dCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuT1Aub3BUeXBlID0gJHNjb3BlLk9QLm9wX3R5cGVfaWQgPiAwID8gJHNjb3BlLk9QVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0Lm9iamVjdGl2ZV9wb2ludF90eXBlX2lkID09ICRzY29wZS5PUC5vcF90eXBlX2lkOyB9KVswXS5vcF90eXBlIDogJyc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuT1AucXVhbGl0eSA9ICRzY29wZS5PUC5vcF9xdWFsaXR5X2lkID4gMCA/ICRzY29wZS5PUFF1YWxpdHlMaXN0LmZpbHRlcihmdW5jdGlvbiAocSkgeyByZXR1cm4gcS5vcF9xdWFsaXR5X2lkID09ICRzY29wZS5PUC5vcF9xdWFsaXR5X2lkOyB9KVswXS5xdWFsaXR5IDogJyc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuT1AuaGRhdHVtID0gJHNjb3BlLk9QLmhkYXR1bV9pZCA+IDAgPyAkc2NvcGUuSERMaXN0LmZpbHRlcihmdW5jdGlvbiAoaGQpIHsgcmV0dXJuIGhkLmRhdHVtX2lkID09ICRzY29wZS5PUC5oZGF0dW1faWQ7IH0pWzBdLmRhdHVtX25hbWUgOiAnJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5PUC5oQ29sbGVjdE1ldGhvZCA9ICRzY29wZS5PUC5oY29sbGVjdF9tZXRob2RfaWQgPiAwID8gJHNjb3BlLkhDb2xsZWN0TWV0aG9kTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGhjKSB7IHJldHVybiBoYy5oY29sbGVjdF9tZXRob2RfaWQgPT0gJHNjb3BlLk9QLmhjb2xsZWN0X21ldGhvZF9pZDsgfSlbMF0uaGNvbGxlY3RfbWV0aG9kIDogJyc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuT1AudkRhdHVtID0gJHNjb3BlLk9QLnZkYXR1bV9pZCA+IDAgPyAkc2NvcGUuVkRhdHVtTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHZkKSB7IHJldHVybiB2ZC5kYXR1bV9pZCA9PSAkc2NvcGUuT1AudmRhdHVtX2lkOyB9KVswXS5kYXR1bV9uYW1lIDogJyc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuT1AudkNvbGxlY3RNZXRob2QgPSAkc2NvcGUuT1AudmNvbGxlY3RfbWV0aG9kX2lkID4gMCA/ICRzY29wZS5WQ29sbGVjdE1ldGhvZExpc3QuZmlsdGVyKGZ1bmN0aW9uICh2YykgeyByZXR1cm4gdmMudmNvbGxlY3RfbWV0aG9kX2lkID09ICRzY29wZS5PUC52Y29sbGVjdF9tZXRob2RfaWQ7IH0pWzBdLnZjb2xsZWN0X21ldGhvZCA6ICcnO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5vcE1vZGFsSGVhZGVyID0gXCJDcmVhdGUgbmV3IERhdHVtIExvY2F0aW9uXCI7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY3JlYXRlT1JlZGl0T1AgPSAnY3JlYXRlJztcclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBuZXcgT1AgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuT1AubGF0aXR1ZGVfZGQgPSBvcFNpdGUubGF0aXR1ZGVfZGQ7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuT1AubG9uZ2l0dWRlX2RkID0gb3BTaXRlLmxvbmdpdHVkZV9kZDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5PUC5oZGF0dW1faWQgPSBvcFNpdGUuaGRhdHVtX2lkO1xyXG4gICAgICAgICAgICAgICAgLy9kZWZhdWx0IHRvZGF5IGZvciBlc3RhYmxpc2VkIGRhdGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5PUC5kYXRlX2VzdGFibGlzaGVkID0gbWFrZUFkYXRlKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vZGVmYXVsdCByYWRpb3MgKGhhcyB0byBjb21lIGFmdGVyIE9QIGlzIHNldCBvbmUgd2F5IG9yIGFub3RoZXIpXHJcbiAgICAgICAgICAgICRzY29wZS5PUC5kZWNEZWdPUmRtcyA9ICdkZCc7XHJcbiAgICAgICAgICAgICRzY29wZS5PUC5GVG9yTUVURVIgPSAnZnQnO1xyXG4gICAgICAgICAgICAkc2NvcGUuT1AuRlRvckNNID0gJ2Z0JztcclxuXHJcbiAgICAgICAgICAgIC8vd2FudCB0byBhZGQgaWRlbnRpZmllclxyXG4gICAgICAgICAgICAkc2NvcGUuYWRkTmV3SWRlbnRpZmllciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY3JlYXRlT1JlZGl0T1AgPT0gJ2VkaXQnKSBcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkZWRJZGVudGlmaWVyc0NvcHkucHVzaCh7IG9iamVjdGl2ZV9wb2ludF9pZDogJHNjb3BlLk9QLm9iamVjdGl2ZV9wb2ludF9pZCwgaWRlbnRpZmllcjogXCJcIiwgaWRlbnRpZmllcl90eXBlOiBcIlwiIH0pO1xyXG4gICAgICAgICAgICAgICAgZWxzZSBcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkZWRJZGVudGlmaWVycy5wdXNoKHsgaWRlbnRpZmllcjogXCJcIiwgaWRlbnRpZmllcl90eXBlOiBcIlwiIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93Q29udHJvbElEaW5wdXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8jcmVnaW9uIERhdGVwaWNrZXJcclxuICAgICAgICAgICAgJHNjb3BlLmRhdGVwaWNrcnMgPSB7fTtcclxuICAgICAgICAgICAgJHNjb3BlLmRhdGVPcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgc3RhcnRpbmdEYXk6IDEsXHJcbiAgICAgICAgICAgICAgICBzaG93V2Vla3M6IGZhbHNlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRzY29wZS5vcGVuID0gZnVuY3Rpb24gKCRldmVudCwgd2hpY2gpIHtcclxuICAgICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5kYXRlcGlja3JzW3doaWNoXSA9IHRydWU7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgICAgICAgICAgLy9sYXQvbG9uZyA9aXMgbnVtYmVyXHJcbiAgICAgICAgICAgICRzY29wZS5pc051bSA9IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0aGVFdmVudCA9IGV2dCB8fCB3aW5kb3cuZXZlbnQ7XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gdGhlRXZlbnQua2V5Q29kZSB8fCB0aGVFdmVudC53aGljaDtcclxuICAgICAgICAgICAgICAgIGlmIChrZXkgIT0gNDYgJiYga2V5ICE9IDQ1ICYmIGtleSA+IDMxICYmIChrZXkgPCA0OCB8fCBrZXkgPiA1NykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGVFdmVudC5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGVFdmVudC5wcmV2ZW50RGVmYXVsdCkgdGhlRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vY29udmVydCBkZWcgbWluIHNlYyB0byBkZWMgZGVncmVlc1xyXG4gICAgICAgICAgICB2YXIgYXppbXV0aCA9IGZ1bmN0aW9uIChkZWcsIG1pbiwgc2VjKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXppID0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChkZWcgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXppID0gLTEuMCAqIGRlZyArIDEuMCAqIG1pbiAvIDYwLjAgKyAxLjAgKiBzZWMgLyAzNjAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgtMS4wICogYXppKS50b0ZpeGVkKDUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXppID0gMS4wICogZGVnICsgMS4wICogbWluIC8gNjAuMCArIDEuMCAqIHNlYyAvIDM2MDAuMDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGF6aSkudG9GaXhlZCg1KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vY29udmVydCBkZWMgZGVncmVlcyB0byBkbXNcclxuICAgICAgICAgICAgdmFyIGRlZ190b19kbXMgPSBmdW5jdGlvbiAoZGVnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVnIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZyA9IGRlZy50b1N0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2xvbmdpdHVkZSwgcmVtb3ZlIHRoZSAtIHNpZ25cclxuICAgICAgICAgICAgICAgICAgICBkZWcgPSBkZWcuc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGQgPSBNYXRoLmZsb29yKGRlZyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWluZmxvYXQgPSAoZGVnIC0gZCkgKiA2MDtcclxuICAgICAgICAgICAgICAgIHZhciBtID0gTWF0aC5mbG9vcihtaW5mbG9hdCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcyA9ICgobWluZmxvYXQgLSBtKSAqIDYwKS50b0ZpeGVkKDMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiAoXCJcIiArIGQgKyBcIjpcIiArIG0gKyBcIjpcIiArIHMpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy90aGV5IGNoYW5nZWQgcmFkaW8gYnV0dG9uIGZvciBkbXMgZGVjIGRlZ1xyXG4gICAgICAgICAgICAkc2NvcGUubGF0TG9uZ0NoYW5nZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY3JlYXRlT1JlZGl0T1AgPT0gJ2VkaXQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5vcENvcHkuZGVjRGVnT1JkbXMgPT0gXCJkZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhleSBjbGlja2VkIERlYyBEZWcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCRzY29wZS5ETVMuTEFEZWcgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuRE1TLkxBTWluICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLkRNUy5MQVNlYyAhPT0gdW5kZWZpbmVkKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MT0RlZyAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5ETVMuTE9NaW4gIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuRE1TLkxPU2VjICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29udmVydCB3aGF0J3MgaGVyZSBmb3IgZWFjaCBsYXQgYW5kIGxvbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcENvcHkubGF0aXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTEFEZWcsICRzY29wZS5ETVMuTEFNaW4sICRzY29wZS5ETVMuTEFTZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9wQ29weS5sb25naXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTE9EZWcsICRzY29wZS5ETVMuTE9NaW4sICRzY29wZS5ETVMuTE9TZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jbGVhclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9zaG93IG1vZGFsIHRlbGxpbmcgdGhlbSB0byBwb3B1bGF0ZSBhbGwgdGhyZWUgKERNUykgZm9yIGNvbnZlcnNpb24gdG8gd29ya1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIERNU01vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5QbGVhc2UgcG9wdWxhdGUgYWxsIHRocmVlIGlucHV0cyBmb3IgY29udmVyc2lvbiBmcm9tIERNUyB0byBEZWNpbWFsIERlZ3JlZXMgdG8gd29yay48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRE1TTW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxBRGVnICE9PSB1bmRlZmluZWQgfHwgJHNjb3BlLkRNUy5MQU1pbiAhPT0gdW5kZWZpbmVkIHx8ICRzY29wZS5ETVMuTEFTZWMgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNMYURlZ1wiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxPRGVnICE9PSB1bmRlZmluZWQgfHwgJHNjb3BlLkRNUy5MT01pbiAhPT0gdW5kZWZpbmVkIHx8ICRzY29wZS5ETVMuTE9TZWMgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNMb0RlZ1wiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcENvcHkuZGVjRGVnT1JkbXMgPSBcImRtc1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RoZXkgY2xpY2tlZCBkbXMgKGNvbnZlcnQgbGF0L2xvbmcgdG8gZG1zKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLm9wQ29weS5sYXRpdHVkZV9kZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGF0RE1TID0gKGRlZ190b19kbXMoJHNjb3BlLm9wQ29weS5sYXRpdHVkZV9kZCkpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFkRE1TYXJyYXkgPSBsYXRETVMuc3BsaXQoJzonKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTEFEZWcgPSBsYWRETVNhcnJheVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTEFNaW4gPSBsYWRETVNhcnJheVsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTEFTZWMgPSBsYWRETVNhcnJheVsyXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9uZ0RNUyA9IGRlZ190b19kbXMoJHNjb3BlLm9wQ29weS5sb25naXR1ZGVfZGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvbmdETVNhcnJheSA9IGxvbmdETVMuc3BsaXQoJzonKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTE9EZWcgPSBsb25nRE1TYXJyYXlbMF0gKiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTE9NaW4gPSBsb25nRE1TYXJyYXlbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPU2VjID0gbG9uZ0RNU2FycmF5WzJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jbGVhclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9wQ29weS5sYXRpdHVkZV9kZCA9IHVuZGVmaW5lZDsgJHNjb3BlLm9wQ29weS5sb25naXR1ZGVfZGQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuT1AuZGVjRGVnT1JkbXMgPT0gXCJkZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhleSBjbGlja2VkIERlYyBEZWcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoKCRzY29wZS5ETVMuTEFEZWcgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuRE1TLkxBTWluICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLkRNUy5MQVNlYyAhPT0gdW5kZWZpbmVkKSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MT0RlZyAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5ETVMuTE9NaW4gIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuRE1TLkxPU2VjICE9PSB1bmRlZmluZWQpIHsgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb252ZXJ0IHdoYXQncyBoZXJlIGZvciBlYWNoIGxhdCBhbmQgbG9uZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QLmxhdGl0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxBRGVnLCAkc2NvcGUuRE1TLkxBTWluLCAkc2NvcGUuRE1TLkxBU2VjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PUC5sb25naXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTE9EZWcsICRzY29wZS5ETVMuTE9NaW4sICRzY29wZS5ETVMuTE9TZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jbGVhclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3Nob3cgbW9kYWwgdGVsbGluZyB0aGVtIHRvIHBvcHVsYXRlIGFsbCB0aHJlZSAoRE1TKSBmb3IgY29udmVyc2lvbiB0byB3b3JrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgRE1TZGRNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+UGxlYXNlIHBvcHVsYXRlIGFsbCB0aHJlZSBpbnB1dHMgZm9yIGNvbnZlcnNpb24gZnJvbSBETVMgdG8gRGVjaW1hbCBEZWdyZWVzIHRvIHdvcmsuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERNU2RkTW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxBRGVnICE9PSB1bmRlZmluZWQgfHwgJHNjb3BlLkRNUy5MQU1pbiAhPT0gdW5kZWZpbmVkIHx8ICRzY29wZS5ETVMuTEFTZWMgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNMYURlZ1wiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxPRGVnICE9PSB1bmRlZmluZWQgfHwgJHNjb3BlLkRNUy5MT01pbiAhPT0gdW5kZWZpbmVkIHx8ICRzY29wZS5ETVMuTE9TZWMgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJChcIiNMb0RlZ1wiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PUC5kZWNEZWdPUmRtcyA9IFwiZG1zXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhleSBjbGlja2VkIGRtcyAoY29udmVydCBsYXQvbG9uZyB0byBkbXMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuT1AubGF0aXR1ZGVfZGQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNyZWF0ZV9sYXRETVMgPSAoZGVnX3RvX2Rtcygkc2NvcGUuT1AubGF0aXR1ZGVfZGQpKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNyZWF0ZV9sYWRETVNhcnJheSA9IGNyZWF0ZV9sYXRETVMuc3BsaXQoJzonKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTEFEZWcgPSBjcmVhdGVfbGFkRE1TYXJyYXlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxBTWluID0gY3JlYXRlX2xhZERNU2FycmF5WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MQVNlYyA9IGNyZWF0ZV9sYWRETVNhcnJheVsyXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlX2xvbmdETVMgPSBkZWdfdG9fZG1zKCRzY29wZS5PUC5sb25naXR1ZGVfZGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNyZWF0ZV9sb25nRE1TYXJyYXkgPSBjcmVhdGVfbG9uZ0RNUy5zcGxpdCgnOicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MT0RlZyA9IGNyZWF0ZV9sb25nRE1TYXJyYXlbMF0gKiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTE9NaW4gPSBjcmVhdGVfbG9uZ0RNU2FycmF5WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MT1NlYyA9IGNyZWF0ZV9sb25nRE1TYXJyYXlbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NsZWFyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1AubGF0aXR1ZGVfZGQgPSB1bmRlZmluZWQ7ICRzY29wZS5PUC5sb25naXR1ZGVfZGQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2p1c3QgbmVlZCBhbiBPQkpFQ1RJVkVfUE9JTlQgb2JqZWN0IHRvIHBvc3QvcHV0XHJcbiAgICAgICAgICAgIHZhciB0cmltT1AgPSBmdW5jdGlvbiAob3ApIHtcclxuICAgICAgICAgICAgICAgIHZhciBPQkpfUFQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmFtZTogb3AubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogb3AuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgZWxldl9mdDogb3AuZWxldl9mdCAhPT0gdW5kZWZpbmVkID8gb3AuZWxldl9mdCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0ZV9lc3RhYmxpc2hlZDogb3AuZGF0ZV9lc3RhYmxpc2hlZCxcclxuICAgICAgICAgICAgICAgICAgICBvcF9pc19kZXN0cm95ZWQ6IG9wLm9wX2lzX2Rlc3Ryb3llZCAhPT0gdW5kZWZpbmVkID8gb3Aub3BfaXNfZGVzdHJveWVkIDogMCxcclxuICAgICAgICAgICAgICAgICAgICBvcF9ub3Rlczogb3Aub3Bfbm90ZXMgIT09IHVuZGVmaW5lZCA/IG9wLm9wX25vdGVzIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBzaXRlX2lkOiAkc2NvcGUudGhpc09Qc2l0ZS5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIHZkYXR1bV9pZDogb3AudmRhdHVtX2lkICE9PSB1bmRlZmluZWQgPyBvcC52ZGF0dW1faWQgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlX2RkOiBvcC5sYXRpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGVfZGQ6IG9wLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICBoZGF0dW1faWQ6IG9wLmhkYXR1bV9pZCAhPT0gdW5kZWZpbmVkID8gb3AuaGRhdHVtX2lkIDogMCxcclxuICAgICAgICAgICAgICAgICAgICBoY29sbGVjdF9tZXRob2RfaWQ6IG9wLmhjb2xsZWN0X21ldGhvZF9pZCAhPT0gdW5kZWZpbmVkID8gb3AuaGNvbGxlY3RfbWV0aG9kX2lkIDogMCxcclxuICAgICAgICAgICAgICAgICAgICB2Y29sbGVjdF9tZXRob2RfaWQ6IG9wLnZjb2xsZWN0X21ldGhvZF9pZCAhPT0gdW5kZWZpbmVkID8gb3AudmNvbGxlY3RfbWV0aG9kX2lkIDogMCxcclxuICAgICAgICAgICAgICAgICAgICBvcF90eXBlX2lkOiBvcC5vcF90eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGVfcmVjb3ZlcmVkOiBvcC5kYXRlX3JlY292ZXJlZCAhPT0gdW5kZWZpbmVkID8gb3AuZGF0ZV9yZWNvdmVyZWQgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIHVuY2VydGFpbnR5OiBvcC51bmNlcnRhaW50eSAhPT0gdW5kZWZpbmVkICYmIG9wLnVuY2VydGFpbnR5ICE9PSBcIlwiID8gb3AudW5jZXJ0YWludHkgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIHVucXVhbnRpZmllZDogb3AudW5xdWFudGlmaWVkICE9PSB1bmRlZmluZWQgPyBvcC51bnF1YW50aWZpZWQgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wX3F1YWxpdHlfaWQ6IG9wLm9wX3F1YWxpdHlfaWQgIT09IHVuZGVmaW5lZCA/IG9wLm9wX3F1YWxpdHlfaWQgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBPQkpfUFQ7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2NhbmNlbCBtb2RhbFxyXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgIC8vICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2ZpeCBkZWZhdWx0IHJhZGlvcyBhbmQgbGF0L2xvbmdcclxuICAgICAgICAgICAgdmFyIGZvcm1hdERlZmF1bHRzID0gZnVuY3Rpb24gKHRoZU9QLCBmcm9tV2hlcmUpIHtcclxuICAgICAgICAgICAgICAgIGlmIChmcm9tV2hlcmUgPT0gXCJjcmVhdGVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLk9QLkZUb3JNRVRFUiBuZWVkcyB0byBiZSAnZnQnLiBpZiAnbWV0ZXInID09Y29udmVydCB2YWx1ZSB0byBmdCBcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhlT1AuRlRvck1FVEVSID09IFwibWV0ZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1AuRlRvck1FVEVSID0gJ2Z0JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QLmVsZXZfZnQgPSAkc2NvcGUuT1AuZWxldl9mdCAqIDMuMjgwODtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUuT1AuRlRvckNNIG5lZWRzIHRvIGJlICdmdCcuIGlmICdjbScgPT1jb252ZXJ0IHZhbHVlIHRvIGZ0IFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGVPUC5GVG9yQ00gPT0gXCJjbVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PUC5GVG9yQ00gPSAnZnQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1AudW5jZXJ0YWludHkgPSBwYXJzZUZsb2F0KCRzY29wZS5PUC51bmNlcnRhaW50eSAvIDMwLjQ4KS50b0ZpeGVkKDYpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5PUC5kZWNEZWdPUmRtcyBuZWVkcyB0byBiZSAnZGQnLiBpZiAnZG1zJyA9PWNvbnZlcnQgJHNjb3BlLkRNUyB2YWx1ZXMgdG8gZGRcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhlT1AuZGVjRGVnT1JkbXMgPT0gXCJkbXNcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1AuZGVjRGVnT1JkbXMgPSAnZGQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1AubGF0aXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTEFEZWcsICRzY29wZS5ETVMuTEFNaW4sICRzY29wZS5ETVMuTEFTZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1AubG9uZ2l0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxPRGVnLCAkc2NvcGUuRE1TLkxPTWluLCAkc2NvcGUuRE1TLkxPU2VjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1Auc2l0ZV9pZCA9ICRzY29wZS50aGlzT1BzaXRlLnNpdGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5PUC5GVG9yTUVURVIgbmVlZHMgdG8gYmUgJ2Z0Jy4gaWYgJ21ldGVyJyA9PWNvbnZlcnQgdmFsdWUgdG8gZnQgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoZU9QLkZUb3JNRVRFUiA9PSBcIm1ldGVyXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9wQ29weS5GVG9yTUVURVIgPSAnZnQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3BDb3B5LmVsZXZfZnQgPSAkc2NvcGUub3BDb3B5LmVsZXZfZnQgKiAzLjI4MDg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLk9QLkZUb3JDTSBuZWVkcyB0byBiZSAnZnQnLiBpZiAnY20nID09Y29udmVydCB2YWx1ZSB0byBmdCBcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhlT1AuRlRvckNNID09IFwiY21cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3BDb3B5LkZUb3JDTSA9ICdmdCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcENvcHkudW5jZXJ0YWludHkgPSBwYXJzZUZsb2F0KCRzY29wZS5vcENvcHkudW5jZXJ0YWludHkgLyAzMC40OCkudG9GaXhlZCg2KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUuT1AuZGVjRGVnT1JkbXMgbmVlZHMgdG8gYmUgJ2RkJy4gaWYgJ2RtcycgPT1jb252ZXJ0ICRzY29wZS5ETVMgdmFsdWVzIHRvIGRkXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoZU9QLmRlY0RlZ09SZG1zID09IFwiZG1zXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9wQ29weS5kZWNEZWdPUmRtcyA9ICdkZCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcENvcHkubGF0aXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTEFEZWcsICRzY29wZS5ETVMuTEFNaW4sICRzY29wZS5ETVMuTEFTZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3BDb3B5LmxvbmdpdHVkZV9kZCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MT0RlZywgJHNjb3BlLkRNUy5MT01pbiwgJHNjb3BlLkRNUy5MT1NlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9wQ29weS5zaXRlX2lkID0gJHNjb3BlLnRoaXNPUHNpdGUuc2l0ZV9pZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL0NyZWF0ZSB0aGlzIE9QXHJcbiAgICAgICAgICAgICRzY29wZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5PUEZvcm0uJHZhbGlkKSB7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjcmVhdGVkT1AgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAvL3Bvc3RcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXREZWZhdWx0cygkc2NvcGUuT1AsICdjcmVhdGUnKTsgLy8kc2NvcGUuT1AuRlRvck1FVEVSLCBGVG9yQ00sIGRlY0RlZ09SZG1zICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBPUHRvUE9TVCA9IHRyaW1PUCgkc2NvcGUuT1ApOyAvL21ha2UgaXQgYW4gT0JKRUNUSVZFX1BPSU5UIGZvciBzYXZpbmcgICAgICAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgICAgICBPQkpFQ1RJVkVfUE9JTlQuc2F2ZShPUHRvUE9TVCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkRhdHVtIExvY2F0aW9uIGNyZWF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRPUCA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFkZGVkSWRlbnRpZmllcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wb3N0IGVhY2ggb25lIFRISVMgV0lMTCBDSEFOR0UgU09PTiBUTyBIQVZFIG9iamVjdGl2ZV9wb2ludF9pZCBhbHJlYWR5IGFkZGVkIGFuZCBub3Qgc2VudCBhbG9uZyB3aXRoIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBvcGMgPSAwOyBvcGMgPCAkc2NvcGUuYWRkZWRJZGVudGlmaWVycy5sZW5ndGg7IG9wYysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNPbmUgPSAkc2NvcGUuYWRkZWRJZGVudGlmaWVyc1tvcGNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNPbmUub2JqZWN0aXZlX3BvaW50X2lkID0gcmVzcG9uc2Uub2JqZWN0aXZlX3BvaW50X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9QX0NPTlRST0xfSURFTlRJRklFUi5zYXZlKHRoaXNPbmUpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBjcmVhdGluZyBEYXR1bSBMb2NhdGlvbjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VuZEJhY2sgPSBbY3JlYXRlZE9QLCAnY3JlYXRlZCddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZW5kQmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07IC8vZW5kIENyZWF0ZVxyXG5cclxuICAgICAgICAgICAgLy9YIHdhcyBjbGlja2VkIG5leHQgdG8gZXhpc3RpbmcgQ29udHJvbCBJZGVudGlmaWVyIHRvIGhhdmUgaXQgcmVtb3ZlZCwgc3RvcmUgaW4gcmVtb3ZlIGFycmF5IGZvciBTYXZlKClcclxuICAgICAgICAgICAgJHNjb3BlLlJlbW92ZUlEID0gZnVuY3Rpb24gKG9wQ29udHJvbCkge1xyXG4gICAgICAgICAgICAgICAgLy9vbmx5IGFkZCB0byByZW1vdmUgbGlzdCBpZiBpdCdzIGFuIGV4aXN0aW5nIG9uZSB0byBERUxFVEVcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYWRkZWRJZGVudGlmaWVyc0NvcHkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gJHNjb3BlLmFkZGVkSWRlbnRpZmllcnNDb3B5LmluZGV4T2Yob3BDb250cm9sKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BDb250cm9sLm9wX2NvbnRyb2xfaWRlbnRpZmllcl9pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZW1vdmVPUENhcnJheS5wdXNoKG9wQ29udHJvbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRlZElkZW50aWZpZXJzQ29weS5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZGVkSWRlbnRpZmllcnNDb3B5LnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdGhpcyBpcyBhIGNyZWF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjaSA9ICRzY29wZS5hZGRlZElkZW50aWZpZXJzLmluZGV4T2Yob3BDb250cm9sKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkZWRJZGVudGlmaWVycy5zcGxpY2UoY2ksIDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9TYXZlIHRoaXMgT1BcclxuICAgICAgICAgICAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ETVMuTEFEZWcgIT09IHVuZGVmaW5lZCkgJHNjb3BlLm9wQ29weS5sYXRpdHVkZV9kZCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MQURlZywgJHNjb3BlLkRNUy5MQU1pbiwgJHNjb3BlLkRNUy5MQVNlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ETVMuTE9EZWcgIT09IHVuZGVmaW5lZCkgJHNjb3BlLm9wQ29weS5sb25naXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTE9EZWcsICRzY29wZS5ETVMuTE9NaW4sICRzY29wZS5ETVMuTE9TZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVkT1AgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAvL2lmIHRoZXJlJ3MgYW4gb3BfY29udHJvbF9pZGVudGlmaWVyX2lkLCBQVVQgLi4gZWxzZSBQT1NUXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hZGRlZElkZW50aWZpZXJzQ29weS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLmFkZGVkSWRlbnRpZmllcnNDb3B5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFkZGVkSWRlbnRpZmllcnNDb3B5W2ldLm9wX2NvbnRyb2xfaWRlbnRpZmllcl9pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9leGlzdGluZzogUFVUdmFyIGluZCA9ICRzY29wZS5jaG9zZW5IV01MaXN0Lm1hcChmdW5jdGlvbiAoaHdtKSB7IHJldHVybiBod20uaHdtX2lkOyB9KS5pbmRleE9mKGFIV00uaHdtX2lkKTsgLy9ub3Qgd29ya2luZzo6ICRzY29wZS5jaG9zZW5IV01MaXN0LmluZGV4T2YoYUhXTSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4aXN0SW5kZXggPSAkc2NvcGUuYWRkZWRJZGVudGlmaWVycy5tYXAoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGkub3BfY29udHJvbF9pZGVudGlmaWVyX2lkOyB9KS5pbmRleE9mKCRzY29wZS5hZGRlZElkZW50aWZpZXJzQ29weVtpXS5vcF9jb250cm9sX2lkZW50aWZpZXJfaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9QX0NPTlRST0xfSURFTlRJRklFUi51cGRhdGUoeyBpZDogJHNjb3BlLmFkZGVkSWRlbnRpZmllcnNDb3B5W2ldLm9wX2NvbnRyb2xfaWRlbnRpZmllcl9pZCB9LCAkc2NvcGUuYWRkZWRJZGVudGlmaWVyc0NvcHlbaV0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRlZElkZW50aWZpZXJzW2V4aXN0SW5kZXhdID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcG9zdCBlYWNoIG9uZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzT1BDb250cm9sSUQgPSAkc2NvcGUuYWRkZWRJZGVudGlmaWVyc0NvcHlbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc09QQ29udHJvbElELm9iamVjdGl2ZV9wb2ludF9pZCA9ICRzY29wZS5PUC5vYmplY3RpdmVfcG9pbnRfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT1BfQ09OVFJPTF9JREVOVElGSUVSLnNhdmUodGhpc09QQ29udHJvbElEKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkZWRJZGVudGlmaWVycy5wdXNoKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfS8vZW5kIGZvcmVhY2ggYWRkZWRJZGVudGlmaWVyXHJcbiAgICAgICAgICAgICAgICAgICAgfS8vZW5kIGlmIHRoZXJlJ3MgYWRkZWRpZGVudGlmaWVyc1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2lmIHRoZXJlJ3MgYW55IGluIHJlbW92ZU9QQ2FycmF5LCBERUxFVEUgdGhvc2VcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnJlbW92ZU9QQ2FycmF5Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCAkc2NvcGUucmVtb3ZlT1BDYXJyYXkubGVuZ3RoOyByKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZUluZGV4ID0gJHNjb3BlLmFkZGVkSWRlbnRpZmllcnMubWFwKGZ1bmN0aW9uIChyaSkgeyByZXR1cm4gcmkub3BfY29udHJvbF9pZGVudGlmaWVyX2lkOyB9KS5pbmRleE9mKCRzY29wZS5yZW1vdmVPUENhcnJheVtyXS5vcF9jb250cm9sX2lkZW50aWZpZXJfaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT1BfQ09OVFJPTF9JREVOVElGSUVSLmRlbGV0ZSh7IGlkOiAkc2NvcGUucmVtb3ZlT1BDYXJyYXlbcl0ub3BfY29udHJvbF9pZGVudGlmaWVyX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRlZElkZW50aWZpZXJzLnNwbGljZShkZUluZGV4LDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0vL2VuZCBmb3JlYWNoIHJlbW92ZU9QQ2FycmF5XHJcbiAgICAgICAgICAgICAgICAgICAgfS8vZW5kIGlmIHRoZXJlJ3MgcmVtb3ZlT1BDc1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2xvb2sgYXQgT1AuRlRvck1FVEVSIChcImZ0XCIpLCBPUC5GVG9yQ00gKFwiZnRcIiksIGFuZCBPUC5kZWNEZWdPUmRtcyAoXCJkZFwiKSwgbWFrZSBzdXJlIHNpdGVfSUQgaXMgb24gdGhlcmUgYW5kIHNlbmQgaXQgdG8gdHJpbSBiZWZvcmUgUFVUICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdERlZmF1bHRzKCRzY29wZS5vcENvcHksICdlZGl0Jyk7IC8vJHNjb3BlLk9QLkZUb3JNRVRFUiwgRlRvckNNLCBkZWNEZWdPUmRtc1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBPUHRvUE9TVCA9IHRyaW1PUCgkc2NvcGUub3BDb3B5KTtcclxuICAgICAgICAgICAgICAgICAgICBPUHRvUE9TVC5vYmplY3RpdmVfcG9pbnRfaWQgPSAkc2NvcGUub3BDb3B5Lm9iamVjdGl2ZV9wb2ludF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAvLyRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUhUVFAtTWV0aG9kLU92ZXJyaWRlJ10gPSAnUFVUJztcclxuICAgICAgICAgICAgICAgICAgICBPQkpFQ1RJVkVfUE9JTlQudXBkYXRlKHsgaWQ6IE9QdG9QT1NULm9iamVjdGl2ZV9wb2ludF9pZCB9LCBPUHRvUE9TVCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkRhdHVtIExvY2F0aW9uIHVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PUCA9IHJlc3BvbnNlOyB0aGlzT1AgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QLmRhdGVfZXN0YWJsaXNoZWQgPSBtYWtlQWRhdGUoJHNjb3BlLk9QLmRhdGVfZXN0YWJsaXNoZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLk9QLmRhdGVfcmVjb3ZlcmVkICE9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QLmRhdGVfcmVjb3ZlcmVkID0gbWFrZUFkYXRlKCRzY29wZS5PUC5kYXRlX3JlY292ZXJlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PUC5vcFR5cGUgPSAkc2NvcGUuT1Aub3BfdHlwZV9pZCA+IDAgPyAkc2NvcGUuT1BUeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQub2JqZWN0aXZlX3BvaW50X3R5cGVfaWQgPT0gJHNjb3BlLk9QLm9wX3R5cGVfaWQ7IH0pWzBdLm9wX3R5cGUgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QLnF1YWxpdHkgPSAkc2NvcGUuT1Aub3BfcXVhbGl0eV9pZCA+IDAgPyAkc2NvcGUuT1BRdWFsaXR5TGlzdC5maWx0ZXIoZnVuY3Rpb24gKHEpIHsgcmV0dXJuIHEub3BfcXVhbGl0eV9pZCA9PSAkc2NvcGUuT1Aub3BfcXVhbGl0eV9pZDsgfSlbMF0ucXVhbGl0eSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1AuaGRhdHVtID0gJHNjb3BlLk9QLmhkYXR1bV9pZCA+IDAgPyAkc2NvcGUuSERMaXN0LmZpbHRlcihmdW5jdGlvbiAoaGQpIHsgcmV0dXJuIGhkLmRhdHVtX2lkID09ICRzY29wZS5PUC5oZGF0dW1faWQ7IH0pWzBdLmRhdHVtX25hbWUgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QLmhDb2xsZWN0TWV0aG9kID0gJHNjb3BlLk9QLmhjb2xsZWN0X21ldGhvZF9pZCA+IDAgPyAkc2NvcGUuSENvbGxlY3RNZXRob2RMaXN0LmZpbHRlcihmdW5jdGlvbiAoaGMpIHsgcmV0dXJuIGhjLmhjb2xsZWN0X21ldGhvZF9pZCA9PSAkc2NvcGUuT1AuaGNvbGxlY3RfbWV0aG9kX2lkOyB9KVswXS5oY29sbGVjdF9tZXRob2QgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QLnZEYXR1bSA9ICRzY29wZS5PUC52ZGF0dW1faWQgPiAwID8gJHNjb3BlLlZEYXR1bUxpc3QuZmlsdGVyKGZ1bmN0aW9uICh2ZCkgeyByZXR1cm4gdmQuZGF0dW1faWQgPT0gJHNjb3BlLk9QLnZkYXR1bV9pZDsgfSlbMF0uZGF0dW1fbmFtZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1AudkNvbGxlY3RNZXRob2QgPSAkc2NvcGUuT1AudmNvbGxlY3RfbWV0aG9kX2lkID4gMCA/ICRzY29wZS5WQ29sbGVjdE1ldGhvZExpc3QuZmlsdGVyKGZ1bmN0aW9uICh2YykgeyByZXR1cm4gdmMudmNvbGxlY3RfbWV0aG9kX2lkID09ICRzY29wZS5PUC52Y29sbGVjdF9tZXRob2RfaWQ7IH0pWzBdLnZjb2xsZWN0X21ldGhvZCA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3BDb3B5ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRlZElkZW50aWZpZXJzQ29weSA9IFtdOyAkc2NvcGUudmlldy5PUHZhbCA9ICdkZXRhaWwnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBkZWxldGUgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtSFRUUC1NZXRob2QtT3ZlcnJpZGUnXTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHVwZGF0aW5nIERhdHVtIExvY2F0aW9uOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgdmFsaWRcclxuICAgICAgICAgICAgfTsgLy9lbmQgU2F2ZVxyXG5cclxuICAgICAgICAgICAgLy9kZWxldGUgdGhpcyBPUCBmcm9tIHRoZSBTSVRFXHJcbiAgICAgICAgICAgICRzY29wZS5kZWxldGVPUCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIE9QX01FQVNVUkUuZ2V0RGF0dW1Mb2NhdGlvbk9QTWVhc3VyZXMoeyBvYmplY3RpdmVQb2ludElkOiAkc2NvcGUuT1Aub2JqZWN0aXZlX3BvaW50X2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3BPblRhcGVkb3duTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkNhbm5vdCBEZWxldGU8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoaXMgRGF0dW0gTG9jYXRpb24gaXMgYmVpbmcgdXNlZCBmb3Igb25lIG9yIG1vcmUgc2Vuc29yIHRhcGUgZG93bnMuIFBsZWFzZSBkZWxldGUgdGhlIHRhcGUgZG93biBiZWZvcmUgZGVsZXRpbmcgdGhlIGRhdHVtIGxvY2F0aW9uLjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25vIHRhcGVkb3ducywgcHJvY2VlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgRGVsZXRlTW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLk9QO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJPYmplY3RpdmUgUG9pbnRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWxldGVNb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChvcFRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPQkpFQ1RJVkVfUE9JTlQuZGVsZXRlKHsgaWQ6IG9wVG9SZW1vdmUub2JqZWN0aXZlX3BvaW50X2lkIH0sIG9wVG9SZW1vdmUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PUEZpbGVzID0gW107IC8vY2xlYXIgb3V0IGh3bUZpbGVzIGZvciB0aGlzIGh3bVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcEltYWdlRmlsZXMgPSBbXTsgLy9jbGVhciBvdXQgaW1hZ2UgZmlsZXMgZm9yIHRoaXMgaHdtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3cgcmVtb3ZlIGFsbCB0aGVzZSBmaWxlcyBmcm9tIFNpdGVGaWxlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsID0gJHNjb3BlLmFsbFNGaWxlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGwtLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFsbFNGaWxlc1tsXS5vYmplY3RpdmVfcG9pbnRfaWQgPT0gb3BUb1JlbW92ZS5vYmplY3RpdmVfcG9pbnRfaWQpICRzY29wZS5hbGxTRmlsZXMuc3BsaWNlKGwsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkRhdHVtIExvY2F0aW9uIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbmRCYWNrID0gW1wiZGVcIiwgJ2RlbGV0ZWQnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZW5kQmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgZWxzZSAocHJvY2VlZCB3aXRoIGRlbGV0ZSlcclxuICAgICAgICAgICAgICAgIH0pOyAvL2VuZCBnZXQgb3BtZWFzdXJlbWVudHNcclxuICAgICAgICAgICAgfTsgLy9lbmQgZGVsZXRlXHJcblxyXG4gICAgICAgICAgICAvL2xhdCBtb2RhbCBcclxuICAgICAgICAgICAgdmFyIG9wZW5MYXRNb2RhbCA9IGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGF0TW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBMYXRpdHVkZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNzMuMDwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGxhdE1vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChmaWVsZEZvY3VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHcgPT0gJ2xhdGxvbmcnKSAkKFwiI2xhdGl0dWRlX2RkXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSAkKFwiI0xhRGVnXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vbG9uZyBtb2RhbFxyXG4gICAgICAgICAgICB2YXIgb3BlbkxvbmdNb2RhbCA9IGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbG9uZ01vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGUgTG9uZ2l0dWRlIG11c3QgYmUgYmV0d2VlbiAtMTc1LjAgYW5kIC02MC4wPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgbG9uZ01vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChmaWVsZEZvY3VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHcgPT0gJ2xhdGxvbmcnKSAkKFwiI2xvbmdpdHVkZV9kZFwiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgJChcIiNMb0RlZ1wiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL21ha2Ugc3VyZSBsYXQvbG9uZyBhcmUgcmlnaHQgbnVtYmVyIHJhbmdlXHJcbiAgICAgICAgICAgICRzY29wZS5jaGVja1ZhbHVlID0gZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkID09ICdkbXMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jaGVjayB0aGUgZGVncmVlIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ETVMuTEFEZWcgPCAwIHx8ICRzY29wZS5ETVMuTEFEZWcgPiA3MyB8fCAoaXNOYU4oJHNjb3BlLkRNUy5MQURlZykgJiYgJHNjb3BlLkRNUy5MQURlZyAhPT0gdW5kZWZpbmVkKSB8fCAoaXNOYU4oJHNjb3BlLkRNUy5MQU1pbikgJiYgJHNjb3BlLkRNUy5MQU1pbiAhPT0gdW5kZWZpbmVkKSB8fCAoaXNOYU4oJHNjb3BlLkRNUy5MQVNlYykgJiYgJHNjb3BlLkRNUy5MQVNlYyAhPT0gdW5kZWZpbmVkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuTGF0TW9kYWwoJ2RtcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmIG5vdCBhIG51bWJlciwgY2xlYXIgdGhlIGltcHV0cyB0byB0cmlnZ2VyIHRoZSB2YWxpZGF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTigkc2NvcGUuRE1TLkxBRGVnKSkgJHNjb3BlLkRNUy5MQURlZyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKCRzY29wZS5ETVMuTEFNaW4pKSAkc2NvcGUuRE1TLkxBTWluID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oJHNjb3BlLkRNUy5MQVNlYykpICRzY29wZS5ETVMuTEFTZWMgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxPRGVnIDwgLTE3NSB8fCAkc2NvcGUuRE1TLkxPRGVnID4gLTYwIHx8IChpc05hTigkc2NvcGUuRE1TLkxPRGVnKSAmJiAkc2NvcGUuRE1TLkxPRGVnICE9PSB1bmRlZmluZWQpIHx8IChpc05hTigkc2NvcGUuRE1TLkxPTWluKSAmJiAkc2NvcGUuRE1TLkxPTWluICE9PSB1bmRlZmluZWQpIHx8IChpc05hTigkc2NvcGUuRE1TLkxPU2VjKSAmJiAkc2NvcGUuRE1TLkxPU2VjICE9PSB1bmRlZmluZWQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5Mb25nTW9kYWwoJ2RtcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmIG5vdCBhIG51bWJlciwgY2xlYXIgdGhlIGltcHV0cyB0byB0cmlnZ2VyIHRoZSB2YWxpZGF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTigkc2NvcGUuRE1TLkxPRGVnKSkgJHNjb3BlLkRNUy5MT0RlZyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKCRzY29wZS5ETVMuTE9NaW4pKSAkc2NvcGUuRE1TLkxPTWluID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oJHNjb3BlLkRNUy5MT1NlYykpICRzY29wZS5ETVMuTE9TZWMgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIHRoZSBsYXRpdHVkZS9sb25naXR1ZGVcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb3AgPSAkc2NvcGUudmlldy5PUHZhbCA9PSAnZWRpdCcgPyAkc2NvcGUub3BDb3B5IDogJHNjb3BlLk9QO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcC5sYXRpdHVkZV9kZCA8IDAgfHwgb3AubGF0aXR1ZGVfZGQgPiA3MyB8fCBpc05hTihvcC5sYXRpdHVkZV9kZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkxhdE1vZGFsKCdsYXRsb25nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgbm90IGEgbnVtYmVyLCBjbGVhciB0aGUgaW1wdXRzIHRvIHRyaWdnZXIgdGhlIHZhbGlkYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKG9wLmxhdGl0dWRlX2RkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3AubGF0aXR1ZGVfZGQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wLmxvbmdpdHVkZV9kZCA8IC0xNzUgfHwgb3AubG9uZ2l0dWRlX2RkID4gLTYwIHx8IGlzTmFOKG9wLmxvbmdpdHVkZV9kZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkxvbmdNb2RhbCgnbGF0bG9uZycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmIG5vdCBhIG51bWJlciwgY2xlYXIgdGhlIGltcHV0cyB0byB0cmlnZ2VyIHRoZSB2YWxpZGF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihvcC5sb25naXR1ZGVfZGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcC5sb25naXR1ZGVfZGQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2VkaXQgYnV0dG9uIGNsaWNrZWQuIG1ha2UgY29weSBvZiBod20gXHJcbiAgICAgICAgICAgICRzY29wZS53YW5uYUVkaXRPUCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS52aWV3Lk9QdmFsID0gJ2VkaXQnO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm9wQ29weSA9IGFuZ3VsYXIuY29weSgkc2NvcGUuT1ApO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm9wQ29weS5kZWNEZWdPUmRtcyA9ICdkZCc7ICRzY29wZS5vcENvcHkuRlRvck1FVEVSID0gJ2Z0JzsgJHNjb3BlLm9wQ29weS5GVG9yQ00gPSAnZnQnO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZGVkSWRlbnRpZmllcnNDb3B5ID0gYW5ndWxhci5jb3B5KCRzY29wZS5hZGRlZElkZW50aWZpZXJzKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbE9QRWRpdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS52aWV3Lk9QdmFsID0gJ2RldGFpbCc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUub3BDb3B5ID0gW107ICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfV0pOy8vZW5kIE9QbW9kYWxDdHJsXHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAvKiBjb250cm9sbGVycy5qcywgJ2xlYWZsZXQtZGlyZWN0aXZlJyd1aS51bmlxdWUnLCduZ1RhZ3NJbnB1dCcsKi9cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU1ROQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQ29udHJvbGxlcnMnKTtcclxuXHJcbiAgICBTVE5Db250cm9sbGVycy5jb250cm9sbGVyKCdvYmplY3RpdmVQb2ludEN0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRjb29raWVzJywgJyRsb2NhdGlvbicsICckc3RhdGUnLCAnJGh0dHAnLCAnJHVpYk1vZGFsJywgJyRmaWx0ZXInLCAnJHRpbWVvdXQnLCAnT0JKRUNUSVZFX1BPSU5UJywgJ01FTUJFUicsICd0aGlzU2l0ZScsICd0aGlzU2l0ZU9QcycsICdhbGxPUFR5cGVzJywgJ2FsbEhvckRhdHVtcycsICdhbGxIb3JDb2xsTWV0aG9kcycsICdhbGxWZXJ0RGF0dW1zJywgJ2FsbFZlcnRDb2xNZXRob2RzJywgJ2FsbE9QUXVhbGl0aWVzJywgJ2FsbEZpbGVUeXBlcycsICdhbGxBZ2VuY2llcycsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICRsb2NhdGlvbiwgJHN0YXRlLCAkaHR0cCwgJHVpYk1vZGFsLCAkZmlsdGVyLCAkdGltZW91dCwgT0JKRUNUSVZFX1BPSU5ULCBNRU1CRVIsIHRoaXNTaXRlLCB0aGlzU2l0ZU9QcywgYWxsT1BUeXBlcywgYWxsSG9yRGF0dW1zLCBhbGxIb3JDb2xsTWV0aG9kcywgYWxsVmVydERhdHVtcywgYWxsVmVydENvbE1ldGhvZHMsIGFsbE9QUXVhbGl0aWVzLCBhbGxGaWxlVHlwZXMsIGFsbEFnZW5jaWVzKSB7XHJcbiAgICAgICAgICAgIGlmICgkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IHVuZGVmaW5lZCB8fCAkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hdXRoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvL2dsb2JhbCB2YXJzXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUub3BDb3VudCA9IHsgdG90YWw6IHRoaXNTaXRlT1BzLmxlbmd0aCB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVPYmplY3RpdmVQb2ludHMgPSB0aGlzU2l0ZU9QcztcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd09QTW9kYWwgPSBmdW5jdGlvbiAoT1BjbGlja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9wRmlsZVR5cGVzID0gYWxsRmlsZVR5cGVzLmZpbHRlcihmdW5jdGlvbiAob2Z0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvZnQuZmlsZXR5cGUgPT09ICdQaG90bycgfHwgb2Z0LmZpbGV0eXBlID09PSAnRmllbGQgU2hlZXRzJyB8fCBvZnQuZmlsZXR5cGUgPT09ICdMZXZlbCBOb3RlcycgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mdC5maWxldHlwZSA9PT0gJ090aGVyJyB8fCBvZnQuZmlsZXR5cGUgPT09ICdOR1MgRGF0YXNoZWV0JyB8fCBvZnQuZmlsZXR5cGUgPT09ICdTa2V0Y2gnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXNzQWxsTGlzdHMgPSBbYWxsT1BUeXBlcywgYWxsSG9yRGF0dW1zLCBhbGxIb3JDb2xsTWV0aG9kcywgYWxsVmVydERhdHVtcywgYWxsVmVydENvbE1ldGhvZHMsIGFsbE9QUXVhbGl0aWVzLCAkc2NvcGUub3BGaWxlVHlwZXNdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleENsaWNrZWQgPSAkc2NvcGUuU2l0ZU9iamVjdGl2ZVBvaW50cy5pbmRleE9mKE9QY2xpY2tlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZyA9IHsgc2hvd0xvYWRpbmc6IHRydWUgfTsgLy9Mb2FkaW5nLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgLy9tb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybCA6ICdPUG1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnT1Btb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnbGcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Q2xhc3M6ICdyZXAtZGlhbG9nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsRHJvcGRvd25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhc3NBbGxMaXN0cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzT1A6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT1BjbGlja2VkICE9PSAwID8gT1BjbGlja2VkOiBcImVtcHR5XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc09QQ29udHJvbHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoT1BjbGlja2VkICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBPQkpFQ1RJVkVfUE9JTlQuZ2V0T1BDb250cm9scyh7aWQ6IE9QY2xpY2tlZC5vYmplY3RpdmVfcG9pbnRfaWR9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BTaXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNTaXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnZW5jeUxpc3Q6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWxsQWdlbmNpZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsTWVtYmVyczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1FTUJFUi5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChjcmVhdGVkT1ApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9pcyB0aGVyZSBhIG5ldyBvcCBvciBqdXN0IGNsb3NlZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nID0geyBzaG93TG9hZGluZzogZmFsc2UgfTsgLy9Mb2FkaW5nLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcmVhdGVkT1AgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZWRPUFsxXSA9PSAnY3JlYXRlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZU9iamVjdGl2ZVBvaW50cy5wdXNoKGNyZWF0ZWRPUFswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9wQ291bnQudG90YWwgPSAkc2NvcGUuU2l0ZU9iamVjdGl2ZVBvaW50cy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXRlZE9QWzFdID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RoaXMgaXMgZnJvbSBlZGl0IC0tIHJlZnJlc2ggcGFnZT9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZSB0aGUgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpQ2xpY2tlZCA9ICRzY29wZS5TaXRlT2JqZWN0aXZlUG9pbnRzLmluZGV4T2YoT1BjbGlja2VkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZU9iamVjdGl2ZVBvaW50c1tpQ2xpY2tlZF0gPSBjcmVhdGVkT1A7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZWRPUFsxXSA9PSAnZGVsZXRlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXhDbGlja2VkMSA9ICRzY29wZS5TaXRlT2JqZWN0aXZlUG9pbnRzLmluZGV4T2YoT1BjbGlja2VkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZU9iamVjdGl2ZVBvaW50cy5zcGxpY2UoaW5kZXhDbGlja2VkMSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9wQ291bnQudG90YWwgPSAkc2NvcGUuU2l0ZU9iamVjdGl2ZVBvaW50cy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XSk7XHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU2V0dGluZ3NDb250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTZXR0aW5nc0NvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgU2V0dGluZ3NDb250cm9sbGVycy5jb250cm9sbGVyKCdtZW1iZXJNb2RhbEN0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRjb29raWVzJywgJyRodHRwJywgJyR1aWJNb2RhbCcsICckdWliTW9kYWxJbnN0YW5jZScsICckZmlsdGVyJywgJyRzY2UnLCAncm9sZUxpc3QnLCAnYWdlbmN5TGlzdCcsICd0aGlzTWVtYmVyJywgJ01FTUJFUicsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICRodHRwLCAkdWliTW9kYWwsICR1aWJNb2RhbEluc3RhbmNlLCAkZmlsdGVyLCAkc2NlLCByb2xlTGlzdCwgYWdlbmN5TGlzdCwgdGhpc01lbWJlciwgTUVNQkVSKSB7XHJcbiAgICAgICAgICAgIC8vYWxsIHRoaW5ncyBib3RoIG5ldyBhbmQgZXhpc3RpbmcgbWVtYmVyIHBhZ2Ugd2lsbCBuZWVkXHJcbiAgICAgICAgICAgICRzY29wZS5hTWVtYmVyID0ge307IC8vaG9sZGVyIGZvciBtZW1iZXIgKGVpdGhlciBjb21pbmcgaW4gZm9yIGVkaXQsIG9yIGJlaW5nIGNyZWF0ZWQgZm9yIHBvc3RcclxuICAgICAgICAgICAgJHNjb3BlLm1hdGNoaW5nVXNlcnMgPSB0cnVlO1xyXG4gICAgICAgICAgICAkc2NvcGUudXNlcm5hbWVUb29sdGlwID0gJHNjZS50cnVzdEFzSHRtbCgnQWN0aXZlIERpcmVjdG9yeSB1c2VyIElELiBpZTogXFwnbXBlcHBsZXJcXCcgbm90IFxcJ21wZXBwbGVyQHVzZ3MuZ292XFwnLicpO1xyXG4gICAgICAgICAgICAkc2NvcGUuYWdlbmN5TGlzdCA9IGFnZW5jeUxpc3Q7XHJcbiAgICAgICAgICAgICRzY29wZS5wYXNzID0ge1xyXG4gICAgICAgICAgICAgICAgbmV3UDogJycsXHJcbiAgICAgICAgICAgICAgICBjb25maXJtUDogJydcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgJHNjb3BlLm5ld1Bhc3MgPSBcIlwiO1xyXG4gICAgICAgICAgICAvL3BvcHVsYXRlIHJvbGVzIGJhc2VkIG9uIHdobydzIGxvZ2dlZCBpblxyXG4gICAgICAgICAgICAkc2NvcGUubG9nZ2VkSW5Vc2VyID0ge307XHJcbiAgICAgICAgICAgICRzY29wZS5sb2dnZWRJblVzZXIuTmFtZSA9ICRjb29raWVzLmdldCgndXNlcnNOYW1lJyk7IC8vVXNlcidzIE5BTUVcclxuICAgICAgICAgICAgJHNjb3BlLmxvZ2dlZEluVXNlci5JRCA9ICRjb29raWVzLmdldCgnbUlEJyk7XHJcbiAgICAgICAgICAgICRzY29wZS5sb2dnZWRJblVzZXIuUm9sZSA9ICRjb29raWVzLmdldCgndXNlcnNSb2xlJyk7XHJcblxyXG4gICAgICAgICAgICAvL3BvcHVsYXRlIHJvbGUgbGlzdCBiYXNlZCBvbiB3aG8ncyBsb2dnZWQgaW4gKGFkbWluIGNhbiBhc3NpZ24gbWFuYWdlciBvciBmaWVsZCwgbWFuYWdlciBjYW4gb25seSBhc3NpZ24gZmllbGRcclxuICAgICAgICAgICAgc3dpdGNoICgkc2NvcGUubG9nZ2VkSW5Vc2VyLlJvbGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ0FkbWluJzpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucm9sZUxpc3QgPSByb2xlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIucm9sZV9pZCA8PSAzOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgJ01hbmFnZXInOlxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5yb2xlTGlzdCA9IHJvbGVMaXN0LmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gci5yb2xlX2lkID09IDM7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vaXMgdGhpcyBjcmVhdGluZyBuZXcgbWVtYmVyIG9yIGVkaXRpbmcgZXhpc3Rpbmc/XHJcbiAgICAgICAgICAgIGlmICh0aGlzTWVtYmVyICE9IFwiZW1wdHlcIikge1xyXG4gICAgICAgICAgICAgICAgLy9jaGVjayB0byBzZWUgaWYgdGhlIGFjY3QgVXNlciBpcyB0aGUgc2FtZSBhcyB0aGUgdXNlciB0aGV5IGFyZSBsb29raW5nIGF0XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubWF0Y2hpbmdVc2VycyA9IHRoaXNNZW1iZXIubWVtYmVyX2lkID09ICRzY29wZS5sb2dnZWRJblVzZXIuSUQgPyB0cnVlIDogZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFNZW1iZXIgPSBhbmd1bGFyLmNvcHkodGhpc01lbWJlcik7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYU1lbWJlci5Sb2xlID0gcm9sZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnJvbGVfaWQgPT0gJHNjb3BlLmFNZW1iZXIucm9sZV9pZDsgfSlbMF0ucm9sZV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNoYW5nZVBhc3MgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vcGFzc3dvcmQgdXBkYXRlIHNlY3Rpb25cclxuICAgICAgICAgICAgICAgICRzY29wZS5jaGFuZ2VNeVBhc3NCdG4gPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNoYW5nZVBhc3MgPT09IGZhbHNlID8gJHNjb3BlLmNoYW5nZVBhc3MgPSB0cnVlIDogJHNjb3BlLmNoYW5nZVBhc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5Eb250Q2hhbmdlUGFzcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL25ldmVybWluZCwgIGNsZWFyIGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNoYW5nZVBhc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0gLy9lbmQgZXhpc3RpbmcgbW1lYmVyIGVkaXRcclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvL25ldyBtZW1iZXIgYmVpbmcgY3JlYXRlZC4uIFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFNZW1iZXIgPSB7fTtcclxuICAgICAgICAgICAgICAgIC8vIGlmIHRoZXJlJ3Mgb25seSAxIGluIHRoZSByb2xlTGlzdCwgdGhlbiB0aGlzIG1lbWJlciBpcyBhIGZpZWxkIHBlcnNvblxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5yb2xlTGlzdC5sZW5ndGggPT0gMSlcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYU1lbWJlci5yb2xlX2lkID0gJHNjb3BlLnJvbGVMaXN0WzBdLnJvbGVfaWQ7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRzY29wZS5jcmVhdGUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFNZW1iZXIucGFzc3dvcmQgPSBidG9hKCRzY29wZS5wYXNzLmNvbmZpcm1QKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlZE1lbWJlciA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIE1FTUJFUi5zYXZlKCRzY29wZS5hTWVtYmVyLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiTWVtYmVyIENyZWF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcHVzaCB0aGlzIG5ldyBtZW1iZXIgaW50byB0aGUgbWVtYmVyTGlzdCAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkTWVtYmVyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhZyA9ICRzY29wZS5hZ2VuY3lMaXN0LmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gcmVzcG9uc2UuYWdlbmN5X2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvID0gcm9sZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnJvbGVfaWQgPT0gcmVzcG9uc2Uucm9sZV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRNZW1iZXIuQWdlbmN5ID0gYWcuYWdlbmN5X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRNZW1iZXIuUm9sZSA9IHJvLnJvbGVfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUubWVtYmVyTGlzdC5wdXNoKG5tKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIGNyZWF0aW5nIG5ldyBtZW1iZXI6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbmRCYWNrID0gW2NyZWF0ZWRNZW1iZXIsICdjcmVhdGVkJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHNlbmRCYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTsgLy8gZW5kIGNyZWF0ZSgpXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAkc2NvcGUuc2F2ZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnBhc3MubmV3UCAhPT0gXCJcIikgJHNjb3BlLmFNZW1iZXIucGFzc3dvcmQgPSBidG9hKCRzY29wZS5wYXNzLm5ld1ApO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVkTWVtYmVyID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvcm1hdHRlZE1lbWJlciA9IGFuZ3VsYXIuY29weSgkc2NvcGUuYU1lbWJlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGZvcm1hdHRlZE1lbWJlci5Sb2xlOyBkZWxldGUgZm9ybWF0dGVkTWVtYmVyLkFnZW5jeTtcclxuICAgICAgICAgICAgICAgICAgICBNRU1CRVIudXBkYXRlKHsgaWQ6IGZvcm1hdHRlZE1lbWJlci5tZW1iZXJfaWQgfSwgZm9ybWF0dGVkTWVtYmVyLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRNZW1iZXIgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFnID0gJHNjb3BlLmFnZW5jeUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLmFnZW5jeV9pZCA9PSByZXNwb25zZS5hZ2VuY3lfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm8gPSByb2xlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIucm9sZV9pZCA9PSByZXNwb25zZS5yb2xlX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZE1lbWJlci5BZ2VuY3kgPSBhZy5hZ2VuY3lfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZE1lbWJlci5Sb2xlID0gcm8ucm9sZV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jaGVjayBpZiB0aGlzIGlzIHRoZSBtZW1iZXIgbG9nZ2VkIGluIGFuZCB1cGRhdGUgdGhlIGNvb2tpZXMgaWYgc29cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5sb2dnZWRJblVzZXIuSUQgPT0gcmVzcG9uc2UubWVtYmVyX2lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFNZW1iZXIucGFzc3dvcmQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbmMgPSBidG9hKHVwZGF0ZWRNZW1iZXIudXNlcm5hbWUuY29uY2F0KFwiOlwiLCAkc2NvcGUucGFzcy5uZXdQKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9zZXQgZXhwaXJhdGlvbiBvbiBjb29raWVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4cGlyZURhdGUgPSBuZXcgRGF0ZSgpLmFkZEhvdXJzKDgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb29raWVzLnB1dCgnU1ROQ3JlZHMnLCBlbmMsIHsgZXhwaXJlczogZXhwaXJlRGF0ZSB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvb2tpZXMucHV0KCdTVE5Vc2VybmFtZScsIHVwZGF0ZWRNZW1iZXIudXNlcm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJzTkFNRSA9IHVwZGF0ZWRNZW1iZXIuZm5hbWUgKyBcIiBcIiArIHVwZGF0ZWRNZW1iZXIubG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29va2llcy5wdXQoJ3VzZXJzTmFtZScsIHVzZXJzTkFNRSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJNZW1iZXIgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW5kQmFjayA9IFt1cGRhdGVkTWVtYmVyLCAndXBkYXRlZCddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZW5kQmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlcnJvck1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlBsZWFzZSBwb3B1bGF0ZSBhbGwgcmVxdWlyZWQgZmllbGRzLjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9Oy8vZW5kIFNhdmVcclxuXHJcbiAgICAgICAgICAgIC8vI3JlZ2lvbiBERUxFVEUgTWVtYmVyIGNsaWNrXHJcbiAgICAgICAgICAgICRzY29wZS5EZWxldGVNZW1iZXIgPSBmdW5jdGlvbiAobWVtKSB7XHJcbiAgICAgICAgICAgICAgICAvL21vZGFsXHJcbiAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJNZW1iZXJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAobWVtVG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL0RFTEVURSBpdFxyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgTUVNQkVSLmRlbGV0ZU1lbWJlcih7IGlkOiBtZW1Ub1JlbW92ZS5tZW1iZXJfaWQgfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIk1lbWJlciBEZWxldGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoW1wiZGVcIiwgJ2RlbGV0ZWQnXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBERUxFVEUgTWVtYmVyIGNsaWNrXHJcbiAgICAgICAgICAgIC8vY2FuY2VsIG1vZGFsXHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZyA9IHsgc2hvd0xvYWRpbmc6IGZhbHNlIH07IC8vTG9hZGluZy4uLlxyXG4gICAgICAgIH1dKTtcclxufSgpKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBTZXR0aW5nc0NvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NldHRpbmdzQ29udHJvbGxlcnMnKTtcclxuXHJcbiAgICBTZXR0aW5nc0NvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ21lbWJlckluZm9DdHJsJywgWyckc2NvcGUnLCAnJGNvb2tpZXMnLCAnJGxvY2F0aW9uJywgJyRodHRwJywgJyR1aWJNb2RhbCcsICckc3RhdGVQYXJhbXMnLCAnJGZpbHRlcicsICckc2NlJywgJ2FsbFJvbGVzJywgJ01FTUJFUicsICd0aGlzTWVtYmVyJywgXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGNvb2tpZXMsICRsb2NhdGlvbiwgJGh0dHAsICR1aWJNb2RhbCwgJHN0YXRlUGFyYW1zLCAkZmlsdGVyLCAkc2NlLCBhbGxSb2xlcywgTUVNQkVSLCB0aGlzTWVtYmVyKSB7XHJcbiAgICAgICAgICAgIGlmICgkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IHVuZGVmaW5lZCB8fCAkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hdXRoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvL2FsbCB0aGluZ3MgYm90aCBuZXcgYW5kIGV4aXN0aW5nIG1lbWJlciBwYWdlIHdpbGwgbmVlZFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFNZW1iZXIgPSB7fTsgLy9ob2xkZXIgZm9yIG1lbWJlciAoZWl0aGVyIGNvbWluZyBpbiBmb3IgZWRpdCwgb3IgYmVpbmcgY3JlYXRlZCBmb3IgcG9zdFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm1hdGNoaW5nVXNlcnMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnVzZXJuYW1lVG9vbHRpcCA9ICRzY2UudHJ1c3RBc0h0bWwoJ0FjdGl2ZSBEaXJlY3RvcnkgdXNlciBJRC4gaWU6IFxcJ21wZXBwbGVyXFwnIG5vdCBcXCdtcGVwcGxlckB1c2dzLmdvdlxcJy4nKTtcclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBERUxFVEUgTWVtYmVyIGNsaWNrXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuRGVsZXRlTWVtYmVyID0gZnVuY3Rpb24gKG1lbSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJNZW1iZXJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKG5hbWVUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3llcywgcmVtb3ZlIHRoaXMga2V5d29yZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ERUxFVEUgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgTUVNQkVSLmRlbGV0ZU1lbWJlcih7IGlkOiBuYW1lVG9SZW1vdmUubWVtYmVyX2lkIH0sIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWxNZW0gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbE1lbS5tZW1iZXJfaWQgPSBuYW1lVG9SZW1vdmUubWVtYmVyX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsTWVtLk5hbWUgPSBuYW1lVG9SZW1vdmUuZm5hbWUgKyBcIiBcIiArIG5hbWVUb1JlbW92ZS5sbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhZyA9ICRzY29wZS5hZ2VuY3lMaXN0LmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gbmFtZVRvUmVtb3ZlLmFnZW5jeV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm8gPSBhbGxSb2xlcy5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIucm9sZV9pZCA9PSBuYW1lVG9SZW1vdmUucm9sZV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxNZW0uQWdlbmN5ID0gYWcuYWdlbmN5X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxNZW0uUm9sZSA9IHJvLnJvbGVfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tZW1iZXJMaXN0LnNwbGljZSgkc2NvcGUubWVtYmVyTGlzdC5pbmRleE9mKGRlbE1lbSksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJNZW1iZXIgRGVsZXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL01lbWJlcnMvTWVtYmVyc0xpc3QnKS5yZXBsYWNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIERFTEVURSBNZW1iZXIgY2xpY2tcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucGFzcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBuZXdQOiAnJyxcclxuICAgICAgICAgICAgICAgICAgICBjb25maXJtUDogJydcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV3UGFzcyA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9pcyB0aGlzIGNyZWF0aW5nIG5ldyBtZW1iZXIgb3IgZWRpdGluZyBleGlzdGluZz9cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzTWVtYmVyICE9PSB1bmRlZmluZWQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9jaGVjayB0byBzZWUgaWYgdGhlIGFjY3QgVXNlciBpcyB0aGUgc2FtZSBhcyB0aGUgdXNlciB0aGV5IGFyZSBsb29raW5nIGF0XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hdGNoaW5nVXNlcnMgPSAkc3RhdGVQYXJhbXMuaWQgPT0gJHNjb3BlLmxvZ2dlZEluVXNlci5JRCA/IHRydWUgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFNZW1iZXIgPSB0aGlzTWVtYmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hTWVtYmVyLlJvbGUgPSBhbGxSb2xlcy5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIucm9sZV9pZCA9PSAkc2NvcGUuYU1lbWJlci5yb2xlX2lkOyB9KVswXS5yb2xlX25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNoYW5nZVBhc3MgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9jaGFuZ2UgdG8gdGhlIHVzZXIgbWFkZSwgcHV0IGl0IC4uIGZpcmVkIG9uIGVhY2ggYmx1ciBhZnRlciBjaGFuZ2UgbWFkZSB0byBmaWVsZFxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5TYXZlT25CbHVyID0gZnVuY3Rpb24gKHYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZW5zdXJlIHRoZXkgZG9uJ3QgZGVsZXRlIHJlcXVpcmVkIGZpZWxkIHZhbHVlcyAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTUVNQkVSLnVwZGF0ZSh7IGlkOiAkc2NvcGUuYU1lbWJlci5tZW1iZXJfaWQgfSwgJHNjb3BlLmFNZW1iZXIsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIk1lbWJlciBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvck1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5QbGVhc2UgcG9wdWxhdGUgYWxsIHJlcXVpcmVkIGZpZWxkcy48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOlsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07Ly9lbmQgU2F2ZU9uQmx1clxyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL3Bhc3N3b3JkIHVwZGF0ZSBzZWN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNoYW5nZU15UGFzc0J0biA9IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNoYW5nZVBhc3MgPT09IGZhbHNlID8gJHNjb3BlLmNoYW5nZVBhc3MgPSB0cnVlIDogJHNjb3BlLmNoYW5nZVBhc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQ2hhbmdlUGFzc3dvcmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2hhbmdlIFVzZXIncyBwYXNzd29yZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnBhc3MubmV3UCA9PT0gXCJcIiB8fCAkc2NvcGUucGFzcy5jb25maXJtUCA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPllvdSBtdXN0IGZpcnN0IGVudGVyIGEgbmV3IHBhc3N3b3JkLjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6Wyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTUVNQkVSLmNoYW5nZVBXKHsgdXNlcm5hbWU6ICRzY29wZS5hTWVtYmVyLnVzZXJuYW1lLCBuZXdQYXNzOiAkc2NvcGUucGFzcy5uZXdQIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlBhc3N3b3JkIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdXBkYXRlIGNyZWRzIE9OTFkgSUYgdXNlciBsb2dnZWQgaW4gaXMgPT0gdGhpcyB1cGRhdGluZyBtZW1iZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hTWVtYmVyLm1lbWJlcl9pZCA9PSAkc2NvcGUubG9nZ2VkSW5Vc2VyLm1lbWJlcl9pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVuYyA9IGJ0b2EoJHNjb3BlLmFNZW1iZXIudXNlcm5hbWUuY29uY2F0KFwiOlwiLCAkc2NvcGUucGFzcy5uZXdQKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29va2llcy5wdXQoJ1NUTkNyZWRzJywgZW5jKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb29raWVzLnB1dCgnU1ROVXNlcm5hbWUnLCAkc2NvcGUuYU1lbWJlci51c2VybmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29va2llcy5wdXQoJ3VzZXJzTmFtZScsICRzY29wZS5sb2dnZWRJblVzZXIuTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29va2llcy5wdXQoJ21JRCcsICRzY29wZS5hTWVtYmVyLm1lbWJlcl9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm9sZU5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKCRzY29wZS5hTWVtYmVyLnJvbGVfaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDE6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGVOYW1lID0gXCJBZG1pblwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGVOYW1lID0gXCJNYW5hZ2VyXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZU5hbWUgPSBcIkZpZWxkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgNDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZU5hbWUgPSBcIlB1YmxpY1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlTmFtZSA9IFwiQ2l0aXplbk1hbmFnZXJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29va2llcy5wdXQoJ3VzZXJzUm9sZScsIHJvbGVOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2hhbmdlUGFzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFzcy5uZXdQID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYXNzLmNvbmZpcm1QID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07IC8vZW5kIENoYW5nZVBhc3N3b3JkKClcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRvbnRDaGFuZ2VQYXNzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25ldmVybWluZCwgIGNsZWFyIGlucHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jaGFuZ2VQYXNzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0gLy9lbmQgb2YgJHN0YXRlUGFyYW1zID4gMCAoZXhpc3RpbmcpXHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3RoaXMgaXMgYSBuZXcgbWVtYmVyIGJlaW5nIGNyZWF0ZWRcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNRU1CRVIuYWRkTWVtYmVyKHsgcGFzczogJHNjb3BlLnBhc3MuY29uZmlybVAgfSwgJHNjb3BlLmFNZW1iZXIsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIk1lbWJlciBDcmVhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcHVzaCB0aGlzIG5ldyBtZW1iZXIgaW50byB0aGUgbWVtYmVyTGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBubSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5tLm1lbWJlcl9pZCA9IHJlc3BvbnNlLm1lbWJlcl9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBubS5OYW1lID0gcmVzcG9uc2UuZm5hbWUgKyBcIiBcIiArIHJlc3BvbnNlLmxuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhZyA9ICRzY29wZS5hZ2VuY3lMaXN0LmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gcmVzcG9uc2UuYWdlbmN5X2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm8gPSBhbGxSb2xlcy5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIucm9sZV9pZCA9PSByZXNwb25zZS5yb2xlX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBubS5BZ2VuY3kgPSBhZy5hZ2VuY3lfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBubS5Sb2xlID0gcm8ucm9sZV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tZW1iZXJMaXN0LnB1c2gobm0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9NZW1iZXJzL01lbWJlcnNMaXN0JykucmVwbGFjZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfTsgLy8gZW5kIHNhdmUoKVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfV0pO1xyXG59KCkpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFNldHRpbmdzQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU2V0dGluZ3NDb250cm9sbGVycycpO1xyXG5cclxuICAgIFNldHRpbmdzQ29udHJvbGxlcnMuY29udHJvbGxlcignbWVtYmVyQ3RybCcsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGNvb2tpZXMnLCAnJGxvY2F0aW9uJywgJyRodHRwJywgJyRmaWx0ZXInLCAnJHVpYk1vZGFsJywgJ01FTUJFUicsICdhbGxSb2xlcycsICdhbGxBZ2VuY2llcycsICd1c2VyUHJvZmlsZUlkJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkY29va2llcywgJGxvY2F0aW9uLCAkaHR0cCwgJGZpbHRlciwgJHVpYk1vZGFsLCBNRU1CRVIsIGFsbFJvbGVzLCBhbGxBZ2VuY2llcywgdXNlclByb2ZpbGVJZCkge1xyXG4gICAgICAgICAgICBpZiAoJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSB1bmRlZmluZWQgfHwgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYXV0aCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy9hbGwgdGhpbmdzIGJvdGggbmV3IGFuZCBleGlzdGluZyBtZW1iZXIgcGFnZSB3aWxsIG5lZWRcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUudGhpc1BhZ2UgPSBcIlNldHRpbmdzL01lbWJlcnNcIjsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyBjaGFuZ2Ugc29ydGluZyBvcmRlclxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNvcnRfYnkgPSBmdW5jdGlvbiAobmV3U29ydGluZ09yZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5zb3J0aW5nT3JkZXIgPT0gbmV3U29ydGluZ09yZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXZlcnNlID0gISRzY29wZS5yZXZlcnNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc29ydGluZ09yZGVyID0gbmV3U29ydGluZ09yZGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGljb24gc2V0dXBcclxuICAgICAgICAgICAgICAgICAgICAkKCd0aCBpJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGljb24gcmVzZXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygpLmFkZENsYXNzKCdnbHlwaGljb24gZ2x5cGhpY29uLXNvcnQnKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnJldmVyc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgndGguJyArIG5ld1NvcnRpbmdPcmRlciArICcgaScpLnJlbW92ZUNsYXNzKCkuYWRkQ2xhc3MoJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJ3RoLicgKyBuZXdTb3J0aW5nT3JkZXIgKyAnIGknKS5yZW1vdmVDbGFzcygpLmFkZENsYXNzKCdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93bicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgTUVNQkVSLmdldEV2ZW50UGVvcGxlKHsgRXZlbnRpZDogJzEzNScgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLnRhYmxlKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy9jcmVhdGUvdmlldyBtZW1iZXIgd2FzIGNsaWNrZWRcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93TWVtYmVyTW9kYWwgPSBmdW5jdGlvbiAobWVtYmVyQ2xpY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleENsaWNrZWQgPSAkc2NvcGUubWVtYmVyTGlzdC5pbmRleE9mKG1lbWJlckNsaWNrZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcgPSB7IHNob3dMb2FkaW5nOiB0cnVlIH07IC8vTG9hZGluZy4uLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdtZW1iZXJNb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ21lbWJlck1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdsZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ3JlcC1kaWFsb2cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzTWVtYmVyOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lbWJlckNsaWNrZWQgIT09IDAgPyBtZW1iZXJDbGlja2VkIDogXCJlbXB0eVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnZW5jeUxpc3Q6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWxsQWdlbmNpZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZUxpc3Q6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWxsUm9sZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChjcmVhdGVkTWVtYmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaXMgdGhlcmUgYSBuZXcgb3Agb3IganVzdCBjbG9zZWQgbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZyA9IHsgc2hvd0xvYWRpbmc6IGZhbHNlIH07IC8vTG9hZGluZy4uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXRlZE1lbWJlciAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXRlZE1lbWJlclsxXSA9PSAnY3JlYXRlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVtYmVyTGlzdC5wdXNoKGNyZWF0ZWRNZW1iZXJbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZWRNZW1iZXJbMV0gPT09ICd1cGRhdGVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdXBkYXRlIHRoZSBsaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1lbWJlckxpc3RbaW5kZXhDbGlja2VkXSA9IGNyZWF0ZWRNZW1iZXJbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXRlZE1lbWJlclsxXSA9PSAnZGVsZXRlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZhciBpbmRleENsaWNrZWQxID0gJHNjb3BlLm1lbWJlckxpc3QuaW5kZXhPZihjcmVhdGVkTWVtYmVyWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVtYmVyTGlzdC5zcGxpY2UoaW5kZXhDbGlja2VkLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY3lMaXN0ID0gYWxsQWdlbmNpZXM7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICBNRU1CRVIuZ2V0QWxsKCkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVtYmVyTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgcmVzcG9uc2UubGVuZ3RoOyB4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVhY2hNID0gcmVzcG9uc2VbeF07ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhZyA9ICRzY29wZS5hZ2VuY3lMaXN0LmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gcmVzcG9uc2VbeF0uYWdlbmN5X2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvID0gYWxsUm9sZXMuZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnJvbGVfaWQgPT0gcmVzcG9uc2VbeF0ucm9sZV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVhY2hNLkFnZW5jeSA9IGFnLmFnZW5jeV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlYWNoTS5Sb2xlID0gcm8ucm9sZV9uYW1lOyAgICAgICAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVtYmVyTGlzdC5wdXNoKGVhY2hNKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiBzb21lb25lIGNsaWNrZWQgb24gdGhlaXIgbmFtZSBpbiB0aGUgdXBwZXIgcmlnaHQgY29ybmVyLCBjb21lIGluIGFuZCBzdHJhaWdodCBhd2F5IG9wZW4gbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICBpZiAodXNlclByb2ZpbGVJZCAhPT0gdW5kZWZpbmVkICYmIHVzZXJQcm9maWxlSWQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTUVNQkVSLnF1ZXJ5KHsgaWQ6IHVzZXJQcm9maWxlSWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dNZW1iZXJNb2RhbChyZXNwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XSk7XHJcbn0oKSk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYmRyYXBlciBvbiAzLzkvMjAxNi5cclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICB2YXIgU1ROQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQ29udHJvbGxlcnMnKTtcclxuXHJcbiAgICBTVE5Db250cm9sbGVycy5jb250cm9sbGVyKCdNYXBTaXRlSW5mb0NvbnRyb2xsZXInLCBbJyRzY29wZScsICckaHR0cCcsICckcm9vdFNjb3BlJywgJyRjb29raWVzJywgJyRsb2NhdGlvbicsICdTSVRFJywgJ2xlYWZsZXRNYXJrZXJFdmVudHMnLCAnbGVhZmxldEJvdW5kc0hlbHBlcnMnLCAnJHN0YXRlJywgJ3NwaW5uZXJTZXJ2aWNlJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkaHR0cCwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICRsb2NhdGlvbiwgU0lURSwgIGxlYWZsZXRNYXJrZXJFdmVudHMsIGxlYWZsZXRCb3VuZHNIZWxwZXJzLCAkc3RhdGUsIHNwaW5uZXJTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSB7IHNpdGVPcGVuOiB0cnVlIH07IC8vYWNjb3JkaW9uIGZvciBzaXRlSW5mb1xyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRvbignbWFwU2l0ZUNsaWNrUmVzdWx0cycsIGZ1bmN0aW9uIChldmVudCwgc2l0ZVBhcnRzKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUgPSBzaXRlUGFydHNbMF07XHJcbiAgICAgICAgICAgICAgICAvL29ubHkgNiBkZWNpbWFsIHBsYWNlcyBmb3IgbGF0L2xvbmdcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQgPSBwYXJzZUZsb2F0KCRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZC50b0ZpeGVkKDYpKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQgPSBwYXJzZUZsb2F0KCRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQudG9GaXhlZCg2KSk7XHJcbiAgICAgICAgICAgICAgICBzcGlubmVyU2VydmljZS5oaWRlKFwic2l0ZUluZm9TcGlubmVyXCIpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5nb1RvU2l0ZURhc2hib2FyZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnc2l0ZS5kYXNoYm9hcmQnLCB7IGlkOiAkc2NvcGUuYVNpdGUuc2l0ZV9pZCB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XSk7Ly9lbmQgY29udHJvbGxlciBmdW5jdGlvblxyXG59KSgpO1xyXG4iLCIvKipcclxuICogQ3JlYXRlZCBieSBiZHJhcGVyIG9uIDMvOS8yMDE2LlxyXG4gKi9cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHZhciBTVE5Db250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTVE5Db250cm9sbGVycycpO1xyXG5cclxuICAgIFNUTkNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ01hcFNlbnNvclByb3Bvc2VDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJHRpbWVvdXQnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckbG9jYXRpb24nLCAnU0lURScsICdJTlNUUlVNRU5UJywgJ0lOU1RSVU1FTlRfU1RBVFVTJywgJ2FsbERlcGxveVR5cGVzJywgJ2FsbFNlbnNEZXBzJywgJ2xlYWZsZXRNYXJrZXJFdmVudHMnLCAnbGVhZmxldEJvdW5kc0hlbHBlcnMnLCAnJHN0YXRlJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkaHR0cCwgJHRpbWVvdXQsICRyb290U2NvcGUsICRjb29raWVzLCAkbG9jYXRpb24sIFNJVEUsIElOU1RSVU1FTlQsIElOU1RSVU1FTlRfU1RBVFVTLCBhbGxEZXBsb3lUeXBlcywgYWxsU2Vuc0RlcHMsIGxlYWZsZXRNYXJrZXJFdmVudHMsIGxlYWZsZXRCb3VuZHNIZWxwZXJzLCAkc3RhdGUpIHtcclxuICAgICAgICAgICAgLy93aGVuIGEgc2l0ZSBpcyAgY2xpY2tlZCwgdGhpcyB3aWxsIGJlIHRyaWdnZXJlZCBmcm9tIHNlcnZpY2UgdG8gbGV0IHRoaXMgY29udHJvbGxlciBrbm93IGFib3V0IGl0XHJcbiAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCdtYXBTaXRlQ2xpY2tSZXN1bHRzJywgZnVuY3Rpb24gKGV2ZW50LCBzaXRlUGFydHMpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS50aGlzU2l0ZSA9IHNpdGVQYXJ0c1swXTsgLy9oZXJlJ3MgdGhlIHNpdGUgdGhleSBjbGlja2VkXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzLnNlbnNvck9wZW4gPSBmYWxzZTsgLy9tYWtlIHN1cmUgdGhlIHByb3Bvc2VkIHNlbnNvciBhY2NvcmRpb24gaXMgY2xvc2VkIHNvIHRoZXkgaGF2ZSB0byBvcGVuIGFuZCB0cmlnZ2VyIHRoZSBnZXRcclxuICAgICAgICAgICAgICAgICRzY29wZS5Qcm9wb3NlZFNlbnNvcnM0U2l0ZSA9IFtdOyAvL21ha2Ugc3VyZSB0aGlzIGlzIGNsZWFyIGluIGNhc2UgdGhleSBhcmUgY2xpY2tpbmcgb24gb25lIHNpdGUgYWZ0ZXIgYW5vdGhlclxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dQcm9wb3NlZCA9IGZhbHNlOyAvL2hpZGUgdGhlIHByb3Bvc2VkIHNlbnNvciB0eXBlIGxpc3QgaW5pdGlhbGx5XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvL2FsbCBkZXBsb3ltZW50IHR5cGVzXHJcbiAgICAgICAgICAgICRzY29wZS5kZXBsb3lUeXBlTGlzdCA9IGFuZ3VsYXIuY29weShhbGxEZXBsb3lUeXBlcyk7XHJcbiAgICAgICAgICAgIHZhciB0ZW1wRGVwVHlwZUlEID0gMDtcclxuXHJcbiAgICAgICAgICAgIC8vZml4IGRlcGxveW1lbnQgdHlwZXMgc28gdGhhdCBcIlRlbXBlcmF0dXJlXCIgYmVjb21lcyAyIDogVGVtcGVyYXR1cmUgKE1ldCBzZW5zb3IpLVNlbnNvclR5cGU6MiBhbmQgVGVtcGVyYXR1cmUgKHByZXNzdXJlIHRyYW5zZHVjZXIpLVNlbnNvclR5cGU6MSAtLSBqdXN0IGZvciBwcm9wb3NlZFxyXG4gICAgICAgICAgICBmb3IgKHZhciBkID0gMDsgZCA8ICRzY29wZS5kZXBsb3lUeXBlTGlzdC5sZW5ndGg7IGQrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5kZXBsb3lUeXBlTGlzdFtkXS5tZXRob2QgPT09IFwiVGVtcGVyYXR1cmVcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBEZXBUeXBlSUQgPSAkc2NvcGUuZGVwbG95VHlwZUxpc3RbZF0uZGVwbG95bWVudF90eXBlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBsb3lUeXBlTGlzdFtkXS5tZXRob2QgPSBcIlRlbXBlcmF0dXJlIChNZXQgc2Vuc29yKVwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICRzY29wZS5kZXBsb3lUeXBlTGlzdC5wdXNoKHsgZGVwbG95bWVudF90eXBlX2lkOiB0ZW1wRGVwVHlwZUlELCBtZXRob2Q6IFwiVGVtcGVyYXR1cmUgKFByZXNzdXJlIFRyYW5zZHVjZXIpXCIgfSk7XHJcblxyXG4gICAgICAgICAgICAvL3Byb3Bvc2VkIHNlbnNvcnMgYWNjb3JkaW9uIHdhcyBvcGVuZWQsIGdvIGdldCB0aGVtXHJcbiAgICAgICAgICAgICRzY29wZS5nZXRQcm9wb3NlZFNlbnNvcnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBTSVRFLmdldFNpdGVTZW5zb3JzKHsgaWQ6ICRzY29wZS50aGlzU2l0ZS5zaXRlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHNSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbmVlZCB0byBtYWtlIHN1cmUgdGhlIGluc3RydW1lbnRfc3RhdHVzZXMgYXJlIGluIHRoZSBjb3JyZWN0IG9yZGVyIChbMF1SZXRyaWV2ZWQsIFsxXURlcGxveWVkLCBbMl1Qcm9wb3NlZCAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBzID0gMDsgcyA8IHNSZXNwb25zZS5sZW5ndGg7IHMrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29ycmVjdE9yZGVyU1MgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbnNvclN0YXR1c2VzID0gc1Jlc3BvbnNlW3NdLmluc3RydW1lbnRfc3RhdHVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2Vuc29yU3RhdHVzZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9vbmx5IGNhcmUgYWJvdXQgb3JkZXIgaWYgdGhlcmUncyBtb3JlIHRoYW4gMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByb3Bvc2VkU3RhdCA9IHNlbnNvclN0YXR1c2VzLmZpbHRlcihmdW5jdGlvbiAocHMpIHsgcmV0dXJuIHBzLnN0YXR1cyA9PSBcIlByb3Bvc2VkXCI7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlcGxveWVkU3RhdCA9IHNlbnNvclN0YXR1c2VzLmZpbHRlcihmdW5jdGlvbiAocHMpIHsgcmV0dXJuIHBzLnN0YXR1cyA9PSBcIkRlcGxveWVkXCI7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJldExvc3RTdGF0ID0gc2Vuc29yU3RhdHVzZXMuZmlsdGVyKGZ1bmN0aW9uIChwcykgeyByZXR1cm4gcHMuc3RhdHVzID09IFwiUmV0cmlldmVkXCIgfHwgcHMuc3RhdHVzID09IFwiTG9zdFwiOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbm93IGFkZCB0aGVtIGJhY2sgaW4gY29ycmVjdGx5ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldExvc3RTdGF0KSBjb3JyZWN0T3JkZXJTUy5wdXNoKHJldExvc3RTdGF0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZXBsb3llZFN0YXQpIGNvcnJlY3RPcmRlclNTLnB1c2goZGVwbG95ZWRTdGF0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcm9wb3NlZFN0YXQpIGNvcnJlY3RPcmRlclNTLnB1c2gocHJvcG9zZWRTdGF0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvcnJlY3RPcmRlclNTLnB1c2goc2Vuc29yU3RhdHVzZXNbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbm93IHB1dCBpdCBiYWNrIGluIHRoZSBvYmplY3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgc1Jlc3BvbnNlW3NdLmluc3RydW1lbnRfc3RhdHVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNSZXNwb25zZVtzXS5pbnN0cnVtZW50X3N0YXR1cyA9IGNvcnJlY3RPcmRlclNTO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlByb3Bvc2VkU2Vuc29yczRTaXRlID0gc1Jlc3BvbnNlLmZpbHRlcihmdW5jdGlvbiAoc3MpIHsgcmV0dXJuIHNzLmluc3RydW1lbnRfc3RhdHVzWzBdLnN0YXR1c190eXBlX2lkID09IDQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2FsbCBzZW5zb3IgZGVwbG95bWVudHMgKHJlbGF0aW9uc2hpcCB0YWJsZSlcclxuICAgICAgICAgICAgJHNjb3BlLnNlbnNEZXBUeXBlcyA9IGFsbFNlbnNEZXBzO1xyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd1Byb3Bvc2VkID0gZmFsc2U7IC8vdGhleSB3YW50IHRvIGFkZCBhIHByb3Bvc2VkIHNlbnNvciwgb3BlbiBvcHRpb25zIChib29sZWFuIHRvZ2dsZSlcclxuICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHsgc2Vuc29yT3BlbjogZmFsc2UgfTsgLy9hY2NvcmRpb24gb3BlbiBvciBjbG9zZWRcclxuICAgICAgICAgICAgLy9zaG93L2hpZGUgcHJvcG9zZWQgc2Vuc29ycyB0byBhZGRcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dIaWRlUHJvcG9zZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1Byb3Bvc2VkID0gISRzY29wZS5zaG93UHJvcG9zZWQ7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2NhbmNlbCBwcm9wb3NpbmcgYSBzZW5zb3IsIGNsb3NlIHRoZSBsaXN0XHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWxQcm9wb3NpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1Byb3Bvc2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vYWRkIHRoZXNlIGNoZWNrZWQgUHJvcG9zZWQgc2Vuc29ycyB0byB0aGlzIHNpdGVcclxuICAgICAgICAgICAgJHNjb3BlLkFkZFByb3Bvc2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIFRpbWVfU1RBTVAgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZHQgPSAwOyBkdCA8ICRzY29wZS5kZXBsb3lUeXBlTGlzdC5sZW5ndGg7IGR0KyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmRlcGxveVR5cGVMaXN0W2R0XS5zZWxlY3RlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcG9zZWRUb0FkZCA9IHt9OyB2YXIgcHJvcFN0YXRUb0FkZCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmRlcGxveVR5cGVMaXN0W2R0XS5tZXRob2Quc3Vic3RyaW5nKDAsIDQpID09IFwiVGVtcFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RlbXBlcmF0dXJlIHByb3Bvc2VkIHNlbnNvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zZWRUb0FkZCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBsb3ltZW50X3R5cGVfaWQ6ICRzY29wZS5kZXBsb3lUeXBlTGlzdFtkdF0uZGVwbG95bWVudF90eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6ICRzY29wZS50aGlzU2l0ZS5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbnNvcl90eXBlX2lkOiAkc2NvcGUuZGVwbG95VHlwZUxpc3RbZHRdLm1ldGhvZCA9PSBcIlRlbXBlcmF0dXJlIChQcmVzc3VyZSBUcmFuc2R1Y2VyKVwiID8gMSA6IDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9nbyB0aHJvdWdoIHRoZSBuZXcgZnVsbEluc3RydW1lbnQgYW5kIHNlZSBpZiBhbnkgb2YgdGhlIHNlbnNvcidzIGRlcGxveW1lbnR0eXBlcyBhcmUgdGhpcyBkZXBsb3ltZW50IHR5cGUgdG8gc2V0IHRoZSBzZW5zb3JfdHlwZV9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNJRCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLnNlbnNEZXBUeXBlcywgZnVuY3Rpb24gKHNkdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgc2R0LmRlcGxveW1lbnR0eXBlcy5sZW5ndGg7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2R0LmRlcGxveW1lbnR0eXBlc1t4XS5kZXBsb3ltZW50X3R5cGVfaWQgPT0gJHNjb3BlLmRlcGxveVR5cGVMaXN0W2R0XS5kZXBsb3ltZW50X3R5cGVfaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzSUQgPSBzZHQuc2Vuc29yX3R5cGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FueSBvdGhlciB0eXBlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NlZFRvQWRkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcGxveW1lbnRfdHlwZV9pZDogJHNjb3BlLmRlcGxveVR5cGVMaXN0W2R0XS5kZXBsb3ltZW50X3R5cGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogJHNjb3BlLnRoaXNTaXRlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vuc29yX3R5cGVfaWQ6IHNJRFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBwb3N0IGl0IChJbnN0cnVtZW50IGZpcnN0LCB0aGVuIEluc3RydW1lbnQgU3RhdHVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgSU5TVFJVTUVOVC5zYXZlKHByb3Bvc2VkVG9BZGQpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlZFByb3BTZW5zb3IgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwbG95bWVudF90eXBlX2lkOiByZXNwb25zZS5kZXBsb3ltZW50X3R5cGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogcmVzcG9uc2Uuc2l0ZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5zb3JfdHlwZV9pZDogcmVzcG9uc2Uuc2Vuc29yX3R5cGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1bWVudF9pZDogcmVzcG9uc2UuaW5zdHJ1bWVudF9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBsb3ltZW50VHlwZTogJHNjb3BlLmRlcGxveVR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoZHRsKSB7IHJldHVybiBkdGwuZGVwbG95bWVudF90eXBlX2lkID09IHJlc3BvbnNlLmRlcGxveW1lbnRfdHlwZV9pZDsgfSlbMF0ubWV0aG9kLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbnNvclR5cGU6ICRzY29wZS5zZW5zRGVwVHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnNlbnNvcl90eXBlX2lkID09IHJlc3BvbnNlLnNlbnNvcl90eXBlX2lkO30pWzBdLnNlbnNvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BTdGF0VG9BZGQgPSB7IGluc3RydW1lbnRfaWQ6IHJlc3BvbnNlLmluc3RydW1lbnRfaWQsIHN0YXR1c190eXBlX2lkOiA0LCBtZW1iZXJfaWQ6ICRjb29raWVzLmdldCgnbUlEJyksIHRpbWVfc3RhbXA6IFRpbWVfU1RBTVAsIHRpbWVfem9uZTogJ1VUQycsIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSU5TVFJVTUVOVF9TVEFUVVMuc2F2ZShwcm9wU3RhdFRvQWRkKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChzdGF0UmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wU3RhdFRvQWRkLnN0YXR1cyA9ICdQcm9wb3NlZCc7IHByb3BTdGF0VG9BZGQuaW5zdHJ1bWVudF9zdGF0dXNfaWQgPSBzdGF0UmVzcG9uc2UuaW5zdHJ1bWVudF9zdGF0dXNfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFByb3BTZW5zb3IuaW5zdHJ1bWVudF9zdGF0dXMgPSBbcHJvcFN0YXRUb0FkZF07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5Qcm9wb3NlZFNlbnNvcnM0U2l0ZS5wdXNoKGNyZWF0ZWRQcm9wU2Vuc29yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NsZWFuIHVwIC4uLmFsbCB1bmNoZWNrZWQgYW5kIHRoZW4gaGlkZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGRlcCA9IDA7IGRlcCA8ICRzY29wZS5kZXBsb3lUeXBlTGlzdC5sZW5ndGg7IGRlcCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBsb3lUeXBlTGlzdFtkZXBdLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW55dGhpbmcgeW91IHdhbnQgY2FuIGdvIGhlcmUgYW5kIHdpbGwgc2FmZWx5IGJlIHJ1biBvbiB0aGUgbmV4dCBkaWdlc3QuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93UHJvcG9zZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJQcm9wb3NlZCBzZW5zb3IgY3JlYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIGNyZWF0aW5nIHByb3Bvc2VkIGluc3RydW1lbnQ6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIElOU1RSVU1FTlRfU1RBVFVTLnNhdmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIGNyZWF0aW5nIHByb3Bvc2VkIGluc3RydW1lbnQ6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7IC8vZW5kIElOU1RSVU1FTlQuc2F2ZVxyXG4gICAgICAgICAgICAgICAgICAgIH0vL2VuZCBpZiBzZWxlY3RlZCA9PSB0cnVlXHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgZm9yZWFjaCBkZXBsb3lUeXBlTGlzdFxyXG4gICAgICAgICAgICB9Oy8vZW5kIEFkZFByb3Bvc2VkKClcclxuXHJcbiAgICAgICAgfV0pOy8vZW5kIGNvbnRyb2xsZXIgZnVuY3Rpb25cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBiZHJhcGVyIG9uIDMvOS8yMDE2LlxyXG4gKi9cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHZhciBTVE5Db250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTVE5Db250cm9sbGVycycpO1xyXG5cclxuICAgIFNUTkNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ01hcFBlYWtzQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGh0dHAnLCAnJGNvb2tpZXMnLCAnJGxvY2F0aW9uJywgJ2xlYWZsZXRNYXJrZXJFdmVudHMnLCAnbGVhZmxldEJvdW5kc0hlbHBlcnMnLCAnJHN0YXRlJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkaHR0cCwgJGNvb2tpZXMsICRsb2NhdGlvbiwgbGVhZmxldE1hcmtlckV2ZW50cywgbGVhZmxldEJvdW5kc0hlbHBlcnMsICRzdGF0ZSkge1xyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRvbignbWFwU2l0ZUNsaWNrUmVzdWx0cycsIGZ1bmN0aW9uIChldmVudCwgc2l0ZVBhcnRzKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZVBlYWtzID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgYWxsU2l0ZVBlYWtzID0gc2l0ZVBhcnRzWzFdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBhbGxTaXRlUGVha3MubGVuZ3RoOyBwKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWxsU2l0ZVBlYWtzW3BdLmV2ZW50X25hbWUgPT0gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlUGVha3MucHVzaChhbGxTaXRlUGVha3NbcF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dQZWFrcyA9IHRydWU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dQZWFrcyA9IGZhbHNlO1xyXG4gICAgICAgIH1dKTsvL2VuZCBjb250cm9sbGVyIGZ1bmN0aW9uXHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYmRyYXBlciBvbiA0LzcvMjAxNi5cclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICB2YXIgU1ROQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQ29udHJvbGxlcnMnKTtcclxuXHJcbiAgICBTVE5Db250cm9sbGVycy5jb250cm9sbGVyKCdNYXBGaWx0ZXJzQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRodHRwJywgJyRyb290U2NvcGUnLCAnJGNvb2tpZXMnLCAnJGxvY2F0aW9uJywgJ1NJVEUnLCAnRVZFTlQnLCAnTWFwX0ZpbHRlcicsICckc3RhdGUnLCAgJ3N0YXRlTGlzdCcsICdzZW5zb3JUeXBlcycsICduZXR3b3JrTmFtZXMnLCAnc3Bpbm5lclNlcnZpY2UnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCAkcm9vdFNjb3BlLCAkY29va2llcywgJGxvY2F0aW9uLCBTSVRFLCBFVkVOVCwgTWFwX0ZpbHRlciwgJHN0YXRlLCBzdGF0ZUxpc3QsIHNlbnNvclR5cGVzLCBuZXR3b3JrTmFtZXMsIHNwaW5uZXJTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSB7IHNpdGVPcGVuOiB0cnVlIH07IC8vYWNjb3JkaW9uIGZvciBzaXRlSW5mb1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLnN0YXRlcyA9IHN0YXRlTGlzdDtcclxuICAgICAgICAgICAgJHNjb3BlLnNlblR5cGVzID0gc2Vuc29yVHlwZXM7XHJcbiAgICAgICAgICAgICRzY29wZS5uZXROYW1lcyA9IG5ldHdvcmtOYW1lcztcclxuICAgICAgICAgICAgJHNjb3BlLnN1cnZleU9wdGlvbnMgPSBbeyBpZDogdHJ1ZSwgdmFsdWU6IFwiU3VydmV5ZWQgSFdNc1wiIH0sIHsgaWQ6IGZhbHNlLCB2YWx1ZTogXCJVbnN1cnZleWVkIEhXTXNcIiB9XTtcclxuICAgICAgICAgICAgJHNjb3BlLkNob3NlbiA9IHtcclxuICAgICAgICAgICAgICAgIG5ldHdvcms6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzZW5zb3I6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzdXJ2ZXk6bnVsbFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgJHNjb3BlLmNob3NlblN0YXRlcyA9IFtdOyAvL3VzZWQgdG8gam9pbiBlYWNoIGFiYnJldiB0byBwYXNzIHRvIGNhbGxcclxuICAgICAgICAgICAgJHNjb3BlLnNpdGVSZXNwb25zZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkc2NvcGUuY2hlY2tib3hNb2RlbCA9IHtcclxuICAgICAgICAgICAgICAgIGV2ZW50U2l0ZXNPbmx5OiAnMScsXHJcbiAgICAgICAgICAgICAgICBod21Pbmx5OiAnMCcsXHJcbiAgICAgICAgICAgICAgICBzZW5Pbmx5OiAnMCcsXHJcbiAgICAgICAgICAgICAgICByZGdPbmx5OiAnMCcsXHJcbiAgICAgICAgICAgICAgICBvcERlZmluZWQ6ICcwJ1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFNpdGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy8kcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gdHJ1ZTsgLy8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAvL3N0b3JlIHNlYXJjaCBpbiBjYXNlIHRoZXkgbGVhdmUgYW5kIGNsaWNrIGJhY2tcclxuICAgICAgICAgICAgICAgIHNwaW5uZXJTZXJ2aWNlLnNob3coXCJtYXBTcGlubmVyXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jaGVja2JveE1vZGVsLmV2ZW50U2l0ZXNPbmx5ID09PSBcIjFcIiAmJiAkc2NvcGUuc2Vzc2lvbkV2ZW50RXhpc3RzID09PSB0cnVlICkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZVN0cmluZyA9ICRzY29wZS5jaG9zZW5TdGF0ZXMuam9pbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlUmVzcG9uc2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZUxpc3QgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXZJRCA9ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSAhPT0gbnVsbCAmJiAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudElEJykgIT09IHVuZGVmaW5lZCA/ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zZWFyY2hQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50OiBldklELFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogJHNjb3BlLmNob3NlblN0YXRlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2Vuc29yVHlwZTogJHNjb3BlLkNob3Nlbi5zZW5zb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE5ldHdvcmtOYW1lOiAkc2NvcGUuQ2hvc2VuLm5ldHdvcmssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEhXTU9ubHk6ICRzY29wZS5jaGVja2JveE1vZGVsLmh3bU9ubHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEhXTVN1cnZleWVkOiAkc2NvcGUuQ2hvc2VuLnN1cnZleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2Vuc29yT25seTogJHNjb3BlLmNoZWNrYm94TW9kZWwuc2VuT25seSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgUkRHT25seTogJHNjb3BlLmNoZWNrYm94TW9kZWwucmRnT25seSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgT1BEZWZpbmVkOiAkc2NvcGUuY2hlY2tib3hNb2RlbC5vcERlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIFNJVEUuZ2V0RmlsdGVyZWRTaXRlcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFdmVudDogZXZJRCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRlOiBzdGF0ZVN0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlbnNvclR5cGU6ICRzY29wZS5DaG9zZW4uc2Vuc29yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTmV0d29ya05hbWU6ICRzY29wZS5DaG9zZW4ubmV0d29yayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhXTU9ubHk6ICRzY29wZS5jaGVja2JveE1vZGVsLmh3bU9ubHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBIV01TdXJ2ZXllZDogJHNjb3BlLkNob3Nlbi5zdXJ2ZXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZW5zb3JPbmx5OiAkc2NvcGUuY2hlY2tib3hNb2RlbC5zZW5Pbmx5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUkRHT25seTogJHNjb3BlLmNoZWNrYm94TW9kZWwucmRnT25seSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9QRGVmaW5lZDogJHNjb3BlLmNoZWNrYm94TW9kZWwub3BEZWZpbmVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICRzY29wZS5zaXRlTGlzdCA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gJHNjb3BlLnNpdGVSZXNwb25zZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGlubmVyU2VydmljZS5oaWRlKFwibWFwU3Bpbm5lclwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hcF9GaWx0ZXIuc2V0RmlsdGVyZWRTaXRlcyhyZXNwb25zZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmNoZWNrYm94TW9kZWwuZXZlbnRTaXRlc09ubHkgPT09IFwiMFwiIHx8ICRzY29wZS5zZXNzaW9uRXZlbnRFeGlzdHMgPT09IGZhbHNlKXtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZVN0cmluZyA9ICRzY29wZS5jaG9zZW5TdGF0ZXMuam9pbigpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlUmVzcG9uc2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZUxpc3QgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zZWFyY2hQYXJhbXMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiAkc2NvcGUuY2hvc2VuU3RhdGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZW5zb3JUeXBlOiAkc2NvcGUuQ2hvc2VuLnNlbnNvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgTmV0d29ya05hbWU6ICRzY29wZS5DaG9zZW4ubmV0d29yayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgSFdNT25seTogJHNjb3BlLmNoZWNrYm94TW9kZWwuaHdtT25seSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgSFdNU3VydmV5ZWQ6ICRzY29wZS5DaG9zZW4uc3VydmV5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZW5zb3JPbmx5OiAkc2NvcGUuY2hlY2tib3hNb2RlbC5zZW5Pbmx5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSREdPbmx5OiAkc2NvcGUuY2hlY2tib3hNb2RlbC5yZGdPbmx5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBPUERlZmluZWQ6ICRzY29wZS5jaGVja2JveE1vZGVsLm9wRGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzcCA9ICRyb290U2NvcGUuc2VhcmNoUGFyYW1zO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzcC5IV01Pbmx5ID09PSBcIjBcIiAmJiBzcC5IV01TdXJ2ZXllZCA9PT0gbnVsbCAmJiBzcC5OZXR3b3JrTmFtZSA9PT0gbnVsbCAmJiBzcC5PUERlZmluZWQgPT09IFwiMFwiICYmIHNwLlJER09ubHkgPT09IFwiMFwiICYmIHNwLlNlbnNvck9ubHkgPT09IFwiMFwiICYmIHNwLlNlbnNvclR5cGUgPT09IG51bGwgJiYgc3Auc3RhdGUubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwaW5uZXJTZXJ2aWNlLmhpZGUoXCJtYXBTcGlubmVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIub3B0aW9ucy5wb3NpdGlvbkNsYXNzID0gXCJ0b2FzdC1ib3R0b20tcmlnaHRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLndhcm5pbmcoXCJQbGVhc2Ugc2VsZWN0IGF0IGxlYXN0IG9uZSBzZWFyY2ggcGFyYW1ldGVyLlwiLCBcIk1hcCBGaWx0ZXJzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBTSVRFLmdldEZpbHRlcmVkU2l0ZXMoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdGU6IHN0YXRlU3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU2Vuc29yVHlwZTogJHNjb3BlLkNob3Nlbi5zZW5zb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZXR3b3JrTmFtZTogJHNjb3BlLkNob3Nlbi5uZXR3b3JrLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSFdNT25seTogJHNjb3BlLmNoZWNrYm94TW9kZWwuaHdtT25seSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhXTVN1cnZleWVkOiAkc2NvcGUuQ2hvc2VuLnN1cnZleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlbnNvck9ubHk6ICRzY29wZS5jaGVja2JveE1vZGVsLnNlbk9ubHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSREdPbmx5OiAkc2NvcGUuY2hlY2tib3hNb2RlbC5yZGdPbmx5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT1BEZWZpbmVkOiAkc2NvcGUuY2hlY2tib3hNb2RlbC5vcERlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gJHNjb3BlLnNpdGVMaXN0ID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAkc2NvcGUuc2l0ZVJlc3BvbnNlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwaW5uZXJTZXJ2aWNlLmhpZGUoXCJtYXBTcGlubmVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8kcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWFwX0ZpbHRlci5zZXRGaWx0ZXJlZFNpdGVzKHJlc3BvbnNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsgLy8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07Ly9lbmQgc2VhcmNoU2l0ZXMgY2xpY2sgYWN0aW9uXHJcblxyXG4gICAgICAgICAgICAvL2FkZCBlYWNoIHN0YXRlIHRvIGFuIGFycmF5IHRvIGJlIGpvaW5lZCBpbiB0aGUgR0VUXHJcbiAgICAgICAgICAgICRzY29wZS5zdGF0ZUNsaWNrID0gZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLnNlbGVjdGVkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNob3NlblN0YXRlcy5wdXNoKGRhdGEuc3RhdGVfYWJicmV2KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLnNlbGVjdGVkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmQgPSAkc2NvcGUuY2hvc2VuU3RhdGVzLmluZGV4T2YoZGF0YS5zdGF0ZV9hYmJyZXYpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpbmQgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2hvc2VuU3RhdGVzLnNwbGljZShpbmQsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vY2xlYXIgdGhlIGZpbHRlciBjaG9pY2VzIChzdGFydCBvdmVyKVxyXG4gICAgICAgICAgICAkc2NvcGUuY2xlYXJGaWx0ZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc3Bpbm5lclNlcnZpY2Uuc2hvdyhcIm1hcFNwaW5uZXJcIik7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY2hlY2tib3hNb2RlbCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBldmVudFNpdGVzT25seTogMSxcclxuICAgICAgICAgICAgICAgICAgICBod21Pbmx5OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHNlbk9ubHk6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgcmRnT25seTogMCxcclxuICAgICAgICAgICAgICAgICAgICBvcERlZmluZWQ6IDBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQ2hvc2VuID0ge307IFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNob3NlblN0YXRlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5zdGF0ZXMsIGZ1bmN0aW9uIChzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0LnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHZhciBldklEID0gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnRJRCcpICE9PSBudWxsICYmICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSAhPT0gdW5kZWZpbmVkID8gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnRJRCcpIDogMDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaXRlc1Byb21pc2UgPSBFVkVOVC5nZXRFdmVudFNpdGVzKHtpZDogZXZJRH0sLy9TSVRFLmdldEFsbCh7IEV2ZW50OiBldklEIH0sXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9zcGlubmVyU2VydmljZS5oaWRlKFwibWFwU3Bpbm5lclwiKTtcclxuICAgICAgICAgICAgICAgICAgICBNYXBfRmlsdGVyLnNldEZpbHRlcmVkU2l0ZXMocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIHNwaW5uZXJTZXJ2aWNlLmhpZGUoXCJtYXBTcGlubmVyXCIpO1xyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG5cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8gJHJvb3RTY29wZS4kb24oJ21hcFNpdGVDbGljaycsIGZ1bmN0aW9uIChldmVudCwgc2l0ZVBhcnRzKSB7XHJcbiAgICAgICAgICAgIC8vICAgICAkc2NvcGUuYVNpdGUgPSBzaXRlUGFydHNbMF07XHJcbiAgICAgICAgICAgIC8vICAgICAvL29ubHkgNiBkZWNpbWFsIHBsYWNlcyBmb3IgbGF0L2xvbmdcclxuICAgICAgICAgICAgLy8gICAgICRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCA9IHBhcnNlRmxvYXQoJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkLnRvRml4ZWQoNikpO1xyXG4gICAgICAgICAgICAvLyAgICAgJHNjb3BlLmFTaXRlLmxvbmdpdHVkZV9kZCA9IHBhcnNlRmxvYXQoJHNjb3BlLmFTaXRlLmxvbmdpdHVkZV9kZC50b0ZpeGVkKDYpKTtcclxuICAgICAgICAgICAgLy8gfSk7XHJcblxyXG4gICAgICAgIH1dKTsvL2VuZCBjb250cm9sbGVyIGZ1bmN0aW9uXHJcbn0pKCk7XHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICB2YXIgU1ROQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQ29udHJvbGxlcnMnKTtcclxuXHJcbiAgICBTVE5Db250cm9sbGVycy5jb250cm9sbGVyKCdNYXBDb250cm9sbGVyJywgWyckc2NvcGUnLCAnJGh0dHAnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckbG9jYXRpb24nLCAnU0lURScsICdFVkVOVCcsICdNYXBfU2l0ZScsICdsZWFmbGV0TWFya2VyRXZlbnRzJywgJ2xlYWZsZXRCb3VuZHNIZWxwZXJzJywgJ2xlYWZsZXREYXRhJywgJyRzdGF0ZScsICdzcGlubmVyU2VydmljZScsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGh0dHAsICRyb290U2NvcGUsICRjb29raWVzLCAkbG9jYXRpb24sIFNJVEUsIEVWRU5ULCBNYXBfU2l0ZSxsZWFmbGV0TWFya2VyRXZlbnRzLCBsZWFmbGV0Qm91bmRzSGVscGVycywgbGVhZmxldERhdGEsICRzdGF0ZSwgc3Bpbm5lclNlcnZpY2UpIHtcclxuICAgICAgICAgICAgaWYgKCRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gdW5kZWZpbmVkIHx8ICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmF1dGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbG9naW4nKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUudGhpc1BhZ2UgPSBcIk1hcFwiO1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5hY3RpdmVNZW51ID0gXCJtYXBcIjtcclxuICAgICAgICAgICAgICAgICRzY29wZS5tZXNzYWdlID0gXCJNYW55IG9mIHRoZSBzdXBwbGVtZW50YWwgR0lTIGRhdGEgbGF5ZXJzIGZvdW5kIGluIHRoZSBtYXAgYXJlIGZyb20gYSByYW5nZSBvZiBzb3VyY2VzIGFuZCBhcmUgbm90IG1haW50YWluZWQgYnkgV2lNLiBXZSBvZmZlciB0aGVzZSBtYXAgbGF5ZXJzIGFzIGEgXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwiZGVjaXNpb24gc3VwcG9ydCBzdXBwbGVtZW50IHRvIHRoZSBTVE4gc2l0ZXMgbGF5ZXIsIGJ1dCB3ZSBjYW5ub3QgZ3VhcmFudGVlIHRoZWlyIHBlcmZvcm1hbmNlIGFuZCBhdmFpbGFiaWxpdHkuIE1hbnkgb2YgdGhlc2UgZXh0ZXJuYWxseSBtYWludGFpbmVkIGxheWVycyBhcmUgXCIgK1xyXG4gICAgICAgICAgICAgICAgICAgIFwibGFyZ2UgZGF0YXNldHMgYW5kIG1heSBsb2FkIHNsb3dseSBkZXBlbmRpbmcgb24gbmV0d29yayBsYXRlbmN5LiBJbiBzb21lIGNhc2VzIHRoZXkgbWF5IGZhaWwgdG8gbG9hZCBlbnRpcmVseSB3aGVuIG5ldHdvcmsgbGF0ZW5jeSBpcyBoaWdoLlwiO1xyXG5cclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCdmaWx0ZXJTaXRlc0NsaWNrJywgZnVuY3Rpb24gKGV2ZW50LCBmaWx0ZXJlZFNpdGVzQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsdGVyZWRTaXRlc0FycmF5Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhdGhzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZE1hcmtlck51bSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNob3dFdmVudFNpdGVzKGZpbHRlcmVkU2l0ZXNBcnJheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90b2FzdHIub3B0aW9ucyh7XCJwb3NpdGlvbkNsYXNzXCI6IFwidG9hc3QtYm90dG9tLXJpZ2h0XCJ9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLm9wdGlvbnMucG9zaXRpb25DbGFzcyA9IFwidG9hc3QtYm90dG9tLXJpZ2h0XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci53YXJuaW5nKFwiWW91ciBmaWx0ZXIgcmV0dXJuZWQgbm8gcmVzdWx0cy5cIiwgXCJNYXAgRmlsdGVyc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgaWNvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RuOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogWzEwLCAxMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3N0blNpdGVJY29uJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgc3RuR3JheToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGl2JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvblNpemU6IFsxMCwgMTBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdzdG5TaXRlR3JheSdcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIG5ld1NpdGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25TaXplOiBbMTAsIDEwXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbmV3U2l0ZUljb24nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uQW5jaG9yOiAgWzUsIDVdXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGl2JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvblNpemU6IFsxMiwgMTJdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdzZWxlY3RlZEljb24nXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBud2lzOiBMLmRpdkljb24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogWzEwLCAxMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ2Fycm93LXVwJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpY29uQW5jaG9yOiBbMTMuNSwgMTcuNV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBvcHVwQW5jaG9yOiBbMCwgLTExXVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogTC5pY29uKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvblVybDogJ2ltYWdlcy9hY3Rpb24ucG5nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXBBbmNob3I6IFsxMCwgMTBdXHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgbG93X3RocmVzaG9sZDogTC5pY29uKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvblVybDogJ2ltYWdlcy9sb3dfdGhyZXNob2xkLnBuZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwQW5jaG9yOiBbMTAsIDEwXVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ham9yOiBMLmljb24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uVXJsOiAnaW1hZ2VzL21ham9yLnBuZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwQW5jaG9yOiBbMTAsIDEwXVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG1pbm9yOiBMLmljb24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uVXJsOiAnaW1hZ2VzL21pbm9yLnBuZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwQW5jaG9yOiBbMTAsIDEwXVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGVyYXRlOiBMLmljb24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uVXJsOiAnaW1hZ2VzL21vZGVyYXRlLnBuZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwQW5jaG9yOiBbMTAsIDEwXVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG5vX2Zsb29kaW5nOiBMLmljb24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uVXJsOiAnaW1hZ2VzL25vX2Zsb29kaW5nLnBuZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwQW5jaG9yOiBbMTAsIDEwXVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG5vdF9kZWZpbmVkOiBMLmljb24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uVXJsOiAnaW1hZ2VzL25vdF9kZWZpbmVkLnBuZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwQW5jaG9yOiBbMTAsIDEwXVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG9ic19ub3RfY3VycmVudDogTC5pY29uKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvblVybDogJ2ltYWdlcy9vYnNfbm90X2N1cnJlbnQucG5nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXBBbmNob3I6IFsxMCwgMTBdXHJcbiAgICAgICAgICAgICAgICAgICAgfSksXHJcbiAgICAgICAgICAgICAgICAgICAgb3V0X29mX3NlcnZpY2U6IEwuaWNvbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25Vcmw6ICdpbWFnZXMvb3V0X29mX3NlcnZpY2UucG5nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9wdXBBbmNob3I6IFsxMCwgMTBdXHJcbiAgICAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvL2NyZWF0ZXMgdGhlIG1hcmtlcnMgb24gdGhlIG1hcCBhZnRlciBnZXR0aW5nIEpTT04gZnJvbSBTVE4gd2ViIHNlcnZpY2VzIGNhbGxcclxuICAgICAgICAgICAgICAgIHZhciBzaG93RXZlbnRTaXRlcyA9IGZ1bmN0aW9uKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNpdGVzQXJyYXkgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZXMgPSBzaXRlc0FycmF5O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXJrZXJzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnNMYXRMbmdBcnJheSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLy8vL2NvbnRyb2xzIG1ldGhvZC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgICAgICAgICBsZWFmbGV0RGF0YS5nZXREaXJlY3RpdmVDb250cm9scygpLnRoZW4oZnVuY3Rpb24gKGNvbnRyb2xzKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9scy5tYXJrZXJzLmNyZWF0ZSh7fSwgJHNjb3BlLm1hcmtlcnMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmtlcnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzaXRlc0FycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IHNpdGVzQXJyYXlbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyOidzdG5TaXRlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiBhLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogYS5sb25naXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogYS5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcIlNUTiBTaXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWNvbjogaWNvbnMuc3RuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbmVlZCB0aGlzICdtYXJrZXJzTGF0TG5nQXJyYXknIGZvciB0aGUgem9vbSB0byBib3VuZHMgLSByZXF1aXJlcyBzaW1wbGUgbGF0L2xuZyBhcnJheSB0byB3b3JrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFya2Vyc0xhdExuZ0FycmF5LnB1c2goW2EubGF0aXR1ZGVfZGQsIGEubG9uZ2l0dWRlX2RkXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzLm1hcmtlcnMuY3JlYXRlKG1hcmtlcnMgLCRzY29wZS5tYXJrZXJzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMgPSBtYXJrZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIC8vIGNvbnNvbGUudGFibGUoJHNjb3BlLm1hcmtlcnMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgTExCb3VuZHMgPSAgbmV3IEwuTGF0TG5nQm91bmRzKCRzY29wZS5tYXJrZXJzTGF0TG5nQXJyYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5ib3VuZHMgPSBsZWFmbGV0Qm91bmRzSGVscGVycy5jcmVhdGVCb3VuZHNGcm9tQXJyYXkoW1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBbTExCb3VuZHMuX25vcnRoRWFzdC5sYXQsIExMQm91bmRzLl9ub3J0aEVhc3QubG5nXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgW0xMQm91bmRzLl9zb3V0aFdlc3QubGF0LCBMTEJvdW5kcy5fc291dGhXZXN0LmxuZ11cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9dKTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vLy8vZW5kIGNvbnRyb2xzIG1ldGhvZC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vL3JhbmRvIGtleXMgbWV0aG9kLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZm9yICh2YXIgaSA9IDA7IGkgPCBzaXRlc0FycmF5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHZhciBhID0gc2l0ZXNBcnJheVtpXTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdmFyIG1hcmtlcklEID0gJHNjb3BlLm1ha2VJRCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAvLyAkc2NvcGUubWFya2Vycy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLy8gICAgIGxheWVyOidzdG5TaXRlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC8vICAgICBsYXQ6IGEubGF0aXR1ZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC8vICAgICBsbmc6IGEubG9uZ2l0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAvLyAgICAgc2l0ZV9pZDogYS5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAvLyAgICAgdGl0bGU6IFwiU1ROIFNpdGVcIixcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLy8gICAgIGljb246IGljb25zLnN0blxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAvLyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgJHNjb3BlLm1hcmtlcnNbbWFya2VySURdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgbGF5ZXI6J3N0blNpdGVzJyxcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIGxhdDogYS5sYXRpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIGxuZzogYS5sb25naXR1ZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBzaXRlX2lkOiBhLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICB0aXRsZTogXCJTVE4gU2l0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgaWNvbjogaWNvbnMuc3RuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICRzY29wZS5tYXJrZXJzTGF0TG5nQXJyYXkucHVzaChbYS5sYXRpdHVkZSwgYS5sb25naXR1ZGVdKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8vLy8vLy8vLy8vL2VuZCByYW5kbyBrZXlzIG1ldGhvZC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnBhdGhzT2JqID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNpcmNsZU1hcmtlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImNpcmNsZU1hcmtlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByYWRpdXM6MjAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodDozLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb2xvcjogJyMwMDAwOTknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXRsbmdzOiB7fVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvL3N0b3JlcyB0aGUgbGFzdCBzZWxlY3RlZCBtYXJrZXIgaW5kZXgsIHNvIGl0cyBpY29uIGFuZCBsYWJlbCBjYW4gYmUgcmVzZXQgYXMgdGhlIGZpcnN0IHRoaW5nIHRvIGhhcHBlbiBhZnRlciBjbGlja1xyXG4gICAgICAgICAgICAgICAgLy92YXIgc2VsZWN0ZWRNYXJrZXJOdW0gPSAwO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbGVjdGVkTWFya2VyTnVtID0gMDtcclxuICAgICAgICAgICAgICAgIC8vLy90aGlzIHNob3dzIGhvdyB0byBncmFiIHRoZSBTaXRlIElEIGluIGFyZ3MubW9kZWwuc2l0ZV9pZFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRvbignbGVhZmxldERpcmVjdGl2ZU1hcmtlci5jbGljaycsIGZ1bmN0aW9uIChldmVudCwgYXJncykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChhcmdzLm1vZGVsLnNpdGVfaWQgIT0gJ25ld1NpdGUnKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGlubmVyU2VydmljZS5zaG93KFwic2l0ZUluZm9TcGlubmVyXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnNbJHNjb3BlLnNlbGVjdGVkTWFya2VyTnVtXS5pY29uID0gaWNvbnMuc3RuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgJHNjb3BlLm1hcmtlcnNbJHNjb3BlLnNlbGVjdGVkTWFya2VyTnVtXS5sYWJlbDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaXRlSUQgPSBhcmdzLm1vZGVsLnNpdGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IHRydWU7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hcF9TaXRlLnNldE1hcFNpdGVQYXJ0cyhzaXRlSUQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2dldHMgYXJyYXkgbnVtYmVyIG9mIG1hcmtlciBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZE1hcmtlck51bSA9IHBhcnNlSW50KGFyZ3MubW9kZWxOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zZXRzIHRoZSBpY29uIHRvIHRoZSBzZWxlY3RlZCBpY29uIGNsYXNzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXJrZXJzWyRzY29wZS5zZWxlY3RlZE1hcmtlck51bV0uaWNvbiA9IGljb25zLnNlbGVjdGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFya2Vyc1skc2NvcGUuc2VsZWN0ZWRNYXJrZXJOdW1dLmxhYmVsID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ1NpdGUgJyArIHNpdGVJRCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBub0hpZGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Zmc2V0OiBbMjUsIC0xNV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnc2l0ZUxhYmVsJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLm1hcENlbnRlci56b29tIDw9IDkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXBDZW50ZXIgPSB7bGF0OiBhcmdzLm1vZGVsLmxhdCwgbG5nOiBhcmdzLm1vZGVsLmxuZywgem9vbTogMTB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCRzY29wZS5tYXBDZW50ZXIuem9vbSA+PSAxMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcENlbnRlciA9IHtsYXQ6IGFyZ3MubW9kZWwubGF0LCBsbmc6IGFyZ3MubW9kZWwubG5nLCB6b29tIDogJHNjb3BlLm1hcENlbnRlci56b29tfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWRkU2hhcGUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYXRocyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhdGhzT2JqLmNpcmNsZU1hcmtlci5sYXRsbmdzID0ge2xhdDogYXJncy5tb2RlbC5sYXQsIGxuZzogYXJncy5tb2RlbC5sbmd9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhdGhzWydjaXJjbGVNYXJrZXInXSA9ICRzY29wZS5wYXRoc09ialsnY2lyY2xlTWFya2VyJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFkZFNoYXBlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvLy90aGlzIG5lZWRzIHRvIGJlIGluc3RhbnRpYXRlZCBiZWZvcmUgaXQgY2FuIGJlIGZpbGxlZCBwcm9ncmFtbWF0aWNhbGx5IGJlbG93LiBtYXkgbmVlZCB0byBtb3ZlIHNjb3BlLmV4dGVuZCBibG9jayB0byB0b3BcclxuICAgICAgICAgICAgICAgIC8vICRzY29wZS5jb250cm9scyA9IHtcclxuICAgICAgICAgICAgICAgIC8vICAgICBjdXN0b206IFtdXHJcbiAgICAgICAgICAgICAgICAvLyB9O1xyXG4gICAgICAgICAgICAgICAgLy9jb21tZW50ZWQgYmxvY2sgYmVsb3cgaXMgZm9yIG1ha2luZyBjdXN0b20gbGVhZmxldCBjb250cm9sIGZvciBjcmVhdGUgc2l0ZSBtb2RlIGluZGljYXRvclxyXG4gICAgICAgICAgICAgICAgLy92YXIgY3JlYXRlU2l0ZU1vZGVDb250cm9sID0gTC5jb250cm9sKCk7XHJcbiAgICAgICAgICAgICAgICAvL2NyZWF0ZVNpdGVNb2RlQ29udHJvbC5zZXRQb3NpdGlvbignYm90dG9tbGVmdCcpO1xyXG4gICAgICAgICAgICAgICAgLy9jcmVhdGVTaXRlTW9kZUNvbnRyb2wub25BZGQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICB2YXIgY2xhc3NOYW1lID0gJ2NyZWF0ZVNpdGVNb2RlSW5kaWNhdG9yJyxcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICBjb250YWluZXIgPSBMLkRvbVV0aWwuY3JlYXRlKCdkaXYnLCBjbGFzc05hbWUgKyAnIGxlYWZsZXQtYmFyJyk7XHJcbiAgICAgICAgICAgICAgICAvLyAgICByZXR1cm4gY29udGFpbmVyO1xyXG4gICAgICAgICAgICAgICAgLy99XHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgLy8kc2NvcGUuY29udHJvbHMuY3VzdG9tLnB1c2goY3JlYXRlU2l0ZU1vZGVDb250cm9sKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLy9uZWVkIHRvIHdhdGNoIGZvciBzZXNzaW9uIGV2ZW50IGlkLCBkbyBuZXcgY2FsbCB0byBzZXJ2ZXIgd2hlbiB0aGF0IGNoYW5nZXNcclxuICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnRJRCcpOyB9LCBmdW5jdGlvbiAobmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vzc2lvbkV2ZW50ID0gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJykgIT09IG51bGwgJiYgJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJykgIT09IHVuZGVmaW5lZCA/ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50TmFtZScpIDogXCJBbGwgRXZlbnRzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBldklEID0gbmV3VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYmVsb3cgZ2V0cyBzaXRlcyB1c2luZyAkaHR0cC5nZXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Bpbm5lclNlcnZpY2Uuc2hvdyhcIm1hcFNwaW5uZXJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZE1hcmtlck51bSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYXRocyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2JlbG93IGdldHMgc2l0ZXMgdXNpbmcgc2ltcGxlIGFuZ3VsYXIgJGh0dHAgc2VydmljZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAkc2NvcGUuc2l0ZXNQcm9taXNlID0gJGh0dHAuZ2V0KCdodHRwczovL3N0bi53aW0udXNncy5nb3YvU1ROU2VydmljZXMvRXZlbnRzLycgKyBldklEICsgJy9TaXRlcy5qc29uJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAudGhlbihzaG93RXZlbnRTaXRlcywgb25FcnJvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYmVsb3cgZ2V0cyBzaXRlcyB1c2luZyB0aGUgU0lURSAnZmFjdG9yeSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVzUHJvbWlzZSA9IEVWRU5ULmdldEV2ZW50U2l0ZXMoe2lkOiBldklEfSwvLyBTSVRFLmdldEFsbCh7ICBFdmVudDogZXZJRH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwaW5uZXJTZXJ2aWNlLmhpZGUoXCJtYXBTcGlubmVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2hvd0V2ZW50U2l0ZXMocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gXCJDb3VsZCBub3QgZmV0Y2ggc2l0ZXNcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIub3B0aW9ucy5wb3NpdGlvbkNsYXNzID0gXCJ0b2FzdC1ib3R0b20tcmlnaHRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLm9wdGlvbnMudGltZU91dCA9IFwiODAwMFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIub3B0aW9ucy5jbG9zZUJ1dHRvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci53YXJuaW5nKFwiTm8gc2l0ZXMgYXJlIHNob3dpbmcgYmVjYXVzZSB5b3UgaGF2ZSBubyBmaWx0ZXJzIGFwcGxpZWQuIFBsZWFzZSBzZWxlY3QgYXQgbGVhc3Qgb25lIHNlYXJjaCBwYXJhbWV0ZXIuXCIsIFwiTWFwIEZpbHRlcnNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjsgICAgICAgICAgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy93YXRjaCBmb3IgdGhlIHNlc3Npb24gZXZlbnQgdG8gY2hhbmdlIGFuZCB1cGRhdGVcclxuICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJyk7IH0sIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXNzaW9uRXZlbnROYW1lID0gbmV3VmFsdWUgIT09IHVuZGVmaW5lZCA/IG5ld1ZhbHVlIDogXCJBbGwgRXZlbnRzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlc3Npb25FdmVudEV4aXN0cyA9ICRzY29wZS5zZXNzaW9uRXZlbnROYW1lICE9IFwiQWxsIEV2ZW50c1wiID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIG9uRXJyb3IgPSBmdW5jdGlvbihyZWFzb24pe1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IFwiQ291bGQgbm90IGZldGNoIHNpdGVzXCI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRvbihcImxlYWZsZXREaXJlY3RpdmVNYXAuY2xpY2tcIiwgZnVuY3Rpb24oZXZlbnQsIGFyZ3Mpe1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY3JlYXRlU2l0ZU1vZGVBY3RpdmUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9maXJzdCwgcmVtb3ZlIHByZXZpb3VzbHkgY2xpY2stY3JlYXRlZCBzaXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZVVzZXJDcmVhdGVkU2l0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVhZkV2ZW50ID0gYXJncy5sZWFmbGV0RXZlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51c2VyQ3JlYXRlZFNpdGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZTogbGVhZkV2ZW50LmxhdGxuZy5sYXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IGxlYWZFdmVudC5sYXRsbmcubG5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcmV0dXJucyB0aGUgY3JlYXRlZCBzaXRlIG9iamVjdCwgYnV0IG5vdCB0aGF0IHVzZWZ1bFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3ZhciBjcmVhdGVkU2l0ZSA9ICRzY29wZS5tYXJrZXJzLmZpbHRlcihmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICByZXR1cm4gb2JqLnNpdGVfaWQgPT09ICduZXdTaXRlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy99KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogJ25ld1NpdGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiAkc2NvcGUudXNlckNyZWF0ZWRTaXRlLmxhdGl0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG5nOiAkc2NvcGUudXNlckNyZWF0ZWRTaXRlLmxvbmdpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6ICduZXdTaXRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IGljb25zLm5ld1NpdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIk5ldyBkcmFnZ2FibGUgU1ROIHNpdGVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ05ldyBTaXRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vSGlkZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbmV3U2l0ZUxhYmVsJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vdXNlIG5ldyBjbGlja2VkIHNpdGUgbGF0L2xuZyBhbmQgY3JlYXRlIG5ldyBzaXRlIGZyb20gdGhhdFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlVXNlckNyZWF0ZWRTaXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcmV0dXJucyBjcmVhdGVkIHNpdGUgaW5kZXggc28gaXQgY2FuIGJlIHJlbW92ZWQgdG8gbWFrZSB3YXkgZm9yIGl0cyByZXBsYWNlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjcmVhdGVkU2l0ZUluZGV4ID0gJHNjb3BlLm1hcmtlcnMubWFwKGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqLnNpdGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuaW5kZXhPZignbmV3U2l0ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vc3BsaWNlIGNyZWF0ZWQgc2l0ZSBmcm9tIHRoZSBtYXJrZXJzIGFycmF5IGlmIGl0IGV4aXN0c1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjcmVhdGVkU2l0ZUluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMuc3BsaWNlKGNyZWF0ZWRTaXRlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXNlckNyZWF0ZWRTaXRlID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLy91cGRhdGUgbmV3U2l0ZSBsYXQvbG5nIGFmdGVyIGRyYWdlbmRcclxuICAgICAgICAgICAgICAgICRzY29wZS4kb24oXCJsZWFmbGV0RGlyZWN0aXZlTWFya2VyLmRyYWdlbmRcIiwgZnVuY3Rpb24oZXZlbnQsIGFyZ3Mpe1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkcmFnZW5kTG9jYXRpb24gPSBhcmdzLm1vZGVsO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS51c2VyQ3JlYXRlZFNpdGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlOiBkcmFnZW5kTG9jYXRpb24ubGF0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IGRyYWdlbmRMb2NhdGlvbi5sbmdcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvLy9saXN0ZW5zICh3YXRjaGVzKSBmb3IgY2hhbmdlIG9mIHRoZSBjcmVhdGVTaXRlTW9kZUFjdGl2ZSBhdHRyaWJ1dGUgLSBjdWVkIGJ5IGNsaWNrIG9mIHRoZSBDcmVhdGUgU2l0ZSBidXR0b25cclxuICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goJ2NyZWF0ZVNpdGVNb2RlQWN0aXZlJywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY3JlYXRlU2l0ZUJ1dHRvblRleHQgPSAkc2NvcGUuY3JlYXRlU2l0ZU1vZGVBY3RpdmUgPyAnQ2FuY2VsIENyZWF0ZSBTaXRlIE1vZGUnIDogJ0NyZWF0ZSBOZXcgU2l0ZSBvbiBNYXAnO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXBTdHlsZSA9ICRzY29wZS5jcmVhdGVTaXRlTW9kZUFjdGl2ZSA/IHtcImN1cnNvclwiOlwiY3Jvc3NoYWlyXCJ9IDoge1wiY3Vyc29yXCI6XCJncmFiXCJ9O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghJHNjb3BlLmNyZWF0ZVNpdGVNb2RlQWN0aXZlKSB7cmVtb3ZlVXNlckNyZWF0ZWRTaXRlKCk7fVxyXG4gICAgICAgICAgICAgICAgICAgIC8vdHdvIGxpbmVzIGJlbG93IHJlZmVyZW5jZWQgY3JlYXRlU2l0ZU1vZGVJbmRpY2F0b3IgbGVhZmxldCBjb250cm9sLiBjYW4gYmUgcmVtb3ZlZCBldmVudHVhbGx5LlxyXG4gICAgICAgICAgICAgICAgICAgIC8vdmFyIGNyZWF0ZVNpdGVNb2RlSW5kaWNhdG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImNyZWF0ZVNpdGVNb2RlSW5kaWNhdG9yXCIpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY3JlYXRlU2l0ZU1vZGVJbmRpY2F0b3Iuc3R5bGUudmlzaWJpbGl0eSA9ICRzY29wZS5jcmVhdGVTaXRlTW9kZUFjdGl2ZSA/ICd2aXNpYmxlJyA6J2hpZGRlbic7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY3JlYXRlU2l0ZUZyb21NYXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICBpZigkc2NvcGUudXNlckNyZWF0ZWRTaXRlLmxhdGl0dWRlICE9PSB1bmRlZmluZWQgJiYgICRzY29wZS51c2VyQ3JlYXRlZFNpdGUubG9uZ2l0dWRlICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdzaXRlLmRhc2hib2FyZCcsIHsgaWQ6IDAsIGxhdGl0dWRlOiAkc2NvcGUudXNlckNyZWF0ZWRTaXRlLmxhdGl0dWRlLCBsb25naXR1ZGU6ICRzY29wZS51c2VyQ3JlYXRlZFNpdGUubG9uZ2l0dWRlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIlBsZWFzZSBjbGljayBhIGxvY2F0aW9uIG9uIHRoZSBtYXAgdG8gY3JlYXRlIGEgc2l0ZSB0aGlzIHdheS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vICRzY29wZS5zaG93QWxsU2l0ZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgc3Bpbm5lclNlcnZpY2Uuc2hvdyhcIm1hcFNwaW5uZXJcIik7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL3Rlc3RpbmcgZnVsbCBzaXRlcyBwZXJmb3JtYW5jZS8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgU0lURS5nZXRBbGwoXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICB2YXIgYWxsU2l0ZXNBcnJheSA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgJHNjb3BlLmFsbFNpdGVzID0gYWxsU2l0ZXNBcnJheTtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIC8vJHNjb3BlLm1hcmtlcnMgPSBbXTtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIC8vJHNjb3BlLm1hcmtlcnNMYXRMbmdBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIC8vLy8vY29udHJvbHMgbWV0aG9kLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgbGVhZmxldERhdGEuZ2V0RGlyZWN0aXZlQ29udHJvbHMoKS50aGVuKGZ1bmN0aW9uIChjb250cm9scykge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgIC8vY29udHJvbHMubWFya2Vycy5jcmVhdGUoe30sICRzY29wZS5tYXJrZXJzKTtcclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgdmFyIG1hcmtlcnMgPSBbXTtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbFNpdGVzQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBhbGxTaXRlc0FycmF5W2ldO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBtYXJrZXJzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6ICdzdG5TaXRlc0FsbCcsXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBsYXQ6IGEubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBsbmc6IGEubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogYS5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiU1ROIFNpdGVcIixcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IGljb25zLnN0blxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUubWFya2Vyc0xhdExuZ0FycmF5LnB1c2goW2EubGF0aXR1ZGVfZGQsIGEubG9uZ2l0dWRlX2RkXSk7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICBjb250cm9scy5tYXJrZXJzLmNyZWF0ZShtYXJrZXJzLCAkc2NvcGUubWFya2Vycyk7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMgPSBtYXJrZXJzO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgIHNwaW5uZXJTZXJ2aWNlLmhpZGUoXCJtYXBTcGlubmVyXCIpO1xyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSBcIkNvdWxkIG5vdCBmZXRjaCBzaXRlc1wiO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvLyB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vZ2V0IGFsbCBTVE4gc2l0ZXNcclxuICAgICAgICAgICAgICAgIC8vJGh0dHAuZ2V0KCdodHRwczovL3N0bi53aW0udXNncy5nb3YvU1ROU2VydmljZXMvU2l0ZXMvcG9pbnRzLmpzb24nKVxyXG4gICAgICAgICAgICAgICAgLy8gICAgLnRoZW4ob25TaXRlQ29tcGxldGUsIG9uRXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgLy9nZXQgU1ROIHNpdGVzIGZvciBzZXNzaW9uIGV2ZW50IGNob3NlbiBieSB1c2VyXHJcbiAgICAgICAgICAgICAgICAvLyRodHRwLmdldCgnaHR0cHM6Ly9zdG4ud2ltLnVzZ3MuZ292L1NUTlNlcnZpY2VzL1NpdGVzLmpzb24/RXZlbnQ9JyArIGV2SUQpXHJcbiAgICAgICAgICAgICAgICAvLyAgICAudGhlbihvblNpdGVDb21wbGV0ZSwgb25FcnJvcik7XHJcbiAgICAgICAgICAgICAgICAvLy9yZXRyaWV2ZXMgZXZlbnQgc2Vzc2lvbiBJRFxyXG4gICAgICAgICAgICAgICAgLy92YXIgZXZJRCA9ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSAhPT0gbnVsbCAmJiAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudElEJykgIT09IHVuZGVmaW5lZCA/ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSA6IDA7XHJcbiAgICAgICAgICAgICAgICAvL2dldCBTVE4gc2l0ZXMgZm9yIHNlc3Npb24gZXZlbnRcclxuICAgICAgICAgICAgICAgIC8vJGh0dHAuZ2V0KCdodHRwczovL3N0bi53aW0udXNncy5nb3YvU1ROU2VydmljZXMvRXZlbnRzLycgKyBldklEICsgJy9TaXRlcy5qc29uJylcclxuICAgICAgICAgICAgICAgIC8vICAgIC50aGVuKG9uU2l0ZUNvbXBsZXRlLCBvbkVycm9yKTtcclxuICAgICAgICAgICAgICAgIC8vY29waWVzIHNjb3BlIG9iamVjdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgICAgICAgICAgbGVhZmxldERhdGEuZ2V0TWFwKCkudGhlbihmdW5jdGlvbihtYXApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZ2VvU2VhcmNoQ29udHJvbCA9IG5ldyBMLkNvbnRyb2wuR2VvU2VhcmNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXI6IG5ldyBMLkdlb1NlYXJjaC5Qcm92aWRlci5Fc3JpKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wbGVmdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHpvb21MZXZlbDogMTVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBnZW9TZWFyY2hDb250cm9sLmFkZFRvKG1hcCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBkZWxldGUgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbjtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKCRzY29wZSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50czoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGU6IGxlYWZsZXRNYXJrZXJFdmVudHMuZ2V0QXZhaWxhYmxlRXZlbnRzKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgbWFwQ2VudGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhdDogNDEuMjc4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsbmc6IC05Mi4zMzYsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHpvb206IDQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pblpvb206IDRcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzOiB7fSxcclxuICAgICAgICAgICAgICAgICAgICBtYXJrZXJzV2F0Y2hPcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvV2F0Y2g6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRGVlcDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kaXZpZHVhbDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9XYXRjaDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRGVlcDogZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aHM6IHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlcnM6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlcnNMYXRMbmdBcnJheTogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlU2l0ZU1vZGVBY3RpdmU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJDcmVhdGVkU2l0ZToge30sXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbWFrZUlEOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdmFyIHRleHQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB2YXIgcG9zc2libGUgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgZm9yKCB2YXIgaT0wOyBpIDwgNTsgaSsrIClcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIHRleHQgKz0gcG9zc2libGUuY2hhckF0KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBvc3NpYmxlLmxlbmd0aCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHJldHVybiB0ZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHVybDogXCJodHRwOi8vZ2lzLnNyaC5ub2FhLmdvdi9hcmNnaXMvcmVzdC9zZXJ2aWNlcy9haHBzX2dhdWdlcy9NYXBTZXJ2ZXIvbGVnZW5kLz9mPWpzb25cIixcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgbGVnZW5kQ2xhc3M6IFwiaW5mbyBsZWdlbmQtZXNyaVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBwb3NpdGlvbjogXCJib3R0b21sZWZ0XCJcclxuICAgICAgICAgICAgICAgICAgICAvLyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGxlZ2VuZFVSTDE6IFwiaHR0cDovL3NlcnZpY2VzLmFyY2dpc29ubGluZS5jb20vYXJjZ2lzL3Jlc3Qvc2VydmljZXMvRGVtb2dyYXBoaWNzL1VTQV8xOTkwLTIwMDBfUG9wdWxhdGlvbl9DaGFuZ2UvTWFwU2VydmVyL2xlZ2VuZD9mPWpzb25cIixcclxuICAgICAgICAgICAgICAgICAgICAvLyBsZWdlbmRVUkwyOiBcImh0dHBzOi8vaGF6YXJkcy5mZW1hLmdvdi9naXMvbmZobC9yZXN0L3NlcnZpY2VzL3B1YmxpYy9ORkhML01hcFNlcnZlci9sZWdlbmQ/Zj1qc29uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc3dpdGNoTGVnZW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgJHNjb3BlLmxheWVycy5vdmVybGF5cy51c2Ffc29jaWFsLnZpc2libGUgPSAhJHNjb3BlLmxheWVycy5vdmVybGF5cy51c2Ffc29jaWFsLnZpc2libGU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICRzY29wZS5sZWdlbmQudXJsID1cclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICRzY29wZS5sZWdlbmQudXJsID09ICRzY29wZS5sZWdlbmRVUkwxPyAkc2NvcGUubGVnZW5kVVJMMjokc2NvcGUubGVnZW5kVVJMMTtcclxuICAgICAgICAgICAgICAgICAgICAvLyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8hISFuZWVkIHRvIGFkZCBsZWdlbmQ9XCJsZWdlbmRcIiBiYWNrIHRvIG1hcCBkaXJlY3RpdmUgaWYgdXNpbmcgdGhpcyEhISEhISEhXHJcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VsYXllcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYXk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkdyYXlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFnc0Jhc2VcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogXCJHcmF5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlZXRzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJlZXRzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZ3NCYXNlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6IFwiU3RyZWV0c1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wbzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiV29ybGQgVG9wb2dyYXBoaWNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFnc0Jhc2VcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogXCJUb3BvZ3JhcGhpY1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0aW9uYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk5hdGlvbmFsIEdlb2dyYXBoaWNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFnc0Jhc2VcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogXCJOYXRpb25hbEdlb2dyYXBoaWNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9jZWFuczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiT2NlYW5zXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZ3NCYXNlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6IFwiT2NlYW5zXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXJrZ3JheToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGFya0dyYXlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFnc0Jhc2VcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogXCJEYXJrR3JheVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VyeToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiSW1hZ2VyeVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWdzQmFzZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyOiBcIkltYWdlcnlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYWRlZHJlbGllZjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU2hhZGVkIFJlbGllZlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWdzQmFzZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyOiBcIlNoYWRlZFJlbGllZlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVycmFpbjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVGVycmFpblwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWdzQmFzZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyOiBcIlRlcnJhaW5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdmVybGF5cyA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0blNpdGVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2dyb3VwJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOidTVE4gU2l0ZXMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG5TaXRlc0FsbDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdncm91cCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTonU1ROIFNpdGVzIEFsbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1NpdGUgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2dyb3VwJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbmV3U2l0ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTp0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyUGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dPblNlbGVjdG9yOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBud2lzIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVVNHUyByZWFsLXRpbWUgc3RyZWFtZ2FnZXNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFnc0ZlYXR1cmVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgOiBcImh0dHBzOi8vc3RubWFwc2VydmljZXMud2ltLnVzZ3MuZ292OjY0NDMvYXJjZ2lzL3Jlc3Qvc2VydmljZXMvU1ROL1NUTl9ud2lzX3J0L01hcFNlcnZlci8wXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludFRvTGF5ZXI6IGZ1bmN0aW9uIChnZW9qc29uLCBsYXRsbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBMLm1hcmtlcihsYXRsbmcsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpY29ucy5ud2lzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25FYWNoRmVhdHVyZTogZnVuY3Rpb24oZmVhdHVyZSwgbGF5ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbGF5ZXIuYmluZFBvcHVwKFwiVVNHUyBJRDogXCIgKyBmZWF0dXJlLnByb3BlcnRpZXMuTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5iaW5kUG9wdXAoZmVhdHVyZS5wcm9wZXJ0aWVzLlBvcHVwSW5mbyArICc8YnI+PGltZyBzdHlsZT1cIndpZHRoOiAzNTBweFwiIHNyYz1cImh0dHA6Ly93YXRlcmRhdGEudXNncy5nb3Yvbndpc3dlYi9ncmFwaD9hZ2VuY3lfY2Q9VVNHUyZzaXRlX25vPScgKyBmZWF0dXJlLnByb3BlcnRpZXMuTmFtZSArICcmcGFybV9jZD0wMDA2NSZwZXJpb2Q9N1wiPicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFocHMgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJBSFBTIEdhZ2VzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZ3NGZWF0dXJlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsIDogXCJodHRwczovL2lkcGdpcy5uY2VwLm5vYWEuZ292L2FyY2dpcy9yZXN0L3NlcnZpY2VzL05XU19PYnNlcnZhdGlvbnMvYWhwc19yaXZfZ2F1Z2VzL01hcFNlcnZlci8wXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xheWVyczogWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludFRvTGF5ZXI6IGZ1bmN0aW9uIChnZW9qc29uLCBsYXRsbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBMLm1hcmtlcihsYXRsbmcsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpY29uc1tnZW9qc29uLnByb3BlcnRpZXMuc3RhdHVzXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRWFjaEZlYXR1cmU6IGZ1bmN0aW9uKGZlYXR1cmUsIGxheWVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xheWVyLmJpbmRQb3B1cChcIlVTR1MgSUQ6IFwiICsgZmVhdHVyZS5wcm9wZXJ0aWVzLk5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdyYXBoVVJMID0gXCJodHRwczovL3dhdGVyLndlYXRoZXIuZ292L3Jlc291cmNlcy9oeWRyb2dyYXBocy9cIiArIGZlYXR1cmUucHJvcGVydGllcy5nYXVnZWxpZC50b0xvd2VyQ2FzZSgpICsgXCJfaGcucG5nXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xheWVyLmJpbmRQb3B1cChcIjxiPkdhZ2UgSUQ6IDwvYj5cIiArIGZlYXR1cmUucHJvcGVydGllcy5nYXVnZWxpZCArIFwiPC9icj48Yj5Mb2NhdGlvbjogPC9iPlwiICsgZmVhdHVyZS5wcm9wZXJ0aWVzLmxvY2F0aW9uICsgXCI8L2JyPjxiPldhdGVyYm9keTogPC9iPlwiICsgZmVhdHVyZS5wcm9wZXJ0aWVzLndhdGVyYm9keSArIFwiPC9icj48YSB0YXJnZXQ9J19ibGFuaycgaHJlZj0nXCIrIGZlYXR1cmUucHJvcGVydGllcy51cmwgKyBcIic+PGltZyB0aXRsZT0nQ2xpY2sgZm9yIGRldGFpbHMgcGFnZScgd2lkdGg9MzAwIHNyYz0nXCIgKyBncmFwaFVSTCArXCInLz48L2E+XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuYmluZFBvcHVwKFwiPGI+R2FnZSBJRDogPC9iPlwiICsgZmVhdHVyZS5wcm9wZXJ0aWVzLmdhdWdlbGlkICsgXCI8L2JyPjxhIHRhcmdldD0nX2JsYW5rJyBocmVmPSdcIisgZmVhdHVyZS5wcm9wZXJ0aWVzLnVybCArIFwiJz48aW1nIHRpdGxlPSdDbGljayBmb3IgZGV0YWlscyBwYWdlJyB3aWR0aD0zMDAgc3JjPSdcIiArIGdyYXBoVVJMICtcIicvPjwvYT5cIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGFyIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiV2VhdGhlciBSYWRhclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWdzRHluYW1pY1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA6IFwiaHR0cHM6Ly9pZHBnaXMubmNlcC5ub2FhLmdvdi9hcmNnaXMvcmVzdC9zZXJ2aWNlcy9OV1NfT2JzZXJ2YXRpb25zL3JhZGFyX2Jhc2VfcmVmbGVjdGl2aXR5L01hcFNlcnZlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucyA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJzOiBbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2F0Y2hXYXJuIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTldTIFdhdGNoZXMgJiBXYXJuaW5nc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWdzRHluYW1pY1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA6IFwiaHR0cHM6Ly9pZHBnaXMubmNlcC5ub2FhLmdvdi9hcmNnaXMvcmVzdC9zZXJ2aWNlcy9OV1NfRm9yZWNhc3RzX0d1aWRhbmNlX1dhcm5pbmdzL3dhdGNoX3dhcm5fYWR2L01hcFNlcnZlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucyA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJzOiBbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmxvb2RUaHJlc2hvbGRzIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIG5hbWU6IFwiTldTIFdGTyBDb2FzdGFsIEZsb29kIFRocmVzaG9sZHNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB0eXBlOiBcImFnc0R5bmFtaWNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB1cmwgOiBcImh0dHBzOi8vd3d3LmNzYy5ub2FhLmdvdi9hcmNnaXMvcmVzdC9zZXJ2aWNlcy9kY19zbHIvRmxvb2RfRnJlcXVlbmN5L01hcFNlcnZlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIHZpc2libGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGxheWVyT3B0aW9ucyA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgbGF5ZXJzOiBbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIG9wYWNpdHk6IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG13YSA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkxpbWl0IE1vZGVyYXRlIFdhdmUgQWN0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZ3NEeW5hbWljXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsIDogXCJodHRwczovL2hhemFyZHMuZmVtYS5nb3YvZ2lzL25maGwvcmVzdC9zZXJ2aWNlcy9wdWJsaWMvTkZITC9NYXBTZXJ2ZXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyczogWzE5XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9vZEJvdW5kcyA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkZsb29kIEhhemFyZCBCb3VuZGFyaWVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZ3NEeW5hbWljXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsIDogXCJodHRwczovL2hhemFyZHMuZmVtYS5nb3YvZ2lzL25maGwvcmVzdC9zZXJ2aWNlcy9wdWJsaWMvTkZITC9NYXBTZXJ2ZXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyczogWzI3XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9vZFpvbmVzIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRmxvb2QgSGF6YXJkIFpvbmVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZ3NEeW5hbWljXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsIDogXCJodHRwczovL2hhemFyZHMuZmVtYS5nb3YvZ2lzL25maGwvcmVzdC9zZXJ2aWNlcy9wdWJsaWMvTkZITC9NYXBTZXJ2ZXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyczogWzI4XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMC43XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIHVybDogXCJodHRwOi8vZ2lzLnNyaC5ub2FhLmdvdi9hcmNnaXMvcmVzdC9zZXJ2aWNlcy9haHBzX2dhdWdlcy9NYXBTZXJ2ZXIvbGVnZW5kP2Y9anNvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBsZWdlbmRDbGFzczogXCJpbmZvIGxlZ2VuZC1lc3JpXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIHBvc2l0aW9uOiBcImJvdHRvbWxlZnRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTsvL2VuZCBhbmd1bGFyICRzY29wZS5leHRlbmQgc3RhdGVtZW50XHJcbiAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgfSAvL2VuZCAtaWYgY3JlZGVudGlhbHMgcGFzcy0gc3RhdGVtZW50XHJcbiAgICAgICAgfV0pOy8vZW5kIGNvbnRyb2xsZXIgZnVuY3Rpb25cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU1ROQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQ29udHJvbGxlcnMnKTsgXHJcbiAgICBTVE5Db250cm9sbGVycy5jb250cm9sbGVyKCdtYWluQ3RybCcsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGRvY3VtZW50JywgJyRjb29raWVzJywgJyR1aWJNb2RhbCcsICckbG9jYXRpb24nLCAnJHN0YXRlJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkZG9jdW1lbnQsICRjb29raWVzLCAkdWliTW9kYWwsICRsb2NhdGlvbiwgJHN0YXRlKSB7XHJcbiAgICAgICAgICAgICRyb290U2NvcGUuaXNBdXRoID0ge307ICAgICAgICBcclxuICAgICAgICAgICAgJHJvb3RTY29wZS5hY3RpdmVNZW51ID0gJ2hvbWUnOyAvL3Njb3BlIHZhciBmb3Igc2V0dGluZyBhY3RpdmUgY2xhc3NcclxuICAgICAgICAgICAgaWYgKCRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gdW5kZWZpbmVkIHx8ICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gXCJcIiB8fCAkY29va2llcy5nZXQoJ1NUTlVzZXJuYW1lJykgPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5pc0F1dGgudmFsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJGRvY3VtZW50WzBdLmRvY3VtZW50TW9kZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJyb3dzZXJJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5XYXJuaW5nPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGlzIGFwcGxpY2F0aW9uIHVzZXMgZnVuY3Rpb25hbGl0eSB0aGF0IGlzIG5vdCBjb21wbGV0ZWx5IHN1cHBvcnRlZCBieSBJbnRlcm5ldCBFeHBsb3Jlci4gVGhlIHByZWZlcnJlZCBicm93c2VyIGlzIENocm9tZSAoYmlzb24gY29ubmVjdCkuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5pc0F1dGgudmFsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUudXNlcnNOYW1lID0gJGNvb2tpZXMuZ2V0KCd1c2Vyc05hbWUnKTtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUudXNlcklEID0gJGNvb2tpZXMuZ2V0KCdtSUQnKTtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUudXNlclJvbGUgPSAkY29va2llcy5nZXQoJ3VzZXJzUm9sZScpO1xyXG4gICAgICAgICAgICAgICAgdmFyIEV2ZW50TmFtZSA9ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50TmFtZScpO1xyXG4gICAgICAgICAgICAgICAgaWYgKEV2ZW50TmFtZSAhPT0gbnVsbCAmJiBFdmVudE5hbWUgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnNlc3Npb25FdmVudCA9IFwiU2Vzc2lvbiBFdmVudDogXCIgKyBFdmVudE5hbWUgKyBcIi5cIjsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnbWFwJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XSk7XHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgTG9nSW5PdXRDb250cm9sbGVyID0gYW5ndWxhci5tb2R1bGUoJ0xvZ0luT3V0Q29udHJvbGxlcicsIFtdKTtcclxuXHJcbiAgICBMb2dJbk91dENvbnRyb2xsZXIuY29udHJvbGxlcignbG9naW5DdHJsJywgWyckc2NvcGUnLCAnJHN0YXRlJywgJyRsb2NhdGlvbicsICckdWliTW9kYWwnLCAnJGh0dHAnLCAnJGNvb2tpZXMnLCAnJHJvb3RTY29wZScsICckZG9jdW1lbnQnLCAnU0VSVkVSX1VSTCcsICdFTlZJUk9OTUVOVCcsICdMb2dpbicsIFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRzdGF0ZSwgJGxvY2F0aW9uLCAkdWliTW9kYWwsICRodHRwLCAkY29va2llcywgJHJvb3RTY29wZSwgJGRvY3VtZW50LCBTRVJWRVJfVVJMLCBFTlZJUk9OTUVOVCwgTG9naW4pIHtcclxuICAgICAgICAgICAgLy9sb2dpbiAvL1xyXG4gICAgICAgICAgICAvLyNyZWdpb24gQ0FQIGxvY2sgQ2hlY2tcclxuICAgICAgICAgICAgJCgnW3R5cGU9cGFzc3dvcmRdJykua2V5cHJlc3MoZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciAkcGFzc3dvcmQgPSAkKHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXBWaXNpYmxlID0gJCgnLnRvb2x0aXAnKS5pcygnOnZpc2libGUnKSxcclxuICAgICAgICAgICAgICAgICAgICBzID0gU3RyaW5nLmZyb21DaGFyQ29kZShlLndoaWNoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocy50b1VwcGVyQ2FzZSgpID09PSBzICYmIHMudG9Mb3dlckNhc2UoKSAhPT0gcyAmJiAhZS5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdG9vbHRpcFZpc2libGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRwYXNzd29yZC50b29sdGlwKCdzaG93Jyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b29sdGlwVmlzaWJsZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHBhc3N3b3JkLnRvb2x0aXAoJ2hpZGUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL2hpZGUgdGhlIHRvb2x0aXAgd2hlbiBtb3ZpbmcgYXdheSBmcm9tIHBhc3N3b3JkIGZpZWxkXHJcbiAgICAgICAgICAgICAgICAkcGFzc3dvcmQuYmx1cihmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRwYXNzd29yZC50b29sdGlwKCdoaWRlJyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBDQVAgbG9jayBDaGVja1xyXG5cclxuICAgICAgICAgICAgaWYgKCRkb2N1bWVudFswXS5kb2N1bWVudE1vZGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJyb3dzZXJJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPldhcm5pbmc8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+VGhpcyBhcHBsaWNhdGlvbiB1c2VzIGZ1bmN0aW9uYWxpdHkgdGhhdCBpcyBub3QgY29tcGxldGVseSBzdXBwb3J0ZWQgYnkgSW50ZXJuZXQgRXhwbG9yZXIuIFRoZSBwcmVmZXJyZWQgYnJvd3NlciBpcyBDaHJvbWUgKGJpc29uIGNvbm5lY3QpLjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgRGF0ZS5wcm90b3R5cGUuYWRkSG91cnMgPSBmdW5jdGlvbiAoaCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRIb3Vycyh0aGlzLmdldEhvdXJzKCkgKyBoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VydmVyVVJMID0gU0VSVkVSX1VSTDtcclxuICAgICAgICAgICAgJHJvb3RTY29wZS5lbnZpcm9ubWVudCA9IEVOVklST05NRU5UO1xyXG4gICAgICAgICAgICAkc2NvcGUuc3VibWl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy8kc2NvcGUuc3ViID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSB0cnVlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgdmFyIHBvc3REYXRhID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIFwidXNlcm5hbWVcIjogJHNjb3BlLnVzZXJuYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIFwicGFzc3dvcmRcIjogJHNjb3BlLnBhc3N3b3JkXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdmFyIHVwID0gJHNjb3BlLnVzZXJuYW1lICsgXCI6XCIgKyAkc2NvcGUucGFzc3dvcmQ7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyBidG9hKHVwKTtcclxuICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgTG9naW4ubG9naW4oe30sIFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXIgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHVzZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9zZXQgdXNlciBjb29raWVzIChjcmVkLCB1c2VybmFtZSwgbmFtZSwgcm9sZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVzZXJzTkFNRSA9IHVzZXIuZm5hbWUgKyBcIiBcIiArIHVzZXIubG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW5jID0gYnRvYSgkc2NvcGUudXNlcm5hbWUuY29uY2F0KFwiOlwiLCAkc2NvcGUucGFzc3dvcmQpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2V0IGV4cGlyYXRpb24gb24gY29va2llc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4cGlyZURhdGUgPSBuZXcgRGF0ZSgpLmFkZEhvdXJzKDgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvb2tpZXMucHV0KCdTVE5DcmVkcycsIGVuYywgeyBleHBpcmVzOiBleHBpcmVEYXRlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvb2tpZXMucHV0KCdTVE5Vc2VybmFtZScsICRzY29wZS51c2VybmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29va2llcy5wdXQoJ3VzZXJzTmFtZScsIHVzZXJzTkFNRSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29va2llcy5wdXQoJ21JRCcsIHVzZXIubWVtYmVyX2lkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb2xlTmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAodXNlci5yb2xlX2lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlTmFtZSA9IFwiQWRtaW5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlTmFtZSA9IFwiTWFuYWdlclwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGVOYW1lID0gXCJGaWVsZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGVOYW1lID0gXCJQdWJsaWNcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZU5hbWUgPSBcIkNpdGl6ZW5NYW5hZ2VyXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvb2tpZXMucHV0KCd1c2Vyc1JvbGUnLCByb2xlTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5pc0F1dGgudmFsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUudXNlcnNOYW1lID0gdXNlcnNOQU1FO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS51c2VySUQgPSB1c2VyLm1lbWJlcl9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUudXNlclJvbGUgPSAkY29va2llcy5nZXQoJ3VzZXJzUm9sZScpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRyb290U2NvcGUucmV0dXJuVG9TdGF0ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCRyb290U2NvcGUucmV0dXJuVG9TdGF0ZSwge2lkOiAkcm9vdFNjb3BlLnJldHVyblRvU3RhdGVQYXJhbXN9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdtYXAnKTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IFwiTG9naW4gRmFpbGVkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21vZGFsIGZvciBlcnJvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGVyZSB3YXMgYW4gZXJyb3IuPC9wPjxwPkVycm9yOiB7e3N0YXR1c319IC0ge3tzdGF0dXNUZXh0fX08L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0gZXJyb3JSZXNwb25zZS5zdGF0dXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1c1RleHQgPSBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGZpZWxkRm9jdXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbG9naW4nKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XSk7XHJcblxyXG4gICAgLy9sb2dPdXRcclxuICAgIExvZ0luT3V0Q29udHJvbGxlci5jb250cm9sbGVyKCdsb2dvdXRDdHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckbG9jYXRpb24nLCBcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkY29va2llcywgJGxvY2F0aW9uKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5sb2dvdXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvL2NsZWFyICRjb29raWVzXHJcbiAgICAgICAgICAgICAgICAkY29va2llcy5yZW1vdmUoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAkY29va2llcy5yZW1vdmUoJ1NUTlVzZXJuYW1lJyk7XHJcbiAgICAgICAgICAgICAgICAkY29va2llcy5yZW1vdmUoJ3VzZXJzTmFtZScpO1xyXG4gICAgICAgICAgICAgICAgJGNvb2tpZXMucmVtb3ZlKCd1c2Vyc1JvbGUnKTtcclxuICAgICAgICAgICAgICAgICRjb29raWVzLnJlbW92ZSgnbUlEJyk7XHJcbiAgICAgICAgICAgICAgICAkY29va2llcy5yZW1vdmUoJ1Nlc3Npb25FdmVudElEJyk7XHJcbiAgICAgICAgICAgICAgICAkY29va2llcy5yZW1vdmUoJ1Nlc3Npb25FdmVudE5hbWUnKTtcclxuICAgICAgICAgICAgICAgIC8vY2xlYXIgJHJvb3RTY29wZVxyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS50aGlzUGFnZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUucmV0dXJuVG9TdGF0ZSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUucmV0dXJuVG9TdGF0ZVBhcmFtcyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmFjdGl2ZU1lbnUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnNlc3Npb25FdmVudCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuaXNBdXRoID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zZWFyY2hUZXJtID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zZWFyY2hQYXJhbXMgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmFwcHJvdmFsU2VhcmNoID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS51c2VySUQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnVzZXJSb2xlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS51c2Vyc05hbWUgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmVudmlyb25tZW50ID0gdW5kZWZpbmVkO1xyXG5cclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbG9naW4nKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XSk7XHJcbn0oKSk7XHJcbiIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAvKiBjb250cm9sbGVycy5qcywgJ2xlYWZsZXQtZGlyZWN0aXZlJyd1aS51bmlxdWUnLCduZ1RhZ3NJbnB1dCcsKi9cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU1ROQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQ29udHJvbGxlcnMnKTtcclxuXHJcbiAgICBTVE5Db250cm9sbGVycy5jb250cm9sbGVyKCdxdWlja0hXTUN0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRjb29raWVzJywgJyRsb2NhdGlvbicsICckc3RhdGUnLCAnJGh0dHAnLCAnJHVpYk1vZGFsJywgJyRmaWx0ZXInLFxyXG4gICAgICAgICdhbGxIb3JEYXR1bXMnLCAnYWxsSG9yQ29sbE1ldGhvZHMnLCAnYWxsU3RhdGVzJywgJ2FsbENvdW50aWVzJywgJ2FsbE9QVHlwZXMnLCAnYWxsVmVydERhdHVtcycsICdhbGxWZXJ0Q29sTWV0aG9kcycsIFxyXG4gICAgICAgICdhbGxPUFF1YWxpdGllcycsICdhbGxIV01UeXBlcycsICdhbGxIV01RdWFsaXRpZXMnLCAnYWxsTWFya2VycycsICdTSVRFJywgJ09CSkVDVElWRV9QT0lOVCcsICdIV00nLCBcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkY29va2llcywgJGxvY2F0aW9uLCAkc3RhdGUsICRodHRwLCAkdWliTW9kYWwsICRmaWx0ZXIsIGFsbEhvckRhdHVtcywgYWxsSG9yQ29sbE1ldGhvZHMsIGFsbFN0YXRlcyxcclxuICAgICAgICBhbGxDb3VudGllcywgYWxsT1BUeXBlcywgYWxsVmVydERhdHVtcywgYWxsVmVydENvbE1ldGhvZHMsIGFsbE9QUXVhbGl0aWVzLCBhbGxIV01UeXBlcywgYWxsSFdNUXVhbGl0aWVzLCBhbGxNYXJrZXJzLCBTSVRFLCBPQkpFQ1RJVkVfUE9JTlQsIEhXTSkge1xyXG4gICAgICAgICAgICBpZiAoJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSB1bmRlZmluZWQgfHwgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYXV0aCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy9nbG9iYWwgdmFyc1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS50aGlzUGFnZSA9IFwiUXVpY2sgSFdNXCI7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucWh3bUZvcm0gPSB7fTsgLy9mb3JtcyB3aXRoaW4gdGhlIGFjY29yZGlvbiAuU2l0ZSwgLk9QLCAuSFdNXHJcbiAgICAgICAgICAgICAgICAvL2NhbGxlZCBhIGZldyB0aW1lcyB0byBmb3JtYXQganVzdCB0aGUgZGF0ZSAobm8gdGltZSlcclxuICAgICAgICAgICAgICAgIHZhciBtYWtlQWRhdGUgPSBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQgIT09IFwiXCIgJiYgZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcHJvdmlkZWQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhRGF0ZSA9IG5ldyBEYXRlKGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHllYXIgPSBhRGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb250aCA9IGFEYXRlLmdldE1vbnRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRheSA9ICgnMCcgKyBhRGF0ZS5nZXREYXRlKCkpLnNsaWNlKC0yKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9udGhOYW1lcyA9IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZVdPdGltZSA9IG5ldyBEYXRlKG1vbnRoTmFtZXNbbW9udGhdICsgXCIgXCIgKyBkYXkgKyBcIiwgXCIgKyB5ZWFyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZVdPdGltZTtcclxuICAgICAgICAgICAgICAgIH07Ly9lbmQgbWFrZUFkYXRlKClcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWNEZWdPUmRtcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlID0geyBNRU1CRVJfSUQ6ICRjb29raWVzLmdldCgnbUlEJykgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hT1AgPSB7REFURV9FU1RBQkxJU0hFRDogbWFrZUFkYXRlKFwiXCIpfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hSFdNID0geyBIV01fRU5WSVJPTk1FTlQ6ICdSaXZlcmluZScsIEJBTks6ICdOL0EnLCBGTEFHX0RBVEU6IG1ha2VBZGF0ZShcIlwiKSwgU1RJTExXQVRFUjowIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0geyBzaXRlT3BlbjogdHJ1ZSwgb3BPcGVuOiBmYWxzZSwgaHdtT3BlbjogZmFsc2UgfTsgLy9hY2NvcmRpb24gZm9yIHBhcnRzXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVtb3ZlT1BDYXJyYXkgPSBbXTsgLy9ob2xkZXIgaWYgdGhleSByZW1vdmUgYW55IE9QIGNvbnRyb2xzXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkZWRJZGVudGlmaWVycyA9IFtdOyAvL2hvbGRlciBmb3IgYWRkZWQgSWRlbnRpZmllcnNcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93Q29udHJvbElEaW5wdXQgPSBmYWxzZTsgLy9pbml0aWFsbHkgaGlkZSB0aGUgYXJlYSBjb250YWluaW5nIGFkZGVkIGNvbnRyb2wgSWRlbnRpZmllcnNcclxuICAgICAgICAgICAgICAgIC8vZHJvcGRvd25zXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaG9yRGF0dW1MaXN0ID0gYWxsSG9yRGF0dW1zOyAkc2NvcGUuaG9yQ29sbE1ldGhvZExpc3QgPSBhbGxIb3JDb2xsTWV0aG9kcztcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZUxpc3QgPSBhbGxTdGF0ZXM7ICRzY29wZS5hbGxDb3VudHlMaXN0ID0gYWxsQ291bnRpZXM7ICRzY29wZS5zdGF0ZUNvdW50eUxpc3QgPSBbXTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5vcFR5cGVMaXN0ID0gYWxsT1BUeXBlczsgJHNjb3BlLnZlcnREYXR1bUxpc3QgPSBhbGxWZXJ0RGF0dW1zO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZlcnRDb2xsTWV0aG9kTGlzdCA9IGFsbFZlcnRDb2xNZXRob2RzOyAkc2NvcGUub3BRdWFsTGlzdCA9IGFsbE9QUXVhbGl0aWVzO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmh3bVR5cGVMaXN0ID0gYWxsSFdNVHlwZXM7ICRzY29wZS5od21RdWFsTGlzdCA9IGFsbEhXTVF1YWxpdGllczsgJHNjb3BlLm1hcmtlckxpc3QgPSBhbGxNYXJrZXJzO1xyXG4gICAgICAgICAgICAgICAgLy9kZWZhdWx0IHJhZGlvc1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkZUb3JNRVRFUiA9ICdmdCc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuRlRvckNNID0gJ2Z0JztcclxuXHJcbiAgICAgICAgICAgICAgICAvL3dhbnQgdG8gYWRkIGlkZW50aWZpZXJcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGROZXdJZGVudGlmaWVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRlZElkZW50aWZpZXJzLnB1c2goeyBPQkpFQ1RJVkVfUE9JTlRfSUQ6ICRzY29wZS5hT1AuT0JKRUNUSVZFX1BPSU5UX0lELCBJREVOVElGSUVSOiBcIlwiLCBJREVOVElGSUVSX1RZUEU6IFwiXCIgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dDb250cm9sSURpbnB1dCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9Oy8vZW5kIGFkZE5ld0lkZW50aWZpZXIgZm9yIE9QXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIERhdGVwaWNrZXJcclxuICAgICAgICAgICAgICAgICRzY29wZS5kYXRlcGlja3JzID0ge307XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUub3BlbiA9IGZ1bmN0aW9uICgkZXZlbnQsIHdoaWNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tyc1t3aGljaF0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBsYXQvbG9uZyBzdHVmZlxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWNEZWdPUmRtcy52YWwgPSAnZGQnO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkRNUyA9IHt9OyAvL2hvbGRlciBvZiBkZWcgbWluIHNlYyB2YWx1ZXNcclxuXHJcbiAgICAgICAgICAgICAgICAvL2NvbnZlcnQgZGVnIG1pbiBzZWMgdG8gZGVjIGRlZ3JlZXNcclxuICAgICAgICAgICAgICAgIHZhciBhemltdXRoID0gZnVuY3Rpb24gKGRlZywgbWluLCBzZWMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYXppID0gMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVnIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhemkgPSAtMS4wICogZGVnICsgMS4wICogbWluIC8gNjAuMCArIDEuMCAqIHNlYyAvIDM2MDAuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgtMS4wICogYXppKS50b0ZpeGVkKDUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXppID0gMS4wICogZGVnICsgMS4wICogbWluIC8gNjAuMCArIDEuMCAqIHNlYyAvIDM2MDAuMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChhemkpLnRvRml4ZWQoNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2NvbnZlcnQgZGVjIGRlZ3JlZXMgdG8gZG1zXHJcbiAgICAgICAgICAgICAgICB2YXIgZGVnX3RvX2RtcyA9IGZ1bmN0aW9uIChkZWcpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZGVnIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWcgPSBkZWcudG9TdHJpbmcoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbG9uZ2l0dWRlLCByZW1vdmUgdGhlIC0gc2lnblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWcgPSBkZWcuc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZCA9IE1hdGguZmxvb3IoZGVnKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWluZmxvYXQgPSAoZGVnIC0gZCkgKiA2MDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbSA9IE1hdGguZmxvb3IobWluZmxvYXQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gKChtaW5mbG9hdCAtIG0pICogNjApLnRvRml4ZWQoMyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoXCJcIiArIGQgKyBcIjpcIiArIG0gKyBcIjpcIiArIHMpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3RoZXkgY2hhbmdlZCByYWRpbyBidXR0b24gZm9yIGRtcyBkZWMgZGVnXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubGF0TG9uZ0NoYW5nZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmRlY0RlZ09SZG1zLnZhbCA9PSBcImRkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGV5IGNsaWNrZWQgRGVjIERlZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxBRGVnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29udmVydCB3aGF0J3MgaGVyZSBmb3IgZWFjaCBsYXQgYW5kIGxvbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5MQVRJVFVERV9ERCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MQURlZywgJHNjb3BlLkRNUy5MQU1pbiwgJHNjb3BlLkRNUy5MQVNlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuTE9OR0lUVURFX0REID0gYXppbXV0aCgkc2NvcGUuRE1TLkxPRGVnLCAkc2NvcGUuRE1TLkxPTWluLCAkc2NvcGUuRE1TLkxPU2VjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGV5IGNsaWNrZWQgZG1zIChjb252ZXJ0IGxhdC9sb25nIHRvIGRtcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU2l0ZS5MQVRJVFVERV9ERCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGF0RE1TID0gKGRlZ190b19kbXMoJHNjb3BlLmFTaXRlLkxBVElUVURFX0REKSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYWRETVNhcnJheSA9IGxhdERNUy5zcGxpdCgnOicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MQURlZyA9IGxhZERNU2FycmF5WzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MQU1pbiA9IGxhZERNU2FycmF5WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MQVNlYyA9IGxhZERNU2FycmF5WzJdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb25nRE1TID0gZGVnX3RvX2Rtcygkc2NvcGUuYVNpdGUuTE9OR0lUVURFX0REKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb25nRE1TYXJyYXkgPSBsb25nRE1TLnNwbGl0KCc6Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPRGVnID0gbG9uZ0RNU2FycmF5WzBdICogLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPTWluID0gbG9uZ0RNU2FycmF5WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MT1NlYyA9IGxvbmdETVNhcnJheVsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gIGxhdC9sb25nID1pcyBudW1iZXJcclxuICAgICAgICAgICAgICAgICRzY29wZS5pc051bSA9IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGhlRXZlbnQgPSBldnQgfHwgd2luZG93LmV2ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSB0aGVFdmVudC5rZXlDb2RlIHx8IHRoZUV2ZW50LndoaWNoO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkgIT0gNDYgJiYga2V5ICE9IDQ1ICYmIGtleSA+IDMxICYmIChrZXkgPCA0OCB8fCBrZXkgPiA1NykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhlRXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoZUV2ZW50LnByZXZlbnREZWZhdWx0KSB0aGVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy9nZXQgYWRkcmVzcyBwYXJ0cyBhbmQgZXhpc3Rpbmcgc2l0ZXMgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0QWRkcmVzcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2NsZWFyIHRoZW0gYWxsIGZpcnN0XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlICRzY29wZS5hU2l0ZS5BRERSRVNTOyBkZWxldGUgJHNjb3BlLmFTaXRlLkNJVFk7IGRlbGV0ZSAkc2NvcGUuYVNpdGUuU1RBVEU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRlQ291bnR5TGlzdCA9IFtdOyBkZWxldGUgJHNjb3BlLmFTaXRlLlpJUDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IHRydWU7IC8vbG9hZGluZy4uLlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBnZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcigpOyAvL3JldmVyc2UgYWRkcmVzcyBsb29rdXBcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbGF0bG5nID0gbmV3IGdvb2dsZS5tYXBzLkxhdExuZygkc2NvcGUuYVNpdGUuTEFUSVRVREVfREQsICRzY29wZS5hU2l0ZS5MT05HSVRVREVfREQpO1xyXG4gICAgICAgICAgICAgICAgICAgIGdlb2NvZGVyLmdlb2NvZGUoeyAnbGF0TG5nJzogbGF0bG5nIH0sIGZ1bmN0aW9uIChyZXN1bHRzLCBzdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PSykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wYXJzZSB0aGUgcmVzdWx0cyBvdXQgaW50byBjb21wb25lbnRzICgnc3RyZWV0X251bWJlcicsICdyb3V0ZScsICdsb2NhbGl0eScsICdhZG1pbmlzdHJhdGl2ZV9hcmVhX2xldmVsXzInLCAnYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8xJywgJ3Bvc3RhbF9jb2RlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFkZHJlc3NfY29tcG9uZW50cyA9IHJlc3VsdHNbMF0uYWRkcmVzc19jb21wb25lbnRzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvbXBvbmVudHMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChhZGRyZXNzX2NvbXBvbmVudHMsIGZ1bmN0aW9uIChrLCB2MSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaCh2MS50eXBlcywgZnVuY3Rpb24gKGsyLCB2Mikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb21wb25lbnRzW3YyXSA9IHYxLmxvbmdfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5BRERSRVNTID0gY29tcG9uZW50cy5zdHJlZXRfbnVtYmVyICE9PSB1bmRlZmluZWQgPyBjb21wb25lbnRzLnN0cmVldF9udW1iZXIgKyBcIiBcIiArIGNvbXBvbmVudHMucm91dGUgOiBjb21wb25lbnRzLnJvdXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLkNJVFkgPSBjb21wb25lbnRzLmxvY2FsaXR5O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzU3RhdGUgPSAkc2NvcGUuc3RhdGVMaXN0LmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcy5TVEFURV9OQU1FID09IGNvbXBvbmVudHMuYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8xOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzU3RhdGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5TVEFURSA9IHRoaXNTdGF0ZS5TVEFURV9BQkJSRVY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRlQ291bnR5TGlzdCA9ICRzY29wZS5hbGxDb3VudHlMaXN0LmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5TVEFURV9JRCA9PSB0aGlzU3RhdGUuU1RBVEVfSUQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5DT1VOVFkgPSBjb21wb25lbnRzLmFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuWklQID0gY29tcG9uZW50cy5wb3N0YWxfY29kZTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJGFwcGx5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJUaGUgTGF0aXR1ZGUvTG9uZ2l0dWRlIGRpZCBub3QgcmV0dXJuIGEgbG9jYXRpb24gd2l0aGluIHRoZSBVLlMuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiVGhlcmUgd2FzIGFuIGVycm9yIGdldHRpbmcgYWRkcmVzcy4gUGxlYXNlIHRyeSBhZ2Fpbi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAvLyBcclxuICAgICAgICAgICAgICAgIH07Ly9lbmQgZ2V0QWRkcmVzcygpXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIGxhdC9sb25nIHN0dWZmXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gd2F0Y2ggZm9yIHRoZSBzZXNzaW9uIGV2ZW50IHRvIGNoYW5nZSBhbmQgdXBkYXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50TmFtZScpOyB9LCBmdW5jdGlvbiAobmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vzc2lvbkV2ZW50TmFtZSA9IG5ld1ZhbHVlICE9PSB1bmRlZmluZWQgPyBuZXdWYWx1ZSA6IFwiQWxsIEV2ZW50c1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXNzaW9uRXZlbnRFeGlzdHMgPSAkc2NvcGUuc2Vzc2lvbkV2ZW50TmFtZSAhPSBcIkFsbCBFdmVudHNcIiA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vd2hlbiBTSVRFLnN0YXRlIGNoYW5nZXMsIHVwZGF0ZSBjb3VudHkgbGlzdFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnVwZGF0ZUNvdW50eUxpc3QgPSBmdW5jdGlvbiAocykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGlzU3RhdGUgPSAkc2NvcGUuc3RhdGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoc3QpIHsgcmV0dXJuIHN0LlNUQVRFX0FCQlJFViA9PSBzOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVDb3VudHlMaXN0ID0gJHNjb3BlLmFsbENvdW50eUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLlNUQVRFX0lEID09IHRoaXNTdGF0ZS5TVEFURV9JRDsgfSk7XHJcbiAgICAgICAgICAgICAgICB9Oy8vZW5kIHVwZGF0ZUNvdW50eUxpc3QoKSBmb3IgU2l0ZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vbWFrZSB1bmNlcnRhaW50eSBjbGVhcmVkIGFuZCBkaXNhYmxlZCB3aGVuICd1bnF1YW50aWZpZWQnIGlzIGNoZWNrZWRcclxuICAgICAgICAgICAgICAgICRzY29wZS5VbnF1YW50Q2hlY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFPUC5VTlFVQU5USUZJRUQgPT0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFPUC5VTkNFUlRBSU5UWSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9Oy8vZW5kIHVucXVhbnRDaGVja2VkKCkgZm9yIG9wXHJcblxyXG4gICAgICAgICAgICAgICAgLy9qdXN0IG5lZWQgYW4gT0JKRUNUSVZFX1BPSU5UIG9iamVjdCB0byBwb3N0L3B1dFxyXG4gICAgICAgICAgICAgICAgdmFyIHRyaW1PUCA9IGZ1bmN0aW9uIChvcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBPQkpfUFQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9CSkVDVElWRV9QT0lOVF9JRDogb3AuT0JKRUNUSVZFX1BPSU5UX0lEICE9PSB1bmRlZmluZWQgPyBvcC5PQkpFQ1RJVkVfUE9JTlRfSUQgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBOQU1FOiBvcC5OQU1FLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBERVNDUklQVElPTjogb3AuREVTQ1JJUFRJT04sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEVMRVZfRlQ6IG9wLkVMRVZfRlQgIT09IHVuZGVmaW5lZCA/IG9wLkVMRVZfRlQgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBEQVRFX0VTVEFCTElTSEVEOiBvcC5EQVRFX0VTVEFCTElTSEVELFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBPUF9JU19ERVNUUk9ZRUQ6IG9wLk9QX0lTX0RFU1RST1lFRCAhPT0gdW5kZWZpbmVkID8gb3AuT1BfSVNfREVTVFJPWUVEIDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgT1BfTk9URVM6IG9wLk9QX05PVEVTICE9PSB1bmRlZmluZWQgPyBvcC5PUF9OT1RFUyA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNJVEVfSUQ6IG9wLlNJVEVfSUQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFZEQVRVTV9JRDogb3AuVkRBVFVNX0lEICE9PSB1bmRlZmluZWQgPyBvcC5WREFUVU1fSUQgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBMQVRJVFVERV9ERDogb3AuTEFUSVRVREVfREQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIExPTkdJVFVERV9ERDogb3AuTE9OR0lUVURFX0RELFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBIREFUVU1fSUQ6IG9wLkhEQVRVTV9JRCAhPT0gdW5kZWZpbmVkID8gb3AuSERBVFVNX0lEIDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgSENPTExFQ1RfTUVUSE9EX0lEOiBvcC5IQ09MTEVDVF9NRVRIT0RfSUQgIT09IHVuZGVmaW5lZCA/IG9wLkhDT0xMRUNUX01FVEhPRF9JRCA6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFZDT0xMRUNUX01FVEhPRF9JRDogb3AuVkNPTExFQ1RfTUVUSE9EX0lEICE9PSB1bmRlZmluZWQgPyBvcC5WQ09MTEVDVF9NRVRIT0RfSUQgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBPUF9UWVBFX0lEOiBvcC5PUF9UWVBFX0lELFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBEQVRFX1JFQ09WRVJFRDogb3AuREFURV9SRUNPVkVSRUQgIT09IHVuZGVmaW5lZCA/IG9wLkRBVEVfUkVDT1ZFUkVEIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgVU5DRVJUQUlOVFk6IG9wLlVOQ0VSVEFJTlRZICE9PSB1bmRlZmluZWQgPyBvcC5VTkNFUlRBSU5UWSA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVOUVVBTlRJRklFRDogb3AuVU5RVUFOVElGSUVEICE9PSB1bmRlZmluZWQgPyBvcC5VTlFVQU5USUZJRUQgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBPUF9RVUFMSVRZX0lEOiBvcC5PUF9RVUFMSVRZX0lEICE9PSB1bmRlZmluZWQgPyBvcC5PUF9RVUFMSVRZX0lEIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPQkpfUFQ7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vZml4IGRlZmF1bHQgcmFkaW9zIGFuZCBsYXQvbG9uZ1xyXG4gICAgICAgICAgICAgICAgdmFyIGZvcm1hdERlZmF1bHRzID0gZnVuY3Rpb24gKHRoZU9QKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUuT1AuRlRvck1FVEVSIG5lZWRzIHRvIGJlICdmdCcuIGlmICdtZXRlcicgPT1jb252ZXJ0IHZhbHVlIHRvIGZ0IFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGVPUC5GVG9yTUVURVIgPT0gXCJtZXRlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hT1AuRlRvck1FVEVSID0gJ2Z0JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFPUC5FTEVWX0ZUID0gJHNjb3BlLmFPUC5FTEVWX0ZUICogMy4yODA4O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5PUC5GVG9yQ00gbmVlZHMgdG8gYmUgJ2Z0Jy4gaWYgJ2NtJyA9PWNvbnZlcnQgdmFsdWUgdG8gZnQgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoZU9QLkZUb3JDTSA9PSBcImNtXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFPUC5GVG9yQ00gPSAnZnQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYU9QLlVOQ0VSVEFJTlRZID0gJHNjb3BlLmFPUC5VTkNFUlRBSU5UWSAvIDMwLjQ4O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVFcnJvcnMgPSBmYWxzZTsgJHNjb3BlLm9wRXJyb3JzID0gZmFsc2U7ICRzY29wZS5od21FcnJvcnMgPSBmYWxzZTsgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY3JlYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSB0cnVlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGVGb3JtID0gJHNjb3BlLnFod21Gb3JtLnF1aWNrSFdNOyAkc2NvcGUuc2l0ZUVycm9ycyA9IGZhbHNlOyAkc2NvcGUub3BFcnJvcnMgPSBmYWxzZTsgJHNjb3BlLmh3bUVycm9ycyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGVGb3JtLiR2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3NpdGUgUE9TVFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjcmVhdGVkU2l0ZUlEID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU2l0ZS5MT05HSVRVREVfREQgPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLkxPTkdJVFVERV9ERCA9ICRzY29wZS5hU2l0ZS5MT05HSVRVREVfREQgKiAoLTEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL1BPU1Qgc2l0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTSVRFLnNhdmUoJHNjb3BlLmFTaXRlLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkU2l0ZUlEID0gcmVzcG9uc2UuU0lURV9JRDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hT1AuU0lURV9JRCA9IGNyZWF0ZWRTaXRlSUQ7ICRzY29wZS5hT1AuTEFUSVRVREVfREQgPSByZXNwb25zZS5MQVRJVFVERV9ERDsgJHNjb3BlLmFPUC5MT05HSVRVREVfREQgPSByZXNwb25zZS5MT05HSVRVREVfREQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYU9QLkhEQVRVTV9JRCA9IHJlc3BvbnNlLkhEQVRVTV9JRDsgJHNjb3BlLmFPUC5IQ09MTEVDVF9NRVRIT0RfSUQgPSByZXNwb25zZS5IQ09MTEVDVF9NRVRIT0RfSUQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uU0lURV9JRCA9IGNyZWF0ZWRTaXRlSUQ7ICRzY29wZS5hSFdNLldBVEVSQk9EWSA9IHJlc3BvbnNlLldBVEVSQk9EWTsgJHNjb3BlLmFIV00uTEFUSVRVREVfREQgPSByZXNwb25zZS5MQVRJVFVERV9ERDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLkxPTkdJVFVERV9ERCA9IHJlc3BvbnNlLkxPTkdJVFVERV9ERDsgJHNjb3BlLmFIV00uSENPTExFQ1RfTUVUSE9EX0lEID0gcmVzcG9uc2UuSENPTExFQ1RfTUVUSE9EX0lEO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uSERBVFVNX0lEID0gcmVzcG9uc2UuSERBVFVNX0lEOyAkc2NvcGUuYUhXTS5GTEFHX1RFQU1fSUQgPSByZXNwb25zZS5NRU1CRVJfSUQ7ICRzY29wZS5hSFdNLkVWRU5UX0lEID0gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnRJRCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vT1Agc3R1ZmYgUE9TVFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNyZWF0ZWRPUCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wb3N0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXREZWZhdWx0cygkc2NvcGUuYU9QKTsgLy8kc2NvcGUuT1AuRlRvck1FVEVSLCBGVG9yQ00sIGRlY0RlZ09SZG1zICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIE9QdG9QT1NUID0gdHJpbU9QKCRzY29wZS5hT1ApOyAvL21ha2UgaXQgYW4gT0JKRUNUSVZFX1BPSU5UIGZvciBzYXZpbmdcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPQkpFQ1RJVkVfUE9JTlQuc2F2ZShPUHRvUE9TVCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRPUCA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYWRkZWRJZGVudGlmaWVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcG9zdCBlYWNoIG9uZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBvcGMgPSAwOyBvcGMgPCAkc2NvcGUuYWRkZWRJZGVudGlmaWVycy5sZW5ndGg7IG9wYysrKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT0JKRUNUSVZFX1BPSU5ULmNyZWF0ZU9QQ29udHJvbElEKHsgaWQ6IHJlc3BvbnNlLk9CSkVDVElWRV9QT0lOVF9JRCB9LCAkc2NvcGUuYWRkZWRJZGVudGlmaWVyc1tvcGNdKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9IV00gc3R1ZmYgUE9TVFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjcmVhdGVkSFdNID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiB0aGV5IGVudGVyZWQgYSBzdXJ2ZXkgZGF0ZSBvciBlbGV2YXRpb24sIHRoZW4gc2V0IHN1cnZleSBtZW1iZXIgYXMgdGhlIGZsYWcgbWVtYmVyIChmbGFnZ2luZyBhbmQgc3VydmV5aW5nIGF0IHNhbWUgdGltZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUhXTS5TVVJWRVlfREFURSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5TVVJWRVlfVEVBTV9JRCA9ICRzY29wZS5hSFdNLkZMQUdfVEVBTV9JRDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hSFdNLkVMRVZfRlQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSB0aGV5IGFkZGVkIHRoZSBzdXJ2ZXkgZGF0ZSBpZiB0aGV5IGFkZGVkIGFuIGVsZXZhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFIV00uU1VSVkVZX0RBVEUgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLlNVUlZFWV9EQVRFID0gbWFrZUFkYXRlKFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uU1VSVkVZX1RFQU1fSUQgPSAkc2NvcGUuYUhXTS5GTEFHX1RFQU1fSUQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhXTS5zYXZlKCRzY29wZS5hSFdNKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlF1aWNrIEhXTSBjcmVhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvU2l0ZS8nICsgY3JlYXRlZFNpdGVJRCArICcvU2l0ZURhc2hib2FyZCcpLnJlcGxhY2UoKTsvLy5ub3RpZnkoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXBwbHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgSFdNLnNhdmUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgT1Auc2F2ZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIFNJVEUuc2F2ZSgpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cy5zaXRlT3BlbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMub3BPcGVuID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cy5od21PcGVuID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChcIltuYW1lPSdcIiArIHRoZUZvcm0uJG5hbWUgKyBcIiddXCIpLmZpbmQoJy5uZy1pbnZhbGlkOnZpc2libGU6Zmlyc3QnKS5mb2N1cygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoZUZvcm0uU0lURV9ERVNDUklQVElPTi4kaW52YWxpZCB8fCB0aGVGb3JtLkxBVElUVURFX0RELiRpbnZhbGlkIHx8IHRoZUZvcm0uTE9OR0lUVURFX0RELiRpbnZhbGlkIHx8IHRoZUZvcm0uSERBVFVNX0lELiRpbnZhbGlkIHx8IHRoZUZvcm0uSENPTExFQ1RfTUVUSE9EX0lELiRpbnZhbGlkIHx8IHRoZUZvcm0uV0FURVJCT0RZLiRpbnZhbGlkIHx8IHRoZUZvcm0uU1RBVEUuJGludmFsaWR2IHx8IHRoZUZvcm0uQ09VTlRZLiRpbnZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZUVycm9ycyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoZUZvcm0uT1BfVFlQRV9JRC4kaW52YWxpZCB8fCB0aGVGb3JtLk5BTUUuJGludmFsaWQgfHwgdGhlRm9ybS5ERVNDUklQVElPTi4kaW52YWxpZCB8fCB0aGVGb3JtLmRlLiRpbnZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3BFcnJvcnMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGVGb3JtLkhXTV9UWVBFX0lELiRpbnZhbGlkIHx8IHRoZUZvcm0uSFdNX0VOVklST05NRU5ULiRpbnZhbGlkIHx8IHRoZUZvcm0uSFdNX1FVQUxJVFlfSUQuJGludmFsaWQgfHwgdGhlRm9ybS5mZC4kaW52YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bUVycm9ycyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiUXVpY2sgSFdNIG5vdCBjcmVhdGVkLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgICAgIH0vL2VuZCBlbHNlIChsb2dnZWQgaW4pXHJcbiAgICAgICAgfV0pO1xyXG4gIFxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAvKiBjb250cm9sbGVycy5qcywgJ2xlYWZsZXQtZGlyZWN0aXZlJyd1aS51bmlxdWUnLCduZ1RhZ3NJbnB1dCcsKi9cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgTW9kYWxDb250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdNb2RhbENvbnRyb2xsZXJzJyk7XHJcbiAgICBNb2RhbENvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ2h3bU1vZGFsQ3RybCcsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGNvb2tpZXMnLCAnJGh0dHAnLCAnJHNjZScsICckdWliTW9kYWxJbnN0YW5jZScsICckdWliTW9kYWwnLCAnU0VSVkVSX1VSTCcsJ0ZJTEVfU1RBTVAnLCAnYWxsRHJvcGRvd25zJywgJ1NpdGVfRmlsZXMnLCAndGhpc0hXTScsICdhbGxTaXRlSFdNcycsICdod21BcHByb3ZhbCcsICdhZ2VuY3lMaXN0JywgJ2h3bVNpdGUnLCAnYWxsTWVtYmVycycsICdIV00nLCAnU09VUkNFJywgJ0ZJTEUnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRjb29raWVzLCAkaHR0cCwgJHNjZSwgJHVpYk1vZGFsSW5zdGFuY2UsICR1aWJNb2RhbCwgU0VSVkVSX1VSTCwgRklMRV9TVEFNUCwgYWxsRHJvcGRvd25zLCBTaXRlX0ZpbGVzLCB0aGlzSFdNLCBhbGxTaXRlSFdNcywgaHdtQXBwcm92YWwsIGFnZW5jeUxpc3QsIGh3bVNpdGUsIGFsbE1lbWJlcnMsIEhXTSwgU09VUkNFLCBGSUxFKSB7XHJcbiAgICAgICAgICAgIC8vZHJvcGRvd25zXHJcbiAgICAgICAgICAgICRzY29wZS52aWV3ID0geyBIV012YWw6ICdkZXRhaWwnIH07XHJcbiAgICAgICAgICAgICRzY29wZS5oID0geyBoT3BlbjogdHJ1ZSwgaEZpbGVPcGVuOiBmYWxzZSB9OyAvL2FjY29yZGlvbnNcclxuICAgICAgICAgICAgJHNjb3BlLmh3bVR5cGVMaXN0ID0gYWxsRHJvcGRvd25zWzBdO1xyXG4gICAgICAgICAgICAkc2NvcGUuaHdtUXVhbExpc3QgPSBhbGxEcm9wZG93bnNbMV07XHJcbiAgICAgICAgICAgICRzY29wZS5IRGF0dW1zTGlzdCA9IGFsbERyb3Bkb3duc1syXTtcclxuICAgICAgICAgICAgJHNjb3BlLmhDb2xsTUxpc3QgPSBhbGxEcm9wZG93bnNbM107XHJcbiAgICAgICAgICAgICRzY29wZS5WRGF0dW1zTGlzdCA9IGFsbERyb3Bkb3duc1s0XTtcclxuICAgICAgICAgICAgJHNjb3BlLnZDb2xsTUxpc3QgPSBhbGxEcm9wZG93bnNbNV07XHJcbiAgICAgICAgICAgICRzY29wZS5tYXJrZXJMaXN0ID0gYWxsRHJvcGRvd25zWzZdO1xyXG4gICAgICAgICAgICAkc2NvcGUuZXZlbnRMaXN0ID0gYWxsRHJvcGRvd25zWzddOyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAkc2NvcGUuZmlsZVR5cGVMaXN0ID0gYWxsRHJvcGRvd25zWzhdOyAvL3VzZWQgaWYgY3JlYXRpbmcvZWRpdGluZyBIV00gZmlsZSAgICBcclxuICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlcyA9IFNpdGVfRmlsZXMuZ2V0QWxsU2l0ZUZpbGVzKCk7XHJcbiAgICAgICAgICAgICRzY29wZS5IV01GaWxlcyA9IHRoaXNIV00gIT09IFwiZW1wdHlcIiA/ICRzY29wZS5hbGxTRmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChzZikgeyByZXR1cm4gc2YuaHdtX2lkID09IHRoaXNIV00uaHdtX2lkOyB9KSA6IFtdOy8vIGhvbGRlciBmb3IgaHdtIGZpbGVzIGFkZGVkXHJcbiAgICAgICAgICAgICRzY29wZS5od21JbWFnZUZpbGVzID0gJHNjb3BlLkhXTUZpbGVzLmZpbHRlcihmdW5jdGlvbiAoaGYpIHsgcmV0dXJuIGhmLmZpbGV0eXBlX2lkID09PSAxOyB9KTsgLy9pbWFnZSBmaWxlcyBmb3IgY2Fyb3VzZWxcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IGZhbHNlOyAvL2hpZGRlbiBmb3JtIHRvIGFkZCBmaWxlIHRvIGh3bVxyXG4gICAgICAgICAgICAkc2NvcGUudXNlclJvbGUgPSAkY29va2llcy5nZXQoJ3VzZXJzUm9sZScpO1xyXG4gICAgICAgICAgICAkc2NvcGUuRmxhZ01lbWJlciA9IFwiXCI7IC8vanVzdCBmb3Igc2hvdyBvbiBwYWdlXHJcbiAgICAgICAgICAgIC8vJHNjb3BlLlN1cnZleU1lbWJlciA9IFwiXCI7IC8vanVzdCBmb3Igc2hvdyBvbiBwYWdlXHJcbiAgICAgICAgICAgICRzY29wZS5zaG93RXZlbnRERCA9IGZhbHNlOyAvL3RvZ2dsZSB0byBzaG93L2hpZGUgZXZlbnQgZGQgKGFkbWluIG9ubHkpXHJcbiAgICAgICAgICAgICRzY29wZS5hZG1pbkNoYW5nZWQgPSB7fTsgLy93aWxsIGhvbGQgZXZlbnRfaWQgaWYgYWRtaW4gY2hhbmdlcyBpdC4gYXBwbHkgd2hlbiBQVVR0aW5nXHJcbiAgICAgICAgICAgICRzY29wZS5zZXJ2ZXJVUkwgPSBTRVJWRVJfVVJMOyAvL2NvbnN0YW50IHdpdGggc3RudGVzdC53aW0udXNncy5nb3YvU1ROU2VydmljZXMyIFxyXG4gICAgICAgICAgICAvL2J1dHRvbiBjbGljayB0byBzaG93IGV2ZW50IGRyb3Bkb3duIHRvIGNoYW5nZSBpdCBvbiBleGlzdGluZyBod20gKGFkbWluIG9ubHkpXHJcbiAgICAgICAgICAgICRzY29wZS5zaG93Q2hhbmdlRXZlbnRERCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93RXZlbnRERCA9ICEkc2NvcGUuc2hvd0V2ZW50REQ7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvL2NoYW5nZSBldmVudCA9IGFwcGx5IGl0IHRvIHRoZSAkc2NvcGUuRXZlbnROYW1lXHJcbiAgICAgICAgICAgICRzY29wZS5DaGFuZ2VFdmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5FdmVudE5hbWUgPSAkc2NvcGUuZXZlbnRMaXN0LmZpbHRlcihmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIGVsLmV2ZW50X2lkID09ICRzY29wZS5hZG1pbkNoYW5nZWQuZXZlbnRfaWQ7IH0pWzBdLmV2ZW50X25hbWU7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vICRzY29wZS5zZXNzaW9uRXZlbnQgPSAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudE5hbWUnKTtcclxuICAgICAgICAgICAgJHNjb3BlLkxvZ2dlZEluTWVtYmVyID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRjb29raWVzLmdldCgnbUlEJyk7IH0pWzBdO1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmFIV00gPSB7fTtcclxuICAgICAgICAgICAgJHNjb3BlLkRNUyA9IHt9O1xyXG4gICAgICAgICAgICAkc2NvcGUudGhpc0hXTXNpdGUgPSBod21TaXRlO1xyXG4gICAgICAgICAgICAkc2NvcGUuQXBwcm92YWxJbmZvID0ge307IC8vd2hlbiBpdCBnZXRzIGFwcHJvdmVkIG9yIGlmIGl0IGlzIGFwcHJvdmVkLCBwb3B1bGF0ZSB0aGlzIHdpdGggbWVtYmVyIGFuZCBkYXRlXHJcbiAgICAgICAgICAgIC8vRGF0ZXBpY2tlclxyXG4gICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tycyA9IHt9O1xyXG4gICAgICAgICAgICAkc2NvcGUub3BlbiA9IGZ1bmN0aW9uICgkZXZlbnQsIHdoaWNoKSB7XHJcbiAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tyc1t3aGljaF0gPSB0cnVlO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9jb252ZXJ0IGRlZyBtaW4gc2VjIHRvIGRlYyBkZWdyZWVzXHJcbiAgICAgICAgICAgIHZhciBhemltdXRoID0gZnVuY3Rpb24gKGRlZywgbWluLCBzZWMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhemkgPSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRlZyA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBhemkgPSAtMS4wICogZGVnICsgMS4wICogbWluIC8gNjAuMCArIDEuMCAqIHNlYyAvIDM2MDAuMDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKC0xLjAgKiBhemkpLnRvRml4ZWQoNSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhemkgPSAxLjAgKiBkZWcgKyAxLjAgKiBtaW4gLyA2MC4wICsgMS4wICogc2VjIC8gMzYwMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoYXppKS50b0ZpeGVkKDUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9jb252ZXJ0IGRlYyBkZWdyZWVzIHRvIGRtc1xyXG4gICAgICAgICAgICB2YXIgZGVnX3RvX2RtcyA9IGZ1bmN0aW9uIChkZWcpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkZWcgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVnID0gZGVnLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vbG9uZ2l0dWRlLCByZW1vdmUgdGhlIC0gc2lnblxyXG4gICAgICAgICAgICAgICAgICAgIGRlZyA9IGRlZy5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgZCA9IE1hdGguZmxvb3IoZGVnKTtcclxuICAgICAgICAgICAgICAgIHZhciBtaW5mbG9hdCA9IChkZWcgLSBkKSAqIDYwO1xyXG4gICAgICAgICAgICAgICAgdmFyIG0gPSBNYXRoLmZsb29yKG1pbmZsb2F0KTtcclxuICAgICAgICAgICAgICAgIHZhciBzID0gKChtaW5mbG9hdCAtIG0pICogNjApLnRvRml4ZWQoMyk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcIlwiICsgZCArIFwiOlwiICsgbSArIFwiOlwiICsgcyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL3RoZXkgY2hhbmdlZCByYWRpbyBidXR0b24gZm9yIGRtcyBkZWMgZGVnXHJcbiAgICAgICAgICAgICRzY29wZS5sYXRMb25nQ2hhbmdlID0gZnVuY3Rpb24gKCkgeyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY3JlYXRlT1JlZGl0SFdNID09ICdlZGl0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuaHdtQ29weS5kZWNEZWdPUmRtcyA9PSBcImRkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGV5IGNsaWNrZWQgRGVjIERlZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoJHNjb3BlLkRNUy5MQURlZyAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5ETVMuTEFNaW4gIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuRE1TLkxBU2VjICE9PSB1bmRlZmluZWQpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPRGVnICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLkRNUy5MT01pbiAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5ETVMuTE9TZWMgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb252ZXJ0IHdoYXQncyBoZXJlIGZvciBlYWNoIGxhdCBhbmQgbG9uZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bUNvcHkubGF0aXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTEFEZWcsICRzY29wZS5ETVMuTEFNaW4sICRzY29wZS5ETVMuTEFTZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bUNvcHkubG9uZ2l0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxPRGVnLCAkc2NvcGUuRE1TLkxPTWluLCAkc2NvcGUuRE1TLkxPU2VjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY2xlYXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2hvdyBtb2RhbCB0ZWxsaW5nIHRoZW0gdG8gcG9wdWxhdGUgYWxsIHRocmVlIChETVMpIGZvciBjb252ZXJzaW9uIHRvIHdvcmtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBETVNkZE1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5QbGVhc2UgcG9wdWxhdGUgYWxsIHRocmVlIGlucHV0cyBmb3IgY29udmVyc2lvbiBmcm9tIERNUyB0byBEZWNpbWFsIERlZ3JlZXMgdG8gd29yay48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRE1TZGRNb2RhbC5yZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ETVMuTEFEZWcgIT09IHVuZGVmaW5lZCB8fCAkc2NvcGUuRE1TLkxBTWluICE9PSB1bmRlZmluZWQgfHwgJHNjb3BlLkRNUy5MQVNlYyAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKFwiI0xhRGVnXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ETVMuTE9EZWcgIT09IHVuZGVmaW5lZCB8fCAkc2NvcGUuRE1TLkxPTWluICE9PSB1bmRlZmluZWQgfHwgJHNjb3BlLkRNUy5MT1NlYyAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkKFwiI0xvRGVnXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bUNvcHkuZGVjRGVnT1JkbXMgPSBcImRtc1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RoZXkgY2xpY2tlZCBkbXMgKGNvbnZlcnQgbGF0L2xvbmcgdG8gZG1zKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmh3bUNvcHkubGF0aXR1ZGVfZGQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhdERNUyA9IChkZWdfdG9fZG1zKCRzY29wZS5od21Db3B5LmxhdGl0dWRlX2RkKSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYWRETVNhcnJheSA9IGxhdERNUy5zcGxpdCgnOicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MQURlZyA9IGxhZERNU2FycmF5WzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MQU1pbiA9IGxhZERNU2FycmF5WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MQVNlYyA9IGxhZERNU2FycmF5WzJdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb25nRE1TID0gZGVnX3RvX2Rtcygkc2NvcGUuaHdtQ29weS5sb25naXR1ZGVfZGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvbmdETVNhcnJheSA9IGxvbmdETVMuc3BsaXQoJzonKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTE9EZWcgPSBsb25nRE1TYXJyYXlbMF0gKiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTE9NaW4gPSBsb25nRE1TYXJyYXlbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPU2VjID0gbG9uZ0RNU2FycmF5WzJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jbGVhclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bUNvcHkubGF0aXR1ZGVfZGQgPSB1bmRlZmluZWQ7ICRzY29wZS5od21Db3B5LmxvbmdpdHVkZV9kZCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jcmVhdGUgdmlld1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUhXTS5kZWNEZWdPUmRtcyA9PSBcImRkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGV5IGNsaWNrZWQgRGVjIERlZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoJHNjb3BlLkRNUy5MQURlZyAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5ETVMuTEFNaW4gIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuRE1TLkxBU2VjICE9PSB1bmRlZmluZWQpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPRGVnICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLkRNUy5MT01pbiAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5ETVMuTE9TZWMgIT09IHVuZGVmaW5lZCkgeyAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb252ZXJ0IHdoYXQncyBoZXJlIGZvciBlYWNoIGxhdCBhbmQgbG9uZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00ubGF0aXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTEFEZWcsICRzY29wZS5ETVMuTEFNaW4sICRzY29wZS5ETVMuTEFTZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00ubG9uZ2l0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxPRGVnLCAkc2NvcGUuRE1TLkxPTWluLCAkc2NvcGUuRE1TLkxPU2VjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY2xlYXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2hvdyBtb2RhbCB0ZWxsaW5nIHRoZW0gdG8gcG9wdWxhdGUgYWxsIHRocmVlIChETVMpIGZvciBjb252ZXJzaW9uIHRvIHdvcmtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBETVNNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+UGxlYXNlIHBvcHVsYXRlIGFsbCB0aHJlZSBpbnB1dHMgZm9yIGNvbnZlcnNpb24gZnJvbSBETVMgdG8gRGVjaW1hbCBEZWdyZWVzIHRvIHdvcmsuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIERNU01vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MQURlZyAhPT0gdW5kZWZpbmVkIHx8ICRzY29wZS5ETVMuTEFNaW4gIT09IHVuZGVmaW5lZCB8fCAkc2NvcGUuRE1TLkxBU2VjICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjTGFEZWdcIikuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MT0RlZyAhPT0gdW5kZWZpbmVkIHx8ICRzY29wZS5ETVMuTE9NaW4gIT09IHVuZGVmaW5lZCB8fCAkc2NvcGUuRE1TLkxPU2VjICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoXCIjTG9EZWdcIikuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5kZWNEZWdPUmRtcyA9IFwiZG1zXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhleSBjbGlja2VkIGRtcyAoY29udmVydCBsYXQvbG9uZyB0byBkbXMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUhXTS5sYXRpdHVkZV9kZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlX2xhdERNUyA9IChkZWdfdG9fZG1zKCRzY29wZS5hSFdNLmxhdGl0dWRlX2RkKSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjcmVhdGVfbGFkRE1TYXJyYXkgPSBjcmVhdGVfbGF0RE1TLnNwbGl0KCc6Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxBRGVnID0gY3JlYXRlX2xhZERNU2FycmF5WzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MQU1pbiA9IGNyZWF0ZV9sYWRETVNhcnJheVsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTEFTZWMgPSBjcmVhdGVfbGFkRE1TYXJyYXlbMl07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNyZWF0ZV9sb25nRE1TID0gZGVnX3RvX2Rtcygkc2NvcGUuYUhXTS5sb25naXR1ZGVfZGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNyZWF0ZV9sb25nRE1TYXJyYXkgPSBjcmVhdGVfbG9uZ0RNUy5zcGxpdCgnOicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MT0RlZyA9IGNyZWF0ZV9sb25nRE1TYXJyYXlbMF0gKiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTE9NaW4gPSBjcmVhdGVfbG9uZ0RNU2FycmF5WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MT1NlYyA9IGNyZWF0ZV9sb25nRE1TYXJyYXlbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NsZWFyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5sYXRpdHVkZV9kZCA9IHVuZGVmaW5lZDsgJHNjb3BlLmFIV00ubG9uZ2l0dWRlX2RkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9sYXQgbW9kYWwgXHJcbiAgICAgICAgICAgIHZhciBvcGVuTGF0TW9kYWwgPSBmdW5jdGlvbiAodywgbWVzc2FnZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxhdE1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD57e21lc3NhZ2V9fTwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2hvdzogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lc3NhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgJ3Nob3cnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSwgc2hvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2hvdyA9PSAncmFuZ2UnKSAkc2NvcGUubWVzc2FnZSA9ICdUaGUgTGF0aXR1ZGUgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDczLjAnO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNob3cgPT0gJ2Rpc3RhbmNlJykgJHNjb3BlLm1lc3NhZ2UgPSAnTGF0aXR1ZGUgcGxhY2VzIHRoZSBIV00gbW9yZSB0aGFuIDIzMiBmdCBmcm9tIHRoZSBzaXRlXFwncyBsYXRpdHVkZS4gUGxlYXNlIHZlcmlmeSBiZWZvcmUgY29udGludWluZy4nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgbGF0TW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGZpZWxkRm9jdXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodyA9PSAnbGF0bG9uZycpICQoXCIjbGF0aXR1ZGVfZGRcIikuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlICQoXCIjTGFEZWdcIikuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9sb25nIG1vZGFsXHJcbiAgICAgICAgICAgIHZhciBvcGVuTG9uZ01vZGFsID0gZnVuY3Rpb24gKHcsIG1lc3NhZ2UpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsb25nTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPnt7bWVzc2FnZX19PC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVzc2FnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCAnc2hvdycsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlLCBzaG93KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzaG93ID09ICdyYW5nZScpICRzY29wZS5tZXNzYWdlID0gJ1RoZSBMb25naXR1ZGUgbXVzdCBiZSBiZXR3ZWVuIC0xNzUuMCBhbmQgLTYwLjAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNob3cgPT0gJ2Rpc3RhbmNlJykgJHNjb3BlLm1lc3NhZ2UgPSAnTG9uZ2l0dWRlIHBsYWNlcyB0aGUgSFdNIG1vcmUgdGhhbiAyMzIgZnQgZnJvbSB0aGUgc2l0ZVxcJ3MgbG9uZ2l0dWRlLiBQbGVhc2UgdmVyaWZ5IGJlZm9yZSBjb250aW51aW5nJztcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGxvbmdNb2RhbC5yZXN1bHQudGhlbihmdW5jdGlvbiAoZmllbGRGb2N1cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3ID09ICdsYXRsb25nJykgJChcIiNsb25naXR1ZGVfZGRcIikuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlICQoXCIjTG9EZWdcIikuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9tYWtlIHN1cmUgbGF0L2xvbmcgYXJlIHJpZ2h0IG51bWJlciByYW5nZVxyXG4gICAgICAgICAgICAkc2NvcGUuY2hlY2tWYWx1ZSA9IGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZCA9PSAnZG1zJykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgdGhlIGRlZ3JlZSB2YWx1ZSAobGVzcyB0aGFuL2dyZWF0ZXIgdGhhbiBhbmQgaWYgaXQncyBhIG51bWJlclxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxBRGVnIDwgMCB8fCAkc2NvcGUuRE1TLkxBRGVnID4gNzMgfHwgKGlzTmFOKCRzY29wZS5ETVMuTEFEZWcpICYmICRzY29wZS5ETVMuTEFEZWcgIT09IHVuZGVmaW5lZCkgfHwgKGlzTmFOKCRzY29wZS5ETVMuTEFNaW4pICYmICRzY29wZS5ETVMuTEFNaW4gIT09IHVuZGVmaW5lZCkgfHwgKGlzTmFOKCRzY29wZS5ETVMuTEFTZWMpICYmICRzY29wZS5ETVMuTEFTZWMgIT09IHVuZGVmaW5lZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkxhdE1vZGFsKCdkbXMnLCAncmFuZ2UnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiBub3QgYSBudW1iZXIsIGNsZWFyIHRoZSBpbXB1dHMgdG8gdHJpZ2dlciB0aGUgdmFsaWRhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oJHNjb3BlLkRNUy5MQURlZykpICRzY29wZS5ETVMuTEFEZWcgPSB1bmRlZmluZWQ7ICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKCRzY29wZS5ETVMuTEFNaW4pKSAkc2NvcGUuRE1TLkxBTWluID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oJHNjb3BlLkRNUy5MQVNlYykpICRzY29wZS5ETVMuTEFTZWMgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jaGVjayBpZiBkaXN0YW5jZSBpcyBmYXJ0aGVyIHRoYW4gMjMyIGZ0IGZyb20gc2l0ZSdzIGxhdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGF0ID0gYXppbXV0aCgkc2NvcGUuRE1TLkxBRGVnLCAkc2NvcGUuRE1TLkxBTWluLCAkc2NvcGUuRE1TLkxBU2VjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhdERpcyA9IGh3bVNpdGUubGF0aXR1ZGVfZGQgLSBsYXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhsYXREaXMpID4gMC4wMDA1KSAgb3BlbkxhdE1vZGFsKCdkbXMnLCAnZGlzdGFuY2UnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ETVMuTE9EZWcgPCAtMTc1IHx8ICRzY29wZS5ETVMuTE9EZWcgPiAtNjAgfHwgKGlzTmFOKCRzY29wZS5ETVMuTE9EZWcpICYmICRzY29wZS5ETVMuTE9EZWcgIT09IHVuZGVmaW5lZCkgfHwgKGlzTmFOKCRzY29wZS5ETVMuTE9NaW4pICYmICRzY29wZS5ETVMuTE9NaW4gIT09IHVuZGVmaW5lZCkgfHwgKGlzTmFOKCRzY29wZS5ETVMuTE9TZWMpICYmICRzY29wZS5ETVMuTE9TZWMgIT09IHVuZGVmaW5lZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkxvbmdNb2RhbCgnZG1zJywgJ3JhbmdlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgbm90IGEgbnVtYmVyLCBjbGVhciB0aGUgaW1wdXRzIHRvIHRyaWdnZXIgdGhlIHZhbGlkYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKCRzY29wZS5ETVMuTE9EZWcpKSAkc2NvcGUuRE1TLkxPRGVnID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oJHNjb3BlLkRNUy5MT01pbikpICRzY29wZS5ETVMuTE9NaW4gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTigkc2NvcGUuRE1TLkxPU2VjKSkgJHNjb3BlLkRNUy5MT1NlYyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIGlmIGRpc3RhbmNlIGlzIGZhcnRoZXIgdGhhbiAyMzIgZnQgZnJvbSBzaXRlJ3MgbG9uZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG8gPSBhemltdXRoKCRzY29wZS5ETVMuTE9EZWcsICRzY29wZS5ETVMuTE9NaW4sICRzY29wZS5ETVMuTE9TZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9EaXMgPSBod21TaXRlLmxvbmdpdHVkZV9kZCAtIGxvO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoTWF0aC5hYnMobG9EaXMpID4gMC4wMDA1KSBvcGVuTG9uZ01vZGFsKCdkbXMnLCAnZGlzdGFuY2UnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgdGhlIGxhdGl0dWRlL2xvbmdpdHVkZVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBoID0gJHNjb3BlLnZpZXcuSFdNdmFsID09ICdlZGl0JyA/ICRzY29wZS5od21Db3B5IDogJHNjb3BlLmFIV007XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jaGVjayByYW5nZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoLmxhdGl0dWRlX2RkIDwgMCB8fCBoLmxhdGl0dWRlX2RkID4gNzMgfHwgaXNOYU4oaC5sYXRpdHVkZV9kZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkxhdE1vZGFsKCdsYXRsb25nJywgJ3JhbmdlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgbm90IGEgbnVtYmVyLCBjbGVhciB0aGUgaW1wdXRzIHRvIHRyaWdnZXIgdGhlIHZhbGlkYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKGgubGF0aXR1ZGVfZGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLmxhdGl0dWRlX2RkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jaGVjayBkaXN0YW5jZSBmcm9tIHNpdGUncyBsYXQvbG9uZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGF0RGlzdGFuY2UgPSBod21TaXRlLmxhdGl0dWRlX2RkIC0gaC5sYXRpdHVkZV9kZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE1hdGguYWJzKGxhdERpc3RhbmNlKSA+IDAuMDAwNSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkxhdE1vZGFsKCdsYXRsb25nJywgJ2Rpc3RhbmNlJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoLmxvbmdpdHVkZV9kZCA8IC0xNzUgfHwgaC5sb25naXR1ZGVfZGQgPiAtNjAgfHwgaXNOYU4oaC5sb25naXR1ZGVfZGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5Mb25nTW9kYWwoJ2xhdGxvbmcnLCAncmFuZ2UnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiBub3QgYSBudW1iZXIsIGNsZWFyIHRoZSBpbXB1dHMgdG8gdHJpZ2dlciB0aGUgdmFsaWRhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oaC5sb25naXR1ZGVfZGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLmxvbmdpdHVkZV9kZCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgZGlzdGFuY2UgZnJvbSBzaXRlJ3MgbGF0L2xvbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvbmdEaXN0YW5jZSA9IGh3bVNpdGUubG9uZ2l0dWRlX2RkIC0gaC5sb25naXR1ZGVfZGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChNYXRoLmFicyhsb25nRGlzdGFuY2UpID4gMC4wMDA1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuTG9uZ01vZGFsKCdsYXRsb25nJywgJ2Rpc3RhbmNlJyk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vICBsYXQvbG9uZyA9aXMgbnVtYmVyXHJcbiAgICAgICAgICAgICRzY29wZS5pc051bSA9IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0aGVFdmVudCA9IGV2dCB8fCB3aW5kb3cuZXZlbnQ7XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gdGhlRXZlbnQua2V5Q29kZSB8fCB0aGVFdmVudC53aGljaDtcclxuICAgICAgICAgICAgICAgIGlmIChrZXkgIT0gNDYgJiYga2V5ICE9IDQ1ICYmIGtleSA+IDMxICYmIChrZXkgPCA0OCB8fCBrZXkgPiA1NykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGVFdmVudC5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGVFdmVudC5wcmV2ZW50RGVmYXVsdCkgdGhlRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9od21fdW5jZXJ0YWludHkgdHlwZWQgaW4sIGNob29zZSBjb29yZXNwb25kaW5nIGh3bV9lbnZpcm9ubWVudFxyXG4gICAgICAgICAgICAkc2NvcGUuY2hvb3NlUXVhbGl0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBoID0gJHNjb3BlLnZpZXcuSFdNdmFsID09ICdlZGl0JyA/ICRzY29wZS5od21Db3B5IDogJHNjb3BlLmFIV007XHJcbiAgICAgICAgICAgICAgICBpZiAoaC5od21fdW5jZXJ0YWludHkgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IE51bWJlcihoLmh3bV91bmNlcnRhaW50eSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gIEV4Y2VsbGVudCAgICArLTAuMDUgICAgICAgMCAgICAgIC0gIDAuMDUwXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gIEdvb2QgICAgICAgICArLTAuMTAgICAgICAgMC4wNTEgIC0gIDAuMTAwXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gIEZhaXIgICAgICAgICArLTAuMjAgICAgICAgMC4xMDEgIC0gIDAuMjAwXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gIFBvb3IgICAgICAgICArLTAuNDAgICAgICAgMC4yMDEgIC0gIDAuNDAwXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gIFYgUG9vciAgICAgICA+IDAuNDAgICAgICAgMC40MDEgIC0gIGluZmluaXR5XHJcbiAgICAgICAgICAgICAgICAgICAgaC5od21fcXVhbGl0eV9pZCA9ICRzY29wZS5od21RdWFsTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGgpIHsgcmV0dXJuIGgubWluX3JhbmdlIDw9IHggJiYgaC5tYXhfcmFuZ2UgPj0geDsgfSlbMF0uaHdtX3F1YWxpdHlfaWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vaHdtIHF1YWxpdHkgY2hvc2VuIChvciBpdCBjaGFuZ2VkIGZyb20gYWJvdmUpLCBjaGVjayB0byBtYWtlIHN1cmUgaXQgaXMgY29uZ3J1ZW50IHdpdGggaW5wdXQgYWJvdmVcclxuICAgICAgICAgICAgJHNjb3BlLmNvbXBhcmVUb1VuY2VydGFpbnR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGggPSAkc2NvcGUudmlldy5IV012YWwgPT0gJ2VkaXQnID8gJHNjb3BlLmh3bUNvcHkgOiAkc2NvcGUuYUhXTTtcclxuICAgICAgICAgICAgICAgIGlmIChoLmh3bV91bmNlcnRhaW50eSAhPT0gXCJcIiAmJiBoLmh3bV91bmNlcnRhaW50eSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBOdW1iZXIoaC5od21fdW5jZXJ0YWludHkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaGluZ1F1YWxJZCA9ICRzY29wZS5od21RdWFsTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGgpIHsgcmV0dXJuIGgubWluX3JhbmdlIDw9IHggJiYgaC5tYXhfcmFuZ2UgPj0geDsgfSlbMF0uaHdtX3F1YWxpdHlfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGguaHdtX3F1YWxpdHlfaWQgIT09IG1hdGNoaW5nUXVhbElkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2hvdyB3YXJuaW5nIG1vZGFsIGFuZCBmb2N1cyBpbiB1bmNlcnRhaW50eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5jb25ncnVlbnRNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+V2FybmluZzwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+VGhlcmUgaXMgYSBtaXNtYXRjaCBiZXR3ZWVuIHRoZSBod20gcXVhbGl0eSBjaG9zZW4gYW5kIHRoZSBod20gdW5jZXJ0YWludHkgYWJvdmUuIFBsZWFzZSBjb3JyZWN0IHlvdXIgaHdtIHVuY2VydGFpbnR5LjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluY29uZ3J1ZW50TW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KFwiW25hbWU9J2h3bV91bmNlcnRhaW50eSddXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9jYWxsZWQgYSBmZXcgdGltZXMgdG8gZm9ybWF0IGp1c3QgdGhlIGRhdGUgKG5vIHRpbWUpXHJcbiAgICAgICAgICAgIHZhciBtYWtlQWRhdGUgPSBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFEYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgIGlmIChkICE9PSBcIlwiICYmIGQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcHJvdmlkZWQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIGFEYXRlID0gbmV3IERhdGUoZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgeWVhciA9IGFEYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW9udGggPSBhRGF0ZS5nZXRNb250aCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRheSA9ICgnMCcgKyBhRGF0ZS5nZXREYXRlKCkpLnNsaWNlKC0yKTtcclxuICAgICAgICAgICAgICAgIHZhciBtb250aE5hbWVzID0gW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGVXT3RpbWUgPSBuZXcgRGF0ZShtb250aE5hbWVzW21vbnRoXSArIFwiIFwiICsgZGF5ICsgXCIsIFwiICsgeWVhcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZVdPdGltZTtcclxuICAgICAgICAgICAgfTsvL2VuZCBtYWtlQWRhdGUoKVxyXG5cclxuICAgICAgICAgIC8qICAkc2NvcGUuZW5zdXJlaHdtTGFiZWxVbmlxdWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaCA9ICRzY29wZS52aWV3LkhXTXZhbCA9PSAnZWRpdCcgPyAkc2NvcGUuaHdtQ29weSA6ICRzY29wZS5hSFdNO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGFsbFNpdGVIV01zLCBmdW5jdGlvbiAoaHdtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGh3bS5od21fbGFiZWwgPT0gaC5od21fbGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3QgdW5pcXVlLCBjbGVhciBpdCBhbmQgc2hvdyB3YXJuaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGguaHdtX2xhYmVsID0gaC5od21faWQgIT09IHVuZGVmaW5lZCA/ICRzY29wZS5hSFdNLmh3bV9sYWJlbCA6ICdod20tJyArIChwYXJzZUZsb2F0KGFsbFNpdGVIV01zLmxlbmd0aCkgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVuaXF1ZU1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5XYXJuaW5nPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGUgaHdtIGxhYmVsIG11c3QgYmUgdW5pcXVlIGZyb20gYWxsIG90aGVyIGh3bXMgYXQgdGhpcyBzaXRlIGZvciB0aGlzIGV2ZW50LjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXF1ZU1vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChcIltuYW1lPSdod21fbGFiZWwnXVwiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgKi9cclxuICAgICAgICAgICAgaWYgKHRoaXNIV00gIT0gXCJlbXB0eVwiKSB7XHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gZXhpc3RpbmcgSFdNXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY3JlYXRlT1JlZGl0SFdNID0gJ2VkaXQnO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFIV00gPSBhbmd1bGFyLmNvcHkodGhpc0hXTSk7XHJcbiAgICAgICAgICAgICAgICAvL2dldCBhbGwgdGhlIG5hbWVzIGZvciBkZXRhaWxzIHZpZXdcclxuICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLmh3bV90eXBlID0gJHNjb3BlLmh3bVR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoaHQpIHsgcmV0dXJuIGh0Lmh3bV90eXBlX2lkID09ICRzY29wZS5hSFdNLmh3bV90eXBlX2lkOyB9KVswXS5od21fdHlwZTtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUhXTS5zdGlsbHdhdGVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uVHJhbnF1aWwgPSAkc2NvcGUuYUhXTS5zdGlsbHdhdGVyID4gMCA/ICdZZXMnIDogJ05vJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLk1hcmtlciA9ICRzY29wZS5hSFdNLm1hcmtlcl9pZCA+IDAgPyAkc2NvcGUubWFya2VyTGlzdC5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWFya2VyX2lkID09ICRzY29wZS5hSFdNLm1hcmtlcl9pZDsgfSlbMF0ubWFya2VyMSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uUXVhbGl0eSA9ICRzY29wZS5hSFdNLmh3bV9xdWFsaXR5X2lkID4gMCA/ICRzY29wZS5od21RdWFsTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGhxKSB7IHJldHVybiBocS5od21fcXVhbGl0eV9pZCA9PSAkc2NvcGUuYUhXTS5od21fcXVhbGl0eV9pZDsgfSlbMF0uaHdtX3F1YWxpdHkgOiAnJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLmhkYXR1bSA9ICRzY29wZS5hSFdNLmhkYXR1bV9pZCA+IDAgPyAkc2NvcGUuSERhdHVtc0xpc3QuZmlsdGVyKGZ1bmN0aW9uIChoZCkgeyByZXR1cm4gaGQuZGF0dW1faWQgPT0gJHNjb3BlLmFIV00uaGRhdHVtX2lkOyB9KVswXS5kYXR1bV9uYW1lIDogJyc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5oQ29sbGVjdE1ldGhvZCA9ICRzY29wZS5hSFdNLmhjb2xsZWN0X21ldGhvZF9pZCA+IDAgPyAkc2NvcGUuaENvbGxNTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGhjKSB7IHJldHVybiBoYy5oY29sbGVjdF9tZXRob2RfaWQgPT0gJHNjb3BlLmFIV00uaGNvbGxlY3RfbWV0aG9kX2lkOyB9KVswXS5oY29sbGVjdF9tZXRob2QgOiAnJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLnZEYXR1bSA9ICRzY29wZS5hSFdNLnZkYXR1bV9pZCA+IDAgPyAkc2NvcGUuVkRhdHVtc0xpc3QuZmlsdGVyKGZ1bmN0aW9uICh2ZCkgeyByZXR1cm4gdmQuZGF0dW1faWQgPT0gJHNjb3BlLmFIV00udmRhdHVtX2lkOyB9KVswXS5kYXR1bV9uYW1lIDogJyc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS52Q29sbGVjdE1ldGhvZCA9ICRzY29wZS5hSFdNLnZjb2xsZWN0X21ldGhvZF9pZCA+IDAgPyAkc2NvcGUudkNvbGxNTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHZjKSB7IHJldHVybiB2Yy52Y29sbGVjdF9tZXRob2RfaWQgPT0gJHNjb3BlLmFIV00udmNvbGxlY3RfbWV0aG9kX2lkOyB9KVswXS52Y29sbGVjdF9tZXRob2QgOiAnJztcclxuICAgICAgICAgICAgICAgIC8vZ2V0IGFwcHJvdmFsIGluZm8gaWYgYW55XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFIV00uYXBwcm92YWxfaWQgIT09IHVuZGVmaW5lZCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBIV00uZ2V0SFdNQXBwcm92YWwoeyBpZDogJHNjb3BlLmFIV00uaHdtX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5BcHByb3ZhbEluZm8uYXBwcm92YWxEYXRlID0gbmV3IERhdGUocmVzcG9uc2UuYXBwcm92YWxfZGF0ZSk7IC8vaW5jbHVkZSBub3RlIHRoYXQgaXQncyBkaXNwbGF5ZWQgaW4gdGhlaXIgbG9jYWwgdGltZSBidXQgc3RvcmVkIGluIFVUQ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQXBwcm92YWxJbmZvLk1lbWJlciA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChhbWVtKSB7IHJldHVybiBhbWVtLm1lbWJlcl9pZCA9PSByZXNwb25zZS5tZW1iZXJfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5od21Nb2RhbEhlYWRlciA9IFwiSFdNIEluZm9ybWF0aW9uXCI7XHJcbiAgICAgICAgICAgICAgICAvL2dldCB0aGlzIGh3bSdzIGV2ZW50IG5hbWVcclxuICAgICAgICAgICAgICAgICRzY29wZS5FdmVudE5hbWUgPSAkc2NvcGUuYUhXTS5ldmVudF9pZCA+IDAgPyAkc2NvcGUuZXZlbnRMaXN0LmZpbHRlcihmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5ldmVudF9pZCA9PSAkc2NvcGUuYUhXTS5ldmVudF9pZDsgfSlbMF0uZXZlbnRfbmFtZSA6ICdOb25lIHByb3ZpZGVkJztcclxuICAgICAgICAgICAgICAgIC8vZGF0ZSBmb3JtYXR0aW5nXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5mbGFnX2RhdGUgPSBtYWtlQWRhdGUoJHNjb3BlLmFIV00uZmxhZ19kYXRlKTsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvL2lmIHRoaXMgaXMgc3VydmV5ZWQsIGRhdGUgZm9ybWF0IGFuZCBnZXQgc3VydmV5IG1lbWJlcidzIG5hbWVcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUhXTS5zdXJ2ZXlfZGF0ZSAhPT0gbnVsbCAmJiAkc2NvcGUuYUhXTS5zdXJ2ZXlfZGF0ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uc3VydmV5X2RhdGUgPSBtYWtlQWRhdGUoJHNjb3BlLmFIV00uc3VydmV5X2RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5TdXJ2ZXlNZW1iZXIgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT0gJHNjb3BlLmFIV00uc3VydmV5X21lbWJlcl9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL2dldCBmbGFnZ2luZyBtZW1iZXIncyBuYW1lXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuRmxhZ01lbWJlciA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1lbWJlcl9pZCA9PSAkc2NvcGUuYUhXTS5mbGFnX21lbWJlcl9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gZXhpc3RpbmcgSFdNXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gbmV3IEhXTVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmh3bU1vZGFsSGVhZGVyID0gXCJDcmVhdGUgbmV3IEhXTVwiO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNyZWF0ZU9SZWRpdEhXTSA9ICdjcmVhdGUnO1xyXG4gICAgICAgICAgICAgICAgLy91c2Ugc2l0ZSdzIExBVCwgTE9ORywgd2F0ZXJib2R5LCBIREFUVU0sIEhDT0xMRUNUTUVUSE9ELCBzZXQgRkxBR0RBVEUgd2l0aCB0b2RheVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFIV00gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogJHNjb3BlLnRoaXNIV01zaXRlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRfaWQ6ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSxcclxuICAgICAgICAgICAgICAgICAgICBod21fZW52aXJvbm1lbnQ6ICdSaXZlcmluZScsXHJcbiAgICAgICAgICAgICAgICAgICAgYmFuazogJ04vQScsXHJcbiAgICAgICAgICAgICAgICAgICAgaHdtX2xhYmVsOiAnbm9fbGFiZWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0aWxsd2F0ZXI6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGVfZGQ6IGh3bVNpdGUubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlX2RkOiBod21TaXRlLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICB3YXRlcmJvZHk6IGh3bVNpdGUud2F0ZXJib2R5LFxyXG4gICAgICAgICAgICAgICAgICAgIGhkYXR1bV9pZDogaHdtU2l0ZS5oZGF0dW1faWQsXHJcbiAgICAgICAgICAgICAgICAgICAgaGNvbGxlY3RfbWV0aG9kX2lkOiBod21TaXRlLmhjb2xsZWN0X21ldGhvZF9pZCxcclxuICAgICAgICAgICAgICAgICAgICBmbGFnX2RhdGU6IG1ha2VBZGF0ZShcIlwiKSxcclxuICAgICAgICAgICAgICAgICAgICBmbGFnX21lbWJlcl9pZDogJHNjb3BlLkxvZ2dlZEluTWVtYmVyLm1lbWJlcl9pZFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5FdmVudE5hbWUgPSAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudE5hbWUnKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5GbGFnTWVtYmVyID0gJHNjb3BlLkxvZ2dlZEluTWVtYmVyO1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIG5ldyBIV01cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL3JhZGlvIGJ1dHRvbiBkZWZhdWx0c1xyXG4gICAgICAgICAgICAkc2NvcGUuYUhXTS5kZWNEZWdPUmRtcyA9ICdkZCc7XHJcbiAgICAgICAgICAgICRzY29wZS5hSFdNLkZUb3JDTSA9ICdmdCc7XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuY3JlYXRlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlZEhXTSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxBRGVnICE9PSB1bmRlZmluZWQpICRzY29wZS5hSFdNLmxhdGl0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxBRGVnLCAkc2NvcGUuRE1TLkxBTWluLCAkc2NvcGUuRE1TLkxBU2VjKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MT0RlZyAhPT0gdW5kZWZpbmVkKSAkc2NvcGUuYUhXTS5sb25naXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTE9EZWcsICRzY29wZS5ETVMuTE9NaW4sICRzY29wZS5ETVMuTE9TZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgdGhleSBlbnRlcmVkIGEgc3VydmV5IGRhdGUgb3IgZWxldmF0aW9uLCB0aGVuIHNldCBzdXJ2ZXkgbWVtYmVyIGFzIHRoZSBmbGFnIG1lbWJlciAoZmxhZ2dpbmcgYW5kIHN1cnZleWluZyBhdCBzYW1lIHRpbWVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFIV00uc3VydmV5X2RhdGUgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuYUhXTS5zdXJ2ZXlfZGF0ZSAhPT0gbnVsbClcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uc3VydmV5X21lbWJlcl9pZCA9ICRzY29wZS5mbGFnX21lbWJlcl9pZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hSFdNLkZUb3JDTSA9PSBcImNtXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uRlRvckNNID0gJ2Z0JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hSFdNLnVuY2VydGFpbnR5ICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS51bmNlcnRhaW50eSA9IHBhcnNlRmxvYXQoJHNjb3BlLmFIV00udW5jZXJ0YWludHkgLyAzMC40OCkudG9GaXhlZCg2KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUhXTS5lbGV2X2Z0ICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLmFIV00uZWxldl9mdCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSB0aGV5IGFkZGVkIHRoZSBzdXJ2ZXkgZGF0ZSBpZiB0aGV5IGFkZGVkIGFuIGVsZXZhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFIV00uc3VydmV5X2RhdGUgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLnN1cnZleV9kYXRlID0gbWFrZUFkYXRlKFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uc3VydmV5X21lbWJlcl9pZCA9ICRzY29wZS5hSFdNLmZsYWdfbWVtYmVyX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBIV00uc2F2ZSgkc2NvcGUuYUhXTSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZEhXTSA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkhXTSBjcmVhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VuZEJhY2sgPSBbY3JlYXRlZEhXTSwgJ2NyZWF0ZWQnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uoc2VuZEJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9Oy8vZW5kIGNyZWF0ZSgpXHJcblxyXG4gICAgICAgICAgICAvL2FwcHJvdmUgdGhpcyBod20gKGlmIGFkbWluIG9yIG1hbmFnZXIpXHJcbiAgICAgICAgICAgICRzY29wZS5hcHByb3ZlSFdNID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy90aGlzIGlzIHZhbGlkLCBzaG93IG1vZGFsIHRvIGNvbmZpcm0gdGhleSB3YW50IHRvIGFwcHJvdmUgaXRcclxuICAgICAgICAgICAgICAgIHZhciB0aGlzSFdNID0gJHNjb3BlLmFIV007XHJcbiAgICAgICAgICAgICAgICB2YXIgYXBwcm92ZU1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxkaXYgY2xhc3M9J21vZGFsLWhlYWRlcic+PGgzIGNsYXNzPSdtb2RhbC10aXRsZSc+QXBwcm92ZSBIV008L2gzPjwvZGl2PlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdtb2RhbC1ib2R5Jz48cD5BcmUgeW91IHJlYWR5IHRvIGFwcHJvdmUgdGhpcyBIV00/PC9wPjxwPlRoZSBzdXJ2ZXllZCBlbGV2YXRpb24gaXMge3thcHByb3ZlSFdNLmVsZXZfZnQgfHwgJy0tLSd9fTwvcD48cD5UaGUgaGVpZ2h0IGFib3ZlIGdyb3VuZCBpcyB7e2FwcHJvdmVIV00uaGVpZ2h0X2Fib3ZlX2duZCB8fCAnLS0tJ319PC9wPjwvZGl2PlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdtb2RhbC1mb290ZXInPjxidXR0b24gY2xhc3M9J2J0biBidG4tcHJpbWFyeScgbmctY2xpY2s9J2FwcHJvdmVJdCgpJz5BcHByb3ZlPC9idXR0b24+PGJ1dHRvbiBjbGFzcz0nYnRuIGJ0bi13YXJuaW5nJyBuZy1jbGljaz0nY2FuY2VsKCknPkNhbmNlbDwvYnV0dG9uPjwvZGl2PlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFwcHJvdmVIV00gPSB0aGlzSFdNO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHByb3ZlSXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSh0aGlzSFdNKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGFwcHJvdmVNb2RhbC5yZXN1bHQudGhlbihmdW5jdGlvbiAoaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICBIV00uYXBwcm92ZUhXTSh7IGlkOiBoLmh3bV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChhcHByb3ZhbFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGguYXBwcm92YWxfaWQgPSBhcHByb3ZhbFJlc3BvbnNlLmFwcHJvdmFsX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkhXTSBBcHByb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkFwcHJvdmFsSW5mby5hcHByb3ZhbERhdGUgPSBuZXcgRGF0ZShhcHByb3ZhbFJlc3BvbnNlLmFwcHJvdmFsX2RhdGUpOyAvL2luY2x1ZGUgbm90ZSB0aGF0IGl0J3MgZGlzcGxheWVkIGluIHRoZWlyIGxvY2FsIHRpbWUgYnV0IHN0b3JlZCBpbiBVVENcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkFwcHJvdmFsSW5mby5NZW1iZXIgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAoYW1lbSkgeyByZXR1cm4gYW1lbS5tZW1iZXJfaWQgPT0gYXBwcm92YWxSZXNwb25zZS5tZW1iZXJfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3ZhciBzZW5kQmFjayA9IFtoLCAndXBkYXRlZCddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHNlbmRCYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvL2FwcHJvdmUgdGhpcyBod20gKGlmIGFkbWluIG9yIG1hbmFnZXIpXHJcbiAgICAgICAgICAgICRzY29wZS51bkFwcHJvdmVIV00gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvL3RoaXMgaXMgdmFsaWQsIHNob3cgbW9kYWwgdG8gY29uZmlybSB0aGV5IHdhbnQgdG8gYXBwcm92ZSBpdFxyXG4gICAgICAgICAgICAgICAgdmFyIHRoaXNIV00gPSAkc2NvcGUuYUhXTTtcclxuICAgICAgICAgICAgICAgIHZhciB1bmFwcHJvdmVNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogXCI8ZGl2IGNsYXNzPSdtb2RhbC1oZWFkZXInPjxoMyBjbGFzcz0nbW9kYWwtdGl0bGUnPlJlbW92ZSBBcHByb3ZhbDwvaDM+PC9kaXY+XCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIjxkaXYgY2xhc3M9J21vZGFsLWJvZHknPjxwPkFyZSB5b3Ugc3VyZSB5b3Ugd2FuIHRvIHVuYXBwcm92ZSB0aGlzIEhXTT88L3A+PC9kaXY+XCIgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIjxkaXYgY2xhc3M9J21vZGFsLWZvb3Rlcic+PGJ1dHRvbiBjbGFzcz0nYnRuIGJ0bi1wcmltYXJ5JyBuZy1jbGljaz0ndW5BcHByb3ZlSXQoKSc+VW5hcHByb3ZlPC9idXR0b24+PGJ1dHRvbiBjbGFzcz0nYnRuIGJ0bi13YXJuaW5nJyBuZy1jbGljaz0nY2FuY2VsKCknPkNhbmNlbDwvYnV0dG9uPjwvZGl2PlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFwcHJvdmVIV00gPSB0aGlzSFdNO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51bkFwcHJvdmVJdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHRoaXNIV00pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdW5hcHByb3ZlTW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgSFdNLnVuQXBwcm92ZUhXTSh7IGlkOiBoLmh3bV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaC5hcHByb3ZhbF9pZCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiSFdNIFVuYXBwcm92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5BcHByb3ZhbEluZm8gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgc2VuZEJhY2sgPSBbaCwgJ3VwZGF0ZWQnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8kdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZW5kQmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbG9naWMgZm9yIGNhbmNlbFxyXG4gICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIHZhciBmb3JtYXRIV00gPSBmdW5jdGlvbiAoaCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZvcm1hdHRlZEhXTSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBod21faWQ6IGguaHdtX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIHdhdGVyYm9keTogaC53YXRlcmJvZHksXHJcbiAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogaC5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50X2lkOiBoLmV2ZW50X2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIGh3bV90eXBlX2lkOiBoLmh3bV90eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIGh3bV9xdWFsaXR5X2lkOiBoLmh3bV9xdWFsaXR5X2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIGh3bV9sb2NhdGlvbmRlc2NyaXB0aW9uOiBoLmh3bV9sb2NhdGlvbmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlX2RkOiBoLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZV9kZDogaC5sb25naXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgc3VydmV5X2RhdGU6IGguc3VydmV5X2RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgZWxldl9mdDogaC5lbGV2X2Z0LFxyXG4gICAgICAgICAgICAgICAgICAgIHZkYXR1bV9pZDogaC52ZGF0dW1faWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdmNvbGxlY3RfbWV0aG9kX2lkOiBoLnZjb2xsZWN0X21ldGhvZF9pZCxcclxuICAgICAgICAgICAgICAgICAgICBiYW5rOiBoLmJhbmssXHJcbiAgICAgICAgICAgICAgICAgICAgYXBwcm92YWxfaWQ6IGguYXBwcm92YWxfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyX2lkOiBoLm1hcmtlcl9pZCxcclxuICAgICAgICAgICAgICAgICAgICBoZWlnaHRfYWJvdmVfZ25kOiBoLmhlaWdodF9hYm92ZV9nbmQsXHJcbiAgICAgICAgICAgICAgICAgICAgaGNvbGxlY3RfbWV0aG9kX2lkOiBoLmhjb2xsZWN0X21ldGhvZF9pZCxcclxuICAgICAgICAgICAgICAgICAgICBwZWFrX3N1bW1hcnlfaWQ6IGgucGVha19zdW1tYXJ5X2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIGh3bV9ub3RlczogaC5od21fbm90ZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgaHdtX2Vudmlyb25tZW50OiBoLmh3bV9lbnZpcm9ubWVudCxcclxuICAgICAgICAgICAgICAgICAgICBmbGFnX2RhdGU6IGguZmxhZ19kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0aWxsd2F0ZXI6IGguc3RpbGx3YXRlcixcclxuICAgICAgICAgICAgICAgICAgICBoZGF0dW1faWQ6IGguaGRhdHVtX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIGZsYWdfbWVtYmVyX2lkOiBoLmZsYWdfbWVtYmVyX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1cnZleV9tZW1iZXJfaWQ6IGguc3VydmV5X21lbWJlcl9pZCxcclxuICAgICAgICAgICAgICAgICAgICB1bmNlcnRhaW50eTogaC51bmNlcnRhaW50eSxcclxuICAgICAgICAgICAgICAgICAgICBod21fdW5jZXJ0YWludHk6IGguaHdtX3VuY2VydGFpbnR5LFxyXG4gICAgICAgICAgICAgICAgICAgIGh3bV9sYWJlbDogaC5od21fbGFiZWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZm9ybWF0dGVkSFdNO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvL3NhdmUgYUhXTVxyXG4gICAgICAgICAgICAkc2NvcGUuc2F2ZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZWRIV00gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MQURlZyAhPT0gdW5kZWZpbmVkKSAkc2NvcGUuaHdtQ29weS5sYXRpdHVkZV9kZCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MQURlZywgJHNjb3BlLkRNUy5MQU1pbiwgJHNjb3BlLkRNUy5MQVNlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ETVMuTE9EZWcgIT09IHVuZGVmaW5lZCkgJHNjb3BlLmh3bUNvcHkubG9uZ2l0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxPRGVnLCAkc2NvcGUuRE1TLkxPTWluLCAkc2NvcGUuRE1TLkxPU2VjKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFkbWluQ2hhbmdlZC5ldmVudF9pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWRtaW4gY2hhbmdlZCB0aGUgZXZlbnQgZm9yIHRoaXMgaHdtLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bUNvcHkuZXZlbnRfaWQgPSAkc2NvcGUuYWRtaW5DaGFuZ2VkLmV2ZW50X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvL2lmIHRoZXkgYWRkZWQgYSBzdXJ2ZXkgZGF0ZSwgYXBwbHkgc3VydmV5IG1lbWJlciBhcyBsb2dnZWQgaW4gbWVtYmVyXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5od21Db3B5LnN1cnZleV9kYXRlICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLmh3bUNvcHkuc3VydmV5X21lbWJlcl9pZCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtQ29weS5zdXJ2ZXlfbWVtYmVyX2lkID0gJGNvb2tpZXMuZ2V0KCdtSUQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5od21Db3B5LkZUb3JDTSA9PSBcImNtXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bUNvcHkuRlRvckNNID0gJ2Z0JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5od21Db3B5LnVuY2VydGFpbnR5ICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtQ29weS51bmNlcnRhaW50eSA9IHBhcnNlRmxvYXQoJHNjb3BlLmh3bUNvcHkudW5jZXJ0YWludHkgLyAzMC40OCkudG9GaXhlZCg2KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuaHdtQ29weS5lbGV2X2Z0ICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLmh3bUNvcHkuZWxldl9mdCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSB0aGV5IGFkZGVkIHRoZSBzdXJ2ZXkgZGF0ZSBpZiB0aGV5IGFkZGVkIGFuIGVsZXZhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmh3bUNvcHkuc3VydmV5X2RhdGUgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5od21Db3B5LnN1cnZleV9kYXRlID0gbWFrZUFkYXRlKFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5od21Db3B5LnN1cnZleV9tZW1iZXJfaWQgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5od21Db3B5LnN1cnZleV9tZW1iZXJfaWQgPSAkY29va2llcy5nZXQoJ21JRCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2xlYW5IV00gPSBmb3JtYXRIV00oJHNjb3BlLmh3bUNvcHkpO1xyXG4gICAgICAgICAgICAgICAgICAgIEhXTS51cGRhdGUoeyBpZDogY2xlYW5IV00uaHdtX2lkIH0sIGNsZWFuSFdNKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkhXTSB1cGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTSA9IHJlc3BvbnNlOyB0aGlzSFdNID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZ2V0IGFsbCB0aGUgbmFtZXMgZm9yIGRldGFpbHMgdmlld1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5od21fdHlwZSA9ICRzY29wZS5od21UeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGh0KSB7IHJldHVybiBodC5od21fdHlwZV9pZCA9PSAkc2NvcGUuYUhXTS5od21fdHlwZV9pZDsgfSlbMF0uaHdtX3R5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUhXTS5zdGlsbHdhdGVyICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5UcmFucXVpbCA9ICRzY29wZS5hSFdNLnN0aWxsd2F0ZXIgPiAwID8gJ1llcycgOiAnTm8nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLk1hcmtlciA9ICRzY29wZS5hSFdNLm1hcmtlcl9pZCA+IDAgPyAkc2NvcGUubWFya2VyTGlzdC5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWFya2VyX2lkID09ICRzY29wZS5hSFdNLm1hcmtlcl9pZDsgfSlbMF0ubWFya2VyMSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5RdWFsaXR5ID0gJHNjb3BlLmFIV00uaHdtX3F1YWxpdHlfaWQgPiAwID8gJHNjb3BlLmh3bVF1YWxMaXN0LmZpbHRlcihmdW5jdGlvbiAoaHEpIHsgcmV0dXJuIGhxLmh3bV9xdWFsaXR5X2lkID09ICRzY29wZS5hSFdNLmh3bV9xdWFsaXR5X2lkOyB9KVswXS5od21fcXVhbGl0eSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5oZGF0dW0gPSAkc2NvcGUuYUhXTS5oZGF0dW1faWQgPiAwID8gJHNjb3BlLkhEYXR1bXNMaXN0LmZpbHRlcihmdW5jdGlvbiAoaGQpIHsgcmV0dXJuIGhkLmRhdHVtX2lkID09ICRzY29wZS5hSFdNLmhkYXR1bV9pZDsgfSlbMF0uZGF0dW1fbmFtZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5oQ29sbGVjdE1ldGhvZCA9ICRzY29wZS5hSFdNLmhjb2xsZWN0X21ldGhvZF9pZCA+IDAgPyAkc2NvcGUuaENvbGxNTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGhjKSB7IHJldHVybiBoYy5oY29sbGVjdF9tZXRob2RfaWQgPT0gJHNjb3BlLmFIV00uaGNvbGxlY3RfbWV0aG9kX2lkOyB9KVswXS5oY29sbGVjdF9tZXRob2QgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00udkRhdHVtID0gJHNjb3BlLmFIV00udmRhdHVtX2lkID4gMCA/ICRzY29wZS5WRGF0dW1zTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHZkKSB7IHJldHVybiB2ZC5kYXR1bV9pZCA9PSAkc2NvcGUuYUhXTS52ZGF0dW1faWQ7IH0pWzBdLmRhdHVtX25hbWUgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00udkNvbGxlY3RNZXRob2QgPSAkc2NvcGUuYUhXTS52Y29sbGVjdF9tZXRob2RfaWQgPiAwID8gJHNjb3BlLnZDb2xsTUxpc3QuZmlsdGVyKGZ1bmN0aW9uICh2YykgeyByZXR1cm4gdmMudmNvbGxlY3RfbWV0aG9kX2lkID09ICRzY29wZS5hSFdNLnZjb2xsZWN0X21ldGhvZF9pZDsgfSlbMF0udmNvbGxlY3RfbWV0aG9kIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLmZsYWdfZGF0ZSA9IG1ha2VBZGF0ZSgkc2NvcGUuYUhXTS5mbGFnX2RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lzIGl0IGFwcHJvdmVkP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaHdtQXBwcm92YWwgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkFwcHJvdmFsSW5mby5hcHByb3ZhbERhdGUgPSBuZXcgRGF0ZShod21BcHByb3ZhbC5hcHByb3ZhbF9kYXRlKTsgLy9pbmNsdWRlIG5vdGUgdGhhdCBpdCdzIGRpc3BsYXllZCBpbiB0aGVpciBsb2NhbCB0aW1lIGJ1dCBzdG9yZWQgaW4gVVRDXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQXBwcm92YWxJbmZvLk1lbWJlciA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChhbWVtKSB7IHJldHVybiBhbWVtLm1lbWJlcl9pZCA9PSBod21BcHByb3ZhbC5tZW1iZXJfaWQ7IH0pWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmIHRoaXMgaXMgc3VydmV5ZWQsIGRhdGUgZm9ybWF0IGFuZCBnZXQgc3VydmV5IG1lbWJlcidzIG5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hSFdNLnN1cnZleV9kYXRlICE9PSBudWxsICYmICRzY29wZS5hSFdNLnN1cnZleV9kYXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLnN1cnZleV9kYXRlID0gbWFrZUFkYXRlKCRzY29wZS5hSFdNLnN1cnZleV9kYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TdXJ2ZXlNZW1iZXIgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT0gJHNjb3BlLmFIV00uc3VydmV5X21lbWJlcl9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZ2V0IGZsYWdnaW5nIG1lbWJlcidzIG5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkZsYWdNZW1iZXIgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT0gJHNjb3BlLmFIV00uZmxhZ19tZW1iZXJfaWQ7IH0pWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bUNvcHkgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnZpZXcuSFdNdmFsID0gJ2RldGFpbCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFyIHNlbmRCYWNrID0gW3VwZGF0ZWRIV00sICd1cGRhdGVkJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uoc2VuZEJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9Oy8vZW5kIHNhdmUoKVxyXG5cclxuICAgICAgICAgICAgLy9kZWxldGUgYUhXTVxyXG4gICAgICAgICAgICAkc2NvcGUuZGVsZXRlSFdNID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy9UT0RPOjogRGVsZXRlIHRoZSBmaWxlcyBmb3IgdGhpcyBod20gdG9vIG9yIHJlYXNzaWduIHRvIHRoZSBTaXRlPz8gU2VydmljZXMgb3IgY2xpZW50IGhhbmRsaW5nP1xyXG4gICAgICAgICAgICAgICAgdmFyIERlbGV0ZU1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5hSFdNO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJIV01cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIERlbGV0ZU1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGh3bVRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgIEhXTS5kZWxldGUoeyBpZDogaHdtVG9SZW1vdmUuaHdtX2lkIH0sIGh3bVRvUmVtb3ZlKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkhXTUZpbGVzID0gW107IC8vY2xlYXIgb3V0IGh3bUZpbGVzIGZvciB0aGlzIGh3bVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtSW1hZ2VGaWxlcyA9IFtdOyAvL2NsZWFyIG91dCBpbWFnZSBmaWxlcyBmb3IgdGhpcyBod21cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3cgcmVtb3ZlIGFsbCB0aGVzZSBmaWxlcyBmcm9tIFNpdGVGaWxlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9ICRzY29wZS5hbGxTRmlsZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAobC0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFsbFNGaWxlc1tsXS5od21faWQgPT0gaHdtVG9SZW1vdmUuaHdtX2lkKSAkc2NvcGUuYWxsU0ZpbGVzLnNwbGljZShsLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuYWxsU0ZpbGVzKTsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiSFdNIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW5kQmFjayA9IFtcImRlXCIsICdkZWxldGVkJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHNlbmRCYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9jYW5jZWxcclxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsgLy8gbG9hZGluZy4uIFxyXG4gICAgICAgICAgICAgICAgdmFyIHNlbmRCYWNrID0gJHNjb3BlLmFIV007XHJcbiAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZW5kQmFjayk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2VkaXQgYnV0dG9uIGNsaWNrZWQuIG1ha2UgY29weSBvZiBod20gXHJcbiAgICAgICAgICAgICRzY29wZS53YW5uYUVkaXRIV00gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudmlldy5IV012YWwgPSAnZWRpdCc7IFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmh3bUNvcHkgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLmFIV00pO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmh3bUNvcHkuZGVjRGVnT1JkbXMgPSAnZGQnOyAkc2NvcGUuaHdtQ29weS5GVG9yQ00gPSAnZnQnO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsSFdNRWRpdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS52aWV3LkhXTXZhbCA9ICdkZXRhaWwnO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmh3bUNvcHkgPSBbXTsgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRtaW5DaGFuZ2VkID0ge307XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuRXZlbnROYW1lID0gJHNjb3BlLmV2ZW50TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUuZXZlbnRfaWQgPT0gJHNjb3BlLmFIV00uZXZlbnRfaWQ7IH0pWzBdLmV2ZW50X25hbWU7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyNyZWdpb24gRklMRSBTVFVGRlxyXG4gICAgICAgICAgICAkc2NvcGUuc3RhbXAgPSBGSUxFX1NUQU1QLmdldFN0YW1wKCk7ICRzY29wZS5maWxlSXRlbUV4aXN0cyA9IHRydWU7XHJcbiAgICAgICAgICAgIC8vbmVlZCB0byByZXVwbG9hZCBmaWxlSXRlbSB0byB0aGlzIGV4aXN0aW5nIGZpbGUgT1IgQ2hhbmdlIG91dCBleGlzdGluZyBmaWxlSXRlbSBmb3IgbmV3IG9uZVxyXG4gICAgICAgICAgICAkc2NvcGUuc2F2ZUZpbGVVcGxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmlsZVBhcnRzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIEZpbGVFbnRpdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9pZDogJHNjb3BlLmFGaWxlLmZpbGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICRzY29wZS5hRmlsZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJHNjb3BlLmFGaWxlLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwaG90b19kaXJlY3Rpb246ICRzY29wZS5hRmlsZS5waG90b19kaXJlY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlX2RkOiAkc2NvcGUuYUZpbGUubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZV9kZDogJHNjb3BlLmFGaWxlLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9kYXRlOiAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBod21faWQ6ICRzY29wZS5hRmlsZS5od21faWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6ICRzY29wZS5hRmlsZS5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxldHlwZV9pZDogJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VfaWQ6ICRzY29wZS5hRmlsZS5zb3VyY2VfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6ICRzY29wZS5hRmlsZS5wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhX2ZpbGVfaWQ6ICRzY29wZS5hRmlsZS5kYXRhX2ZpbGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnRfaWQ6ICRzY29wZS5hRmlsZS5pbnN0cnVtZW50X2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwaG90b19kYXRlOiAkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNfbndpczogJHNjb3BlLmFGaWxlLmlzX253aXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdGl2ZV9wb2ludF9pZDogJHNjb3BlLmFGaWxlLm9iamVjdGl2ZV9wb2ludF9pZFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgRmlsZTogJHNjb3BlLmFGaWxlLkZpbGUxICE9PSB1bmRlZmluZWQgPyAkc2NvcGUuYUZpbGUuRmlsZTEgOiAkc2NvcGUuYUZpbGUuRmlsZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vbmVlZCB0byBwdXQgdGhlIGZpbGVQYXJ0cyBpbnRvIGNvcnJlY3QgZm9ybWF0IGZvciBwb3N0XHJcbiAgICAgICAgICAgICAgICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICAgICAgICAgIGZkLmFwcGVuZChcIkZpbGVFbnRpdHlcIiwgSlNPTi5zdHJpbmdpZnkoZmlsZVBhcnRzLkZpbGVFbnRpdHkpKTtcclxuICAgICAgICAgICAgICAgIGZkLmFwcGVuZChcIkZpbGVcIiwgZmlsZVBhcnRzLkZpbGUpO1xyXG4gICAgICAgICAgICAgICAgLy9ub3cgUE9TVCBpdCAoZmlsZXBhcnRzKVxyXG4gICAgICAgICAgICAgICAgRklMRS51cGxvYWRGaWxlKGZkKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChmcmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgVXBsb2FkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNyYyA9ICRzY29wZS5zZXJ2ZXJVUkwgKyAnL0ZpbGVzLycgKyAkc2NvcGUuYUZpbGUuZmlsZV9pZCArICcvSXRlbScgKyBGSUxFX1NUQU1QLmdldFN0YW1wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgRklMRV9TVEFNUC5zZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGFtcCA9IEZJTEVfU1RBTVAuZ2V0U3RhbXAoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLkZpbGUxLnR5cGUuaW5kZXhPZihcImltYWdlXCIpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzUGhvdG8gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSAkc2NvcGUuaXNQaG90byA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5uYW1lID0gZnJlc3BvbnNlLm5hbWU7ICRzY29wZS5hRmlsZS5wYXRoID0gZnJlc3BvbnNlLnBhdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5GaWxlMSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5GaWxlID0gJHNjb3BlLmFGaWxlLkZpbGUxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuRmlsZTEgPSB1bmRlZmluZWQ7IC8vcHV0IGl0IGFzIGZpbGUgYW5kIHJlbW92ZSBpdCBmcm9tIDFcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZnJlc3BvbnNlLmZpbGVCZWxvbmdzVG8gPSBcIkhXTSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkhXTUZpbGVzLnNwbGljZSgkc2NvcGUuZXhpc3RGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5IV01GaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyZXNwb25zZS5maWxldHlwZV9pZCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtSW1hZ2VGaWxlcy5zcGxpY2UoJHNjb3BlLmV4aXN0RmlsZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bUltYWdlRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzWyRzY29wZS5hbGxTRmlsZUluZGV4XSA9IGZyZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuYWxsU0ZpbGVzKTsgLy91cGRhdGVzIHRoZSBmaWxlIGxpc3Qgb24gdGhlIHNpdGVkYXNoYm9hcmRcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlSXRlbUV4aXN0cyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGZpbGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9zaG93IGEgbW9kYWwgd2l0aCB0aGUgbGFyZ2VyIGltYWdlIGFzIGEgcHJldmlldyBvbiB0aGUgcGhvdG8gZmlsZSBmb3IgdGhpcyBod21cclxuICAgICAgICAgICAgJHNjb3BlLnNob3dJbWFnZU1vZGFsID0gZnVuY3Rpb24gKGltYWdlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW1hZ2VNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkltYWdlIEZpbGUgUHJldmlldzwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxpbWcgbmctc3JjPVwie3tzZXRTUkN9fVwiIC8+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbWFnZUlkID0gaW1hZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXRTUkMgPSBTRVJWRVJfVVJMICsgJy9GaWxlcy8nICsgJHNjb3BlLmltYWdlSWQgKyAnL0l0ZW0nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdtZCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy93YW50IHRvIGFkZCBvciBlZGl0IGZpbGVcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlID0gZnVuY3Rpb24gKGZpbGUpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5maWxlVHlwZXMgPSAkc2NvcGUuZmlsZVR5cGVMaXN0O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFnZW5jaWVzID0gYWdlbmN5TGlzdDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5leGlzdEZpbGVJbmRleCA9IC0xOyAkc2NvcGUuZXhpc3RJTUdGaWxlSW5kZXggPSAtMTsgJHNjb3BlLmFsbFNGaWxlSW5kZXggPSAtMTsgLy9pbmRleGVzIGZvciBzcGxpY2UvY2hhbmdlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUgPSB7fTsgLy9ob2xkZXIgZm9yIGZpbGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlID0ge307IC8vaG9sZGVyIGZvciBmaWxlIHNvdXJjZVxyXG4gICAgICAgICAgICAgICAgLy9IV00gd2lsbCBub3QgaGF2ZSBkYXRhZmlsZSBcclxuICAgICAgICAgICAgICAgIGlmIChmaWxlICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9lZGl0IGh3bSBmaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4aXN0RmlsZUluZGV4ID0gJHNjb3BlLkhXTUZpbGVzLmluZGV4T2YoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlSW5kZXggPSAkc2NvcGUuYWxsU0ZpbGVzLmluZGV4T2YoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4aXN0SU1HRmlsZUluZGV4ID0gJHNjb3BlLmh3bUltYWdlRmlsZXMubGVuZ3RoID4gMCA/ICRzY29wZS5od21JbWFnZUZpbGVzLmluZGV4T2YoZmlsZSkgOiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUgPSBhbmd1bGFyLmNvcHkoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgRklMRS5nZXRGaWxlSXRlbSh7IGlkOiAkc2NvcGUuYUZpbGUuZmlsZV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZUl0ZW1FeGlzdHMgPSByZXNwb25zZS5MZW5ndGggPiAwID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5maWxlVHlwZSA9ICRzY29wZS5maWxlVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChmdCkgeyByZXR1cm4gZnQuZmlsZXR5cGVfaWQgPT0gJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkOyB9KVswXS5maWxldHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAvL2RldGVybWluZSBpZiBleGlzdGluZyBmaWxlIGlzIGEgcGhvdG8gKGV2ZW4gaWYgdHlwZSBpcyBub3QgKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUubmFtZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmSSA9ICRzY29wZS5hRmlsZS5uYW1lLmxhc3RJbmRleE9mKFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVFeHQgPSAkc2NvcGUuYUZpbGUubmFtZS5zdWJzdHJpbmcoZkkgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVFeHQubWF0Y2goLyhqcGd8SlBHfGpwZWd8SlBFR3xwbmd8UE5HfGdpZnxHSUYpJC8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNQaG90byA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSAkc2NvcGUuaXNQaG90byA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3JjID0gJHNjb3BlLnNlcnZlclVSTCArICcvRmlsZXMvJyArICRzY29wZS5hRmlsZS5maWxlX2lkICsgJy9JdGVtJyArIEZJTEVfU1RBTVAuZ2V0U3RhbXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlID0gbmV3IERhdGUoJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSk7IC8vZGF0ZSBmb3IgdmFsaWRpdHkgb2YgZm9ybSBvbiBQVVRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUgIT09IHVuZGVmaW5lZCkgJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUgPSBuZXcgRGF0ZSgkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSk7IC8vZGF0ZSBmb3IgdmFsaWRpdHkgb2YgZm9ybSBvbiBQVVRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZS5zb3VyY2VfaWQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU09VUkNFLnF1ZXJ5KHsgaWQ6IGZpbGUuc291cmNlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlID0gcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlLkZVTExuYW1lID0gJHNjb3BlLmFTb3VyY2Uuc291cmNlX25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWdlbmN5TmFtZUZvckNhcCA9ICRzY29wZS5hZ2VuY2llcy5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuYWdlbmN5X2lkID09ICRzY29wZS5hU291cmNlLmFnZW5jeV9pZDsgfSlbMF0uYWdlbmN5X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0vL2VuZCBpZiBzb3VyY2VcclxuICAgICAgICAgICAgICAgIH0vL2VuZCBleGlzdGluZyBmaWxlXHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlID0gbmV3IERhdGUoKTsgJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRjb29raWVzLmdldCgnbUlEJyk7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlLkZVTExuYW1lID0gJHNjb3BlLmFTb3VyY2UuZm5hbWUgKyBcIiBcIiArICRzY29wZS5hU291cmNlLmxuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY3lOYW1lRm9yQ2FwID0gJHNjb3BlLmFnZW5jaWVzLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gJHNjb3BlLmFTb3VyY2UuYWdlbmN5X2lkOyB9KVswXS5hZ2VuY3lfbmFtZTtcclxuICAgICAgICAgICAgICAgIH0gLy9lbmQgbmV3IGZpbGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudXBkYXRlQWdlbmN5Rm9yQ2FwdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY3lOYW1lRm9yQ2FwID0gJHNjb3BlLmFnZW5jaWVzLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gJHNjb3BlLmFTb3VyY2UuYWdlbmN5X2lkOyB9KVswXS5hZ2VuY3lfbmFtZTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vY3JlYXRlIHRoaXMgbmV3IGZpbGVcclxuICAgICAgICAgICAgJHNjb3BlLmNyZWF0ZUZpbGUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5IV01maWxlSXNVcGxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoZVNvdXJjZSA9IHsgc291cmNlX25hbWU6ICRzY29wZS5hU291cmNlLkZVTExuYW1lLCBhZ2VuY3lfaWQ6ICRzY29wZS5hU291cmNlLmFnZW5jeV9pZCB9O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcG9zdCBzb3VyY2UgZmlyc3QgdG8gZ2V0IHNvdXJjZV9pZFxyXG4gICAgICAgICAgICAgICAgICAgIFNPVVJDRS5zYXZlKHRoZVNvdXJjZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5maWxldHlwZV9pZCAhPT0gOCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90aGVuIFBPU1QgZmlsZVBhcnRzIChTZXJ2aWNlcyBwb3B1bGF0ZSBQQVRIKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVQYXJ0cyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlRW50aXR5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlX2lkOiAkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICRzY29wZS5hRmlsZS5GaWxlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVfZGF0ZTogJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9fZGF0ZTogJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAkc2NvcGUuYUZpbGUuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6ICRzY29wZS50aGlzSFdNc2l0ZS5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VfaWQ6IHJlc3BvbnNlLnNvdXJjZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9fZGlyZWN0aW9uOiAkc2NvcGUuYUZpbGUucGhvdG9fZGlyZWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZV9kZDogJHNjb3BlLmFGaWxlLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGVfZGQ6ICRzY29wZS5hRmlsZS5sb25naXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh3bV9pZDogJHNjb3BlLmFIV00uaHdtX2lkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlOiAkc2NvcGUuYUZpbGUuRmlsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbmVlZCB0byBwdXQgdGhlIGZpbGVQYXJ0cyBpbnRvIGNvcnJlY3QgZm9ybWF0IGZvciBwb3N0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZkLmFwcGVuZChcIkZpbGVFbnRpdHlcIiwgSlNPTi5zdHJpbmdpZnkoZmlsZVBhcnRzLkZpbGVFbnRpdHkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZkLmFwcGVuZChcIkZpbGVcIiwgZmlsZVBhcnRzLkZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3cgUE9TVCBpdCAoZmlsZXBhcnRzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRklMRS51cGxvYWRGaWxlKGZkKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChmcmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgVXBsb2FkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJlc3BvbnNlLmZpbGVCZWxvbmdzVG8gPSBcIkhXTSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkhXTUZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuYWxsU0ZpbGVzKTsgLy91cGRhdGVzIHRoZSBmaWxlIGxpc3Qgb24gdGhlIHNpdGVkYXNoYm9hcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnJlc3BvbnNlLmZpbGV0eXBlX2lkID09PSAxKSAkc2NvcGUuaHdtSW1hZ2VGaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IGZhbHNlOyAkc2NvcGUuSFdNZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5IV01maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciB1cGxvYWRpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuc291cmNlX2lkID0gcmVzcG9uc2Uuc291cmNlX2lkOyAkc2NvcGUuYUZpbGUuc2l0ZV9pZCA9ICRzY29wZS50aGlzSFdNc2l0ZS5zaXRlX2lkOyAkc2NvcGUuYUZpbGUuaHdtX2lkID0gJHNjb3BlLmFIV00uaHdtX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRklMRS5zYXZlKCRzY29wZS5hRmlsZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoZnJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJMaW5rIHNhdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyZXNwb25zZS5maWxlQmVsb25nc1RvID0gXCJIV00gRmlsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5IV01GaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2l0ZV9GaWxlcy5zZXRBbGxTaXRlRmlsZXMoJHNjb3BlLmFsbFNGaWxlcyk7IC8vdXBkYXRlcyB0aGUgZmlsZSBsaXN0IG9uIHRoZSBzaXRlZGFzaGJvYXJkICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVGb3JtID0gZmFsc2U7ICRzY29wZS5IV01maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkhXTWZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBmaWxlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfS8vZW5kIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSFdNZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIGNyZWF0aW5nIFNvdXJjZSBpbmZvOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgc291cmNlLnNhdmUoKSAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgdmFsaWRcclxuICAgICAgICAgICAgfTsvL2VuZCBjcmVhdGUoKVxyXG5cclxuICAgICAgICAgICAgLy91cGRhdGUgdGhpcyBmaWxlXHJcbiAgICAgICAgICAgICRzY29wZS5zYXZlRmlsZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkhXTWZpbGVJc1VwbG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9vbmx5IHBob3RvIG9yIG90aGVyIGZpbGUgdHlwZSAobm8gZGF0YSBmaWxlIGhlcmUpXHJcbiAgICAgICAgICAgICAgICAgICAgLy9wdXQgc291cmNlIG9yIGRhdGFmaWxlLCBwdXQgZmlsZVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3aGF0a2luZCA9ICRzY29wZS5hRmlsZS5maWxlQmVsb25nc1RvO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU291cmNlLnNvdXJjZV9pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBvc3QgYWdhaW4gKGlmIG5vIGNoYW5nZSwgd2lsbCByZXR1cm4gZXhpc3Rpbmcgb25lLiBpZiBlZGl0ZWQsIHdpbGwgY3JlYXRlIGEgbmV3IG9uZSAtLWluc3RlYWQgb2YgZWRpdGluZyBhbGwgZmlsZXMgdGhhdCB1c2UgdGhpcyBzb3VyY2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGVTb3VyY2UgPSB7IHNvdXJjZV9uYW1lOiAkc2NvcGUuYVNvdXJjZS5GVUxMbmFtZSwgYWdlbmN5X2lkOiAkc2NvcGUuYVNvdXJjZS5hZ2VuY3lfaWQgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU09VUkNFLnNhdmUodGhlU291cmNlKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9TT1VSQ0UudXBkYXRlKHsgaWQ6ICRzY29wZS5hU291cmNlLnNvdXJjZV9pZCB9LCAkc2NvcGUuYVNvdXJjZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuc291cmNlX2lkID0gcmVzcG9uc2Uuc291cmNlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRklMRS51cGRhdGUoeyBpZDogJHNjb3BlLmFGaWxlLmZpbGVfaWQgfSwgJHNjb3BlLmFGaWxlKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChmaWxlUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlUmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiSFdNIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSFdNRmlsZXNbJHNjb3BlLmV4aXN0RmlsZUluZGV4XSA9IGZpbGVSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzWyRzY29wZS5hbGxTRmlsZUluZGV4XSA9IGZpbGVSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuYWxsU0ZpbGVzKTsgLy91cGRhdGVzIHRoZSBmaWxlIGxpc3Qgb24gdGhlIHNpdGVkYXNoYm9hcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVGb3JtID0gZmFsc2U7ICRzY29wZS5IV01maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkhXTWZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBmaWxlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5IV01maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTsgLy9Mb2FkaW5nLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgdmFsaWRcclxuICAgICAgICAgICAgfTsvL2VuZCBzYXZlKClcclxuXHJcbiAgICAgICAgICAgIC8vZGVsZXRlIHRoaXMgZmlsZVxyXG4gICAgICAgICAgICAkc2NvcGUuZGVsZXRlRmlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBEZWxldGVNb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkc2NvcGUuYUZpbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIERlbGV0ZU1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGZpbGVUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICBGSUxFLmRlbGV0ZSh7IGlkOiBmaWxlVG9SZW1vdmUuZmlsZV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5IV01GaWxlcy5zcGxpY2UoJHNjb3BlLmV4aXN0RmlsZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlcy5zcGxpY2UoJHNjb3BlLmFsbFNGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtSW1hZ2VGaWxlcy5zcGxpY2UoJHNjb3BlLmV4aXN0SU1HRmlsZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2l0ZV9GaWxlcy5zZXRBbGxTaXRlRmlsZXMoJHNjb3BlLmFsbFNGaWxlcyk7IC8vdXBkYXRlcyB0aGUgZmlsZSBsaXN0IG9uIHRoZSBzaXRlZGFzaGJvYXJkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTsvL2VuZCBEZWxldGVNb2RhbC5yZXN1bHQudGhlblxyXG4gICAgICAgICAgICB9Oy8vZW5kIGRlbGV0ZSgpXHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsRmlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UgPSB7fTtcclxuICAgICAgICAgICAgICAgIC8vICAkc2NvcGUuZGF0YWZpbGUgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8jZW5kcmVnaW9uIEZJTEUgU1RVRkZcclxuICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICB9XSk7IC8vZW5kIEhXTVxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAvKiBjb250cm9sbGVycy5qcywgJ2xlYWZsZXQtZGlyZWN0aXZlJyd1aS51bmlxdWUnLCduZ1RhZ3NJbnB1dCcsKi9cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU1ROQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQ29udHJvbGxlcnMnKTtcclxuXHJcbiAgICBTVE5Db250cm9sbGVycy5jb250cm9sbGVyKCdod21DdHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckbG9jYXRpb24nLCAnJHN0YXRlJywgJyRodHRwJywgJyR1aWJNb2RhbCcsICckZmlsdGVyJywgJyR0aW1lb3V0JywgJ3RoaXNTaXRlJywgJ3RoaXNTaXRlSFdNcycsICdIV01fU2VydmljZScsICdhbGxBZ2VuY2llcycsICdhbGxIV01UeXBlcycsICdhbGxIV01RdWFsaXRpZXMnLCAnYWxsSG9yRGF0dW1zJywgJ2FsbE1hcmtlcnMnLCAnYWxsSG9yQ29sbE1ldGhvZHMnLCAnYWxsVmVydERhdHVtcycsICdhbGxWZXJ0Q29sTWV0aG9kcycsICdhbGxFdmVudHMnLCAnYWxsRmlsZVR5cGVzJywgJ01FTUJFUicsICdIV00nLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRjb29raWVzLCAkbG9jYXRpb24sICRzdGF0ZSwgJGh0dHAsICR1aWJNb2RhbCwgJGZpbHRlciwgJHRpbWVvdXQsIHRoaXNTaXRlLCB0aGlzU2l0ZUhXTXMsIEhXTV9TZXJ2aWNlLCBhbGxBZ2VuY2llcywgYWxsSFdNVHlwZXMsIGFsbEhXTVF1YWxpdGllcywgYWxsSG9yRGF0dW1zLCBhbGxNYXJrZXJzLCBhbGxIb3JDb2xsTWV0aG9kcywgYWxsVmVydERhdHVtcywgYWxsVmVydENvbE1ldGhvZHMsIGFsbEV2ZW50cywgYWxsRmlsZVR5cGVzLCBNRU1CRVIsIEhXTSkge1xyXG4gICAgICAgICAgICBpZiAoJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSB1bmRlZmluZWQgfHwgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYXV0aCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vZ2xvYmFsIHZhcnNcclxuICAgICAgICAgICAgICAgICRzY29wZS5od21Db3VudCA9IHsgdG90YWw6IHRoaXNTaXRlSFdNcy5sZW5ndGggfTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZUhXTXMgPSB0aGlzU2l0ZUhXTXM7XHJcbiAgICAgICAgICAgICAgICBIV01fU2VydmljZS5zZXRBbGxTaXRlSFdNcygkc2NvcGUuU2l0ZUhXTXMpO1xyXG4gICAgICAgICAgICAgICAgLy8gd2F0Y2ggZm9yIHRoZSBzZXNzaW9uIGV2ZW50IHRvIGNoYW5nZSBhbmQgdXBkYXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50TmFtZScpOyB9LCBmdW5jdGlvbiAobmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vzc2lvbkV2ZW50TmFtZSA9IG5ld1ZhbHVlICE9PSB1bmRlZmluZWQgPyBuZXdWYWx1ZSA6IFwiQWxsIEV2ZW50c1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXNzaW9uRXZlbnRFeGlzdHMgPSAkc2NvcGUuc2Vzc2lvbkV2ZW50TmFtZSAhPSBcIkFsbCBFdmVudHNcIiA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZUhXTXMgPSB0aGlzU2l0ZUhXTXMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7IHJldHVybiBoLmV2ZW50X2lkID09ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5od21Db3VudCA9IHsgdG90YWw6ICRzY29wZS5TaXRlSFdNcy5sZW5ndGggfTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZUhXTXMgPSB0aGlzU2l0ZUhXTXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5od21Db3VudCA9IHsgdG90YWw6ICRzY29wZS5TaXRlSFdNcy5sZW5ndGggfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0hXTU1vZGFsID0gZnVuY3Rpb24gKEhXTWNsaWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaHdtRmlsZVR5cGVzID0gYWxsRmlsZVR5cGVzLmZpbHRlcihmdW5jdGlvbiAoaGZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vUGhvdG8gKDEpLCBIaXN0b3JpYyAoMyksIEZpZWxkIFNoZWV0cyAoNCksIExldmVsIE5vdGVzICg1KSwgT3RoZXIgKDcpLCBMaW5rICg4KSwgU2tldGNoICgxMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhmdC5maWxldHlwZSA9PT0gJ1Bob3RvJyB8fCBoZnQuZmlsZXR5cGUgPT09ICdIaXN0b3JpYyBDaXRhdGlvbicgfHwgaGZ0LmZpbGV0eXBlID09PSAnRmllbGQgU2hlZXRzJyB8fCBoZnQuZmlsZXR5cGUgPT09ICdMZXZlbCBOb3RlcycgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhmdC5maWxldHlwZSA9PT0gJ090aGVyJyB8fCBoZnQuZmlsZXR5cGUgPT09ICdMaW5rJyB8fCBoZnQuZmlsZXR5cGUgPT09ICdTa2V0Y2gnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXNzQWxsTGlzdHMgPSBbYWxsSFdNVHlwZXMsIGFsbEhXTVF1YWxpdGllcywgYWxsSG9yRGF0dW1zLCBhbGxIb3JDb2xsTWV0aG9kcywgYWxsVmVydERhdHVtcywgYWxsVmVydENvbE1ldGhvZHMsIGFsbE1hcmtlcnMsIGFsbEV2ZW50cywgaHdtRmlsZVR5cGVzXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXhDbGlja2VkID0gJHNjb3BlLlNpdGVIV01zLmluZGV4T2YoSFdNY2xpY2tlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IHRydWU7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdIV01tb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2h3bU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnbGcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Q2xhc3M6ICdyZXAtZGlhbG9nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxEcm9wZG93bnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhc3NBbGxMaXN0cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNIV006IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEhXTWNsaWNrZWQgIT09IDAgPyBIV01jbGlja2VkOiBcImVtcHR5XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxTaXRlSFdNczogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5TaXRlSFdNcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh3bUFwcHJvdmFsOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChIV01jbGlja2VkICE9PSAwICYmIChIV01jbGlja2VkLmFwcHJvdmFsX2lkICE9PSB1bmRlZmluZWQgJiYgSFdNY2xpY2tlZC5hcHByb3ZhbF9pZCA+IDApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSFdNLmdldEhXTUFwcHJvdmFsKHsgaWQ6IEhXTWNsaWNrZWQuaHdtX2lkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBod21TaXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzU2l0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnZW5jeUxpc3Q6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFsbEFnZW5jaWVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsTWVtYmVyczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1FTUJFUi5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoY3JlYXRlZEhXTSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lzIHRoZXJlIGEgbmV3IEhXTSBvciBqdXN0IGNsb3NlZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXRlZEhXTVsxXT09ICdjcmVhdGVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVIV01zLnB1c2goY3JlYXRlZEhXTVswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBIV01fU2VydmljZS5zZXRBbGxTaXRlSFdNcygkc2NvcGUuU2l0ZUhXTXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bUNvdW50LnRvdGFsID0gJHNjb3BlLlNpdGVIV01zLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXRlZEhXTVsxXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RoaXMgaXMgZnJvbSBlZGl0IC0tIHJlZnJlc2ggcGFnZT9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdXBkYXRlIHRoZSBsaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXhDbGlja2VkID0gJHNjb3BlLlNpdGVIV01zLmluZGV4T2YoSFdNY2xpY2tlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZUhXTXNbaW5kZXhDbGlja2VkXSA9IGNyZWF0ZWRIV007XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBIV01fU2VydmljZS5zZXRBbGxTaXRlSFdNcygkc2NvcGUuU2l0ZUhXTXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcmVhdGVkSFdNWzFdPT0gJ2RlbGV0ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXhDbGlja2VkMSA9ICRzY29wZS5TaXRlSFdNcy5pbmRleE9mKEhXTWNsaWNrZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVIV01zLnNwbGljZShpbmRleENsaWNrZWQxLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5od21Db3VudC50b3RhbCA9ICRzY29wZS5TaXRlSFdNcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBIV01fU2VydmljZS5zZXRBbGxTaXRlSFdNcygkc2NvcGUuU2l0ZUhXTXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9OyAvL2VuZCBzaG93SFdNTW9kYWwgZnVuY3Rpb25cclxuICAgICAgICAgICAgfS8vZW5kIHN0bmNyZWRzIGdvb2RcclxuICAgICAgICB9XSk7XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFNUTkNvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NUTkNvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgU1ROQ29udHJvbGxlcnMuY29udHJvbGxlcignaGlzdG9yaWNIV01DdHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckbG9jYXRpb24nLCAnJGh0dHAnLCAnJGZpbHRlcicsICckdWliTW9kYWwnLCAnU0lURScsICdIV00nLCAnT0JKRUNUSVZFX1BPSU5UJywgJ0dFT0NPREUnLCAndGhpc0V2ZW50JywgJ0hEYXR1bXMnLCAnSENvbGxlY3RNZXRocycsICdTdGF0ZXMnLCAnQ291bnRpZXMnLCAnT1BUeXBlcycsICdWRGF0dW1zJywgJ0hUeXBlcycsICdIV01RdWFscycsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICRsb2NhdGlvbiwgJGh0dHAsICRmaWx0ZXIsICR1aWJNb2RhbCwgU0lURSwgSFdNLCBPQkpFQ1RJVkVfUE9JTlQsIEdFT0NPREUsIHRoaXNFdmVudCwgSERhdHVtcywgSENvbGxlY3RNZXRocywgU3RhdGVzLCBDb3VudGllcywgT1BUeXBlcywgVkRhdHVtcywgSFR5cGVzLCBIV01RdWFscykge1xyXG4gICAgICAgICAgICBpZiAoJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSB1bmRlZmluZWQgfHwgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYXV0aCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy9nbG9iYWwgdmFyc1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vZGl2IGhvbGRpbmcgbG9hZGVyIGFuZCBkeW5hbWljIGFuZCBtYXggZm9yIHByb2dyZXNzIGJhclxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmR5bmFtaWMgPSAwOyAkc2NvcGUubWF4ID0gMDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5ob3RJbnN0YW5jZTsgIC8vc2QgICBsYXQgbG9uZyBoZCAgaGNtICB3YXQgIEdTICAgc3QgICBjbyAgIG9wdCAgb3BuICBkZXMgIHZkYSAgb3BkICBod210IGVudiAgIHF1YSAgZmxhZ1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvbHVtbldpZHRocyA9IFsxNDAsIDc2LCA4NCwgMjIwLCAyMjAsIDEwMCwgMTUwLCAxMjAsIDEyMCwgMTgwLCAxMjAsIDE0MCwgMTQwLCAxMjAsIDE0MCwgMTQwLCAxNDAsIDEyMF07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQ2hhbmdlcyA9IFtdOyAvL3RyYWNrIGNoYW5nZXMgbWFkZSB0byBjb21wYXJlIGZvciBzYXZpbmdcclxuICAgICAgICAgICAgICAgICRzY29wZS5pbnZhbGlkcyA9IFtdOyAvL3N0b3JlIHdoZW4gaW52YWxpZCB0aHJvd25cclxuICAgICAgICAgICAgICAgICRzY29wZS5ldmVudCA9IHRoaXNFdmVudDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5oRGF0dW1MaXN0ID0gSERhdHVtczsgJHNjb3BlLmhEYXR1bUFycmF5ID0gW107XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaENvbGxlY3RMaXN0ID0gSENvbGxlY3RNZXRoczsgJHNjb3BlLmhjb2xsZWN0QXJyYXkgPSBbXTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZUxpc3QgPSBTdGF0ZXM7IC8vVE9ETyBNYWtlIHRoaXMgaW50ZXJhY3RpdmUgd2l0aCBjb3VudGllcyBcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZUFycmF5ID0gW107XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY291bnR5TGlzdCA9IENvdW50aWVzOyAkc2NvcGUuY291bnR5QXJyYXkgPSBbXTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5vcFR5cGVMaXN0ID0gT1BUeXBlczsgJHNjb3BlLm9wVHlwZUFycmF5ID0gW107XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudkRhdHVtTGlzdCA9IFZEYXR1bXM7ICRzY29wZS52RGF0dW1BcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmh3bVR5cGVMaXN0ID0gSFR5cGVzOyAkc2NvcGUuaHdtVHlwZUFycmF5ID0gW107XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaHdtRW52aXJMaXN0ID0gWydDb2FzdGFsJywgJ1JpdmVyaW5lJ107XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaHdtUXVhbGl0eUxpc3QgPSBIV01RdWFsczsgJHNjb3BlLmh3bVF1YWxpdHlBcnJheSA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5oaXN0b3JpY0hXTXMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gZm9ybWF0IGRyb3Bkb3ducyBmcm9tIG9iamVjdCBhcnJheSB0byBzdHJpbmcgYXJyYXlcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuaERhdHVtTGlzdCwgZnVuY3Rpb24gKGwpIHsgJHNjb3BlLmhEYXR1bUFycmF5LnB1c2gobC5kYXR1bV9uYW1lKTsgfSk7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmhDb2xsZWN0TGlzdCwgZnVuY3Rpb24gKGwpIHsgJHNjb3BlLmhjb2xsZWN0QXJyYXkucHVzaChsLmhjb2xsZWN0X21ldGhvZCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5zdGF0ZUxpc3QsIGZ1bmN0aW9uIChsKSB7ICRzY29wZS5zdGF0ZUFycmF5LnB1c2gobC5zdGF0ZV9uYW1lKTsgfSk7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmNvdW50eUxpc3QsIGZ1bmN0aW9uIChsKSB7ICRzY29wZS5jb3VudHlBcnJheS5wdXNoKGwuY291bnR5X25hbWUpOyB9KTtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUub3BUeXBlTGlzdCwgZnVuY3Rpb24gKGwpIHsgJHNjb3BlLm9wVHlwZUFycmF5LnB1c2gobC5vcF90eXBlKTsgfSk7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLnZEYXR1bUxpc3QsIGZ1bmN0aW9uIChsKSB7ICRzY29wZS52RGF0dW1BcnJheS5wdXNoKGwuZGF0dW1fYWJicmV2aWF0aW9uKTsgfSk7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmh3bVR5cGVMaXN0LCBmdW5jdGlvbiAobCkgeyAkc2NvcGUuaHdtVHlwZUFycmF5LnB1c2gobC5od21fdHlwZSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5od21RdWFsaXR5TGlzdCwgZnVuY3Rpb24gKGwpIHsgJHNjb3BlLmh3bVF1YWxpdHlBcnJheS5wdXNoKGwuaHdtX3F1YWxpdHkpOyB9KTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgICAgICAgICAgICAgIC8vR2V0IHN0YXRlIGNvdW50eSBidXR0b24gY2xpY2tlZFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmdldFN0YXRlQ28gPSBmdW5jdGlvbiAoYywgcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByb3dWYWx1ZXMgPSAkc2NvcGUuaG90SW5zdGFuY2UuZ2V0RGF0YUF0Um93KHIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgocm93VmFsdWVzWzFdICE9PSBcIlwiICYmIHJvd1ZhbHVlc1sxXSAhPT0gbnVsbCkgJiYgKHJvd1ZhbHVlc1syXSAhPT0gXCJcIiAmJiByb3dWYWx1ZXNbMl0gIT09IG51bGwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSB0cnVlOyAvL2xvYWRpbmcuLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgR0VPQ09ERS5nZXRBZGRyZXNzUGFydHMoeyBMb25naXR1ZGU6IHJvd1ZhbHVlc1syXSwgTGF0aXR1ZGU6IHJvd1ZhbHVlc1sxXSB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UucmVzdWx0Lmdlb2dyYXBoaWVzLkNvdW50aWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGVGSVBTID0gcmVzcG9uc2UucmVzdWx0Lmdlb2dyYXBoaWVzLkNvdW50aWVzWzBdLlNUQVRFO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb3VudHlOYW1lID0gcmVzcG9uc2UucmVzdWx0Lmdlb2dyYXBoaWVzLkNvdW50aWVzWzBdLk5BTUU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNTdGF0ZUlEID0gJHNjb3BlLmNvdW50eUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnN0YXRlX2ZpcCA9PSBzdGF0ZUZJUFM7IH0pWzBdLnN0YXRlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzU3RhdGUgPSAkc2NvcGUuc3RhdGVMaXN0LmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcy5zdGF0ZV9pZCA9PSB0aGlzU3RhdGVJRDsgfSlbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzU3RhdGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaG90SW5zdGFuY2Uuc2V0RGF0YUF0Q2VsbChyLCA3LCB0aGlzU3RhdGUuc3RhdGVfbmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZUNvdW50eUxpc3QgPSAkc2NvcGUuY291bnR5TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuc3RhdGVfaWQgPT0gdGhpc1N0YXRlLnN0YXRlX2lkOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvdW50eUFycmF5ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzdGF0ZUNvdW50eUxpc3QsIGZ1bmN0aW9uIChsKSB7ICRzY29wZS5jb3VudHlBcnJheS5wdXNoKGwuY291bnR5X25hbWUpOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmhvdEluc3RhbmNlLnNldENlbGxNZXRhKHIsIDgsIFwic291cmNlXCIsICRzY29wZS5jb3VudHlBcnJheSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ob3RJbnN0YW5jZS5zZXREYXRhQXRDZWxsKHIsIDgsIGNvdW50eU5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJUaGUgTGF0aXR1ZGUvTG9uZ2l0dWRlIGRpZCBub3QgcmV0dXJuIGEgcmVjb2duaXplZCBzdGF0ZS4gUGxlYXNlIGNob29zZSBvbmUgZnJvbSB0aGUgZHJvcGRvd24uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIGdldHRpbmcgYWRkcmVzcyBsb2NhdGlvbi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RoZXkgZGlkIG5vdCB0eXBlIGEgbGF0L2xvbmcgZmlyc3QuLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW1wdHlMYXRMb25nTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5QbGVhc2UgcHJvdmlkZSBhIExhdGl0dWRlIGFuZCBMb25naXR1ZGUgYmVmb3JlIGNsaWNraW5nIEdldCBTdGF0ZS9Db3VudHk8L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgaWYgcm93IHZhbHVlcyBhcmUgdGhlcmUgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTsvL2VuZCBnZXRTdGF0ZUNvKClcclxuICAgICAgICAgICAgICAgICRzY29wZS5VcGRhdGVDb3VudGllcyA9IGZ1bmN0aW9uICh0aGVDaGFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc1N0YXRlID0gJHNjb3BlLnN0YXRlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc3RhdGVfbmFtZSA9PSB0aGVDaGFuZ2VbM107IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZUNvdW50eUxpc3QgPSAkc2NvcGUuY291bnR5TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuc3RhdGVfaWQgPT0gdGhpc1N0YXRlLnN0YXRlX2lkOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY291bnR5QXJyYXkgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc3RhdGVDb3VudHlMaXN0LCBmdW5jdGlvbiAobCkgeyAkc2NvcGUuY291bnR5QXJyYXkucHVzaChsLmNvdW50eV9uYW1lKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmhvdEluc3RhbmNlLnNldENlbGxNZXRhKHRoZUNoYW5nZVswXSwgOCwgXCJzb3VyY2VcIiwgJHNjb3BlLmNvdW50eUFycmF5KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVuZGVyZXJzXHJcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWlyZWRNb2RhbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVxTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+VGhpcyBmaWVsZCBpcyByZXF1aXJlZC48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubGF0VmFsaWRhdG9yID0gZnVuY3Rpb24gKHZhbHVlLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbnVtYmVyIGFuZCA+IDBcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAwIHx8IGlzTmFOKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGF0TW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5MYXRpdHVkZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwLjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkTW9kYWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9uZ1ZhbGlkYXRvciA9IGZ1bmN0aW9uICh2YWx1ZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPiAwIHx8IGlzTmFOKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9uZ01vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+TG9uZ2l0dWRlIG11c3QgYmUgbGVzcyB0aGFuIDAuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6Wyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCAgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRNb2RhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbG9yUmVuZGVyZXIgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIHRkLCByb3csIGNvbCwgcHJvcCwgdmFsdWUsIGNlbGxQcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyICRidXR0b24gPSAkKCc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBibnQtcHJpbWFyeVwiPjwvYnV0dG9uPicpO1xyXG4gICAgICAgICAgICAgICAgICAgICRidXR0b24uaHRtbCgnR2V0IFN0YXRlL0NvdW50eScpO1xyXG4gICAgICAgICAgICAgICAgICAgICQodGQpLmVtcHR5KCkuYXBwZW5kKCRidXR0b24pOyAvL2VtcHR5IGlzIG5lZWRlZCBiZWNhdXNlIHlvdSBhcmUgcmVuZGVyaW5nIHRvIGFuIGV4aXN0aW5nIGNlbGxcclxuICAgICAgICAgICAgICAgICAgLy8gIHRkLnN0eWxlLmJhY2tncm91bmQgPSAnI0VFRSc7XHJcbiAgICAgICAgICAgICAgICAgICAvLyB0ZC5pbm5lckhUTUwgPSAnR2V0IFN0YXRlL0NvdW50eSc7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRkO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5yZXF1aXJlZFZhbGlkYXRvciA9IGZ1bmN0aW9uICh2YWx1ZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkTW9kYWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb25cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy9yZXNldCBiYWNrIFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNldE1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5BcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gY2xlYXIgdGhlIHRhYmxlPzwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwiY2FuY2VsKClcIj5DYW5jZWw8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc2V0TW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaGlzdG9yaWNIV01zID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbnZhbGlkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gaGFuZHNvbnRhYmxlIHNldHRpbmdzXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudGFibGVTZXR0aW5ncyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjb2xIZWFkZXJzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJvd0hlYWRlcnM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dE1lbnU6IFsncm93X2Fib3ZlJywgJ3Jvd19iZWxvdycsICdyZW1vdmVfcm93J10sXHJcbiAgICAgICAgICAgICAgICAgICAgbWluU3BhcmVSb3dzOiAzLFxyXG4gICAgICAgICAgICAgICAgICAgIGFmdGVySW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaG90SW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgbWFudWFsQ29sdW1uUmVzaXplOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hbnVhbFJvd1Jlc2l6ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICB3b3JkV3JhcDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgdmlld3BvcnRDb2x1bW5SZW5kZXJpbmdPZmZzZXROdW1iZXI6IDEsICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbFdpZHRoczogJHNjb3BlLmNvbHVtbldpZHRocyxcclxuICAgICAgICAgICAgICAgICAgICBjZWxsczogZnVuY3Rpb24gKHJvdywgY29sLCBwcm9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcGh5c2ljYWwsIGNoZW1pY2FsLGJpb2xvZ2ljYWwsIG1pY3JvYmlvLCB0b3hcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbCA9PSA2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2VsbHByb3BzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxscHJvcHMucmVuZGVyZXIgPSBjb2xvclJlbmRlcmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNlbGxwcm9wcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgb25CZWZvcmVDaGFuZ2U6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFbaV1bMV0gPT0gXCJzdGF0ZVwiICYmIGRhdGFbaV1bM10gIT09IGRhdGFbaV1bMl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuVXBkYXRlQ291bnRpZXMoZGF0YVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIG9uQWZ0ZXJDaGFuZ2U6IGZ1bmN0aW9uIChjaGFuZ2UsIHNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NoYW5nZSBpcyBhbiBhcnJheSBjb250YWluaW5nIGFycmF5cyBmb3IgZWFjaCBjb2x1bW4gYWZmZWN0ZWQ6IFswXSA9IHJvdywgWzFdID0gZGF0YU5hbWUsIFsyXSA9IHZhbHVlIGl0IHdhcywgWzNdID0gdmFsdWUgaXQgaXMgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc291cmNlIGlzIHN0cmluZyA6IFwiYWx0ZXInLCBcImVtcHR5JywgXCJlZGl0JywgXCJwb3B1bGF0ZUZyb21BcnJheScsIFwibG9hZERhdGEnLCBcImF1dG9maWxsJywgXCJwYXN0ZVwiLiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2UgIT0gJ2xvYWREYXRhJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFuZ2UubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL29ubHkgY2FyZSBpZiBpdCB3YXMgYWN0dWFsbHkgY2hhbmdlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFuZ2VbaV1bMl0gIT09IGNoYW5nZVtpXVszXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQ2hhbmdlcy5wdXNoKGNoYW5nZVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgKGNoYW5nZVtpXVsxXSA9PSBcInN0YXRlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgJHNjb3BlLlVwZGF0ZUNvdW50aWVzKGNoYW5nZVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBhZnRlck9uQ2VsbE1vdXNlRG93bjogZnVuY3Rpb24gKGV2ZW50LCBjb29yZHMsIHRkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb29yZHMuY29sID09IDYpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0U3RhdGVDbyhjb29yZHMuY29sLCBjb29yZHMucm93KTtcclxuICAgICAgICAgICAgICAgICAgICB9LC8vZW5kIGFmdGVyT25DZWxsTW91c2VEb3duICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIG9uQWZ0ZXJWYWxpZGF0ZTogZnVuY3Rpb24gKGlzVmFsaWQsIHZhbHVlLCByb3csIHByb3AsIHNvdWNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbnZhbGlkcy5wdXNoKHsgXCJpc1ZhbGlkXCI6IGlzVmFsaWQsIFwicm93XCI6IHJvdywgXCJwcm9wXCI6IHByb3AgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdkluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB2SSA9IDA7IHZJIDwgJHNjb3BlLmludmFsaWRzLmxlbmd0aDsgdkkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuaW52YWxpZHNbdkldLnJvdyA9PSByb3cgJiYgJHNjb3BlLmludmFsaWRzW3ZJXS5wcm9wID09IHByb3ApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdkluZGV4ID0gdkk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2SW5kZXggPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW52YWxpZHMuc3BsaWNlKHZJbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHJvd0hlaWdodHM6IDUwXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgICAgICAgICB9Ly9lbmQgYXV0aG9yaXplZFxyXG4gICAgfV0pO1xyXG59KCkpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFNUTkNvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NUTkNvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgU1ROQ29udHJvbGxlcnMuY29udHJvbGxlcignYnVsa0hXTUN0cmwnLCBbJyRzY29wZScsICckc3RhdGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckaHR0cCcsICckcScsICckZmlsdGVyJywgJyR1aWJNb2RhbCcsICdTSVRFJywgJ0hXTScsICdNRU1CRVInLCAnRklMRScsICdJTlNUX0NPTExfQ09ORElUSU9OJywgJ1BFQUsnLCAnU09VUkNFJywgJ1NFUlZFUl9VUkwnLFxyXG4gICAgICAgICdldmVudExpc3QnLCAnc3RhdGVMaXN0JywgJ2NvdW50eUxpc3QnLCAnaHdtVHlwZUxpc3QnLCAnbWFya2VyTGlzdCcsICdod21RdWFsTGlzdCcsICdob3JpekRhdHVtTGlzdCcsICdob3JDb2xsTWV0aExpc3QnLCAndmVydERhdHVtTGlzdCcsICd2ZXJ0Q29sbE1ldGhMaXN0JywgJ2ZpbGVUeXBlc0xpc3QnLCAnYWdlbmNpZXNMaXN0JywgIFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRzdGF0ZSwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICRodHRwLCAkcSwgJGZpbHRlciwgJHVpYk1vZGFsLCBTSVRFLCBIV00sIE1FTUJFUiwgRklMRSwgSU5TVF9DT0xMX0NPTkRJVElPTiwgUEVBSywgU09VUkNFLCBTRVJWRVJfVVJMLCBldmVudExpc3QsIHN0YXRlTGlzdCwgY291bnR5TGlzdCwgXHJcbiAgICAgICAgICAgIGh3bVR5cGVMaXN0LCBtYXJrZXJMaXN0LCBod21RdWFsTGlzdCwgaG9yaXpEYXR1bUxpc3QsIGhvckNvbGxNZXRoTGlzdCwgdmVydERhdHVtTGlzdCwgdmVydENvbGxNZXRoTGlzdCwgZmlsZVR5cGVzTGlzdCwgYWdlbmNpZXNMaXN0KSB7XHJcbiAgICAgICAgICAgIGlmICgkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IHVuZGVmaW5lZCB8fCAkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hdXRoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvL2dsb2JhbCB2YXJzXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1RpcHMgPSB0cnVlOyAvL3RvZ2dsZSBzaG93L2hpZGUgdGlwc1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHsgaHdtT3BlbjogdHJ1ZSB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlcnZlclVSTCA9IFNFUlZFUl9VUkw7IC8vY29uc3RhbnQgd2l0aCBzdG50ZXN0LndpbS51c2dzLmdvdi9TVE5TZXJ2aWNlczIgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaHdtVHlwZXMgPSBod21UeXBlTGlzdDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5tYXJrZXJzID0gbWFya2VyTGlzdDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5od21RdWFscyA9IGh3bVF1YWxMaXN0O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmhvckRhdHVtcyA9IGhvcml6RGF0dW1MaXN0O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmhvckNvbGxNZXRocyA9IGhvckNvbGxNZXRoTGlzdDtcclxuICAgICAgICAgICAgICAgICRzY29wZS52ZXJ0RGF0dW1zID0gdmVydERhdHVtTGlzdDtcclxuICAgICAgICAgICAgICAgICRzY29wZS52ZXJ0Q29sbE1ldGhzID0gdmVydENvbGxNZXRoTGlzdDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZXMgPSBzdGF0ZUxpc3Q7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY291bnRpZXMgPSBjb3VudHlMaXN0O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93TG9hZGluZyA9IGZhbHNlOyAvL2RpdiBob2xkaW5nIGxvYWRlciAgICAgIFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm1heCA9IDA7ICRzY29wZS5keW5hbWljID0gMDsgLy92YWx1ZXMgZm9yIG51bWJlciBvZiBod21zIGFyZSB1cGxvYWRpbmcgKHVzZWQgaW4gcHJvZ3Jlc3NiYXJcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93UHJvZ3Jlc3NCYXIgPSBmYWxzZTsgLy9wcm9ncmVzc2JhciBmb3IgdXBsb2FkaW5nIGh3bXNcclxuICAgICAgICAgICAgICAgICRzY29wZS5ob3RJbnN0YW5jZTtcclxuICAgICAgICAgICAgICAgIC8vd2F0ZXIsIGxhYmVsLCB0eXBlLG1ya2VyLGVudnIsdW5jcnQscXVsLGJhbmssZGVzLGxhdCxsb25nLGhkYXR1bSxoY20saGFnLGZsZ0R0LHN1ckR0LGVsZXYsdmRhdHVtLHZjbSxzVW5jLG5vdGVzLCB0cmFucS9zdGlsbCxzaXRlbm9cclxuICAgICAgICAgICAgICAgICRzY29wZS5jb2x1bW5XaWR0aHMgPSBbMTgwLCAxNTAsIDE4MCwgMTgwLCAxNTAsIDE3MCwgMTgwLCAxMDAsIDIwMCwgMTQwLCAxNTAsIDE4MCwgMjIwLCAxMDAsIDEzMCwgMTIwLCAxMzAsIDE2MCwgMTkwLCAxNjAsIDIwMCwgMjAwLCAxMjAgXTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaXRlTm9BcnJvd0NsaWNrZWQgPSBmYWxzZTsgLy9uZWVkIGEgZmxhZyB3aGVuIGNsaWNrZWQgdG8gY2hlY2sgc28gdGhhdCB0aGUgcmVxdWlyZWQgdmFsaWRhdGlvbiBkb2Vzbid0IGZpcmUgYW5kIHNob3cgZXJyb3IgbW9kYWwgYXQgc2FtZSB0aW1lIGFzIHNpdGVtb2RhbFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnVwbG9hZEhXTXMgPSBbXTsgLy9kYXRhIGJpbmRpbmcgaW4gdGhlIGhhbmRzb250YWJsZSAodGhleSB3aWxsIHBhc3RlIGluIGh3bXMpXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucG9zdGVkSFdNcyA9IFtdOyAvL29uY2UgcG9zdGVkLCB0aGV5IGFyZSByZW1vdmVkIGZyb20gdGhlIGhhbmRzb250YWJsZSBhbmQgYWRkZWQgdG8gdGhpcyBhcnJheSB0byBzaG93IGluIGEgdGFibGUgYmVsb3dcclxuICAgICAgICAgICAgICAgICRzY29wZS5pbnZhbGlkcyA9IFtdOyAvL3N0b3JlIHdoZW4gaW52YWxpZCB0aHJvd25cclxuICAgICAgICAgICAgICAgICRzY29wZS5ldmVudHMgPSBldmVudExpc3Q7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubm90VmFsaWQgPSB0cnVlOyAgLy9zZW50IG5vdFZhbGlkIHRvIHRydWUgYnkgZGVmYXVsdCBzbyB0aGF0IGl0IGdldHMgc2V0IHRvIGZhbHNlIG9uY2UgdGFibGUgaXMgdmFsaWRhdGVkKGJ1dHRvbiBjbGljaylcclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBtYWtlIGRyb3Bkb3duc1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmh3bVR5cGVBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGh3bVR5cGVMaXN0LCBmdW5jdGlvbiAoaHQpIHsgJHNjb3BlLmh3bVR5cGVBcnJheS5wdXNoKGh0Lmh3bV90eXBlKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZW52aXJBcnJheSA9IFtcIkNvYXN0YWxcIiwgXCJSaXZlcmluZVwiXTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5tYXJrZXJBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKG1hcmtlckxpc3QsIGZ1bmN0aW9uIChtKSB7ICRzY29wZS5tYXJrZXJBcnJheS5wdXNoKG0ubWFya2VyMSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnF1YWxBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKGh3bVF1YWxMaXN0LCBmdW5jdGlvbiAoaHEpIHsgJHNjb3BlLnF1YWxBcnJheS5wdXNoKGhxLmh3bV9xdWFsaXR5KTsgfSk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYmFua0FycmF5ID0gW1wiTGVmdFwiLCBcIlJpZ2h0XCIsIFwiTi9BXCJdO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmhkYXR1bUFycmF5ID0gW107XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goaG9yaXpEYXR1bUxpc3QsIGZ1bmN0aW9uIChoZCkgeyAkc2NvcGUuaGRhdHVtQXJyYXkucHVzaChoZC5kYXR1bV9uYW1lKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaGNvbGxNZXRoQXJyYXkgPSBbXTtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChob3JDb2xsTWV0aExpc3QsIGZ1bmN0aW9uIChoY20pIHsgJHNjb3BlLmhjb2xsTWV0aEFycmF5LnB1c2goaGNtLmhjb2xsZWN0X21ldGhvZCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZkYXR1bUFycmF5ID0gW107XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2godmVydERhdHVtTGlzdCwgZnVuY3Rpb24gKHZkKSB7ICRzY29wZS52ZGF0dW1BcnJheS5wdXNoKHZkLmRhdHVtX2FiYnJldmlhdGlvbik7IH0pO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZjb2xsTWV0aEFycmF5ID0gW107XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2godmVydENvbGxNZXRoTGlzdCwgZnVuY3Rpb24gKHZjbSkgeyAkc2NvcGUudmNvbGxNZXRoQXJyYXkucHVzaCh2Y20udmNvbGxlY3RfbWV0aG9kKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudHJhbnFBcnJheSA9IFtcIlllc1wiLCBcIk5vXCJdO1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIG1ha2UgZHJvcGRvd25zXHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNob3NlbkV2ZW50ID0gMDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jaG9zZW5FdmVudE5hbWUgPSBcIlwiOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWxJbmRleCA9IC0xOyAvL2lmIHRoZXkgZGVsZXRlIGEgaHdtIGZyb20gdGhlIERPTkUgdGFibGUsIG5lZWQgaW5kZXggdGhleSBjbGlja2VkIHNvIGNsb3Npbmcgd2FybmluZyBtb2RhbCB3aWxsIGtub3cgd2hpY2ggb25lIHRvIHJlbW92ZSBmcm9tIHBvc3RlZEhXTXMgbGlzdFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVQZWFrYXJyYXkgPSBbXTsvL3doZW4gc2F2aW5nIGhhbmRzb250YWJsZSwgZWFjaCByb3csIGdldCBzaXRlUGVha3MsIGlmIHNvLCBzdG9yZSBoZXJlXHJcbiAgICAgICAgICAgICAgICAvL2FkZCBGSUxFIGZvciBhcHByb3ZhbCBtZW1vIG9yIHB1YmxpY2F0aW9uIGxpbmtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGRBcHByb3ZhbEZpbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFwcHJvdmVkRklMRW1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ0J1bGtBcHByb3ZhbEZJTEVfbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRjb29raWVzJywgJyR1aWJNb2RhbCcsICckdWliTW9kYWxJbnN0YW5jZScsICdmaWxlVHlwZUxpc3QnLCAnYWdlbmN5TGlzdCcsICd0aGlzTWVtYmVyJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRjb29raWVzLCAkdWliTW9kYWwsICR1aWJNb2RhbEluc3RhbmNlLCBmaWxlVHlwZUxpc3QsIGFnZW5jeUxpc3QsIHRoaXNNZW1iZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtRmlsZVR5cGVzID0gZmlsZVR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoaGZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoZnQuZmlsZXR5cGUgPT09ICdQaG90bycgfHwgaGZ0LmZpbGV0eXBlID09PSAnSGlzdG9yaWMgQ2l0YXRpb24nIHx8IGhmdC5maWxldHlwZSA9PT0gJ0ZpZWxkIFNoZWV0cycgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGZ0LmZpbGV0eXBlID09PSAnTGV2ZWwgTm90ZXMnIHx8IGhmdC5maWxldHlwZSA9PT0gJ090aGVyJyB8fCBoZnQuZmlsZXR5cGUgPT09ICdMaW5rJyB8fCBoZnQuZmlsZXR5cGUgPT09ICdTa2V0Y2gnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZSA9IHt9OyAvL2hvbGRlciBmb3IgZmlsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5maWxldHlwZV9pZCA9IDc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmRlc2NyaXB0aW9uID0gXCJQREYgb2YgQXBwcm92YWwgTWVtb1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlID0ge307IC8vaG9sZGVyIGZvciBmaWxlIHNvdXJjZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY2llcyA9IGFnZW5jeUxpc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFwcHJvdmFsX3R5cGUgPSA3OyAvL2hvbGRlciBvZiBhcHByb3ZhbCB0eXBlLCB1c2VkIHRvIHVwZGF0ZSBmaWxldHlwZV9pZCBhbmQgZGVzY3JpcHRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3JhZGlvIGFwcHJvdmFsIHR5cGUgY2hhbmdlZCwgdXBkYXRlIGZpbGV0eXBlX2lkIGFuZCBkZXNjcmlwdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVGaWxlVHlwZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkID0gTnVtYmVyKCRzY29wZS5hcHByb3ZhbF90eXBlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmRlc2NyaXB0aW9uID0gJHNjb3BlLmFwcHJvdmFsX3R5cGUgPT0gXCI3XCIgPyBcIlBERiBvZiBBcHByb3ZhbCBNZW1vXCIgOiBcIlJlcG9ydCBMaW5rXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL0RhdGVwaWNrZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tycyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcGVuID0gZnVuY3Rpb24gKCRldmVudCwgd2hpY2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRlcGlja3JzW3doaWNoXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlID0gdGhpc01lbWJlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZS5GVUxMbmFtZSA9ICRzY29wZS5hU291cmNlLmZuYW1lICsgXCIgXCIgKyAkc2NvcGUuYVNvdXJjZS5sbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkRmlsZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUubmFtZSB8fCAkc2NvcGUuYUZpbGUuRmlsZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlUGFydHMgPSBbJHNjb3BlLmFGaWxlLCAkc2NvcGUuYVNvdXJjZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoZmlsZVBhcnRzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yTW9kYWwgPSAkdWliTW9kYWwub3Blbih7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPllvdSBtdXN0IHVwbG9hZCBhIEZpbGUgZm9yIEFwcHJvdmFsIE1lbW8gb3IgYSBGaWxlIFVSTCBmb3IgUmVwb3J0IExpbmsuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jYW5jZWxGaWxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ2xnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd0NsYXNzOiAncmVwLWRpYWxvZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVUeXBlTGlzdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlVHlwZXNMaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWdlbmN5TGlzdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhZ2VuY2llc0xpc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc01lbWJlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1FTUJFUi5xdWVyeSh7IGlkOiAkY29va2llcy5nZXQoJ21JRCcpIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYXBwcm92ZWRGSUxFbW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGNyZWF0ZWRGaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHByb3ZhbEZpbGUgPSBjcmVhdGVkRmlsZVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFwcHJvdmFsU291cmNlID0gY3JlYXRlZEZpbGVbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9Oy8vZW5kIGFkZEFwcHJvdmFsRmlsZVxyXG4gICAgICAgICAgICAgICAgLy9lbmQgYWRkIEZJTEVcclxuXHJcbiAgICAgICAgICAgICAgICAvL2NhbGxlZCB0byBmb3JtYXQganVzdCB0aGUgZGF0ZSAobm8gdGltZSlcclxuICAgICAgICAgICAgICAgIHZhciBtYWtlQWRhdGUgPSBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQgIT09IFwiXCIgJiYgZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcHJvdmlkZWQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhRGF0ZSA9IG5ldyBEYXRlKGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgeWVhciA9IGFEYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vbnRoID0gYURhdGUuZ2V0TW9udGgoKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGF5ID0gKCcwJyArIGFEYXRlLmdldERhdGUoKSkuc2xpY2UoLTIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb250aE5hbWVzID0gW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRlV090aW1lID0gbmV3IERhdGUobW9udGhOYW1lc1ttb250aF0gKyBcIiBcIiArIGRheSArIFwiLCBcIiArIHllYXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBkYXRlV090aW1lO1xyXG4gICAgICAgICAgICAgICAgfTsvL2VuZCBtYWtlQWRhdGUoKVxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gU0lURSBOTyBkcm9wZG93biBhcnJvdyBDbGljayBNT0RBTCBwYXJ0IC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgICAgICAgdmFyIGdldEZpbmRTaXRlTW9kYWwgPSBmdW5jdGlvbiAociwgYywgaHdtUGFydHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICRzY29wZS5zaG93TG9hZGluZyA9IHRydWU7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2xvYWRpbmdEaXYnKS5yZW1vdmVDbGFzcygnbm9TaG93Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFBdFJvdyA9ICRzY29wZS5ob3RJbnN0YW5jZS5nZXREYXRhQXRSb3cocik7IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyAkc2NvcGUuaG90SW5zdGFuY2UuZGVzZWxlY3RDZWxsKCk7IH0sIDEwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFBdFJvd1s5XSAhPT0gXCJcIiAmJiBkYXRhQXRSb3dbMTBdICE9PSBcIlwiICYmIGRhdGFBdFJvd1s5XSAhPT0gbnVsbCAmJiBkYXRhQXRSb3dbMTBdICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2xvYWRpbmdEaXYnKS5hZGRDbGFzcygnbm9TaG93Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaXRlTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2Fzc29jaWF0ZVNpdGVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZWFyQnlTaXRlczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU0lURS5nZXRQcm94aW1pdHlTaXRlcyh7IExhdGl0dWRlOiBkYXRhQXRSb3dbOV0sIExvbmdpdHVkZTogZGF0YUF0Um93WzEwXSwgQnVmZmVyOiAwLjAwMDUgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIV01wYXJ0czogZnVuY3Rpb24oKXsgcmV0dXJuIGh3bVBhcnRzOyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVOb0FscmVhZHlUaGVyZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gZGF0YUF0Um93WzIyXTsgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZGF0dW1zOiBmdW5jdGlvbiAoKSB7IHJldHVybiAkc2NvcGUuaG9yRGF0dW1zOyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhjb2xNZXRoczogZnVuY3Rpb24gKCkgeyByZXR1cm4gJHNjb3BlLmhvckNvbGxNZXRoczsgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2ZGF0dW1zOiBmdW5jdGlvbiAoKSB7IHJldHVybiAkc2NvcGUudmVydERhdHVtczsgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2Y29sTWV0aHM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICRzY29wZS52ZXJ0Q29sbE1ldGhzOyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlczogZnVuY3Rpb24gKCkgeyByZXR1cm4gJHNjb3BlLnN0YXRlczsgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudGllczogZnVuY3Rpb24gKCkgeyByZXR1cm4gJHNjb3BlLmNvdW50aWVzOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2h3bVNpdGVNb2RhbEN0cmwnLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVNb2RhbC5yZXN1bHQudGhlbihmdW5jdGlvbiAodGhpc1NpdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2xvYWRpbmdEaXYnKS5hZGRDbGFzcygnbm9TaG93Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1NpdGUgIT09IHVuZGVmaW5lZCkgJHNjb3BlLmhvdEluc3RhbmNlLnNldERhdGFBdENlbGwociwgYywgdGhpc1NpdGUuc2l0ZV9ubyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudCgnI2xvYWRpbmdEaXYnKS5hZGRDbGFzcygnbm9TaG93Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvck1vZGFsID0gJHVpYk1vZGFsLm9wZW4oeyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlBsZWFzZSBwb3B1bGF0ZSB0aGlzIHJvd1xcJ3MgbGF0aXR1ZGUgYW5kIGxvbmdpdHVkZSBiZWZvcmUgZmluZGluZyBhIHNpdGUgdG8gYXNzb2NpYXRlLjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIFNJVEUgTk8gZHJvcGRvd24gYXJyb3cgQ2xpY2sgTU9EQUwgcGFydCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIHJlbmRlcmVycy92YWxpZGF0b3JzXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVxdWlyZWRWYWxpZGF0b3IgPSBmdW5jdGlvbiAodmFsdWUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiB0aGlzIGlzIHRoZSBkcm9wZG93biBhcnJvdyBiZWluZyBjbGlja2VkIGluIHNpdGVObyBjZWxsLCBkb24ndCBzaG93IGVycm9yIG1lc3NhZ2VcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnNpdGVOb0Fycm93Q2xpY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZU5vQXJyb3dDbGlja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vb25seSBjYXJlIGlmIHRoZXJlJ3Mgb3RoZXIgZGF0YSBpbiB0aGlzIHJvd1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm93ID0gdGhpcy5yb3c7IHZhciBjb2wgPSB0aGlzLmNvbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgcGh5c2ljYWxJbmRleCA9IHVudHJhbnNsYXRlUm93KHJvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXRhQXRSb3cgPSAkc2NvcGUuaG90SW5zdGFuY2UuZ2V0RGF0YUF0Um93KHJvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvdGhlckRhdGFJblJvdyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZGF0YUF0Um93LCBmdW5jdGlvbiAoZCwgaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbmVlZCB0aGUgY29sIHRvbyBiZWNhdXNlIHJpZ2h0IGFmdGVyIHJlbW92aW5nIHJlcSB2YWx1ZSwgaXQncyBzdGlsbCBpbiB0aGUgLmdldERhdGFBdFJvdy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZCAhPT0gbnVsbCAmJiBkICE9PSBcIlwiICYmIGluZGV4ICE9PSBjb2wpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJEYXRhSW5Sb3cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSAmJiBvdGhlckRhdGFJblJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdoaWNoT25lID0gJHNjb3BlLmhvdEluc3RhbmNlLmdldENvbEhlYWRlcihjb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLm9wdGlvbnMudGltZU91dCA9IFwiNjAwMFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLm9wdGlvbnMuY2xvc2VCdXR0b24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKHdoaWNoT25lICsgXCIgaXMgYSByZXF1aXJlZCBmaWVsZC5cIik7IC8vICByZXF1aXJlZE1vZGFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubGF0VmFsaWRhdG9yID0gZnVuY3Rpb24gKHZhbHVlLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByb3cgPSB0aGlzLnJvdzsgdmFyIGNvbCA9IHRoaXMuY29sOyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFBdFJvdyA9ICRzY29wZS5ob3RJbnN0YW5jZS5nZXREYXRhQXRSb3cocm93KTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb3RoZXJEYXRhSW5Sb3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZGF0YUF0Um93LCBmdW5jdGlvbiAoZCwgaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9uZWVkIHRoZSBjb2wgdG9vIGJlY2F1c2UgcmlnaHQgYWZ0ZXIgcmVtb3ZpbmcgcmVxIHZhbHVlLCBpdCdzIHN0aWxsIGluIHRoZSAuZ2V0RGF0YUF0Um93Li5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQgIT09IG51bGwgJiYgZCAhPT0gXCJcIiAmJiBpbmRleCAhPT0gY29sKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJEYXRhSW5Sb3cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoKHZhbHVlIDwgMjIgfHwgdmFsdWUgPiA1NSkgfHwgaXNOYU4odmFsdWUpKSAmJiBvdGhlckRhdGFJblJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgJHNjb3BlLmhvdEluc3RhbmNlLmRlc2VsZWN0Q2VsbCgpOyB9LCAxMDApOyAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIub3B0aW9ucy50aW1lT3V0ID0gXCI2MDAwXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5vcHRpb25zLmNsb3NlQnV0dG9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiTGF0aXR1ZGUgbXVzdCBiZSBiZXR3ZWVuIDIyLjAgYW5kIDU1LjAgKGRlYyBkZWcpLlwiKTsgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdmFsdWUgJiYgb3RoZXJEYXRhSW5Sb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdoaWNoT25lID0gJHNjb3BlLmhvdEluc3RhbmNlLmdldENvbEhlYWRlcihjb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIub3B0aW9ucy50aW1lT3V0ID0gXCI2MDAwXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5vcHRpb25zLmNsb3NlQnV0dG9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKHdoaWNoT25lICsgXCIgaXMgYSByZXF1aXJlZCBmaWVsZC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmxvbmdWYWxpZGF0b3IgPSBmdW5jdGlvbiAodmFsdWUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJvdyA9IHRoaXMucm93OyB2YXIgY29sID0gdGhpcy5jb2w7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGFBdFJvdyA9ICRzY29wZS5ob3RJbnN0YW5jZS5nZXREYXRhQXRSb3cocm93KTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgb3RoZXJEYXRhSW5Sb3cgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goZGF0YUF0Um93LCBmdW5jdGlvbiAoZCwgaW5kZXgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9uZWVkIHRoZSBjb2wgdG9vIGJlY2F1c2UgcmlnaHQgYWZ0ZXIgcmVtb3ZpbmcgcmVxIHZhbHVlLCBpdCdzIHN0aWxsIGluIHRoZSAuZ2V0RGF0YUF0Um93Li5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGQgIT09IG51bGwgJiYgZCAhPT0gXCJcIiAmJiBpbmRleCAhPT0gY29sKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3RoZXJEYXRhSW5Sb3cgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoKHZhbHVlIDwgLTEzMCB8fCB2YWx1ZSA+IC01NSkgfHwgaXNOYU4odmFsdWUpKSAmJiBvdGhlckRhdGFJblJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgJHNjb3BlLmhvdEluc3RhbmNlLmRlc2VsZWN0Q2VsbCgpOyB9LCAxMDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIub3B0aW9ucy50aW1lT3V0ID0gXCI2MDAwXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5vcHRpb25zLmNsb3NlQnV0dG9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiTG9uZ2l0dWRlIG11c3QgYmUgYmV0d2VlbiAtMTMwLjAgYW5kIC01NS4wIChkZWMgZGVnKS5cIik7ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKCF2YWx1ZSAmJiBvdGhlckRhdGFJblJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2hpY2hPbmUgPSAkc2NvcGUuaG90SW5zdGFuY2UuZ2V0Q29sSGVhZGVyKGNvbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5vcHRpb25zLnRpbWVPdXQgPSBcIjYwMDBcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLm9wdGlvbnMuY2xvc2VCdXR0b24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3Iod2hpY2hPbmUgKyBcIiBpcyBhIHJlcXVpcmVkIGZpZWxkLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gIHJlcXVpcmVkTW9kYWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5udW1lcmljVmFsaWRhdG9yID0gZnVuY3Rpb24gKHZhbHVlLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3aGljaE9uZSA9ICRzY29wZS5ob3RJbnN0YW5jZS5nZXRDb2xIZWFkZXIodGhpcy5jb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSAhPT0gXCJcIiAmJiB2YWx1ZSAhPT0gbnVsbCAmJiAoaXNOYU4oTnVtYmVyKHZhbHVlKSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyAkc2NvcGUuaG90SW5zdGFuY2UuZGVzZWxlY3RDZWxsKCk7IH0sIDEwMCk7ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5vcHRpb25zLnRpbWVPdXQgPSBcIjYwMDBcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLm9wdGlvbnMuY2xvc2VCdXR0b24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3Iod2hpY2hPbmUgKyBcIiBtdXN0IGJlIGFuIG51bWVyaWMgdmFsdWUgKGV4OiAwLjAzKS5cIik7ICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAod2hpY2hPbmUgPT0gXCJIV00gVW5jZXJ0YWludHkgKGZ0KVwiICYmIHZhbHVlICE9PSBcIlwiICYmIHZhbHVlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgaWYgaHdtUXVhbGl0eSBoYXMgdmFsdWUuIGlmIHNvLCBzZWUgaWYgaXQncyB3aXRoaW4gcHJvcGVyIHJhbmdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBod21RdWFsVmFsdWUgPSAkc2NvcGUuaG90SW5zdGFuY2UuZ2V0RGF0YUF0Q2VsbCh0aGlzLnJvdywgNik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChod21RdWFsVmFsdWUgIT09IG51bGwgJiYgaHdtUXVhbFZhbHVlICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXBwcm9wcmlhdGVIV01RdWFsID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWx1ZSA+IDAuNCkgYXBwcm9wcmlhdGVIV01RdWFsID0gXCJWUDogPiAwLjQwIGZ0XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICh2YWx1ZSA8IDAuMDUpIGFwcHJvcHJpYXRlSFdNUXVhbCA9IFwiRXhjZWxsZW50OiArLy0gMC4wNSBmdFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYXBwcm9wcmlhdGVIV01RdWFsID0gJHNjb3BlLmh3bVF1YWxzLmZpbHRlcihmdW5jdGlvbiAoaCkgeyByZXR1cm4gaC5taW5fcmFuZ2UgPD0gdmFsdWUgJiYgaC5tYXhfcmFuZ2UgPj0gdmFsdWU7IH0pWzBdLmh3bV9xdWFsaXR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFwcHJvcHJpYXRlSFdNUXVhbCAhPT0gaHdtUXVhbFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLm9wdGlvbnMudGltZU91dCA9IFwiNjAwMFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5vcHRpb25zLmNsb3NlQnV0dG9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3Iod2hpY2hPbmUgKyBcIiBkb2VzIG5vdCBoYXZlIGEgbWF0Y2hpbmcgSFdNIFF1YWxpdHkgZm9yIHJvdyBcIiArIE51bWJlcih0aGlzLnJvdyArIDEpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgY2FsbGJhY2sodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBjYWxsYmFjayh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm1hdGNoaW5nRERWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcm93ID0gdGhpcy5yb3c7IHZhciBjb2wgPSB0aGlzLmNvbDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0YUF0Um93ID0gJHNjb3BlLmhvdEluc3RhbmNlLmdldERhdGFBdFJvdyhyb3cpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvdGhlckRhdGFJblJvdyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChkYXRhQXRSb3csIGZ1bmN0aW9uIChkLCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25lZWQgdGhlIGNvbCB0b28gYmVjYXVzZSByaWdodCBhZnRlciByZW1vdmluZyByZXEgdmFsdWUsIGl0J3Mgc3RpbGwgaW4gdGhlIC5nZXREYXRhQXRSb3cuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZCAhPT0gbnVsbCAmJiBkICE9PSBcIlwiICYmIGluZGV4ICE9PSBjb2wpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvdGhlckRhdGFJblJvdyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiB2YWx1ZSBpc24ndCBlbXB0eSBhbmQgdGhlcmVzIG90aGVyIGRhdGEgaW4gcm93Li4uXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbHVlICE9PSBcIlwiICYmIHZhbHVlICE9PSBudWxsKXsvLyAmJiBvdGhlckRhdGFJblJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcCA9IHRoaXMucHJvcDsgdmFyIGhhc0Vycm9yID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAocHJvcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaHdtX3R5cGVfaWQnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuaHdtVHlwZUFycmF5Lm1hcChmdW5jdGlvbiAoaHdUKSB7IHJldHVybiBod1Q7IH0pLmluZGV4T2YodmFsdWUpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnbWFya2VyX2lkJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLm1hcmtlckFycmF5Lm1hcChmdW5jdGlvbiAoaHdNKSB7IHJldHVybiBod007IH0pLmluZGV4T2YodmFsdWUpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnaHdtX2Vudmlyb25tZW50JzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmVudmlyQXJyYXkubWFwKGZ1bmN0aW9uIChod0UpIHsgcmV0dXJuIGh3RTsgfSkuaW5kZXhPZih2YWx1ZSkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdod21fcXVhbGl0eV9pZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5xdWFsQXJyYXkubWFwKGZ1bmN0aW9uIChod1EpIHsgcmV0dXJuIGh3UTsgfSkuaW5kZXhPZih2YWx1ZSkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdiYW5rJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmJhbmtBcnJheS5tYXAoZnVuY3Rpb24gKGh3QikgeyByZXR1cm4gaHdCOyB9KS5pbmRleE9mKHZhbHVlKSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ2hkYXR1bV9pZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5oZGF0dW1BcnJheS5tYXAoZnVuY3Rpb24gKGhEKSB7IHJldHVybiBoRDsgfSkuaW5kZXhPZih2YWx1ZSkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdoY29sbGVjdF9tZXRob2RfaWQnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuaGNvbGxNZXRoQXJyYXkubWFwKGZ1bmN0aW9uIChoQykgeyByZXR1cm4gaEM7IH0pLmluZGV4T2YodmFsdWUpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNFcnJvciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAndmRhdHVtX2lkJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnZkYXR1bUFycmF5Lm1hcChmdW5jdGlvbiAoaEQpIHsgcmV0dXJuIGhEOyB9KS5pbmRleE9mKHZhbHVlKSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ3Zjb2xsZWN0X21ldGhvZF9pZCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS52Y29sbE1ldGhBcnJheS5tYXAoZnVuY3Rpb24gKGhDKSB7IHJldHVybiBoQzsgfSkuaW5kZXhPZih2YWx1ZSkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhhc0Vycm9yID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdzdGlsbHdhdGVyJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnRyYW5xQXJyYXkubWFwKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0OyB9KS5pbmRleE9mKHZhbHVlKSA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzRXJyb3IgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0Vycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocHJvcCA9PSBcImh3bV9xdWFsaXR5X2lkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgaWYgaHdtIHVuY2VydGFpbnR5IGhhcyB2YWx1ZS4gaWYgc28sIHNlZSBpZiBpdCdzIHdpdGhpbiBwcm9wZXIgcmFuZ2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1bmNlcnRWYWx1ZSA9ICRzY29wZS5ob3RJbnN0YW5jZS5nZXREYXRhQXRDZWxsKHJvdywgNSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodW5jZXJ0VmFsdWUgIT09IG51bGwgJiYgdW5jZXJ0VmFsdWUgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYXBwcm9wcmlhdGVxdWFsID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodW5jZXJ0VmFsdWUgPiAwLjQpIGFwcHJvcHJpYXRlcXVhbCA9IFwiVlA6ID4gMC40MCBmdFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHVuY2VydFZhbHVlIDwgMC4wNSkgYXBwcm9wcmlhdGVxdWFsID0gXCJFeGNlbGxlbnQ6ICsvLSAwLjA1IGZ0XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFwcHJvcHJpYXRlcXVhbCA9ICRzY29wZS5od21RdWFscy5maWx0ZXIoZnVuY3Rpb24gKGgpIHsgcmV0dXJuIGgubWluX3JhbmdlIDw9IHVuY2VydFZhbHVlICYmIGgubWF4X3JhbmdlID49IHVuY2VydFZhbHVlOyB9KVswXS5od21fcXVhbGl0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFwcHJvcHJpYXRlcXVhbCAhPT0gdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLm9wdGlvbnMudGltZU91dCA9IFwiNjAwMFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIub3B0aW9ucy5jbG9zZUJ1dHRvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkhXTSBRdWFsaXR5IGRvZXMgbm90IGhhdmUgYSBtYXRjaGluZyBIV00gdW5jZXJ0YWludHkgcmFuZ2UgdmFsdWUgZm9yIHJvdyBcIiArIE51bWJlcihyb3cgKyAxKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgeyBjYWxsYmFjayh0cnVlKTsgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGNhbGxiYWNrKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgY2FsbGJhY2sodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdmFsdWUgJiYgb3RoZXJEYXRhSW5Sb3cpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdoaWNoT25lID0gJHNjb3BlLmhvdEluc3RhbmNlLmdldENvbEhlYWRlcihjb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIub3B0aW9ucy50aW1lT3V0ID0gXCI2MDAwXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5vcHRpb25zLmNsb3NlQnV0dG9uID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKHdoaWNoT25lICsgXCIgaXMgYSByZXF1aXJlZCBmaWVsZC5cIik7ICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGNhbGxiYWNrKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgICAgICAgICAgICAgIC8vY2FsbGVkIGZyb20gaW4gc2F2ZSBmdW5jdGlvbiwgZG9uZSBwb3N0aW5nIG5vdyByZW1vdmUgdGhlIHN1Y2Nlc3NmdWwgb25lIGZyb20gdGhlIGhhbmRzb250YWJsZSBhYm92ZVxyXG4gICAgICAgICAgICAgICAgdmFyIHJlbW92ZVRoaXNVcGxvYWRIV00gPSBmdW5jdGlvbiAoc3VjY2Vzc2Z1bEhXTSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGZpbmQgdGhpcyBvbmUgaW4gdGhlICRzY29wZS51cGxvYWRIV01zIGFuZCBzcGxpY2UgaXQgb3V0XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNwbGljZUluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJhbmsgPSBzdWNjZXNzZnVsSFdNLmJhbms7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGhjbU5hbWUgPSBob3JDb2xsTWV0aExpc3QuZmlsdGVyKGZ1bmN0aW9uIChoY20pIHsgcmV0dXJuIGhjbS5oY29sbGVjdF9tZXRob2RfaWQgPT0gc3VjY2Vzc2Z1bEhXTS5oY29sbGVjdF9tZXRob2RfaWQ7IH0pWzBdLmhjb2xsZWN0X21ldGhvZDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaGROYW1lID0gaG9yaXpEYXR1bUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChoZCkgeyByZXR1cm4gaGQuZGF0dW1faWQgPT0gc3VjY2Vzc2Z1bEhXTS5oZGF0dW1faWQ7IH0pWzBdLmRhdHVtX25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGh3bVFOYW1lID0gaHdtUXVhbExpc3QuZmlsdGVyKGZ1bmN0aW9uIChocSkgeyByZXR1cm4gaHEuaHdtX3F1YWxpdHlfaWQgPT0gc3VjY2Vzc2Z1bEhXTS5od21fcXVhbGl0eV9pZDsgfSlbMF0uaHdtX3F1YWxpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGh3bVROYW1lID0gaHdtVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChodCkgeyByZXR1cm4gaHQuaHdtX3R5cGVfaWQgPT0gc3VjY2Vzc2Z1bEhXTS5od21fdHlwZV9pZDsgfSlbMF0uaHdtX3R5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hcmsgPSBzdWNjZXNzZnVsSFdNLm1hcmtlcl9pZCAhPT0gdW5kZWZpbmVkID8gbWFya2VyTGlzdC5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWFya2VyX2lkID09IHN1Y2Nlc3NmdWxIV00ubWFya2VyX2lkOyB9KVswXS5tYXJrZXIxIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2Y21OYW1lID0gc3VjY2Vzc2Z1bEhXTS52Y29sbGVjdF9tZXRob2RfaWQgIT09IHVuZGVmaW5lZCA/IHZlcnRDb2xsTWV0aExpc3QuZmlsdGVyKGZ1bmN0aW9uICh2Y20pIHsgcmV0dXJuIHZjbS52Y29sbGVjdF9tZXRob2RfaWQgPT0gc3VjY2Vzc2Z1bEhXTS52Y29sbGVjdF9tZXRob2RfaWQ7IH0pWzBdLnZjb2xsZWN0X21ldGhvZCA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmROYW1lID0gc3VjY2Vzc2Z1bEhXTS52ZGF0dW1faWQgIT09IHVuZGVmaW5lZCA/IHZlcnREYXR1bUxpc3QuZmlsdGVyKGZ1bmN0aW9uICh2ZCkgeyByZXR1cm4gdmQuZGF0dW1faWQgPT0gc3VjY2Vzc2Z1bEhXTS52ZGF0dW1faWQ7IH0pWzBdLmRhdHVtX2FiYnJldmlhdGlvbiA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaGFnID0gc3VjY2Vzc2Z1bEhXTS5oZWlnaHRfYWJvdmVfZ25kICE9PSB1bmRlZmluZWQgPyBOdW1iZXIoc3VjY2Vzc2Z1bEhXTS5oZWlnaHRfYWJvdmVfZ25kKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZWxGdCA9IHN1Y2Nlc3NmdWxIV00uZWxldl9mdCAhPT0gdW5kZWZpbmVkID8gTnVtYmVyKHN1Y2Nlc3NmdWxIV00uZWxldl9mdCkgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVuYyA9IHN1Y2Nlc3NmdWxIV00udW5jZXJ0YWludHkgIT09IHVuZGVmaW5lZCA/IE51bWJlcihzdWNjZXNzZnVsSFdNLnVuY2VydGFpbnR5KSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaHdtVW5jID0gc3VjY2Vzc2Z1bEhXTS5od21fdW5jZXJ0YWludHkgIT09IHVuZGVmaW5lZCA/IE51bWJlcihzdWNjZXNzZnVsSFdNLmh3bV91bmNlcnRhaW50eSkgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaHdtSSA9IDA7IGh3bUkgPCAkc2NvcGUudXBsb2FkSFdNcy5sZW5ndGg7IGh3bUkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnVwbG9hZEhXTXNbaHdtSV0uc2l0ZV9ubyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2Zvcm1hdCBlYWNoIHVwbG9hZEhXTSBmaXJzdCB0byBjb21wYXJlIGFwcGxlcyB0byBhcHBsZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cGxvYWRfaHdtVW5jID0gJHNjb3BlLnVwbG9hZEhXTXNbaHdtSV0uaHdtX3VuY2VydGFpbnR5ICE9PSBcIlwiICYmICRzY29wZS51cGxvYWRIV01zW2h3bUldLmh3bV91bmNlcnRhaW50eSAhPT0gdW5kZWZpbmVkID8gTnVtYmVyKCRzY29wZS51cGxvYWRIV01zW2h3bUldLmh3bV91bmNlcnRhaW50eSkgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXBsb2FkX21hcmsgPSAkc2NvcGUudXBsb2FkSFdNc1tod21JXS5tYXJrZXJfaWQgIT09IFwiXCIgJiYgJHNjb3BlLnVwbG9hZEhXTXNbaHdtSV0ubWFya2VyX2lkICE9PSB1bmRlZmluZWQgPyAkc2NvcGUudXBsb2FkSFdNc1tod21JXS5tYXJrZXJfaWQgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXBsb2FkX3VuYyA9ICRzY29wZS51cGxvYWRIV01zW2h3bUldLnVuY2VydGFpbnR5ICE9PSBcIlwiICYmICRzY29wZS51cGxvYWRIV01zW2h3bUldLnVuY2VydGFpbnR5ICE9PSB1bmRlZmluZWQgPyBOdW1iZXIoJHNjb3BlLnVwbG9hZEhXTXNbaHdtSV0udW5jZXJ0YWludHkpIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVwbG9hZF9oYWcgPSAkc2NvcGUudXBsb2FkSFdNc1tod21JXS5oZWlnaHRfYWJvdmVfZ25kICE9PSBcIlwiICYmICRzY29wZS51cGxvYWRIV01zW2h3bUldLmhlaWdodF9hYm92ZV9nbmQgIT09IHVuZGVmaW5lZCA/IE51bWJlcigkc2NvcGUudXBsb2FkSFdNc1tod21JXS5oZWlnaHRfYWJvdmVfZ25kKSA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cGxvYWRfZWxGdCA9ICRzY29wZS51cGxvYWRIV01zW2h3bUldLmVsZXZfZnQgIT09IFwiXCIgJiYgJHNjb3BlLnVwbG9hZEhXTXNbaHdtSV0uZWxldl9mdCAhPT0gdW5kZWZpbmVkID8gTnVtYmVyKCRzY29wZS51cGxvYWRIV01zW2h3bUldLmVsZXZfZnQpIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVwbG9hZF92Y29sbE1ldGggPSAkc2NvcGUudXBsb2FkSFdNc1tod21JXS52Y29sbGVjdF9tZXRob2RfaWQgIT09IFwiXCIgJiYgJHNjb3BlLnVwbG9hZEhXTXNbaHdtSV0udmNvbGxlY3RfbWV0aG9kX2lkICE9PSB1bmRlZmluZWQgPyAkc2NvcGUudXBsb2FkSFdNc1tod21JXS52Y29sbGVjdF9tZXRob2RfaWQgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXBsb2FkX3ZkYXQgPSAkc2NvcGUudXBsb2FkSFdNc1tod21JXS52ZGF0dW1faWQgIT09IFwiXCIgJiYgJHNjb3BlLnVwbG9hZEhXTXNbaHdtSV0udmRhdHVtX2lkICE9PSB1bmRlZmluZWQgPyAkc2NvcGUudXBsb2FkSFdNc1tod21JXS52ZGF0dW1faWQgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vdCBhIG51bGwgcm93XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnVwbG9hZEhXTXNbaHdtSV0uc2l0ZV9ubyA9PSBzdWNjZXNzZnVsSFdNLnNpdGVfbm8gJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXBsb2FkSFdNc1tod21JXS53YXRlcmJvZHkgPT0gc3VjY2Vzc2Z1bEhXTS53YXRlcmJvZHkgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWRfaHdtVW5jID09IGh3bVVuYyAmJiAvL3VwbG9hZEhXTXNbLi5dLmh3bV91bmNlcnRhaW50eSBpcyBcIlwiIGFuZCBjb21wYXJpbmcgdG8gdW5kZWZpbmVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVwbG9hZEhXTXNbaHdtSV0uYmFuayA9PSBiYW5rICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVwbG9hZEhXTXNbaHdtSV0uaHdtX2xvY2F0aW9uZGVzY3JpcHRpb24gPT0gc3VjY2Vzc2Z1bEhXTS5od21fbG9jYXRpb25kZXNjcmlwdGlvbiAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE51bWJlcigkc2NvcGUudXBsb2FkSFdNc1tod21JXS5sYXRpdHVkZV9kZCkgPT0gc3VjY2Vzc2Z1bEhXTS5sYXRpdHVkZV9kZCAmJiBOdW1iZXIoJHNjb3BlLnVwbG9hZEhXTXNbaHdtSV0ubG9uZ2l0dWRlX2RkKSA9PSBzdWNjZXNzZnVsSFdNLmxvbmdpdHVkZV9kZCAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZF9oYWcgPT0gaGFnICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVwbG9hZEhXTXNbaHdtSV0uaGNvbGxlY3RfbWV0aG9kX2lkID09IGhjbU5hbWUgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXBsb2FkSFdNc1tod21JXS5oZGF0dW1faWQgPT0gaGROYW1lICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVwbG9hZEhXTXNbaHdtSV0uaHdtX3F1YWxpdHlfaWQgPT0gaHdtUU5hbWUgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXBsb2FkSFdNc1tod21JXS5od21fdHlwZV9pZCA9PSBod21UTmFtZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZF9tYXJrID09IG1hcmsgJiYgLy91cGxvYWRIV01zWy4uXS5tYXJrZXJfaWQgaXMgXCJcIiBhbmQgY29tcGFyaW5nIHRvIHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZF92Y29sbE1ldGggPT0gdmNtTmFtZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZF92ZGF0ID09IHZkTmFtZSAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwbG9hZF9lbEZ0ID09IGVsRnQgJiZcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGxvYWRfdW5jID09IHVuYyAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51cGxvYWRIV01zW2h3bUldLmh3bV9ub3RlcyA9PSBzdWNjZXNzZnVsSFdNLmh3bV9ub3Rlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwbGljZUluZGV4ID0gaHdtSTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc3BsaWNlSW5kZXggPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVwbG9hZEhXTXMuc3BsaWNlKHNwbGljZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh3bUkgPSAkc2NvcGUudXBsb2FkSFdNcy5sZW5ndGg7Ly9icmVhayFcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmR5bmFtaWMgPT0gJHNjb3BlLm1heClcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dQcm9ncmVzc0JhciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93TG9hZGluZyA9ICdmYWxzZSc7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vdmFsaWRhdGUgYmVmb3JlIGFsbG93aW5nIHNhdmUgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudmFsaWRhdGVUYWJsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0xvYWRpbmcgPSB0cnVlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNsb2FkaW5nRGl2JykucmVtb3ZlQ2xhc3MoJ25vU2hvdycpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBoYXZlRGF0YSA9ICRzY29wZS5ob3RJbnN0YW5jZS5nZXREYXRhQXRDZWxsKDAsIDIpOyAvLyAgKHJvdyxjb2wpIGh3bV90eXBlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhdmVEYXRhICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ob3RJbnN0YW5jZS52YWxpZGF0ZUNlbGxzKGZ1bmN0aW9uICh2YWxpZCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkgeyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbGlkTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+VmFsaWQ8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+VmFsaWRhdGlvbiBzdWNjZXNzZnVsITwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCckcm9vdFNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjbG9hZGluZ0RpdicpLmFkZENsYXNzKCdub1Nob3cnKTsgLy9hZGRDbGFzcyA9ZmFsc2UsIHJlbW92ZUNsYXNzID10cnVlICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ub3RWYWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHsgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ub3RWYWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGludmFsaWRNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5JbnZhbGlkITwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGUgdGFibGUgaXMgbm90IHZhbGlkLiBQbGVhc2UgY29ycmVjdCByZWQgY2VsbHMgYW5kIHRyeSBhZ2Fpbi48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0xvYWRpbmcgPSBmYWxzZTsgLy8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNsb2FkaW5nRGl2JykuYWRkQ2xhc3MoJ25vU2hvdycpOyAvL2FkZENsYXNzID1mYWxzZSwgcmVtb3ZlQ2xhc3MgPXRydWUgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjbG9hZGluZ0RpdicpLmFkZENsYXNzKCdub1Nob3cnKTsgLy9uZWVkIHRvIGRvIHRoaXMgd2F5IGZvciBzb21lIHJlYXNvbiBjaGFuZ2luZyBib29sZWFuIGlzbid0IHdvcmtpbmcgLiAkcm9vdFNjb3BlIGVpdGhlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoJyNsb2FkaW5nRGl2JykuYWRkQ2xhc3MoJ25vU2hvdycpOyAvL2FkZENsYXNzID1mYWxzZSwgcmVtb3ZlQ2xhc3MgPXRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLiAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWxpZE1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+Tm90IGVub3VnaCBkYXRhIGluIHRoZSB0YWJsZSB0byB2YWxpZGF0ZS48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zYXZlIHVwZGF0ZXNcclxuICAgICAgICAgICAgICAgICRzY29wZS5zYXZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5keW5hbWljID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2hvc2VuRXZlbnROYW1lID0gJHNjb3BlLmV2ZW50cy5maWx0ZXIoZnVuY3Rpb24oZSl7cmV0dXJuIGUuZXZlbnRfaWQgPT0gJHNjb3BlLmNob3NlbkV2ZW50O30pWzBdLmV2ZW50X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBhc3RlZEhXTXMgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLnVwbG9hZEhXTXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRyb3AgdGhlIGxhc3QgMjAgc2luY2UgdGhleSBhcmUgZW1wdHlcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gcGFzdGVkSFdNcy5sZW5ndGg7IGktLTspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBhc3RlZEhXTXNbaV0uc2l0ZV9ubyA9PT0gdW5kZWZpbmVkIHx8IHBhc3RlZEhXTXNbaV0uc2l0ZV9ubyA9PT0gbnVsbCB8fCBwYXN0ZWRIV01zW2ldLnNpdGVfbm8gPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3RlZEhXTXMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXggPSBwYXN0ZWRIV01zLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0xvYWRpbmcgPSAndHJ1ZSc7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ub3RWYWxpZCA9IHRydWU7IC8vcmVzZXQgc28gdGhleSBkb24ndCBjbGljayBpdCBhZ2FpbiBiZWZvcmUgaGF2aW5nIHRvIHZhbGlkYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1Byb2dyZXNzQmFyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAvL25vIGdvIHRocnUgZWFjaCBhbmQgZ2V0IHJlc3Qgb2YgZmllbGRzIG5lZWRlZCBhbmQgcG9zdCBod21zXHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHBhc3RlZEhXTXMsIGZ1bmN0aW9uIChod20sIGluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHZhciBzaXRlUGVhayA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTSVRFLmdldFNlYXJjaGVkU2l0ZSh7IGJ5U2l0ZU5vOiBod20uc2l0ZV9ubyB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU0lURS5nZXRTaXRlUGVha3MoeyBpZDogcmVzcG9uc2Uuc2l0ZV9pZCB9LCBmdW5jdGlvbiAocGVha1Jlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBwZWFrUmVzcG9uc2UubGVuZ3RoOyBwKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgdGhlIHNpdGUgcGVhayBpcyBmb3IgdGhpcyBldmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVha1Jlc3BvbnNlW3BdLmV2ZW50X25hbWUgPT0gJHNjb3BlLmNob3NlbkV2ZW50TmFtZSkgeyAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlUGVha2FycmF5LnB1c2goW3Jlc3BvbnNlLnNpdGVfaWQsIHBlYWtSZXNwb25zZVtwXS5wZWFrX3N1bW1hcnlfaWRdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh3bS5zaXRlX2lkID0gcmVzcG9uc2Uuc2l0ZV9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBod20uZXZlbnRfaWQgPSAkc2NvcGUuY2hvc2VuRXZlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHdtLmZsYWdfbWVtYmVyX2lkID0gJHNjb3BlLiRwYXJlbnQudXNlcklEO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh3bS5mbGFnX2RhdGUgPSBtYWtlQWRhdGUoaHdtLmZsYWdfZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGh3bS5zdXJ2ZXlfZGF0ZSAhPT0gXCJcIiAmJiBod20uc3VydmV5X2RhdGUgIT09IHVuZGVmaW5lZCkgaHdtLnN1cnZleV9kYXRlID0gbWFrZUFkYXRlKGh3bS5zdXJ2ZXlfZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHdtLmhjb2xsZWN0X21ldGhvZF9pZCA9IGhvckNvbGxNZXRoTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGhjbSkgeyByZXR1cm4gaGNtLmhjb2xsZWN0X21ldGhvZCA9PSBod20uaGNvbGxlY3RfbWV0aG9kX2lkOyB9KVswXS5oY29sbGVjdF9tZXRob2RfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHdtLmhkYXR1bV9pZCA9IGhvcml6RGF0dW1MaXN0LmZpbHRlcihmdW5jdGlvbiAoaGQpIHsgcmV0dXJuIGhkLmRhdHVtX25hbWUgPT0gaHdtLmhkYXR1bV9pZDsgfSlbMF0uZGF0dW1faWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHdtLmh3bV9xdWFsaXR5X2lkID0gaHdtUXVhbExpc3QuZmlsdGVyKGZ1bmN0aW9uIChocSkgeyByZXR1cm4gaHEuaHdtX3F1YWxpdHkgPT0gaHdtLmh3bV9xdWFsaXR5X2lkOyB9KVswXS5od21fcXVhbGl0eV9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBod20uaHdtX3R5cGVfaWQgPSBod21UeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGh0KSB7IHJldHVybiBodC5od21fdHlwZSA9PSBod20uaHdtX3R5cGVfaWQ7IH0pWzBdLmh3bV90eXBlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh3bS5tYXJrZXJfaWQgPSBod20ubWFya2VyX2lkICE9PSBcIlwiICYmIGh3bS5tYXJrZXJfaWQgIT09IHVuZGVmaW5lZCA/IG1hcmtlckxpc3QuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1hcmtlcjEgPT0gaHdtLm1hcmtlcl9pZDsgfSlbMF0ubWFya2VyX2lkIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChod20uc3RpbGx3YXRlciAhPT0gXCJcIiAmJiBod20uc3RpbGx3YXRlciAhPT0gdW5kZWZpbmVkKSBod20uc3RpbGx3YXRlciA9IGh3bS5zdGlsbHdhdGVyID09IFwiTm9cIiA/IFwiMFwiIDogXCIxXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHdtLnZjb2xsZWN0X21ldGhvZF9pZCA9IGh3bS52Y29sbGVjdF9tZXRob2RfaWQgIT09IFwiXCIgJiYgaHdtLnZjb2xsZWN0X21ldGhvZF9pZCAhPT0gdW5kZWZpbmVkID8gdmVydENvbGxNZXRoTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHZjbSkgeyByZXR1cm4gdmNtLnZjb2xsZWN0X21ldGhvZCA9PSBod20udmNvbGxlY3RfbWV0aG9kX2lkOyB9KVswXS52Y29sbGVjdF9tZXRob2RfaWQgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHdtLnZkYXR1bV9pZCA9IGh3bS52ZGF0dW1faWQgIT09IFwiXCIgJiYgaHdtLnZkYXR1bV9pZCAhPT0gdW5kZWZpbmVkID8gdmVydERhdHVtTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHZkKSB7IHJldHVybiB2ZC5kYXR1bV9hYmJyZXZpYXRpb24gPT0gaHdtLnZkYXR1bV9pZDsgfSlbMF0uZGF0dW1faWQgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGh3bS5zdXJ2ZXlfZGF0ZSAhPT0gXCJcIiAmJiBod20uc3VydmV5X2RhdGUgIT09IHVuZGVmaW5lZCkgaHdtLnN1cnZleV9tZW1iZXJfaWQgPSAkc2NvcGUuJHBhcmVudC51c2VySUQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3cgcG9zdCBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaXRlTm8gPSBod20uc2l0ZV9ubztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgaHdtLnNpdGVfbm87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gKGxldCBzZXJ2aWNlcyBoYW5kbGUgdGhpcykgaHdtLmh3bV9sYWJlbCA9IFwiaHdtLVwiICsgcGFyc2VJbnQoaW5kZXggKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIV00uc2F2ZShod20pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGh3bVJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYXBwcm92ZSBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhXTS5hcHByb3ZlSFdNKHsgaWQ6IGh3bVJlc3BvbnNlLmh3bV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChhcHByb3ZhbFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBod21SZXNwb25zZS5hcHByb3ZhbF9pZCA9IGFwcHJvdmFsUmVzcG9uc2UuYXBwcm92YWxfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBod21SZXNwb25zZS5zaXRlX25vID0gc2l0ZU5vO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGh3bVJlc3BvbnNlLnN0aWxsd2F0ZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh3bVJlc3BvbnNlLnN0aWxsd2F0ZXIgPSBod21SZXNwb25zZS5zdGlsbHdhdGVyID4gMCA/IFwiWWVzXCIgOiBcIk5vXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaHdtUmVzcG9uc2Uuc3RpbGx3YXRlciA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2l0ZVBlYWtJZCA9ICRzY29wZS5zaXRlUGVha2FycmF5LmZpbHRlcihmdW5jdGlvbiAoc3ApIHsgcmV0dXJuIHNwWzBdID09IGh3bVJlc3BvbnNlLnNpdGVfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNpdGVQZWFrSWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhlcmUncyBhIHBlYWsgdGhpcyBod20gY291bGQgYmUgYWRkZWQgdG9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBod21SZXNwb25zZS5QZWFrU3VtbWFyeSA9IHNpdGVQZWFrSWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3Bvc3QgdGhlIGZpbGUgYW5kIGFkZCB0byB0aGUgaHdtIGJlZm9yZSBwdXNoaW5nIHRvIHBvc3RlZEhXTXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGVTb3VyY2UgPSB7IHNvdXJjZV9uYW1lOiAkc2NvcGUuYXBwcm92YWxTb3VyY2UuRlVMTG5hbWUsIGFnZW5jeV9pZDogJHNjb3BlLmFwcHJvdmFsU291cmNlLmFnZW5jeV9pZCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wb3N0IHNvdXJjZSBmaXJzdCB0byBnZXQgc291cmNlX2lkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTT1VSQ0Uuc2F2ZSh0aGVTb3VyY2UpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHNvdXJjZVJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hcHByb3ZhbEZpbGUuZmlsZXR5cGVfaWQgIT09IDgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90aGVuIFBPU1QgZmlsZVBhcnRzIChTZXJ2aWNlcyBwb3B1bGF0ZSBQQVRIKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZVBhcnRzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZUVudGl0eToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlX2lkOiAkc2NvcGUuYXBwcm92YWxGaWxlLmZpbGV0eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICRzY29wZS5hcHByb3ZhbEZpbGUuRmlsZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVfZGF0ZTogJHNjb3BlLmFwcHJvdmFsRmlsZS5maWxlX2RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9fZGF0ZTogJHNjb3BlLmFwcHJvdmFsRmlsZS5waG90b19kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAkc2NvcGUuYXBwcm92YWxGaWxlLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6IGh3bVJlc3BvbnNlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlX2lkOiBzb3VyY2VSZXNwb25zZS5zb3VyY2VfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9fZGlyZWN0aW9uOiAkc2NvcGUuYXBwcm92YWxGaWxlLnBob3RvX2RpcmVjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZV9kZDogJHNjb3BlLmFwcHJvdmFsRmlsZS5sYXRpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGVfZGQ6ICRzY29wZS5hcHByb3ZhbEZpbGUubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh3bV9pZDogaHdtUmVzcG9uc2UuaHdtX2lkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZTogJHNjb3BlLmFwcHJvdmFsRmlsZS5GaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07Ly9lbmQgZmlsZVBhcnRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbmVlZCB0byBwdXQgdGhlIGZpbGVQYXJ0cyBpbnRvIGNvcnJlY3QgZm9ybWF0IGZvciBwb3N0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZC5hcHBlbmQoXCJGaWxlRW50aXR5XCIsIEpTT04uc3RyaW5naWZ5KGZpbGVQYXJ0cy5GaWxlRW50aXR5KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZkLmFwcGVuZChcIkZpbGVcIiwgZmlsZVBhcnRzLkZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBQT1NUIGl0IChmaWxlcGFydHMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZJTEUudXBsb2FkRmlsZShmZCkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoZnJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBod21SZXNwb25zZS5IV01GaWxlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHdtUmVzcG9uc2UuSFdNRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hZGQgdG8gdGhlIGRvbmUgbGlzdCAobWFrZSBzdXJlIGl0J3Mgbm90IGFscmVhZHkgdGhlcmUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnBvc3RlZEhXTXMubWFwKGZ1bmN0aW9uIChwKSB7IHJldHVybiBwLmh3bV9pZDsgfSkuaW5kZXhPZihod21SZXNwb25zZS5od21faWQpIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiSFdNIHVwbG9hZGVkOiBod21faWQ6XCIgKyBod21SZXNwb25zZS5od21faWQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBvc3RlZEhXTXMucHVzaChod21SZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHRvYXN0ci5lcnJvcihcIkhXTSBcIiArIGh3bVJlc3BvbnNlLmh3bV9pZCArIFwiIGlzIGFscmVhZHkgaW4gdGhlIHN1Y2Nlc3NmdWxseSB1cGxvYWRlZCBsaXN0IGJlbG93LlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5keW5hbWljKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVUaGlzVXBsb2FkSFdNKGh3bVJlc3BvbnNlKTsgLy9yZW1vdmUgaXQgZnJvbSB0aGUgaGFuZHNvbnRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1Byb2dyZXNzQmFyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciB1cGxvYWRpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfS8vZW5kIGlmIGZpbGV0eXBlX2lkICE9PSA4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHByb3ZhbEZpbGUuc291cmNlX2lkID0gc291cmNlUmVzcG9uc2Uuc291cmNlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXBwcm92YWxGaWxlLnNpdGVfaWQgPSBod21SZXNwb25zZS5zaXRlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXBwcm92YWxGaWxlLmh3bV9pZCA9IGh3bVJlc3BvbnNlLmh3bV9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFwcHJvdmFsRmlsZS5wYXRoID0gJzxsaW5rPic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZJTEUuc2F2ZSgkc2NvcGUuYXBwcm92YWxGaWxlKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChmcmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGh3bVJlc3BvbnNlLkhXTUZpbGVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBod21SZXNwb25zZS5IV01GaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FkZCB0byB0aGUgZG9uZSBsaXN0IChtYWtlIHN1cmUgaXQncyBub3QgYWxyZWFkeSB0aGVyZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucG9zdGVkSFdNcy5tYXAoZnVuY3Rpb24gKHApIHsgcmV0dXJuIHAuaHdtX2lkOyB9KS5pbmRleE9mKGh3bVJlc3BvbnNlLmh3bV9pZCkgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJIV00gdXBsb2FkZWQ6IGh3bV9pZDpcIiArIGh3bVJlc3BvbnNlLmh3bV9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBvc3RlZEhXTXMucHVzaChod21SZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHRvYXN0ci5lcnJvcihcIkhXTSBcIiArIGh3bVJlc3BvbnNlLmh3bV9pZCArIFwiIGlzIGFscmVhZHkgaW4gdGhlIHN1Y2Nlc3NmdWxseSB1cGxvYWRlZCBsaXN0IGJlbG93LlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5keW5hbWljKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZW1vdmVUaGlzVXBsb2FkSFdNKGh3bVJlc3BvbnNlKTsgLy9yZW1vdmUgaXQgZnJvbSB0aGUgaGFuZHNvbnRhYmxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSFdNZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1Byb2dyZXNzQmFyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgZWxzZSAoZmlsZXR5cGVfaWQgZG9lcyA9PSA4KSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChzb3VyY2VFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93TG9hZGluZyA9ICdmYWxzZSc7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5vcHRpb25zLnRpbWVPdXQgPSBcIjBcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIub3B0aW9ucy5jbG9zZUJ1dHRvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dQcm9ncmVzc0JhciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHVwbG9hZGluZyBhcHByb3ZhbCBGaWxlIFNvdXJjZTogXCIgKyBzb3VyY2VFcnJvci5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoYXBwcm92ZUVycm9yKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93TG9hZGluZyA9ICdmYWxzZSc7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLm9wdGlvbnMudGltZU91dCA9IFwiMFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLm9wdGlvbnMuY2xvc2VCdXR0b24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dQcm9ncmVzc0JhciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3IgYXBwcm92aW5nIGh3bTogXCIgKyBhcHByb3ZlRXJyb3Iuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIGFwcHJvdmUgaHdtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGh3bVNhdmVFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0xvYWRpbmcgPSAnZmFsc2UnOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLm9wdGlvbnMudGltZU91dCA9IFwiMFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIub3B0aW9ucy5jbG9zZUJ1dHRvbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93UHJvZ3Jlc3NCYXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3IgdXBsb2FkaW5nIGh3bTogXCIgKyBod21TYXZlRXJyb3Iuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZ2V0U2l0ZVBlYWtFcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93UHJvZ3Jlc3NCYXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJTb21ldGhpbmcgd2VudCB3cm9uZyBnZXR0aW5nIHNpdGVQZWFrXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChnZXRId21TaXRlRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93TG9hZGluZyA9ICdmYWxzZSc7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLm9wdGlvbnMudGltZU91dCA9IFwiMFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLm9wdGlvbnMuY2xvc2VCdXR0b24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dQcm9ncmVzc0JhciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3IgZ2V0dGluZyBzaXRlIGluZm9ybWF0aW9uIGZvciBcIiArIGh3bS5zaXRlX25vICsgXCIuIFNpdGUgZG9lcyBub3QgZXhpc3QuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAkc2NvcGUuc2hvd1Byb2dyZXNzQmFyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vcmVzZXQgYmFjayBcclxuICAgICAgICAgICAgICAgICRzY29wZS5jbGVhclRhYmxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNldE1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5XYXJuaW5nISBUaGlzIHdpbGwgcmVtb3ZlIGFsbCBod21zIGZyb20gdGhlIHRhYmxlLjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwiY2FuY2VsKClcIj5DYW5jZWw8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc2V0TW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXBsb2FkSFdNcyA9IFtdOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmludmFsaWRzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ub3RWYWxpZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIGNoYW5nZSBzb3J0aW5nIG9yZGVyXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc29ydF9ieSA9IGZ1bmN0aW9uIChuZXdTb3J0aW5nT3JkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnNvcnRpbmdPcmRlciA9PSBuZXdTb3J0aW5nT3JkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJldmVyc2UgPSAhJHNjb3BlLnJldmVyc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zb3J0aW5nT3JkZXIgPSBuZXdTb3J0aW5nT3JkZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWNvbiBzZXR1cFxyXG4gICAgICAgICAgICAgICAgICAgICQoJ3RoIGknKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWNvbiByZXNldFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCkuYWRkQ2xhc3MoJ2dseXBoaWNvbiBnbHlwaGljb24tc29ydCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucmV2ZXJzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCd0aC4nICsgbmV3U29ydGluZ09yZGVyICsgJyBpJykucmVtb3ZlQ2xhc3MoKS5hZGRDbGFzcygnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgndGguJyArIG5ld1NvcnRpbmdPcmRlciArICcgaScpLnJlbW92ZUNsYXNzKCkuYWRkQ2xhc3MoJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1kb3duJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gc3VjY2Vzc2Z1bGx5IFVwbG9hZGVkIFRhYmxlIHN0dWZmIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuXHJcbiAgICAgICAgICAgICAgICAvL3RoZXkgY2xpY2tlZCB0aGUgc2l0ZSBubyBpbiB0aGUgZmluaXNoZWQgdGFibGUgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZ29Ub1NpdGVEYXNoID0gZnVuY3Rpb24gKHNpdGVJRCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vc2hvdyB3YXJuaW5nIG1vZGFsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdhcm5pbmdNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5XYXJuaW5nITwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5Zb3UgYXJlIGFib3V0IHRvIGxlYXZlIHRoZSBCdWxrIEhXTSBVcGxvYWRlci48YnIgLz5JbiBkb2luZyBzbywgeW91IHdpbGwgbm8gbG9uZ2VyIGJlIGFibGUgdG8gc2VlIHRoZSBsaXN0IG9mIHN1Y2Nlc3NmdWxseSB1cGxvYWRlZCBIV01zLjwvcD48cD5BcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gbGVhdmUgdGhpcyBwYWdlPzwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4td2FybmluZ1wiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPlllczwvYnV0dG9uPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cImNhbmNlbCgpXCIgbmctY2xpY2s9XCJjYW5jZWwoKVwiPkNhbmNlbDwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uoc2l0ZUlEKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgd2FybmluZ01vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChzaXRlSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdzaXRlLmRhc2hib2FyZCcsIHsgaWQ6IHNpdGVJZCB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvL2RlbGV0ZSB0aGlzIGh3bSBhbmQgcmVtb3ZlIGZyb20gZG9uZSB0YWJsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkRlbGV0ZUhXTSA9IGZ1bmN0aW9uIChod20pIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVsSW5kZXggPSAkc2NvcGUucG9zdGVkSFdNcy5pbmRleE9mKGh3bSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9UT0RPOjogRGVsZXRlIHRoZSBmaWxlcyBmb3IgdGhpcyBod20gdG9vIG9yIHJlYXNzaWduIHRvIHRoZSBTaXRlPz8gU2VydmljZXMgb3IgY2xpZW50IGhhbmRsaW5nP1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBEZWxldGVNb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBod207XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkhXTVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgRGVsZXRlTW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoaHdtVG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBIV00uZGVsZXRlKHsgaWQ6IGh3bVRvUmVtb3ZlLmh3bV9pZCB9LCBod21Ub1JlbW92ZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSFdNRmlsZXMgPSBbXTsgLy9jbGVhciBvdXQgaHdtRmlsZXMgZm9yIHRoaXMgaHdtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgJHNjb3BlLmh3bUltYWdlRmlsZXMgPSBbXTsgLy9jbGVhciBvdXQgaW1hZ2UgZmlsZXMgZm9yIHRoaXMgaHdtXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJIV00gUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wb3N0ZWRIV01zLnNwbGljZSgkc2NvcGUuZGVsSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlbEluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07IC8vZW5kIERlbGV0ZUhXTSAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy93YW50IHRvIGVkaXQgaHdtIG9yIGFkZCBmaWxlcyB0byBpdFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk9wZW5IV01FZGl0ID0gZnVuY3Rpb24gKEhXTWNsaWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFzc0FsbExpc3RzID0gW2h3bVR5cGVMaXN0LCBod21RdWFsTGlzdCwgaG9yaXpEYXR1bUxpc3QsIGhvckNvbGxNZXRoTGlzdCwgdmVydERhdHVtTGlzdCwgdmVydENvbGxNZXRoTGlzdCwgbWFya2VyTGlzdCwgZXZlbnRMaXN0XTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXhDbGlja2VkID0gJHNjb3BlLnBvc3RlZEhXTXMuaW5kZXhPZihIV01jbGlja2VkKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2l0ZU5vID0gSFdNY2xpY2tlZC5zaXRlX25vO1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSB0cnVlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAvL21vZGFsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGh3bUVkaXRJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdIV01fTW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxEcm9wZG93bnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFzc0FsbExpc3RzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNIV006IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSFdNY2xpY2tlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXRlSE1XczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBIV00uZ2V0RXZlbnRTaXRlSFdNcyh7IHNpdGVJZDogSFdNY2xpY2tlZC5zaXRlX2lkLCBFdmVudDogSFdNY2xpY2tlZC5ldmVudF9pZCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBod21TaXRlOiBmdW5jdGlvbiAoKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU0lURS5xdWVyeSh7IGlkOiBIV01jbGlja2VkLnNpdGVfaWQgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWdlbmN5TGlzdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhZ2VuY2llc0xpc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsTWVtYmVyczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1FTUJFUi5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlVHlwZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsZVR5cGVzTGlzdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2h3bUVkaXRNb2RhbEN0cmwnLy9lbmQgbW9kYWwgY29udHJvbGxlclxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGh3bUVkaXRJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoaHdtVXBkYXRlZEFOREZpbGVDbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGggPSBod21VcGRhdGVkQU5ERmlsZUNudFswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVzID0gaHdtVXBkYXRlZEFOREZpbGVDbnRbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGguc2l0ZV9ubyA9IHNpdGVObzsgLy9hZGQgYmFjayB0aGUgc2l0X25vXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWRkIGZpbGVzIGNvdW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGguSFdNRmlsZXMgPSBmaWxlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9maXggc3RpbGx3YXRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaC5zdGlsbHdhdGVyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGguc3RpbGx3YXRlciA9IGguc3RpbGx3YXRlciA+IDAgPyBcIlllc1wiIDogXCJOb1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaC5zdGlsbHdhdGVyID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy91cGRhdGUgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucG9zdGVkSFdNc1tpbmRleENsaWNrZWRdID0gaDtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gc3VjY2Vzc2Z1bGx5IFVwbG9hZGVkIFRhYmxlIHN0dWZmIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIEhXTSBQRUFLIFwiYWRkL2VkaXRcIiBjbGlja2VkIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk9wZW5QZWFrRWRpdCA9IGZ1bmN0aW9uIChwZWFrSWQsc2l0ZUlkLCBldmVudElkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IHRydWU7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGVha0VkaXRJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdQZWFrRWRpdF9Nb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbENvbGxlY3RDb25kaXRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOU1RfQ09MTF9DT05ESVRJT04uZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsVmVydERhdHVtczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2ZXJ0RGF0dW1MaXN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNQZWFrOiBmdW5jdGlvbiAoKSB7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUEVBSy5xdWVyeSh7IGlkOiBwZWFrSWQgfSkuJHByb21pc2U7ICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNQZWFrREZzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBFQUsuZ2V0UGVha1N1bW1hcnlERnMoeyBpZDogcGVha0lkIH0pLiRwcm9taXNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVha1NpdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU0lURS5xdWVyeSh7aWQ6IHNpdGVJZH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbE1lbWJlcnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNRU1CRVIuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsRXZlbnRIV01zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEhXTS5nZXRGaWx0ZXJlZEhXTXMoeyBFdmVudDogJHNjb3BlLmNob3NlbkV2ZW50LCBFdmVudFN0YXR1czogMCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxTaXRlRmlsZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU0lURS5nZXRTaXRlRmlsZXMoeyBpZDogc2l0ZUlkIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFNpdGVTZW5zb3JzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNJVEUuZ2V0U2l0ZVNlbnNvcnMoeyBpZDogc2l0ZUlkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAncGVha01vZGFsQ3RybCdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBwZWFrRWRpdEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICh1cGRhdGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdXBkYXRlZFswXSB3aWxsIGJlIHRoZSBwZWFrLCB1cGRhdGVkWzFdIHdpbGwgYmUgJ3VwZGF0ZWQnXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk9wZW5QZWFrQ3JlYXRlID0gZnVuY3Rpb24gKHNpdGVJZCwgZXZlbnRJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSB0cnVlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAvL21vZGFsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHBlYWtDcmVhdGVJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdQZWFrRWRpdF9Nb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbENvbGxlY3RDb25kaXRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIElOU1RfQ09MTF9DT05ESVRJT04uZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsVmVydERhdHVtczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2ZXJ0RGF0dW1MaXN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNQZWFrOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiZW1wdHlcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUGVha0RGczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcImVtcHR5XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGVha1NpdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU0lURS5xdWVyeSh7IGlkOiBzaXRlSWQgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsTWVtYmVyczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1FTUJFUi5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxFdmVudEhXTXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSFdNLmdldEZpbHRlcmVkSFdNcyh7IEV2ZW50OiAkc2NvcGUuY2hvc2VuRXZlbnQsIEV2ZW50U3RhdHVzOiAwIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFNpdGVGaWxlczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTSVRFLmdldFNpdGVGaWxlcyh7IGlkOiBzaXRlSWQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsU2l0ZVNlbnNvcnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU0lURS5nZXRTaXRlU2Vuc29ycyh7IGlkOiBzaXRlSWQgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdwZWFrTW9kYWxDdHJsJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHBlYWtDcmVhdGVJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoY3JlYXRlZFBrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY3JlYXRlZFBrWzBdIHdpbGwgYmUgdGhlIHBlYWssIGNyZWF0ZWRQa1sxXSB3aWxsIGJlICdjcmVhdGVkJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2FkZCB0aGlzICdQZWFrU3VtbWFyeScgW3NpdGVfaWQsIHBlYWtfc3VtbWFyeV9pZF0gdG8gZWFjaCBod20gaW4gcG9zdGVkSFdNcyB0aGF0IGhhdmUgdGhpcyBzaXRlSWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5wb3N0ZWRIV01zLCBmdW5jdGlvbiAocEhXTSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHBIV00uc2l0ZV9pZCA9PSBzaXRlSWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwSFdNLlBlYWtTdW1tYXJ5ID0gW3NpdGVJZCwgY3JlYXRlZFBrWzBdLnBlYWtfc3VtbWFyeV9pZF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIEhXTSBQRUFLIFwiYWRkL2VkaXRcIiBjbGlja2VkLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIGhhbmRzb250YWJsZSBzZXR0aW5nc1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnRhYmxlU2V0dGluZ3MgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb2xIZWFkZXJzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbEhlYWRlcnM6IFsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIHRpdGxlPVwiUmVxdWlyZWRcIj5XYXRlcmJvZHkgKjwvc3Bhbj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gdGl0bGU9XCJJZGVudGlmeWluZyBMYWJlbC4gSWYgbGVmdCBibGFuaywgZGVmYXVsdHMgdG8gJnF1b3Q7bm9fbGFiZWwmcXVvdDtcIj5IV00gTGFiZWw8L3NwYW4+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIHRpdGxlPVwiUmVxdWlyZWRcIj5IV00gVHlwZSAqPC9zcGFuPicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiTWFya2VyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiB0aXRsZT1cIlJlcXVpcmVkXCI+SFdNIEVudmlyb25tZW50ICo8L3NwYW4+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJIV00gVW5jZXJ0YWludHkgKGZ0KVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gdGl0bGU9XCJSZXF1aXJlZFwiPkhXTSBRdWFsaXR5ICo8L3NwYW4+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJCYW5rXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiTG9jLiBEZXNjcmlwdGlvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gdGl0bGU9XCJSZXF1aXJlZFwiPkhXTSBMYXRpdHVkZSAqPC9zcGFuPicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiB0aXRsZT1cIlJlcXVpcmVkXCI+SFdNIExvbmdpdHVkZSAqPC9zcGFuPicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiB0aXRsZT1cIlJlcXVpcmVkXCI+SG9yaXpvbnRhbCBEYXR1bSAqPC9zcGFuPicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiB0aXRsZT1cIlJlcXVpcmVkXCI+SG9yaXpvbnRhbCBDb2xsZWN0IE1ldGhvZCAqPC9zcGFuPicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8c3BhbiB0aXRsZT1cIkhlaWdodCBhYm92ZSBncm91bmRcIj5IQUcgKGZ0KTwvc3Bhbj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPHNwYW4gdGl0bGU9XCJSZXF1aXJlZFwiPkZsYWcvRm91bmQgRGF0ZSAqPC9zcGFuPicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiU3VydmV5IERhdGVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJTdXJ2ZXllZCBFbGV2IChmdClcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJWZXJ0aWNhbCBEYXR1bVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBcIlZlcnRpY2FsIENvbGxlY3QgTWV0aG9kXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiU3VydmV5IFVuY2VydGFpbnR5IChmdClcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCJOb3Rlc1wiLCBcIlRyYW5xdWlsL1N0aWxsd2F0ZXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxzcGFuIHRpdGxlPVwiU2l0ZSBOdW1iZXIsIFJlcXVpcmVkXCI+IFNpdGUgTm8gKjwvc3Bhbj4nXHJcbiAgICAgICAgICAgICAgICAgICAgXSwgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHJvd0hlYWRlcnM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgbWluU3BhcmVSb3dzOiAxMCxcclxuICAgICAgICAgICAgICAgICAgICBtYXhSb3dzOiAxMCxcclxuICAgICAgICAgICAgICAgICAgICBhZnRlckluaXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmhvdEluc3RhbmNlID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbHVtblNvcnRpbmc6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hbnVhbENvbHVtblJlc2l6ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBtYW51YWxSb3dSZXNpemU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgd29yZFdyYXA6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHByZXZlbnRPdmVyZmxvdzogJ2hvcml6b250YWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIHZpZXdwb3J0Q29sdW1uUmVuZGVyaW5nT2Zmc2V0TnVtYmVyOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbFdpZHRoczogJHNjb3BlLmNvbHVtbldpZHRocyxcclxuICAgICAgICAgICAgICAgICAgICAvL2ludGVyZXN0aW5nLS0gY291bGQgdXNlIHRoaXMgZm9yIGhvdmVyIHRleHQgb24gaW52YWxpZHMgbWF5YmVcclxuICAgICAgICAgICAgICAgICAgICAvL2FmdGVyT25DZWxsTW91c2VPdmVyOmZ1bmN0aW9uIChldmVudCwgY29vcmRzLCB0ZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgIHZhciB0ZXN0ID0gJ2hpJztcclxuICAgICAgICAgICAgICAgICAgICAvL30sXHJcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXJPbkNlbGxNb3VzZURvd246IGZ1bmN0aW9uIChldmVudCwgY29vcmRzLCB0ZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL29wZW4gbW9kYWwgZm9yIHNpdGVOb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL29wZW4gbXVsdGktc2VsZWN0IG1vZGFsIGZvciByZXNvdXJjZXMsIG1lZGlhIG9yIGZyZXF1ZW5jaWVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb29yZHMuY29sID09PSAyMiAmJiBldmVudC5yZWFsVGFyZ2V0LmNsYXNzTmFtZSA9PSBcImh0QXV0b2NvbXBsZXRlQXJyb3dcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVOb0Fycm93Q2xpY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFzc0hXTXZhbHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhc3NIV012YWxzLnB1c2goJHNjb3BlLmhvdEluc3RhbmNlLmdldERhdGFBdENlbGwoY29vcmRzLnJvdywgMCkpOyAvL3dhdGVyYm9keVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc0hXTXZhbHMucHVzaCgkc2NvcGUuaG90SW5zdGFuY2UuZ2V0RGF0YUF0Q2VsbChjb29yZHMucm93LCA5KSk7IC8vbGF0IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc0hXTXZhbHMucHVzaCgkc2NvcGUuaG90SW5zdGFuY2UuZ2V0RGF0YUF0Q2VsbChjb29yZHMucm93LCAxMCkpOyAvL2xvbmcgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFzc0hXTXZhbHMucHVzaCgkc2NvcGUuaG90SW5zdGFuY2UuZ2V0RGF0YUF0Q2VsbChjb29yZHMucm93LCAxMSkpOyAvL2hkYXR1bSAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXNzSFdNdmFscy5wdXNoKCRzY29wZS5ob3RJbnN0YW5jZS5nZXREYXRhQXRDZWxsKGNvb3Jkcy5yb3csIDEyKSk7IC8vaGNvbGxlY3RtZXRoZCBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBnZXRGaW5kU2l0ZU1vZGFsKGNvb3Jkcy5yb3csIGNvb3Jkcy5jb2wsIHBhc3NIV012YWxzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dE1lbnU6IFsncmVtb3ZlX3JvdyddLFxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIG9uQWZ0ZXJWYWxpZGF0ZTogZnVuY3Rpb24gKGlzVmFsaWQsIHZhbHVlLCByb3csIHByb3AsIHNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW52YWxpZHMucHVzaCh7IFwiaXNWYWxpZFwiOiBpc1ZhbGlkLCBcInJvd1wiOiByb3csIFwicHJvcFwiOiBwcm9wIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdkkgPSAwOyB2SSA8ICRzY29wZS5pbnZhbGlkcy5sZW5ndGg7IHZJKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmludmFsaWRzW3ZJXS5yb3cgPT0gcm93ICYmICRzY29wZS5pbnZhbGlkc1t2SV0ucHJvcCA9PSBwcm9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZJbmRleCA9IHZJO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodkluZGV4ID4gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmludmFsaWRzLnNwbGljZSh2SW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgXHJcbiAgICAgICAgICAgICAgICAgICAgb25BZnRlckNoYW5nZTogZnVuY3Rpb24gKGNoYW5nZSwgc291cmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc291cmNlIGNhbiBiZSAnbG9hZERhdGEnIChmaXJzdCB0aW1lKSwgJ2VkaXQnIChvbmUgY2VsbCBhdCBhIHRpbWUpLCAncGFzdGUnIChidW5jaCBhdCBhIHRpbWUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2hhbmdlIGlzIGFuIGFycmF5IGNvbnRhaW5pbmcgYXJyYXlzIGZvciBlYWNoIGNvbHVtbiBhZmZlY3RlZDogWzBdID0gcm93LCBbMV0gPSBkYXRhTmFtZSwgWzJdID0gdmFsdWUgaXQgd2FzLCBbM10gPSB2YWx1ZSBpdCBpcyAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoc291cmNlICE9ICdsb2FkRGF0YScpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgY2hhbmdlLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9vbmx5IGNhcmUgaWYgaXQgd2FzIGFjdHVhbGx5IGNoYW5nZWQgLS0gbWFrZSB0aGVtIHZhbGlkYXRlIGFnYWluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNoYW5nZVtpXVsyXSAhPT0gY2hhbmdlW2ldWzNdICYmICRzY29wZS5ub3RWYWxpZCA9PT0gZmFsc2UpICRzY29wZS5ub3RWYWxpZCA9IHRydWU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0vL2VuZCBmb3JlYWNoIGNoYW5nZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBvbkFmdGVyUmVtb3ZlUm93OiBmdW5jdGlvbiAoaW5kZXgsIGFtb3VudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmIGFueSAkc2NvcGUuaW52YWxpZHNbaV0ucm93ID09IGluZGV4IHRoZW4gc3BsaWNlIGl0IG91dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWQgPSAkc2NvcGUuaG90SW5zdGFuY2UuZ2V0U2VsZWN0ZWQoKTsgLy9bc3RhcnRSb3csIHN0YXJ0Q29sLCBlbmRSb3csIGVuZENvbF1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFtb3VudCA+IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbW9yZSB0aGFuIDEgcm93IGJlaW5nIGRlbGV0ZWQuIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVhY2hSb3dJbmRleEFycmF5ID0gW107IC8vaG9sZGVyIGZvciBhcnJheSBpbmRleCB0byBsb29wIHRocnUgZm9yIHNwbGljaW5nIGludmFsaWRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY250ID0gKHNlbGVjdGVkWzJdIC0gc2VsZWN0ZWRbMF0gKyAxKTsgLy9naXZlcyBtZSBjb3VudCBvZiBzZWxlY3RlZCByb3dzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlYWNoUm93SW5kZXhBcnJheS5wdXNoKHNlbGVjdGVkWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGMgPSAxOyBjIDwgY250OyBjKyspXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZWFjaFJvd0luZGV4QXJyYXkucHVzaChzZWxlY3RlZFswXSArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9sb29wIHRocnUgaW52YWxpZHMgdG8gc2VlIGlmIGFueSBhcmUgaW4gdGhlIGRlbGV0aW5nIHJvd3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIE1pID0gJHNjb3BlLmludmFsaWRzLmxlbmd0aDsgTWktLTspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWFjaFJvd0luZGV4QXJyYXkuaW5kZXhPZigkc2NvcGUuaW52YWxpZHNbTWldLnJvdykgPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmludmFsaWRzLnNwbGljZShNaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2p1c3QgMSByb3cgc2VsZWN0ZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAkc2NvcGUuaW52YWxpZHMubGVuZ3RoOyBpLS07KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5pbnZhbGlkc1tpXS5yb3cgPT0gaW5kZXgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbnZhbGlkcy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIGhhbmRzb250YWJsZSBzZXR0aW5nc1xyXG4gICAgICAgICAgICB9Ly9lbmQgYXV0aG9yaXplZFxyXG4gICAgICAgIH1dKTtcclxuXHJcbiAgICAvL2NvbnRyb2xsZXIgZm9yIHRoZSBod20gc2l0ZSBObyBtb2RhbCB0aGF0IGNvbWVzIHVwIHdoZW4gY2xpY2tpbmcgdGhlIGRyb3Bkb3duIGFycm93IGluIHRoZSBzaXRlIG5vIGNlbGwgaW4gdGhlIGhhbmRzb250YWJsZVxyXG4gICAgU1ROQ29udHJvbGxlcnMuY29udHJvbGxlcignaHdtU2l0ZU1vZGFsQ3RybCcsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGh0dHAnLCAnJGNvb2tpZXMnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCAnbmVhckJ5U2l0ZXMnLCAnSFdNcGFydHMnLCAnc2l0ZU5vQWxyZWFkeVRoZXJlJywgJ2hkYXR1bXMnLCAnaGNvbE1ldGhzJywgJ3ZkYXR1bXMnLCAndmNvbE1ldGhzJywgJ3N0YXRlcycsICdjb3VudGllcycsICdsZWFmbGV0RGF0YScsICdsZWFmbGV0TWFya2VyRXZlbnRzJywgJ0dFT0NPREUnLCAnU0lURScsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJGh0dHAsICRjb29raWVzLCAkdWliTW9kYWxJbnN0YW5jZSwgbmVhckJ5U2l0ZXMsIEhXTXBhcnRzLCBzaXRlTm9BbHJlYWR5VGhlcmUsIGhkYXR1bXMsIGhjb2xNZXRocywgdmRhdHVtcywgdmNvbE1ldGhzLCBzdGF0ZXMsIGNvdW50aWVzLCBsZWFmbGV0RGF0YSwgbGVhZmxldE1hcmtlckV2ZW50cywgR0VPQ09ERSwgU0lURSkge1xyXG4gICAgICAgICAgICAkc2NvcGUubG9jYWxTaXRlcyA9IG5lYXJCeVNpdGVzO1xyXG4gICAgICAgICAgICAkc2NvcGUuaG9yRGF0dW1zID0gaGRhdHVtcztcclxuICAgICAgICAgICAgJHNjb3BlLmhvckNvbGxNZXRocyA9IGhjb2xNZXRocztcclxuICAgICAgICAgICAgJHNjb3BlLnZlcnREYXR1bXMgPSB2ZGF0dW1zO1xyXG4gICAgICAgICAgICAkc2NvcGUudmVydENvbGxNZXRocyA9IHZjb2xNZXRocztcclxuICAgICAgICAgICAgJHNjb3BlLnN0YXRlcyA9IHN0YXRlcztcclxuICAgICAgICAgICAgJHNjb3BlLmNvdW50aWVzID0gY291bnRpZXM7XHJcbiAgICAgICAgICAgICRzY29wZS5zaG93U2l0ZUNyZWF0ZUFyZWEgPSBmYWxzZTsgLy9jcmVhdGUgbmV3IHNpdGUgY2hlY2tib3ggY2xpY2sgdG9nZ2xlIHNob3cvaGlkZSBcclxuICAgICAgICAgICAgJHNjb3BlLmRpc2FibGVPSyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkc2NvcGUuY3JlYXRlQ2hlY2tlZCA9IFwiMFwiOyAvLyBkZWZhdWx0IGlzIHVuY2hlY2tlZCBvbiBjcmVhdGUgbmV3IHNpdGVcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dNYXAgPSBmYWxzZTsgLy9zaG93IG1hcCB0b2dnbGUgKG9ubHkgc2hvd3MgaWYgdGhlcmUgYXJlIHNpdGVzIGluIHRoZSBsb2NhbFNpdGVzIGxpc3RcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dIaWRlTWFwID0gXCJTaG93XCI7XHJcbiAgICAgICAgICAgIC8vIHNob3cvaGlkZSBjcmVhdGUgc2l0ZSBhcmVhXHJcbiAgICAgICAgICAgICRzY29wZS5zaG93SGlkZUNyZWF0ZVNpdGVEaXYgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1NpdGVDcmVhdGVBcmVhID0gISRzY29wZS5zaG93U2l0ZUNyZWF0ZUFyZWE7XHJcbiAgICAgICAgICAgICAgICAvL3Vuc2VsZWN0IGFsbCByYWRpbyBidXR0b25zIChpZiBleGlzdGluZyBuZWFyYnkgc2l0ZXMpXHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmxvY2FsU2l0ZXMsIGZ1bmN0aW9uIChzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHMuc2VsZWN0ZWQ7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vcmVtb3ZlL3Nob3cgT0sgYnV0dG9uIGZyb20gYm90dG9tIG9mIG1vZGFsXHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnNob3dTaXRlQ3JlYXRlQXJlYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kaXNhYmxlT0sgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93TWFwID0gZmFsc2U7ICRzY29wZS5zaG93SGlkZU1hcCA9ICRzY29wZS5zaG93SGlkZU1hcCA9PSBcIlNob3dcIiA/IFwiSGlkZVwiIDogXCJTaG93XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9wb3B1bGF0ZSBuZXdTaXRlIHdpdGggaHdtIHBhcnRzIGlmIHByZXNlbnQgIDA6d2F0ZXJib2R5LCAxOmxhdCwgMjpsb25nLCAzOmhkYXR1bSwgNDpoY29sbGVjdG1ldGhkXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1NpdGUud2F0ZXJib2R5ID0gSFdNcGFydHNbMF0gIT09IFwiXCIgJiYgSFdNcGFydHNbMF0gIT09IG51bGwgPyBIV01wYXJ0c1swXSA6IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1NpdGUubGF0aXR1ZGVfZGQgPSBIV01wYXJ0c1sxXSAhPT0gXCJcIiAmJiBIV01wYXJ0c1sxXSAhPT0gbnVsbCA/IEhXTXBhcnRzWzFdIDogXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3U2l0ZS5sb25naXR1ZGVfZGQgPSBIV01wYXJ0c1syXSAhPT0gXCJcIiAmJiBIV01wYXJ0c1syXSAhPT0gbnVsbCA/IEhXTXBhcnRzWzJdIDogXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3U2l0ZS5oZGF0dW1faWQgPSBIV01wYXJ0c1szXSAhPT0gXCJcIiAmJiBIV01wYXJ0c1szXSAhPT0gbnVsbCA/ICRzY29wZS5ob3JEYXR1bXMuZmlsdGVyKGZ1bmN0aW9uIChoZCkgeyByZXR1cm4gaGQuZGF0dW1fbmFtZSA9PSBIV01wYXJ0c1szXTsgfSlbMF0uZGF0dW1faWQgOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdTaXRlLmhjb2xsZWN0X21ldGhvZF9pZCA9IEhXTXBhcnRzWzRdICE9PSBcIlwiICYmIEhXTXBhcnRzWzRdICE9PSBudWxsID8gJHNjb3BlLmhvckNvbGxNZXRocy5maWx0ZXIoZnVuY3Rpb24gKGhkKSB7IHJldHVybiBoZC5oY29sbGVjdF9tZXRob2QgPT0gSFdNcGFydHNbNF07IH0pWzBdLmhjb2xsZWN0X21ldGhvZF9pZCA6IFwiXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vZ2V0QWRkcmVzcyB3aXRoIGxhdC9sb25nXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldEFkZHJlc3MoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGVsc2UgJHNjb3BlLmRpc2FibGVPSyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgLy9tYWtlIGFsbCBtYXJrZXJzIChpZiBhbnkpIGRlZmF1bHQgYmx1ZSAodW5zZWxlY3RlZClcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUubWFya2VycywgZnVuY3Rpb24gKG1tKSB7IGlmIChtbS5sYXllciA9PSAnc3RuU2l0ZXMnKSBtbS5pY29uID0gaWNvbnMuc3RuOyB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9pZiB0aGV5IGNoZWNrIGEgcmFkaW8gYnV0dG9uIChjaG9zZSBhIHNpdGUpIG1ha2Ugc3VyZSB0aGUgY2hlY2tib3ggZm9yIG5ldyBzaXRlIGlzIHVuY2hlY2tlZC5cclxuICAgICAgICAgICAgJHNjb3BlLnVuY2hrQ3JlYXRlID0gZnVuY3Rpb24gKGNoZWNrZWRTaXRlKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY3JlYXRlQ2hlY2tlZCA9IFwiMFwiO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dTaXRlQ3JlYXRlQXJlYSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgLy9jaGFuZ2UgaWNvbiBjb2xvciBvZiB0aGF0IG1hcmtlciBpbiBtYXBcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUubWFya2VycywgZnVuY3Rpb24gKG0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobS5sYXllciA9PSAnc3RuU2l0ZXMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtLmxhdCA9PSBjaGVja2VkU2l0ZS5sYXRpdHVkZV9kZCAmJiBtLmxuZyA9PSBjaGVja2VkU2l0ZS5sb25naXR1ZGVfZGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBtLmljb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmljb24gPSBpY29ucy5zZWxlY3RlZFN0bjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIG0uaWNvbiA9IGljb25zLnN0bjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRpc2FibGVPSyA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyBzaG93L2hpZGUgdGhlIG1hcCBcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dTaXRlc09uTWFwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dNYXAgPSAhJHNjb3BlLnNob3dNYXA7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0hpZGVNYXAgPSAkc2NvcGUuc2hvd0hpZGVNYXAgPT0gXCJTaG93XCIgPyBcIkhpZGVcIiA6IFwiU2hvd1wiO1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5zaG93TWFwKSBmaXRNYXBCb3VuZHMoKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vbWFwIHN0dWZmXHJcbiAgICAgICAgICAgICRzY29wZS5tYXJrZXJzID0gW107XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgIHZhciBpY29ucyA9IHtcclxuICAgICAgICAgICAgICAgIHN0bjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgICAgIGljb25TaXplOiBbMTAsIDEwXSxcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdzdG5TaXRlSWNvbidcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBzZWxlY3RlZFN0bjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgICAgIGljb25TaXplOiBbMTQsIDE0XSxcclxuICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICduZXdTaXRlSWNvbidcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBod21JY29uOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAgaWNvblNpemU6IFsxNiwgMjBdLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3N0bkhXTUljb24nXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL3B1c2ggZWFjaCBsb2NhbFNpdGUgaW50byB0aGUgbWFya2VycyBhcnJheVxyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRzY29wZS5sb2NhbFNpdGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYSA9ICRzY29wZS5sb2NhbFNpdGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXI6ICdzdG5TaXRlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJzxkaXY+PGI+U2l0ZSBOdW1iZXI6PC9iPiAnICsgYS5zaXRlX25vICsgJzxiciAvPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxiPlNpdGUgTmFtZTo8L2I+ICcgKyBhLnNpdGVfbmFtZSArICc8YnIgLz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8Yj5XYXRlcmJvZHk6PC9iPiAnICsgYS53YXRlcmJvZHkgKyAnPGJyIC8+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGI+TGF0aXR1ZGUvTG9uZ2l0dWRlOjwvYj4gJyArIGEubGF0aXR1ZGVfZGQgKyAnICcgKyBhLmxvbmdpdHVkZV9kZCArICc8YnIgLz48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhdDogYS5sYXRpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICBsbmc6IGEubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6IGEuc2l0ZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogYS5zaXRlX25vLFxyXG4gICAgICAgICAgICAgICAgICAgIGljb246IGljb25zLnN0blxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9wdXNoIHRoZSBod20gaW50byB0aGUgbWFya2Vyc1xyXG4gICAgICAgICAgICAkc2NvcGUubWFya2Vycy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIGxheWVyOiAnc3RuSFdNJyxcclxuICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICc8ZGl2PjxiPkhXTTwvYj48YnIvPicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGI+TGF0aXR1ZGU6PC9iPiAnICsgSFdNcGFydHNbMV0gKyAnPGJyLz4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxiPkxvbnRpdHVkZTo8L2I+ICcgKyBIV01wYXJ0c1syXSArICc8YnIvPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICBsYXQ6IE51bWJlcihIV01wYXJ0c1sxXSksXHJcbiAgICAgICAgICAgICAgICBsbmc6IE51bWJlcihIV01wYXJ0c1syXSksXHJcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0hXTScsXHJcbiAgICAgICAgICAgICAgICBpY29uOiBpY29ucy5od21JY29uXHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAvL2dldCBib3VuZHMgYmFzZWQgb24gbGF0IGxvbmcgb2YgMiBwb2ludHNcclxuICAgICAgICAgICAgdmFyIGJvdW5kcyA9IFtdO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmxvY2FsU2l0ZXMsIGZ1bmN0aW9uIChzKSB7XHJcbiAgICAgICAgICAgICAgICBib3VuZHMucHVzaChbcy5sYXRpdHVkZV9kZCwgcy5sb25naXR1ZGVfZGRdKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHZhciBmaXRNYXBCb3VuZHMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBsZWFmbGV0RGF0YS5nZXRNYXAoXCJhc3NvY2lhdGVkU2l0ZU1hcFwiKS50aGVuKGZ1bmN0aW9uIChtYXApIHtcclxuICAgICAgICAgICAgICAgICAgICBtYXAuZml0Qm91bmRzKGJvdW5kcywgeyBwYWRkaW5nOiBbMjAsIDIwXSB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBmaXRNYXBCb3VuZHMoKTtcclxuICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoJHNjb3BlLCB7XHJcbiAgICAgICAgICAgICAgICBtYXJrZXJzOiAkc2NvcGUubWFya2VycyxcclxuICAgICAgICAgICAgICAgIGxheWVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgIGJhc2VsYXllcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9wbzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJXb3JsZCBUb3BvZ3JhcGhpY1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZ3NCYXNlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogXCJUb3BvZ3JhcGhpY1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgb3ZlcmxheXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RuU2l0ZXM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdncm91cCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnU1ROIFNpdGVzJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RuSFdNOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZ3JvdXAnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ0hXTScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pOy8vZW5kIGFuZ3VsYXIgJHNjb3BlLmV4dGVuZCBzdGF0ZW1lbnRcclxuICAgICAgICAgICAgLy9lbmQgbWFwIHBhcnRcclxuXHJcbiAgICAgICAgICAgIC8vaWYgdGhlcmUncyBhbHJlYWR5IGJlZW4gYSBzaXRlX25vIGFkZGVkIHRvIHRoaXMgcm93LCBnZXQgaXQgZnJvbSB0aGUgbG9jYWxTaXRlcyBhbmQgc2VsZWN0IGl0XHJcbiAgICAgICAgICAgIGlmIChzaXRlTm9BbHJlYWR5VGhlcmUgIT09IFwiXCIgJiYgc2l0ZU5vQWxyZWFkeVRoZXJlICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmxvY2FsU2l0ZXMsIGZ1bmN0aW9uIChzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHMuc2l0ZV9ubyA9PSBzaXRlTm9BbHJlYWR5VGhlcmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcy5zZWxlY3RlZCA9ICd0cnVlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkTWFya2VyID0gJHNjb3BlLm1hcmtlcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLmxhdCA9PSBzLmxhdGl0dWRlX2RkICYmIG0ubG5nID09IHMubG9uZ2l0dWRlX2RkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWRNYXJrZXIuaWNvbiA9IGljb25zLnNlbGVjdGVkU3RuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL25ldyBzaXRlIGNyZWF0ZSBzZWN0aW9uXHJcbiAgICAgICAgICAgICRzY29wZS5uZXdTaXRlID0ge307XHJcblxyXG4gICAgICAgICAgICAvL2xhdCBlcnJvciBtb2RhbCBcclxuICAgICAgICAgICAgdmFyIG9wZW5MYXRNb2RhbCA9IGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGF0TW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBMYXRpdHVkZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNzMuMDwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGxhdE1vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChmaWVsZEZvY3VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHcgPT0gJ2xhdGxvbmcnKSAkKFwiI1NJVEVfbGF0aXR1ZGVfZGRcIikuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlICQoXCIjTGFEZWdcIikuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9sb25nIG1vZGFsXHJcbiAgICAgICAgICAgIHZhciBvcGVuTG9uZ01vZGFsID0gZnVuY3Rpb24gKHcpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsb25nTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBMb25naXR1ZGUgbXVzdCBiZSBiZXR3ZWVuIC0xNzUuMCBhbmQgLTYwLjA8L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBsb25nTW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGZpZWxkRm9jdXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodyA9PSAnbGF0bG9uZycpICQoXCIjU0lURV9sb25naXR1ZGVfZGRcIikuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlICQoXCIjTG9EZWdcIikuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvL21ha2Ugc3VyZSBsYXQvbG9uZyBhcmUgcmlnaHQgbnVtYmVyIHJhbmdlXHJcbiAgICAgICAgICAgICRzY29wZS5jaGVja1ZhbHVlID0gZnVuY3Rpb24gKGRpcmVjdGlvbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGRpcmVjdGlvbiA9PSAnbGF0Jykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubmV3U2l0ZS5sYXRpdHVkZV9kZCA8IDAgfHwgJHNjb3BlLm5ld1NpdGUubGF0aXR1ZGVfZGQgPiA3MyB8fCBpc05hTigkc2NvcGUubmV3U2l0ZS5sYXRpdHVkZV9kZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkxhdE1vZGFsKCdsYXRsb25nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgbm90IGEgbnVtYmVyLCBjbGVhciB0aGUgaW1wdXRzIHRvIHRyaWdnZXIgdGhlIHZhbGlkYXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKCRzY29wZS5uZXdTaXRlLmxhdGl0dWRlX2RkKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdTaXRlLmxhdGl0dWRlX2RkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChkaXJlY3Rpb24gPT0gJ2xvbmcnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5uZXdTaXRlLmxvbmdpdHVkZV9kZCA8IC0xNzUgfHwgJHNjb3BlLm5ld1NpdGUubG9uZ2l0dWRlX2RkID4gLTYwIHx8IGlzTmFOKCRzY29wZS5uZXdTaXRlLmxvbmdpdHVkZV9kZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkxvbmdNb2RhbCgnbGF0bG9uZycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmIG5vdCBhIG51bWJlciwgY2xlYXIgdGhlIGltcHV0cyB0byB0cmlnZ2VyIHRoZSB2YWxpZGF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTigkc2NvcGUubmV3U2l0ZS5sb25naXR1ZGVfZGQpKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1NpdGUubG9uZ2l0dWRlX2RkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vd2hlbiBTSVRFLnN0YXRlIGNoYW5nZXMsIHVwZGF0ZSBjb3VudHkgbGlzdFxyXG4gICAgICAgICAgICAkc2NvcGUudXBkYXRlQ291bnR5TGlzdCA9IGZ1bmN0aW9uIChzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGhpc1N0YXRlID0gJHNjb3BlLnN0YXRlcy5maWx0ZXIoZnVuY3Rpb24gKHN0KSB7IHJldHVybiBzdC5zdGF0ZV9hYmJyZXYgPT0gczsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVDb3VudHlMaXN0ID0gJHNjb3BlLmNvdW50aWVzLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5zdGF0ZV9pZCA9PSB0aGlzU3RhdGUuc3RhdGVfaWQ7IH0pO1xyXG4gICAgICAgICAgICB9Oy8vZW5kIHVwZGF0ZUNvdW50eUxpc3QoKSBmb3IgU2l0ZVxyXG5cclxuICAgICAgICAgICAgLy9nZXQgYWRkcmVzcyBwYXJ0cyBhbmQgZXhpc3Rpbmcgc2l0ZXMgXHJcbiAgICAgICAgICAgICRzY29wZS5nZXRBZGRyZXNzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy9jbGVhciB0aGVtIGFsbCBmaXJzdFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlICRzY29wZS5uZXdTaXRlLmFkZHJlc3M7IGRlbGV0ZSAkc2NvcGUubmV3U2l0ZS5jaXR5OyBkZWxldGUgJHNjb3BlLm5ld1NpdGUuc3RhdGU7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVDb3VudHlMaXN0ID0gW107IGRlbGV0ZSAkc2NvcGUubmV3U2l0ZS56aXA7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5uZXdTaXRlLmxhdGl0dWRlX2RkICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLm5ld1NpdGUubG9uZ2l0dWRlX2RkICE9PSB1bmRlZmluZWQgJiYgIWlzTmFOKCRzY29wZS5uZXdTaXRlLmxhdGl0dWRlX2RkKSAmJiAhaXNOYU4oJHNjb3BlLm5ld1NpdGUubG9uZ2l0dWRlX2RkKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSB0cnVlOyAvL2xvYWRpbmcuLi5cclxuICAgICAgICAgICAgICAgICAgICBkZWxldGUgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgR0VPQ09ERS5nZXRBZGRyZXNzUGFydHMoeyBMb25naXR1ZGU6ICRzY29wZS5uZXdTaXRlLmxvbmdpdHVkZV9kZCwgTGF0aXR1ZGU6ICRzY29wZS5uZXdTaXRlLmxhdGl0dWRlX2RkIH0sIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UucmVzdWx0Lmdlb2dyYXBoaWVzLkNvdW50aWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGVGSVBTID0gcmVzcG9uc2UucmVzdWx0Lmdlb2dyYXBoaWVzLkNvdW50aWVzWzBdLlNUQVRFO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb3VudHlOYW1lID0gcmVzcG9uc2UucmVzdWx0Lmdlb2dyYXBoaWVzLkNvdW50aWVzWzBdLk5BTUU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNTdGF0ZUlEID0gJHNjb3BlLmNvdW50aWVzLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5zdGF0ZV9maXAgPT0gc3RhdGVGSVBTOyB9KVswXS5zdGF0ZV9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc1N0YXRlID0gJHNjb3BlLnN0YXRlcy5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc3RhdGVfaWQgPT0gdGhpc1N0YXRlSUQ7IH0pWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1N0YXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1NpdGUuc3RhdGUgPSB0aGlzU3RhdGUuc3RhdGVfYWJicmV2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVDb3VudHlMaXN0ID0gJHNjb3BlLmNvdW50aWVzLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5zdGF0ZV9pZCA9PSB0aGlzU3RhdGUuc3RhdGVfaWQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3U2l0ZS5jb3VudHkgPSBjb3VudHlOYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIlRoZSBMYXRpdHVkZS9Mb25naXR1ZGUgZGlkIG5vdCByZXR1cm4gYSByZWNvZ25pemVkIHN0YXRlLiBQbGVhc2UgY2hvb3NlIG9uZSBmcm9tIHRoZSBkcm9wZG93bi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiTm8gbG9jYXRpb24gaW5mb3JtYXRpb24gY2FtZSBiYWNrIGZyb20gdGhhdCBsYXQvbG9uZ1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIGdldHRpbmcgYWRkcmVzcy4gQ2hvb3NlIFN0YXRlIGFuZCBDb3VudHkgZnJvbSBkcm9wZG93bnMuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIGdldHRpbmcgYWRkcmVzczogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3RoZXkgZGlkIG5vdCB0eXBlIGEgbGF0L2xvbmcgZmlyc3QuLi5cclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVtcHR5TGF0TG9uZ01vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlBsZWFzZSBwcm92aWRlIGEgTGF0aXR1ZGUgYW5kIExvbmdpdHVkZSBiZWZvcmUgY2xpY2tpbmcgVmVyaWZ5IExvY2F0aW9uPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07Ly9lbmQgZ2V0QWRkcmVzcygpXHJcblxyXG4gICAgICAgICAgICAvL3RoZXkgY3JlYXRlZCBhIG5ldyBzaXRlLCBwb3N0IGl0IGFuZCB1c2UgcGFzcyB0aGUgc2l0ZV9ubyBiYWNrIHRvIHRoZSBoYW5kc29udGFibGUgcm93XHJcbiAgICAgICAgICAgICRzY29wZS5jcmVhdGVOZXdTaXRlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcG9zdCB0aGUgc2l0ZVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdTaXRlLm1lbWJlcl9pZCA9ICRzY29wZS4kcGFyZW50LnVzZXJJRDtcclxuICAgICAgICAgICAgICAgICAgICBTSVRFLnNhdmUoJHNjb3BlLm5ld1NpdGUsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zZW5kIGl0IGJhY2sgdG8gaGFuZHNvbnRhYmxlIHJvd1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBjcmVhdGluZyBTaXRlLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9lbmQgY3JlYXRlIG5ldyBzaXRlIHNlY3Rpb25cclxuXHJcbiAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vc2VuZCB0aGUgc2VsZWN0ZWQgb25lIGJhY2sgc28gc2l0ZV9ubyBzaG93c1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkU2l0ZSA9IG5lYXJCeVNpdGVzLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcy5zZWxlY3RlZCA9PSBcInRydWVcIjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZWxlY3RlZFNpdGUpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1dKTsvL2VuZCBNb2RhbCBjb250cm9sbGVyXHJcblxyXG4gICAgU1ROQ29udHJvbGxlcnMuY29udHJvbGxlcignaHdtRWRpdE1vZGFsQ3RybCcsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGh0dHAnLCAnJGNvb2tpZXMnLCAnJHVpYk1vZGFsJywgJyR1aWJNb2RhbEluc3RhbmNlJywgJ2FsbERyb3Bkb3ducycsICd0aGlzSFdNJywgJ3NpdGVITVdzJywgJ2FnZW5jeUxpc3QnLCAnYWxsTWVtYmVycycsICdmaWxlVHlwZXMnLCAnaHdtU2l0ZScsXHJcbiAgICAgICAgJ1NFUlZFUl9VUkwnLCAnSFdNJywgJ0ZJTEUnLCAnU09VUkNFJywgJ0ZJTEVfU1RBTVAnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRodHRwLCAkY29va2llcywgJHVpYk1vZGFsLCAkdWliTW9kYWxJbnN0YW5jZSwgYWxsRHJvcGRvd25zLCB0aGlzSFdNLCBzaXRlSE1XcywgYWdlbmN5TGlzdCwgYWxsTWVtYmVycywgZmlsZVR5cGVzLCBod21TaXRlLCBTRVJWRVJfVVJMLCBIV00sIEZJTEUsIFNPVVJDRSwgRklMRV9TVEFNUCkge1xyXG4gICAgICAgICAgICAvL2Ryb3Bkb3duc1xyXG4gICAgICAgICAgICAkc2NvcGUudmlldyA9IHsgSFdNdmFsOiAnZGV0YWlsJyB9O1xyXG4gICAgICAgICAgICAkc2NvcGUuaCA9IHsgaE9wZW46IHRydWUsIGhGaWxlT3BlbjogZmFsc2UgfTsgLy9hY2NvcmRpb25zXHJcbiAgICAgICAgICAgICRzY29wZS5od21UeXBlTGlzdCA9IGFsbERyb3Bkb3duc1swXTtcclxuICAgICAgICAgICAgJHNjb3BlLmh3bVF1YWxMaXN0ID0gYWxsRHJvcGRvd25zWzFdO1xyXG4gICAgICAgICAgICAkc2NvcGUuSERhdHVtc0xpc3QgPSBhbGxEcm9wZG93bnNbMl07XHJcbiAgICAgICAgICAgICRzY29wZS5oQ29sbE1MaXN0ID0gYWxsRHJvcGRvd25zWzNdO1xyXG4gICAgICAgICAgICAkc2NvcGUuVkRhdHVtc0xpc3QgPSBhbGxEcm9wZG93bnNbNF07XHJcbiAgICAgICAgICAgICRzY29wZS52Q29sbE1MaXN0ID0gYWxsRHJvcGRvd25zWzVdO1xyXG4gICAgICAgICAgICAkc2NvcGUubWFya2VyTGlzdCA9IGFsbERyb3Bkb3duc1s2XTtcclxuICAgICAgICAgICAgJHNjb3BlLmV2ZW50TGlzdCA9IGFsbERyb3Bkb3duc1s3XTtcclxuICAgICAgICAgICAgJHNjb3BlLnRoaXNIV01zaXRlID0gaHdtU2l0ZTtcclxuICAgICAgICAgICAgJHNjb3BlLmZpbGVUeXBlTGlzdCA9IGZpbGVUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKGhmdCkge1xyXG4gICAgICAgICAgICAgICAgLy9QaG90byAoMSksIEhpc3RvcmljICgzKSwgRmllbGQgU2hlZXRzICg0KSwgTGV2ZWwgTm90ZXMgKDUpLCBPdGhlciAoNyksIExpbmsgKDgpLCBTa2V0Y2ggKDEwKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGhmdC5maWxldHlwZSA9PT0gJ1Bob3RvJyB8fCBoZnQuZmlsZXR5cGUgPT09ICdIaXN0b3JpYyBDaXRhdGlvbicgfHwgaGZ0LmZpbGV0eXBlID09PSAnRmllbGQgU2hlZXRzJyB8fCBoZnQuZmlsZXR5cGUgPT09ICdMZXZlbCBOb3RlcycgfHxcclxuICAgICAgICAgICAgICAgICAgICBoZnQuZmlsZXR5cGUgPT09ICdPdGhlcicgfHwgaGZ0LmZpbGV0eXBlID09PSAnTGluaycgfHwgaGZ0LmZpbGV0eXBlID09PSAnU2tldGNoJztcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmh3bUltYWdlRmlsZXMgPSBbXTtcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IGZhbHNlOyAvL2hpZGRlbiBmb3JtIHRvIGFkZCBmaWxlIHRvIGh3bVxyXG4gICAgICAgICAgICAkc2NvcGUudXNlclJvbGUgPSAkY29va2llcy5nZXQoJ3VzZXJzUm9sZScpO1xyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd0V2ZW50REQgPSBmYWxzZTsgLy90b2dnbGUgdG8gc2hvdy9oaWRlIGV2ZW50IGRkIChhZG1pbiBvbmx5KVxyXG4gICAgICAgICAgICAkc2NvcGUuYWRtaW5DaGFuZ2VkID0ge307IC8vd2lsbCBob2xkIGV2ZW50X2lkIGlmIGFkbWluIGNoYW5nZXMgaXQuIGFwcGx5IHdoZW4gUFVUdGluZ1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VydmVyVVJMID0gU0VSVkVSX1VSTDsgLy9jb25zdGFudCB3aXRoIHN0bnRlc3Qud2ltLnVzZ3MuZ292L1NUTlNlcnZpY2VzMiBcclxuICAgICAgICAgICAgLy9idXR0b24gY2xpY2sgdG8gc2hvdyBldmVudCBkcm9wZG93biB0byBjaGFuZ2UgaXQgb24gZXhpc3RpbmcgaHdtIChhZG1pbiBvbmx5KVxyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd0NoYW5nZUV2ZW50REQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0V2ZW50REQgPSAhJHNjb3BlLnNob3dFdmVudEREO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgJHNjb3BlLkxvZ2dlZEluTWVtYmVyID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRjb29raWVzLmdldCgnbUlEJyk7IH0pWzBdO1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmFIV00gPSB7fTtcclxuICAgICAgICAgICAgJHNjb3BlLkhXTUZpbGVzID0gW107XHJcbiAgICAgICAgICAgIC8vRGF0ZXBpY2tlclxyXG4gICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tycyA9IHt9O1xyXG4gICAgICAgICAgICAkc2NvcGUub3BlbiA9IGZ1bmN0aW9uICgkZXZlbnQsIHdoaWNoKSB7XHJcbiAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tyc1t3aGljaF0gPSB0cnVlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvL2xhdCBtb2RhbCBcclxuICAgICAgICAgICAgdmFyIG9wZW5MYXRNb2RhbCA9IGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGF0TW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBMYXRpdHVkZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNzMuMDwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGxhdE1vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChmaWVsZEZvY3VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHcgPT0gJ2xhdGxvbmcnKSAkKFwiI2xhdGl0dWRlX2RkXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSAkKFwiI0xhRGVnXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9sb25nIG1vZGFsXHJcbiAgICAgICAgICAgIHZhciBvcGVuTG9uZ01vZGFsID0gZnVuY3Rpb24gKHcpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsb25nTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBMb25naXR1ZGUgbXVzdCBiZSBiZXR3ZWVuIC0xNzUuMCBhbmQgLTYwLjA8L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBsb25nTW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGZpZWxkRm9jdXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodyA9PSAnbGF0bG9uZycpICQoXCIjbG9uZ2l0dWRlX2RkXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSAkKFwiI0xvRGVnXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vbWFrZSBzdXJlIGxhdC9sb25nIGFyZSByaWdodCBudW1iZXIgcmFuZ2VcclxuICAgICAgICAgICAgJHNjb3BlLmNoZWNrVmFsdWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvL2NoZWNrIHRoZSBsYXRpdHVkZS9sb25naXR1ZGVcclxuICAgICAgICAgICAgICAgIHZhciBoID0gJHNjb3BlLnZpZXcuSFdNdmFsID09ICdlZGl0JyA/ICRzY29wZS5od21Db3B5IDogJHNjb3BlLmFIV007XHJcbiAgICAgICAgICAgICAgICBpZiAoaC5sYXRpdHVkZV9kZCA8IDAgfHwgaC5sYXRpdHVkZV9kZCA+IDczIHx8IGlzTmFOKGgubGF0aXR1ZGVfZGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3BlbkxhdE1vZGFsKCdsYXRsb25nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiBub3QgYSBudW1iZXIsIGNsZWFyIHRoZSBpbXB1dHMgdG8gdHJpZ2dlciB0aGUgdmFsaWRhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihoLmxhdGl0dWRlX2RkKSkgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGgubGF0aXR1ZGVfZGQgPSB1bmRlZmluZWQ7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChoLmxvbmdpdHVkZV9kZCA8IC0xNzUgfHwgaC5sb25naXR1ZGVfZGQgPiAtNjAgfHwgaXNOYU4oaC5sb25naXR1ZGVfZGQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3BlbkxvbmdNb2RhbCgnbGF0bG9uZycpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgbm90IGEgbnVtYmVyLCBjbGVhciB0aGUgaW1wdXRzIHRvIHRyaWdnZXIgdGhlIHZhbGlkYXRpb25cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oaC5sb25naXR1ZGVfZGQpKSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaC5sb25naXR1ZGVfZGQgPSB1bmRlZmluZWQ7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8gIGxhdC9sb25nID1pcyBudW1iZXJcclxuICAgICAgICAgICAgJHNjb3BlLmlzTnVtID0gZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRoZUV2ZW50ID0gZXZ0IHx8IHdpbmRvdy5ldmVudDtcclxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSB0aGVFdmVudC5rZXlDb2RlIHx8IHRoZUV2ZW50LndoaWNoO1xyXG4gICAgICAgICAgICAgICAgaWYgKGtleSAhPSA0NiAmJiBrZXkgIT0gNDUgJiYga2V5ID4gMzEgJiYgKGtleSA8IDQ4IHx8IGtleSA+IDU3KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoZUV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoZUV2ZW50LnByZXZlbnREZWZhdWx0KSB0aGVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvL2h3bV91bmNlcnRhaW50eSB0eXBlZCBpbiwgY2hvb3NlIGNvb3Jlc3BvbmRpbmcgaHdtX2Vudmlyb25tZW50XHJcbiAgICAgICAgICAgICRzY29wZS5jaG9vc2VRdWFsaXR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGggPSAkc2NvcGUudmlldy5IV012YWwgPT0gJ2VkaXQnID8gJHNjb3BlLmh3bUNvcHkgOiAkc2NvcGUuYUhXTTtcclxuICAgICAgICAgICAgICAgIGlmIChoLmh3bV91bmNlcnRhaW50eSAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB4ID0gTnVtYmVyKGguaHdtX3VuY2VydGFpbnR5KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoeCA+IDAuNCkgaC5od21fcXVhbGl0eV9pZCA9IDU7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAoeCA8IDAuMDUpIGguaHdtX3F1YWxpdHlfaWQgPSAxO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoLmh3bV9xdWFsaXR5X2lkID0gJHNjb3BlLmh3bVF1YWxMaXN0LmZpbHRlcihmdW5jdGlvbiAoaCkgeyByZXR1cm4gaC5taW5fcmFuZ2UgPD0geCAmJiBoLm1heF9yYW5nZSA+PSB4OyB9KVswXS5od21fcXVhbGl0eV9pZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vaHdtIHF1YWxpdHkgY2hvc2VuIChvciBpdCBjaGFuZ2VkIGZyb20gYWJvdmUpLCBjaGVjayB0byBtYWtlIHN1cmUgaXQgaXMgY29uZ3J1ZW50IHdpdGggaW5wdXQgYWJvdmVcclxuICAgICAgICAgICAgJHNjb3BlLmNvbXBhcmVUb1VuY2VydGFpbnR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGggPSAkc2NvcGUudmlldy5IV012YWwgPT0gJ2VkaXQnID8gJHNjb3BlLmh3bUNvcHkgOiAkc2NvcGUuYUhXTTtcclxuICAgICAgICAgICAgICAgIGlmIChoLmh3bV91bmNlcnRhaW50eSAhPT0gXCJcIiAmJiBoLmh3bV91bmNlcnRhaW50eSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBOdW1iZXIoaC5od21fdW5jZXJ0YWludHkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaGluZ1F1YWxJZCA9ICRzY29wZS5od21RdWFsTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGgubWluX3JhbmdlICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaC5taW5fcmFuZ2UgPD0geCAmJiBoLm1heF9yYW5nZSA+PSB4O1xyXG4gICAgICAgICAgICAgICAgICAgIH0pWzBdLmh3bV9xdWFsaXR5X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoLmh3bV9xdWFsaXR5X2lkICE9PSBtYXRjaGluZ1F1YWxJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3Nob3cgd2FybmluZyBtb2RhbCBhbmQgZm9jdXMgaW4gdW5jZXJ0YWludHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluY29uZ3J1ZW50TW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPldhcm5pbmc8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZXJlIGlzIGEgbWlzbWF0Y2ggYmV0d2VlbiB0aGUgaHdtIHF1YWxpdHkgY2hvc2VuIGFuZCB0aGUgaHdtIHVuY2VydGFpbnR5IGFib3ZlLiBQbGVhc2UgY29ycmVjdCB5b3VyIGh3bSB1bmNlcnRhaW50eS48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNvbmdydWVudE1vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChcIltuYW1lPSdod21fdW5jZXJ0YWludHknXVwiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vY2FsbGVkIGEgZmV3IHRpbWVzIHRvIGZvcm1hdCBqdXN0IHRoZSBkYXRlIChubyB0aW1lKVxyXG4gICAgICAgICAgICB2YXIgbWFrZUFkYXRlID0gZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZCAhPT0gXCJcIiAmJiBkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3Byb3ZpZGVkIGRhdGVcclxuICAgICAgICAgICAgICAgICAgICBhRGF0ZSA9IG5ldyBEYXRlKGQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHllYXIgPSBhRGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vbnRoID0gYURhdGUuZ2V0TW9udGgoKTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXkgPSAoJzAnICsgYURhdGUuZ2V0RGF0ZSgpKS5zbGljZSgtMik7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW9udGhOYW1lcyA9IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXRlV090aW1lID0gbmV3IERhdGUobW9udGhOYW1lc1ttb250aF0gKyBcIiBcIiArIGRheSArIFwiLCBcIiArIHllYXIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVXT3RpbWU7XHJcbiAgICAgICAgICAgIH07Ly9lbmQgbWFrZUFkYXRlKClcclxuXHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuYUhXTSA9IGFuZ3VsYXIuY29weSh0aGlzSFdNKTtcclxuICAgICAgICAgICAgZGVsZXRlICRzY29wZS5hSFdNLnNpdGVfbm87IC8vcmVtb3ZlIHRoaXMgc28gdGhhdCBpdCdzIHRoZSB0cnVlIG9iamVjdCBmb3IgUFVUXHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuYUhXTS5IV01GaWxlcylcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGYgPSAwOyBmIDwgJHNjb3BlLmFIV00uSFdNRmlsZXMubGVuZ3RoOyBmKyspXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkhXTUZpbGVzLnB1c2goJHNjb3BlLmFIV00uSFdNRmlsZXNbZl0pO1xyXG4gICAgICAgICAgICBkZWxldGUgJHNjb3BlLmFIV00uSFdNRmlsZXM7XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuYUhXTS5mbGFnX2RhdGUgPSBtYWtlQWRhdGUoJHNjb3BlLmFIV00uZmxhZ19kYXRlKTtcclxuICAgICAgICAgICAgLy9pZiB0aGlzIGlzIHN1cnZleWVkLCBkYXRlIGZvcm1hdCBhbmQgZ2V0IHN1cnZleSBtZW1iZXIncyBuYW1lXHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuYUhXTS5zdXJ2ZXlfZGF0ZSAhPT0gbnVsbCAmJiAkc2NvcGUuYUhXTS5zdXJ2ZXlfZGF0ZSAhPT0gdW5kZWZpbmVkKSBcclxuICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLnN1cnZleV9kYXRlID0gbWFrZUFkYXRlKCRzY29wZS5hSFdNLnN1cnZleV9kYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgLy9zYXZlIGFIV01cclxuICAgICAgICAgICAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVkSFdNID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hZG1pbkNoYW5nZWQuZXZlbnRfaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2FkbWluIGNoYW5nZWQgdGhlIGV2ZW50IGZvciB0aGlzIGh3bS4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5od21Db3B5LmV2ZW50X2lkID0gJHNjb3BlLmFkbWluQ2hhbmdlZC5ldmVudF9pZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiB0aGV5IGFkZGVkIGEgc3VydmV5IGRhdGUsIGFwcGx5IHN1cnZleSBtZW1iZXIgYXMgbG9nZ2VkIGluIG1lbWJlclxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuaHdtQ29weS5zdXJ2ZXlfZGF0ZSAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5od21Db3B5LnN1cnZleV9kYXRlICE9PSBudWxsICYmICRzY29wZS5od21Db3B5LnN1cnZleV9tZW1iZXJfaWQgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bUNvcHkuc3VydmV5X21lbWJlcl9pZCA9ICRjb29raWVzLmdldCgnbUlEJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vZml4IHN0aWxsd2F0ZXIgYmVmb3JlIHB1dFxyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgKCRzY29wZS5od21Db3B5LnN0aWxsd2F0ZXIgPT0gXCIxXCIpICRzY29wZS5od21Db3B5LnN0aWxsd2F0ZXIgPSBcIlllc1wiO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZWxzZSBpZiAoJHNjb3BlLmh3bUNvcHkuc3RpbGx3YXRlciA9PSBcIjBcIikgJHNjb3BlLmh3bUNvcHkuc3RpbGx3YXRlciA9IFwiTm9cIjtcclxuICAgICAgICAgICAgICAgICAgICAvL2Vsc2UgJHNjb3BlLmh3bUNvcHkuc3RpbGx3YXRlciA9IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuaHdtQ29weS5lbGV2X2Z0ICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLmh3bUNvcHkuZWxldl9mdCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSB0aGV5IGFkZGVkIHRoZSBzdXJ2ZXkgZGF0ZSBpZiB0aGV5IGFkZGVkIGFuIGVsZXZhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmh3bUNvcHkuc3VydmV5X2RhdGUgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5od21Db3B5LnN1cnZleV9kYXRlID0gbWFrZUFkYXRlKFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5od21Db3B5LnN1cnZleV9tZW1iZXJfaWQgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5od21Db3B5LnN1cnZleV9tZW1iZXJfaWQgPSAkY29va2llcy5nZXQoJ21JRCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdmFyIGNsZWFuSFdNID0gZm9ybWF0SFdNKCRzY29wZS5od21Db3B5KTtcclxuICAgICAgICAgICAgICAgICAgICBIV00udXBkYXRlKHsgaWQ6ICRzY29wZS5od21Db3B5Lmh3bV9pZCB9LCAkc2NvcGUuaHdtQ29weSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJIV00gdXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00gPSByZXNwb25zZTsgdGhpc0hXTSA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2dldCBhbGwgdGhlIG5hbWVzIGZvciBkZXRhaWxzIHZpZXdcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJHNjb3BlLmFIV00uaHdtX3R5cGUgPSAkc2NvcGUuaHdtVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChodCkgeyByZXR1cm4gaHQuaHdtX3R5cGVfaWQgPT0gJHNjb3BlLmFIV00uaHdtX3R5cGVfaWQ7IH0pWzBdLmh3bV90eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFIV00uc3RpbGx3YXRlciAhPT0gdW5kZWZpbmVkKSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLlRyYW5xdWlsID0gJHNjb3BlLmFIV00uc3RpbGx3YXRlciA+IDAgPyAnWWVzJyA6ICdObyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uZmxhZ19kYXRlID0gbWFrZUFkYXRlKCRzY29wZS5hSFdNLmZsYWdfZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lmIHRoaXMgaXMgc3VydmV5ZWQsIGRhdGUgZm9ybWF0IGFuZCBnZXQgc3VydmV5IG1lbWJlcidzIG5hbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hSFdNLnN1cnZleV9kYXRlICE9PSBudWxsICYmICRzY29wZS5hSFdNLnN1cnZleV9kYXRlICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5zdXJ2ZXlfZGF0ZSA9IG1ha2VBZGF0ZSgkc2NvcGUuYUhXTS5zdXJ2ZXlfZGF0ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtQ29weSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudmlldy5IV012YWwgPSAnZGV0YWlsJztcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTsvL2VuZCBzYXZlKClcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vY2FuY2VsXHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLiBcclxuICAgICAgICAgICAgICAgIHZhciBzZW5kQmFjayA9IFskc2NvcGUuYUhXTSwgJHNjb3BlLkhXTUZpbGVzXTtcclxuICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHNlbmRCYWNrKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vZWRpdCBidXR0b24gY2xpY2tlZC4gbWFrZSBjb3B5IG9mIGh3bSBcclxuICAgICAgICAgICAgJHNjb3BlLndhbm5hRWRpdEhXTSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS52aWV3LkhXTXZhbCA9ICdlZGl0JztcclxuICAgICAgICAgICAgICAgICRzY29wZS5od21Db3B5ID0gYW5ndWxhci5jb3B5KCRzY29wZS5hSFdNKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZG1pbkNoYW5nZWQuZXZlbnRfaWQgPSAkc2NvcGUuYUhXTS5ldmVudF9pZDsgXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWxIV01FZGl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZpZXcuSFdNdmFsID0gJ2RldGFpbCc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaHdtQ29weSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkbWluQ2hhbmdlZCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkV2ZW50TmFtZSA9ICRzY29wZS5ldmVudExpc3QuZmlsdGVyKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLmV2ZW50X2lkID09ICRzY29wZS5hSFdNLmV2ZW50X2lkOyB9KVswXS5ldmVudF9uYW1lO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkc2NvcGUuZW5zdXJlaHdtTGFiZWxVbmlxdWUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaCA9ICRzY29wZS52aWV3LkhXTXZhbCA9PSAnZWRpdCcgPyAkc2NvcGUuaHdtQ29weSA6ICRzY29wZS5hSFdNO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHNpdGVITVdzLCBmdW5jdGlvbiAoaHdtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGh3bS5od21fbGFiZWwgPT0gaC5od21fbGFiZWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3QgdW5pcXVlLCBjbGVhciBpdCBhbmQgc2hvdyB3YXJuaW5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGguaHdtX2xhYmVsID0gaC5od21faWQgIT09IHVuZGVmaW5lZCA/ICRzY29wZS5hSFdNLmh3bV9sYWJlbCA6ICdod20tJyArIChwYXJzZUZsb2F0KHNpdGVITVdzLmxlbmd0aCkgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHVuaXF1ZU1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5XYXJuaW5nPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGUgaHdtIGxhYmVsIG11c3QgYmUgdW5pcXVlIGZyb20gYWxsIG90aGVyIGh3bXMgYXQgdGhpcyBzaXRlIGZvciB0aGlzIGV2ZW50LjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVuaXF1ZU1vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChcIltuYW1lPSdod21fbGFiZWwnXVwiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vI3JlZ2lvbiBGSUxFIFNUVUZGXHJcbiAgICAgICAgICAgICRzY29wZS5zdGFtcCA9IEZJTEVfU1RBTVAuZ2V0U3RhbXAoKTsgJHNjb3BlLmZpbGVJdGVtRXhpc3RzID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy9uZWVkIHRvIHJldXBsb2FkIGZpbGVJdGVtIHRvIHRoaXMgZXhpc3RpbmcgZmlsZSBPUiBDaGFuZ2Ugb3V0IGV4aXN0aW5nIGZpbGVJdGVtIGZvciBuZXcgb25lXHJcbiAgICAgICAgICAgICRzY29wZS5zYXZlRmlsZVVwbG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHZhciBmaWxlUGFydHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRmlsZUVudGl0eToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2lkOiAkc2NvcGUuYUZpbGUuZmlsZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJHNjb3BlLmFGaWxlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAkc2NvcGUuYUZpbGUuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RpcmVjdGlvbjogJHNjb3BlLmFGaWxlLnBob3RvX2RpcmVjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGVfZGQ6ICRzY29wZS5hRmlsZS5sYXRpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlX2RkOiAkc2NvcGUuYUZpbGUubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2RhdGU6ICRzY29wZS5hRmlsZS5maWxlX2RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh3bV9pZDogJHNjb3BlLmFGaWxlLmh3bV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogJHNjb3BlLmFGaWxlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlX2lkOiAkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZV9pZDogJHNjb3BlLmFGaWxlLnNvdXJjZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogJHNjb3BlLmFGaWxlLnBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RhdGU6ICRzY29wZS5hRmlsZS5waG90b19kYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBGaWxlOiAkc2NvcGUuYUZpbGUuRmlsZTEgIT09IHVuZGVmaW5lZCA/ICRzY29wZS5hRmlsZS5GaWxlMSA6ICRzY29wZS5hRmlsZS5GaWxlXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy9uZWVkIHRvIHB1dCB0aGUgZmlsZVBhcnRzIGludG8gY29ycmVjdCBmb3JtYXQgZm9yIHBvc3RcclxuICAgICAgICAgICAgICAgIHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZUVudGl0eVwiLCBKU09OLnN0cmluZ2lmeShmaWxlUGFydHMuRmlsZUVudGl0eSkpO1xyXG4gICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZVwiLCBmaWxlUGFydHMuRmlsZSk7XHJcbiAgICAgICAgICAgICAgICAvL25vdyBQT1NUIGl0IChmaWxlcGFydHMpXHJcbiAgICAgICAgICAgICAgICBGSUxFLnVwbG9hZEZpbGUoZmQpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGxvYWRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3JjID0gJHNjb3BlLnNlcnZlclVSTCArICcvRmlsZXMvJyArICRzY29wZS5hRmlsZS5maWxlX2lkICsgJy9JdGVtJyArIEZJTEVfU1RBTVAuZ2V0U3RhbXAoKTtcclxuICAgICAgICAgICAgICAgICAgICBGSUxFX1NUQU1QLnNldFN0YW1wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YW1wID0gRklMRV9TVEFNUC5nZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuRmlsZTEudHlwZS5pbmRleE9mKFwiaW1hZ2VcIikgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNQaG90byA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlICRzY29wZS5pc1Bob3RvID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLm5hbWUgPSBmcmVzcG9uc2UubmFtZTsgJHNjb3BlLmFGaWxlLnBhdGggPSBmcmVzcG9uc2UucGF0aDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLkZpbGUxICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLkZpbGUgPSAkc2NvcGUuYUZpbGUuRmlsZTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5GaWxlMSA9IHVuZGVmaW5lZDsgLy9wdXQgaXQgYXMgZmlsZSBhbmQgcmVtb3ZlIGl0IGZyb20gMVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiSFdNIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSFdNRmlsZXMuc3BsaWNlKCRzY29wZS5leGlzdEZpbGVJbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkhXTUZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZnJlc3BvbnNlLmZpbGV0eXBlX2lkID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5od21JbWFnZUZpbGVzLnNwbGljZSgkc2NvcGUuZXhpc3RGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtSW1hZ2VGaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAkc2NvcGUuYWxsU0ZpbGVzWyRzY29wZS5hbGxTRmlsZUluZGV4XSA9IGZyZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgU2l0ZV9GaWxlcy5zZXRBbGxTaXRlRmlsZXMoJHNjb3BlLmFsbFNGaWxlcyk7IC8vdXBkYXRlcyB0aGUgZmlsZSBsaXN0IG9uIHRoZSBzaXRlZGFzaGJvYXJkXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbGVJdGVtRXhpc3RzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBmaWxlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vc2hvdyBhIG1vZGFsIHdpdGggdGhlIGxhcmdlciBpbWFnZSBhcyBhIHByZXZpZXcgb24gdGhlIHBob3RvIGZpbGUgZm9yIHRoaXMgaHdtXHJcbiAgICAgICAgICAgICRzY29wZS5zaG93SW1hZ2VNb2RhbCA9IGZ1bmN0aW9uIChpbWFnZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGltYWdlTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5JbWFnZSBGaWxlIFByZXZpZXc8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48aW1nIG5nLXNyYz1cInt7c2V0U1JDfX1cIiAvPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW1hZ2VJZCA9IGltYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2V0U1JDID0gU0VSVkVSX1VSTCArICcvRmlsZXMvJyArICRzY29wZS5pbWFnZUlkICsgJy9JdGVtJztcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnbWQnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vd2FudCB0byBhZGQgb3IgZWRpdCBmaWxlXHJcbiAgICAgICAgICAgICRzY29wZS5zaG93RmlsZSA9IGZ1bmN0aW9uIChmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZVR5cGVzID0gJHNjb3BlLmZpbGVUeXBlTGlzdDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY2llcyA9IGFnZW5jeUxpc3Q7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXhpc3RGaWxlSW5kZXggPSAtMTsgJHNjb3BlLmV4aXN0SU1HRmlsZUluZGV4ID0gLTE7ICAvL2luZGV4ZXMgZm9yIHNwbGljZS9jaGFuZ2VcclxuICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZSA9IHt9OyAvL2hvbGRlciBmb3IgZmlsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UgPSB7fTsgLy9ob2xkZXIgZm9yIGZpbGUgc291cmNlXHJcbiAgICAgICAgICAgICAgICAvL0hXTSB3aWxsIG5vdCBoYXZlIGRhdGFmaWxlIFxyXG4gICAgICAgICAgICAgICAgaWYgKGZpbGUgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2VkaXQgaHdtIGZpbGVcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhpc3RGaWxlSW5kZXggPSAkc2NvcGUuSFdNRmlsZXMuaW5kZXhPZihmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhpc3RJTUdGaWxlSW5kZXggPSAkc2NvcGUuaHdtSW1hZ2VGaWxlcy5sZW5ndGggPiAwID8gJHNjb3BlLmh3bUltYWdlRmlsZXMuaW5kZXhPZihmaWxlKSA6IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZSA9IGFuZ3VsYXIuY29weShmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZS5maWxldHlwZV9pZCAhPT0gOCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBGSUxFLmdldEZpbGVJdGVtKHsgaWQ6ICRzY29wZS5hRmlsZS5maWxlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZUl0ZW1FeGlzdHMgPSByZXNwb25zZS5MZW5ndGggPiAwID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmZpbGVUeXBlID0gJHNjb3BlLmZpbGVUeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGZ0KSB7IHJldHVybiBmdC5maWxldHlwZV9pZCA9PSAkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQ7IH0pWzBdLmZpbGV0eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZGV0ZXJtaW5lIGlmIGV4aXN0aW5nIGZpbGUgaXMgYSBwaG90byAoZXZlbiBpZiB0eXBlIGlzIG5vdCApXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5uYW1lICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZJID0gJHNjb3BlLmFGaWxlLm5hbWUubGFzdEluZGV4T2YoXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZUV4dCA9ICRzY29wZS5hRmlsZS5uYW1lLnN1YnN0cmluZyhmSSArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUV4dC5tYXRjaCgvKGpwZ3xKUEd8anBlZ3xKUEVHfHBuZ3xQTkd8Z2lmfEdJRikkLykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1Bob3RvID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlICRzY29wZS5pc1Bob3RvID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zcmMgPSAkc2NvcGUuc2VydmVyVVJMICsgJy9GaWxlcy8nICsgJHNjb3BlLmFGaWxlLmZpbGVfaWQgKyAnL0l0ZW0nICsgRklMRV9TVEFNUC5nZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5maWxlX2RhdGUgPSBuZXcgRGF0ZSgkc2NvcGUuYUZpbGUuZmlsZV9kYXRlKTsgLy9kYXRlIGZvciB2YWxpZGl0eSBvZiBmb3JtIG9uIFBVVFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSAhPT0gdW5kZWZpbmVkKSAkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5hRmlsZS5waG90b19kYXRlKTsgLy9kYXRlIGZvciB2YWxpZGl0eSBvZiBmb3JtIG9uIFBVVFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlLnNvdXJjZV9pZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTT1VSQ0UucXVlcnkoeyBpZDogZmlsZS5zb3VyY2VfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UgPSBzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UuRlVMTG5hbWUgPSAkc2NvcGUuYVNvdXJjZS5zb3VyY2VfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY3lOYW1lRm9yQ2FwID0gJHNjb3BlLmFnZW5jaWVzLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gJHNjb3BlLmFTb3VyY2UuYWdlbmN5X2lkOyB9KVswXS5hZ2VuY3lfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfS8vZW5kIGlmIHNvdXJjZVxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIGV4aXN0aW5nIGZpbGVcclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5maWxlX2RhdGUgPSBuZXcgRGF0ZSgpOyAkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT0gJGNvb2tpZXMuZ2V0KCdtSUQnKTsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UuRlVMTG5hbWUgPSAkc2NvcGUuYVNvdXJjZS5mbmFtZSArIFwiIFwiICsgJHNjb3BlLmFTb3VyY2UubG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFnZW5jeU5hbWVGb3JDYXAgPSAkc2NvcGUuYWdlbmNpZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLmFnZW5jeV9pZCA9PSAkc2NvcGUuYVNvdXJjZS5hZ2VuY3lfaWQ7IH0pWzBdLmFnZW5jeV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgfSAvL2VuZCBuZXcgZmlsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IHRydWU7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVBZ2VuY3lGb3JDYXB0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQgPT0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFnZW5jeU5hbWVGb3JDYXAgPSAkc2NvcGUuYWdlbmNpZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLmFnZW5jeV9pZCA9PSAkc2NvcGUuYVNvdXJjZS5hZ2VuY3lfaWQ7IH0pWzBdLmFnZW5jeV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9jcmVhdGUgdGhpcyBuZXcgZmlsZVxyXG4gICAgICAgICAgICAkc2NvcGUuY3JlYXRlRmlsZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5GaWxlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkhXTWZpbGVJc1VwbG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhlU291cmNlID0geyBzb3VyY2VfbmFtZTogJHNjb3BlLmFTb3VyY2UuRlVMTG5hbWUsIGFnZW5jeV9pZDogJHNjb3BlLmFTb3VyY2UuYWdlbmN5X2lkIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcG9zdCBzb3VyY2UgZmlyc3QgdG8gZ2V0IHNvdXJjZV9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTT1VSQ0Uuc2F2ZSh0aGVTb3VyY2UpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkICE9PSA4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90aGVuIFBPU1QgZmlsZVBhcnRzIChTZXJ2aWNlcyBwb3B1bGF0ZSBQQVRIKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlUGFydHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGVFbnRpdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlX2lkOiAkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAkc2NvcGUuYUZpbGUuRmlsZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9kYXRlOiAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9fZGF0ZTogJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJHNjb3BlLmFGaWxlLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogJHNjb3BlLnRoaXNIV01zaXRlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VfaWQ6IHJlc3BvbnNlLnNvdXJjZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RpcmVjdGlvbjogJHNjb3BlLmFGaWxlLnBob3RvX2RpcmVjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlX2RkOiAkc2NvcGUuYUZpbGUubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGVfZGQ6ICRzY29wZS5hRmlsZS5sb25naXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBod21faWQ6ICRzY29wZS5hSFdNLmh3bV9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlOiAkc2NvcGUuYUZpbGUuRmlsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9uZWVkIHRvIHB1dCB0aGUgZmlsZVBhcnRzIGludG8gY29ycmVjdCBmb3JtYXQgZm9yIHBvc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZC5hcHBlbmQoXCJGaWxlRW50aXR5XCIsIEpTT04uc3RyaW5naWZ5KGZpbGVQYXJ0cy5GaWxlRW50aXR5KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZVwiLCBmaWxlUGFydHMuRmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3cgUE9TVCBpdCAoZmlsZXBhcnRzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZJTEUudXBsb2FkRmlsZShmZCkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoZnJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGxvYWRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJlc3BvbnNlLmZpbGVCZWxvbmdzVG8gPSBcIkhXTSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5IV01GaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmcmVzcG9uc2UuZmlsZXR5cGVfaWQgPT09IDEpICRzY29wZS5od21JbWFnZUZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IGZhbHNlOyAkc2NvcGUuSFdNZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkhXTWZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciB1cGxvYWRpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuc291cmNlX2lkID0gcmVzcG9uc2Uuc291cmNlX2lkOyAkc2NvcGUuYUZpbGUuc2l0ZV9pZCA9ICRzY29wZS50aGlzSFdNc2l0ZS5zaXRlX2lkOyAkc2NvcGUuYUZpbGUuaHdtX2lkID0gJHNjb3BlLmFIV00uaHdtX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZJTEUuc2F2ZSgkc2NvcGUuYUZpbGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkxpbmsgc2F2ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyZXNwb25zZS5maWxlQmVsb25nc1RvID0gXCJIV00gRmlsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSFdNRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVGb3JtID0gZmFsc2U7ICRzY29wZS5IV01maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSFdNZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBmaWxlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkhXTWZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3IgY3JlYXRpbmcgU291cmNlIGluZm86IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgc291cmNlLnNhdmUoKSAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfS8vZW5kIHZhbGlkXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiTmVlZCB0byBjaG9vc2UgYSBmaWxlIGZpcnN0XCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9Oy8vZW5kIGNyZWF0ZSgpXHJcblxyXG4gICAgICAgICAgICAvL3VwZGF0ZSB0aGlzIGZpbGVcclxuICAgICAgICAgICAgJHNjb3BlLnNhdmVGaWxlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSFdNZmlsZUlzVXBsb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAvL29ubHkgcGhvdG8gb3Igb3RoZXIgZmlsZSB0eXBlIChubyBkYXRhIGZpbGUgaGVyZSlcclxuICAgICAgICAgICAgICAgICAgICAvL3B1dCBzb3VyY2Ugb3IgZGF0YWZpbGUsIHB1dCBmaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdoYXRraW5kID0gJHNjb3BlLmFGaWxlLmZpbGVCZWxvbmdzVG87XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFTb3VyY2Uuc291cmNlX2lkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcG9zdCBhZ2FpbiAoaWYgbm8gY2hhbmdlLCB3aWxsIHJldHVybiBleGlzdGluZyBvbmUuIGlmIGVkaXRlZCwgd2lsbCBjcmVhdGUgYSBuZXcgb25lIC0taW5zdGVhZCBvZiBlZGl0aW5nIGFsbCBmaWxlcyB0aGF0IHVzZSB0aGlzIHNvdXJjZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoZVNvdXJjZSA9IHsgc291cmNlX25hbWU6ICRzY29wZS5hU291cmNlLkZVTExuYW1lLCBhZ2VuY3lfaWQ6ICRzY29wZS5hU291cmNlLmFnZW5jeV9pZCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTT1VSQ0Uuc2F2ZSh0aGVTb3VyY2UpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHNSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLnNvdXJjZV9pZCA9IHNSZXNwb25zZS5zb3VyY2VfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAvLyAgICBTT1VSQ0UudXBkYXRlKHsgaWQ6ICRzY29wZS5hU291cmNlLnNvdXJjZV9pZCB9LCAkc2NvcGUuYVNvdXJjZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGSUxFLnVwZGF0ZSh7IGlkOiAkc2NvcGUuYUZpbGUuZmlsZV9pZCB9LCAkc2NvcGUuYUZpbGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZpbGVSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVSZXNwb25zZS5maWxlQmVsb25nc1RvID0gXCJIV00gRmlsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5IV01GaWxlc1skc2NvcGUuZXhpc3RGaWxlSW5kZXhdID0gZmlsZVJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgJHNjb3BlLkhXTWZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSFdNZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGZpbGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkhXTWZpbGVJc1VwbG9hZGluZyA9IGZhbHNlOyAvL0xvYWRpbmcuLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBmaWxlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0vL2VuZCB2YWxpZFxyXG4gICAgICAgICAgICB9Oy8vZW5kIHNhdmUoKVxyXG5cclxuICAgICAgICAgICAgLy9kZWxldGUgdGhpcyBmaWxlXHJcbiAgICAgICAgICAgICRzY29wZS5kZWxldGVGaWxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIERlbGV0ZU1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5hRmlsZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiRmlsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgRGVsZXRlTW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoZmlsZVRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgIEZJTEUuZGVsZXRlKHsgaWQ6IGZpbGVUb1JlbW92ZS5maWxlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkhXTUZpbGVzLnNwbGljZSgkc2NvcGUuZXhpc3RGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtSW1hZ2VGaWxlcy5zcGxpY2UoJHNjb3BlLmV4aXN0SU1HRmlsZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pOy8vZW5kIERlbGV0ZU1vZGFsLnJlc3VsdC50aGVuXHJcbiAgICAgICAgICAgIH07Ly9lbmQgZGVsZXRlKClcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWxGaWxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlID0ge307XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgLy8gICRzY29wZS5kYXRhZmlsZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyNlbmRyZWdpb24gRklMRSBTVFVGRlxyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgIH1dKTsgICAgXHJcbn0oKSk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU1ROQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQ29udHJvbGxlcnMnKTtcclxuXHJcbiAgICBTVE5Db250cm9sbGVycy5jb250cm9sbGVyKCdidWxrSFdNQWRqQ3RybCcsIFsnJHNjb3BlJywgJyRzdGF0ZScsICckcm9vdFNjb3BlJywgJyRjb29raWVzJywgJyRodHRwJywgJyRmaWx0ZXInLCAnJHVpYk1vZGFsJywgJ1NJVEUnLCAnSFdNJywgJ0hXTV9TZXJ2aWNlJywgJ2V2ZW50TGlzdCcsICdzdGF0ZUxpc3QnLCAnY291bnR5TGlzdCcsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHN0YXRlLCAkcm9vdFNjb3BlLCAkY29va2llcywgJGh0dHAsICRmaWx0ZXIsICR1aWJNb2RhbCwgU0lURSwgSFdNLCBIV01fU2VydmljZSwgZXZlbnRMaXN0LCBzdGF0ZUxpc3QsIGNvdW50eUxpc3QpIHtcclxuICAgICAgICAgICAgaWYgKCRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gdW5kZWZpbmVkIHx8ICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmF1dGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbG9naW4nKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vZ2xvYmFsIHZhcnNcclxuICAgICAgICAgICAgICAgICRzY29wZS5xdWVyeVNlYXJjaCA9IHt9OyAvL2hvbGRzIHdoYXQgdGhleSBzZWFyY2hlZCBmb3IgdG8gZ2V0IHRoZSBhZGp1c3RlZEhXTXMgYWdhaW4gYW5kIGhhdmUgaXQgc2hvd24gdG8gdGhlbVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vZGl2IGhvbGRpbmcgbG9hZGVyIGFuZCBkeW5hbWljIGFuZCBtYXggZm9yIHByb2dyZXNzIGJhclxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmR5bmFtaWMgPSAwOyAkc2NvcGUubWF4ID0gMDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5ob3RJbnN0YW5jZTsgIC8vaWQgIHd0ciBsYWJlbCBzTk8gZGVzYyBsYXQgIGxvbmcgZGF0ZSBlbGV2IHVuYyAgbm90IFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvbHVtbldpZHRocyA9IFs4NCwgMTIwLCAxMjAsIDEyMCwgMjIwLCAxMjAsIDEyMCwgMTUwLCAxMzAsIDE2MCwgMTgwXTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5DaGFuZ2VzID0gW107IC8vdHJhY2sgY2hhbmdlcyBtYWRlIHRvIGNvbXBhcmUgZm9yIHNhdmluZ1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmludmFsaWRzID0gW107IC8vc3RvcmUgd2hlbiBpbnZhbGlkIHRocm93blxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmV2ZW50cyA9IGV2ZW50TGlzdDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZXMgPSBzdGF0ZUxpc3Q7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuSFdNX3BhcmFtcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvdW50eUxpc3QgPSBjb3VudHlMaXN0O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvdW50eUFycmF5ID0gW107IC8vaG9sZGVyIG9mIHN0YXRlIGNvdW50aWVzICh3aWxsIGNoYW5nZSBhcyB0aGV5IGNoYW5nZSBzdGF0ZSBjaG9pY2UpXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVzdWx0ID0geyAnc2VhcmNoQ2xpY2tlZCc6ZmFsc2UgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2NhbGxlZCBhIGZldyB0aW1lcyB0byBmb3JtYXQganVzdCB0aGUgZGF0ZSAobm8gdGltZSlcclxuICAgICAgICAgICAgICAgIHZhciBtYWtlQWRhdGUgPSBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQgIT09IFwiXCIgJiYgZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcHJvdmlkZWQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhRGF0ZSA9IG5ldyBEYXRlKGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgeWVhciA9IGFEYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vbnRoID0gYURhdGUuZ2V0TW9udGgoKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGF5ID0gKCcwJyArIGFEYXRlLmdldERhdGUoKSkuc2xpY2UoLTIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb250aE5hbWVzID0gW1wiMDFcIiwgXCIwMlwiLCBcIjAzXCIsIFwiMDRcIiwgXCIwNVwiLCBcIjA2XCIsIFwiMDdcIiwgXCIwOFwiLCBcIjA5XCIsIFwiMTBcIiwgXCIxMVwiLCBcIjEyXCJdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRlV090aW1lID0gbW9udGhOYW1lc1ttb250aF0gKyBcIi9cIiArIGRheSArIFwiL1wiICsgeWVhcjtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZVdPdGltZTtcclxuICAgICAgICAgICAgICAgIH07Ly9lbmQgbWFrZUFkYXRlKClcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGp1c3RIV01zID0gW107ICRzY29wZS5ldmVudFN0YXRlSFdNcyA9IFtdOyAvL2hvbGRzIHRoZSBldmVudCBod20gb2JqZWN0cyBmb3IgdXBkYXRpbmdcclxuICAgICAgICAgICAgICAgICRzY29wZS5od21Db3VudCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuVXBkYXRlQ291bnRpZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5IV01fcGFyYW1zLnN0YXRlX2FiYnJldiAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc1N0YXRlID0gJHNjb3BlLnN0YXRlcy5maWx0ZXIoZnVuY3Rpb24gKHN0KSB7IHJldHVybiBzdC5zdGF0ZV9hYmJyZXYgPT0gJHNjb3BlLkhXTV9wYXJhbXMuc3RhdGVfYWJicmV2OyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvdW50eUFycmF5ID0gJHNjb3BlLmNvdW50eUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnN0YXRlX2lkID09IHRoaXNTdGF0ZS5zdGF0ZV9pZDsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvdW50eUFycmF5ID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy9ldmVudCxzdGF0ZSxjb3VudGllcyBjaG9zZW4sIGdldCBod21zXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0SFdNcyA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVzdWx0ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXN1bHQuc2VhcmNoQ2xpY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb3VudHlOYW1lcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLkhXTV9wYXJhbXMuY291bnRpZXMsIGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudHlOYW1lcy5wdXNoKGMuY291bnR5X25hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvdW50aWVzQ29tbWFTZXAgPSBjb3VudHlOYW1lcy5qb2luKCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGp1c3RIV01zID0gW107ICRzY29wZS5ldmVudFN0YXRlSFdNcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3N0b3JlIHNlYXJjaCBmb3IgbGVhdmUvY29tZSBiYWNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5xdWVyeVNlYXJjaCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucXVlcnlTZWFyY2guRXZlbnQgPSAkc2NvcGUuSFdNX3BhcmFtcy5ldmVudF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnF1ZXJ5U2VhcmNoLlN0YXRlID0gJHNjb3BlLkhXTV9wYXJhbXMuc3RhdGVfYWJicmV2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucXVlcnlTZWFyY2guQ291bnRpZXMgPSBjb3VudGllc0NvbW1hU2VwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBIV01fU2VydmljZS5zZXRCdWxrSFdNU2VhcmNoKCRzY29wZS5xdWVyeVNlYXJjaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEhXTS5nZXRGaWx0ZXJlZEhXTXMoeyBFdmVudDogJHNjb3BlLkhXTV9wYXJhbXMuZXZlbnRfaWQsIFN0YXRlczogJHNjb3BlLkhXTV9wYXJhbXMuc3RhdGVfYWJicmV2LCBDb3VudHk6IGNvdW50aWVzQ29tbWFTZXAgfSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtQ291bnQgPSByZXNwb25zZS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVzdWx0LmlzUmVzcG9uc2UgPSAkc2NvcGUuaHdtQ291bnQgPiAwID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXNwb25zZS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvbmUgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmUuaHdtX2lkID0gcmVzcG9uc2VbaV0uaHdtX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZS53YXRlcmJvZHkgPSByZXNwb25zZVtpXS53YXRlcmJvZHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25lLmh3bV9sYWJlbCA9IHJlc3BvbnNlW2ldLmh3bV9sYWJlbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmUuc2l0ZV9pZCA9IHJlc3BvbnNlW2ldLnNpdGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25lLnNpdGVfbm8gPSByZXNwb25zZVtpXS5zaXRlX25vLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZS5od21fbG9jYXRpb25kZXNjcmlwdGlvbiA9IHJlc3BvbnNlW2ldLmh3bV9sb2NhdGlvbmRlc2NyaXB0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZS5sYXRpdHVkZV9kZCA9IHJlc3BvbnNlW2ldLmxhdGl0dWRlX2RkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZS5sb25naXR1ZGVfZGQgPSByZXNwb25zZVtpXS5sb25naXR1ZGVfZGQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlW2ldLnN1cnZleV9kYXRlICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZS5zdXJ2ZXlfZGF0ZSA9IG1ha2VBZGF0ZShyZXNwb25zZVtpXS5zdXJ2ZXlfZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uZS5lbGV2X2Z0ID0gcmVzcG9uc2VbaV0uZWxldl9mdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmUudW5jZXJ0YWludHkgPSByZXNwb25zZVtpXS51bmNlcnRhaW50eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvbmUuaHdtX25vdGVzID0gcmVzcG9uc2VbaV0uaHdtX25vdGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGp1c3RIV01zLnB1c2gob25lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBnZXR0aW5nIGh3bXMuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuZXF1YWxzKHt9LCBIV01fU2VydmljZS5nZXRCdWxrSFdNU2VhcmNoKCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoZVNlYXJjaCA9IEhXTV9TZXJ2aWNlLmdldEJ1bGtIV01TZWFyY2goKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSFdNX3BhcmFtcy5ldmVudF9pZCA9IHRoZVNlYXJjaC5FdmVudDtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSFdNX3BhcmFtcy5zdGF0ZV9hYmJyZXYgPSB0aGVTZWFyY2guU3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlVwZGF0ZUNvdW50aWVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoZVNlYXJjaC5Db3VudGllcyAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY291bnRpZXMgPSB0aGVTZWFyY2guQ291bnRpZXMuc3BsaXQoXCIsXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSFdNX3BhcmFtcy5jb3VudGllcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmNvdW50eUFycmF5LCBmdW5jdGlvbiAoYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHRob3NlIHNlbGVjdGVkIGlmIGluIGNvdW50aWVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY291bnRpZXMubWFwKGZ1bmN0aW9uIChjQSkgeyByZXR1cm4gY0E7IH0pLmluZGV4T2YoYy5jb3VudHlfbmFtZSkgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGMuc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5IV01fcGFyYW1zLmNvdW50aWVzLnB1c2goYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0SFdNcyh0cnVlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZW5kZXJlcnMvdmFsaWRhdG9yc1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlcXVpcmVkTW9kYWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlcU1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoaXMgZmllbGQgaXMgcmVxdWlyZWQuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vbWFrZSByZWFkb25seSBncmV5XHJcbiAgICAgICAgICAgICAgICB2YXIgY29sb3JSZW5kZXJlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSwgdGQsIHJvdywgY29sLCBwcm9wLCB2YWx1ZSwgY2VsbFByb3BlcnRpZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICBIYW5kc29udGFibGUucmVuZGVyZXJzLlRleHRSZW5kZXJlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRkLnN0eWxlLmJhY2tncm91bmQgPSAnI0Y3RjVGNSc7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRkO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vbWFrZSBzaXRlX25vIGEgbGlua1xyXG4gICAgICAgICAgICAgICAgdmFyIHNpdGVOb1JlbmRlcmVyID0gZnVuY3Rpb24gKGluc3RhbmNlLCB0ZCwgcm93LCBjb2wsIHByb3AsIHZhbHVlLCBjZWxsUHJvcGVydGllcykge1xyXG4gICAgICAgICAgICAgICAgICAgIEhhbmRzb250YWJsZS5yZW5kZXJlcnMuVGV4dFJlbmRlcmVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7ICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB0ZC5pbm5lckhUTUwgPSAnPGEgbmctY2xpY2s9XCJnb1RvU2l0ZSgpXCI+JyArIHZhbHVlICsgJzwvYT4nOyAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB0ZC5zdHlsZS5iYWNrZ3JvdW5kID0gJyNGN0Y1RjUnO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0ZDtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVxdWlyZWRWYWxpZGF0b3IgPSBmdW5jdGlvbiAodmFsdWUsIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlZE1vZGFsKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm51bWJlclZhbGlkYXRvciA9IGZ1bmN0aW9uICh2YWx1ZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2hhbmRsaW5nIHRoaXMgbXlzZWxmLCBuZXZlciB3aWxsIGJlIGludmFsaWRcclxuICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlKTsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTsgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgICAgICAgICAgICAgIC8vc2F2ZSB1cGRhdGVzXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBIV00uZ2V0RXZlbnRTdGF0ZUhXTXMoeyBldmVudElkOiAkc2NvcGUuSFdNX3BhcmFtcy5ldmVudF9pZCwgc3RhdGU6ICRzY29wZS5IV01fcGFyYW1zLnN0YXRlX2FiYnJldiB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXZlbnRTdGF0ZUhXTXMgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb29rIHRocm91Z2ggJHNjb3BlLmV2ZW50U3RhdGVIV01zIGFuZCBncmFiIHRoZSBvbmVzIHRoYXQgd2VyZSBvbiB0aGlzIGFkanVzdG1lbnQgcGFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlVGhlc2VIV01zID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGV2SCA9IDA7IGV2SCA8ICRzY29wZS5ldmVudFN0YXRlSFdNcy5sZW5ndGg7IGV2SCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhleUhhdmVJdEhlcmUgPSAkc2NvcGUuYWRqdXN0SFdNcy5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuaHdtX2lkID09ICRzY29wZS5ldmVudFN0YXRlSFdNc1tldkhdLmh3bV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhleUhhdmVJdEhlcmUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdXBkYXRlIHN1cnZleV9kYXRlLGVsZXZfZnQsIHVuY2VydGFpbnR5LCBhbmQgaHdtX25vdGVzIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFN0YXRlSFdNc1tldkhdLnN1cnZ5ZV9kYXRlID0gdGhleUhhdmVJdEhlcmUuc3VydmV5X2RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV2ZW50U3RhdGVIV01zW2V2SF0uZWxldl9mdCA9IHRoZXlIYXZlSXRIZXJlLmVsZXZfZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV2ZW50U3RhdGVIV01zW2V2SF0udW5jZXJ0YWludHkgPSB0aGV5SGF2ZUl0SGVyZS51bmNlcnRhaW50eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXZlbnRTdGF0ZUhXTXNbZXZIXS5od21fbm90ZXMgPSB0aGV5SGF2ZUl0SGVyZS5od21fbm90ZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlVGhlc2VIV01zLnB1c2goJHNjb3BlLmV2ZW50U3RhdGVIV01zW2V2SF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vUFVUXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2godXBkYXRlVGhlc2VIV01zLCBmdW5jdGlvbiAodSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSFdNLnVwZGF0ZSh7IGlkOiB1Lmh3bV9pZCB9LCB1KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkhXTXMgdXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRqdXN0SFdNcyA9IFtdOyAkc2NvcGUuZXZlbnRTdGF0ZUhXTXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW52YWxpZHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0SFdNcyh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHVwZGF0aW5nIEhXTXNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy9yZXNldCBiYWNrIFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNldE1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5XYXJuaW5nISBUaGlzIHdpbGwgcmV2ZXJ0IHRoZSBod20gZGF0YSB0byB0aGUgbGFzdCBzYXZlZCB2ZXJzaW9uLiBBbGwgdW5zYXZlZCBlZGl0cyB3aWxsIGJlIGxvc3QuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJjYW5jZWwoKVwiPkNhbmNlbDwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzZXRNb2RhbC5yZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGp1c3RIV01zID0gW107IEhXTV9TZXJ2aWNlLnNldEJ1bGtIV01TZWFyY2goe30pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW52YWxpZHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldEhXTXModHJ1ZSk7ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBoYW5kc29udGFibGUgc2V0dGluZ3NcclxuICAgICAgICAgICAgICAgICRzY29wZS50YWJsZVNldHRpbmdzID0ge1xyXG4gICAgICAgICAgICAgICAgICAvLyAgY29sSGVhZGVyczogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICByb3dIZWFkZXJzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vY29udGV4dE1lbnU6IFsncm93X2Fib3ZlJywgJ3Jvd19iZWxvdycsICdyZW1vdmVfcm93J10sXHJcbiAgICAgICAgICAgICAgICAgICAgbWluU3BhcmVSb3dzOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGFmdGVySW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaG90SW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgbWFudWFsQ29sdW1uUmVzaXplOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hbnVhbFJvd1Jlc2l6ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICB3b3JkV3JhcDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmVudE92ZXJmbG93OiAnaG9yaXpvbnRhbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgdmlld3BvcnRDb2x1bW5SZW5kZXJpbmdPZmZzZXROdW1iZXI6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgY29sV2lkdGhzOiAkc2NvcGUuY29sdW1uV2lkdGhzLFxyXG4gICAgICAgICAgICAgICAgICAgIGNlbGxzOiBmdW5jdGlvbiAocm93LCBjb2wsIHByb3ApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9maXJzdCA2IGFyZSByZWFkb25seSAoZ3JleSkgYW5kIHNpdGVfbm8gaXMgYSBsaW5rXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjZWxscHJvcHMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbCA8PSA2KSBjZWxscHJvcHMucmVuZGVyZXIgPSBjb2xvclJlbmRlcmVyOyAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbCA9PSAzKSBjZWxscHJvcHMucmVuZGVyZXIgPSBzaXRlTm9SZW5kZXJlcjsgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjZWxscHJvcHM7ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBvbkJlZm9yZUNoYW5nZTogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IGRhdGEubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgoZGF0YVtpXVsxXSA9PSAnZWxldl9mdCcgfHwgZGF0YVtpXVsxXSA9PSAndW5jZXJ0YWludHknKSAmJiBkYXRhW2ldWzNdICE9PSBcIlwiKSAvLyByZXBsYWNlIDAgYnkgdGhlIG51bWJlciBvZiB0aGUgZmllbGQgdG8gdmFsaWRhdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOYU4oZGF0YVtpXVszXSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YS5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkgeyAkc2NvcGUuaG90SW5zdGFuY2UuZGVzZWxlY3RDZWxsKCk7IH0sIDEwMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3YXRlck1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+VmFsdWUgbXVzdCBiZSBhIG51bWJlci48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBhZnRlck9uQ2VsbE1vdXNlRG93bjogZnVuY3Rpb24gKGV2ZW50LCBjb29yZHMsIHRkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vb3BlbiBtdWx0aS1zZWxlY3QgbW9kYWwgZm9yIHJlc291cmNlcywgbWVkaWEgb3IgZnJlcXVlbmNpZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvb3Jkcy5jb2wgPT0gMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNpdGVfbnVtYmVyID0gJHNjb3BlLmhvdEluc3RhbmNlLmdldERhdGFBdENlbGwoY29vcmRzLnJvdywgY29vcmRzLmNvbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2l0ZUlkID0gJHNjb3BlLmFkanVzdEhXTXMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7IHJldHVybiBoLnNpdGVfbm8gPT0gc2l0ZV9udW1iZXI7IH0pWzBdLnNpdGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oXCJzaXRlLmRhc2hib2FyZFwiLCB7aWQ6IHNpdGVJZH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBvbkFmdGVyVmFsaWRhdGU6IGZ1bmN0aW9uIChpc1ZhbGlkLCB2YWx1ZSwgcm93LCBwcm9wLCBzb3VjZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW52YWxpZHMucHVzaCh7IFwiaXNWYWxpZFwiOiBpc1ZhbGlkLCBcInJvd1wiOiByb3csIFwicHJvcFwiOiBwcm9wIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdkkgPSAwOyB2SSA8ICRzY29wZS5pbnZhbGlkcy5sZW5ndGg7IHZJKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmludmFsaWRzW3ZJXS5yb3cgPT0gcm93ICYmICRzY29wZS5pbnZhbGlkc1t2SV0ucHJvcCA9PSBwcm9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZJbmRleCA9IHZJO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodkluZGV4ID4gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmludmFsaWRzLnNwbGljZSh2SW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBmaWxsSGFuZGxlOnthdXRvSW5zZXJ0Um93OmZhbHNlfSxcclxuICAgICAgICAgICAgICAgICAgICByb3dIZWlnaHRzOiA1MFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgICAgICAgICAgfS8vZW5kIGF1dGhvcml6ZWRcclxuICAgICAgICB9XSk7XHJcbn0oKSk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qIGNvbnRyb2xsZXJzLmpzLCAnbGVhZmxldC1kaXJlY3RpdmUnJ3VpLnVuaXF1ZScsJ25nVGFnc0lucHV0JywqL1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBTVE5Db250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTVE5Db250cm9sbGVycycpO1xyXG5cclxuICAgIFNUTkNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ2hlbHBDdHJsJywgWyckc2NvcGUnLCBcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5oZWxwSW5mbyA9IHt9O1xyXG4gICAgICAgICAgICAkc2NvcGUuaGVscEluZm8uZmFjdCA9IFwiU29tZSByZWFsbHkgaW50ZXJlc3RpbmcgaGVscCB3aWxsIGJlIGhlcmUuXCI7XHJcbiAgICAgICAgfV0pO1xyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBNb2RhbENvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ01vZGFsQ29udHJvbGxlcnMnKTsvL1xyXG4gICAgTW9kYWxDb250cm9sbGVycy5jb250cm9sbGVyKCdzaXRlRmlsZU1vZGFsQ3RybCcsIFsnJHNjb3BlJywgJyRjb29raWVzJywgJyRodHRwJywgJyR1aWJNb2RhbEluc3RhbmNlJywgJyR1aWJNb2RhbCcsICdTRVJWRVJfVVJMJywgJ0ZJTEVfU1RBTVAnLCAnZmlsZVR5cGVMaXN0JywgJ3RoaXNGaWxlJywgJ2ZpbGVFeGlzdHMnLCAnYWxsTWVtYmVycycsICdmaWxlU291cmNlJywgJ2RhdGFGaWxlJywgJ2FnZW5jeUxpc3QnLCAnZmlsZVNpdGUnLCAnRklMRScsICdTT1VSQ0UnLCAnREFUQV9GSUxFJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkY29va2llcywgJGh0dHAsICR1aWJNb2RhbEluc3RhbmNlLCAkdWliTW9kYWwsIFNFUlZFUl9VUkwsIEZJTEVfU1RBTVAsIGZpbGVUeXBlTGlzdCwgdGhpc0ZpbGUsIGZpbGVFeGlzdHMsIGFsbE1lbWJlcnMsIGZpbGVTb3VyY2UsIGRhdGFGaWxlLCBhZ2VuY3lMaXN0LCBmaWxlU2l0ZSwgRklMRSwgU09VUkNFLCBEQVRBX0ZJTEUpIHtcclxuICAgICAgICAgICAgLy9kcm9wZG93bnNcclxuICAgICAgICAgICAgJHNjb3BlLnNlcnZlclVSTCA9IFNFUlZFUl9VUkw7XHJcbiAgICAgICAgICAgICRzY29wZS51c2VyUm9sZSA9ICRjb29raWVzLmdldCgndXNlcnNSb2xlJyk7XHJcbiAgICAgICAgICAgICRzY29wZS52aWV3ID0geyBGSUxFdmFsOiAnZGV0YWlsJyB9O1xyXG4gICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IGZhbHNlOyAvL0xvYWRpbmcuLi4gICAgXHJcbiAgICAgICAgICAgICRzY29wZS5maWxlVHlwZXMgPSBmaWxlVHlwZUxpc3Q7XHJcbiAgICAgICAgICAgICRzY29wZS5hZ2VuY2llcyA9IGFnZW5jeUxpc3Q7XHJcbiAgICAgICAgICAgICRzY29wZS50aGVTaXRlID0gZmlsZVNpdGU7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAkc2NvcGUuYUZpbGUgPSB7fTsgLy9ob2xkZXIgZm9yIGZpbGVcclxuICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UgPSB7fTsgLy9ob2xkZXIgZm9yIGZpbGUgc291cmNlXHJcbiAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZSA9IHt9OyAvL2hvbGRlciBmb3IgZmlsZSBkYXRhZmlsZVxyXG4gICAgICAgICAgICAvLyBpcyBpbnRlcnZhbCBpcyBudW1iZXJcclxuICAgICAgICAgICAgJHNjb3BlLmlzTnVtID0gZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRoZUV2ZW50ID0gZXZ0IHx8IHdpbmRvdy5ldmVudDtcclxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSB0aGVFdmVudC5rZXlDb2RlIHx8IHRoZUV2ZW50LndoaWNoO1xyXG4gICAgICAgICAgICAgICAgaWYgKGtleSAhPSA0NiAmJiBrZXkgIT0gNDUgJiYga2V5ID4gMzEgJiYgKGtleSA8IDQ4IHx8IGtleSA+IDU3KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoZUV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoZUV2ZW50LnByZXZlbnREZWZhdWx0KSB0aGVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkc2NvcGUuZmlsZUl0ZW1FeGlzdHMgPSBmaWxlRXhpc3RzID09PSB1bmRlZmluZWQgfHwgZmlsZUV4aXN0cy5MZW5ndGggPiAwID8gdHJ1ZTpmYWxzZTtcclxuXHJcbiAgICAgICAgICAgIC8vI3JlZ2lvbiBEYXRlcGlja2VyXHJcbiAgICAgICAgICAgICRzY29wZS5kYXRlcGlja3JzID0ge307XHJcbiAgICAgICAgICAgICRzY29wZS5kYXRlT3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0aW5nRGF5OiAxLFxyXG4gICAgICAgICAgICAgICAgc2hvd1dlZWtzOiBmYWxzZVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkc2NvcGUub3BlbiA9IGZ1bmN0aW9uICgkZXZlbnQsIHdoaWNoKSB7XHJcbiAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tyc1t3aGljaF0gPSB0cnVlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICAgICAgICAgICRzY29wZS51cGRhdGVBZ2VuY3lGb3JDYXB0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jcmVhdGVPUmVkaXRGaWxlID09ICdjcmVhdGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5maWxldHlwZV9pZCA9PSAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWdlbmN5TmFtZUZvckNhcCA9ICRzY29wZS5hZ2VuY2llcy5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuYWdlbmN5X2lkID09ICRzY29wZS5hU291cmNlLmFnZW5jeV9pZDsgfSlbMF0uYWdlbmN5X25hbWU7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZmlsZUNvcHkuZmlsZXR5cGVfaWQgPT0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFnZW5jeU5hbWVGb3JDYXAgPSAkc2NvcGUuYWdlbmNpZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLmFnZW5jeV9pZCA9PSAkc2NvcGUuc291cmNlQ29weS5hZ2VuY3lfaWQ7IH0pWzBdLmFnZW5jeV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvL2Zvcm1hdHRpbmcgZGF0ZSBhbmQgdGltZSBwcm9wZXJseSBmb3IgY2hyb21lIGFuZCBmZlxyXG4gICAgICAgICAgICB2YXIgZ2V0RGF0ZVRpbWVQYXJ0cyA9IGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgeSA9IGQuc3Vic3RyKDAsIDQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG0gPSBkLnN1YnN0cig1LCAyKSAtIDE7IC8vc3VidHJhY3QgMSBmb3IgaW5kZXggdmFsdWUgKEphbnVhcnkgaXMgMClcclxuICAgICAgICAgICAgICAgIHZhciBkYSA9IGQuc3Vic3RyKDgsIDIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGggPSBkLnN1YnN0cigxMSwgMik7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWkgPSBkLnN1YnN0cigxNCwgMik7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2VjID0gZC5zdWJzdHIoMTcsIDIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRoZURhdGUgPSBuZXcgRGF0ZSh5LCBtLCBkYSwgaCwgbWksIHNlYyk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhlRGF0ZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgaWYgKHRoaXNGaWxlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgIC8vZWRpdCBmaWxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY3JlYXRlT1JlZGl0RmlsZSA9ICdlZGl0JztcclxuICAgICAgICAgICAgICAgICRzY29wZS53aG9zZUZpbGUgPSB0aGlzRmlsZS5maWxlQmVsb25nc1RvO1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS53aG9zZUZpbGUgPT0gJ09iamVjdGl2ZSBQb2ludCBGaWxlJykgJHNjb3BlLndob3NlRmlsZSA9ICdEYXR1bSBMb2NhdGlvbiBGaWxlJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZSA9IHRoaXNGaWxlO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmZpbGVUeXBlID0gZmlsZVR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoZnQpIHsgcmV0dXJuIGZ0LmZpbGV0eXBlX2lkID09ICRzY29wZS5hRmlsZS5maWxldHlwZV9pZDsgfSlbMF0uZmlsZXR5cGU7XHJcbiAgICAgICAgICAgICAgICAvL2RldGVybWluZSBpZiBleGlzdGluZyBmaWxlIGlzIGEgcGhvdG8gKGV2ZW4gaWYgdHlwZSBpcyBub3QgKVxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5uYW1lICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZkkgPSAkc2NvcGUuYUZpbGUubmFtZS5sYXN0SW5kZXhPZihcIi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVFeHQgPSAkc2NvcGUuYUZpbGUubmFtZS5zdWJzdHJpbmcoZkkgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUV4dC5tYXRjaCgvKGpwZ3xKUEd8anBlZ3xKUEVHfHBuZ3xQTkd8Z2lmfEdJRikkLykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzUGhvdG8gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSAkc2NvcGUuaXNQaG90byA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNyYyA9ICRzY29wZS5zZXJ2ZXJVUkwgKyAnL0ZpbGVzLycgKyAkc2NvcGUuYUZpbGUuZmlsZV9pZCArICcvSXRlbScgKyBGSUxFX1NUQU1QLmdldFN0YW1wKCk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlID0gbmV3IERhdGUoJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSk7IC8vZGF0ZSBmb3IgdmFsaWRpdHkgb2YgZm9ybSBvbiBQVVRcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSAhPT0gdW5kZWZpbmVkKSAkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5hRmlsZS5waG90b19kYXRlKTsgLy9kYXRlIGZvciB2YWxpZGl0eSBvZiBmb3JtIG9uIFBVVFxyXG4gICAgICAgICAgICAgICAgaWYgKGZpbGVTb3VyY2UgIT09IHVuZGVmaW5lZCkgIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZSA9IGZpbGVTb3VyY2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UuRlVMTG5hbWUgPSAkc2NvcGUuYVNvdXJjZS5zb3VyY2VfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZS5hZ2VuY3lOYW1lID0gJHNjb3BlLmFnZW5jaWVzLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gJHNjb3BlLmFTb3VyY2UuYWdlbmN5X2lkOyB9KVswXS5hZ2VuY3lfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAvL2FkZCBhZ2VuY3kgbmFtZSB0byBwaG90byBjYXB0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFnZW5jeU5hbWVGb3JDYXAgPSAkc2NvcGUuYVNvdXJjZS5hZ2VuY3lOYW1lO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGRhdGFGaWxlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQXBwcm92YWxJbmZvID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlID0gZGF0YUZpbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRpbWVab25lTGlzdCA9IFsnVVRDJywgJ1BTVCcsICdNU1QnLCAnQ1NUJywgJ0VTVCddOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUuY29sbGVjdF9kYXRlID0gbmV3IERhdGUoJHNjb3BlLmRhdGFmaWxlLmNvbGxlY3RfZGF0ZSk7IC8vZGF0ZSBmb3IgdmFsaWRpdHkgb2YgZm9ybSBvbiBwdXRcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydCA9IGdldERhdGVUaW1lUGFydHMoJHNjb3BlLmRhdGFmaWxlLmdvb2Rfc3RhcnQpOyAvL2RhdGUgZm9yIHZhbGlkaXR5IG9mIGZvcm0gb24gcHV0XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmdvb2RfZW5kID0gZ2V0RGF0ZVRpbWVQYXJ0cygkc2NvcGUuZGF0YWZpbGUuZ29vZF9lbmQpOyAvL2RhdGUgZm9yIHZhbGlkaXR5IG9mIGZvcm0gb24gcHV0XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5kYXRhZmlsZS5hcHByb3ZhbF9pZCAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5kYXRhZmlsZS5hcHByb3ZhbF9pZCAhPT0gbnVsbCAmJiAkc2NvcGUuZGF0YWZpbGUuYXBwcm92YWxfaWQgPj0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUuZ2V0REZBcHByb3ZhbCh7IGlkOiAkc2NvcGUuZGF0YWZpbGUuZGF0YV9maWxlX2lkIH0sIGZ1bmN0aW9uIHN1Y2Nlc3MoYXBwcm92YWxSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkFwcHJvdmFsSW5mby5hcHByb3ZhbERhdGUgPSBuZXcgRGF0ZShhcHByb3ZhbFJlc3BvbnNlLmFwcHJvdmFsX2RhdGUpOyAvL2luY2x1ZGUgbm90ZSB0aGF0IGl0J3MgZGlzcGxheWVkIGluIHRoZWlyIGxvY2FsIHRpbWUgYnV0IHN0b3JlZCBpbiBVVENcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5BcHByb3ZhbEluZm8uTWVtYmVyID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKGFtZW0pIHsgcmV0dXJuIGFtZW0ubWVtYmVyX2lkID09IGFwcHJvdmFsUmVzcG9uc2UubWVtYmVyX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3IgZ2V0dGluZyBkYXRhIGZpbGUgYXBwcm92YWwgaW5mb3JtYXRpb25cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgYVByb2Nlc3NvciA9ICRzY29wZS5kYXRhZmlsZS5wcm9jZXNzb3JfaWQgIT09IG51bGwgPyBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAoYW1lbSkgeyByZXR1cm4gYW1lbS5tZW1iZXJfaWQgPT0gJHNjb3BlLmRhdGFmaWxlLnByb2Nlc3Nvcl9pZDsgfSlbMF0gOiB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc29yID0gYVByb2Nlc3Nvci5mbmFtZSAhPT0gdW5kZWZpbmVkID8gYVByb2Nlc3Nvci5mbmFtZSArICcgJyArIGFQcm9jZXNzb3IubG5hbWUgOiAnJztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vY3JlYXRlIGZpbGVcclxuICAgICAgICAgICAgICAgICRzY29wZS53aG9zZUZpbGUgPSBcIlNpdGUgRmlsZVwiO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNyZWF0ZU9SZWRpdEZpbGUgPSAnY3JlYXRlJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5maWxlX2RhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT0gJGNvb2tpZXMuZ2V0KCdtSUQnKTsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZS5GVUxMbmFtZSA9ICRzY29wZS5hU291cmNlLmZuYW1lICsgXCIgXCIgKyAkc2NvcGUuYVNvdXJjZS5sbmFtZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY3lOYW1lRm9yQ2FwID0gJHNjb3BlLmFnZW5jaWVzLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gJHNjb3BlLmFTb3VyY2UuYWdlbmN5X2lkOyB9KVswXS5hZ2VuY3lfbmFtZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2VuZEJhY2sgPSAkc2NvcGUuYUZpbGU7XHJcbiAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZW5kQmFjayk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2NyZWF0ZSB0aGlzIG5ldyBmaWxlXHJcbiAgICAgICAgICAgICRzY29wZS5jcmVhdGUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkgey8vb25seSBiZSBwaG90byBmaWxlIG9yIG90aGVyIC4uIG5vIERBVEEgaGVyZVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcG9zdCBzb3VyY2UgZmlyc3QgdG8gZ2V0IHNvdXJjZV9pZFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGVTb3VyY2UgPSB7IHNvdXJjZV9uYW1lOiAkc2NvcGUuYVNvdXJjZS5GVUxMbmFtZSwgYWdlbmN5X2lkOiAkc2NvcGUuYVNvdXJjZS5hZ2VuY3lfaWQgfTtcclxuICAgICAgICAgICAgICAgICAgICAvL25vdyBQT1NUIFNPVVJDRSwgXHJcbiAgICAgICAgICAgICAgICAgICAgU09VUkNFLnNhdmUodGhlU291cmNlKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkICE9PSA4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RoZW4gUE9TVCBmaWxlUGFydHMgKFNlcnZpY2VzIHBvcHVsYXRlIFBBVEgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZVBhcnRzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGVFbnRpdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXR5cGVfaWQ6ICRzY29wZS5hRmlsZS5maWxldHlwZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJHNjb3BlLmFGaWxlLkZpbGUubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9kYXRlOiAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaG90b19kYXRlOiAkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICRzY29wZS5hRmlsZS5kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogJHNjb3BlLnRoZVNpdGUuc2l0ZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlX2lkOiByZXNwb25zZS5zb3VyY2VfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RpcmVjdGlvbjogJHNjb3BlLmFGaWxlLnBob3RvX2RpcmVjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZTogJHNjb3BlLmFGaWxlLkZpbGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25lZWQgdG8gcHV0IHRoZSBmaWxlUGFydHMgaW50byBjb3JyZWN0IGZvcm1hdCBmb3IgcG9zdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZkID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZC5hcHBlbmQoXCJGaWxlRW50aXR5XCIsIEpTT04uc3RyaW5naWZ5KGZpbGVQYXJ0cy5GaWxlRW50aXR5KSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmZC5hcHBlbmQoXCJGaWxlXCIsIGZpbGVQYXJ0cy5GaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbm93IFBPU1QgaXQgKGZpbGVwYXJ0cylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZJTEUudXBsb2FkRmlsZShmZCkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoZnJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIFVwbG9hZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyZXNwb25zZS5maWxlQmVsb25nc1RvID0gXCJTaXRlIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGUgPSAnY3JlYXRlZCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9zZW5kIHRoZSBmaWxlIGJhY2sgdG8gYmUgYWRkZWQgdG8gdGhlIHNjb3BlIGxpc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VuZEJhY2sgPSBbZnJlc3BvbnNlLCBzdGF0ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNGaWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZW5kQmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGZpbGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90aGlzIGlzIGEgbGlua1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLnNpdGVfaWQgPSAkc2NvcGUudGhlU2l0ZS5zaXRlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLnNvdXJjZV9pZCA9IHJlc3BvbnNlLnNvdXJjZV9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZJTEUuc2F2ZSgkc2NvcGUuYUZpbGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGxvYWRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiU2l0ZSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gJ2NyZWF0ZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2VuZCB0aGUgZmlsZSBiYWNrIHRvIGJlIGFkZGVkIHRvIHRoZSBzY29wZSBsaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbmRCYWNrID0gW2ZyZXNwb25zZSwgc3RhdGVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uoc2VuZEJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBmaWxlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfS8vZW5kIHNhdmUgbGluayBmaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNGaWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIFNvdXJjZSBpbmZvOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgc291cmNlLnNhdmUoKVxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIHZhbGlkXHJcbiAgICAgICAgICAgIH07Ly9lbmQgY3JlYXRlKClcclxuICAgICAgICAgICAgJHNjb3BlLmNoYW5nZWRGaWxlVHlwZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vZnJvbSBwaG90byB0byBkYXRhXHJcbiAgICAgICAgICAgICAgICAvL2Zyb20gZGF0YSB0byBwaG90b1xyXG4gICAgICAgICAgICAgICAgLy9mcm9tIGRhdGEgdG8gb3RoZXJcclxuICAgICAgICAgICAgICAgIC8vZnJvbSBwaG90byB0byBvdGhlclxyXG4gICAgICAgICAgICAgICAgLy9mcm9tIG90aGVyIHRvIG90aGVyXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vdXBkYXRlIHRoaXMgZmlsZVxyXG4gICAgICAgICAgICAkc2NvcGUuc2F2ZSA9IGZ1bmN0aW9uICh2YWxpZCkgeyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZmlsZUNvcHkuZmlsZXR5cGVfaWQgPT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlIGVuZCBkYXRlIGlzIGFmdGVyIHN0YXJ0IGRhdGVcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9ICRzY29wZS5kZkNvcHkuZ29vZF9zdGFydDsvL25lZWQgdG8gZ2V0IGRlcCBzdGF0dXMgZGF0ZSBpbiBzYW1lIGZvcm1hdCBhcyByZXRyaWV2ZWQgdG8gY29tcGFyZVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlID0gJHNjb3BlLmRmQ29weS5nb29kX2VuZDsgLy9zdHVwaWQgY29tbWEgaW4gdGhlcmUgbWFraW5nIGl0IG5vdCB0aGUgc2FtZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXcgRGF0ZShlKSA8IG5ldyBEYXRlKHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXhEYXRlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+VGhlIGdvb2QgZW5kIGRhdGUgbXVzdCBiZSBhZnRlciB0aGUgZ29vZCBzdGFydCBkYXRlLjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpeERhdGUucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfS8vZW5kIGlmIERhdGU8RGF0ZVxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIGZpbGUuQ29weS5maWxldHlwZV9pZCA9PSAyXHJcbiAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9vbmx5IHBob3RvIG9yIG90aGVyIGZpbGUgdHlwZSAobm8gZGF0YSBmaWxlIGhlcmUpXHJcbiAgICAgICAgICAgICAgICAgICAgLy9wdXQgc291cmNlIG9yIGRhdGFmaWxlLCBwdXQgZmlsZVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3aGF0a2luZCA9ICRzY29wZS5hRmlsZS5maWxlQmVsb25nc1RvO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5zb3VyY2VDb3B5LnNvdXJjZV9pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHBvc3QgYWdhaW4gKGlmIG5vIGNoYW5nZSwgd2lsbCByZXR1cm4gZXhpc3Rpbmcgb25lLiBpZiBlZGl0ZWQsIHdpbGwgY3JlYXRlIGEgbmV3IG9uZSAtLWluc3RlYWQgb2YgZWRpdGluZyBhbGwgZmlsZXMgdGhhdCB1c2UgdGhpcyBzb3VyY2UpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGVTb3VyY2UgPSB7IHNvdXJjZV9uYW1lOiAkc2NvcGUuc291cmNlQ29weS5GVUxMbmFtZSwgYWdlbmN5X2lkOiAkc2NvcGUuc291cmNlQ29weS5hZ2VuY3lfaWQgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU09VUkNFLnNhdmUodGhlU291cmNlKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChzUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgIC8vICBTT1VSQ0UudXBkYXRlKHsgaWQ6ICRzY29wZS5zb3VyY2VDb3B5LnNvdXJjZV9pZCB9LCAkc2NvcGUuc291cmNlQ29weSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoc1Jlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZSA9IHNSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlLkZVTExuYW1lID0gJHNjb3BlLmFTb3VyY2Uuc291cmNlX25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZS5hZ2VuY3lOYW1lID0gJHNjb3BlLmFnZW5jaWVzLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gJHNjb3BlLmFTb3VyY2UuYWdlbmN5X2lkOyB9KVswXS5hZ2VuY3lfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlQ29weS5zb3VyY2VfaWQgPSBzUmVzcG9uc2Uuc291cmNlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9lZGl0aW5nIGp1c3QgdGhlIGZpbGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZJTEUudXBkYXRlKHsgaWQ6ICRzY29wZS5maWxlQ29weS5maWxlX2lkIH0sICRzY29wZS5maWxlQ29weSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoZmlsZVJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVJlc3BvbnNlLmZpbGVCZWxvbmdzVG8gPSB3aGF0a2luZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUgPSBmaWxlUmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmZpbGVUeXBlID0gZmlsZVR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoZnQpIHsgcmV0dXJuIGZ0LmZpbGV0eXBlX2lkID09ICRzY29wZS5hRmlsZS5maWxldHlwZV9pZDsgfSlbMF0uZmlsZXR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5hRmlsZS5maWxlX2RhdGUpOyAvL2RhdGUgZm9yIHZhbGlkaXR5IG9mIGZvcm0gb24gUFVUXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5waG90b19kYXRlICE9PSB1bmRlZmluZWQpICRzY29wZS5hRmlsZS5waG90b19kYXRlID0gbmV3IERhdGUoJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUpOyAvL2RhdGUgZm9yIHZhbGlkaXR5IG9mIGZvcm0gb24gUFVUXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbGVDb3B5ID0ge307ICRzY29wZS5zb3VyY2VDb3B5ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnZpZXcuRklMRXZhbCA9ICdkZXRhaWwnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGZpbGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNGaWxlSXNVcGxvYWRpbmcgPSBmYWxzZTsgLy9Mb2FkaW5nLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgc291cmNlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZGF0YSBmaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgdGltZXpvbmUgYW5kIG1ha2Ugc3VyZSBkYXRlIHN0YXlzIHV0Y1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmRmQ29weS50aW1lX3pvbmUgIT0gXCJVVENcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb252ZXJ0IGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXRjU3RhcnREYXRlVGltZSA9IG5ldyBEYXRlKCRzY29wZS5kZkNvcHkuZ29vZF9zdGFydCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1dGNFbmREYXRlVGltZSA9IG5ldyBEYXRlKCRzY29wZS5kZkNvcHkuZ29vZF9lbmQpLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGZDb3B5Lmdvb2Rfc3RhcnQgPSB1dGNTdGFydERhdGVUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRmQ29weS5nb29kX2VuZCA9IHV0Y0VuZERhdGVUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRmQ29weS50aW1lX3pvbmUgPSAnVVRDJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlICdHTVQnIGlzIHRhY2tlZCBvbiBzbyBpdCBkb2Vzbid0IHRyeSB0byBhZGQgaHJzIHRvIG1ha2UgdGhlIGFscmVhZHkgdXRjIGEgdXRjIGluIGRiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2kgPSAkc2NvcGUuZGZDb3B5Lmdvb2Rfc3RhcnQudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArIDM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWkgPSAkc2NvcGUuZGZDb3B5Lmdvb2RfZW5kLnRvU3RyaW5nKCkuaW5kZXhPZignR01UJykgKyAzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRmQ29weS5nb29kX3N0YXJ0ID0gJHNjb3BlLmRmQ29weS5nb29kX3N0YXJ0LnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIHNpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZkNvcHkuZ29vZF9lbmQgPSAkc2NvcGUuZGZDb3B5Lmdvb2RfZW5kLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIGVpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUudXBkYXRlKHsgaWQ6ICRzY29wZS5kZkNvcHkuZGF0YV9maWxlX2lkIH0sICRzY29wZS5kZkNvcHkpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRmUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZSA9IGRmUmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUuY29sbGVjdF9kYXRlID0gbmV3IERhdGUoJHNjb3BlLmRhdGFmaWxlLmNvbGxlY3RfZGF0ZSk7IC8vZGF0ZSBmb3IgdmFsaWRpdHkgb2YgZm9ybSBvbiBwdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0ID0gZ2V0RGF0ZVRpbWVQYXJ0cygkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydCk7IC8vZGF0ZSBmb3IgdmFsaWRpdHkgb2YgZm9ybSBvbiBwdXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCA9IGdldERhdGVUaW1lUGFydHMoJHNjb3BlLmRhdGFmaWxlLmdvb2RfZW5kKTsgLy9kYXRlIGZvciB2YWxpZGl0eSBvZiBmb3JtIG9uIHB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFQcm9jZXNzb3IgPSAkc2NvcGUuZGF0YWZpbGUucHJvY2Vzc29yX2lkICE9PSBudWxsID8gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKGFtZW0pIHsgcmV0dXJuIGFtZW0ubWVtYmVyX2lkID09ICRzY29wZS5kYXRhZmlsZS5wcm9jZXNzb3JfaWQ7IH0pWzBdIDoge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc29yID0gYVByb2Nlc3Nvci5mbmFtZSAhPT0gdW5kZWZpbmVkID8gYVByb2Nlc3Nvci5mbmFtZSArICcgJyArIGFQcm9jZXNzb3IubG5hbWUgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZJTEUudXBkYXRlKHsgaWQ6ICRzY29wZS5maWxlQ29weS5maWxlX2lkIH0sICRzY29wZS5maWxlQ29weSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoZmlsZVJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVJlc3BvbnNlLmZpbGVCZWxvbmdzVG8gPSB3aGF0a2luZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUgPSBmaWxlUmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmZpbGVUeXBlID0gZmlsZVR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoZnQpIHsgcmV0dXJuIGZ0LmZpbGV0eXBlX2lkID09ICRzY29wZS5hRmlsZS5maWxldHlwZV9pZDsgfSlbMF0uZmlsZXR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5hRmlsZS5maWxlX2RhdGUpOyAvL2RhdGUgZm9yIHZhbGlkaXR5IG9mIGZvcm0gb24gUFVUXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5waG90b19kYXRlICE9PSB1bmRlZmluZWQpICRzY29wZS5hRmlsZS5waG90b19kYXRlID0gbmV3IERhdGUoJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUpOyAvL2RhdGUgZm9yIHZhbGlkaXR5IG9mIGZvcm0gb24gUFVUXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbGVDb3B5ID0ge307ICRzY29wZS5kZkNvcHkgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudmlldy5GSUxFdmFsID0gJ2RldGFpbCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNGaWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNGaWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IGZhbHNlOyAvL0xvYWRpbmcuLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBkYXRhIGZpbGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSAvL2VuZCBlbHNlIChkYXRhZmlsZSlcclxuICAgICAgICAgICAgICAgIH0vL2VuZCB2YWxpZCAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfTsvL2VuZCBzYXZlKClcclxuXHJcbiAgICAgICAgICAgIC8vbmVlZCB0byByZXVwbG9hZCBmaWxlSXRlbSB0byB0aGlzIGV4aXN0aW5nIGZpbGUgT1IgQ2hhbmdlIG91dCBleGlzdGluZyBmaWxlSXRlbSBmb3IgbmV3IG9uZVxyXG4gICAgICAgICAgICAkc2NvcGUuc2F2ZUZpbGVVcGxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IHRydWU7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdmFyIGZpbGVQYXJ0cyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBGaWxlRW50aXR5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVfaWQ6ICRzY29wZS5hRmlsZS5maWxlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAkc2NvcGUuYUZpbGUubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICRzY29wZS5hRmlsZS5kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9fZGlyZWN0aW9uOiAkc2NvcGUuYUZpbGUucGhvdG9fZGlyZWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZV9kZDogJHNjb3BlLmFGaWxlLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGVfZGQ6ICRzY29wZS5hRmlsZS5sb25naXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVfZGF0ZTogJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHdtX2lkOiAkc2NvcGUuYUZpbGUuaHdtX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXRlX2lkOiAkc2NvcGUuYUZpbGUuc2l0ZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXR5cGVfaWQ6ICRzY29wZS5hRmlsZS5maWxldHlwZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlX2lkOiAkc2NvcGUuYUZpbGUuc291cmNlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiAkc2NvcGUuYUZpbGUucGF0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YV9maWxlX2lkOiAkc2NvcGUuYUZpbGUuZGF0YV9maWxlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVtZW50X2lkOiAkc2NvcGUuYUZpbGUuaW5zdHJ1bWVudF9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9fZGF0ZTogJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzX253aXM6ICRzY29wZS5hRmlsZS5pc19ud2lzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RpdmVfcG9pbnRfaWQ6ICRzY29wZS5hRmlsZS5vYmplY3RpdmVfcG9pbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIEZpbGU6ICRzY29wZS5hRmlsZS5GaWxlMSAhPT0gdW5kZWZpbmVkID8gJHNjb3BlLmFGaWxlLkZpbGUxIDogJHNjb3BlLmFGaWxlLkZpbGVcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvL25lZWQgdG8gcHV0IHRoZSBmaWxlUGFydHMgaW50byBjb3JyZWN0IGZvcm1hdCBmb3IgcG9zdFxyXG4gICAgICAgICAgICAgICAgdmFyIGZkID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgICAgICAgICAgICBmZC5hcHBlbmQoXCJGaWxlRW50aXR5XCIsIEpTT04uc3RyaW5naWZ5KGZpbGVQYXJ0cy5GaWxlRW50aXR5KSk7XHJcbiAgICAgICAgICAgICAgICBmZC5hcHBlbmQoXCJGaWxlXCIsIGZpbGVQYXJ0cy5GaWxlKTtcclxuICAgICAgICAgICAgICAgIC8vbm93IFBPU1QgaXQgKGZpbGVwYXJ0cylcclxuICAgICAgICAgICAgICAgIEZJTEUudXBsb2FkRmlsZShmZCkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoZnJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIFVwbG9hZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zcmMgPSAkc2NvcGUuc2VydmVyVVJMICsgJy9GaWxlcy8nICsgJHNjb3BlLmFGaWxlLmZpbGVfaWQgKyAnL0l0ZW0nICsgRklMRV9TVEFNUC5nZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIEZJTEVfU1RBTVAuc2V0U3RhbXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhbXAgPSBGSUxFX1NUQU1QLmdldFN0YW1wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLm5hbWUgPSBmcmVzcG9uc2UubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUucGF0aCA9IGZyZXNwb25zZS5wYXRoO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgdGhpcyBpcyBhIHBob3RvIGZpbGUsIGZsYWcgc28gdGh1bWJuYWlsIHNob3dzIGFuZCBtYWtlIHN1cmVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLkZpbGUxICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5GaWxlMS50eXBlLmluZGV4T2YoXCJpbWFnZVwiKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNQaG90byA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7ICRzY29wZS5pc1Bob3RvID0gZmFsc2U7IH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLkZpbGUudHlwZS5pbmRleE9mKFwiaW1hZ2VcIikgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzUGhvdG8gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgeyAkc2NvcGUuaXNQaG90byA9IGZhbHNlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuRmlsZTEgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuRmlsZSA9ICRzY29wZS5hRmlsZS5GaWxlMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLkZpbGUxID0gdW5kZWZpbmVkOyAvL3B1dCBpdCBhcyBmaWxlIGFuZCByZW1vdmUgaXQgZnJvbSAxXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vdXBkYXRlIHRoZSBzaXRlSW1hZ2VGaWxlcyBmb3IgY2Fyb3VzZWwgaWYgcGhvdG8gd2FzIGNoYW5nZWQgdG8gYSBkaWZmZXJlbnQgdHlwZSBvciB2aXNlIHZlcnNhXHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNGaWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZUl0ZW1FeGlzdHMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBmaWxlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vZGVsZXRlIHRoaXMgZmlsZVxyXG4gICAgICAgICAgICAkc2NvcGUuZGVsZXRlRmlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBEZWxldGVNb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkc2NvcGUuYUZpbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIERlbGV0ZU1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGZpbGVUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICBGSUxFLmRlbGV0ZSh7IGlkOiBmaWxlVG9SZW1vdmUuZmlsZV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW5kQmFjayA9IFtcImRlXCIsICdkZWxldGVkJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHNlbmRCYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTsvL2VuZCBEZWxldGVNb2RhbC5yZXN1bHQudGhlblxyXG4gICAgICAgICAgICB9Oy8vZW5kIGRlbGV0ZSgpXHJcblxyXG4gICAgICAgICAgICAvL2VkaXQgYnV0dG9uIGNsaWNrZWQuIG1ha2UgY29weSBvZiBod20gXHJcbiAgICAgICAgICAgICRzY29wZS53YW5uYUVkaXRGSUxFID0gZnVuY3Rpb24gKCkgeyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICRzY29wZS52aWV3LkZJTEV2YWwgPSAnZWRpdCc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZUNvcHkgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLmFGaWxlKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZkNvcHkgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLmRhdGFmaWxlKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zb3VyY2VDb3B5ID0gYW5ndWxhci5jb3B5KCRzY29wZS5hU291cmNlKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbEZJTEVFZGl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZpZXcuRklMRXZhbCA9ICdkZXRhaWwnO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmZpbGVDb3B5ID0ge307XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGZDb3B5ID0ge307XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc291cmNlQ29weSA9IHt9O1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvL2FwcHJvdmUgdGhpcyBkYXRhZmlsZSAoaWYgYWRtaW4gb3IgbWFuYWdlcilcclxuICAgICAgICAgICAgJHNjb3BlLmFwcHJvdmVERiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vdGhpcyBpcyB2YWxpZCwgc2hvdyBtb2RhbCB0byBjb25maXJtIHRoZXkgd2FudCB0byBhcHByb3ZlIGl0XHJcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0RGID0gJHNjb3BlLmRhdGFmaWxlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcHJvdmVNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogXCI8ZGl2IGNsYXNzPSdtb2RhbC1oZWFkZXInPjxoMyBjbGFzcz0nbW9kYWwtdGl0bGUnPkFwcHJvdmUgRGF0YSBGaWxlPC9oMz48L2Rpdj5cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiPGRpdiBjbGFzcz0nbW9kYWwtYm9keSc+PHA+QXJlIHlvdSByZWFkeSB0byBhcHByb3ZlIHRoaXMgRGF0YSBGaWxlPzwvcD48L2Rpdj5cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiPGRpdiBjbGFzcz0nbW9kYWwtZm9vdGVyJz48YnV0dG9uIGNsYXNzPSdidG4gYnRuLXByaW1hcnknIG5nLWNsaWNrPSdhcHByb3ZlSXQoKSc+QXBwcm92ZTwvYnV0dG9uPjxidXR0b24gY2xhc3M9J2J0biBidG4td2FybmluZycgbmctY2xpY2s9J2NhbmNlbCgpJz5DYW5jZWw8L2J1dHRvbj48L2Rpdj5cIixcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFwcHJvdmVJdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZGVsZXRlIHRoZSBzaXRlIGFuZCBhbGwgdGhpbmdzIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UodGhpc0RGKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGFwcHJvdmVNb2RhbC5yZXN1bHQudGhlbihmdW5jdGlvbiAoZGYpIHtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgREFUQV9GSUxFLmFwcHJvdmVERih7IGlkOiBkZi5kYXRhX2ZpbGVfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoYXBwcm92YWxSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZi5hcHByb3ZhbF9pZCA9IGFwcHJvdmFsUmVzcG9uc2UuYXBwcm92YWxfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZSA9IGRmO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkRhdGEgRmlsZSBBcHByb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkFwcHJvdmFsSW5mby5hcHByb3ZhbERhdGUgPSBuZXcgRGF0ZShhcHByb3ZhbFJlc3BvbnNlLmFwcHJvdmFsX2RhdGUpOyAvL2luY2x1ZGUgbm90ZSB0aGF0IGl0J3MgZGlzcGxheWVkIGluIHRoZWlyIGxvY2FsIHRpbWUgYnV0IHN0b3JlZCBpbiBVVENcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkFwcHJvdmFsSW5mby5NZW1iZXIgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAoYW1lbSkgeyByZXR1cm4gYW1lbS5tZW1iZXJfaWQgPT0gYXBwcm92YWxSZXNwb25zZS5tZW1iZXJfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgIH0pOy8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvL2FwcHJvdmUgdGhpcyBod20gKGlmIGFkbWluIG9yIG1hbmFnZXIpXHJcbiAgICAgICAgICAgICRzY29wZS51bkFwcHJvdmVERiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vdGhpcyBpcyB2YWxpZCwgc2hvdyBtb2RhbCB0byBjb25maXJtIHRoZXkgd2FudCB0byBhcHByb3ZlIGl0XHJcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0RGID0gJHNjb3BlLmRhdGFmaWxlO1xyXG4gICAgICAgICAgICAgICAgdmFyIHVuYXBwcm92ZU1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxkaXYgY2xhc3M9J21vZGFsLWhlYWRlcic+PGgzIGNsYXNzPSdtb2RhbC10aXRsZSc+UmVtb3ZlIEFwcHJvdmFsPC9oMz48L2Rpdj5cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiPGRpdiBjbGFzcz0nbW9kYWwtYm9keSc+PHA+QXJlIHlvdSBzdXJlIHlvdSB3YW4gdG8gdW5hcHByb3ZlIHRoaXMgRGF0YSBGaWxlPzwvcD48L2Rpdj5cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiPGRpdiBjbGFzcz0nbW9kYWwtZm9vdGVyJz48YnV0dG9uIGNsYXNzPSdidG4gYnRuLXByaW1hcnknIG5nLWNsaWNrPSd1bkFwcHJvdmVJdCgpJz5VbmFwcHJvdmU8L2J1dHRvbj48YnV0dG9uIGNsYXNzPSdidG4gYnRuLXdhcm5pbmcnIG5nLWNsaWNrPSdjYW5jZWwoKSc+Q2FuY2VsPC9idXR0b24+PC9kaXY+XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51bkFwcHJvdmVJdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZGVsZXRlIHRoZSBzaXRlIGFuZCBhbGwgdGhpbmdzIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UodGhpc0RGKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHVuYXBwcm92ZU1vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChkZikge1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUudW5BcHByb3ZlREYoeyBpZDogZGYuZGF0YV9maWxlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZi5hcHByb3ZhbF9pZCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZSA9IGRmO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkRhdGEgRmlsZSBVbmFwcHJvdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQXBwcm92YWxJbmZvID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbG9naWMgZm9yIGNhbmNlbFxyXG4gICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XSk7Ly9lbmQgZmlsZU1vZGFsQ3RybFxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgLyogY29udHJvbGxlcnMuanMsICdsZWFmbGV0LWRpcmVjdGl2ZScndWkudW5pcXVlJywnbmdUYWdzSW5wdXQnLCovXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFNUTkNvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NUTkNvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgU1ROQ29udHJvbGxlcnMuY29udHJvbGxlcignZmlsZUN0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRjb29raWVzJywgJyRsb2NhdGlvbicsICckc3RhdGUnLCAnJGh0dHAnLCAnU0VSVkVSX1VSTCcsICdGSUxFX1NUQU1QJywgJ1NpdGVfRmlsZXMnLCAnSFdNX1NlcnZpY2UnLCAnSW5zdHJ1bWVudF9TZXJ2aWNlJywgJyR1aWJNb2RhbCcsICckZmlsdGVyJywgJyR0aW1lb3V0JywgJ3RoaXNTaXRlJywgJ3RoaXNTaXRlRmlsZXMnLCAnYWxsRmlsZVR5cGVzJywgJ2FsbEFnZW5jaWVzJywgJ3RoaXNTaXRlU2Vuc29ycycsICd0aGlzU2l0ZU9QcycsICd0aGlzU2l0ZUhXTXMnLCAnRklMRScsICdEQVRBX0ZJTEUnLCAnTUVNQkVSJywgJ1NPVVJDRScsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICRsb2NhdGlvbiwgJHN0YXRlLCAkaHR0cCwgU0VSVkVSX1VSTCxGSUxFX1NUQU1QLCBTaXRlX0ZpbGVzLCBIV01fU2VydmljZSwgSW5zdHJ1bWVudF9TZXJ2aWNlLCAkdWliTW9kYWwsICRmaWx0ZXIsICR0aW1lb3V0LCB0aGlzU2l0ZSwgdGhpc1NpdGVGaWxlcywgYWxsRmlsZVR5cGVzLCBhbGxBZ2VuY2llcywgdGhpc1NpdGVTZW5zb3JzLCB0aGlzU2l0ZU9QcywgdGhpc1NpdGVIV01zLCBGSUxFLCBEQVRBX0ZJTEUsIE1FTUJFUiwgU09VUkNFKSB7XHJcbiAgICAgICAgICAgIGlmICgkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IHVuZGVmaW5lZCB8fCAkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hdXRoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGVzdCA9IFwiaGlcIjtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZXJ2ZXJVUkwgPSBTRVJWRVJfVVJMO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YW1wID0gRklMRV9TVEFNUC5nZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kb24oJ2ZpbGVTdGFtcFNldCcsIGZ1bmN0aW9uIChldmVudCwgc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhbXAgPSBzdDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaXRlSFdNcyA9IHRoaXNTaXRlSFdNczsgLy9IV01fU2VydmljZS5nZXRBbGxTaXRlSFdNcygpOyAvL2lmIGNyZWF0ZSBhIG5ldyBvbmUsIHRoZW4gYWRkIGEgZmlsZSB0byBpdC4uIGRvZXNuJ3Qgc2hvdyBpbiBmaWxlTGlzdCBiZWNhdXNlIHRoaXMgZG9lc24ndCBoYXZlIHRoYXQgbmV3IGh3bSB5ZXQuLlxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVTZW5zb3JzID0gdGhpc1NpdGVTZW5zb3JzO1xyXG4gICAgICAgICAgICAgICAgLy9pbmNsdWRlIGlmIEhXTSwgSW5zdHJ1bWVudCwgRGF0YSBGaWxlIG9yIE9QIEZpbGUgZm9yIGVhY2ggICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHNmID0gMDsgc2YgPCB0aGlzU2l0ZUZpbGVzLmxlbmd0aDsgc2YrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3aGF0S2luZGFGaWxlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTaXRlRmlsZXNbc2ZdLmh3bV9pZCA+IDAgJiYgdGhpc1NpdGVGaWxlc1tzZl0uaHdtX2lkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoYXRLaW5kYUZpbGUgPSBcIkhXTSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzU2l0ZUZpbGVzW3NmXS5kYXRhX2ZpbGVfaWQgPiAwICYmIHRoaXNTaXRlRmlsZXNbc2ZdLmRhdGFfZmlsZV9pZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGF0S2luZGFGaWxlID0gXCJEYXRhRmlsZSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzU2l0ZUZpbGVzW3NmXS5pbnN0cnVtZW50X2lkID4gMCAmJiB0aGlzU2l0ZUZpbGVzW3NmXS5pbnN0cnVtZW50X2lkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoYXRLaW5kYUZpbGUgPSBcIlNlbnNvciBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzSW5zID0gdGhpc1NpdGVTZW5zb3JzLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcy5pbnN0cnVtZW50X2lkID09IHRoaXNTaXRlRmlsZXNbc2ZdLmluc3RydW1lbnRfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzU2l0ZUZpbGVzW3NmXS50eXBlTmFtZSA9IHRoaXNJbnMuc2VyaWFsX251bWJlcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTaXRlRmlsZXNbc2ZdLm9iamVjdGl2ZV9wb2ludF9pZCA+IDAgJiYgdGhpc1NpdGVGaWxlc1tzZl0ub2JqZWN0aXZlX3BvaW50X2lkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoYXRLaW5kYUZpbGUgPSBcIk9iamVjdGl2ZSBQb2ludCBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNTaXRlRmlsZXNbc2ZdLnR5cGVOYW1lID0gdGhpc1NpdGVPUHMuZmlsdGVyKGZ1bmN0aW9uIChvcCkgeyByZXR1cm4gb3Aub2JqZWN0aXZlX3BvaW50X2lkID09IHRoaXNTaXRlRmlsZXNbc2ZdLm9iamVjdGl2ZV9wb2ludF9pZDsgfSlbMF0ubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdoYXRLaW5kYUZpbGUgPT09ICcnKSB3aGF0S2luZGFGaWxlID0gXCJTaXRlIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzU2l0ZUZpbGVzW3NmXS5maWxlQmVsb25nc1RvID0gd2hhdEtpbmRhRmlsZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKHRoaXNTaXRlRmlsZXMpOy8vLCAkc2NvcGUuc2l0ZUhXTXMsICRzY29wZS5zaXRlU2Vuc29ycyk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZUZpbGVzID0gU2l0ZV9GaWxlcy5nZXRBbGxTaXRlRmlsZXMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZUltYWdlRmlsZXMgPSBbXTsgLy9ob2xkZXIgb2YgY2Fyb3VzZWwgaW1hZ2VzXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzID0gMDsgcyA8ICRzY29wZS5TaXRlRmlsZXMubGVuZ3RoOyBzKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXh0SSA9ICRzY29wZS5TaXRlRmlsZXNbc10ubmFtZS5pbmRleE9mKFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXh0U3RyaW5nID0gJHNjb3BlLlNpdGVGaWxlc1tzXS5uYW1lLnN1YnN0cmluZyhleHRJICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFsnanBnJywnSlBHJywnanBlZycsJ0pQRUcnLCdwbmcnLCdQTkcnLCdnaWYnLCdHSUYnXS5pbmRleE9mKGV4dFN0cmluZykgPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVJbWFnZUZpbGVzLnB1c2goJHNjb3BlLlNpdGVGaWxlc1tzXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL2lmIGZpbGVzIGFyZSBhZGRlZC9lZGl0ZWQsIGRlbGV0ZWQgZnJvbSBvdGhlciBwYXJ0cyAob2JqZWN0aXZlIFBvaW50cywgc2Vuc29ycywgaHdtcyksIG1ha2Ugc3VyZSBpZiBldmVudCBpcyBjaG9zZW4gdG8gdXBkYXRlIHNpdGVGaWxlcyBhY2NvcmRpbmdseVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRvbignc2l0ZUZpbGVzVXBkYXRlZCcsIGZ1bmN0aW9uIChldmVudCwgc2l0ZWZpbGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVIV01zID0gSFdNX1NlcnZpY2UuZ2V0QWxsU2l0ZUhXTXMoKTsgJHNjb3BlLnNpdGVTZW5zb3JzID0gSW5zdHJ1bWVudF9TZXJ2aWNlLmdldEFsbFNpdGVTZW5zb3JzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9ub3cgZ28gYWJvdXQgdXBkYXRpbmcgdGhlIEZpbGVMaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVGaWxlcyA9IHNpdGVmaWxlcy5maWx0ZXIoZnVuY3Rpb24gKGgpIHsgcmV0dXJuIGguZmlsZUJlbG9uZ3NUbyA9PSAnU2l0ZSBGaWxlJyB8fCBoLmZpbGVCZWxvbmdzVG8gPT0gJ09iamVjdGl2ZSBQb2ludCBGaWxlJzsgfSk7ICAvL2tlZXAgYWxsIHNpdGUgYW5kIG9wIGZpbGVzXHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5TaXRlRmlsZXMsIGZ1bmN0aW9uIChzZil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZi5maWxlQmVsb25nc1RvID09ICdPYmplY3RpdmUgUG9pbnQgRmlsZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZi50eXBlTmFtZSA9IHRoaXNTaXRlT1BzLmZpbHRlcihmdW5jdGlvbiAob3ApIHsgcmV0dXJuIG9wLm9iamVjdGl2ZV9wb2ludF9pZCA9PSBzZi5vYmplY3RpdmVfcG9pbnRfaWQ7IH0pWzBdLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaHdtRmlsZXMgPSBzaXRlZmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChzZmlsZXMpIHsgcmV0dXJuIHNmaWxlcy5maWxlQmVsb25nc1RvID09ICdIV00gRmlsZSc7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZW5zRmlsZXMgPSBzaXRlZmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChzZmkpIHsgcmV0dXJuIHNmaS5pbnN0cnVtZW50X2lkID4gMCAmJiBzZmkuaW5zdHJ1bWVudF9pZCAhPT0gbnVsbDsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9vbmx5IHNob3cgZmlsZXMgZm9yIHRoaXMgZXZlbnQgKGdvIHRocm91Z2ggaHdtIGZpbGVzIGFuZCBtYXRjaCBldmVudGlkXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIEVoZiA9IDA7IEVoZiA8IGh3bUZpbGVzLmxlbmd0aDsgRWhmKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIEVod20gPSAwOyBFaHdtIDwgJHNjb3BlLnNpdGVIV01zLmxlbmd0aDsgRWh3bSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGh3bUZpbGVzW0VoZl0uaHdtX2lkID09ICRzY29wZS5zaXRlSFdNc1tFaHdtXS5od21faWQgJiYgJHNjb3BlLnNpdGVIV01zW0Vod21dLmV2ZW50X2lkID09ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVGaWxlcy5wdXNoKGh3bUZpbGVzW0VoZl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaGYgPSAwOyBoZiA8IGh3bUZpbGVzLmxlbmd0aDsgaGYrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaHdtID0gMDsgaHdtIDwgJHNjb3BlLnNpdGVIV01zLmxlbmd0aDsgaHdtKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaHdtRmlsZXNbaGZdLmh3bV9pZCA9PSAkc2NvcGUuc2l0ZUhXTXNbaHdtXS5od21faWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlRmlsZXMucHVzaChod21GaWxlc1toZl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vb25seSBzaG93IGZpbGVzIGZvciB0aGlzIGV2ZW50IChnbyB0aHJvdWdoIHNlbnNvciBmaWxlcyBhbmQgbWF0Y2ggZXZlbnRpZFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudElEJykgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBFc2YgPSAwOyBFc2YgPCBzZW5zRmlsZXMubGVuZ3RoOyBFc2YrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgRWluc3QgPSAwOyBFaW5zdCA8ICRzY29wZS5zaXRlU2Vuc29ycy5sZW5ndGg7IEVpbnN0KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2Vuc0ZpbGVzW0VzZl0uaW5zdHJ1bWVudF9pZCA9PSAkc2NvcGUuc2l0ZVNlbnNvcnNbRWluc3RdLmluc3RydW1lbnRfaWQgJiYgJHNjb3BlLnNpdGVTZW5zb3JzW0VpbnN0XS5ldmVudF9pZCA9PSAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudElEJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vuc0ZpbGVzW0VzZl0udHlwZU5hbWUgPSAkc2NvcGUuc2l0ZVNlbnNvcnNbRWluc3RdLnNlcmlhbF9udW1iZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlRmlsZXMucHVzaChzZW5zRmlsZXNbRXNmXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgc2YgPSAwOyBzZiA8IHNlbnNGaWxlcy5sZW5ndGg7IHNmKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGluc3QgPSAwOyBpbnN0IDwgJHNjb3BlLnNpdGVTZW5zb3JzLmxlbmd0aDsgaW5zdCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbnNGaWxlc1tzZl0uaW5zdHJ1bWVudF9pZCA9PSAkc2NvcGUuc2l0ZVNlbnNvcnNbaW5zdF0uaW5zdHJ1bWVudF9pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5zRmlsZXNbc2ZdLnR5cGVOYW1lID0gJHNjb3BlLnNpdGVTZW5zb3JzW2luc3RdLnNlcmlhbF9udW1iZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlRmlsZXMucHVzaChzZW5zRmlsZXNbc2ZdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiBpbWFnZSwgcHV0IGludG8gY2Fyb3VzZWwgYXJyYXlcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZUltYWdlRmlsZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLlNpdGVGaWxlcywgZnVuY3Rpb24gKHNmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHRJID0gc2YubmFtZS5pbmRleE9mKFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4dFN0cmluZyA9IHNmLm5hbWUuc3Vic3RyaW5nKGV4dEkgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFsnanBnJywgJ0pQRycsICdqcGVnJywgJ0pQRUcnLCAncG5nJywgJ1BORycsICdnaWYnLCAnR0lGJ10uaW5kZXhPZihleHRTdHJpbmcpID4gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZUltYWdlRmlsZXMucHVzaChzZik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9LCB0cnVlKTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gd2F0Y2ggZm9yIHRoZSBzZXNzaW9uIGV2ZW50IHRvIGNoYW5nZSBhbmQgdXBkYXRlIFNJVEUgRklMRVMgRE8gTk9UIEhBVkUgQU4gRVZFTlQgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50TmFtZScpOyB9LCBmdW5jdGlvbiAobmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vzc2lvbkV2ZW50TmFtZSA9IG5ld1ZhbHVlICE9PSB1bmRlZmluZWQgPyBuZXdWYWx1ZSA6IFwiQWxsIEV2ZW50c1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXNzaW9uRXZlbnRFeGlzdHMgPSAkc2NvcGUuc2Vzc2lvbkV2ZW50TmFtZSAhPSBcIkFsbCBFdmVudHNcIiA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZUhXTXMgPSBIV01fU2VydmljZS5nZXRBbGxTaXRlSFdNcygpOyAkc2NvcGUuc2l0ZVNlbnNvcnMgPSBJbnN0cnVtZW50X1NlcnZpY2UuZ2V0QWxsU2l0ZVNlbnNvcnMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9rZWVwIGFsbCBzaXRlICYgT1AgRmlsZXMsIGZpbHRlciBIV00sIEluc3RydW1lbnQgKERGIGZpbGVzIHVzZSBJbnN0cnVtZW50IGV2ZW50KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZUZpbGVzID0gU2l0ZV9GaWxlcy5nZXRBbGxTaXRlRmlsZXMoKS5maWx0ZXIoZnVuY3Rpb24gKGgpIHsgcmV0dXJuIGguZmlsZUJlbG9uZ3NUbyA9PSAnU2l0ZSBGaWxlJyB8fCBoLmZpbGVCZWxvbmdzVG8gPT0gJ09iamVjdGl2ZSBQb2ludCBGaWxlJzsgfSk7ICAvL2tlZXAgYWxsIHNpdGUgYW5kIG9wIGZpbGVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuU2l0ZUZpbGVzLCBmdW5jdGlvbiAoc2YpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZi5maWxlQmVsb25nc1RvID09ICdPYmplY3RpdmUgUG9pbnQgRmlsZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2YudHlwZU5hbWUgPSB0aGlzU2l0ZU9Qcy5maWx0ZXIoZnVuY3Rpb24gKG9wKSB7IHJldHVybiBvcC5vYmplY3RpdmVfcG9pbnRfaWQgPT0gc2Yub2JqZWN0aXZlX3BvaW50X2lkOyB9KVswXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiBpbWFnZSwgcHV0IGludG8gY2Fyb3VzZWwgYXJyYXlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlSW1hZ2VGaWxlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4dEkgPSBzZi5uYW1lLmluZGV4T2YoXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4dFN0cmluZyA9IHNmLm5hbWUuc3Vic3RyaW5nKGV4dEkgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChbJ2pwZycsICdKUEcnLCAnanBlZycsICdKUEVHJywgJ3BuZycsICdQTkcnLCAnZ2lmJywgJ0dJRiddLmluZGV4T2YoZXh0U3RyaW5nKSA+IC0xKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlSW1hZ2VGaWxlcy5wdXNoKHNmKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBod21GaWxlcyA9IFNpdGVfRmlsZXMuZ2V0QWxsU2l0ZUZpbGVzKCkuZmlsdGVyKGZ1bmN0aW9uIChzZmlsZXMpIHsgcmV0dXJuIHNmaWxlcy5maWxlQmVsb25nc1RvID09ICdIV00gRmlsZSc7IH0pOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbnNGaWxlcyA9IFNpdGVfRmlsZXMuZ2V0QWxsU2l0ZUZpbGVzKCkuZmlsdGVyKGZ1bmN0aW9uIChzZmkpIHsgcmV0dXJuIHNmaS5pbnN0cnVtZW50X2lkID4gMCAmJiBzZmkuaW5zdHJ1bWVudF9pZCAhPT0gbnVsbDsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vb25seSBzaG93IGZpbGVzIGZvciB0aGlzIGV2ZW50IChnbyB0aHJvdWdoIGh3bSBmaWxlcyBhbmQgbWF0Y2ggZXZlbnRpZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBoZiA9IDA7IGhmIDwgaHdtRmlsZXMubGVuZ3RoOyBoZisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBod20gPSAwOyBod20gPCAkc2NvcGUuc2l0ZUhXTXMubGVuZ3RoOyBod20rKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChod21GaWxlc1toZl0uaHdtX2lkID09ICRzY29wZS5zaXRlSFdNc1tod21dLmh3bV9pZCAmJiAkc2NvcGUuc2l0ZUhXTXNbaHdtXS5ldmVudF9pZCA9PSAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudElEJykpIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZUZpbGVzLnB1c2goaHdtRmlsZXNbaGZdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL29ubHkgc2hvdyBmaWxlcyBmb3IgdGhpcyBldmVudCAoZ28gdGhyb3VnaCBzZW5zb3IgZmlsZXMgYW5kIG1hdGNoIGV2ZW50aWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgc2YgPSAwOyBzZiA8IHNlbnNGaWxlcy5sZW5ndGg7IHNmKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGluc3QgPSAwOyBpbnN0IDwgJHNjb3BlLnNpdGVTZW5zb3JzLmxlbmd0aDsgaW5zdCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbnNGaWxlc1tzZl0uaW5zdHJ1bWVudF9pZCA9PSAkc2NvcGUuc2l0ZVNlbnNvcnNbaW5zdF0uaW5zdHJ1bWVudF9pZCAmJiAkc2NvcGUuc2l0ZVNlbnNvcnNbaW5zdF0uZXZlbnRfaWQgPT0gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnRJRCcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbnNGaWxlc1tzZl0udHlwZU5hbWUgPSAkc2NvcGUuc2l0ZVNlbnNvcnNbaW5zdF0uc2VyaWFsX251bWJlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVGaWxlcy5wdXNoKHNlbnNGaWxlc1tzZl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlRmlsZXMgPSBTaXRlX0ZpbGVzLmdldEFsbFNpdGVGaWxlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIHRydWUpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vc2hvdyBhIG1vZGFsIHdpdGggdGhlIGxhcmdlciBpbWFnZSBhcyBhIHByZXZpZXdcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93SW1hZ2VNb2RhbCA9IGZ1bmN0aW9uIChpbWFnZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbWFnZU1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkltYWdlIEZpbGUgUHJldmlldzwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48aW1nIG5nLXNyYz1cInt7c2V0U1JDfX1cIiAvPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW1hZ2VJZCA9IGltYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNldFNSQyA9IFNFUlZFUl9VUkwgKyAnL0ZpbGVzLycgKyAkc2NvcGUuaW1hZ2VJZCArICcvSXRlbSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnbWQnXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vY3JlYXRlL2VkaXQgYSBmaWxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVNb2RhbCA9IGZ1bmN0aW9uIChGaWxlQ2xpY2tlZCkgeyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIFNpbmRleENsaWNrZWQgPSAkc2NvcGUuU2l0ZUZpbGVzLmluZGV4T2YoRmlsZUNsaWNrZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcG9wdWxhdGUgYWxsIGZpbGV0eXBlcyB0aGF0IGNyZWF0ZS9lZGl0IGZpbGUgbmVlZHMgZGVwZW5kaW5nIG9uIHdoYXQgdGhlIGZpbGUgaXMgYXR0YWNoZWQgdG9cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZUZpbGVUeXBlcyA9IGFsbEZpbGVUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKGZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdC5maWxldHlwZSA9PT0gJ1Bob3RvJyB8fCBmdC5maWxldHlwZSA9PT0gJ0hpc3RvcmljIENpdGF0aW9uJyB8fCBmdC5maWxldHlwZSA9PT0gJ0ZpZWxkIFNoZWV0cycgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ0LmZpbGV0eXBlID09PSAnTGV2ZWwgTm90ZXMnIHx8IGZ0LmZpbGV0eXBlID09PSAnU2l0ZSBTa2V0Y2gnIHx8IGZ0LmZpbGV0eXBlID09PSAnT3RoZXInIHx8IGZ0LmZpbGV0eXBlID09PSAnTGluaycgfHwgZnQuZmlsZXR5cGUgPT09ICdTa2V0Y2gnIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmdC5maWxldHlwZSA9PT0gJ0xhbmRvd25lciBQZXJtaXNzaW9uIEZvcm0nO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5od21GaWxlVHlwZXMgPSBhbGxGaWxlVHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChoZnQpeyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhmdC5maWxldHlwZSA9PT0gJ1Bob3RvJyB8fCBoZnQuZmlsZXR5cGUgPT09ICdIaXN0b3JpYyBDaXRhdGlvbicgfHwgaGZ0LmZpbGV0eXBlID09PSAnRmllbGQgU2hlZXRzJyB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGZ0LmZpbGV0eXBlID09PSAnTGV2ZWwgTm90ZXMnIHx8IGhmdC5maWxldHlwZSA9PT0gJ090aGVyJyB8fCBoZnQuZmlsZXR5cGUgPT09ICdMaW5rJyB8fCBoZnQuZmlsZXR5cGUgPT09ICdTa2V0Y2gnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZW5zb3JGaWxlVHlwZXMgPSBhbGxGaWxlVHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChzZnQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2Z0LmZpbGV0eXBlID09PSAnUGhvdG8nIHx8IHNmdC5maWxldHlwZSA9PT0gJ0RhdGEnIHx8IHNmdC5maWxldHlwZSA9PT0gJ0hpc3RvcmljIENpdGF0aW9uJyB8fCBzZnQuZmlsZXR5cGUgPT09ICdGaWVsZCBTaGVldHMnIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHNmdC5maWxldHlwZSA9PT0gJ0xldmVsIE5vdGVzJyB8fCBzZnQuZmlsZXR5cGUgPT09ICdPdGhlcicgfHwgc2Z0LmZpbGV0eXBlID09PSAnTGluaycgfHwgc2Z0LmZpbGV0eXBlID09PSAnU2tldGNoJztcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3BGaWxlVHlwZXMgPSBhbGxGaWxlVHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChvZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9mdC5maWxldHlwZSA9PT0gJ1Bob3RvJyB8fCBvZnQuZmlsZXR5cGUgPT09ICdGaWVsZCBTaGVldHMnIHx8IG9mdC5maWxldHlwZSA9PT0gJ0xldmVsIE5vdGVzJyB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb2Z0LmZpbGV0eXBlID09PSAnT3RoZXInIHx8IG9mdC5maWxldHlwZSA9PT0gJ05HUyBEYXRhc2hlZXQnIHx8IG9mdC5maWxldHlwZSA9PT0gJ1NrZXRjaCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vbW9kYWwgYWxsRmlsZVR5cGVzLCB0aGlzRmlsZSwgYWxsTWVtYmVycywgYWdlbmN5TGlzdCwgZmlsZVNpdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBGaWxlQ2xpY2tlZCAhPT0gMCA/ICdGSUxFbW9kYWwuaHRtbCcgOiAnRmlsZUNyZWF0ZU1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc2l0ZUZpbGVNb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnbGcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Q2xhc3M6ICdyZXAtZGlhbG9nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZUV4aXN0czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChGaWxlQ2xpY2tlZCAhPT0gMCkgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGSUxFLmdldEZpbGVJdGVtKHsgaWQ6IEZpbGVDbGlja2VkLmZpbGVfaWQgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVR5cGVMaXN0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEZpbGVDbGlja2VkICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoRmlsZUNsaWNrZWQuZmlsZUJlbG9uZ3NUbykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnSFdNIEZpbGUnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkc2NvcGUuaHdtRmlsZVR5cGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnRGF0YUZpbGUgRmlsZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5zZW5zb3JGaWxlVHlwZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdTZW5zb3IgRmlsZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5zZW5zb3JGaWxlVHlwZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdPYmplY3RpdmUgUG9pbnQgRmlsZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5vcEZpbGVUeXBlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1NpdGUgRmlsZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5zaXRlRmlsZVR5cGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5zaXRlRmlsZVR5cGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZ2VuY3lMaXN0OiBmdW5jdGlvbiAoKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWxsQWdlbmNpZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0ZpbGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoRmlsZUNsaWNrZWQgIT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGaWxlQ2xpY2tlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlU2l0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzU2l0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxNZW1iZXJzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gTUVNQkVSLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVTb3VyY2U6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoRmlsZUNsaWNrZWQgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEZpbGVDbGlja2VkLnNvdXJjZV9pZCAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNPVVJDRS5xdWVyeSh7aWQ6RmlsZUNsaWNrZWQuc291cmNlX2lkfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFGaWxlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEZpbGVDbGlja2VkICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChGaWxlQ2xpY2tlZC5kYXRhX2ZpbGVfaWQgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBEQVRBX0ZJTEUucXVlcnkoeyBpZDogRmlsZUNsaWNrZWQuZGF0YV9maWxlX2lkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGNyZWF0ZWRGaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaXMgdGhlcmUgYSBuZXcgZmlsZSBvciBqdXN0IGNsb3NlZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXRlZEZpbGVbMV0gPT0gJ2NyZWF0ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZUZpbGVzLnB1c2goY3JlYXRlZEZpbGVbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU2l0ZV9GaWxlcy5zZXRBbGxTaXRlRmlsZXMoJHNjb3BlLlNpdGVGaWxlcyk7Ly8sICRzY29wZS5zaXRlSFdNcywgJHNjb3BlLnNpdGVTZW5zb3JzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXRlZEZpbGVbMV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90aGlzIGlzIGZyb20gZWRpdCAtLSByZWZyZXNoIHBhZ2U/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZUZpbGVzW1NpbmRleENsaWNrZWRdID0gY3JlYXRlZEZpbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuU2l0ZUZpbGVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGFtcCA9IEZJTEVfU1RBTVAuZ2V0U3RhbXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXRlZEZpbGVbMV0gPT0gJ2RlbGV0ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZUZpbGVzLnNwbGljZShTaW5kZXhDbGlja2VkLCAxKTsgLy9yZW1vdmUgZnJvbSBmaWxlIExpc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5TaXRlRmlsZXMpOy8vLCAkc2NvcGUuc2l0ZUhXTXMsICRzY29wZS5zaXRlU2Vuc29ycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XSk7XHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qIGNvbnRyb2xsZXJzLmpzLCAnbGVhZmxldC1kaXJlY3RpdmUnJ3VpLnVuaXF1ZScsJ25nVGFnc0lucHV0JywqL1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBNb2RhbENvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ01vZGFsQ29udHJvbGxlcnMnKTtcclxuICAgIE1vZGFsQ29udHJvbGxlcnMuY29udHJvbGxlcignZXZlbnRTZXNzaW9uTW9kYWxDdHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckdWliTW9kYWxJbnN0YW5jZScsICdhbGxFdmVudHMnLCAnYWxsRXZlbnRUeXBlcycsICdhbGxTdGF0ZXMnLCAnRVZFTlQnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRjb29raWVzLCAkdWliTW9kYWxJbnN0YW5jZSwgYWxsRXZlbnRzLCBhbGxFdmVudFR5cGVzLCBhbGxTdGF0ZXMsIEVWRU5UKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5FdmVudExpc3QgPSBhbGxFdmVudHM7XHJcbiAgICAgICAgICAgICRzY29wZS5FdmVudFR5cGVMaXN0ID0gYWxsRXZlbnRUeXBlcztcclxuICAgICAgICAgICAgJHNjb3BlLlN0YXRlTGlzdCA9IGFsbFN0YXRlcztcclxuICAgICAgICAgICAgdmFyIGNob3NlbkV2ID0gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnRJRCcpOyAvL3NlZSBpZiB3ZSBuZWVkIHRvIHNlbGVjdCB0aGUgc2Vzc2lvbiBldmVudFxyXG4gICAgICAgICAgICAkc2NvcGUuZXZlbnQgPSB7IEV2ZW50Q2hvc2VuOiBjaG9zZW5FdiAhPT0gdW5kZWZpbmVkID8gTnVtYmVyKGNob3NlbkV2KSA6IFwiXCIgfTtcclxuXHJcbiAgICAgICAgICAgIC8vZmlsdGVycyBjaG9zZW4sIG9ubHkgc2hvdyB0aGVzZSBldmVudHNcclxuICAgICAgICAgICAgJHNjb3BlLmZpbHRlckV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vP0RhdGU6IG51bGwsIFR5cGU6IDAsIFN0YXRlOiBudWxsXHJcbiAgICAgICAgICAgICAgICB2YXIgZCA9ICRzY29wZS5ldmVudC5EQVRFICE9PSBudWxsICYmICRzY29wZS5ldmVudC5EQVRFICE9PSB1bmRlZmluZWQgPyAkc2NvcGUuZXZlbnQuREFURSA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICB2YXIgdCA9ICRzY29wZS5ldmVudC50eXBlICE9PSBudWxsICYmICRzY29wZS5ldmVudC50eXBlICE9PSB1bmRlZmluZWQgPyAkc2NvcGUuZXZlbnQudHlwZSA6IDA7XHJcbiAgICAgICAgICAgICAgICB2YXIgcyA9ICRzY29wZS5ldmVudC5zdGF0ZSAhPT0gbnVsbCAmJiAkc2NvcGUuZXZlbnQuc3RhdGUgIT09IHVuZGVmaW5lZCA/ICRzY29wZS5ldmVudC5zdGF0ZSA6IG51bGw7XHJcbiAgICAgICAgICAgICAgICBFVkVOVC5nZXRGaWx0ZXJlZEV2ZW50cyh7IERhdGU6IGQsIFR5cGU6IHQsIFN0YXRlOiBzIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkV2ZW50TGlzdCA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vY2xlYXIgdGhlIGZpbHRlcnNcclxuICAgICAgICAgICAgJHNjb3BlLmNsZWFyRmlsdGVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5ldmVudCA9IHsgRXZlbnRDaG9zZW46IGNob3NlbkV2ICE9PSB1bmRlZmluZWQgPyBOdW1iZXIoY2hvc2VuRXYpIDogXCJcIiB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkV2ZW50TGlzdCA9IGFsbEV2ZW50cztcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9ldmVudCBoYXMgYmVlbiBjaG9zZW4uIFNldCBpdCBhcyBzZXNzaW9uIGV2ZW50XHJcbiAgICAgICAgICAgICRzY29wZS5zZXRFdmVudCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5ldklEID0gJHNjb3BlLmV2ZW50LkV2ZW50Q2hvc2VuO1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ldklEICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50TmFtZSA9IGFsbEV2ZW50cy5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHguZXZlbnRfaWQgPT0gJHNjb3BlLmV2SUQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICRjb29raWVzLnB1dCgnU2Vzc2lvbkV2ZW50SUQnLCAkc2NvcGUuZXZJRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGNvb2tpZXMucHV0KCdTZXNzaW9uRXZlbnROYW1lJywgZXZlbnROYW1lLmV2ZW50X25hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnNlc3Npb25FdmVudCA9IFwiU2Vzc2lvbiBFdmVudDogXCIgKyBldmVudE5hbWUuZXZlbnRfbmFtZSArIFwiLlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJZb3UgbXVzdCBjaG9vc2UgYW4gRXZlbnQgZmlyc3QuXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy90aGV5IHdhbnQgdG8gY2xlYXIgdGhlIHNlc3Npb24gZXZlbnRcclxuICAgICAgICAgICAgJHNjb3BlLmNsZWFyRXZlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXZlbnQgPSB7fTtcclxuICAgICAgICAgICAgICAgICRjb29raWVzLnJlbW92ZSgnU2Vzc2lvbkV2ZW50SUQnKTtcclxuICAgICAgICAgICAgICAgICRjb29raWVzLnJlbW92ZSgnU2Vzc2lvbkV2ZW50TmFtZScpO1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zZXNzaW9uRXZlbnQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL0RhdGVwaWNrZXJcclxuICAgICAgICAgICAgJHNjb3BlLmRhdGVwaWNrcnMgPSB7fTtcclxuICAgICAgICAgICAgJHNjb3BlLm9wZW4gPSBmdW5jdGlvbiAoJGV2ZW50LCB3aGljaCkge1xyXG4gICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRhdGVwaWNrcnNbd2hpY2hdID0gdHJ1ZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vY2FuY2VsXHJcbiAgICAgICAgICAgICRzY29wZS5jbG9zZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1dKTtcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgLyogY29udHJvbGxlcnMuanMsICdsZWFmbGV0LWRpcmVjdGl2ZScndWkudW5pcXVlJywnbmdUYWdzSW5wdXQnLCovXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFNUTkNvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NUTkNvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgU1ROQ29udHJvbGxlcnMuY29udHJvbGxlcignZXZlbnRTZXNzaW9uQ3RybCcsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGNvb2tpZXMnLCAnJHVpYk1vZGFsJywgJyRsb2NhdGlvbicsICckc3RhdGUnLCAnRVZFTlQnLCAnRVZFTlRfVFlQRScsICdTVEFURScsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICR1aWJNb2RhbCwgJGxvY2F0aW9uLCAkc3RhdGUsIEVWRU5ULCBFVkVOVF9UWVBFLCBTVEFURSkge1xyXG4gICAgICAgICAgICAkc2NvcGUub3BlbkV2ZW50TW9kYWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvL21vZGFsXHJcbiAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ0Nob29zZUV2ZW50Lmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdldmVudFNlc3Npb25Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdtZCcsXHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ3JlcC1kaWFsb2cnLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsRXZlbnRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRVZFTlQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEV2ZW50VHlwZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBFVkVOVF9UWVBFLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxTdGF0ZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTVEFURS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbm90aGluZyB0byBkbyBoZXJlXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgfV0pO1xyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFNldHRpbmdzQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU2V0dGluZ3NDb250cm9sbGVycycpO1xyXG5cclxuICAgIFNldHRpbmdzQ29udHJvbGxlcnMuY29udHJvbGxlcignZXZlbnRNb2RhbEN0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRjb29raWVzJywgJyRodHRwJywgJyR1aWJNb2RhbCcsICckdWliTW9kYWxJbnN0YW5jZScsICckZmlsdGVyJywgJ3RoaXNFdmVudCcsICdldmVudFR5cGVMaXN0JyxcclxuICAgICAgICAnZXZlbnRTdGF0dXNMaXN0JywgJ2FkbWluTGlzdCcsICdmaWxlVHlwZXMnLCAnZXZlbnRTaXRlcycsICdhbGxTdGF0ZXMnLCAnYWxsQ291bnRpZXMnLCAnRVZFTlQnLCAnRklMRScsICdTRVJWRVJfVVJMJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkY29va2llcywgJGh0dHAsICR1aWJNb2RhbCwgJHVpYk1vZGFsSW5zdGFuY2UsICRmaWx0ZXIsIHRoaXNFdmVudCwgZXZlbnRUeXBlTGlzdCwgZXZlbnRTdGF0dXNMaXN0LCBhZG1pbkxpc3QsIGZpbGVUeXBlcywgZXZlbnRTaXRlcywgYWxsU3RhdGVzLCBhbGxDb3VudGllcyxcclxuICAgICAgICAgICAgRVZFTlQsIEZJTEUsIFNFUlZFUl9VUkwpIHtcclxuICAgICAgICAgICAgJHNjb3BlLnNlcnZlclVSTCA9IFNFUlZFUl9VUkw7XHJcbiAgICAgICAgICAgICRzY29wZS5kb3dubG9hZFppcFVybCA9IFwiXCI7IC8vdGFjayBvbiBlbmQgb2YgdXJsIGZvciBnZXR0aW5nIHppcCBmaWxlXHJcbiAgICAgICAgICAgICRzY29wZS5vYmplY3RDaG9pY2VzID0gW1wiSFdNc1wiLCBcIlNlbnNvcnNcIl07XHJcbiAgICAgICAgICAgICRzY29wZS5hbkV2ZW50ID0ge307XHJcbiAgICAgICAgICAgICRzY29wZS5ldmVudFR5cGVzID0gZXZlbnRUeXBlTGlzdDtcclxuICAgICAgICAgICAgJHNjb3BlLmV2ZW50U3RhdHVzZXMgPSBldmVudFN0YXR1c0xpc3Q7XHJcbiAgICAgICAgICAgICRzY29wZS5hZG1pbk1lbWJlcnMgPSBhZG1pbkxpc3Q7XHJcbiAgICAgICAgICAgICRzY29wZS5sb2dnZWRJblJvbGUgPSAkY29va2llcy5nZXQoJ3VzZXJzUm9sZScpO1xyXG4gICAgICAgICAgICAkc2NvcGUudmlldyA9IHsgRVZ2YWw6ICdkZXRhaWwnIH07XHJcbiAgICAgICAgICAgICRzY29wZS5kbCA9IHsgZGxPcGVuOiB0cnVlLCBkbEZpbGVPcGVuOiBmYWxzZSB9Oy8vYWNjb3JkaW9uc1xyXG4gICAgICAgICAgICAvLyNyZWdpb24gRGF0ZXBpY2tlclxyXG4gICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tycyA9IHt9O1xyXG4gICAgICAgICAgICAkc2NvcGUub3BlbiA9IGZ1bmN0aW9uICgkZXZlbnQsIHdoaWNoKSB7XHJcbiAgICAgICAgICAgICAgICAkZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tyc1t3aGljaF0gPSB0cnVlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyRzY29wZS5mb3JtYXQgPSAnTU1NIGRkLCB5eXl5JztcclxuICAgICAgICAgICAgLy8jZW5kcmVnaW9uIERhdGVwaWNrZXJcclxuXHJcbiAgICAgICAgICAgIC8vZWRpdCBidXR0b24gY2xpY2tlZC4gbWFrZSBjb3B5IG9mIGh3bSBcclxuICAgICAgICAgICAgJHNjb3BlLndhbm5hRWRpdEVWID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZpZXcuRVZ2YWwgPSAnZWRpdCc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXZDb3B5ID0gYW5ndWxhci5jb3B5KCRzY29wZS5hbkV2ZW50KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbEVWRWRpdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS52aWV3LkVWdmFsID0gJ2RldGFpbCc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXZDb3B5ID0gW107XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2NhbGxlZCBhIGZldyB0aW1lcyB0byBmb3JtYXQganVzdCB0aGUgZGF0ZSAobm8gdGltZSlcclxuICAgICAgICAgICAgdmFyIG1ha2VBZGF0ZSA9IGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYURhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcHJvdmlkZWQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIGFEYXRlID0gbmV3IERhdGUoZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHllYXIgPSBhRGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vbnRoID0gYURhdGUuZ2V0TW9udGgoKTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXkgPSAoJzAnICsgYURhdGUuZ2V0RGF0ZSgpKS5zbGljZSgtMik7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW9udGhOYW1lcyA9IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXRlV090aW1lID0gbmV3IERhdGUobW9udGhOYW1lc1ttb250aF0gKyBcIiBcIiArIGRheSArIFwiLCBcIiArIHllYXIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVXT3RpbWU7XHJcbiAgICAgICAgICAgIH07IC8vZW5kIG1ha2VBZGF0ZSgpXHJcbiAgICAgICAgICAgIC8vY2FsbGVkIGEgdG8gZm9ybWF0IGp1c3QgdGhlIGRhdGUgKG5vIHRpbWUpICcyMDEzLTA1LTE2VDA1OjAwOjAwJ1xyXG4gICAgICAgICAgICB2YXIgZGF0ZVdPdGltZSA9IGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgeWVhciA9IGQuZ2V0RnVsbFllYXIoKTtcclxuICAgICAgICAgICAgICAgIHZhciBtb250aCA9IGQuZ2V0TW9udGgoKTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXkgPSAoJzAnICsgZC5nZXREYXRlKCkpLnNsaWNlKC0yKTtcclxuICAgICAgICAgICAgICAgIHZhciBtb250aE5hbWVzID0gW1wiMDFcIiwgXCIwMlwiLCBcIjAzXCIsIFwiMDRcIiwgXCIwNVwiLCBcIjA2XCIsIFwiMDdcIiwgXCIwOFwiLCBcIjA5XCIsIFwiMTBcIiwgXCIxMVwiLCBcIjEyXCJdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGVXT3RpbWUgPSBtb250aE5hbWVzW21vbnRoXSArIFwiL1wiICsgZGF5ICsgXCIvXCIgKyB5ZWFyO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVXT3RpbWU7XHJcbiAgICAgICAgICAgIH07Ly9lbmQgbWFrZUFkYXRlKClcclxuICAgICAgICAgICAgaWYgKHRoaXNFdmVudCAhPT0gXCJlbXB0eVwiKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY3JlYXRlT1JlZGl0RVYgPSAnZWRpdCc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXZNb2RhbEhlYWRlciA9IFwiRXZlbnQgSW5mb3JtYXRpb25cIjtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hbkV2ZW50ID0gYW5ndWxhci5jb3B5KHRoaXNFdmVudCk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYW5FdmVudC5ldmVudF9zdGFydF9kYXRlID0gJHNjb3BlLmFuRXZlbnQuZXZlbnRfc3RhcnRfZGF0ZSAhPT0gdW5kZWZpbmVkID8gbWFrZUFkYXRlKCRzY29wZS5hbkV2ZW50LmV2ZW50X3N0YXJ0X2RhdGUpIDogJyc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYW5FdmVudC5ldmVudF9lbmRfZGF0ZSA9ICRzY29wZS5hbkV2ZW50LmV2ZW50X2VuZF9kYXRlICE9PSB1bmRlZmluZWQgPyBtYWtlQWRhdGUoJHNjb3BlLmFuRXZlbnQuZXZlbnRfZW5kX2RhdGUpIDogJyc7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvL3RoaXMgaXMgYSBuZXcgZXZlbnQgYmVpbmcgY3JlYXRlZFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNyZWF0ZU9SZWRpdEVWID0gJ2NyZWF0ZSc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYW5FdmVudC5ldmVudF9zdGFydF9kYXRlID0gbWFrZUFkYXRlKCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIC8vb24gY3JlYXRlIGFuZCBzYXZlLCBpZiBkYXRlcyBlbnRlcmVkLCBjb21wYXJlIHRvIGVuc3VyZSBlbmQgZGF0ZSBjb21lcyBhZnRlciBzdGFydCBkYXRlXHJcbiAgICAgICAgICAgIHZhciBjb21wYXJlRGF0ZXMgPSBmdW5jdGlvbiAodiwgc2QsIGVkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAobmV3IERhdGUoZWQpIDwgbmV3IERhdGUoc2QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaXhEYXRlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBldmVudCBlbmQgZGF0ZSBtdXN0IGJlIGFmdGVyIHRoZSBldmVudCBzdGFydCBkYXRlLjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGZpeERhdGUucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGVkID09PSBcIlwiIHx8IHNkID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy90aGV5IGVudGVyZWQgYW4gaW52YWxpZCBkYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgdiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHY7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuY3JlYXRlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSBlbmQgZGF0ZSBpcyBhZnRlciBzdGFydCBkYXRlICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKCgkc2NvcGUuYW5FdmVudC5ldmVudF9zdGFydF9kYXRlICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLmFuRXZlbnQuZXZlbnRfc3RhcnRfZGF0ZSAhPT0gbnVsbCkgJiZcclxuICAgICAgICAgICAgICAgICAgICAoJHNjb3BlLmFuRXZlbnQuZXZlbnRfZW5kX2RhdGUgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuYW5FdmVudC5ldmVudF9lbmRfZGF0ZSAhPT0gbnVsbCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGNvbXBhcmVEYXRlcyh2YWxpZCwgJHNjb3BlLmFuRXZlbnQuZXZlbnRfc3RhcnRfZGF0ZSwgJHNjb3BlLmFuRXZlbnQuZXZlbnRfZW5kX2RhdGUpO1xyXG4gICAgICAgICAgICAgICAgfS8vZW5kIGlmIHRoZXJlJ3MgYSBzdGFydCBhbmQgZW5kIGRhdGUgXHJcbiAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjcmVhdGVkRXZlbnQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBFVkVOVC5zYXZlKCRzY29wZS5hbkV2ZW50LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRXZlbnQgQ3JlYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9wdXNoIHRoaXMgbmV3IGV2ZW50IGludG8gdGhlIGV2ZW50TGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkRXZlbnQgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZEV2ZW50LmV2ZW50X2lkID0gcmVzcG9uc2UuZXZlbnRfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRFdmVudC5OYW1lID0gcmVzcG9uc2UuZXZlbnRfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZEV2ZW50LlR5cGUgPSAkc2NvcGUuZXZlbnRUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuZXZlbnRfdHlwZV9pZCA9PSByZXNwb25zZS5ldmVudF90eXBlX2lkOyB9KVswXS50eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkRXZlbnQuU3RhdHVzID0gJHNjb3BlLmV2ZW50U3RhdHVzZXMuZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLmV2ZW50X3N0YXR1c19pZCA9PSByZXNwb25zZS5ldmVudF9zdGF0dXNfaWQ7IH0pWzBdLnN0YXR1cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvb3JkID0gJHNjb3BlLmFkbWluTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMubWVtYmVyX2lkID09IHJlc3BvbnNlLmV2ZW50X2Nvb3JkaW5hdG9yOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZEV2ZW50LlN0YXJ0RGF0ZSA9IHJlc3BvbnNlLmV2ZW50X3N0YXJ0X2RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRFdmVudC5FbmREYXRlID0gcmVzcG9uc2UuZXZlbnRfZW5kX2RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRFdmVudC5Db29yZCA9IGNvb3JkICE9PSB1bmRlZmluZWQgPyBjb29yZC5mbmFtZSArIFwiIFwiICsgY29vcmQubG5hbWUgOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3IgY3JlYXRpbmcgbmV3IGV2ZW50OiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW5kQmFjayA9IFtjcmVhdGVkRXZlbnQsICdjcmVhdGVkJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHNlbmRCYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07Ly9lbmQgJHNjb3BlLnNhdmUoKSAgICAgXHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuc2F2ZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgZW5kIGRhdGUgaXMgYWZ0ZXIgc3RhcnQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgaWYgKCgkc2NvcGUuZXZDb3B5LmV2ZW50X3N0YXJ0X2RhdGUgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuZXZDb3B5LmV2ZW50X3N0YXJ0X2RhdGUgIT09IG51bGwpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgKCRzY29wZS5ldkNvcHkuZXZlbnRfZW5kX2RhdGUgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuZXZDb3B5LmV2ZW50X2VuZF9kYXRlICE9PSBudWxsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkID0gY29tcGFyZURhdGVzKHZhbGlkLCAkc2NvcGUuZXZDb3B5LmV2ZW50X3N0YXJ0X2RhdGUsICRzY29wZS5ldkNvcHkuZXZlbnRfZW5kX2RhdGUpO1xyXG4gICAgICAgICAgICAgICAgfS8vZW5kIGlmIHRoZXJlJ3MgYSBzdGFydCBhbmQgZW5kIGRhdGUgXHJcbiAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVkRXZlbnQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBFVkVOVC51cGRhdGUoeyBpZDogJHNjb3BlLmV2Q29weS5ldmVudF9pZCB9LCAkc2NvcGUuZXZDb3B5LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRFdmVudCA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkRXZlbnQuZXZlbnRfaWQgPSByZXNwb25zZS5ldmVudF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZEV2ZW50Lk5hbWUgPSByZXNwb25zZS5ldmVudF9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkRXZlbnQuVHlwZSA9ICRzY29wZS5ldmVudFR5cGVzLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5ldmVudF90eXBlX2lkID09IHJlc3BvbnNlLmV2ZW50X3R5cGVfaWQ7IH0pWzBdLnR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRFdmVudC5TdGF0dXMgPSAkc2NvcGUuZXZlbnRTdGF0dXNlcy5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuZXZlbnRfc3RhdHVzX2lkID09IHJlc3BvbnNlLmV2ZW50X3N0YXR1c19pZDsgfSlbMF0uc3RhdHVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29vcmQgPSAkc2NvcGUuYWRtaW5NZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5tZW1iZXJfaWQgPT0gcmVzcG9uc2UuZXZlbnRfY29vcmRpbmF0b3I7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkRXZlbnQuU3RhcnREYXRlID0gcmVzcG9uc2UuZXZlbnRfc3RhcnRfZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZEV2ZW50LkVuZERhdGUgPSByZXNwb25zZS5ldmVudF9lbmRfZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZEV2ZW50LkNvb3JkID0gY29vcmQgIT09IHVuZGVmaW5lZCA/IGNvb3JkLmZuYW1lICsgXCIgXCIgKyBjb29yZC5sbmFtZSA6IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRXZlbnQgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW5kQmFjayA9IFt1cGRhdGVkRXZlbnQsICd1cGRhdGVkJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHNlbmRCYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5kZWxldGVFViA9IGZ1bmN0aW9uIChldikge1xyXG4gICAgICAgICAgICAgICAgLy9tb2RhbFxyXG4gICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJFdmVudFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChldmVudFRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9ERUxFVEUgaXRcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgRVZFTlQuZGVsZXRlKHsgaWQ6IGV2ZW50VG9SZW1vdmUuZXZlbnRfaWQgfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkV2ZW50IERlbGV0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShbXCJkZVwiLCAnZGVsZXRlZCddKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9jYW5jZWwgbW9kYWxcclxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcgPSB7IHNob3dMb2FkaW5nOiBmYWxzZSB9OyAvL0xvYWRpbmcuLi5cclxuXHJcbiAgICAgICAgICAgIC8vI3JlZ2lvbiBaaXAgRmlsZSBEb3dubG9hZCBTZWN0aW9uXHJcbiAgICAgICAgICAgIGlmICh0aGlzRXZlbnQgIT09IFwiZW1wdHlcIikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnppcEZpbGVQYXJhbXMgPSB7IGZpbGVzRm9yOiBcIlwiLCBzdGF0ZU5hbWU6IFwiXCIsIGNvdW50eU5hbWU6IFwiXCIsIGZyb21EYXRlOiBcIlwiLCB0b0RhdGU6IFwiXCIgfTtcclxuICAgICAgICAgICAgICAgIC8vICRzY29wZS5zdGF0ZXMgPSBhbGxTdGF0ZXM7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZUNvdW50eUxpc3QgPSBbXTsgLy9ob2xkcyBjb3VudGllcyB3ZXJlIHRoZXJlIGFyZSBldmVudHNpdGVzICAgYWxsQ291bnRpZXM7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY291bnR5QXJyYXkgPSBbXTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFN0YXRlcyA9IFtdOyAvL2hvbGRzIHRoZSBzdGF0ZXMganVzdCBmb3IgdGhpcyBldmVudFxyXG4gICAgICAgICAgICAgICAgLy9sb29wIHRocm91Z2ggZXZlbnRTaXRlcyBhbmQgbG9vcCB0aHJ1IHN0YXRlcywgd2hlbiBtYXRjaGluZyBvbmUsIGFkZCB0byBldmVudFN0YXRlcyAobmVlZCBzdGF0ZV9pZCBmb3IgY291bnR5IGZpbHRlcmluZylcclxuICAgICAgICAgICAgICAgIGlmIChldmVudFNpdGVzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBzdCA9IDA7IHN0IDwgYWxsU3RhdGVzLmxlbmd0aDsgc3QrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2ZvcmVhY2ggbG9vcCB0byBwb3B1bGF0ZSBldmVudFN0YXRlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBlcyA9IDA7IGVzIDwgZXZlbnRTaXRlcy5sZW5ndGg7IGVzKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudFNpdGVzW2VzXS5zdGF0ZSA9PSBhbGxTdGF0ZXNbc3RdLnN0YXRlX2FiYnJldikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFN0YXRlcy5wdXNoKGFsbFN0YXRlc1tzdF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVzID0gZXZlbnRTaXRlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgJHNjb3BlLmV2ZW50U3RhdGVzID0gYWxsU3RhdGVzO1xyXG4gICAgICAgICAgICAgICAgLy9wb3B1bGF0ZSBjb3VudHlhcnJheSB3aXRoIGp1c3QgdGhvc2UgY291bnRpZXMgd2hlcmUgd2UgaGF2ZSBldmVudFNJdGVzXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBjaSA9IDA7IGNpIDwgZXZlbnRTaXRlcy5sZW5ndGg7IGNpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnNpdGVDb3VudHlMaXN0Lm1hcChmdW5jdGlvbiAoc2NsKSB7IHJldHVybiBzY2wuY291bnR5X25hbWU7IH0pLmluZGV4T2YoZXZlbnRTaXRlc1tjaV0uY291bnR5KSA8IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlQ291bnR5TGlzdC5wdXNoKHsgc3RhdGVfYWJicmV2OiBldmVudFNpdGVzW2NpXS5zdGF0ZSwgY291bnR5X25hbWU6IGV2ZW50U2l0ZXNbY2ldLmNvdW50eSwgc3RhdGVfaWQ6IGFsbFN0YXRlcy5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc3RhdGVfYWJicmV2ID09IGV2ZW50U2l0ZXNbY2ldLnN0YXRlOyB9KVswXS5zdGF0ZV9pZCB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vZmlsdGVyIGNvdW50aWVzIGJ5IHN0YXRlIGNob3NlblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLlVwZGF0ZUNvdW50aWVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuemlwRmlsZVBhcmFtcy5zdGF0ZU5hbWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc1N0YXRlID0gJHNjb3BlLmV2ZW50U3RhdGVzLmZpbHRlcihmdW5jdGlvbiAoc3QpIHsgcmV0dXJuIHN0LnN0YXRlX2FiYnJldiA9PSAkc2NvcGUuemlwRmlsZVBhcmFtcy5zdGF0ZU5hbWU7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL29ubHkgc2hvdyBjb3VudGllcyB0aGF0IGFyZSBvbiB0aGUgc2l0ZXMgZm9yIHRoaXMgZXZlbnRcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNvdW50eUFycmF5ID0gJHNjb3BlLnNpdGVDb3VudHlMaXN0LmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5zdGF0ZV9pZCA9PSB0aGlzU3RhdGUuc3RhdGVfaWQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jb3VudHlBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvL2xpc3Qgb2YgZmlsZSB0eXBlcyBmb3IgaHdtXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuSFdNZmlsZVR5cGVzID0gZmlsZVR5cGVzLmZpbHRlcihmdW5jdGlvbiAoaGZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9QaG90byAoMSksIEhpc3RvcmljICgzKSwgRmllbGQgU2hlZXRzICg0KSwgTGV2ZWwgTm90ZXMgKDUpLCBPdGhlciAoNyksIExpbmsgKDgpLCBTa2V0Y2ggKDEwKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBoZnQuZmlsZXR5cGUgPT09ICdQaG90bycgfHwgaGZ0LmZpbGV0eXBlID09PSAnSGlzdG9yaWMgQ2l0YXRpb24nIHx8IGhmdC5maWxldHlwZSA9PT0gJ0ZpZWxkIFNoZWV0cycgfHwgaGZ0LmZpbGV0eXBlID09PSAnTGV2ZWwgTm90ZXMnIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhmdC5maWxldHlwZSA9PT0gJ090aGVyJyB8fCBoZnQuZmlsZXR5cGUgPT09ICdTa2V0Y2gnO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvL2xpc3Qgb2YgZmlsZSB0eXBlcyBmb3Igc2Vuc29yc1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvcmZpbGVUeXBlcyA9IGZpbGVUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKHNmdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vUGhvdG8gKDEpLCBEYXRhICgyKSwgSGlzdG9yaWMgKDMpLCBGaWVsZCBTaGVldHMgKDQpLCBMZXZlbCBOb3RlcyAoNSksIE90aGVyICg3KSwgTGluayAoOCksIFNrZXRjaCAoMTApXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNmdC5maWxldHlwZSA9PT0gJ1Bob3RvJyB8fCBzZnQuZmlsZXR5cGUgPT09ICdEYXRhJyB8fCBzZnQuZmlsZXR5cGUgPT09ICdIaXN0b3JpYyBDaXRhdGlvbicgfHwgc2Z0LmZpbGV0eXBlID09PSAnRmllbGQgU2hlZXRzJyB8fCBzZnQuZmlsZXR5cGUgPT09ICdMZXZlbCBOb3RlcycgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICBzZnQuZmlsZXR5cGUgPT09ICdPdGhlcicgfHwgc2Z0LmZpbGV0eXBlID09PSAnU2tldGNoJztcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy9od20gb3Igc2Vuc29yIHdhcyBjaG9zZW4sIHVwZGF0ZSBmaWxlIHR5cGUgY2hlY2tib3hsaXN0XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudXBkYXRlZmlsZVR5cGVDaGVja3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9kZXBlbmRpbmcgb24gd2hpY2ggdGhleSBjaG9zZSAoSFdNIE9SIFNFTlNPUiksIHVwZGF0ZSBjaGVja2JveCBzY29wZSBsaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bUZpbGVUeXBlc1dhbnRlZCA9IFtdOyB2YXIgc2Vuc29yRmlsZVR5cGVzV2FudGVkID0gW107IC8vcmVzZXQgZWFjaCB0aW1lIHRoaXMgY2hhbmdlc1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5od21GaWxlVHlwZXNTdHJpbmcgPSBcIlwiOyAkc2NvcGUuc2Vuc29yRmlsZVR5cGVzU3RyaW5nID0gXCJcIjsgLy9yZXNldCBlYWNoIHRpbWUgdGhpcyBjaGFuZ2VzXHJcbiAgICAgICAgICAgICAgICAgICAgLy91bmNoZWNrIGFsbCBjaGVja2JveGVzIGZvciBod20gYW5kIHNlbnNvciBmaWxlIHR5cGVzXHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5IV01maWxlVHlwZXMsIGZ1bmN0aW9uIChod21GVCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBod21GVC5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuc2Vuc29yZmlsZVR5cGVzLCBmdW5jdGlvbiAoc2VuRlQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuRlQuc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnppcEZpbGVQYXJhbXMuZmlsZXNGb3IgPT0gXCJIV01zXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbGVUeXBlQ2hlY2tMaXN0ID0gJHNjb3BlLkhXTWZpbGVUeXBlcztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS56aXBGaWxlUGFyYW1zLmZpbGVzRm9yID09IFwiU2Vuc29yc1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlVHlwZUNoZWNrTGlzdCA9ICRzY29wZS5zZW5zb3JmaWxlVHlwZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlc1dhbnRlZENob3NlbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy9ob2xkZXIgb2Ygc3RyaW5nIGFycmF5IG9mIGZpbGV0eXBlcyB3YW50ZWRcclxuXHJcbiAgICAgICAgICAgICAgICAvL29uY2hlY2sgZXZlbnRcclxuICAgICAgICAgICAgICAgICRzY29wZS5jaGVja2VkRmlsZSA9IGZ1bmN0aW9uIChmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9maWxlVHlwZSBjaGVja2VkL3VuY2hlY2tlZCA9PSBhZGQvcmVtb3ZlIGl0IGZyb20gc3RyaW5nIGFycmF5IHRvIHBhc3MgaW50byB1cmxcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnppcEZpbGVQYXJhbXMuZmlsZXNGb3IgPT0gXCJIV01zXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bUZpbGVUeXBlc1dhbnRlZCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLkhXTWZpbGVUeXBlcywgZnVuY3Rpb24gKGhmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaGYuc2VsZWN0ZWQpICRzY29wZS5od21GaWxlVHlwZXNXYW50ZWQucHVzaChoZi5maWxldHlwZV9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtRmlsZVR5cGVzU3RyaW5nID0gJHNjb3BlLmh3bUZpbGVUeXBlc1dhbnRlZC5qb2luKFwiLFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS56aXBGaWxlUGFyYW1zLmZpbGVzRm9yID09IFwiU2Vuc29yc1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZW5zb3JGaWxlVHlwZXNXYW50ZWQgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5zZW5zb3JmaWxlVHlwZXMsIGZ1bmN0aW9uIChzZikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNmLnNlbGVjdGVkKSAkc2NvcGUuc2Vuc29yRmlsZVR5cGVzV2FudGVkLnB1c2goc2YuZmlsZXR5cGVfaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvckZpbGVUeXBlc1N0cmluZyA9ICRzY29wZS5zZW5zb3JGaWxlVHlwZXNXYW50ZWQuam9pbihcIixcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2Rvd25sb2FkIHppcCBjbGlja2VkXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuRG93bmxvYWRaaXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgdGhleSBjaGVja2VkIGF0IGxlYXN0IHRoZSBod20gb3Igc2Vuc29yIGNoZWNrYm94XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvcm1hdHRlZEZyb21EYXRlID0gXCJcIjsgdmFyIGZvcm1hdHRlZFRvRGF0ZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS56aXBGaWxlUGFyYW1zLmZyb21EYXRlICE9PSBcIlwiKSBmb3JtYXR0ZWRGcm9tRGF0ZSA9IGRhdGVXT3RpbWUoJHNjb3BlLnppcEZpbGVQYXJhbXMuZnJvbURhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuemlwRmlsZVBhcmFtcy50b0RhdGUgIT09IFwiXCIpIGZvcm1hdHRlZFRvRGF0ZSA9IGRhdGVXT3RpbWUoJHNjb3BlLnppcEZpbGVQYXJhbXMudG9EYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAvL0V2ZW50cy97e2FuRXZlbnQuZXZlbnRfaWR9fS9FdmVudEZpbGVJdGVtcz9TdGF0ZT17c3RhdGVOYW1lfSZDb3VudHk9e2NvdW50eX0mRnJvbURhdGU9e2Zyb21EYXRlfSZUb0RhdGU9e3RvRGF0ZX0mRmlsZXNGb3I9e2ZpbGVzRm9yfSZIV01GaWxlVHlwZT17aHdtRmlsZVR5cGVzfSZTZW5zb3JGaWxlVHlwZXM9e3NlbnNvckZpbGVUeXBlc31cIlxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuemlwRmlsZVBhcmFtcy5maWxlc0ZvciAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZXBhdGggPSAkc2NvcGUuc2VydmVyVVJMICsgJy9FdmVudHMvJyArICRzY29wZS5hbkV2ZW50LmV2ZW50X2lkICsgJy9FdmVudEZpbGVJdGVtcz9TdGF0ZT0nICsgJHNjb3BlLnppcEZpbGVQYXJhbXMuc3RhdGVOYW1lICsgJyZDb3VudHk9JyArICRzY29wZS56aXBGaWxlUGFyYW1zLmNvdW50eU5hbWUgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyZGcm9tRGF0ZT0nICsgZm9ybWF0dGVkRnJvbURhdGUgKyAnJlRvRGF0ZT0nICsgZm9ybWF0dGVkVG9EYXRlICsgJyZGaWxlc0Zvcj0nICsgJHNjb3BlLnppcEZpbGVQYXJhbXMuZmlsZXNGb3IgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJyZIV01GaWxlVHlwZT0nICsgJHNjb3BlLmh3bUZpbGVUeXBlc1N0cmluZyArICcmU2Vuc29yRmlsZVR5cGVzPScgKyAkc2NvcGUuc2Vuc29yRmlsZVR5cGVzU3RyaW5nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeGhyID0gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhoci5vcGVuKCdHRVQnLCBmaWxlcGF0aCk7IC8vLHRydWUpOyAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5vcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJjbG9zZUJ1dHRvblwiOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJwb3NpdGlvbkNsYXNzXCI6IFwidG9hc3QtYm90dG9tLXJpZ2h0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcIm9uY2xpY2tcIjogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwidGltZU91dFwiOiBcIjBcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFwiZXh0ZW5kZWRUaW1lT3V0XCI6IFwiMFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci53YXJuaW5nKFwiWmlwIGZpbGUgaXMgZG93bmxvYWRpbmcuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gXCJibG9iXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsIFwiYXBwbGljYXRpb24vKjsgY2hhcnNldD11dGYtOFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIoXCJBdXRob3JpemF0aW9uXCIsICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIucmVhZHlTdGF0ZSA9PT0gNCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh4aHIuc3RhdHVzVGV4dCAhPT0gXCJJbnRlcm5hbCBTZXJ2ZXIgRXJyb3JcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXNnc1dpTW1lc3NhZ2UgPSB4aHIuZ2V0UmVzcG9uc2VIZWFkZXIoXCJ1c2dzd2ltLW1lc3NhZ2VzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodXNnc1dpTW1lc3NhZ2UgPT0gXCJpbmZvOiBGaWxlQ291bnQ6MCxDb3VudDogMFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvck1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+Tm8gRmlsZXM8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGVyZSBhcmUgbm8gZmlsZXMgdGhhdCBtYXRjaCB5b3VyIHF1ZXJ5LjwvcD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxwPlBsZWFzZSBuYXJyb3cgeW91ciBzZWFyY2ggYW5kIHRyeSBhZ2Fpbi48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBibG9iID0gbmV3IEJsb2IoW3hoci5yZXNwb25zZV0sIHsgdHlwZTogJ2FwcGxpY2F0aW9uL29jdGV0LXN0cmVhbScgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1cmxDcmVhdG9yID0gd2luZG93LlVSTCB8fCB3aW5kb3cud2Via2l0VVJMIHx8IHdpbmRvdy5tb3pVUkwgfHwgd2luZG93Lm1zVVJMO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVVUkwgPSB1cmxDcmVhdG9yLmNyZWF0ZU9iamVjdFVSTChibG9iKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vQmxvYiwgY2xpZW50IHNpZGUgb2JqZWN0IGNyZWF0ZWQgdG8gd2l0aCBob2xkaW5nIGJyb3dzZXIgc3BlY2lmaWMgZG93bmxvYWQgcG9wdXAsIG9uIHRoZSBVUkwgY3JlYXRlZCB3aXRoIHRoZSBoZWxwIG9mIHdpbmRvdyBvYmouXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLnN0eWxlID0gXCJkaXNwbGF5OiBub25lXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmhyZWYgPSBmaWxlVVJMO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS5kb3dubG9hZCA9ICdFdmVudEZpbGVEb3dubG9hZC56aXAnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYS50YXJnZXQgPSAnX2JsYW5rJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoYSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhLmNsaWNrKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuY2xlYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc29tZXRoaW5nIHdlbnQgd3JvbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmNsZWFyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvck1vZGFsMSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPkRvd25sb2FkIHdhcyB1bnN1Y2Nlc3NmdWwuIFBvc3NpYmxlIGNhdXNlIGlzIHRoYXQgdGhlIHppcCBmaWxlIGlzIHRvbyBsYXJnZSB0byBkb3dubG9hZC48L3A+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxwPlBsZWFzZSBuYXJyb3cgeW91ciBzZWFyY2ggYW5kIHRyeSBhZ2Fpbi48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB4aHIuc2VuZCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2hvdyBtb2RhbCBzYXlpbmcgeW91IG11c3QgY2hvb3NlIGF0IGxlYXN0IHRoZSBod20gb3Igc2Vuc29yIHRvIGZpbHRlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGF0TW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5Zb3UgbXVzdCBjaG9vc2UgZWl0aGVyIEhXTSBmaWxlcyBvciBTZW5zb3IgZmlsZXMgYmVmb3JlIGEgZG93bmxvYWRlZCB6aXAgZmlsZSBjYW4gYmUgcmVxdWVzdGVkLjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIFppcCBGaWxlIERvd25sb2FkIFNlY3Rpb25cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1dKTtcclxuXHJcbn0oKSk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU2V0dGluZ3NDb250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTZXR0aW5nc0NvbnRyb2xsZXJzJyk7XHJcbiAgICBcclxuICAgIFNldHRpbmdzQ29udHJvbGxlcnMuY29udHJvbGxlcignZXZlbnRJbmZvQ3RybCcsIFsnJHNjb3BlJywgJyRjb29raWVzJywgJyRsb2NhdGlvbicsICckaHR0cCcsICckdWliTW9kYWwnLCAnJGZpbHRlcicsICdFVkVOVCcsICd0aGlzRXZlbnQnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRjb29raWVzLCAkbG9jYXRpb24sICRodHRwLCAkdWliTW9kYWwsICRmaWx0ZXIsIEVWRU5ULCB0aGlzRXZlbnQpIHtcclxuICAgICAgICAgICAgaWYgKCRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gdW5kZWZpbmVkIHx8ICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmF1dGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbG9naW4nKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vYWxsIHRoaW5ncyBib3RoIG5ldyBhbmQgZXhpc3RpbmcgZXZlbnRzIHBhZ2Ugd2lsbCBuZWVkXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIERhdGVwaWNrZXJcclxuICAgICAgICAgICAgICAgICRzY29wZS5kYXRlcGlja3JzID0ge307XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUub3BlbiA9IGZ1bmN0aW9uICgkZXZlbnQsIHdoaWNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tyc1t3aGljaF0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vJHNjb3BlLmZvcm1hdCA9ICdNTU0gZGQsIHl5eXknO1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIERhdGVwaWNrZXJcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYW5FdmVudCA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBERUxFVEUgRXZlbnQgY2xpY2tcclxuICAgICAgICAgICAgICAgICRzY29wZS5EZWxldGVFdmVudCA9IGZ1bmN0aW9uIChldikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkV2ZW50XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChuYW1lVG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy95ZXMsIHJlbW92ZSB0aGlzIGtleXdvcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vREVMRVRFIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEVWRU5ULmRlbGV0ZSh7IGlkOiBuYW1lVG9SZW1vdmUuZXZlbnRfaWQgfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbEV2ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxFdi5ldmVudF9pZCA9IG5hbWVUb1JlbW92ZS5ldmVudF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbEV2Lk5hbWUgPSBuYW1lVG9SZW1vdmUuZXZlbnRfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbEV2LlR5cGUgPSAkc2NvcGUuZXZlbnRUeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuZXZlbnRfdHlwZV9pZCA9PSBuYW1lVG9SZW1vdmUuZXZlbnRfdHlwZV9pZDsgfSlbMF0udHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbEV2LlN0YXR1cyA9ICRzY29wZS5ldmVudFN0YXRMaXN0LmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gci5ldmVudF9zdGF0dXNfaWQgPT0gbmFtZVRvUmVtb3ZlLmV2ZW50X3N0YXR1c19pZDsgfSlbMF0uc3RhdHVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvb3JkID0gJHNjb3BlLmV2ZW50Q29vcmRMaXN0LmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5tZW1iZXJfaWQgPT0gbmFtZVRvUmVtb3ZlLmV2ZW50X2Nvb3JkaW5hdG9yOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbEV2LlN0YXJ0RGF0ZSA9IG5hbWVUb1JlbW92ZS5ldmVudF9zdGFydF9kYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsRXYuRW5kRGF0ZSA9IG5hbWVUb1JlbW92ZS5ldmVudF9lbmRfZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbEV2LkNvb3JkID0gY29vcmQgIT09IHVuZGVmaW5lZCA/IGNvb3JkLmZuYW1lICsgXCIgXCIgKyBjb29yZC5sbmFtZSA6IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAkc2NvcGUuZXZlbnRMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ldmVudExpc3RbaV0uZXZlbnRfaWQgPT0gZGVsRXYuZXZlbnRfaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5kZXggPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpID0gJHNjb3BlLmV2ZW50TGlzdC5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV2ZW50TGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJFdmVudCBEZWxldGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvRXZlbnRzL0V2ZW50c0xpc3QnKS5yZXBsYWNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIERFTEVURSBFdmVudCBjbGlja1xyXG5cclxuICAgICAgICAgICAgICAgIC8vY2FsbGVkIGEgZmV3IHRpbWVzIHRvIGZvcm1hdCBqdXN0IHRoZSBkYXRlIChubyB0aW1lKVxyXG4gICAgICAgICAgICAgICAgdmFyIG1ha2VBZGF0ZSA9IGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFEYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcHJvdmlkZWQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhRGF0ZSA9IG5ldyBEYXRlKGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHllYXIgPSBhRGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb250aCA9IGFEYXRlLmdldE1vbnRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRheSA9ICgnMCcgKyBhRGF0ZS5nZXREYXRlKCkpLnNsaWNlKC0yKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9udGhOYW1lcyA9IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZVdPdGltZSA9IG5ldyBEYXRlKG1vbnRoTmFtZXNbbW9udGhdICsgXCIgXCIgKyBkYXkgKyBcIiwgXCIgKyB5ZWFyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZVdPdGltZTtcclxuICAgICAgICAgICAgICAgIH07IC8vZW5kIG1ha2VBZGF0ZSgpXHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXNFdmVudCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFuRXZlbnQgPSB0aGlzRXZlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFuRXZlbnQuZXZlbnRfc3RhcnRfZGF0ZSA9IG1ha2VBZGF0ZSgkc2NvcGUuYW5FdmVudC5ldmVudF9zdGFydF9kYXRlKTsgJHNjb3BlLmFuRXZlbnQuZXZlbnRfZW5kX2RhdGUgPSBtYWtlQWRhdGUoJHNjb3BlLmFuRXZlbnQuZXZlbnRfZW5kX2RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50aGlzRXZlbnRUeXBlID0gJHNjb3BlLmV2ZW50VHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLmV2ZW50X3R5cGVfaWQgPT0gdGhpc0V2ZW50LmV2ZW50X3R5cGVfaWQ7IH0pWzBdLnR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRoaXNFdmVudFN0YXR1cyA9ICRzY29wZS5ldmVudFN0YXRMaXN0LmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gci5ldmVudF9zdGF0dXNfaWQgPT0gdGhpc0V2ZW50LmV2ZW50X3N0YXR1c19pZDsgfSlbMF0uc3RhdHVzO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBFQyA9ICRzY29wZS5ldmVudENvb3JkTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMubWVtYmVyX2lkID09IHRoaXNFdmVudC5ldmVudF9jb29yZGluYXRvcjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRoaXNFdmVudENvb3JkID0gRUMgIT09IHVuZGVmaW5lZCA/IEVDLmZuYW1lICsgXCIgXCIgKyBFQy5sbmFtZSA6IFwiXCI7XHJcblxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIGlmIHRoaXNFdmVudCAhPSBudWxsXHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3RoaXMgaXMgYSBuZXcgZXZlbnQgYmVpbmcgY3JlYXRlZFxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hbkV2ZW50LmV2ZW50X3N0YXJ0X2RhdGUgPSBtYWtlQWRhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYW5FdmVudC5ldmVudF9lbmRfZGF0ZSA9IG1ha2VBZGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIH0vL2VuZCAtbmV3IGV2ZW50XHJcblxyXG4gICAgICAgICAgICAgICAgLy9jaGFuZ2UgdG8gdGhlIHVzZXIgbWFkZSwgcHV0IGl0IC4uIGZpcmVkIG9uIGVhY2ggYmx1ciBhZnRlciBjaGFuZ2UgbWFkZSB0byBmaWVsZFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLlNhdmVPbkJsdXIgPSBmdW5jdGlvbiAodikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZW5zdXJlIHRoZXkgZG9uJ3QgZGVsZXRlIHJlcXVpcmVkIGZpZWxkIHZhbHVlcyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBFVkVOVC51cGRhdGUoeyBpZDogJHNjb3BlLmFuRXZlbnQuZXZlbnRfaWQgfSwgJHNjb3BlLmFuRXZlbnQsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRXZlbnQgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVycm9yTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5QbGVhc2UgcG9wdWxhdGUgYWxsIHJlcXVpcmVkIGZpZWxkcy48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2Vycm9yTW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy99KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTsvL2VuZCBTYXZlT25CbHVyXHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRVZFTlQuc2F2ZSgkc2NvcGUuYW5FdmVudCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJFdmVudCBDcmVhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wdXNoIHRoaXMgbmV3IGV2ZW50IGludG8gdGhlIGV2ZW50TGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIEUgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEUuZXZlbnRfaWQgPSByZXNwb25zZS5ldmVudF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEUuTmFtZSA9IHJlc3BvbnNlLmV2ZW50X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFLlR5cGUgPSAkc2NvcGUuZXZlbnRUeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuZXZlbnRfdHlwZV9pZCA9PSByZXNwb25zZS5ldmVudF90eXBlX2lkOyB9KVswXS50eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRS5TdGF0dXMgPSAkc2NvcGUuZXZlbnRTdGF0TGlzdC5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIuZXZlbnRfc3RhdHVzX2lkID09IHJlc3BvbnNlLmV2ZW50X3N0YXR1c19pZDsgfSlbMF0uc3RhdHVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNvb3JkID0gJHNjb3BlLmV2ZW50Q29vcmRMaXN0LmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5tZW1iZXJfaWQgPT0gcmVzcG9uc2UuZXZlbnRfY29vcmRpbmF0b3I7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRS5TdGFydERhdGUgPSByZXNwb25zZS5ldmVudF9zdGFydF9kYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRS5FbmREYXRlID0gcmVzcG9uc2UuZXZlbnRfZW5kX2RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBFLkNvb3JkID0gY29vcmQgIT09IHVuZGVmaW5lZCA/IGNvb3JkLmZuYW1lICsgXCIgXCIgKyBjb29yZC5sbmFtZSA6IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXZlbnRMaXN0LnB1c2goRSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9FdmVudHMvRXZlbnRzTGlzdCcpLnJlcGxhY2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07Ly9lbmQgJHNjb3BlLnNhdmUoKVxyXG4gICAgICAgICAgICB9Ly9lbmQgZWxzZSAoY2hlY2tDcmVkcygpKVxyXG4gICAgICAgIH1dKTtcclxuICAgIFxyXG59KCkpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFNldHRpbmdzQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU2V0dGluZ3NDb250cm9sbGVycycpO1xyXG5cclxuICAgIFNldHRpbmdzQ29udHJvbGxlcnMuY29udHJvbGxlcignZXZlbnRDdHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckbG9jYXRpb24nLCAnJGh0dHAnLCAnJGZpbHRlcicsICckdWliTW9kYWwnLCAnTUVNQkVSJywgJ0ZJTEVfVFlQRScsICdFVkVOVCcsICdTVEFURScsICdDT1VOVElFUycsICdhbGxDb29yZE1lbWJlcnMnLCAnYWxsRXZlbnRzJywgJ2FsbEV2ZW50VHlwZXMnLCAnYWxsRXZlbnRTdGF0cycsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICRsb2NhdGlvbiwgJGh0dHAsICRmaWx0ZXIsICR1aWJNb2RhbCwgTUVNQkVSLCBGSUxFX1RZUEUsIEVWRU5ULCBTVEFURSwgQ09VTlRJRVMsIGFsbENvb3JkTWVtYmVycywgYWxsRXZlbnRzLCBhbGxFdmVudFR5cGVzLCBhbGxFdmVudFN0YXRzKSB7XHJcbiAgICAgICAgICAgIGlmICgkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IHVuZGVmaW5lZCB8fCAkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hdXRoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnRoaXNQYWdlID0gXCJTZXR0aW5ncy9FdmVudHNcIjtcclxuICAgICAgICAgICAgICAgICRzY29wZS5sb2dnZWRJblJvbGUgPSAkY29va2llcy5nZXQoJ3VzZXJzUm9sZScpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmlzQWRtaW4gPSAkc2NvcGUubG9nZ2VkSW5Sb2xlID09IFwiQWRtaW5cIiA/IHRydWUgOiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjaGFuZ2Ugc29ydGluZyBvcmRlclxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNvcnRfYnkgPSBmdW5jdGlvbiAobmV3U29ydGluZ09yZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5zb3J0aW5nT3JkZXIgPT0gbmV3U29ydGluZ09yZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXZlcnNlID0gISRzY29wZS5yZXZlcnNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc29ydGluZ09yZGVyID0gbmV3U29ydGluZ09yZGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGljb24gc2V0dXBcclxuICAgICAgICAgICAgICAgICAgICAkKCd0aCBpJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGljb24gcmVzZXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygpLmFkZENsYXNzKCdnbHlwaGljb24gZ2x5cGhpY29uLXNvcnQnKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnJldmVyc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgndGguJyArIG5ld1NvcnRpbmdPcmRlciArICcgaScpLnJlbW92ZUNsYXNzKCkuYWRkQ2xhc3MoJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJ3RoLicgKyBuZXdTb3J0aW5nT3JkZXIgKyAnIGknKS5yZW1vdmVDbGFzcygpLmFkZENsYXNzKCdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93bicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvL2NhbGxlZCBhIHRvIGZvcm1hdCBqdXN0IHRoZSBkYXRlIChubyB0aW1lKSAnMjAxMy0wNS0xNlQwNTowMDowMCdcclxuICAgICAgICAgICAgICAgIHZhciBtYWtlQWRhdGUgPSBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBUaW5kZXggPSBkLmluZGV4T2YoXCJUXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGVEYXRlID0gZC5zdWJzdHJpbmcoMCwgVGluZGV4KTsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGVEYXRlO1xyXG4gICAgICAgICAgICAgICAgfTsvL2VuZCBtYWtlQWRhdGUoKVxyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFR5cGVMaXN0ID0gYWxsRXZlbnRUeXBlcztcclxuICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFN0YXRMaXN0ID0gYWxsRXZlbnRTdGF0cztcclxuICAgICAgICAgICAgICAgICRzY29wZS5ldmVudENvb3JkTGlzdCA9IGFsbENvb3JkTWVtYmVycztcclxuXHJcbiAgICAgICAgICAgICAgICAvL2J1aWxkIGV2ZW50T2JqZWN0IGZvciBldmVudExpc3QgZm9yIHRhYmxlIGluIGV2ZW50c0xpc3QuaHRtbFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmV2ZW50TGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBhbGxFdmVudHMubGVuZ3RoOyB4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgRSA9IGFsbEV2ZW50c1t4XTtcclxuICAgICAgICAgICAgICAgICAgICBFLk5hbWUgPSBhbGxFdmVudHNbeF0uZXZlbnRfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBFLlR5cGUgPSAkc2NvcGUuZXZlbnRUeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuZXZlbnRfdHlwZV9pZCA9PSBhbGxFdmVudHNbeF0uZXZlbnRfdHlwZV9pZDsgfSlbMF0udHlwZTtcclxuICAgICAgICAgICAgICAgICAgICBFLlN0YXR1cyA9ICRzY29wZS5ldmVudFN0YXRMaXN0LmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gci5ldmVudF9zdGF0dXNfaWQgPT0gYWxsRXZlbnRzW3hdLmV2ZW50X3N0YXR1c19pZDsgfSlbMF0uc3RhdHVzO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb29yZCA9ICRzY29wZS5ldmVudENvb3JkTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMubWVtYmVyX2lkID09IGFsbEV2ZW50c1t4XS5ldmVudF9jb29yZGluYXRvcjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgRS5TdGFydERhdGUgPSBhbGxFdmVudHNbeF0uZXZlbnRfc3RhcnRfZGF0ZSAhPT0gdW5kZWZpbmVkID8gIG1ha2VBZGF0ZShhbGxFdmVudHNbeF0uZXZlbnRfc3RhcnRfZGF0ZSkgOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIEUuRW5kRGF0ZSA9IGFsbEV2ZW50c1t4XS5ldmVudF9lbmRfZGF0ZSAhPT0gdW5kZWZpbmVkID8gbWFrZUFkYXRlKGFsbEV2ZW50c1t4XS5ldmVudF9lbmRfZGF0ZSkgOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIEUuQ29vcmQgPSBjb29yZCAhPT0gdW5kZWZpbmVkID8gY29vcmQuZm5hbWUgKyBcIiBcIiArIGNvb3JkLmxuYW1lIDogXCJcIjtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV2ZW50TGlzdC5wdXNoKEUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIC8vY3JlYXRlL3ZpZXcgbWVtYmVyIHdhcyBjbGlja2VkXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0V2ZW50TW9kYWwgPSBmdW5jdGlvbiAoZXZlbnRDbGlja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4Q2xpY2tlZCA9ICRzY29wZS5ldmVudExpc3QuaW5kZXhPZihldmVudENsaWNrZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcgPSB7IHNob3dMb2FkaW5nOiB0cnVlIH07IC8vTG9hZGluZy4uLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdldmVudE1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnZXZlbnRNb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnbGcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Q2xhc3M6ICdyZXAtZGlhbG9nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0V2ZW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50Q2xpY2tlZCAhPT0gMCA/IGV2ZW50Q2xpY2tlZCA6IFwiZW1wdHlcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFR5cGVMaXN0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFsbEV2ZW50VHlwZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTdGF0dXNMaXN0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFsbEV2ZW50U3RhdHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRtaW5MaXN0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWxsQ29vcmRNZW1iZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVUeXBlczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBGSUxFX1RZUEUuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRTaXRlczogZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRDbGlja2VkICE9PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRVZFTlQuZ2V0RXZlbnRTaXRlcyh7aWQ6ZXZlbnRDbGlja2VkLmV2ZW50X2lkfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsU3RhdGVzOiBmdW5jdGlvbigpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTVEFURS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxDb3VudGllczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBDT1VOVElFUy5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoY3JlYXRlZEV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaXMgdGhlcmUgYSBuZXcgb3Agb3IganVzdCBjbG9zZWQgbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZyA9IHsgc2hvd0xvYWRpbmc6IGZhbHNlIH07IC8vTG9hZGluZy4uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXRlZEV2ZW50ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcmVhdGVkRXZlbnRbMV0gPT0gJ2NyZWF0ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV2ZW50TGlzdC5wdXNoKGNyZWF0ZWRFdmVudFswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXRlZEV2ZW50WzFdID09PSAndXBkYXRlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZSB0aGUgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ldmVudExpc3RbaW5kZXhDbGlja2VkXSA9IGNyZWF0ZWRFdmVudFswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcmVhdGVkRXZlbnRbMV0gPT0gJ2RlbGV0ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gdmFyIGluZGV4Q2xpY2tlZDEgPSAkc2NvcGUubWVtYmVyTGlzdC5pbmRleE9mKGNyZWF0ZWRNZW1iZXJbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ldmVudExpc3Quc3BsaWNlKGluZGV4Q2xpY2tlZCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgfV0pO1xyXG59KCkpOyIsIlxyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgLyogY29udHJvbGxlcnMuanMsICdsZWFmbGV0LWRpcmVjdGl2ZScndWkudW5pcXVlJywnbmdUYWdzSW5wdXQnLCovXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFNUTkNvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NUTkNvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgU1ROQ29udHJvbGxlcnMuY29udHJvbGxlcignYXBwcm92YWxDdHJsJywgWyckc2NvcGUnLCAnJGNvb2tpZXMnLCAnJHJvb3RTY29wZScsICckbG9jYXRpb24nLCAnJGh0dHAnLCAnc3RhdGVMaXN0JywgJ2luc3RydW1lbnRMaXN0JywgJ2FsbFNlbnNvclR5cGVzJywgJ2FsbERlcFR5cGVzJywgJ0hXTScsICdEQVRBX0ZJTEUnLCAnSU5TVFJVTUVOVCcsICdNRU1CRVInLCAnU0lURScsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGNvb2tpZXMsICRyb290U2NvcGUsICRsb2NhdGlvbiwgJGh0dHAsIHN0YXRlTGlzdCwgaW5zdHJ1bWVudExpc3QsIGFsbFNlbnNvclR5cGVzLCBhbGxEZXBUeXBlcywgSFdNLCBEQVRBX0ZJTEUsIElOU1RSVU1FTlQsIE1FTUJFUiwgU0lURSkge1xyXG4gICAgICAgICAgICBpZiAoJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSB1bmRlZmluZWQgfHwgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYXV0aCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy9UT0RPOiBXaG8gY2FuIGRvIGFwcHJvdmFscz8/Pz8/Pz8/XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnRoaXNQYWdlID0gXCJBcHByb3ZhbFwiO1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5hY3RpdmVNZW51ID0gXCJhcHByb3ZhbFwiO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyB3YXRjaCBmb3IgdGhlIHNlc3Npb24gZXZlbnQgdG8gY2hhbmdlIGFuZCB1cGRhdGUgIFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudE5hbWUnKTsgfSwgZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlc3Npb25FdmVudCA9ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50TmFtZScpICE9PSBudWxsICYmICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50TmFtZScpICE9PSB1bmRlZmluZWQgPyAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudE5hbWUnKSA6IFwiQWxsIEV2ZW50c1wiO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgTUVNQkVSLmdldEFsbChmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7ICRzY29wZS5hbGxNZW1iZXJzID0gcmVzcG9uc2U7fSkuJHByb21pc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFsbFN0YXRlcyA9IHN0YXRlTGlzdDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hbGxJbnN0cnVtZW50cyA9IGluc3RydW1lbnRMaXN0O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNlbnNvclR5cGVzID0gYWxsU2Vuc29yVHlwZXM7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWxsRGVwbG95bWVudFR5cGVzID0gYWxsRGVwVHlwZXM7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQ2hvc2VuRXZlbnQgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5DaG9zZW5TdGF0ZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkNob3Nlbk1lbWJlciA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnVuQXBwcm92ZWRIV01zID0gW107ICRzY29wZS5zaG93SFdNYm94ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudW5BcHByb3ZlZERGcyA9IFtdOyAkc2NvcGUuc2hvd0RGYm94ID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9pZiB0aGV5IGFyZSBjb21pbmcgYmFjayBoZXJlLCBzZWUgaWYgYSBzZWFyY2ggaGFzIGJlZW4gc3RvcmVkIGxhc3QgdGltZS5cclxuICAgICAgICAgICAgICAgIGlmICgkcm9vdFNjb3BlLmFwcHJvdmFsU2VhcmNoICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc1NlYXJjaCA9ICRyb290U2NvcGUuYXBwcm92YWxTZWFyY2g7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlc3Npb25FdmVudCA9IE51bWJlcih0aGlzU2VhcmNoLmV2ZW50SUQpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5DaG9zZW5TdGF0ZS5pZCA9IHRoaXNTZWFyY2guc3RhdGVJRDtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQ2hvc2VuTWVtYmVyLmlkID0gdGhpc1NlYXJjaC5tZW1iZXJJRDsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIC8vZ28gZ2V0IHRoZSBIV01zIGFuZCBEYXRhRmlsZXMgdGhhdCBuZWVkIHRvIGJlIGFwcHJvdmVkXHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBIV00uZ2V0VW5hcHByb3ZlZEhXTXMoeyBJc0FwcHJvdmVkOiAnZmFsc2UnLCBFdmVudDogdGhpc1NlYXJjaC5ldmVudElELCBNZW1iZXI6IHRoaXNTZWFyY2gubWVtYmVySUQsIFN0YXRlOiB0aGlzU2VhcmNoLnN0YXRlSUQgfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudW5BcHByb3ZlZEhXTXMgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dIV01ib3ggPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUuZ2V0VW5hcHByb3ZlZERGcyh7IElzQXBwcm92ZWQ6ICdmYWxzZScsIEV2ZW50OiB0aGlzU2VhcmNoLmV2ZW50SUQsIFByb2Nlc3NvcjogdGhpc1NlYXJjaC5tZW1iZXJJRCwgU3RhdGU6IHRoaXNTZWFyY2guc3RhdGVJRCB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgREZzID0gcmVzcG9uc2UxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25lZWQgc2Vuc29yIGFuZCBzaXRlIGluZm9cclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKERGcywgZnVuY3Rpb24gKGRmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc2RmSW5zdCA9ICRzY29wZS5hbGxJbnN0cnVtZW50cy5maWx0ZXIoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGkuaW5zdHJ1bWVudF9pZCA9PSBkZi5pbnN0cnVtZW50X2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmb3JtYXR0ZWRERiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNpdGVJRCA9IHRoaXNkZkluc3Quc2l0ZV9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZERGLlNpdGVJZCA9IHNpdGVJRDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZERGLnNlblR5cGUgPSAkc2NvcGUuYWxsU2Vuc29yVHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnNlbnNvcl90eXBlX2lkID09IHRoaXNkZkluc3Quc2Vuc29yX3R5cGVfaWQ7IH0pWzBdLnNlbnNvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZXBUeXBlID0gJHNjb3BlLmFsbERlcGxveW1lbnRUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuZGVwbG95bWVudF90eXBlX2lkID09IHRoaXNkZkluc3QuZGVwbG95bWVudF90eXBlX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZERGLmRlcFR5cGUgPSBkZXBUeXBlICE9PSB1bmRlZmluZWQgPyBkZXBUeXBlLm1ldGhvZCA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZERGLkluc3RySUQgPSB0aGlzZGZJbnN0Lmluc3RydW1lbnRfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTSVRFLnF1ZXJ5KHsgaWQ6IHNpdGVJRCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZTIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWRERi5TaXRlTm8gPSByZXNwb25zZTIuc2l0ZV9ubztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudW5BcHByb3ZlZERGcy5wdXNoKGZvcm1hdHRlZERGKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dERmJveCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlMS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zZWFyY2ggPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jbGVhciBjb250ZW50cyBpbiBjYXNlIHRoZXkgYXJlIHNlYXJjaGluZyBtdWx0aXBsZSB0aW1lc1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS51bkFwcHJvdmVkSFdNcyA9IFtdOyAkc2NvcGUuc2hvd0hXTWJveCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS51bkFwcHJvdmVkREZzID0gW107ICRzY29wZS5zaG93REZib3ggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXZJRCA9ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSAhPT0gbnVsbCAmJiAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudElEJykgIT09IHVuZGVmaW5lZCA/ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNJRCA9ICRzY29wZS5DaG9zZW5TdGF0ZS5pZCAhPT0gdW5kZWZpbmVkID8gJHNjb3BlLkNob3NlblN0YXRlLmlkIDogMDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbUlEID0gJHNjb3BlLkNob3Nlbk1lbWJlci5pZCAhPT0gdW5kZWZpbmVkID8gJHNjb3BlLkNob3Nlbk1lbWJlci5pZCA6IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5hcHByb3ZhbFNlYXJjaCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRJRDogZXZJRCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVJRDogc0lELFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtZW1iZXJJRDogbUlEXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAvL2dvIGdldCB0aGUgSFdNcyBhbmQgRGF0YUZpbGVzIHRoYXQgbmVlZCB0byBiZSBhcHByb3ZlZFxyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgSFdNLmdldFVuYXBwcm92ZWRIV01zKHsgSXNBcHByb3ZlZDogJ2ZhbHNlJywgRXZlbnQ6IGV2SUQsIE1lbWJlcjogbUlELCBTdGF0ZTogc0lEIH0sIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9uZWVkIHNpdGUgbm9cclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKHJlc3BvbnNlLCBmdW5jdGlvbiAoaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU0lURS5xdWVyeSh7IGlkOiBoLnNpdGVfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoc3Jlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaC5zaXRlX25vID0gc3Jlc3BvbnNlLnNpdGVfbm87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVuQXBwcm92ZWRIV01zLnB1c2goaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93SFdNYm94ID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgREFUQV9GSUxFLmdldFVuYXBwcm92ZWRERnMoeyBJc0FwcHJvdmVkOiAnZmFsc2UnLCBFdmVudDogZXZJRCwgUHJvY2Vzc29yOiBtSUQsIFN0YXRlOiBzSUQgfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIERGcyA9IHJlc3BvbnNlMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9uZWVkIHNlbnNvciBhbmQgc2l0ZSBpbmZvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChERnMsIGZ1bmN0aW9uIChkZikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNkZkluc3QgPSAkc2NvcGUuYWxsSW5zdHJ1bWVudHMuZmlsdGVyKGZ1bmN0aW9uIChpKSB7IHJldHVybiBpLmluc3RydW1lbnRfaWQgPT0gZGYuaW5zdHJ1bWVudF9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZm9ybWF0dGVkREYgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaXRlSUQgPSB0aGlzZGZJbnN0LnNpdGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWRERi5TaXRlSWQgPSBzaXRlSUQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWRERi5zZW5UeXBlID0gJHNjb3BlLmFsbFNlbnNvclR5cGVzLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcy5zZW5zb3JfdHlwZV9pZCA9PSB0aGlzZGZJbnN0LnNlbnNvcl90eXBlX2lkOyB9KVswXS5zZW5zb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVwVHlwZSA9ICRzY29wZS5hbGxEZXBsb3ltZW50VHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmRlcGxveW1lbnRfdHlwZV9pZCA9PSB0aGlzZGZJbnN0LmRlcGxveW1lbnRfdHlwZV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWRERi5kZXBUeXBlID0gZGVwVHlwZSAhPT0gdW5kZWZpbmVkID8gZGVwVHlwZS5tZXRob2QgOiB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWRERi5JbnN0cklEID0gdGhpc2RmSW5zdC5pbnN0cnVtZW50X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU0lURS5xdWVyeSh7IGlkOiBzaXRlSUQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkREYuU2l0ZU5vID0gcmVzcG9uc2UyLnNpdGVfbm87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVuQXBwcm92ZWRERnMucHVzaChmb3JtYXR0ZWRERik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93REZib3ggPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZTEuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfV0pO1xyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgLy9sb29rIHVwIGNvbW1vbiBzZXJ2aWNlIG1vZHVsZSwgYW5kIHJlZ2lzdGVyIHRoZSBuZXcgZmFjdG9yeSB3aXRoIHRoYXQgbW9kdWxlIFxyXG4gICAgdmFyIFNUTlJlc291cmNlID0gYW5ndWxhci5tb2R1bGUoJ1NUTlJlc291cmNlJywgWyduZ1Jlc291cmNlJ10pO1xyXG4gICAgICB2YXIgcm9vdFVSTCA9IFwiaHR0cHM6Ly9zdG4ud2ltLnVzZ3MuZ292L1NUTlNlcnZpY2VzXCI7XHJcbiAgICAvLyAgdmFyIHJvb3RVUkwgPSBcImh0dHBzOi8vc3RudGVzdC53aW0udXNncy5nb3YvU1ROU2VydmljZXMyXCI7XHJcbiAgIC8vdmFyIHJvb3RVUkwgPSBcImh0dHA6Ly9sb2NhbGhvc3QvU1ROU2VydmljZXMyXCI7XHJcbiAgIFxyXG4gICAgLy8jcmVnaW9uIEdFT0NPREUgaHR0cHM6Ly9nZW9jb2RpbmcuZ2VvLmNlbnN1cy5nb3YvZ2VvY29kZXIvZ2VvZ3JhcGhpZXMvY29vcmRpbmF0ZXM/YmVuY2htYXJrPTQmdmludGFnZT00JmZvcm1hdD1qc29uXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdHRU9DT0RFJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7ICAgICAgICAgIFxyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvR2VvY29kZS9sb2NhdGlvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBnZXRBZGRyZXNzUGFydHM6IHsgbWV0aG9kOiAnR0VUJywgcGFyYW1zOiB7IExhdGl0dWRlOiAnQExhdGl0dWRlJywgTG9uZ2l0dWRlOiAnQExvbmdpdHVkZScgfSB9IC8veT0yOC4zNTk3NSZ4PS04MS40MjE5ODhcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgR0VPQ09ERVxyXG4gICAgLy8jcmVnaW9uIEFHRU5DWVxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnQUdFTkNZJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9BZ2VuY2llcy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgQUdFTkNZICAgIFxyXG4gICAgLy8jcmVnaW9uIENPTlRBQ1RfVFlQRVxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnQ09OVEFDVF9UWVBFJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9Db250YWN0VHlwZXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIENPTlRBQ1RfVFlQRVxyXG4gICAgLy8jcmVnaW9uIENPTlRBQ1RcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0NPTlRBQ1QnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL0NvbnRhY3RzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldENvbnRhY3RNb2RlbDoge21ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBDT05UQUNUXHJcbiAgICAvLyNyZWdpb24gQ09VTlRJRVNcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0NPVU5USUVTJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9Db3VudGllcy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgQ09VTlRJRVNcclxuICAgIC8vI3JlZ2lvbiBEQVRBX0ZJTEVcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0RBVEFfRklMRScsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvRGF0YUZpbGVzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRERkFwcHJvdmFsOiB7IG1ldGhvZDogJ0dFVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UsIHVybDogcm9vdFVSTCArICcvRGF0YUZpbGVzLzppZC9BcHByb3ZhbC5qc29uJyB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0VW5hcHByb3ZlZERGczogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlLCBjYWNoZTogZmFsc2UgfSwgLy8/SXNBcHByb3ZlZD17YXBwcm92ZWR9JkV2ZW50PXtldmVudElkfSZQcm9jZXNzb3I9e21lbWJlcklkfSZTdGF0ZT17c3RhdGV9XHJcbiAgICAgICAgICAgICAgICBhcHByb3ZlREY6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UsIHBhcmFtczogeyBpZDogJ0BpZCcgfSwgdXJsOiByb290VVJMICsgJy9kYXRhZmlsZXMvOmlkL0FwcHJvdmUuanNvbicgfSwgLy9wb3N0cyBhbiBBUFBST1ZBTCwgdXBkYXRlcyB0aGUgZGF0YSBmaWxlIHdpdGggYXBwcm92YWxfaWQgYW5kIHJldHVybnMgQVBQUk9WQUxcclxuICAgICAgICAgICAgICAgIGFwcHJvdmVOV0lTREY6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UsIHBhcmFtczogeyBpZDogJ0BpZCcgfSwgdXJsOiByb290VVJMICsgJy9kYXRhZmlsZXMvOmlkL05XSVNBcHByb3ZlLmpzb24nIH0sIC8vcG9zdHMgYW4gQVBQUk9WQUwgKHVzaW5nIEV2ZW50Q29vcmQpLCB1cGRhdGVzIHRoZSBkYXRhIGZpbGUgd2l0aCBhcHByb3ZhbF9pZCBhbmQgcmV0dXJucyBBUFBST1ZBTFxyXG4gICAgICAgICAgICAgICAgdW5BcHByb3ZlREY6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSwgdXJsOiByb290VVJMICsgJy9kYXRhZmlsZXMvOmlkL1VuYXBwcm92ZS5qc29uJyB9LCAvL3Bvc3RzIGFuIEFQUFJPVkFMLCB1cGRhdGVzIHRoZSBkYXRhZmlsZSB3aXRoIGFwcHJvdmFsX2lkIGFuZCByZXR1cm5zIEFQUFJPVkFMXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBEQVRBX0ZJTEVcclxuICAgIC8vI3JlZ2lvbiBERVBMT1lNRU5UX1BSSU9SSVRZXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdERVBMT1lNRU5UX1BSSU9SSVRZJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9EZXBsb3ltZW50UHJpb3JpdGllcy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgREVQTE9ZTUVOVF9QUklPUklUWVxyXG4gICAgLy8jcmVnaW9uIERFUExPWU1FTlRfVFlQRVxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnREVQTE9ZTUVOVF9UWVBFJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9EZXBsb3ltZW50VHlwZXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0RGVwU2Vuc1R5cGU6IHttZXRob2Q6ICdHRVQnLCBpc0FycmF5OiBmYWxzZSwgdXJsOiByb290VVJMICsgJy9EZXBsb3ltZW50VHlwZXMvOmlkL1NlbnNvclR5cGUuanNvbid9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIERFUExPWU1FTlRfVFlQRSAgICBcclxuICAgIC8vI3JlZ2lvbiBFVkVOVFxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnRVZFTlQnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL0V2ZW50cy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0RXZlbnRTaXRlczoge21ldGhvZDogJ0dFVCcsIGlzQXJyYXk6dHJ1ZSwgdXJsOiByb290VVJMICsgJy9FdmVudHMvOmlkL1NpdGVzLmpzb24nfSxcclxuICAgICAgICAgICAgICAgIGdldEZpbHRlcmVkRXZlbnRzOiB7bWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgdXJsOiByb290VVJMICsgJy9FdmVudHMvRmlsdGVyZWRFdmVudHMuanNvbid9LCAvLz9EYXRlOiBudWxsLCBUeXBlOiAwLCBTdGF0ZTogbnVsbFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgRVZFTlRcclxuICAgIC8vI3JlZ2lvbiBFVkVOVF9TVEFUVVNcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0VWRU5UX1NUQVRVUycsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvRXZlbnRTdGF0dXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIEVWRU5UX1NUQVRVU1xyXG4gICAgLy8jcmVnaW9uIEVWRU5UX1RZUEVcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0VWRU5UX1RZUEUnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL0V2ZW50VHlwZXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIEVWRU5UX1RZUEUgICBcclxuICAgIC8vI3JlZ2lvbiBGSUxFICAgIFxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnRklMRScsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvRmlsZXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIGdldEZpbGVJdGVtOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IGZhbHNlLCB1cmw6IHJvb3RVUkwgKyAnL0ZpbGVzLzppZC9JdGVtJyB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHVwbG9hZEZpbGU6IHsgbWV0aG9kOiAnUE9TVCcsIHVybDogcm9vdFVSTCArICcvRmlsZXMvYnl0ZXMnLCBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiB1bmRlZmluZWQgfSwgdHJhbnNmb3JtUmVxdWVzdDogYW5ndWxhci5pZGVudGl0eSwgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZG93bmxvYWRaaXA6IHtcclxuICAgICAgICAgICAgICAgICAgICBtZXRob2Q6ICdHRVQnLCByZXNwb25zZVR5cGU6ICdhcnJheWJ1ZmZlcicsIGNhY2hlOiBmYWxzZSwgdXJsOiByb290VVJMICsgJy9FdmVudHMvOmV2ZW50SWQvRXZlbnRGaWxlSXRlbXMnXHJcbiAgICAgICAgICAgICAgICB9LC8vP0hXTUZpbGVzPXtod21GaWxlc30mSFdNRmlsZVR5cGU9e2h3bUZpbGVUeXBlc30mU2Vuc29yRmlsZXM9e3NlbnNvckZpbGVzfSZTZW5zb3JGaWxlVHlwZXM9e3NlbnNvckZpbGVUeXBlc31cIlxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBGSUxFIFxyXG4gICAgLy8jcmVnaW9uIHBob3RvRmlsZVN0YW1wXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdGSUxFX1NUQU1QJywgWyckcm9vdFNjb3BlJywgZnVuY3Rpb24gKCRyb290U2NvcGUpIHtcclxuICAgICAgICAvL25lZWQgdG8gdXBkYXRlIHRoZSBuZy1zcmMgb24gcGhvdG8gZmlsZXMgaWYgb25lIGNoYW5nZXMsIHVwZGF0ZSB0aGUgc3RhbXAgcGFydCBvZiB0aGUgaW1hZ2UgdG8gcmVmcmVzaCB0aGUgbGluayAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0U3RhbXA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdGFtcCA9ICc/JyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YW1wO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXRTdGFtcDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YW1wID0gJz8nICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2ZpbGVTdGFtcFNldCcsIHN0YW1wKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgSFdNX1NlcnZpY2VcclxuICAgIC8vI3JlZ2lvbiBGSUxFX1RZUEVcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0ZJTEVfVFlQRScsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvRmlsZVR5cGVzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBGSUxFX1RZUEUgICBcclxuICAgIC8vI3JlZ2lvbiBIT1JJWk9OVEFMX0NPTExfTUVUSE9EU1xyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnSE9SSVpPTlRBTF9DT0xMX01FVEhPRFMnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL0hvcml6b250YWxNZXRob2RzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBIT1JJWk9OVEFMX0NPTExfTUVUSE9EU1xyXG4gICAgLy8jcmVnaW9uIEhPUklaT05UQUxfREFUVU1cclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0hPUklaT05UQUxfREFUVU0nLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL0hvcml6b250YWxEYXR1bXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIEhPUklaT05UQUxfREFUVU1cclxuICAgIC8vI3JlZ2lvbiBIT1VTSU5HX1RZUEVcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0hPVVNJTkdfVFlQRScsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvSG91c2luZ1R5cGVzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBIT1VTSU5HX1RZUEVcclxuICAgIC8vI3JlZ2lvbiBIV01cclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0hXTScsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvaHdtcy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0RXZlbnRTdGF0ZUhXTXM6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgdXJsOiByb290VVJMICsgJy9FdmVudHMvOmV2ZW50SWQvc3RhdGVIV01zLmpzb24/U3RhdGU9OnN0YXRlJyB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0RXZlbnRTaXRlSFdNczogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlLCB1cmw6IHJvb3RVUkwgKyAnL1NpdGVzLzpzaXRlSWQvRXZlbnRIV01zLmpzb24nIH0sLy8/RXZlbnQ9OmV2ZW50SWRcclxuICAgICAgICAgICAgICAgIGdldEZpbHRlcmVkSFdNczogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlLCB1cmw6IHJvb3RVUkwgKyAnL0hXTXMvRmlsdGVyZWRIV01zLmpzb24nIH0sIC8vRXZlbnQ9e2V2ZW50SWRzfSZFdmVudFR5cGU9e2V2ZW50VHlwZUlEc30mRXZlbnRTdGF0dXM9e2V2ZW50U3RhdHVzSUR9JlN0YXRlcz17c3RhdGVzfSZDb3VudHk9e2NvdW50aWVzfSZIV01UeXBlPXtod21UeXBlSURzfSZIV01RdWFsaXR5PXtod21RdWFsSURzfSZIV01FbnZpcm9ubWVudD17aHdtRW52aXJvbm1lbnR9JlN1cnZleUNvbXBsZXRlPXtzdXJ2ZXlDb21wbGV0ZX0mU3RpbGxXYXRlcj17c3RpbGxXYXRlcn1cclxuICAgICAgICAgICAgICAgIGdldFVuYXBwcm92ZWRIV01zOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUsIGNhY2hlOiBmYWxzZSB9LCAvL0lzQXBwcm92ZWQ9eyd0cnVlJy8nZmFsc2UnfSZFdmVudD17ZXZlbnRJZH0mTWVtYmVyPXttZW1iZXJJZH0mU3RhdGU9e3N0YXRlfVxyXG4gICAgICAgICAgICAgICAgZ2V0SFdNQXBwcm92YWw6IHttZXRob2Q6ICdHRVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlLCB1cmw6IHJvb3RVUkwgKyAnL2h3bXMvOmlkL0FwcHJvdmFsLmpzb24nfSxcclxuICAgICAgICAgICAgICAgIGFwcHJvdmVIV006IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UsIHBhcmFtczogeyBpZDogJ0BpZCcgfSwgdXJsOiByb290VVJMICsgJy9od21zLzppZC9BcHByb3ZlLmpzb24nIH0sIC8vcG9zdHMgYW4gQVBQUk9WQUwsIHVwZGF0ZXMgdGhlIEhXTSB3aXRoIGFwcHJvdmFsX2lkIGFuZCByZXR1cm5zIEFQUFJPVkFMXHJcbiAgICAgICAgICAgICAgICB1bkFwcHJvdmVIV006IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSwgdXJsOiByb290VVJMICsgJy9od21zLzppZC9VbmFwcHJvdmUuanNvbicgfSwgLy9wb3N0cyBhbiBBUFBST1ZBTCwgdXBkYXRlcyB0aGUgSFdNIHdpdGggYXBwcm92YWxfaWQgYW5kIHJldHVybnMgQVBQUk9WQUxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIEhXTVxyXG4gICAgLy8jcmVnaW9uIEhXTV9TZXJ2aWNlXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdIV01fU2VydmljZScsIFtmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy93aGVuIGh3bSBpcyBjcmVhdGVkIG9yIGRlbGV0ZWQsIHRoaXMgZ2V0cyB1cGRhdGVkIHNvIHRoYXQgZmlsZXNDdHJsIHdpbGwgdXBkYXRlIGl0J3MgbGlzdCBvZiBzaXRlSFdNc1xyXG4gICAgICAgIHZhciBhbGxTaXRlSFdNcyA9IFtdOyB2YXIgYnVsa1NlYXJjaCA9IHt9O1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGdldEFsbFNpdGVIV01zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxsU2l0ZUhXTXM7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldEFsbFNpdGVIV01zOiBmdW5jdGlvbiAoc2gpIHtcclxuICAgICAgICAgICAgICAgIGFsbFNpdGVIV01zID0gc2g7ICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldEJ1bGtIV01TZWFyY2g6IGZ1bmN0aW9uIChzZWFyY2hUZXJtcylcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYnVsa1NlYXJjaCA9IHNlYXJjaFRlcm1zO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXRCdWxrSFdNU2VhcmNoOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYnVsa1NlYXJjaDtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIEhXTV9TZXJ2aWNlXHJcbiAgICAvLyNyZWdpb24gSFdNX1FVQUxJVFlcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0hXTV9RVUFMSVRZJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9IV01RdWFsaXRpZXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIEhXTV9RVUFMSVRZXHJcbiAgICAvLyNyZWdpb24gSFdNX1RZUEVcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0hXTV9UWVBFJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9IV01UeXBlcy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgSFdNX1RZUEVcclxuICAgIC8vI3JlZ2lvbiBJTlNUUlVNRU5UXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdJTlNUUlVNRU5UJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9JbnN0cnVtZW50cy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0U2Vuc29yVmlldzoge21ldGhvZDogJ0dFVCcsIGlzQXJyYXk6dHJ1ZSwgdXJsOiByb290VVJMICsgJy9TZW5zb3JWaWV3cy5qc29uJ30sIC8vP1ZpZXdUeXBlPXt9JkV2ZW50PXt9XHJcbiAgICAgICAgICAgICAgICBnZXRzdGF0dXNJbnN0cnVtZW50czogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlLCB1cmw6IHJvb3RVUkwgKyAnL0luc3RydW1lbnRzLmpzb24nIH0sIC8vQ3VycmVudFN0YXR1czogMSwgRXZlbnQ6ICRzY29wZS5ldklEIFxyXG4gICAgICAgICAgICAgICAgZ2V0RnVsbEluc3RydW1lbnQ6IHsgbWV0aG9kOiAnR0VUJywgdXJsOiByb290VVJMICsgJy9JbnN0cnVtZW50cy86aWQvRnVsbEluc3RydW1lbnQuanNvbicgfSwgLy9nZXRzIGluc3RydW1lbnQgYW5kIGl0J3Mgc3RhdHMgdG9nZXRoZXJcclxuICAgICAgICAgICAgICAgIGdldEluc3RydW1lbnRTdGF0dXM6IHsgbWV0aG9kOiAnR0VUJywgdXJsOiByb290VVJMICsgJy9JbnN0cnVtZW50cy86aWQvSW5zdHJ1bWVudFN0YXR1cy5qc29uJyB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgSU5TVFJVTUVOVFxyXG4gICAgLy8jcmVnaW9uIEluc3RydW1lbnRfU2VydmljZVxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnSW5zdHJ1bWVudF9TZXJ2aWNlJywgW2Z1bmN0aW9uICgpIHtcclxuICAgICAgICAvL3doZW4gaHdtIGlzIGNyZWF0ZWQgb3IgZGVsZXRlZCwgdGhpcyBnZXRzIHVwZGF0ZWQgc28gdGhhdCBmaWxlc0N0cmwgd2lsbCB1cGRhdGUgaXQncyBsaXN0IG9mIHNpdGVIV01zXHJcbiAgICAgICAgdmFyIGFsbFNpdGVTZW5zb3JzID0gW107XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0QWxsU2l0ZVNlbnNvcnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhbGxTaXRlU2Vuc29ycztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0QWxsU2l0ZVNlbnNvcnM6IGZ1bmN0aW9uIChzcykge1xyXG4gICAgICAgICAgICAgICAgYWxsU2l0ZVNlbnNvcnMgPSBzcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgSW5zdHJ1bWVudF9TZXJ2aWNlXHJcbiAgICAvLyNyZWdpb24gSU5TVFJVTUVOVF9TVEFUVVNcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0lOU1RSVU1FTlRfU1RBVFVTJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9JbnN0cnVtZW50U3RhdHVzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBJTlNUUlVNRU5UXHJcbiAgICAvLyNyZWdpb24gSU5TVF9DT0xMX0NPTkRJVElPTlxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnSU5TVF9DT0xMX0NPTkRJVElPTicsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvSW5zdHJDb2xsZWN0Q29uZGl0aW9ucy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgSU5TVF9DT0xMX0NPTkRJVElPTlxyXG4gICAgLy8jcmVnaW9uIExBTkRPV05FUl9DT05UQUNUXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdMQU5ET1dORVJfQ09OVEFDVCcsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvTGFuZE93bmVycy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgTEFORE9XTkVSX0NPTlRBQ1RcclxuICAgIC8vI3JlZ2lvbiBNYXBfU2l0ZVxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnTWFwX1NpdGUnLCBbJ1NJVEUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsIGZ1bmN0aW9uIChTSVRFLCAkcm9vdFNjb3BlLCRjb29raWVzKSB7XHJcbiAgICAgICAgdmFyIE1hcFNpdGVQYXJ0cyA9IFtdO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICBnZXRNYXBTaXRlUGFydHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBNYXBTaXRlUGFydHM7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldE1hcFNpdGVQYXJ0czogZnVuY3Rpb24gKHNpdGVJZCkge1xyXG4gICAgICAgICAgICAgICAgTWFwU2l0ZVBhcnRzID0gW107XHJcbiAgICAgICAgICAgICAgICBTSVRFLnF1ZXJ5KHsgaWQ6IHNpdGVJZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIE1hcFNpdGVQYXJ0cy5wdXNoKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICBTSVRFLmdldFNpdGVQZWFrcyh7IGlkOiBzaXRlSWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE1hcFNpdGVQYXJ0cy5wdXNoKHBSZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnbWFwU2l0ZUNsaWNrUmVzdWx0cycsIE1hcFNpdGVQYXJ0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBNYXBfU2l0ZVxyXG4gICAgLy8jcmVnaW9uIE1hcF9maWx0ZXJcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ01hcF9GaWx0ZXInLCBbICckcm9vdFNjb3BlJywgZnVuY3Rpb24gKCRyb290U2NvcGUpIHtcclxuICAgICAgICB2YXIgZmlsdGVyZWRTaXRlcyA9IFtdO1xyXG5cclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAvLyBnZXRGaWx0ZXJlZFNpdGVzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vICAgICByZXR1cm4gZmlsdGVyZWRTaXRlcztcclxuICAgICAgICAgICAgLy8gfSxcclxuICAgICAgICAgICAgc2V0RmlsdGVyZWRTaXRlczogZnVuY3Rpb24gKHNpdGVzQXJyYXkpIHtcclxuICAgICAgICAgICAgICAgIGZpbHRlcmVkU2l0ZXMgPSBzaXRlc0FycmF5O1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdmaWx0ZXJTaXRlc0NsaWNrJywgZmlsdGVyZWRTaXRlcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIE1hcF9GaWx0ZXJcclxuICAgIC8vI3JlZ2lvbiBNQVJLRVJcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ01BUktFUicsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvTWFya2Vycy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgTUFSS0VSXHJcbiAgICAvLyNyZWdpb24gTUVNQkVSXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdNRU1CRVInLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL01lbWJlcnMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHsgfSwgICBcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRSb2xlTWVtYmVyczogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlLCB1cmw6IHJvb3RVUkwgKyAnL1JvbGVzLzpyb2xlSWQvTWVtYmVycy5qc29uJyB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0RXZlbnRQZW9wbGU6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgdXJsOiByb290VVJMICsgJy9FdmVudHMvOkV2ZW50aWQvTWVtYmVycy5qc29uJyB9LFxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBjaGFuZ2VQVzogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiBmYWxzZSwgdXJsOiByb290VVJMICsgJy9NZW1iZXJzLmpzb24nIH0sXHJcbiAgICAgICAgICAgICAgICBhZGRNZW1iZXI6IHttZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSwgdXJsOiByb290VVJMICsgJy9NZW1iZXJzLzpwYXNzL2FkZE1lbWJlcid9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZU1lbWJlcjogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlLHVybDogcm9vdFVSTCArICcvTWVtYmVycy86aWQnIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgTUVNQkVSXHJcbiAgICAvLyNyZWdpb24gTkVUV09SS19OQU1FXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdORVRXT1JLX05BTUUnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL05ldHdvcmtOYW1lcy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgTkVUV09SS19OQU1FXHJcbiAgICAvLyNyZWdpb24gTkVUV09SS19UWVBFXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdORVRXT1JLX1RZUEUnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL05ldHdvcmtUeXBlcy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgTkVUV09SS19UWVBFICAgXHJcbiAgICAvLyNyZWdpb24gT0JKRUNUSVZFX1BPSU5UXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdPQkpFQ1RJVkVfUE9JTlQnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL09iamVjdGl2ZVBvaW50cy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGdldE9QRmlsZXM6IHttZXRob2Q6ICdHRVQnLCBpc0FycmF5OnRydWUsIHVybDogcm9vdFVSTCArIFwiL09iamVjdGl2ZVBvaW50cy86aWQvRmlsZXNcIn0sXHJcbiAgICAgICAgICAgICAgICBnZXRPUENvbnRyb2xzOiB7IG1ldGhvZDogJ0dFVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogdHJ1ZSwgdXJsOiByb290VVJMICsgXCIvT2JqZWN0aXZlUG9pbnRzLzppZC9PUENvbnRyb2xzLmpzb25cIiB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBPQkpFQ1RJVkVfUE9JTlRcclxuICAgIC8vI3JlZ2lvbiBPUF9DT05UUk9MX0lERU5USUZJRVJcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ09QX0NPTlRST0xfSURFTlRJRklFUicsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvT1BDb250cm9sSWRlbnRpZmllcnMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIE9QX0NPTlRST0xfSURFTlRJRklFUlxyXG4gICAgLy8jcmVnaW9uIE9QX01FQVNVUkVcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ09QX01FQVNVUkUnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL09QTWVhc3VyZW1lbnRzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRJbnN0U3RhdE9QTWVhc3VyZXM6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgdXJsOiByb290VVJMICsgJy9JbnN0cnVtZW50U3RhdHVzLzppbnN0cnVtZW50U3RhdHVzSWQvT1BNZWFzdXJlbWVudHMnIH0sXHJcbiAgICAgICAgICAgICAgICBnZXREYXR1bUxvY2F0aW9uT1BNZWFzdXJlczogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlLCB1cmw6IHJvb3RVUkwgKyAnL09iamVjdGl2ZVBvaW50cy86b2JqZWN0aXZlUG9pbnRJZC9PUE1lYXN1cmVtZW50cycgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIE9QX01FQVNVUkVcclxuICAgIC8vI3JlZ2lvbiBPUF9RVUFMSVRZXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdPUF9RVUFMSVRZJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9PYmplY3RpdmVQb2ludFF1YWxpdGllcy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgT1BfUVVBTElUWVxyXG4gICAgLy8jcmVnaW9uIE9QX1RZUEVcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ09QX1RZUEUnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL09QVHlwZXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIE9QX1RZUEVcclxuICAgIC8vI3JlZ2lvbiBQRUFLXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdQRUFLJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9QZWFrU3VtbWFyaWVzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRQZWFrU3VtbWFyeURGczogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlLCBjYWNoZTogZmFsc2UsIHVybDogcm9vdFVSTCArICcvUGVha1N1bW1hcmllcy86aWQvRGF0YUZpbGVzLmpzb24nIH0sXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBQRUFLXHJcbiAgICAvLyNyZWdpb24gUkVQT1JUXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdSRVBPUlQnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL1JlcG9ydGluZ01ldHJpY3MvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0UmVwb3J0QnlFdlN0OiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIGdldERhaWx5UmVwb3J0VG90czoge21ldGhvZDogJ0dFVCcsIHVybDogcm9vdFVSTCArICcvUmVwb3J0aW5nTWV0cmljcy9EYWlseVJlcG9ydFRvdGFscyd9LFxyXG4gICAgICAgICAgICAgICAgZ2V0TWVtYmVyUmVwb3J0czogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlLCB1cmw6IHJvb3RVUkwgKyAnL01lbWJlcnMvOm1lbWJlcklkL1JlcG9ydHMuanNvbicgfSxcclxuICAgICAgICAgICAgICAgIGdldEZpbHRlcmVkUmVwb3J0czogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlLCB1cmw6IHJvb3RVUkwgKyAnL1JlcG9ydGluZ01ldHJpY3MvRmlsdGVyZWRSZXBvcnRzLmpzb24nIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRSZXBvcnR3aXRoQ29udGFjdHM6IHttZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlLCB1cmw6IHJvb3RVUkwgKyAnL1JlcG9ydFJlc291cmNlL0ZpbHRlcmVkUmVwb3J0TW9kZWwuanNvbid9LFxyXG4gICAgICAgICAgICAgICAgZ2V0UmVwb3J0c0NTVjoge21ldGhvZDogJ0dFVCcsIHVybDogcm9vdFVSTCArICcvUmVwb3J0aW5nTWV0cmljcy9GaWx0ZXJlZFJlcG9ydHMuY3N2J30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGFkZFJlcG9ydENvbnRhY3Q6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UsIHBhcmFtczogeyBSZXBvcnRJZDogJ0ByZXBvcnRJZCcsIENvbnRhY3RUeXBlSWQ6ICdAY29udGFjdFR5cGVJZCcgfSwgdXJsOiByb290VVJMICsgJy9SZXBvcnRpbmdNZXRyaWNzLzpyZXBvcnRJZC9BZGRDb250YWN0VHlwZS86Y29udGFjdFR5cGVJZCcgfSwgLy9jb250YWN0IGVudGl0eSBpbiBib2R5IFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBSRVBPUlRcclxuICAgIC8vI3JlZ2lvbiBST0xFXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdST0xFJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9Sb2xlcy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBST0xFXHJcbiAgICAvLyNyZWdpb24gU0VOU09SX0JSQU5EXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdTRU5TT1JfQlJBTkQnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL1NlbnNvckJyYW5kcy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgU0VOU09SX0JSQU5EXHJcbiAgICAvLyNyZWdpb24gU0VOU09SX0RFUExPWU1FTlQgLS0tIG5vIGxvbmdlciBuZWVkZWQgc2luY2UgU0VOU09SX1RZUEUgcmV0dXJucyBhcyB0aGlzIHJlbGF0aW9uc2hpcCBub3dcclxuICAgIC8vU1ROUmVzb3VyY2UuZmFjdG9yeSgnU0VOU09SX0RFUExPWU1FTlQnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgIC8vICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvU2Vuc29yRGVwbG95bWVudHMvOmlkLmpzb24nLFxyXG4gICAgLy8gICAgICAgIHt9LCB7XHJcbiAgICAvLyAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgIC8vICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSwgICAgICAgICAgICAgICBcclxuICAgIC8vICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgIC8vICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgLy8gICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAvLyAgICAgICAgfSk7XHJcbiAgICAvL31dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBTRU5TT1JfREVQTE9ZTUVOVFxyXG4gICAgLy8jcmVnaW9uIFNFTlNPUl9UWVBFXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdTRU5TT1JfVFlQRScsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvU2Vuc29yVHlwZXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSwgLy90aGlzIHJldHVybnMgc2Vuc29ydHlwZXMgd2l0aCBsaXN0IG9mIGRlcGxveW1lbnR0eXBlcyBmb3IgZWFjaCBvbmVcclxuICAgICAgICAgICAgICAgIGdldFNlbnNvckRlcGxveW1lbnRUeXBlczogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlLCB1cmw6IHJvb3RVUkwgKyAnL1NlbnNvclR5cGVzLzppZC9EZXBsb3ltZW50VHlwZXMuanNvbicgfSwgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBhZGRTZW5zb3JEZXBsb3ltZW50VHlwZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiB0cnVlLCBwYXJhbXM6IHsgc2Vuc29yVHlwZUlkOiAnQHNlbnNvclR5cGVJZCcsIERlcGxveW1lbnRUeXBlSWQ6ICdAZGVwbG95bWVudFR5cGVJZCcgfSwgdXJsOiByb290VVJMICsgJy9TZW5zb3JUeXBlcy86c2Vuc29yVHlwZUlkL2FkZERlcGxveW1lbnRUeXBlJyB9LC8vP0RlcGxveW1lbnRUeXBlSWQ9e2RlcGxveW1lbnRUeXBlSWR9XCJcclxuICAgICAgICAgICAgICAgIHJlbW92ZVNlbnNvckRlcGxveW1lbnRUeXBlOiB7IG1ldGhvZDogJ1BPU1QnLCBpc0FycmF5OiBmYWxzZSwgcGFyYW1zOiB7IHNlbnNvclR5cGVJZDogJ0BzZW5zb3JUeXBlSWQnLCBEZXBsb3ltZW50VHlwZUlkOiAnQGRlcGxveW1lbnRUeXBlSWQnIH0sIHVybDogcm9vdFVSTCArICcvU2Vuc29yVHlwZXMvOnNlbnNvclR5cGVJZC9yZW1vdmVEZXBsb3ltZW50VHlwZScgfSwvLz9EZXBsb3ltZW50VHlwZUlkPXtkZXBsb3ltZW50VHlwZUlkfVwiXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBTRU5TT1JfVFlQRVxyXG4gICAgLy8jcmVnaW9uIFNJVEVcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ1NJVEUnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL1NpdGVzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldFByb3hpbWl0eVNpdGVzOiB7bWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgcGFyYW1zOiB7IExhdGl0dWRlOiAnQGxhdGl0dWRlJywgTG9uZ2l0dWRlOiAnQGxvbmdpdHVkZScsIEJ1ZmZlcjogJ0BidWZmZXInIH19LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIGdldFNlYXJjaGVkU2l0ZTogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiBmYWxzZSwgdXJsOiByb290VVJMICsgJy9TaXRlcy9TZWFyY2gnIH0sIC8vP2J5U2l0ZU5vPXtzaXRlTm99JmJ5U2l0ZU5hbWU9e3NpdGVOYW1lfSZieVNpdGVJZD17c2l0ZUlkfSAob25seSBnb2luZyB0byBwb3B1bGF0ZSAxIG9mIHRoZXNlIHBhcmFtc1xyXG4gICAgICAgICAgICAgICAgZ2V0RmlsdGVyZWRTaXRlczogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlLCB1cmw6IHJvb3RVUkwgKyAnL1NpdGVzL0ZpbHRlcmVkU2l0ZXMuanNvbicgfSwgLy9hY2NlcHRzIG9wdGlvbmFsIHBhcmFtZXRlcnM6IEV2ZW50PXtldmVudElkfSZTdGF0ZT17c3RhdGVOYW1lc30mU2Vuc29yVHlwZT17c2Vuc29yVHlwZUlkfSZOZXR3b3JrTmFtZT17bmV0d29ya05hbWVJZH0mT1BEZWZpbmVkPXtvcERlZmluZWR9JkhXTU9ubHk9e2h3bU9ubHlTaXRlc30mJkhXTVN1cnZleWVkPXtzdXJ2ZXllZEhXTXN9XHJcbiAgICAgICAgICAgICAgICAvL2xhbmRvd25lclxyXG4gICAgICAgICAgICAgICAgZ2V0U2l0ZUxhbmRPd25lcjogeyBtZXRob2Q6ICdHRVQnLCB1cmw6IHJvb3RVUkwgKyAnL1NpdGVzLzppZC9MYW5kT3duZXIuanNvbicgfSxcclxuICAgICAgICAgICAgICAgIC8vU2l0ZSBOZXR3b3JrVHlwZXNcclxuICAgICAgICAgICAgICAgIGdldFNpdGVOZXR3b3JrVHlwZXM6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgdXJsOiByb290VVJMICsgJy9zaXRlcy86aWQvbmV0d29ya1R5cGVzLmpzb24nIH0sXHJcbiAgICAgICAgICAgICAgICBwb3N0U2l0ZU5ldHdvcmtUeXBlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIHBhcmFtczogeyBzaXRlSWQ6ICdAc2l0ZUlkJywgTmV0d29ya1R5cGVJZDogJ0BuZXR3b3JrVHlwZUlkJyB9LCBpc0FycmF5OiB0cnVlLCB1cmw6IHJvb3RVUkwgKyAnL3NpdGVzLzpzaXRlSWQvQWRkTmV0d29ya1R5cGUnIH0sIC8vP05ldHdvcmtUeXBlSWQ9IHtuZXR3b3JrVHlwZUlkfVxyXG4gICAgICAgICAgICAgICAgZGVsZXRlU2l0ZU5ldHdvcmtUeXBlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UsIHVybDogcm9vdFVSTCArICcvc2l0ZXMvOnNpdGVJZC9yZW1vdmVOZXR3b3JrVHlwZT9OZXR3b3JrVHlwZUlkPTpuZXR3b3JrVHlwZUlkJyB9LFxyXG4gICAgICAgICAgICAgICAgLy9TaXRlIE5ldHdvcmsgTmFtZXNcclxuICAgICAgICAgICAgICAgIGdldFNpdGVOZXR3b3JrTmFtZXM6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgdXJsOiByb290VVJMICsgJy9zaXRlcy86aWQvbmV0d29ya05hbWVzLmpzb24nIH0sXHJcbiAgICAgICAgICAgICAgICBwb3N0U2l0ZU5ldHdvcmtOYW1lOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIHBhcmFtczogeyBzaXRlSWQ6ICdAc2l0ZUlkJywgTmV0d29ya05hbWVJZDogJ0BuZXR3b3JrTmFtZUlkJyB9LCBpc0FycmF5OiB0cnVlLCB1cmw6IHJvb3RVUkwgKyAnL3NpdGVzLzpzaXRlSWQvQWRkTmV0d29ya05hbWUnIH0sIC8vP05ldHdvcmtOYW1lSWQ9IHtuZXR3b3JrTmFtZUlkfVxyXG4gICAgICAgICAgICAgICAgZGVsZXRlU2l0ZU5ldHdvcmtOYW1lOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UsIHVybDogcm9vdFVSTCArICcvc2l0ZXMvOnNpdGVJZC9yZW1vdmVOZXR3b3JrTmFtZT9OZXR3b3JrTmFtZUlkPTpuZXR3b3JrTmFtZUlkJ30sXHJcbiAgICAgICAgICAgICAgICAvL1NpdGUgSG91c2luZ3NcclxuICAgICAgICAgICAgICAgIGdldFNpdGVIb3VzaW5nczogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlLCB1cmw6IHJvb3RVUkwgKyAnL3NpdGVzLzppZC9TaXRlSG91c2luZ3MuanNvbicgfSxcclxuICAgICAgICAgICAgICAvLyAgcG9zdFNpdGVIb3VzaW5nOiB7bWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTp0cnVlLCB1cmw6IHJvb3RVUkwgKyAnL3NpdGUvOmlkL0FkZFNpdGVTaXRlSG91c2luZy5qc29uJ30sXHJcbiAgICAgICAgICAgICAgICAvL1NpdGUgUGFydHNcclxuICAgICAgICAgICAgICAgIGdldFNpdGVPUHM6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgdXJsOiByb290VVJMICsgJy9TaXRlcy86aWQvT2JqZWN0aXZlUG9pbnRzLmpzb24nIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRTaXRlU2Vuc29yczogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlLCB1cmw6IHJvb3RVUkwgKyAnL1NpdGVzLzppZC9TaXRlRnVsbEluc3RydW1lbnRMaXN0Lmpzb24nIH0sIC8vYWxsIGluc3RydW1lbnRzIGFuZCB0aGVpciBzdGF0cyB0b2dldGhlclxyXG4gICAgICAgICAgICAgICAgZ2V0U2l0ZUhXTXM6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgdXJsOiByb290VVJMICsgJy9TaXRlcy86aWQvSFdNcy5qc29uJyB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0U2l0ZUZpbGVzOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUsIHVybDogcm9vdFVSTCArICcvU2l0ZXMvOmlkL0ZpbGVzLmpzb24nIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRTaXRlUGVha3M6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgdXJsOiByb290VVJMICsgJy9TaXRlcy86aWQvUGVha1N1bW1hcnlWaWV3Lmpzb24nIH0sXHJcbiAgICAgICAgICAgICAgICAvL2p1c3QgdGhlIFNpdGVcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIFNJVEVcclxuICAgIC8vI3JlZ2lvbiBTaXRlX0ZpbGVzXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdTaXRlX0ZpbGVzJywgWyckY29va2llcycsICckcm9vdFNjb3BlJywgZnVuY3Rpb24gKCRjb29raWVzLCAkcm9vdFNjb3BlKSB7XHJcbiAgICAgICAgdmFyIGFsbFNpdGVGaWxlcyA9IFtdO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGdldEFsbFNpdGVGaWxlczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGFsbFNpdGVGaWxlcztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0QWxsU2l0ZUZpbGVzOiBmdW5jdGlvbiAoc2Ype1xyXG4gICAgICAgICAgICAgICAgYWxsU2l0ZUZpbGVzID0gc2Y7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ3NpdGVGaWxlc1VwZGF0ZWQnLCBhbGxTaXRlRmlsZXMpOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgU2l0ZV9GaWxlc1xyXG4gICAgLy8jcmVnaW9uIFNUQVRFXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdTVEFURScsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvU3RhdGVzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBTVEFURVxyXG4gICAgLy8jcmVnaW9uIFNJVEVfSE9VU0lOR1xyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnU0lURV9IT1VTSU5HJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9TaXRlSG91c2luZ3MvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIFNJVEVfSE9VU0lOR1xyXG4gICAgLy8jcmVnaW9uIFNUQVRVU19UWVBFXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdTVEFUVVNfVFlQRScsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvU3RhdHVzVHlwZXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIFNUQVRVU19UWVBFIFxyXG4gICAgLy8jcmVnaW9uIFNPVVJDRVxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnU09VUkNFJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9Tb3VyY2VzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBTT1VSQ0VcclxuICAgIC8vI3JlZ2lvbiBWRVJUSUNBTF9DT0xMX01FVEhPRFxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnVkVSVElDQUxfQ09MTF9NRVRIT0QnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL1ZlcnRpY2FsTWV0aG9kcy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgVkVSVElDQUxfQ09MTF9NRVRIT0RcclxuICAgIC8vI3JlZ2lvbiBWRVJUSUNBTF9EQVRVTVxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnVkVSVElDQUxfREFUVU0nLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL1ZlcnRpY2FsRGF0dW1zLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBWRVJUSUNBTF9EQVRVTVxyXG4gICAgLy8jcmVnaW9uIExvZ2luXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdMb2dpbicsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvbG9naW4nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgbG9naW46IHsgbWV0aG9kOiAnR0VUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIExvZ2luXHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFNUTkJ1c2luZXNzU2VydmljZXMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQnVzaW5lc3NTZXJ2aWNlcycsIFsnbmdDb29raWVzJ10pO1xyXG5cclxuICAgIC8vI3JlZ2lvbiBTRVRURVJTXHJcbiAgICAvL3NldCB0aGUgY3JlZGVudGlhbHMgKGVuY29kZWRUb2tlbiwgdXNlcm5hbWUsIHVzZXJzTmFtZSwgdXNlcnNSb2xlKSAgd2hlbiB1c2VyIGxvZ3MgaW5cclxuICAgIFNUTkJ1c2luZXNzU2VydmljZXMuZmFjdG9yeSgnc2V0Q3JlZHMnLCBbJyRjb29raWVzJywgZnVuY3Rpb24gKCRjb29raWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh1biwgcHcsIHVzZXJOYW1lLCB1c2VyUm9sZSwgdXNlcklEKSB7XHJcbiAgICAgICAgICAgIHZhciB0b2tlbiA9IHVuLmNvbmNhdChcIjpcIiwgcHcpO1xyXG4gICAgICAgICAgICAkY29va2llcy5TVE5DcmVkcyA9IHRva2VuO1xyXG5cclxuICAgICAgICAgICAgJGNvb2tpZXMuU1ROVXNlcm5hbWUgPSB1bjtcclxuICAgICAgICAgICAgJGNvb2tpZXMudXNlcnNOYW1lID0gdXNlck5hbWU7XHJcbiAgICAgICAgICAgICRjb29raWVzLm1JRCA9IHVzZXJJRDtcclxuICAgICAgICAgICAgdmFyIHJvbGVOYW1lO1xyXG4gICAgICAgICAgICBzd2l0Y2godXNlclJvbGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICByb2xlTmFtZSA9IFwiQWRtaW5cIjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICByb2xlTmFtZSA9IFwiTWFuYWdlclwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgIHJvbGVOYW1lID0gXCJGaWVsZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgIHJvbGVOYW1lID0gXCJQdWJsaWNcIjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcm9sZU5hbWUgPSBcIkNpdGl6ZW5NYW5hZ2VyXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJGNvb2tpZXMudXNlcnNSb2xlID0gcm9sZU5hbWU7XHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcclxuXHJcbiAgICAvL3NldCB0aGUgZXZlbnQgdGhleSBjaG9vc2UgZnJvbSBob21lIHBhZ2UsIGxvb2tlZCBmb3IgdGhyb3VnaCBvdXQgYXBwXHJcbiAgICBTVE5CdXNpbmVzc1NlcnZpY2VzLmZhY3RvcnkoJ3NldFNlc3Npb25FdmVudCcsIFsnJGNvb2tpZXMnLCBmdW5jdGlvbiAoJGNvb2tpZXMpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGV2SWQsIGV2TmFtZSkge1xyXG4gICAgICAgICAgICAkY29va2llcy5TZXNzaW9uRXZlbnRJRCA9IGV2SWQ7XHJcbiAgICAgICAgICAgICRjb29raWVzLlNlc3Npb25FdmVudE5hbWUgPSBldk5hbWU7XHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcclxuXHJcbiAgICAvL3NldCB0aGUgdGVhbSB0aGV5IGNob29zZSBmcm9tIGhvbWUgcGFnZSwgbG9va2VkIGZvciB0aHJvdWdoIG91dCBhcHBcclxuICAgIFNUTkJ1c2luZXNzU2VydmljZXMuZmFjdG9yeSgnc2V0U2Vzc2lvblRlYW0nLCBbJyRjb29raWVzJywgZnVuY3Rpb24gKCRjb29raWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh0SWQsIHROYW1lKSB7XHJcbiAgICAgICAgICAgICRjb29raWVzLlNlc3Npb25UZWFJRCA9IHRJZDtcclxuICAgICAgICAgICAgJGNvb2tpZXMuU2Vzc2lvblRlYW1OYW1lID0gdE5hbWU7XHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcclxuXHJcbiAgICBTVE5CdXNpbmVzc1NlcnZpY2VzLmZhY3RvcnkoJ3NldExvZ2dlZEluJywgWyckY29va2llcycsIGZ1bmN0aW9uICgkY29va2llcykge1xyXG4gICAgICAgIHZhciBsb2dnZWRJbiA9IGZhbHNlO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGlzTG9nZ2VkSW46IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBsb2dnZWRJbjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2hhbmdlTG9nZ2VkSW46IGZ1bmN0aW9uIChZZXNPck5vKSB7XHJcbiAgICAgICAgICAgICAgICBsb2dnZWRJbiA9IFllc09yTm87XHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcclxuXHJcbiAgICAvLyNlbmRyZWdpb24gU0VUVEVSU1xyXG5cclxuICAgIC8vI3JlZ2lvbiBHRVRURVJTXHJcbiAgICAvL2NoZWNrIHRoZSBzdGF0dXMgb2YgdXNlcidzIGNyZWRlbnRpYWxzLiBpZiByZXR1cm4gZmFsc2UgPSByZWRpcmVjdCB0byBsb2dpbiBcclxuICAgIFNUTkJ1c2luZXNzU2VydmljZXMuZmFjdG9yeSgnY2hlY2tDcmVkcycsIFsnJGNvb2tpZXMnLCBmdW5jdGlvbiAoJGNvb2tpZXMpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcmV0dXJuVmFsID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHZhciBTVE5DcmVkcyA9ICRjb29raWVzLlNUTkNyZWRzO1xyXG5cclxuICAgICAgICAgICAgaWYgKFNUTkNyZWRzICE9PSB1bmRlZmluZWQgJiYgU1ROQ3JlZHMgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblZhbCA9IHRydWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbDtcclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xyXG5cclxuICAgIC8vcmV0cmlldmUgdXNlcidzICd0b2tlbicgZnJvbSBjb29raWVcclxuICAgIFNUTkJ1c2luZXNzU2VydmljZXMuZmFjdG9yeSgnZ2V0Q3JlZHMnLCBbJyRjb29raWVzJywgZnVuY3Rpb24gKCRjb29raWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJldHVyblZhbCA9IFwiXCI7XHJcbiAgICAgICAgICAgIHZhciBTVE5DcmVkcyA9ICRjb29raWVzLlNUTkNyZWRzO1xyXG5cclxuICAgICAgICAgICAgaWYgKFNUTkNyZWRzICE9PSB1bmRlZmluZWQgJiYgU1ROQ3JlZHMgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblZhbCA9IGJ0b2EoU1ROQ3JlZHMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXR1cm5WYWw7XHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcclxuXHJcbiAgICAvL3JldHJpZXZlIHVzZXIgZnJvbSBjb29raWVcclxuICAgIFNUTkJ1c2luZXNzU2VydmljZXMuZmFjdG9yeSgnZ2V0VXNlcnNOQU1FJywgWyckY29va2llcycsIGZ1bmN0aW9uICgkY29va2llcykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZXR1cm5WYWwgPSBcIlwiO1xyXG4gICAgICAgICAgICB2YXIgdXNlc05hbWUgPSAkY29va2llcy51c2Vyc05hbWU7XHJcblxyXG4gICAgICAgICAgICBpZiAodXNlc05hbWUgIT09IHVuZGVmaW5lZCAmJiB1c2VzTmFtZSAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsID0gdXNlc05hbWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbDtcclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xyXG5cclxuICAgIC8vcmV0cmlldmUgdXNlcnMgSUQgZnJvbSBjb29raWVcclxuICAgIFNUTkJ1c2luZXNzU2VydmljZXMuZmFjdG9yeSgnZ2V0VXNlcklEJywgWyckY29va2llcycsIGZ1bmN0aW9uICgkY29va2llcykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZXR1cm5WYWwgPSBcIlwiO1xyXG4gICAgICAgICAgICB2YXIgdXNlcklEID0gJGNvb2tpZXMubUlEO1xyXG5cclxuICAgICAgICAgICAgaWYgKHVzZXJJRCAhPT0gdW5kZWZpbmVkICYmIHVzZXJJRCAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsID0gdXNlcklEO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXR1cm5WYWw7XHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcclxuXHJcbiAgICAvL2dldCB0aGUgdXNlcm5hbWUgdG8gdXNlIHRocm91Z2hvdXQgdGhlIGFwcGxpY2F0aW9uXHJcbiAgICBTVE5CdXNpbmVzc1NlcnZpY2VzLmZhY3RvcnkoJ2dldFVzZXJuYW1lJywgWyckY29va2llcycsIGZ1bmN0aW9uICgkY29va2llcykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZXR1cm5WYWwgPSBcIlwiO1xyXG4gICAgICAgICAgICB2YXIgU1ROVXNlcm5hbWUgPSAkY29va2llcy5TVE5Vc2VybmFtZTtcclxuXHJcbiAgICAgICAgICAgIGlmIChTVE5Vc2VybmFtZSAhPT0gdW5kZWZpbmVkICYmIFNUTlVzZXJuYW1lICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5WYWwgPSBTVE5Vc2VybmFtZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsO1xyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XHJcblxyXG4gICAgLy9nZXQgdGhlIFJvbGUgdG8gdXNlIHRocm91Z2hvdXQgdGhlIGFwcGxpY2F0aW9uXHJcbiAgICBTVE5CdXNpbmVzc1NlcnZpY2VzLmZhY3RvcnkoJ2dldFVzZXJSb2xlJywgWyckY29va2llcycsIGZ1bmN0aW9uICgkY29va2llcykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZXR1cm5WYWwgPSBcIlwiO1xyXG4gICAgICAgICAgICB2YXIgdXNlclJvbGUgPSAkY29va2llcy51c2Vyc1JvbGU7XHJcblxyXG4gICAgICAgICAgICBpZiAodXNlclJvbGUgIT09IHVuZGVmaW5lZCAmJiB1c2VyUm9sZSAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsID0gdXNlclJvbGU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbDtcclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIEdFVFRFUlNcclxuXHJcbiAgICAvL0RFTEVURS8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy9kZWxldGUgdGhlIGNyZWRlbnRpYWxzXHJcbiAgICBTVE5CdXNpbmVzc1NlcnZpY2VzLmZhY3RvcnkoJ2RlbGV0ZUNyZWRzJywgWyckY29va2llcycsIGZ1bmN0aW9uICgkY29va2llcykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICRjb29raWVzLlNUTkNyZWRzID0gXCJcIjtcclxuICAgICAgICAgICAgJGNvb2tpZXMuU1ROVXNlcm5hbWUgPSBcIlwiO1xyXG4gICAgICAgICAgICAkY29va2llcy51c2Vyc05hbWUgPSBcIlwiO1xyXG4gICAgICAgICAgICAkY29va2llcy51c2Vyc1JvbGUgPSBcIlwiO1xyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiO1xyXG5cclxuICAgIHZhciBNb2RhbENvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ01vZGFsQ29udHJvbGxlcnMnKTtcclxuXHJcbiAgICAvL3BvcHVwIGNvbmZpcm0gYm94XHJcbiAgICBNb2RhbENvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ0NvbmZpcm1Nb2RhbEN0cmwnLCBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsICduYW1lVG9SZW1vdmUnLCAnd2hhdCcsIFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlLCBuYW1lVG9SZW1vdmUsIHdoYXQpIHtcclxuICAgICAgICAgICAgLy8jcmVnaW9uIHN3aXRjaCAobG9uZylcclxuICAgICAgICAgICAgc3dpdGNoICh3aGF0KSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiTWVtYmVyXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IG5hbWVUb1JlbW92ZS5mbmFtZSArIFwiIFwiICsgbmFtZVRvUmVtb3ZlLmxuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkV2ZW50XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IG5hbWVUb1JlbW92ZS5ldmVudF9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkFnZW5jeVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uYW1lVG9SbXYgPSBuYW1lVG9SZW1vdmUuYWdlbmN5X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiQ29udGFjdCBUeXBlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IG5hbWVUb1JlbW92ZS50eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkRlcGxveW1lbnQgUHJpb3JpdHlcIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLnByaW9yaXR5X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiRXZlbnQgU3RhdHVzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IG5hbWVUb1JlbW92ZS5zdGF0dXM7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiRmlsZSBUeXBlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IG5hbWVUb1JlbW92ZS5maWxldHlwZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJIb3Jpem9udGFsIENvbGxlY3Rpb24gTWV0aG9kXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IG5hbWVUb1JlbW92ZS5oY29sbGVjdF9tZXRob2Q7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiSG9yaXpvbnRhbCBEYXR1bVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uYW1lVG9SbXYgPSBuYW1lVG9SZW1vdmUuZGF0dW1fbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJIb3VzaW5nIFR5cGVcIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLnR5cGVfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJIV00gUXVhbGl0eVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uYW1lVG9SbXYgPSBuYW1lVG9SZW1vdmUuaHdtX3F1YWxpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiSFdNIFR5cGVcIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLmh3bV90eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkluc3RydW1lbnQgQ29sbGVjdGlvbiBDb25kaXRpb25cIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLmNvbmRpdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJNYXJrZXJcIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLm1hcmtlcjE7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiTmV0d29yayBOYW1lXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IG5hbWVUb1JlbW92ZS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIk9iamVjdGl2ZSBQb2ludCBRdWFsaXR5XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IG5hbWVUb1JlbW92ZS5xdWFsaXR5O1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIk9iamVjdGl2ZSBQb2ludCBUeXBlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IG5hbWVUb1JlbW92ZS5vcF90eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlNlbnNvciBCcmFuZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uYW1lVG9SbXYgPSBuYW1lVG9SZW1vdmUuYnJhbmRfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJEZXBsb3ltZW50IFR5cGVcIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLm1ldGhvZDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJTdGF0dXMgVHlwZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uYW1lVG9SbXYgPSBuYW1lVG9SZW1vdmUuc3RhdHVzO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlNlbnNvciBUeXBlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IG5hbWVUb1JlbW92ZS5zZW5zb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiTmV0d29yayBUeXBlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IG5hbWVUb1JlbW92ZS5uZXR3b3JrX3R5cGVfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJWZXJ0aWNhbCBDb2xsZWN0aW9uIE1ldGhvZFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uYW1lVG9SbXYgPSBuYW1lVG9SZW1vdmUudmNvbGxlY3RfbWV0aG9kO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlZlcnRpY2FsIERhdHVtXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IG5hbWVUb1JlbW92ZS5kYXR1bV9hYmJyZXZpYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiT2JqZWN0aXZlIFBvaW50XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IG5hbWVUb1JlbW92ZS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkhXTVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhRGF0ZSA9IG5ldyBEYXRlKG5hbWVUb1JlbW92ZS5mbGFnX2RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB5ZWFyID0gYURhdGUuZ2V0RnVsbFllYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9udGggPSBhRGF0ZS5nZXRNb250aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXkgPSAoJzAnICsgYURhdGUuZ2V0RGF0ZSgpKS5zbGljZSgtMik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vbnRoTmFtZXMgPSBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGVXT3RpbWUgPSBtb250aE5hbWVzW21vbnRoXSArIFwiIFwiICsgZGF5ICsgXCIsIFwiICsgeWVhcjtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uYW1lVG9SbXYgPSBcIkZsYWdnZWQgb246IFwiICsgZGF0ZVdPdGltZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJTZW5zb3JcIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLmRlcGxveW1lbnRUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlByb3Bvc2VkIFNlbnNvclwiOlxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uYW1lVG9SbXYgPSBcIlByb3Bvc2VkIFNlbnNvclwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkZpbGVcIjpcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZiA9IG5hbWVUb1JlbW92ZS5uYW1lICE9PSB1bmRlZmluZWQgfHwgbmFtZVRvUmVtb3ZlLm5hbWUgIT09IG51bGwgPyBuYW1lVG9SZW1vdmUubmFtZSA6IG5hbWVUb1JlbW92ZS5maWxlX2RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgZiA9IGYgIT09IG51bGwgfHwgZiAhPT0gdW5kZWZpbmVkID8gZiA6IG5hbWVUb1JlbW92ZS5maWxlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uYW1lVG9SbXYgPSBmO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlBlYWtcIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLnBlYWtfc3VtbWFyeV9pZDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICAgICAgICAgICRzY29wZS53aGF0ID0gd2hhdDtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKG5hbWVUb1JlbW92ZSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfV0pO1xyXG59KCkpOyIsIi8qIVxyXG4qIGpxdWVyeS5pbnB1dG1hc2suYnVuZGxlLmpzXHJcbiogaHR0cDovL2dpdGh1Yi5jb20vUm9iaW5IZXJib3RzL2pxdWVyeS5pbnB1dG1hc2tcclxuKiBDb3B5cmlnaHQgKGMpIDIwMTAgLSAyMDE1IFJvYmluIEhlcmJvdHNcclxuKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgKGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwKVxyXG4qIFZlcnNpb246IDMuMi40LTE0XHJcbiovXHJcbi8qIGpzaGludCBpZ25vcmU6c3RhcnQgKi9cclxuIWZ1bmN0aW9uICgkKSB7XHJcbiAgICBmdW5jdGlvbiBJbnB1dG1hc2soYWxpYXMsIG9wdGlvbnMpIHtcclxuICAgICAgICByZXR1cm4gdGhpcyBpbnN0YW5jZW9mIElucHV0bWFzayA/IChcIm9iamVjdFwiID09IHR5cGVvZiBhbGlhcyA/IG9wdGlvbnMgPSBhbGlhcyA6IChvcHRpb25zID0gb3B0aW9ucyB8fCB7fSxcclxuICAgICAgICBvcHRpb25zLmFsaWFzID0gYWxpYXMpLCB0aGlzLmVsID0gdm9pZCAwLCB0aGlzLm9wdHMgPSAkLmV4dGVuZCghMCwge30sIHRoaXMuZGVmYXVsdHMsIG9wdGlvbnMpLFxyXG4gICAgICAgIHRoaXMubm9NYXNrc0NhY2hlID0gb3B0aW9ucyAmJiB2b2lkIDAgIT09IG9wdGlvbnMuZGVmaW5pdGlvbnMsIHRoaXMudXNlck9wdGlvbnMgPSBvcHRpb25zIHx8IHt9LFxyXG4gICAgICAgIHZvaWQgcmVzb2x2ZUFsaWFzKHRoaXMub3B0cy5hbGlhcywgb3B0aW9ucywgdGhpcy5vcHRzKSkgOiBuZXcgSW5wdXRtYXNrKGFsaWFzLCBvcHRpb25zKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGlzSW5wdXRFdmVudFN1cHBvcnRlZChldmVudE5hbWUpIHtcclxuICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIiksIGV2TmFtZSA9IFwib25cIiArIGV2ZW50TmFtZSwgaXNTdXBwb3J0ZWQgPSBldk5hbWUgaW4gZWw7XHJcbiAgICAgICAgcmV0dXJuIGlzU3VwcG9ydGVkIHx8IChlbC5zZXRBdHRyaWJ1dGUoZXZOYW1lLCBcInJldHVybjtcIiksIGlzU3VwcG9ydGVkID0gXCJmdW5jdGlvblwiID09IHR5cGVvZiBlbFtldk5hbWVdKSxcclxuICAgICAgICBlbCA9IG51bGwsIGlzU3VwcG9ydGVkO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gaXNJbnB1dFR5cGVTdXBwb3J0ZWQoaW5wdXRUeXBlKSB7XHJcbiAgICAgICAgdmFyIGlzU3VwcG9ydGVkID0gXCJ0ZXh0XCIgPT09IGlucHV0VHlwZSB8fCBcInRlbFwiID09PSBpbnB1dFR5cGUgfHwgXCJwYXNzd29yZFwiID09PSBpbnB1dFR5cGU7XHJcbiAgICAgICAgaWYgKCFpc1N1cHBvcnRlZCkge1xyXG4gICAgICAgICAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XHJcbiAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgaW5wdXRUeXBlKSwgaXNTdXBwb3J0ZWQgPSBcInRleHRcIiA9PT0gZWwudHlwZSwgZWwgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gaXNTdXBwb3J0ZWQ7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiByZXNvbHZlQWxpYXMoYWxpYXNTdHIsIG9wdGlvbnMsIG9wdHMpIHtcclxuICAgICAgICB2YXIgYWxpYXNEZWZpbml0aW9uID0gb3B0cy5hbGlhc2VzW2FsaWFzU3RyXTtcclxuICAgICAgICByZXR1cm4gYWxpYXNEZWZpbml0aW9uID8gKGFsaWFzRGVmaW5pdGlvbi5hbGlhcyAmJiByZXNvbHZlQWxpYXMoYWxpYXNEZWZpbml0aW9uLmFsaWFzLCB2b2lkIDAsIG9wdHMpLFxyXG4gICAgICAgICQuZXh0ZW5kKCEwLCBvcHRzLCBhbGlhc0RlZmluaXRpb24pLCAkLmV4dGVuZCghMCwgb3B0cywgb3B0aW9ucyksICEwKSA6IChudWxsID09PSBvcHRzLm1hc2sgJiYgKG9wdHMubWFzayA9IGFsaWFzU3RyKSxcclxuICAgICAgICAhMSk7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBpbXBvcnRBdHRyaWJ1dGVPcHRpb25zKG5wdCwgb3B0cywgdXNlck9wdGlvbnMpIHtcclxuICAgICAgICBmdW5jdGlvbiBpbXBvcnRPcHRpb24ob3B0aW9uLCBvcHRpb25EYXRhKSB7XHJcbiAgICAgICAgICAgIG9wdGlvbkRhdGEgPSB2b2lkIDAgIT09IG9wdGlvbkRhdGEgPyBvcHRpb25EYXRhIDogbnB0LmdldEF0dHJpYnV0ZShcImRhdGEtaW5wdXRtYXNrLVwiICsgb3B0aW9uKSxcclxuICAgICAgICAgICAgbnVsbCAhPT0gb3B0aW9uRGF0YSAmJiAoXCJzdHJpbmdcIiA9PSB0eXBlb2Ygb3B0aW9uRGF0YSAmJiAoMCA9PT0gb3B0aW9uLmluZGV4T2YoXCJvblwiKSA/IG9wdGlvbkRhdGEgPSB3aW5kb3dbb3B0aW9uRGF0YV0gOiBcImZhbHNlXCIgPT09IG9wdGlvbkRhdGEgPyBvcHRpb25EYXRhID0gITEgOiBcInRydWVcIiA9PT0gb3B0aW9uRGF0YSAmJiAob3B0aW9uRGF0YSA9ICEwKSksXHJcbiAgICAgICAgICAgIFwibWFza1wiID09PSBvcHRpb24gJiYgMCA9PT0gb3B0aW9uRGF0YS5pbmRleE9mKFwiW1wiKSA/ICh1c2VyT3B0aW9uc1tvcHRpb25dID0gb3B0aW9uRGF0YS5yZXBsYWNlKC9bXFxzW1xcXV0vZywgXCJcIikuc3BsaXQoXCIsXCIpLFxyXG4gICAgICAgICAgICB1c2VyT3B0aW9uc1tvcHRpb25dWzBdID0gdXNlck9wdGlvbnNbb3B0aW9uXVswXS5yZXBsYWNlKFwiJ1wiLCBcIlwiKSwgdXNlck9wdGlvbnNbb3B0aW9uXVt1c2VyT3B0aW9uc1tvcHRpb25dLmxlbmd0aCAtIDFdID0gdXNlck9wdGlvbnNbb3B0aW9uXVt1c2VyT3B0aW9uc1tvcHRpb25dLmxlbmd0aCAtIDFdLnJlcGxhY2UoXCInXCIsIFwiXCIpKSA6IHVzZXJPcHRpb25zW29wdGlvbl0gPSBvcHRpb25EYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG9wdGlvbiwgZGF0YW9wdGlvbnMsIG9wdGlvbkRhdGEsIGF0dHJPcHRpb25zID0gbnB0LmdldEF0dHJpYnV0ZShcImRhdGEtaW5wdXRtYXNrXCIpO1xyXG4gICAgICAgIGF0dHJPcHRpb25zICYmIFwiXCIgIT09IGF0dHJPcHRpb25zICYmIChhdHRyT3B0aW9ucyA9IGF0dHJPcHRpb25zLnJlcGxhY2UobmV3IFJlZ0V4cChcIidcIiwgXCJnXCIpLCAnXCInKSxcclxuICAgICAgICBkYXRhb3B0aW9ucyA9IEpTT04ucGFyc2UoXCJ7XCIgKyBhdHRyT3B0aW9ucyArIFwifVwiKSk7XHJcbiAgICAgICAgZm9yIChvcHRpb24gaW4gb3B0cykge1xyXG4gICAgICAgICAgICBpZiAoZGF0YW9wdGlvbnMpIHtcclxuICAgICAgICAgICAgICAgIG9wdGlvbkRhdGEgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBwIGluIGRhdGFvcHRpb25zKSBpZiAocC50b0xvd2VyQ2FzZSgpID09PSBvcHRpb24udG9Mb3dlckNhc2UoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbkRhdGEgPSBkYXRhb3B0aW9uc1twXTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbXBvcnRPcHRpb24ob3B0aW9uLCBvcHRpb25EYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKHVzZXJPcHRpb25zLmFsaWFzKSB7XHJcbiAgICAgICAgICAgIHJlc29sdmVBbGlhcyh1c2VyT3B0aW9ucy5hbGlhcywgdXNlck9wdGlvbnMsIG9wdHMpO1xyXG4gICAgICAgICAgICBmb3IgKG9wdGlvbiBpbiBvcHRzKSBpbXBvcnRPcHRpb24ob3B0aW9uKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuICQuZXh0ZW5kKCEwLCBvcHRzLCB1c2VyT3B0aW9ucyksIG9wdHM7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBnZW5lcmF0ZU1hc2tTZXQob3B0cywgbm9jYWNoZSkge1xyXG4gICAgICAgIGZ1bmN0aW9uIGFuYWx5c2VNYXNrKG1hc2spIHtcclxuICAgICAgICAgICAgZnVuY3Rpb24gTWFza1Rva2VuKGlzR3JvdXAsIGlzT3B0aW9uYWwsIGlzUXVhbnRpZmllciwgaXNBbHRlcm5hdG9yKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLm1hdGNoZXMgPSBbXSwgdGhpcy5pc0dyb3VwID0gaXNHcm91cCB8fCAhMSwgdGhpcy5pc09wdGlvbmFsID0gaXNPcHRpb25hbCB8fCAhMSxcclxuICAgICAgICAgICAgICAgIHRoaXMuaXNRdWFudGlmaWVyID0gaXNRdWFudGlmaWVyIHx8ICExLCB0aGlzLmlzQWx0ZXJuYXRvciA9IGlzQWx0ZXJuYXRvciB8fCAhMSxcclxuICAgICAgICAgICAgICAgIHRoaXMucXVhbnRpZmllciA9IHtcclxuICAgICAgICAgICAgICAgICAgICBtaW46IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgbWF4OiAxXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGluc2VydFRlc3REZWZpbml0aW9uKG10b2tlbiwgZWxlbWVudCwgcG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgIHZhciBtYXNrZGVmID0gb3B0cy5kZWZpbml0aW9uc1tlbGVtZW50XTtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uID0gdm9pZCAwICE9PSBwb3NpdGlvbiA/IHBvc2l0aW9uIDogbXRva2VuLm1hdGNoZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgdmFyIHByZXZNYXRjaCA9IG10b2tlbi5tYXRjaGVzW3Bvc2l0aW9uIC0gMV07XHJcbiAgICAgICAgICAgICAgICBpZiAobWFza2RlZiAmJiAhZXNjYXBlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hc2tkZWYucGxhY2Vob2xkZXIgPSAkLmlzRnVuY3Rpb24obWFza2RlZi5wbGFjZWhvbGRlcikgPyBtYXNrZGVmLnBsYWNlaG9sZGVyKG9wdHMpIDogbWFza2RlZi5wbGFjZWhvbGRlcjtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBwcmV2YWxpZGF0b3JzID0gbWFza2RlZi5wcmV2YWxpZGF0b3IsIHByZXZhbGlkYXRvcnNMID0gcHJldmFsaWRhdG9ycyA/IHByZXZhbGlkYXRvcnMubGVuZ3RoIDogMCwgaSA9IDE7IGkgPCBtYXNrZGVmLmNhcmRpbmFsaXR5OyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHByZXZhbGlkYXRvciA9IHByZXZhbGlkYXRvcnNMID49IGkgPyBwcmV2YWxpZGF0b3JzW2kgLSAxXSA6IFtdLCB2YWxpZGF0b3IgPSBwcmV2YWxpZGF0b3IudmFsaWRhdG9yLCBjYXJkaW5hbGl0eSA9IHByZXZhbGlkYXRvci5jYXJkaW5hbGl0eTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbXRva2VuLm1hdGNoZXMuc3BsaWNlKHBvc2l0aW9uKyssIDAsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZuOiB2YWxpZGF0b3IgPyBcInN0cmluZ1wiID09IHR5cGVvZiB2YWxpZGF0b3IgPyBuZXcgUmVnRXhwKHZhbGlkYXRvcikgOiBuZXcgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGVzdCA9IHZhbGlkYXRvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0oKSA6IG5ldyBSZWdFeHAoXCIuXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IGNhcmRpbmFsaXR5ID8gY2FyZGluYWxpdHkgOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxpdHk6IG10b2tlbi5pc09wdGlvbmFsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3QmxvY2tNYXJrZXI6IHZvaWQgMCA9PT0gcHJldk1hdGNoIHx8IHByZXZNYXRjaC5kZWYgIT09IChtYXNrZGVmLmRlZmluaXRpb25TeW1ib2wgfHwgZWxlbWVudCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG1hc2tkZWYuY2FzaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmOiBtYXNrZGVmLmRlZmluaXRpb25TeW1ib2wgfHwgZWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBtYXNrZGVmLnBsYWNlaG9sZGVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFzazogZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSwgcHJldk1hdGNoID0gbXRva2VuLm1hdGNoZXNbcG9zaXRpb24gLSAxXTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgbXRva2VuLm1hdGNoZXMuc3BsaWNlKHBvc2l0aW9uKyssIDAsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm46IG1hc2tkZWYudmFsaWRhdG9yID8gXCJzdHJpbmdcIiA9PSB0eXBlb2YgbWFza2RlZi52YWxpZGF0b3IgPyBuZXcgUmVnRXhwKG1hc2tkZWYudmFsaWRhdG9yKSA6IG5ldyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnRlc3QgPSBtYXNrZGVmLnZhbGlkYXRvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSgpIDogbmV3IFJlZ0V4cChcIi5cIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiBtYXNrZGVmLmNhcmRpbmFsaXR5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogbXRva2VuLmlzT3B0aW9uYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrTWFya2VyOiB2b2lkIDAgPT09IHByZXZNYXRjaCB8fCBwcmV2TWF0Y2guZGVmICE9PSAobWFza2RlZi5kZWZpbml0aW9uU3ltYm9sIHx8IGVsZW1lbnQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IG1hc2tkZWYuY2FzaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWY6IG1hc2tkZWYuZGVmaW5pdGlvblN5bWJvbCB8fCBlbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogbWFza2RlZi5wbGFjZWhvbGRlcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFzazogZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIG10b2tlbi5tYXRjaGVzLnNwbGljZShwb3NpdGlvbisrLCAwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm46IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxpdHk6IG10b2tlbi5pc09wdGlvbmFsLFxyXG4gICAgICAgICAgICAgICAgICAgIG5ld0Jsb2NrTWFya2VyOiB2b2lkIDAgPT09IHByZXZNYXRjaCB8fCBwcmV2TWF0Y2guZGVmICE9PSBlbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2luZzogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBkZWY6IGVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IHZvaWQgMCxcclxuICAgICAgICAgICAgICAgICAgICBtYXNrOiBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICB9KSwgZXNjYXBlZCA9ICExO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHZlcmlmeUdyb3VwTWFya2VyKGxhc3RNYXRjaCwgaXNPcGVuR3JvdXApIHtcclxuICAgICAgICAgICAgICAgIGxhc3RNYXRjaC5pc0dyb3VwICYmIChsYXN0TWF0Y2guaXNHcm91cCA9ICExLCBpbnNlcnRUZXN0RGVmaW5pdGlvbihsYXN0TWF0Y2gsIG9wdHMuZ3JvdXBtYXJrZXIuc3RhcnQsIDApLFxyXG4gICAgICAgICAgICAgICAgaXNPcGVuR3JvdXAgIT09ICEwICYmIGluc2VydFRlc3REZWZpbml0aW9uKGxhc3RNYXRjaCwgb3B0cy5ncm91cG1hcmtlci5lbmQpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBtYXNrQ3VycmVudFRva2VuKG0sIGN1cnJlbnRUb2tlbiwgbGFzdE1hdGNoLCBleHRyYUNvbmRpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgY3VycmVudFRva2VuLm1hdGNoZXMubGVuZ3RoID4gMCAmJiAodm9pZCAwID09PSBleHRyYUNvbmRpdGlvbiB8fCBleHRyYUNvbmRpdGlvbikgJiYgKGxhc3RNYXRjaCA9IGN1cnJlbnRUb2tlbi5tYXRjaGVzW2N1cnJlbnRUb2tlbi5tYXRjaGVzLmxlbmd0aCAtIDFdLFxyXG4gICAgICAgICAgICAgICAgdmVyaWZ5R3JvdXBNYXJrZXIobGFzdE1hdGNoKSksIGluc2VydFRlc3REZWZpbml0aW9uKGN1cnJlbnRUb2tlbiwgbSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gZGVmYXVsdENhc2UoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAob3BlbmVuaW5ncy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRPcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV0sIG1hc2tDdXJyZW50VG9rZW4obSwgY3VycmVudE9wZW5pbmdUb2tlbiwgbGFzdE1hdGNoLCAhY3VycmVudE9wZW5pbmdUb2tlbi5pc0FsdGVybmF0b3IpLFxyXG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4uaXNBbHRlcm5hdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0b3IgPSBvcGVuZW5pbmdzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBtbmR4ID0gMDsgbW5keCA8IGFsdGVybmF0b3IubWF0Y2hlcy5sZW5ndGg7IG1uZHgrKykgYWx0ZXJuYXRvci5tYXRjaGVzW21uZHhdLmlzR3JvdXAgPSAhMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5sZW5ndGggPiAwID8gKGN1cnJlbnRPcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcy5wdXNoKGFsdGVybmF0b3IpKSA6IGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2goYWx0ZXJuYXRvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIG1hc2tDdXJyZW50VG9rZW4obSwgY3VycmVudFRva2VuLCBsYXN0TWF0Y2gpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJldmVyc2VUb2tlbnMobWFza1Rva2VuKSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXZlcnNlU3RhdGljKHN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0ID09PSBvcHRzLm9wdGlvbmFsbWFya2VyLnN0YXJ0ID8gc3QgPSBvcHRzLm9wdGlvbmFsbWFya2VyLmVuZCA6IHN0ID09PSBvcHRzLm9wdGlvbmFsbWFya2VyLmVuZCA/IHN0ID0gb3B0cy5vcHRpb25hbG1hcmtlci5zdGFydCA6IHN0ID09PSBvcHRzLmdyb3VwbWFya2VyLnN0YXJ0ID8gc3QgPSBvcHRzLmdyb3VwbWFya2VyLmVuZCA6IHN0ID09PSBvcHRzLmdyb3VwbWFya2VyLmVuZCAmJiAoc3QgPSBvcHRzLmdyb3VwbWFya2VyLnN0YXJ0KSxcclxuICAgICAgICAgICAgICAgICAgICBzdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG1hc2tUb2tlbi5tYXRjaGVzID0gbWFza1Rva2VuLm1hdGNoZXMucmV2ZXJzZSgpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbWF0Y2ggaW4gbWFza1Rva2VuLm1hdGNoZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW50TWF0Y2ggPSBwYXJzZUludChtYXRjaCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXS5pc1F1YW50aWZpZXIgJiYgbWFza1Rva2VuLm1hdGNoZXNbaW50TWF0Y2ggKyAxXSAmJiBtYXNrVG9rZW4ubWF0Y2hlc1tpbnRNYXRjaCArIDFdLmlzR3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHF0ID0gbWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrVG9rZW4ubWF0Y2hlcy5zcGxpY2UobWF0Y2gsIDEpLCBtYXNrVG9rZW4ubWF0Y2hlcy5zcGxpY2UoaW50TWF0Y2ggKyAxLCAwLCBxdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gbWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdLm1hdGNoZXMgPyBtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0gPSByZXZlcnNlVG9rZW5zKG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXSkgOiBtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0gPSByZXZlcnNlU3RhdGljKG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFza1Rva2VuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIG1hdGNoLCBtLCBvcGVuaW5nVG9rZW4sIGN1cnJlbnRPcGVuaW5nVG9rZW4sIGFsdGVybmF0b3IsIGxhc3RNYXRjaCwgZ3JvdXBUb2tlbiwgdG9rZW5pemVyID0gLyg/Ols/KitdfFxce1swLTlcXCtcXCpdKyg/OixbMC05XFwrXFwqXSopP1xcfSl8W14uPyorXiR7W10oKXxcXFxcXSt8Li9nLCBlc2NhcGVkID0gITEsIGN1cnJlbnRUb2tlbiA9IG5ldyBNYXNrVG9rZW4oKSwgb3BlbmVuaW5ncyA9IFtdLCBtYXNrVG9rZW5zID0gW107IG1hdGNoID0gdG9rZW5pemVyLmV4ZWMobWFzaykgOykgaWYgKG0gPSBtYXRjaFswXSxcclxuICAgICAgICAgICAgZXNjYXBlZCkgZGVmYXVsdENhc2UoKTsgZWxzZSBzd2l0Y2ggKG0uY2hhckF0KDApKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIG9wdHMuZXNjYXBlQ2hhcjpcclxuICAgICAgICAgICAgICAgICAgICBlc2NhcGVkID0gITA7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBvcHRzLm9wdGlvbmFsbWFya2VyLmVuZDpcclxuICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5ncm91cG1hcmtlci5lbmQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3MucG9wKCksIHZvaWQgMCAhPT0gb3BlbmluZ1Rva2VuKSBpZiAob3BlbmVuaW5ncy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdLCBjdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXMucHVzaChvcGVuaW5nVG9rZW4pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlbmluZ1Rva2VuLmlzQWx0ZXJuYXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvciA9IG9wZW5lbmluZ3MucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBtbmR4ID0gMDsgbW5keCA8IGFsdGVybmF0b3IubWF0Y2hlcy5sZW5ndGg7IG1uZHgrKykgYWx0ZXJuYXRvci5tYXRjaGVzW21uZHhdLmlzR3JvdXAgPSAhMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5lbmluZ3MubGVuZ3RoID4gMCA/IChjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzLnB1c2goYWx0ZXJuYXRvcikpIDogY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChhbHRlcm5hdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKG9wZW5pbmdUb2tlbik7IGVsc2UgZGVmYXVsdENhc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIG9wdHMub3B0aW9uYWxtYXJrZXIuc3RhcnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5wdXNoKG5ldyBNYXNrVG9rZW4oITEsICEwKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBvcHRzLmdyb3VwbWFya2VyLnN0YXJ0OlxyXG4gICAgICAgICAgICAgICAgICAgIG9wZW5lbmluZ3MucHVzaChuZXcgTWFza1Rva2VuKCEwKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBvcHRzLnF1YW50aWZpZXJtYXJrZXIuc3RhcnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHF1YW50aWZpZXIgPSBuZXcgTWFza1Rva2VuKCExLCAhMSwgITApO1xyXG4gICAgICAgICAgICAgICAgICAgIG0gPSBtLnJlcGxhY2UoL1t7fV0vZywgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1xID0gbS5zcGxpdChcIixcIiksIG1xMCA9IGlzTmFOKG1xWzBdKSA/IG1xWzBdIDogcGFyc2VJbnQobXFbMF0pLCBtcTEgPSAxID09PSBtcS5sZW5ndGggPyBtcTAgOiBpc05hTihtcVsxXSkgPyBtcVsxXSA6IHBhcnNlSW50KG1xWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKFwiKlwiID09PSBtcTEgfHwgXCIrXCIgPT09IG1xMSkgJiYgKG1xMCA9IFwiKlwiID09PSBtcTEgPyAwIDogMSksIHF1YW50aWZpZXIucXVhbnRpZmllciA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWluOiBtcTAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heDogbXExXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgb3BlbmVuaW5ncy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaGVzID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdLm1hdGNoZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gbWF0Y2hlcy5wb3AoKSwgbWF0Y2guaXNHcm91cCB8fCAoZ3JvdXBUb2tlbiA9IG5ldyBNYXNrVG9rZW4oITApLCBncm91cFRva2VuLm1hdGNoZXMucHVzaChtYXRjaCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gZ3JvdXBUb2tlbiksIG1hdGNoZXMucHVzaChtYXRjaCksIG1hdGNoZXMucHVzaChxdWFudGlmaWVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgbWF0Y2ggPSBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wb3AoKSwgbWF0Y2guaXNHcm91cCB8fCAoZ3JvdXBUb2tlbiA9IG5ldyBNYXNrVG9rZW4oITApLFxyXG4gICAgICAgICAgICAgICAgICAgIGdyb3VwVG9rZW4ubWF0Y2hlcy5wdXNoKG1hdGNoKSwgbWF0Y2ggPSBncm91cFRva2VuKSwgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChtYXRjaCksXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChxdWFudGlmaWVyKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIG9wdHMuYWx0ZXJuYXRvcm1hcmtlcjpcclxuICAgICAgICAgICAgICAgICAgICBvcGVuZW5pbmdzLmxlbmd0aCA+IDAgPyAoY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXSxcclxuICAgICAgICAgICAgICAgICAgICBsYXN0TWF0Y2ggPSBjdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXMucG9wKCkpIDogbGFzdE1hdGNoID0gY3VycmVudFRva2VuLm1hdGNoZXMucG9wKCksXHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdE1hdGNoLmlzQWx0ZXJuYXRvciA/IG9wZW5lbmluZ3MucHVzaChsYXN0TWF0Y2gpIDogKGFsdGVybmF0b3IgPSBuZXcgTWFza1Rva2VuKCExLCAhMSwgITEsICEwKSxcclxuICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yLm1hdGNoZXMucHVzaChsYXN0TWF0Y2gpLCBvcGVuZW5pbmdzLnB1c2goYWx0ZXJuYXRvcikpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmYXVsdENhc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmb3IgKDsgb3BlbmVuaW5ncy5sZW5ndGggPiAwOykgb3BlbmluZ1Rva2VuID0gb3BlbmVuaW5ncy5wb3AoKSwgdmVyaWZ5R3JvdXBNYXJrZXIob3BlbmluZ1Rva2VuLCAhMCksXHJcbiAgICAgICAgICAgIGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2gob3BlbmluZ1Rva2VuKTtcclxuICAgICAgICAgICAgcmV0dXJuIGN1cnJlbnRUb2tlbi5tYXRjaGVzLmxlbmd0aCA+IDAgJiYgKGxhc3RNYXRjaCA9IGN1cnJlbnRUb2tlbi5tYXRjaGVzW2N1cnJlbnRUb2tlbi5tYXRjaGVzLmxlbmd0aCAtIDFdLFxyXG4gICAgICAgICAgICB2ZXJpZnlHcm91cE1hcmtlcihsYXN0TWF0Y2gpLCBtYXNrVG9rZW5zLnB1c2goY3VycmVudFRva2VuKSksIG9wdHMubnVtZXJpY0lucHV0ICYmIHJldmVyc2VUb2tlbnMobWFza1Rva2Vuc1swXSksXHJcbiAgICAgICAgICAgIG1hc2tUb2tlbnM7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGdlbmVyYXRlTWFzayhtYXNrLCBtZXRhZGF0YSkge1xyXG4gICAgICAgICAgICBpZiAobnVsbCA9PT0gbWFzayB8fCBcIlwiID09PSBtYXNrKSByZXR1cm4gdm9pZCAwO1xyXG4gICAgICAgICAgICBpZiAoMSA9PT0gbWFzay5sZW5ndGggJiYgb3B0cy5ncmVlZHkgPT09ICExICYmIDAgIT09IG9wdHMucmVwZWF0ICYmIChvcHRzLnBsYWNlaG9sZGVyID0gXCJcIiksXHJcbiAgICAgICAgICAgIG9wdHMucmVwZWF0ID4gMCB8fCBcIipcIiA9PT0gb3B0cy5yZXBlYXQgfHwgXCIrXCIgPT09IG9wdHMucmVwZWF0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVwZWF0U3RhcnQgPSBcIipcIiA9PT0gb3B0cy5yZXBlYXQgPyAwIDogXCIrXCIgPT09IG9wdHMucmVwZWF0ID8gMSA6IG9wdHMucmVwZWF0O1xyXG4gICAgICAgICAgICAgICAgbWFzayA9IG9wdHMuZ3JvdXBtYXJrZXIuc3RhcnQgKyBtYXNrICsgb3B0cy5ncm91cG1hcmtlci5lbmQgKyBvcHRzLnF1YW50aWZpZXJtYXJrZXIuc3RhcnQgKyByZXBlYXRTdGFydCArIFwiLFwiICsgb3B0cy5yZXBlYXQgKyBvcHRzLnF1YW50aWZpZXJtYXJrZXIuZW5kO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBtYXNrc2V0RGVmaW5pdGlvbjtcclxuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gSW5wdXRtYXNrLnByb3RvdHlwZS5tYXNrc0NhY2hlW21hc2tdIHx8IG5vY2FjaGUgPT09ICEwID8gKG1hc2tzZXREZWZpbml0aW9uID0ge1xyXG4gICAgICAgICAgICAgICAgbWFzazogbWFzayxcclxuICAgICAgICAgICAgICAgIG1hc2tUb2tlbjogYW5hbHlzZU1hc2sobWFzayksXHJcbiAgICAgICAgICAgICAgICB2YWxpZFBvc2l0aW9uczoge30sXHJcbiAgICAgICAgICAgICAgICBfYnVmZmVyOiB2b2lkIDAsXHJcbiAgICAgICAgICAgICAgICBidWZmZXI6IHZvaWQgMCxcclxuICAgICAgICAgICAgICAgIHRlc3RzOiB7fSxcclxuICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBtZXRhZGF0YVxyXG4gICAgICAgICAgICB9LCBub2NhY2hlICE9PSAhMCAmJiAoSW5wdXRtYXNrLnByb3RvdHlwZS5tYXNrc0NhY2hlW29wdHMubnVtZXJpY0lucHV0ID8gbWFzay5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IG1hc2tdID0gbWFza3NldERlZmluaXRpb24sXHJcbiAgICAgICAgICAgIG1hc2tzZXREZWZpbml0aW9uID0gJC5leHRlbmQoITAsIHt9LCBJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbb3B0cy5udW1lcmljSW5wdXQgPyBtYXNrLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogbWFza10pKSkgOiBtYXNrc2V0RGVmaW5pdGlvbiA9ICQuZXh0ZW5kKCEwLCB7fSwgSW5wdXRtYXNrLnByb3RvdHlwZS5tYXNrc0NhY2hlW29wdHMubnVtZXJpY0lucHV0ID8gbWFzay5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IG1hc2tdKSxcclxuICAgICAgICAgICAgbWFza3NldERlZmluaXRpb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHByZVByb2Nlc3NNYXNrKG1hc2spIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1hc2sgPSBtYXNrLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHZhciBtcztcclxuICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMubWFzaykgJiYgKG9wdHMubWFzayA9IG9wdHMubWFzayhvcHRzKSksICQuaXNBcnJheShvcHRzLm1hc2spKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRzLm1hc2subGVuZ3RoID4gMSkge1xyXG4gICAgICAgICAgICAgICAgb3B0cy5rZWVwU3RhdGljID0gbnVsbCA9PT0gb3B0cy5rZWVwU3RhdGljID8gITAgOiBvcHRzLmtlZXBTdGF0aWM7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWx0TWFzayA9IFwiKFwiO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICQuZWFjaChvcHRzLm51bWVyaWNJbnB1dCA/IG9wdHMubWFzay5yZXZlcnNlKCkgOiBvcHRzLm1hc2ssIGZ1bmN0aW9uIChuZHgsIG1zaykge1xyXG4gICAgICAgICAgICAgICAgICAgIGFsdE1hc2subGVuZ3RoID4gMSAmJiAoYWx0TWFzayArPSBcIil8KFwiKSwgYWx0TWFzayArPSBwcmVQcm9jZXNzTWFzayh2b2lkIDAgPT09IG1zay5tYXNrIHx8ICQuaXNGdW5jdGlvbihtc2subWFzaykgPyBtc2sgOiBtc2subWFzayk7XHJcbiAgICAgICAgICAgICAgICB9KSwgYWx0TWFzayArPSBcIilcIiwgZ2VuZXJhdGVNYXNrKGFsdE1hc2ssIG9wdHMubWFzayk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3B0cy5tYXNrID0gb3B0cy5tYXNrLnBvcCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gb3B0cy5tYXNrICYmIChtcyA9IHZvaWQgMCA9PT0gb3B0cy5tYXNrLm1hc2sgfHwgJC5pc0Z1bmN0aW9uKG9wdHMubWFzay5tYXNrKSA/IGdlbmVyYXRlTWFzayhwcmVQcm9jZXNzTWFzayhvcHRzLm1hc2spLCBvcHRzLm1hc2spIDogZ2VuZXJhdGVNYXNrKHByZVByb2Nlc3NNYXNrKG9wdHMubWFzay5tYXNrKSwgb3B0cy5tYXNrKSksXHJcbiAgICAgICAgbXM7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBtYXNrU2NvcGUoYWN0aW9uT2JqLCBtYXNrc2V0LCBvcHRzKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0TWFza1RlbXBsYXRlKGJhc2VPbklucHV0LCBtaW5pbWFsUG9zLCBpbmNsdWRlSW5wdXQpIHtcclxuICAgICAgICAgICAgbWluaW1hbFBvcyA9IG1pbmltYWxQb3MgfHwgMDtcclxuICAgICAgICAgICAgdmFyIG5keEludGx6ciwgdGVzdCwgdGVzdFBvcywgbWFza1RlbXBsYXRlID0gW10sIHBvcyA9IDA7XHJcbiAgICAgICAgICAgIGRvIHtcclxuICAgICAgICAgICAgICAgIGlmIChiYXNlT25JbnB1dCA9PT0gITAgJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsaWRQb3MgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXTtcclxuICAgICAgICAgICAgICAgICAgICB0ZXN0ID0gdmFsaWRQb3MubWF0Y2gsIG5keEludGx6ciA9IHZhbGlkUG9zLmxvY2F0b3Iuc2xpY2UoKSwgbWFza1RlbXBsYXRlLnB1c2goaW5jbHVkZUlucHV0ID09PSAhMCA/IHZhbGlkUG9zLmlucHV0IDogZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0KSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgdGVzdFBvcyA9IGdldFRlc3RUZW1wbGF0ZShwb3MsIG5keEludGx6ciwgcG9zIC0gMSksIHRlc3QgPSB0ZXN0UG9zLm1hdGNoLFxyXG4gICAgICAgICAgICAgICAgbmR4SW50bHpyID0gdGVzdFBvcy5sb2NhdG9yLnNsaWNlKCksIG1hc2tUZW1wbGF0ZS5wdXNoKGdldFBsYWNlaG9sZGVyKHBvcywgdGVzdCkpO1xyXG4gICAgICAgICAgICAgICAgcG9zKys7XHJcbiAgICAgICAgICAgIH0gd2hpbGUgKCh2b2lkIDAgPT09IG1heExlbmd0aCB8fCBtYXhMZW5ndGggPiBwb3MgLSAxKSAmJiBudWxsICE9PSB0ZXN0LmZuIHx8IG51bGwgPT09IHRlc3QuZm4gJiYgXCJcIiAhPT0gdGVzdC5kZWYgfHwgbWluaW1hbFBvcyA+PSBwb3MpO1xyXG4gICAgICAgICAgICByZXR1cm4gbWFza1RlbXBsYXRlLnBvcCgpLCBtYXNrVGVtcGxhdGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGdldE1hc2tTZXQoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXNrc2V0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiByZXNldE1hc2tTZXQoc29mdCkge1xyXG4gICAgICAgICAgICB2YXIgbWFza3NldCA9IGdldE1hc2tTZXQoKTtcclxuICAgICAgICAgICAgbWFza3NldC5idWZmZXIgPSB2b2lkIDAsIG1hc2tzZXQudGVzdHMgPSB7fSwgc29mdCAhPT0gITAgJiYgKG1hc2tzZXQuX2J1ZmZlciA9IHZvaWQgMCxcclxuICAgICAgICAgICAgbWFza3NldC52YWxpZFBvc2l0aW9ucyA9IHt9LCBtYXNrc2V0LnAgPSAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0TGFzdFZhbGlkUG9zaXRpb24oY2xvc2VzdFRvLCBzdHJpY3QpIHtcclxuICAgICAgICAgICAgdmFyIG1hc2tzZXQgPSBnZXRNYXNrU2V0KCksIGxhc3RWYWxpZFBvc2l0aW9uID0gLTEsIHZhbGlkcyA9IG1hc2tzZXQudmFsaWRQb3NpdGlvbnM7XHJcbiAgICAgICAgICAgIHZvaWQgMCA9PT0gY2xvc2VzdFRvICYmIChjbG9zZXN0VG8gPSAtMSk7XHJcbiAgICAgICAgICAgIHZhciBiZWZvcmUgPSBsYXN0VmFsaWRQb3NpdGlvbiwgYWZ0ZXIgPSBsYXN0VmFsaWRQb3NpdGlvbjtcclxuICAgICAgICAgICAgZm9yICh2YXIgcG9zTmR4IGluIHZhbGlkcykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBzTmR4ID0gcGFyc2VJbnQocG9zTmR4KTtcclxuICAgICAgICAgICAgICAgIHZhbGlkc1twc05keF0gJiYgKHN0cmljdCB8fCBudWxsICE9PSB2YWxpZHNbcHNOZHhdLm1hdGNoLmZuKSAmJiAoY2xvc2VzdFRvID49IHBzTmR4ICYmIChiZWZvcmUgPSBwc05keCksXHJcbiAgICAgICAgICAgICAgICBwc05keCA+PSBjbG9zZXN0VG8gJiYgKGFmdGVyID0gcHNOZHgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gbGFzdFZhbGlkUG9zaXRpb24gPSAtMSAhPT0gYmVmb3JlICYmIGNsb3Nlc3RUbyAtIGJlZm9yZSA+IDEgfHwgY2xvc2VzdFRvID4gYWZ0ZXIgPyBiZWZvcmUgOiBhZnRlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gc2V0VmFsaWRQb3NpdGlvbihwb3MsIHZhbGlkVGVzdCwgZnJvbVNldFZhbGlkKSB7XHJcbiAgICAgICAgICAgIGlmIChvcHRzLmluc2VydE1vZGUgJiYgdm9pZCAwICE9PSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSAmJiB2b2lkIDAgPT09IGZyb21TZXRWYWxpZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGksIHBvc2l0aW9uc0Nsb25lID0gJC5leHRlbmQoITAsIHt9LCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMpLCBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gcG9zOyBsdnAgPj0gaTsgaSsrKSBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldO1xyXG4gICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10gPSB2YWxpZFRlc3Q7XHJcbiAgICAgICAgICAgICAgICB2YXIgaiwgdmFsaWQgPSAhMCwgdnBzID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zO1xyXG4gICAgICAgICAgICAgICAgZm9yIChpID0gaiA9IHBvczsgbHZwID49IGk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ID0gcG9zaXRpb25zQ2xvbmVbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gdCkgZm9yICh2YXIgcG9zTWF0Y2ggPSBqLCBwcmV2UG9zTWF0Y2ggPSAtMTsgcG9zTWF0Y2ggPCBnZXRNYXNrTGVuZ3RoKCkgJiYgKG51bGwgPT0gdC5tYXRjaC5mbiAmJiB2cHNbaV0gJiYgKHZwc1tpXS5tYXRjaC5vcHRpb25hbFF1YW50aWZpZXIgPT09ICEwIHx8IHZwc1tpXS5tYXRjaC5vcHRpb25hbGl0eSA9PT0gITApIHx8IG51bGwgIT0gdC5tYXRjaC5mbikgOykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCA9PT0gdC5tYXRjaC5mbiB8fCAhb3B0cy5rZWVwU3RhdGljICYmIHZwc1tpXSAmJiAodm9pZCAwICE9PSB2cHNbaSArIDFdICYmIGdldFRlc3RzKGkgKyAxLCB2cHNbaV0ubG9jYXRvci5zbGljZSgpLCBpKS5sZW5ndGggPiAxIHx8IHZvaWQgMCAhPT0gdnBzW2ldLmFsdGVybmF0aW9uKSA/IHBvc01hdGNoKysgOiBwb3NNYXRjaCA9IHNlZWtOZXh0KGopLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbkNhbk1hdGNoRGVmaW5pdGlvbihwb3NNYXRjaCwgdC5tYXRjaC5kZWYpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGlzVmFsaWQocG9zTWF0Y2gsIHQuaW5wdXQsICEwLCAhMCkgIT09ICExLCBqID0gcG9zTWF0Y2g7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQgPSBudWxsID09IHQubWF0Y2guZm4sIHByZXZQb3NNYXRjaCA9PT0gcG9zTWF0Y2gpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcmV2UG9zTWF0Y2ggPSBwb3NNYXRjaDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCF2YWxpZCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIXZhbGlkKSByZXR1cm4gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zID0gJC5leHRlbmQoITAsIHt9LCBwb3NpdGlvbnNDbG9uZSksXHJcbiAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoITApLCAhMTtcclxuICAgICAgICAgICAgfSBlbHNlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdID0gdmFsaWRUZXN0O1xyXG4gICAgICAgICAgICByZXR1cm4gcmVzZXRNYXNrU2V0KCEwKSwgITA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHN0cmlwVmFsaWRQb3NpdGlvbnMoc3RhcnQsIGVuZCwgbm9jaGVjaywgc3RyaWN0KSB7XHJcbiAgICAgICAgICAgIHZhciBpLCBzdGFydFBvcyA9IHN0YXJ0O1xyXG4gICAgICAgICAgICBmb3IgKGdldE1hc2tTZXQoKS5wID0gc3RhcnQsIGkgPSBzdGFydFBvczsgZW5kID4gaTsgaSsrKSB2b2lkIDAgIT09IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXSAmJiAobm9jaGVjayA9PT0gITAgfHwgb3B0cy5jYW5DbGVhclBvc2l0aW9uKGdldE1hc2tTZXQoKSwgaSwgZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSwgc3RyaWN0LCBvcHRzKSAhPT0gITEpICYmIGRlbGV0ZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV07XHJcbiAgICAgICAgICAgIGZvciAoaSA9IHN0YXJ0UG9zICsgMTsgaSA8PSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpIDspIHtcclxuICAgICAgICAgICAgICAgIGZvciAoOyB2b2lkIDAgIT09IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tzdGFydFBvc107KSBzdGFydFBvcysrO1xyXG4gICAgICAgICAgICAgICAgdmFyIHMgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbc3RhcnRQb3NdO1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXJ0UG9zID4gaSAmJiAoaSA9IHN0YXJ0UG9zICsgMSksIHZvaWQgMCA9PT0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldICYmIGlzTWFzayhpKSB8fCB2b2lkIDAgIT09IHMpIGkrKzsgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBnZXRUZXN0VGVtcGxhdGUoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zaXRpb25DYW5NYXRjaERlZmluaXRpb24oc3RhcnRQb3MsIHQubWF0Y2guZGVmKSA/IGlzVmFsaWQoc3RhcnRQb3MsIHQuaW5wdXQgfHwgZ2V0UGxhY2Vob2xkZXIoaSksICEwKSAhPT0gITEgJiYgKGRlbGV0ZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV0sXHJcbiAgICAgICAgICAgICAgICAgICAgaSsrKSA6IGlzTWFzayhpKSB8fCAoaSsrLCBzdGFydFBvcy0tKSwgc3RhcnRQb3MrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSwgbWwgPSBnZXRNYXNrTGVuZ3RoKCk7XHJcbiAgICAgICAgICAgIGZvciAoc3RyaWN0ICE9PSAhMCAmJiBub2NoZWNrICE9PSAhMCAmJiB2b2lkIDAgIT09IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsdnBdICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsdnBdLmlucHV0ID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgZGVsZXRlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsdnBdLFxyXG4gICAgICAgICAgICBpID0gbHZwICsgMTsgbWwgPj0gaTsgaSsrKSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV0gJiYgZGVsZXRlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXTtcclxuICAgICAgICAgICAgcmVzZXRNYXNrU2V0KCEwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0VGVzdFRlbXBsYXRlKHBvcywgbmR4SW50bHpyLCB0c3RQcykge1xyXG4gICAgICAgICAgICB2YXIgdGVzdFBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdO1xyXG4gICAgICAgICAgICBpZiAodm9pZCAwID09PSB0ZXN0UG9zKSBmb3IgKHZhciB0ZXN0UG9zaXRpb25zID0gZ2V0VGVzdHMocG9zLCBuZHhJbnRsenIsIHRzdFBzKSwgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSwgbHZUZXN0ID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2x2cF0gfHwgZ2V0VGVzdHMoMClbMF0sIGx2VGVzdEFsdEFyciA9IHZvaWQgMCAhPT0gbHZUZXN0LmFsdGVybmF0aW9uID8gbHZUZXN0LmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXS50b1N0cmluZygpLnNwbGl0KFwiLFwiKSA6IFtdLCBuZHggPSAwOyBuZHggPCB0ZXN0UG9zaXRpb25zLmxlbmd0aCAmJiAodGVzdFBvcyA9IHRlc3RQb3NpdGlvbnNbbmR4XSxcclxuICAgICAgICAgICAgISh0ZXN0UG9zLm1hdGNoICYmIChvcHRzLmdyZWVkeSAmJiB0ZXN0UG9zLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciAhPT0gITAgfHwgKHRlc3RQb3MubWF0Y2gub3B0aW9uYWxpdHkgPT09ICExIHx8IHRlc3RQb3MubWF0Y2gubmV3QmxvY2tNYXJrZXIgPT09ICExKSAmJiB0ZXN0UG9zLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciAhPT0gITApICYmICh2b2lkIDAgPT09IGx2VGVzdC5hbHRlcm5hdGlvbiB8fCBsdlRlc3QuYWx0ZXJuYXRpb24gIT09IHRlc3RQb3MuYWx0ZXJuYXRpb24gfHwgdm9pZCAwICE9PSB0ZXN0UG9zLmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXSAmJiBjaGVja0FsdGVybmF0aW9uTWF0Y2godGVzdFBvcy5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5zcGxpdChcIixcIiksIGx2VGVzdEFsdEFycikpKSkgOyBuZHgrKyk7XHJcbiAgICAgICAgICAgIHJldHVybiB0ZXN0UG9zO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBnZXRUZXN0KHBvcykge1xyXG4gICAgICAgICAgICByZXR1cm4gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10gPyBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXS5tYXRjaCA6IGdldFRlc3RzKHBvcylbMF0ubWF0Y2g7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHBvc2l0aW9uQ2FuTWF0Y2hEZWZpbml0aW9uKHBvcywgZGVmKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHZhbGlkID0gITEsIHRlc3RzID0gZ2V0VGVzdHMocG9zKSwgdG5keCA9IDA7IHRuZHggPCB0ZXN0cy5sZW5ndGg7IHRuZHgrKykgaWYgKHRlc3RzW3RuZHhdLm1hdGNoICYmIHRlc3RzW3RuZHhdLm1hdGNoLmRlZiA9PT0gZGVmKSB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZCA9ICEwO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHZhbGlkO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBnZXRUZXN0cyhwb3MsIG5keEludGx6ciwgdHN0UHMsIGNhY2hlYWJsZSkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiByZXNvbHZlVGVzdEZyb21Ub2tlbihtYXNrVG9rZW4sIG5keEluaXRpYWxpemVyLCBsb29wTmR4LCBxdWFudGlmaWVyUmVjdXJzZSkge1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gaGFuZGxlTWF0Y2gobWF0Y2gsIGxvb3BOZHgsIHF1YW50aWZpZXJSZWN1cnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRlc3RQb3MgPiAxZTQpIHRocm93IFwiSW5wdXRtYXNrOiBUaGVyZSBpcyBwcm9iYWJseSBhbiBlcnJvciBpbiB5b3VyIG1hc2sgZGVmaW5pdGlvbiBvciBpbiB0aGUgY29kZS4gQ3JlYXRlIGFuIGlzc3VlIG9uIGdpdGh1YiB3aXRoIGFuIGV4YW1wbGUgb2YgdGhlIG1hc2sgeW91IGFyZSB1c2luZy4gXCIgKyBnZXRNYXNrU2V0KCkubWFzaztcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGVzdFBvcyA9PT0gcG9zICYmIHZvaWQgMCA9PT0gbWF0Y2gubWF0Y2hlcykgcmV0dXJuIG1hdGNoZXMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoOiBtYXRjaCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRvcjogbG9vcE5keC5yZXZlcnNlKClcclxuICAgICAgICAgICAgICAgICAgICB9KSwgITA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gbWF0Y2gubWF0Y2hlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2guaXNHcm91cCAmJiBxdWFudGlmaWVyUmVjdXJzZSAhPT0gbWF0Y2gpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCA9IGhhbmRsZU1hdGNoKG1hc2tUb2tlbi5tYXRjaGVzWyQuaW5BcnJheShtYXRjaCwgbWFza1Rva2VuLm1hdGNoZXMpICsgMV0sIGxvb3BOZHgpKSByZXR1cm4gITA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobWF0Y2guaXNPcHRpb25hbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9wdGlvbmFsVG9rZW4gPSBtYXRjaDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCA9IHJlc29sdmVUZXN0RnJvbVRva2VuKG1hdGNoLCBuZHhJbml0aWFsaXplciwgbG9vcE5keCwgcXVhbnRpZmllclJlY3Vyc2UpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhdGVzdE1hdGNoID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdLm1hdGNoLCBpc0ZpcnN0TWF0Y2ggPSAwID09PSAkLmluQXJyYXkobGF0ZXN0TWF0Y2gsIG9wdGlvbmFsVG9rZW4ubWF0Y2hlcyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIWlzRmlyc3RNYXRjaCkgcmV0dXJuICEwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydFN0b3AgPSAhMCwgdGVzdFBvcyA9IHBvcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaC5pc0FsdGVybmF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYWx0TWF0Y2hlcywgYWx0ZXJuYXRlVG9rZW4gPSBtYXRjaCwgbWFsdGVybmF0ZU1hdGNoZXMgPSBbXSwgY3VycmVudE1hdGNoZXMgPSBtYXRjaGVzLnNsaWNlKCksIGxvb3BOZHhDbnQgPSBsb29wTmR4Lmxlbmd0aCwgYWx0SW5kZXggPSBuZHhJbml0aWFsaXplci5sZW5ndGggPiAwID8gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKSA6IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC0xID09PSBhbHRJbmRleCB8fCBcInN0cmluZ1wiID09IHR5cGVvZiBhbHRJbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjdXJyZW50UG9zID0gdGVzdFBvcywgbmR4SW5pdGlhbGl6ZXJDbG9uZSA9IG5keEluaXRpYWxpemVyLnNsaWNlKCksIGFsdEluZGV4QXJyID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PSB0eXBlb2YgYWx0SW5kZXggJiYgKGFsdEluZGV4QXJyID0gYWx0SW5kZXguc3BsaXQoXCIsXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhbW5keCA9IDA7IGFtbmR4IDwgYWx0ZXJuYXRlVG9rZW4ubWF0Y2hlcy5sZW5ndGg7IGFtbmR4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoZXMgPSBbXSwgbWF0Y2ggPSBoYW5kbGVNYXRjaChhbHRlcm5hdGVUb2tlbi5tYXRjaGVzW2FtbmR4XSwgW2FtbmR4XS5jb25jYXQobG9vcE5keCksIHF1YW50aWZpZXJSZWN1cnNlKSB8fCBtYXRjaCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggIT09ICEwICYmIHZvaWQgMCAhPT0gbWF0Y2ggJiYgYWx0SW5kZXhBcnJbYWx0SW5kZXhBcnIubGVuZ3RoIC0gMV0gPCBhbHRlcm5hdGVUb2tlbi5tYXRjaGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG50bmR4ID0gbWFza1Rva2VuLm1hdGNoZXMuaW5kZXhPZihtYXRjaCkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza1Rva2VuLm1hdGNoZXMubGVuZ3RoID4gbnRuZHggJiYgKG1hdGNoID0gaGFuZGxlTWF0Y2gobWFza1Rva2VuLm1hdGNoZXNbbnRuZHhdLCBbbnRuZHhdLmNvbmNhdChsb29wTmR4LnNsaWNlKDEsIGxvb3BOZHgubGVuZ3RoKSksIHF1YW50aWZpZXJSZWN1cnNlKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoICYmIChhbHRJbmRleEFyci5wdXNoKG50bmR4LnRvU3RyaW5nKCkpLCAkLmVhY2gobWF0Y2hlcywgZnVuY3Rpb24gKG5keCwgbG1udCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxtbnQuYWx0ZXJuYXRpb24gPSBsb29wTmR4Lmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbHRNYXRjaGVzID0gbWF0Y2hlcy5zbGljZSgpLCB0ZXN0UG9zID0gY3VycmVudFBvcywgbWF0Y2hlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG5keEluaXRpYWxpemVyQ2xvbmUubGVuZ3RoOyBpKyspIG5keEluaXRpYWxpemVyW2ldID0gbmR4SW5pdGlhbGl6ZXJDbG9uZVtpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbmR4MSA9IDA7IG5keDEgPCBtYWx0TWF0Y2hlcy5sZW5ndGg7IG5keDErKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsdE1hdGNoID0gbWFsdE1hdGNoZXNbbmR4MV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRNYXRjaC5hbHRlcm5hdGlvbiA9IGFsdE1hdGNoLmFsdGVybmF0aW9uIHx8IGxvb3BOZHhDbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuZHgyID0gMDsgbmR4MiA8IG1hbHRlcm5hdGVNYXRjaGVzLmxlbmd0aDsgbmR4MisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFsdE1hdGNoMiA9IG1hbHRlcm5hdGVNYXRjaGVzW25keDJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhbHRNYXRjaC5tYXRjaC5tYXNrID09PSBhbHRNYXRjaDIubWF0Y2gubWFzayAmJiAoXCJzdHJpbmdcIiAhPSB0eXBlb2YgYWx0SW5kZXggfHwgLTEgIT09ICQuaW5BcnJheShhbHRNYXRjaC5sb2NhdG9yW2FsdE1hdGNoLmFsdGVybmF0aW9uXS50b1N0cmluZygpLCBhbHRJbmRleEFycikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbHRNYXRjaGVzLnNwbGljZShuZHgxLCAxKSwgbmR4MS0tLCBhbHRNYXRjaDIubG9jYXRvclthbHRNYXRjaC5hbHRlcm5hdGlvbl0gPSBhbHRNYXRjaDIubG9jYXRvclthbHRNYXRjaC5hbHRlcm5hdGlvbl0gKyBcIixcIiArIGFsdE1hdGNoLmxvY2F0b3JbYWx0TWF0Y2guYWx0ZXJuYXRpb25dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRNYXRjaDIuYWx0ZXJuYXRpb24gPSBhbHRNYXRjaC5hbHRlcm5hdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbHRlcm5hdGVNYXRjaGVzID0gbWFsdGVybmF0ZU1hdGNoZXMuY29uY2F0KG1hbHRNYXRjaGVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXCJzdHJpbmdcIiA9PSB0eXBlb2YgYWx0SW5kZXggJiYgKG1hbHRlcm5hdGVNYXRjaGVzID0gJC5tYXAobWFsdGVybmF0ZU1hdGNoZXMsIGZ1bmN0aW9uIChsbW50LCBuZHgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRmluaXRlKG5keCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYW1hdGNoLCBhbHRlcm5hdGlvbiA9IGxtbnQuYWx0ZXJuYXRpb24sIGFsdExvY0FyciA9IGxtbnQubG9jYXRvclthbHRlcm5hdGlvbl0udG9TdHJpbmcoKS5zcGxpdChcIixcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbW50LmxvY2F0b3JbYWx0ZXJuYXRpb25dID0gdm9pZCAwLCBsbW50LmFsdGVybmF0aW9uID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYWxuZHggPSAwOyBhbG5keCA8IGFsdExvY0Fyci5sZW5ndGg7IGFsbmR4KyspIG1hbWF0Y2ggPSAtMSAhPT0gJC5pbkFycmF5KGFsdExvY0FyclthbG5keF0sIGFsdEluZGV4QXJyKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hbWF0Y2ggJiYgKHZvaWQgMCAhPT0gbG1udC5sb2NhdG9yW2FsdGVybmF0aW9uXSA/IChsbW50LmxvY2F0b3JbYWx0ZXJuYXRpb25dICs9IFwiLFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG1udC5sb2NhdG9yW2FsdGVybmF0aW9uXSArPSBhbHRMb2NBcnJbYWxuZHhdKSA6IGxtbnQubG9jYXRvclthbHRlcm5hdGlvbl0gPSBwYXJzZUludChhbHRMb2NBcnJbYWxuZHhdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxtbnQuYWx0ZXJuYXRpb24gPSBhbHRlcm5hdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSBsbW50LmxvY2F0b3JbYWx0ZXJuYXRpb25dKSByZXR1cm4gbG1udDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSwgbWF0Y2hlcyA9IGN1cnJlbnRNYXRjaGVzLmNvbmNhdChtYWx0ZXJuYXRlTWF0Y2hlcyksIHRlc3RQb3MgPSBwb3MsIGluc2VydFN0b3AgPSBtYXRjaGVzLmxlbmd0aCA+IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgbWF0Y2ggPSBhbHRlcm5hdGVUb2tlbi5tYXRjaGVzW2FsdEluZGV4XSA/IGhhbmRsZU1hdGNoKGFsdGVybmF0ZVRva2VuLm1hdGNoZXNbYWx0SW5kZXhdLCBbYWx0SW5kZXhdLmNvbmNhdChsb29wTmR4KSwgcXVhbnRpZmllclJlY3Vyc2UpIDogITE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2gpIHJldHVybiAhMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaC5pc1F1YW50aWZpZXIgJiYgcXVhbnRpZmllclJlY3Vyc2UgIT09IG1hc2tUb2tlbi5tYXRjaGVzWyQuaW5BcnJheShtYXRjaCwgbWFza1Rva2VuLm1hdGNoZXMpIC0gMV0pIGZvciAodmFyIHF0ID0gbWF0Y2gsIHFuZHggPSBuZHhJbml0aWFsaXplci5sZW5ndGggPiAwID8gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKSA6IDA7IHFuZHggPCAoaXNOYU4ocXQucXVhbnRpZmllci5tYXgpID8gcW5keCArIDEgOiBxdC5xdWFudGlmaWVyLm1heCkgJiYgcG9zID49IHRlc3RQb3M7IHFuZHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRva2VuR3JvdXAgPSBtYXNrVG9rZW4ubWF0Y2hlc1skLmluQXJyYXkocXQsIG1hc2tUb2tlbi5tYXRjaGVzKSAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoID0gaGFuZGxlTWF0Y2godG9rZW5Hcm91cCwgW3FuZHhdLmNvbmNhdChsb29wTmR4KSwgdG9rZW5Hcm91cCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF0ZXN0TWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ubWF0Y2gsIGxhdGVzdE1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciA9IHFuZHggPiBxdC5xdWFudGlmaWVyLm1pbiAtIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNGaXJzdE1hdGNoID0gMCA9PT0gJC5pbkFycmF5KGxhdGVzdE1hdGNoLCB0b2tlbkdyb3VwLm1hdGNoZXMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxbmR4ID4gcXQucXVhbnRpZmllci5taW4gLSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnRTdG9wID0gITAsIHRlc3RQb3MgPSBwb3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gITA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaCA9IHJlc29sdmVUZXN0RnJvbVRva2VuKG1hdGNoLCBuZHhJbml0aWFsaXplciwgbG9vcE5keCwgcXVhbnRpZmllclJlY3Vyc2UpKSByZXR1cm4gITA7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHRlc3RQb3MrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHRuZHggPSBuZHhJbml0aWFsaXplci5sZW5ndGggPiAwID8gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKSA6IDA7IHRuZHggPCBtYXNrVG9rZW4ubWF0Y2hlcy5sZW5ndGg7IHRuZHgrKykgaWYgKG1hc2tUb2tlbi5tYXRjaGVzW3RuZHhdLmlzUXVhbnRpZmllciAhPT0gITApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBoYW5kbGVNYXRjaChtYXNrVG9rZW4ubWF0Y2hlc1t0bmR4XSwgW3RuZHhdLmNvbmNhdChsb29wTmR4KSwgcXVhbnRpZmllclJlY3Vyc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCAmJiB0ZXN0UG9zID09PSBwb3MpIHJldHVybiBtYXRjaDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGVzdFBvcyA+IHBvcykgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGxhdGVzdE1hdGNoLCBpc0ZpcnN0TWF0Y2gsIG1hc2tUb2tlbnMgPSBnZXRNYXNrU2V0KCkubWFza1Rva2VuLCB0ZXN0UG9zID0gbmR4SW50bHpyID8gdHN0UHMgOiAwLCBuZHhJbml0aWFsaXplciA9IG5keEludGx6ciB8fCBbMF0sIG1hdGNoZXMgPSBbXSwgaW5zZXJ0U3RvcCA9ICExO1xyXG4gICAgICAgICAgICBpZiAoY2FjaGVhYmxlID09PSAhMCAmJiBnZXRNYXNrU2V0KCkudGVzdHNbcG9zXSkgcmV0dXJuIGdldE1hc2tTZXQoKS50ZXN0c1twb3NdO1xyXG4gICAgICAgICAgICBpZiAodm9pZCAwID09PSBuZHhJbnRsenIpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHRlc3QsIHByZXZpb3VzUG9zID0gcG9zIC0gMTsgdm9pZCAwID09PSAodGVzdCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twcmV2aW91c1Bvc10pICYmIHByZXZpb3VzUG9zID4gLTEgJiYgKCFnZXRNYXNrU2V0KCkudGVzdHNbcHJldmlvdXNQb3NdIHx8IHZvaWQgMCA9PT0gKHRlc3QgPSBnZXRNYXNrU2V0KCkudGVzdHNbcHJldmlvdXNQb3NdWzBdKSkgOykgcHJldmlvdXNQb3MtLTtcclxuICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gdGVzdCAmJiBwcmV2aW91c1BvcyA+IC0xICYmICh0ZXN0UG9zID0gcHJldmlvdXNQb3MsIG5keEluaXRpYWxpemVyID0gdGVzdC5sb2NhdG9yLnNsaWNlKCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAodmFyIG10bmR4ID0gbmR4SW5pdGlhbGl6ZXIuc2hpZnQoKSA7IG10bmR4IDwgbWFza1Rva2Vucy5sZW5ndGg7IG10bmR4KyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IHJlc29sdmVUZXN0RnJvbVRva2VuKG1hc2tUb2tlbnNbbXRuZHhdLCBuZHhJbml0aWFsaXplciwgW210bmR4XSk7XHJcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2ggJiYgdGVzdFBvcyA9PT0gcG9zIHx8IHRlc3RQb3MgPiBwb3MpIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAoMCA9PT0gbWF0Y2hlcy5sZW5ndGggfHwgaW5zZXJ0U3RvcCkgJiYgbWF0Y2hlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgIG1hdGNoOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm46IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uYWxpdHk6ICEwLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2luZzogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBkZWY6IFwiXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBsb2NhdG9yOiBbXVxyXG4gICAgICAgICAgICB9KSwgZ2V0TWFza1NldCgpLnRlc3RzW3Bvc10gPSAkLmV4dGVuZCghMCwgW10sIG1hdGNoZXMpLCBnZXRNYXNrU2V0KCkudGVzdHNbcG9zXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0QnVmZmVyVGVtcGxhdGUoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IGdldE1hc2tTZXQoKS5fYnVmZmVyICYmIChnZXRNYXNrU2V0KCkuX2J1ZmZlciA9IGdldE1hc2tUZW1wbGF0ZSghMSwgMSkpLFxyXG4gICAgICAgICAgICBnZXRNYXNrU2V0KCkuX2J1ZmZlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0QnVmZmVyKG5vQ2FjaGUpIHtcclxuICAgICAgICAgICAgcmV0dXJuICh2b2lkIDAgPT09IGdldE1hc2tTZXQoKS5idWZmZXIgfHwgbm9DYWNoZSA9PT0gITApICYmIChub0NhY2hlID09PSAhMCAmJiAoZ2V0TWFza1NldCgpLnRlc3QgPSB7fSksXHJcbiAgICAgICAgICAgIGdldE1hc2tTZXQoKS5idWZmZXIgPSBnZXRNYXNrVGVtcGxhdGUoITAsIGdldExhc3RWYWxpZFBvc2l0aW9uKCksICEwKSksIGdldE1hc2tTZXQoKS5idWZmZXI7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlZnJlc2hGcm9tQnVmZmVyKHN0YXJ0LCBlbmQsIGJ1ZmZlcikge1xyXG4gICAgICAgICAgICB2YXIgaTtcclxuICAgICAgICAgICAgaWYgKGJ1ZmZlciA9IGJ1ZmZlciwgc3RhcnQgPT09ICEwKSByZXNldE1hc2tTZXQoKSwgc3RhcnQgPSAwLCBlbmQgPSBidWZmZXIubGVuZ3RoOyBlbHNlIGZvciAoaSA9IHN0YXJ0OyBlbmQgPiBpOyBpKyspIGRlbGV0ZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV0sXHJcbiAgICAgICAgICAgIGRlbGV0ZSBnZXRNYXNrU2V0KCkudGVzdHNbaV07XHJcbiAgICAgICAgICAgIGZvciAoaSA9IHN0YXJ0OyBlbmQgPiBpOyBpKyspIHJlc2V0TWFza1NldCghMCksIGJ1ZmZlcltpXSAhPT0gb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyICYmIGlzVmFsaWQoaSwgYnVmZmVyW2ldLCAhMCwgITApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBjYXNpbmcoZWxlbSwgdGVzdCkge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHRlc3QuY2FzaW5nKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwidXBwZXJcIjpcclxuICAgICAgICAgICAgICAgICAgICBlbGVtID0gZWxlbS50b1VwcGVyQ2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2UgXCJsb3dlclwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW0gPSBlbGVtLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGVsZW07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGNoZWNrQWx0ZXJuYXRpb25NYXRjaChhbHRBcnIxLCBhbHRBcnIyKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGFsdEFyckMgPSBvcHRzLmdyZWVkeSA/IGFsdEFycjIgOiBhbHRBcnIyLnNsaWNlKDAsIDEpLCBpc01hdGNoID0gITEsIGFsbmR4ID0gMDsgYWxuZHggPCBhbHRBcnIxLmxlbmd0aDsgYWxuZHgrKykgaWYgKC0xICE9PSAkLmluQXJyYXkoYWx0QXJyMVthbG5keF0sIGFsdEFyckMpKSB7XHJcbiAgICAgICAgICAgICAgICBpc01hdGNoID0gITA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gaXNNYXRjaDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gaXNWYWxpZChwb3MsIGMsIHN0cmljdCwgZnJvbVNldFZhbGlkKSB7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIF9pc1ZhbGlkKHBvc2l0aW9uLCBjLCBzdHJpY3QsIGZyb21TZXRWYWxpZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJzbHQgPSAhMTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAkLmVhY2goZ2V0VGVzdHMocG9zaXRpb24pLCBmdW5jdGlvbiAobmR4LCB0c3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB0ZXN0ID0gdHN0Lm1hdGNoLCBsb29wZW5kID0gYyA/IDEgOiAwLCBjaHJzID0gXCJcIiwgaSA9IHRlc3QuY2FyZGluYWxpdHk7IGkgPiBsb29wZW5kOyBpLS0pIGNocnMgKz0gZ2V0QnVmZmVyRWxlbWVudChwb3NpdGlvbiAtIChpIC0gMSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjICYmIChjaHJzICs9IGMpLCBnZXRCdWZmZXIoITApLCByc2x0ID0gbnVsbCAhPSB0ZXN0LmZuID8gdGVzdC5mbi50ZXN0KGNocnMsIGdldE1hc2tTZXQoKSwgcG9zaXRpb24sIHN0cmljdCwgb3B0cykgOiBjICE9PSB0ZXN0LmRlZiAmJiBjICE9PSBvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIgfHwgXCJcIiA9PT0gdGVzdC5kZWYgPyAhMSA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYzogdGVzdC5kZWYsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zaXRpb25cclxuICAgICAgICAgICAgICAgICAgICB9LCByc2x0ICE9PSAhMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWxlbSA9IHZvaWQgMCAhPT0gcnNsdC5jID8gcnNsdC5jIDogYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxlbSA9IGVsZW0gPT09IG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlciAmJiBudWxsID09PSB0ZXN0LmZuID8gdGVzdC5kZWYgOiBlbGVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsaWRhdGVkUG9zID0gcG9zaXRpb24sIHBvc3NpYmxlTW9kaWZpZWRCdWZmZXIgPSBnZXRCdWZmZXIoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gcnNsdC5yZW1vdmUgJiYgKCQuaXNBcnJheShyc2x0LnJlbW92ZSkgfHwgKHJzbHQucmVtb3ZlID0gW3JzbHQucmVtb3ZlXSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQuZWFjaChyc2x0LnJlbW92ZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYiAtIGE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBmdW5jdGlvbiAobmR4LCBsbW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJpcFZhbGlkUG9zaXRpb25zKGxtbnQsIGxtbnQgKyAxLCAhMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSwgdm9pZCAwICE9PSByc2x0Lmluc2VydCAmJiAoJC5pc0FycmF5KHJzbHQuaW5zZXJ0KSB8fCAocnNsdC5pbnNlcnQgPSBbcnNsdC5pbnNlcnRdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHJzbHQuaW5zZXJ0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhIC0gYjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksIGZ1bmN0aW9uIChuZHgsIGxtbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQobG1udC5wb3MsIGxtbnQuYywgITApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSksIHJzbHQucmVmcmVzaEZyb21CdWZmZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWZyZXNoID0gcnNsdC5yZWZyZXNoRnJvbUJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdHJpY3QgPSAhMCwgcmVmcmVzaEZyb21CdWZmZXIocmVmcmVzaCA9PT0gITAgPyByZWZyZXNoIDogcmVmcmVzaC5zdGFydCwgcmVmcmVzaC5lbmQsIHBvc3NpYmxlTW9kaWZpZWRCdWZmZXIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCAwID09PSByc2x0LnBvcyAmJiB2b2lkIDAgPT09IHJzbHQuYykgcmV0dXJuIHJzbHQucG9zID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICExO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkYXRlZFBvcyA9IHZvaWQgMCAhPT0gcnNsdC5wb3MgPyByc2x0LnBvcyA6IHBvc2l0aW9uLCB2YWxpZGF0ZWRQb3MgIT09IHBvc2l0aW9uKSByZXR1cm4gcnNsdCA9ICQuZXh0ZW5kKHJzbHQsIGlzVmFsaWQodmFsaWRhdGVkUG9zLCBlbGVtLCAhMCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgITE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAocnNsdCAhPT0gITAgJiYgdm9pZCAwICE9PSByc2x0LnBvcyAmJiByc2x0LnBvcyAhPT0gcG9zaXRpb24gJiYgKHZhbGlkYXRlZFBvcyA9IHJzbHQucG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcihwb3NpdGlvbiwgdmFsaWRhdGVkUG9zLCBnZXRCdWZmZXIoKS5zbGljZSgpKSwgdmFsaWRhdGVkUG9zICE9PSBwb3NpdGlvbikpIHJldHVybiByc2x0ID0gJC5leHRlbmQocnNsdCwgaXNWYWxpZCh2YWxpZGF0ZWRQb3MsIGVsZW0sICEwKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICExO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnNsdCAhPT0gITAgJiYgdm9pZCAwID09PSByc2x0LnBvcyAmJiB2b2lkIDAgPT09IHJzbHQuYyA/ICExIDogKG5keCA+IDAgJiYgcmVzZXRNYXNrU2V0KCEwKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0VmFsaWRQb3NpdGlvbih2YWxpZGF0ZWRQb3MsICQuZXh0ZW5kKHt9LCB0c3QsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBjYXNpbmcoZWxlbSwgdGVzdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksIGZyb21TZXRWYWxpZCkgfHwgKHJzbHQgPSAhMSksICExKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KSwgcnNsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBhbHRlcm5hdGUocG9zLCBjLCBzdHJpY3QsIGZyb21TZXRWYWxpZCkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgbGFzdEFsdCwgYWx0ZXJuYXRpb24sIGlzVmFsaWRSc2x0LCBhbHRQb3MsIGksIHZhbGlkUG9zLCB2YWxpZFBzQ2xvbmUgPSAkLmV4dGVuZCghMCwge30sIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyksIGxBbHQgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpIDsgbEFsdCA+PSAwICYmIChhbHRQb3MgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbEFsdF0sXHJcbiAgICAgICAgICAgICAgICAhYWx0UG9zIHx8IHZvaWQgMCA9PT0gYWx0UG9zLmFsdGVybmF0aW9uIHx8IChsYXN0QWx0ID0gbEFsdCwgYWx0ZXJuYXRpb24gPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbGFzdEFsdF0uYWx0ZXJuYXRpb24sXHJcbiAgICAgICAgICAgICAgICBnZXRUZXN0VGVtcGxhdGUobGFzdEFsdCkubG9jYXRvclthbHRQb3MuYWx0ZXJuYXRpb25dID09PSBhbHRQb3MubG9jYXRvclthbHRQb3MuYWx0ZXJuYXRpb25dKSkgOyBsQWx0LS0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKHZvaWQgMCAhPT0gYWx0ZXJuYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBsYXN0QWx0ID0gcGFyc2VJbnQobGFzdEFsdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZGVjaXNpb25Qb3MgaW4gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zKSBpZiAoZGVjaXNpb25Qb3MgPSBwYXJzZUludChkZWNpc2lvblBvcyksXHJcbiAgICAgICAgICAgICAgICAgICAgYWx0UG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2RlY2lzaW9uUG9zXSwgZGVjaXNpb25Qb3MgPj0gbGFzdEFsdCAmJiB2b2lkIDAgIT09IGFsdFBvcy5hbHRlcm5hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0TmR4cyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsYXN0QWx0XS5sb2NhdG9yW2FsdGVybmF0aW9uXS50b1N0cmluZygpLnNwbGl0KFwiLFwiKSwgZGVjaXNpb25UYWtlciA9IGFsdFBvcy5sb2NhdG9yW2FsdGVybmF0aW9uXSB8fCBhbHROZHhzWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWNpc2lvblRha2VyLmxlbmd0aCA+IDAgJiYgKGRlY2lzaW9uVGFrZXIgPSBkZWNpc2lvblRha2VyLnNwbGl0KFwiLFwiKVswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG1uZHggPSAwOyBtbmR4IDwgYWx0TmR4cy5sZW5ndGg7IG1uZHgrKykgaWYgKGRlY2lzaW9uVGFrZXIgPCBhbHROZHhzW21uZHhdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBwb3NzaWJpbGl0eVBvcywgcG9zc2liaWxpdGllcywgZHAgPSBkZWNpc2lvblBvczsgZHAgPj0gMDsgZHAtLSkgaWYgKHBvc3NpYmlsaXR5UG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2RwXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gcG9zc2liaWxpdHlQb3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3NzaWJpbGl0aWVzID0gcG9zc2liaWxpdHlQb3MubG9jYXRvclthbHRlcm5hdGlvbl0sIHBvc3NpYmlsaXR5UG9zLmxvY2F0b3JbYWx0ZXJuYXRpb25dID0gcGFyc2VJbnQoYWx0TmR4c1ttbmR4XSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGVjaXNpb25UYWtlciAhPT0gcG9zc2liaWxpdHlQb3MubG9jYXRvclthbHRlcm5hdGlvbl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsaWRJbnB1dHMgPSBbXSwgc3RhdGljSW5wdXRzQmVmb3JlUG9zID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBkZWNpc2lvblBvcyArIDE7IGkgPCBnZXRMYXN0VmFsaWRQb3NpdGlvbigpICsgMTsgaSsrKSB2YWxpZFBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZFBvcyAmJiAobnVsbCAhPSB2YWxpZFBvcy5tYXRjaC5mbiA/IHZhbGlkSW5wdXRzLnB1c2godmFsaWRQb3MuaW5wdXQpIDogcG9zID4gaSAmJiBzdGF0aWNJbnB1dHNCZWZvcmVQb3MrKyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXSwgZGVsZXRlIGdldE1hc2tTZXQoKS50ZXN0c1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHJlc2V0TWFza1NldCghMCksIG9wdHMua2VlcFN0YXRpYyA9ICFvcHRzLmtlZXBTdGF0aWMsIGlzVmFsaWRSc2x0ID0gITA7IHZhbGlkSW5wdXRzLmxlbmd0aCA+IDA7KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnB1dCA9IHZhbGlkSW5wdXRzLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbnB1dCAhPT0gb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyICYmICEoaXNWYWxpZFJzbHQgPSBpc1ZhbGlkKGdldExhc3RWYWxpZFBvc2l0aW9uKCkgKyAxLCBpbnB1dCwgITEsICEwKSkpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocG9zc2liaWxpdHlQb3MuYWx0ZXJuYXRpb24gPSBhbHRlcm5hdGlvbiwgcG9zc2liaWxpdHlQb3MubG9jYXRvclthbHRlcm5hdGlvbl0gPSBwb3NzaWJpbGl0aWVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWRSc2x0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXJnZXRMdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbihwb3MpICsgMSwgc3RhdGljSW5wdXRzQmVmb3JlUG9zQWx0ZXJuYXRlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChpID0gZGVjaXNpb25Qb3MgKyAxOyBpIDwgZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSArIDE7IGkrKykgdmFsaWRQb3MgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkUG9zICYmIG51bGwgPT0gdmFsaWRQb3MubWF0Y2guZm4gJiYgcG9zID4gaSAmJiBzdGF0aWNJbnB1dHNCZWZvcmVQb3NBbHRlcm5hdGUrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zICs9IHN0YXRpY0lucHV0c0JlZm9yZVBvc0FsdGVybmF0ZSAtIHN0YXRpY0lucHV0c0JlZm9yZVBvcywgaXNWYWxpZFJzbHQgPSBpc1ZhbGlkKHBvcyA+IHRhcmdldEx2cCA/IHRhcmdldEx2cCA6IHBvcywgYywgc3RyaWN0LCBmcm9tU2V0VmFsaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5rZWVwU3RhdGljID0gIW9wdHMua2VlcFN0YXRpYywgaXNWYWxpZFJzbHQpIHJldHVybiBpc1ZhbGlkUnNsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoKSwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zID0gJC5leHRlbmQoITAsIHt9LCB2YWxpZFBzQ2xvbmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiAhMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiB0cmFja2JhY2tBbHRlcm5hdGlvbnMob3JpZ2luYWxQb3MsIG5ld1Bvcykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdnAgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbmV3UG9zXSwgdGFyZ2V0TG9jYXRvciA9IHZwLmxvY2F0b3IsIHRsbCA9IHRhcmdldExvY2F0b3IubGVuZ3RoLCBwcyA9IG9yaWdpbmFsUG9zOyBuZXdQb3MgPiBwczsgcHMrKykgaWYgKCFpc01hc2socHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3RzID0gZ2V0VGVzdHMocHMpLCBiZXN0TWF0Y2ggPSB0ZXN0c1swXSwgZXF1YWxpdHkgPSAtMTtcclxuICAgICAgICAgICAgICAgICAgICAkLmVhY2godGVzdHMsIGZ1bmN0aW9uIChuZHgsIHRzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgdGxsID4gaTsgaSsrKSB0c3QubG9jYXRvcltpXSAmJiBjaGVja0FsdGVybmF0aW9uTWF0Y2godHN0LmxvY2F0b3JbaV0udG9TdHJpbmcoKS5zcGxpdChcIixcIiksIHRhcmdldExvY2F0b3JbaV0udG9TdHJpbmcoKS5zcGxpdChcIixcIikpICYmIGkgPiBlcXVhbGl0eSAmJiAoZXF1YWxpdHkgPSBpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiZXN0TWF0Y2ggPSB0c3QpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLCBzZXRWYWxpZFBvc2l0aW9uKHBzLCAkLmV4dGVuZCh7fSwgYmVzdE1hdGNoLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0OiBiZXN0TWF0Y2gubWF0Y2guZGVmXHJcbiAgICAgICAgICAgICAgICAgICAgfSksICEwKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzdHJpY3QgPSBzdHJpY3QgPT09ICEwO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKSwgcG5keCA9IHBvcyAtIDE7IHBuZHggPiAtMSAmJiAhZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3BuZHhdOyBwbmR4LS0pO1xyXG4gICAgICAgICAgICBmb3IgKHBuZHgrKzsgcG9zID4gcG5keDsgcG5keCsrKSB2b2lkIDAgPT09IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twbmR4XSAmJiAoKCFpc01hc2socG5keCkgfHwgYnVmZmVyW3BuZHhdICE9PSBnZXRQbGFjZWhvbGRlcihwbmR4KSkgJiYgZ2V0VGVzdHMocG5keCkubGVuZ3RoID4gMSB8fCBidWZmZXJbcG5keF0gPT09IG9wdHMucmFkaXhQb2ludCB8fCBcIjBcIiA9PT0gYnVmZmVyW3BuZHhdICYmICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIGJ1ZmZlcikgPCBwbmR4KSAmJiBfaXNWYWxpZChwbmR4LCBidWZmZXJbcG5keF0sICEwKTtcclxuICAgICAgICAgICAgdmFyIG1hc2tQb3MgPSBwb3MsIHJlc3VsdCA9ICExLCBwb3NpdGlvbnNDbG9uZSA9ICQuZXh0ZW5kKCEwLCB7fSwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zKTtcclxuICAgICAgICAgICAgaWYgKG1hc2tQb3MgPCBnZXRNYXNrTGVuZ3RoKCkgJiYgKHJlc3VsdCA9IF9pc1ZhbGlkKG1hc2tQb3MsIGMsIHN0cmljdCwgZnJvbVNldFZhbGlkKSxcclxuICAgICAgICAgICAgKCFzdHJpY3QgfHwgZnJvbVNldFZhbGlkKSAmJiByZXN1bHQgPT09ICExKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQb3NWYWxpZCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1ttYXNrUG9zXTtcclxuICAgICAgICAgICAgICAgIGlmICghY3VycmVudFBvc1ZhbGlkIHx8IG51bGwgIT09IGN1cnJlbnRQb3NWYWxpZC5tYXRjaC5mbiB8fCBjdXJyZW50UG9zVmFsaWQubWF0Y2guZGVmICE9PSBjICYmIGMgIT09IG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3Rlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgob3B0cy5pbnNlcnRNb2RlIHx8IHZvaWQgMCA9PT0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3NlZWtOZXh0KG1hc2tQb3MpXSkgJiYgIWlzTWFzayhtYXNrUG9zKSkgZm9yICh2YXIgblBvcyA9IG1hc2tQb3MgKyAxLCBzblBvcyA9IHNlZWtOZXh0KG1hc2tQb3MpIDsgc25Qb3MgPj0gblBvczsgblBvcysrKSBpZiAocmVzdWx0ID0gX2lzVmFsaWQoblBvcywgYywgc3RyaWN0LCBmcm9tU2V0VmFsaWQpLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCAhPT0gITEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHJhY2tiYWNrQWx0ZXJuYXRpb25zKG1hc2tQb3MsIG5Qb3MpLCBtYXNrUG9zID0gblBvcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHJlc3VsdCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjYXJldDogc2Vla05leHQobWFza1BvcylcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKHJlc3VsdCA9PT0gITEgJiYgb3B0cy5rZWVwU3RhdGljICYmIGlzQ29tcGxldGUoYnVmZmVyKSAmJiAocmVzdWx0ID0gYWx0ZXJuYXRlKHBvcywgYywgc3RyaWN0LCBmcm9tU2V0VmFsaWQpKSxcclxuICAgICAgICAgICAgcmVzdWx0ID09PSAhMCAmJiAocmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAgICAgcG9zOiBtYXNrUG9zXHJcbiAgICAgICAgICAgIH0pLCAkLmlzRnVuY3Rpb24ob3B0cy5wb3N0VmFsaWRhdGlvbikgJiYgcmVzdWx0ICE9PSAhMSAmJiAhc3RyaWN0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9zdFZhbGlkUmVzdWx0ID0gb3B0cy5wb3N0VmFsaWRhdGlvbihnZXRCdWZmZXIoITApLCBvcHRzKTtcclxuICAgICAgICAgICAgICAgIGlmIChwb3N0VmFsaWRSZXN1bHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocG9zdFZhbGlkUmVzdWx0LnJlZnJlc2hGcm9tQnVmZmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZWZyZXNoID0gcG9zdFZhbGlkUmVzdWx0LnJlZnJlc2hGcm9tQnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcihyZWZyZXNoID09PSAhMCA/IHJlZnJlc2ggOiByZWZyZXNoLnN0YXJ0LCByZWZyZXNoLmVuZCwgcG9zdFZhbGlkUmVzdWx0LmJ1ZmZlciksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCghMCksIHJlc3VsdCA9IHBvc3RWYWxpZFJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgcmVzZXRNYXNrU2V0KCEwKSwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zID0gJC5leHRlbmQoITAsIHt9LCBwb3NpdGlvbnNDbG9uZSksXHJcbiAgICAgICAgICAgICAgICByZXN1bHQgPSAhMTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBpc01hc2socG9zKSB7XHJcbiAgICAgICAgICAgIHZhciB0ZXN0ID0gZ2V0VGVzdChwb3MpO1xyXG4gICAgICAgICAgICBpZiAobnVsbCAhPSB0ZXN0LmZuKSByZXR1cm4gdGVzdC5mbjtcclxuICAgICAgICAgICAgaWYgKHBvcyA+IC0xICYmICFvcHRzLmtlZXBTdGF0aWMgJiYgdm9pZCAwID09PSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSkge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdGVzdHMgPSBnZXRUZXN0cyhwb3MpLCBzdGF0aWNBbHRlcm5hdGlvbnMgPSAhMCwgaSA9IDA7IGkgPCB0ZXN0cy5sZW5ndGg7IGkrKykgaWYgKFwiXCIgIT09IHRlc3RzW2ldLm1hdGNoLmRlZiAmJiAodm9pZCAwID09PSB0ZXN0c1tpXS5hbHRlcm5hdGlvbiB8fCB0ZXN0c1tpXS5sb2NhdG9yW3Rlc3RzW2ldLmFsdGVybmF0aW9uXS5sZW5ndGggPiAxKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0YXRpY0FsdGVybmF0aW9ucyA9ICExO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRpY0FsdGVybmF0aW9ucztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gITE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGdldE1hc2tMZW5ndGgoKSB7XHJcbiAgICAgICAgICAgIHZhciBtYXNrTGVuZ3RoO1xyXG4gICAgICAgICAgICBtYXhMZW5ndGggPSB2b2lkIDAgIT09IGVsID8gZWwubWF4TGVuZ3RoIDogdm9pZCAwLCAtMSA9PT0gbWF4TGVuZ3RoICYmIChtYXhMZW5ndGggPSB2b2lkIDApO1xyXG4gICAgICAgICAgICB2YXIgcG9zLCBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLCB0ZXN0UG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2x2cF0sIG5keEludGx6ciA9IHZvaWQgMCAhPT0gdGVzdFBvcyA/IHRlc3RQb3MubG9jYXRvci5zbGljZSgpIDogdm9pZCAwO1xyXG4gICAgICAgICAgICBmb3IgKHBvcyA9IGx2cCArIDE7IHZvaWQgMCA9PT0gdGVzdFBvcyB8fCBudWxsICE9PSB0ZXN0UG9zLm1hdGNoLmZuIHx8IG51bGwgPT09IHRlc3RQb3MubWF0Y2guZm4gJiYgXCJcIiAhPT0gdGVzdFBvcy5tYXRjaC5kZWY7IHBvcysrKSB0ZXN0UG9zID0gZ2V0VGVzdFRlbXBsYXRlKHBvcywgbmR4SW50bHpyLCBwb3MgLSAxKSxcclxuICAgICAgICAgICAgbmR4SW50bHpyID0gdGVzdFBvcy5sb2NhdG9yLnNsaWNlKCk7XHJcbiAgICAgICAgICAgIHZhciBsYXN0VGVzdCA9IGdldFRlc3QocG9zIC0gMSk7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXNrTGVuZ3RoID0gXCJcIiAhPT0gbGFzdFRlc3QuZGVmID8gcG9zIDogcG9zIC0gMSwgdm9pZCAwID09PSBtYXhMZW5ndGggfHwgbWF4TGVuZ3RoID4gbWFza0xlbmd0aCA/IG1hc2tMZW5ndGggOiBtYXhMZW5ndGg7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHNlZWtOZXh0KHBvcywgbmV3QmxvY2spIHtcclxuICAgICAgICAgICAgdmFyIG1hc2tMID0gZ2V0TWFza0xlbmd0aCgpO1xyXG4gICAgICAgICAgICBpZiAocG9zID49IG1hc2tMKSByZXR1cm4gbWFza0w7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHBvc2l0aW9uID0gcG9zOyArK3Bvc2l0aW9uIDwgbWFza0wgJiYgKG5ld0Jsb2NrID09PSAhMCAmJiAoZ2V0VGVzdChwb3NpdGlvbikubmV3QmxvY2tNYXJrZXIgIT09ICEwIHx8ICFpc01hc2socG9zaXRpb24pKSB8fCBuZXdCbG9jayAhPT0gITAgJiYgIWlzTWFzayhwb3NpdGlvbikgJiYgKG9wdHMubm9qdW1wcyAhPT0gITAgfHwgb3B0cy5ub2p1bXBzVGhyZXNob2xkID4gcG9zaXRpb24pKSA7KTtcclxuICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBzZWVrUHJldmlvdXMocG9zLCBuZXdCbG9jaykge1xyXG4gICAgICAgICAgICB2YXIgcG9zaXRpb24gPSBwb3M7XHJcbiAgICAgICAgICAgIGlmICgwID49IHBvc2l0aW9uKSByZXR1cm4gMDtcclxuICAgICAgICAgICAgZm9yICg7IC0tcG9zaXRpb24gPiAwICYmIChuZXdCbG9jayA9PT0gITAgJiYgZ2V0VGVzdChwb3NpdGlvbikubmV3QmxvY2tNYXJrZXIgIT09ICEwIHx8IG5ld0Jsb2NrICE9PSAhMCAmJiAhaXNNYXNrKHBvc2l0aW9uKSkgOyk7XHJcbiAgICAgICAgICAgIHJldHVybiBwb3NpdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0QnVmZmVyRWxlbWVudChwb3NpdGlvbikge1xyXG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwID09PSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zaXRpb25dID8gZ2V0UGxhY2Vob2xkZXIocG9zaXRpb24pIDogZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc2l0aW9uXS5pbnB1dDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gd3JpdGVCdWZmZXIoaW5wdXQsIGJ1ZmZlciwgY2FyZXRQb3MsIGV2ZW50LCB0cmlnZ2VySW5wdXRFdmVudCkge1xyXG4gICAgICAgICAgICBpZiAoZXZlbnQgJiYgJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVXcml0ZSkpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvcHRzLm9uQmVmb3JlV3JpdGUuY2FsbChpbnB1dCwgZXZlbnQsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQucmVmcmVzaEZyb21CdWZmZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZnJlc2ggPSByZXN1bHQucmVmcmVzaEZyb21CdWZmZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyKHJlZnJlc2ggPT09ICEwID8gcmVmcmVzaCA6IHJlZnJlc2guc3RhcnQsIHJlZnJlc2guZW5kLCByZXN1bHQuYnVmZmVyIHx8IGJ1ZmZlciksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlciA9IGdldEJ1ZmZlcighMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gY2FyZXRQb3MgJiYgKGNhcmV0UG9zID0gdm9pZCAwICE9PSByZXN1bHQuY2FyZXQgPyByZXN1bHQuY2FyZXQgOiBjYXJldFBvcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZVNldChidWZmZXIuam9pbihcIlwiKSksIHZvaWQgMCA9PT0gY2FyZXRQb3MgfHwgdm9pZCAwICE9PSBldmVudCAmJiBcImJsdXJcIiA9PT0gZXZlbnQudHlwZSB8fCBjYXJldChpbnB1dCwgY2FyZXRQb3MpLFxyXG4gICAgICAgICAgICB0cmlnZ2VySW5wdXRFdmVudCA9PT0gITAgJiYgKHNraXBJbnB1dEV2ZW50ID0gITAsICQoaW5wdXQpLnRyaWdnZXIoXCJpbnB1dFwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFBsYWNlaG9sZGVyKHBvcywgdGVzdCkge1xyXG4gICAgICAgICAgICBpZiAodGVzdCA9IHRlc3QgfHwgZ2V0VGVzdChwb3MpLCB2b2lkIDAgIT09IHRlc3QucGxhY2Vob2xkZXIpIHJldHVybiB0ZXN0LnBsYWNlaG9sZGVyO1xyXG4gICAgICAgICAgICBpZiAobnVsbCA9PT0gdGVzdC5mbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBvcyA+IC0xICYmICFvcHRzLmtlZXBTdGF0aWMgJiYgdm9pZCAwID09PSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHByZXZUZXN0LCB0ZXN0cyA9IGdldFRlc3RzKHBvcyksIGhhc0FsdGVybmF0aW9ucyA9ICExLCBpID0gMDsgaSA8IHRlc3RzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwcmV2VGVzdCAmJiBcIlwiICE9PSB0ZXN0c1tpXS5tYXRjaC5kZWYgJiYgdGVzdHNbaV0ubWF0Y2guZGVmICE9PSBwcmV2VGVzdC5tYXRjaC5kZWYgJiYgKHZvaWQgMCA9PT0gdGVzdHNbaV0uYWx0ZXJuYXRpb24gfHwgdGVzdHNbaV0uYWx0ZXJuYXRpb24gPT09IHByZXZUZXN0LmFsdGVybmF0aW9uKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaGFzQWx0ZXJuYXRpb25zID0gITA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0c1tpXS5tYXRjaC5vcHRpb25hbGl0eSAhPT0gITAgJiYgdGVzdHNbaV0ubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICE9PSAhMCAmJiAocHJldlRlc3QgPSB0ZXN0c1tpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoYXNBbHRlcm5hdGlvbnMpIHJldHVybiBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdChwb3MgJSBvcHRzLnBsYWNlaG9sZGVyLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGVzdC5kZWY7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KHBvcyAlIG9wdHMucGxhY2Vob2xkZXIubGVuZ3RoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gY2hlY2tWYWwoaW5wdXQsIHdyaXRlT3V0LCBzdHJpY3QsIG5wdHZsKSB7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGlzVGVtcGxhdGVNYXRjaCgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpc01hdGNoID0gITEsIGNoYXJDb2RlTmR4ID0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5zbGljZShpbml0aWFsTmR4LCBzZWVrTmV4dChpbml0aWFsTmR4KSkuam9pbihcIlwiKS5pbmRleE9mKGNoYXJDb2Rlcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoLTEgIT09IGNoYXJDb2RlTmR4ICYmICFpc01hc2soaW5pdGlhbE5keCkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpc01hdGNoID0gITA7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYnVmZmVyVGVtcGxhdGVBcnIgPSBnZXRCdWZmZXJUZW1wbGF0ZSgpLnNsaWNlKGluaXRpYWxOZHgsIGluaXRpYWxOZHggKyBjaGFyQ29kZU5keCksIGkgPSAwOyBpIDwgYnVmZmVyVGVtcGxhdGVBcnIubGVuZ3RoOyBpKyspIGlmIChcIiBcIiAhPT0gYnVmZmVyVGVtcGxhdGVBcnJbaV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNNYXRjaCA9ICExO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNNYXRjaDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgaW5wdXRWYWx1ZSA9IG5wdHZsLnNsaWNlKCksIGNoYXJDb2RlcyA9IFwiXCIsIGluaXRpYWxOZHggPSAwO1xyXG4gICAgICAgICAgICBpZiAocmVzZXRNYXNrU2V0KCksIGdldE1hc2tTZXQoKS5wID0gc2Vla05leHQoLTEpLCAhc3RyaWN0KSBpZiAob3B0cy5hdXRvVW5tYXNrICE9PSAhMCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YXRpY0lucHV0ID0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5zbGljZSgwLCBzZWVrTmV4dCgtMSkpLmpvaW4oXCJcIiksIG1hdGNoZXMgPSBpbnB1dFZhbHVlLmpvaW4oXCJcIikubWF0Y2gobmV3IFJlZ0V4cChcIl5cIiArIElucHV0bWFzay5lc2NhcGVSZWdleChzdGF0aWNJbnB1dCksIFwiZ1wiKSk7XHJcbiAgICAgICAgICAgICAgICBtYXRjaGVzICYmIG1hdGNoZXMubGVuZ3RoID4gMCAmJiAoaW5wdXRWYWx1ZS5zcGxpY2UoMCwgbWF0Y2hlcy5sZW5ndGggKiBzdGF0aWNJbnB1dC5sZW5ndGgpLFxyXG4gICAgICAgICAgICAgICAgaW5pdGlhbE5keCA9IHNlZWtOZXh0KGluaXRpYWxOZHgpKTtcclxuICAgICAgICAgICAgfSBlbHNlIGluaXRpYWxOZHggPSBzZWVrTmV4dChpbml0aWFsTmR4KTtcclxuICAgICAgICAgICAgJC5lYWNoKGlucHV0VmFsdWUsIGZ1bmN0aW9uIChuZHgsIGNoYXJDb2RlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5cHJlc3MgPSAkLkV2ZW50KFwia2V5cHJlc3NcIik7XHJcbiAgICAgICAgICAgICAgICBrZXlwcmVzcy53aGljaCA9IGNoYXJDb2RlLmNoYXJDb2RlQXQoMCksIGNoYXJDb2RlcyArPSBjaGFyQ29kZTtcclxuICAgICAgICAgICAgICAgIHZhciBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbih2b2lkIDAsICEwKSwgbHZUZXN0ID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2x2cF0sIG5leHRUZXN0ID0gZ2V0VGVzdFRlbXBsYXRlKGx2cCArIDEsIGx2VGVzdCA/IGx2VGVzdC5sb2NhdG9yLnNsaWNlKCkgOiB2b2lkIDAsIGx2cCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoIWlzVGVtcGxhdGVNYXRjaCgpIHx8IHN0cmljdCB8fCBvcHRzLmF1dG9Vbm1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcG9zID0gc3RyaWN0ID8gbmR4IDogbnVsbCA9PSBuZXh0VGVzdC5tYXRjaC5mbiAmJiBuZXh0VGVzdC5tYXRjaC5vcHRpb25hbGl0eSAmJiBsdnAgKyAxIDwgZ2V0TWFza1NldCgpLnAgPyBsdnAgKyAxIDogZ2V0TWFza1NldCgpLnA7XHJcbiAgICAgICAgICAgICAgICAgICAga2V5cHJlc3NFdmVudC5jYWxsKGlucHV0LCBrZXlwcmVzcywgITAsICExLCBzdHJpY3QsIHBvcyksIGluaXRpYWxOZHggPSBwb3MgKyAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGNoYXJDb2RlcyA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uga2V5cHJlc3NFdmVudC5jYWxsKGlucHV0LCBrZXlwcmVzcywgITAsICExLCAhMCwgbHZwICsgMSk7XHJcbiAgICAgICAgICAgIH0pLCB3cml0ZU91dCAmJiB3cml0ZUJ1ZmZlcihpbnB1dCwgZ2V0QnVmZmVyKCksIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGlucHV0ID8gc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oMCkpIDogdm9pZCAwLCAkLkV2ZW50KFwiY2hlY2t2YWxcIikpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiB1bm1hc2tlZHZhbHVlKGlucHV0KSB7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dCAmJiB2b2lkIDAgPT09IGlucHV0LmlucHV0bWFzaykgcmV0dXJuIGlucHV0LnZhbHVlO1xyXG4gICAgICAgICAgICB2YXIgdW1WYWx1ZSA9IFtdLCB2cHMgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnM7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHBuZHggaW4gdnBzKSB2cHNbcG5keF0ubWF0Y2ggJiYgbnVsbCAhPSB2cHNbcG5keF0ubWF0Y2guZm4gJiYgdW1WYWx1ZS5wdXNoKHZwc1twbmR4XS5pbnB1dCk7XHJcbiAgICAgICAgICAgIHZhciB1bm1hc2tlZFZhbHVlID0gMCA9PT0gdW1WYWx1ZS5sZW5ndGggPyBudWxsIDogKGlzUlRMID8gdW1WYWx1ZS5yZXZlcnNlKCkgOiB1bVZhbHVlKS5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICBpZiAobnVsbCAhPT0gdW5tYXNrZWRWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJ1ZmZlclZhbHVlID0gKGlzUlRMID8gZ2V0QnVmZmVyKCkuc2xpY2UoKS5yZXZlcnNlKCkgOiBnZXRCdWZmZXIoKSkuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgICAgICQuaXNGdW5jdGlvbihvcHRzLm9uVW5NYXNrKSAmJiAodW5tYXNrZWRWYWx1ZSA9IG9wdHMub25Vbk1hc2suY2FsbChpbnB1dCwgYnVmZmVyVmFsdWUsIHVubWFza2VkVmFsdWUsIG9wdHMpIHx8IHVubWFza2VkVmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiB1bm1hc2tlZFZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBjYXJldChpbnB1dCwgYmVnaW4sIGVuZCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiB0cmFuc2xhdGVQb3NpdGlvbihwb3MpIHtcclxuICAgICAgICAgICAgICAgIGlmIChpc1JUTCAmJiBcIm51bWJlclwiID09IHR5cGVvZiBwb3MgJiYgKCFvcHRzLmdyZWVkeSB8fCBcIlwiICE9PSBvcHRzLnBsYWNlaG9sZGVyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBiZmZyTGdodCA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgIHBvcyA9IGJmZnJMZ2h0IC0gcG9zO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHBvcztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgcmFuZ2U7XHJcbiAgICAgICAgICAgIGlmIChcIm51bWJlclwiICE9IHR5cGVvZiBiZWdpbikgcmV0dXJuIGlucHV0LnNldFNlbGVjdGlvblJhbmdlID8gKGJlZ2luID0gaW5wdXQuc2VsZWN0aW9uU3RhcnQsXHJcbiAgICAgICAgICAgIGVuZCA9IGlucHV0LnNlbGVjdGlvbkVuZCkgOiB3aW5kb3cuZ2V0U2VsZWN0aW9uID8gKHJhbmdlID0gd2luZG93LmdldFNlbGVjdGlvbigpLmdldFJhbmdlQXQoMCksXHJcbiAgICAgICAgICAgIChyYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lci5wYXJlbnROb2RlID09PSBpbnB1dCB8fCByYW5nZS5jb21tb25BbmNlc3RvckNvbnRhaW5lciA9PT0gaW5wdXQpICYmIChiZWdpbiA9IHJhbmdlLnN0YXJ0T2Zmc2V0LFxyXG4gICAgICAgICAgICBlbmQgPSByYW5nZS5lbmRPZmZzZXQpKSA6IGRvY3VtZW50LnNlbGVjdGlvbiAmJiBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UgJiYgKHJhbmdlID0gZG9jdW1lbnQuc2VsZWN0aW9uLmNyZWF0ZVJhbmdlKCksXHJcbiAgICAgICAgICAgIGJlZ2luID0gMCAtIHJhbmdlLmR1cGxpY2F0ZSgpLm1vdmVTdGFydChcImNoYXJhY3RlclwiLCAtMWU1KSwgZW5kID0gYmVnaW4gKyByYW5nZS50ZXh0Lmxlbmd0aCksXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGJlZ2luOiB0cmFuc2xhdGVQb3NpdGlvbihiZWdpbiksXHJcbiAgICAgICAgICAgICAgICBlbmQ6IHRyYW5zbGF0ZVBvc2l0aW9uKGVuZClcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgYmVnaW4gPSB0cmFuc2xhdGVQb3NpdGlvbihiZWdpbiksIGVuZCA9IHRyYW5zbGF0ZVBvc2l0aW9uKGVuZCksIGVuZCA9IFwibnVtYmVyXCIgPT0gdHlwZW9mIGVuZCA/IGVuZCA6IGJlZ2luO1xyXG4gICAgICAgICAgICB2YXIgc2Nyb2xsQ2FsYyA9IHBhcnNlSW50KCgoaW5wdXQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cpLmdldENvbXB1dGVkU3R5bGUgPyAoaW5wdXQub3duZXJEb2N1bWVudC5kZWZhdWx0VmlldyB8fCB3aW5kb3cpLmdldENvbXB1dGVkU3R5bGUoaW5wdXQsIG51bGwpIDogaW5wdXQuY3VycmVudFN0eWxlKS5mb250U2l6ZSkgKiBlbmQ7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dC5zY3JvbGxMZWZ0ID0gc2Nyb2xsQ2FsYyA+IGlucHV0LnNjcm9sbFdpZHRoID8gc2Nyb2xsQ2FsYyA6IDAsIGFuZHJvaWRjaHJvbWUgfHwgb3B0cy5pbnNlcnRNb2RlICE9PSAhMSB8fCBiZWdpbiAhPT0gZW5kIHx8IGVuZCsrLFxyXG4gICAgICAgICAgICBpbnB1dC5zZXRTZWxlY3Rpb25SYW5nZSkgaW5wdXQuc2VsZWN0aW9uU3RhcnQgPSBiZWdpbiwgaW5wdXQuc2VsZWN0aW9uRW5kID0gZW5kOyBlbHNlIGlmICh3aW5kb3cuZ2V0U2VsZWN0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2UgPSBkb2N1bWVudC5jcmVhdGVSYW5nZSgpLCB2b2lkIDAgPT09IGlucHV0LmZpcnN0Q2hpbGQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpbnB1dC5hcHBlbmRDaGlsZCh0ZXh0Tm9kZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByYW5nZS5zZXRTdGFydChpbnB1dC5maXJzdENoaWxkLCBiZWdpbiA8IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGggPyBiZWdpbiA6IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGgpLFxyXG4gICAgICAgICAgICAgICAgcmFuZ2Uuc2V0RW5kKGlucHV0LmZpcnN0Q2hpbGQsIGVuZCA8IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGggPyBlbmQgOiBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoKSxcclxuICAgICAgICAgICAgICAgIHJhbmdlLmNvbGxhcHNlKCEwKTtcclxuICAgICAgICAgICAgICAgIHZhciBzZWwgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBzZWwucmVtb3ZlQWxsUmFuZ2VzKCksIHNlbC5hZGRSYW5nZShyYW5nZSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpbnB1dC5jcmVhdGVUZXh0UmFuZ2UgJiYgKHJhbmdlID0gaW5wdXQuY3JlYXRlVGV4dFJhbmdlKCksIHJhbmdlLmNvbGxhcHNlKCEwKSxcclxuICAgICAgICAgICAgcmFuZ2UubW92ZUVuZChcImNoYXJhY3RlclwiLCBlbmQpLCByYW5nZS5tb3ZlU3RhcnQoXCJjaGFyYWN0ZXJcIiwgYmVnaW4pLCByYW5nZS5zZWxlY3QoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uKHJldHVybkRlZmluaXRpb24pIHtcclxuICAgICAgICAgICAgdmFyIHBvcywgdGVzdFBvcywgYnVmZmVyID0gZ2V0QnVmZmVyKCksIGJsID0gYnVmZmVyLmxlbmd0aCwgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSwgcG9zaXRpb25zID0ge30sIGx2VGVzdCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsdnBdLCBuZHhJbnRsenIgPSB2b2lkIDAgIT09IGx2VGVzdCA/IGx2VGVzdC5sb2NhdG9yLnNsaWNlKCkgOiB2b2lkIDA7XHJcbiAgICAgICAgICAgIGZvciAocG9zID0gbHZwICsgMTsgcG9zIDwgYnVmZmVyLmxlbmd0aDsgcG9zKyspIHRlc3RQb3MgPSBnZXRUZXN0VGVtcGxhdGUocG9zLCBuZHhJbnRsenIsIHBvcyAtIDEpLFxyXG4gICAgICAgICAgICBuZHhJbnRsenIgPSB0ZXN0UG9zLmxvY2F0b3Iuc2xpY2UoKSwgcG9zaXRpb25zW3Bvc10gPSAkLmV4dGVuZCghMCwge30sIHRlc3RQb3MpO1xyXG4gICAgICAgICAgICB2YXIgbHZUZXN0QWx0ID0gbHZUZXN0ICYmIHZvaWQgMCAhPT0gbHZUZXN0LmFsdGVybmF0aW9uID8gbHZUZXN0LmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXSA6IHZvaWQgMDtcclxuICAgICAgICAgICAgZm9yIChwb3MgPSBibCAtIDE7IHBvcyA+IGx2cCAmJiAodGVzdFBvcyA9IHBvc2l0aW9uc1twb3NdLCAodGVzdFBvcy5tYXRjaC5vcHRpb25hbGl0eSB8fCB0ZXN0UG9zLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciB8fCBsdlRlc3RBbHQgJiYgKGx2VGVzdEFsdCAhPT0gcG9zaXRpb25zW3Bvc10ubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dICYmIG51bGwgIT0gdGVzdFBvcy5tYXRjaC5mbiB8fCBudWxsID09PSB0ZXN0UG9zLm1hdGNoLmZuICYmIHRlc3RQb3MubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dICYmIGNoZWNrQWx0ZXJuYXRpb25NYXRjaCh0ZXN0UG9zLmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXS50b1N0cmluZygpLnNwbGl0KFwiLFwiKSwgbHZUZXN0QWx0LnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpKSAmJiBcIlwiICE9PSBnZXRUZXN0cyhwb3MpWzBdLmRlZikpICYmIGJ1ZmZlcltwb3NdID09PSBnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3RQb3MubWF0Y2gpKSA7IHBvcy0tKSBibC0tO1xyXG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuRGVmaW5pdGlvbiA/IHtcclxuICAgICAgICAgICAgICAgIGw6IGJsLFxyXG4gICAgICAgICAgICAgICAgZGVmOiBwb3NpdGlvbnNbYmxdID8gcG9zaXRpb25zW2JsXS5tYXRjaCA6IHZvaWQgMFxyXG4gICAgICAgICAgICB9IDogYmw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGNsZWFyT3B0aW9uYWxUYWlsKGJ1ZmZlcikge1xyXG4gICAgICAgICAgICBmb3IgKHZhciBybCA9IGRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uKCksIGxtaWIgPSBidWZmZXIubGVuZ3RoIC0gMTsgbG1pYiA+IHJsICYmICFpc01hc2sobG1pYikgOyBsbWliLS0pO1xyXG4gICAgICAgICAgICByZXR1cm4gYnVmZmVyLnNwbGljZShybCwgbG1pYiArIDEgLSBybCksIGJ1ZmZlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gaXNDb21wbGV0ZShidWZmZXIpIHtcclxuICAgICAgICAgICAgaWYgKCQuaXNGdW5jdGlvbihvcHRzLmlzQ29tcGxldGUpKSByZXR1cm4gb3B0cy5pc0NvbXBsZXRlLmNhbGwoZWwsIGJ1ZmZlciwgb3B0cyk7XHJcbiAgICAgICAgICAgIGlmIChcIipcIiA9PT0gb3B0cy5yZXBlYXQpIHJldHVybiB2b2lkIDA7XHJcbiAgICAgICAgICAgIHZhciBjb21wbGV0ZSA9ICExLCBscnAgPSBkZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbighMCksIGFtbCA9IHNlZWtQcmV2aW91cyhscnAubCk7XHJcbiAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IGxycC5kZWYgfHwgbHJwLmRlZi5uZXdCbG9ja01hcmtlciB8fCBscnAuZGVmLm9wdGlvbmFsaXR5IHx8IGxycC5kZWYub3B0aW9uYWxRdWFudGlmaWVyKSB7XHJcbiAgICAgICAgICAgICAgICBjb21wbGV0ZSA9ICEwO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGFtbCA+PSBpOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdCA9IGdldFRlc3RUZW1wbGF0ZShpKS5tYXRjaDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobnVsbCAhPT0gdGVzdC5mbiAmJiB2b2lkIDAgPT09IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXSAmJiB0ZXN0Lm9wdGlvbmFsaXR5ICE9PSAhMCAmJiB0ZXN0Lm9wdGlvbmFsUXVhbnRpZmllciAhPT0gITAgfHwgbnVsbCA9PT0gdGVzdC5mbiAmJiBidWZmZXJbaV0gIT09IGdldFBsYWNlaG9sZGVyKGksIHRlc3QpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBsZXRlID0gITE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gY29tcGxldGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGlzU2VsZWN0aW9uKGJlZ2luLCBlbmQpIHtcclxuICAgICAgICAgICAgcmV0dXJuIGlzUlRMID8gYmVnaW4gLSBlbmQgPiAxIHx8IGJlZ2luIC0gZW5kID09PSAxICYmIG9wdHMuaW5zZXJ0TW9kZSA6IGVuZCAtIGJlZ2luID4gMSB8fCBlbmQgLSBiZWdpbiA9PT0gMSAmJiBvcHRzLmluc2VydE1vZGU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHdyYXBFdmVudFJ1bGVyKGV2ZW50SGFuZGxlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbkNvbXBvc2l0aW9uID0gITEsIGtleWRvd25QcmVzc2VkID0gITE7XHJcbiAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSB0aGlzLmlucHV0bWFzaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbU9wdHMgPSAkLmRhdGEodGhpcywgXCJfaW5wdXRtYXNrX29wdHNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaW1PcHRzID8gbmV3IElucHV0bWFzayhpbU9wdHMpLm1hc2sodGhpcykgOiAkKHRoaXMpLm9mZihcIi5pbnB1dG1hc2tcIik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChcInNldHZhbHVlXCIgPT09IGUudHlwZSB8fCAhKHRoaXMuZGlzYWJsZWQgfHwgdGhpcy5yZWFkT25seSAmJiAhKFwia2V5ZG93blwiID09PSBlLnR5cGUgJiYgZS5jdHJsS2V5ICYmIDY3ID09PSBlLmtleUNvZGUgfHwgb3B0cy50YWJUaHJvdWdoID09PSAhMSAmJiBlLmtleUNvZGUgPT09IElucHV0bWFzay5rZXlDb2RlLlRBQikpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoZS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiaW5wdXRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2tpcElucHV0RXZlbnQgPT09ICEwIHx8IGluQ29tcG9zaXRpb24gPT09ICEwKSByZXR1cm4gc2tpcElucHV0RXZlbnQgPSAhMSwgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleWRvd25QcmVzc2VkID0gITE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImtleWRvd25cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwS2V5UHJlc3NFdmVudCA9ICExLCBpbkNvbXBvc2l0aW9uID0gITEsIGtleWRvd25QcmVzc2VkID0gITA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImtleXByZXNzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNraXBLZXlQcmVzc0V2ZW50ID09PSAhMCkgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwS2V5UHJlc3NFdmVudCA9ICEwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjb21wb3NpdGlvbnN0YXJ0XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5Db21wb3NpdGlvbiA9ICEwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBJbnB1dEV2ZW50ID0ga2V5ZG93blByZXNzZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5Db21wb3NpdGlvbiA9ICExLCBrZXlkb3duUHJlc3NlZCA9ICExO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJjdXRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBza2lwSW5wdXRFdmVudCA9ICEwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBldmVudEhhbmRsZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBwYXRjaFZhbHVlUHJvcGVydHkobnB0KSB7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHBhdGNoVmFsaG9vayh0eXBlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJC52YWxIb29rcyAmJiAodm9pZCAwID09PSAkLnZhbEhvb2tzW3R5cGVdIHx8ICQudmFsSG9va3NbdHlwZV0uaW5wdXRtYXNrcGF0Y2ggIT09ICEwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWxob29rR2V0ID0gJC52YWxIb29rc1t0eXBlXSAmJiAkLnZhbEhvb2tzW3R5cGVdLmdldCA/ICQudmFsSG9va3NbdHlwZV0uZ2V0IDogZnVuY3Rpb24gKGVsZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsZW0udmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgdmFsaG9va1NldCA9ICQudmFsSG9va3NbdHlwZV0gJiYgJC52YWxIb29rc1t0eXBlXS5zZXQgPyAkLnZhbEhvb2tzW3R5cGVdLnNldCA6IGZ1bmN0aW9uIChlbGVtLCB2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbS52YWx1ZSA9IHZhbHVlLCBlbGVtO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgJC52YWxIb29rc1t0eXBlXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0OiBmdW5jdGlvbiAoZWxlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0uaW5wdXRtYXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGVsZW0uaW5wdXRtYXNrLm9wdHMuYXV0b1VubWFzaykgcmV0dXJuIGVsZW0uaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0ID0gdmFsaG9va0dldChlbGVtKSwgbWFza3NldCA9IGVsZW0uaW5wdXRtYXNrLm1hc2tzZXQsIGJ1ZmZlclRlbXBsYXRlID0gbWFza3NldC5fYnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBidWZmZXJUZW1wbGF0ZSA9IGJ1ZmZlclRlbXBsYXRlID8gYnVmZmVyVGVtcGxhdGUuam9pbihcIlwiKSA6IFwiXCIsIHJlc3VsdCAhPT0gYnVmZmVyVGVtcGxhdGUgPyByZXN1bHQgOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZhbGhvb2tHZXQoZWxlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldDogZnVuY3Rpb24gKGVsZW0sIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVzdWx0LCAkZWxlbSA9ICQoZWxlbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0ID0gdmFsaG9va1NldChlbGVtLCB2YWx1ZSksIGVsZW0uaW5wdXRtYXNrICYmICRlbGVtLnRyaWdnZXIoXCJzZXR2YWx1ZS5pbnB1dG1hc2tcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlucHV0bWFza3BhdGNoOiAhMFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0dGVyKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRtYXNrID8gdGhpcy5pbnB1dG1hc2sub3B0cy5hdXRvVW5tYXNrID8gdGhpcy5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpIDogdmFsdWVHZXQuY2FsbCh0aGlzKSAhPT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpID8gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gdGhpcyAmJiBvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzID8gKGlzUlRMID8gY2xlYXJPcHRpb25hbFRhaWwoZ2V0QnVmZmVyKCkpLnJldmVyc2UoKSA6IGNsZWFyT3B0aW9uYWxUYWlsKGdldEJ1ZmZlcigpKSkuam9pbihcIlwiKSA6IHZhbHVlR2V0LmNhbGwodGhpcykgOiBcIlwiIDogdmFsdWVHZXQuY2FsbCh0aGlzKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBzZXR0ZXIodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlU2V0LmNhbGwodGhpcywgdmFsdWUpLCB0aGlzLmlucHV0bWFzayAmJiAkKHRoaXMpLnRyaWdnZXIoXCJzZXR2YWx1ZS5pbnB1dG1hc2tcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gaW5zdGFsbE5hdGl2ZVZhbHVlU2V0RmFsbGJhY2sobnB0KSB7XHJcbiAgICAgICAgICAgICAgICAkKG5wdCkub24oXCJtb3VzZWVudGVyLmlucHV0bWFza1wiLCB3cmFwRXZlbnRSdWxlcihmdW5jdGlvbiAoZXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gJCh0aGlzKSwgaW5wdXQgPSB0aGlzLCB2YWx1ZSA9IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKTtcclxuICAgICAgICAgICAgICAgICAgICBcIlwiICE9PSB2YWx1ZSAmJiB2YWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSAmJiAkaW5wdXQudHJpZ2dlcihcInNldHZhbHVlLmlucHV0bWFza1wiKTtcclxuICAgICAgICAgICAgICAgIH0pKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgdmFsdWVHZXQsIHZhbHVlU2V0O1xyXG4gICAgICAgICAgICBucHQuaW5wdXRtYXNrLl9fdmFsdWVHZXQgfHwgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgdm9pZCAwID09PSBucHQudmFsdWUgPyAodmFsdWVHZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy50ZXh0Q29udGVudDtcclxuICAgICAgICAgICAgfSwgdmFsdWVTZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMudGV4dENvbnRlbnQgPSB2YWx1ZTtcclxuICAgICAgICAgICAgfSwgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5wdCwgXCJ2YWx1ZVwiLCB7XHJcbiAgICAgICAgICAgICAgICBnZXQ6IGdldHRlcixcclxuICAgICAgICAgICAgICAgIHNldDogc2V0dGVyXHJcbiAgICAgICAgICAgIH0pKSA6IGRvY3VtZW50Ll9fbG9va3VwR2V0dGVyX18gJiYgbnB0Ll9fbG9va3VwR2V0dGVyX18oXCJ2YWx1ZVwiKSA/ICh2YWx1ZUdldCA9IG5wdC5fX2xvb2t1cEdldHRlcl9fKFwidmFsdWVcIiksXHJcbiAgICAgICAgICAgIHZhbHVlU2V0ID0gbnB0Ll9fbG9va3VwU2V0dGVyX18oXCJ2YWx1ZVwiKSwgbnB0Ll9fZGVmaW5lR2V0dGVyX18oXCJ2YWx1ZVwiLCBnZXR0ZXIpLFxyXG4gICAgICAgICAgICBucHQuX19kZWZpbmVTZXR0ZXJfXyhcInZhbHVlXCIsIHNldHRlcikpIDogKHZhbHVlR2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5wdC52YWx1ZTtcclxuICAgICAgICAgICAgfSwgdmFsdWVTZXQgPSBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgICAgIG5wdC52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9LCBwYXRjaFZhbGhvb2sobnB0LnR5cGUpLCBpbnN0YWxsTmF0aXZlVmFsdWVTZXRGYWxsYmFjayhucHQpKSwgbnB0LmlucHV0bWFzay5fX3ZhbHVlR2V0ID0gdmFsdWVHZXQsXHJcbiAgICAgICAgICAgIG5wdC5pbnB1dG1hc2suX3ZhbHVlR2V0ID0gZnVuY3Rpb24gKG92ZXJydWxlUlRMKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaXNSVEwgJiYgb3ZlcnJ1bGVSVEwgIT09ICEwID8gdmFsdWVHZXQuY2FsbCh0aGlzLmVsKS5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IHZhbHVlR2V0LmNhbGwodGhpcy5lbCk7XHJcbiAgICAgICAgICAgIH0sIG5wdC5pbnB1dG1hc2suX192YWx1ZVNldCA9IHZhbHVlU2V0LCBucHQuaW5wdXRtYXNrLl92YWx1ZVNldCA9IGZ1bmN0aW9uICh2YWx1ZSwgb3ZlcnJ1bGVSVEwpIHtcclxuICAgICAgICAgICAgICAgIHZhbHVlU2V0LmNhbGwodGhpcy5lbCwgbnVsbCA9PT0gdmFsdWUgfHwgdm9pZCAwID09PSB2YWx1ZSA/IFwiXCIgOiBvdmVycnVsZVJUTCAhPT0gITAgJiYgaXNSVEwgPyB2YWx1ZS5zcGxpdChcIlwiKS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IHZhbHVlKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGhhbmRsZVJlbW92ZShpbnB1dCwgaywgcG9zLCBzdHJpY3QpIHtcclxuICAgICAgICAgICAgZnVuY3Rpb24gZ2VuZXJhbGl6ZSgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRzLmtlZXBTdGF0aWMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoITApO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXN0QWx0LCB2YWxpZElucHV0cyA9IFtdLCBwb3NpdGlvbnNDbG9uZSA9ICQuZXh0ZW5kKCEwLCB7fSwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKGxhc3RBbHQgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpIDsgbGFzdEFsdCA+PSAwOyBsYXN0QWx0LS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZhbGlkUG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2xhc3RBbHRdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRQb3MgJiYgKG51bGwgIT0gdmFsaWRQb3MubWF0Y2guZm4gJiYgdmFsaWRJbnB1dHMucHVzaCh2YWxpZFBvcy5pbnB1dCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbGFzdEFsdF0sIHZvaWQgMCAhPT0gdmFsaWRQb3MuYWx0ZXJuYXRpb24gJiYgdmFsaWRQb3MubG9jYXRvclt2YWxpZFBvcy5hbHRlcm5hdGlvbl0gPT09IGdldFRlc3RUZW1wbGF0ZShsYXN0QWx0KS5sb2NhdG9yW3ZhbGlkUG9zLmFsdGVybmF0aW9uXSkpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAobGFzdEFsdCA+IC0xKSBmb3IgKDsgdmFsaWRJbnB1dHMubGVuZ3RoID4gMDspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnAgPSBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGtleXByZXNzID0gJC5FdmVudChcImtleXByZXNzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlwcmVzcy53aGljaCA9IHZhbGlkSW5wdXRzLnBvcCgpLmNoYXJDb2RlQXQoMCksIGtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MsICEwLCAhMSwgITEsIGdldE1hc2tTZXQoKS5wKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zID0gJC5leHRlbmQoITAsIHt9LCBwb3NpdGlvbnNDbG9uZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKChvcHRzLm51bWVyaWNJbnB1dCB8fCBpc1JUTCkgJiYgKGsgPT09IElucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRSA/IGsgPSBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUgOiBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUgJiYgKGsgPSBJbnB1dG1hc2sua2V5Q29kZS5CQUNLU1BBQ0UpLFxyXG4gICAgICAgICAgICBpc1JUTCkpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwZW5kID0gcG9zLmVuZDtcclxuICAgICAgICAgICAgICAgIHBvcy5lbmQgPSBwb3MuYmVnaW4sIHBvcy5iZWdpbiA9IHBlbmQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFICYmIChwb3MuZW5kIC0gcG9zLmJlZ2luIDwgMSB8fCBvcHRzLmluc2VydE1vZGUgPT09ICExKSA/IChwb3MuYmVnaW4gPSBzZWVrUHJldmlvdXMocG9zLmJlZ2luKSxcclxuICAgICAgICAgICAgdm9pZCAwID09PSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zLmJlZ2luXSB8fCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zLmJlZ2luXS5pbnB1dCAhPT0gb3B0cy5ncm91cFNlcGFyYXRvciAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zLmJlZ2luXS5pbnB1dCAhPT0gb3B0cy5yYWRpeFBvaW50IHx8IHBvcy5iZWdpbi0tKSA6IGsgPT09IElucHV0bWFzay5rZXlDb2RlLkRFTEVURSAmJiBwb3MuYmVnaW4gPT09IHBvcy5lbmQgJiYgKHBvcy5lbmQgPSBpc01hc2socG9zLmVuZCkgPyBwb3MuZW5kICsgMSA6IHNlZWtOZXh0KHBvcy5lbmQpICsgMSxcclxuICAgICAgICAgICAgdm9pZCAwID09PSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zLmJlZ2luXSB8fCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zLmJlZ2luXS5pbnB1dCAhPT0gb3B0cy5ncm91cFNlcGFyYXRvciAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zLmJlZ2luXS5pbnB1dCAhPT0gb3B0cy5yYWRpeFBvaW50IHx8IHBvcy5lbmQrKyksXHJcbiAgICAgICAgICAgIHN0cmlwVmFsaWRQb3NpdGlvbnMocG9zLmJlZ2luLCBwb3MuZW5kLCAhMSwgc3RyaWN0KSwgc3RyaWN0ICE9PSAhMCAmJiBnZW5lcmFsaXplKCk7XHJcbiAgICAgICAgICAgIHZhciBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbihwb3MuYmVnaW4pO1xyXG4gICAgICAgICAgICBsdnAgPCBwb3MuYmVnaW4gPyAoLTEgPT09IGx2cCAmJiByZXNldE1hc2tTZXQoKSwgZ2V0TWFza1NldCgpLnAgPSBzZWVrTmV4dChsdnApKSA6IHN0cmljdCAhPT0gITAgJiYgKGdldE1hc2tTZXQoKS5wID0gcG9zLmJlZ2luKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24ga2V5ZG93bkV2ZW50KGUpIHtcclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgJGlucHV0ID0gJChpbnB1dCksIGsgPSBlLmtleUNvZGUsIHBvcyA9IGNhcmV0KGlucHV0KTtcclxuICAgICAgICAgICAgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFIHx8IGsgPT09IElucHV0bWFzay5rZXlDb2RlLkRFTEVURSB8fCBpcGhvbmUgJiYgMTI3ID09PSBrIHx8IGUuY3RybEtleSAmJiA4OCA9PT0gayAmJiAhaXNJbnB1dEV2ZW50U3VwcG9ydGVkKFwiY3V0XCIpID8gKGUucHJldmVudERlZmF1bHQoKSxcclxuICAgICAgICAgICAgODggPT09IGsgJiYgKHVuZG9WYWx1ZSA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikpLCBoYW5kbGVSZW1vdmUoaW5wdXQsIGssIHBvcyksIHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSwgZ2V0TWFza1NldCgpLnAsIGUsIHVuZG9WYWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSksXHJcbiAgICAgICAgICAgIGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpID8gJGlucHV0LnRyaWdnZXIoXCJjbGVhcmVkXCIpIDogaXNDb21wbGV0ZShnZXRCdWZmZXIoKSkgPT09ICEwICYmICRpbnB1dC50cmlnZ2VyKFwiY29tcGxldGVcIiksXHJcbiAgICAgICAgICAgIG9wdHMuc2hvd1Rvb2x0aXAgJiYgKGlucHV0LnRpdGxlID0gb3B0cy50b29sdGlwIHx8IGdldE1hc2tTZXQoKS5tYXNrKSkgOiBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5FTkQgfHwgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuUEFHRV9ET1dOID8gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY2FyZXRQb3MgPSBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKTtcclxuICAgICAgICAgICAgICAgIG9wdHMuaW5zZXJ0TW9kZSB8fCBjYXJldFBvcyAhPT0gZ2V0TWFza0xlbmd0aCgpIHx8IGUuc2hpZnRLZXkgfHwgY2FyZXRQb3MtLSwgY2FyZXQoaW5wdXQsIGUuc2hpZnRLZXkgPyBwb3MuYmVnaW4gOiBjYXJldFBvcywgY2FyZXRQb3MpO1xyXG4gICAgICAgICAgICB9LCAwKSA6IGsgPT09IElucHV0bWFzay5rZXlDb2RlLkhPTUUgJiYgIWUuc2hpZnRLZXkgfHwgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuUEFHRV9VUCA/IGNhcmV0KGlucHV0LCAwLCBlLnNoaWZ0S2V5ID8gcG9zLmJlZ2luIDogMCkgOiAob3B0cy51bmRvT25Fc2NhcGUgJiYgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuRVNDQVBFIHx8IDkwID09PSBrICYmIGUuY3RybEtleSkgJiYgZS5hbHRLZXkgIT09ICEwID8gKGNoZWNrVmFsKGlucHV0LCAhMCwgITEsIHVuZG9WYWx1ZS5zcGxpdChcIlwiKSksXHJcbiAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwiY2xpY2tcIikpIDogayAhPT0gSW5wdXRtYXNrLmtleUNvZGUuSU5TRVJUIHx8IGUuc2hpZnRLZXkgfHwgZS5jdHJsS2V5ID8gb3B0cy50YWJUaHJvdWdoID09PSAhMCAmJiBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5UQUIgPyAoZS5zaGlmdEtleSA9PT0gITAgPyAobnVsbCA9PT0gZ2V0VGVzdChwb3MuYmVnaW4pLmZuICYmIChwb3MuYmVnaW4gPSBzZWVrTmV4dChwb3MuYmVnaW4pKSxcclxuICAgICAgICAgICAgcG9zLmVuZCA9IHNlZWtQcmV2aW91cyhwb3MuYmVnaW4sICEwKSwgcG9zLmJlZ2luID0gc2Vla1ByZXZpb3VzKHBvcy5lbmQsICEwKSkgOiAocG9zLmJlZ2luID0gc2Vla05leHQocG9zLmJlZ2luLCAhMCksXHJcbiAgICAgICAgICAgIHBvcy5lbmQgPSBzZWVrTmV4dChwb3MuYmVnaW4sICEwKSwgcG9zLmVuZCA8IGdldE1hc2tMZW5ndGgoKSAmJiBwb3MuZW5kLS0pLCBwb3MuYmVnaW4gPCBnZXRNYXNrTGVuZ3RoKCkgJiYgKGUucHJldmVudERlZmF1bHQoKSxcclxuICAgICAgICAgICAgY2FyZXQoaW5wdXQsIHBvcy5iZWdpbiwgcG9zLmVuZCkpKSA6IG9wdHMuaW5zZXJ0TW9kZSAhPT0gITEgfHwgZS5zaGlmdEtleSB8fCAoayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuUklHSFQgPyBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjYXJldFBvcyA9IGNhcmV0KGlucHV0KTtcclxuICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBjYXJldFBvcy5iZWdpbik7XHJcbiAgICAgICAgICAgIH0sIDApIDogayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuTEVGVCAmJiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjYXJldFBvcyA9IGNhcmV0KGlucHV0KTtcclxuICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBpc1JUTCA/IGNhcmV0UG9zLmJlZ2luICsgMSA6IGNhcmV0UG9zLmJlZ2luIC0gMSk7XHJcbiAgICAgICAgICAgIH0sIDApKSA6IChvcHRzLmluc2VydE1vZGUgPSAhb3B0cy5pbnNlcnRNb2RlLCBjYXJldChpbnB1dCwgb3B0cy5pbnNlcnRNb2RlIHx8IHBvcy5iZWdpbiAhPT0gZ2V0TWFza0xlbmd0aCgpID8gcG9zLmJlZ2luIDogcG9zLmJlZ2luIC0gMSkpLFxyXG4gICAgICAgICAgICBvcHRzLm9uS2V5RG93bihlLCBnZXRCdWZmZXIoKSwgY2FyZXQoaW5wdXQpLmJlZ2luLCBvcHRzKSwgaWdub3JhYmxlID0gLTEgIT09ICQuaW5BcnJheShrLCBvcHRzLmlnbm9yYWJsZXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBrZXlwcmVzc0V2ZW50KGUsIGNoZWNrdmFsLCB3cml0ZU91dCwgc3RyaWN0LCBuZHgpIHtcclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgJGlucHV0ID0gJChpbnB1dCksIGsgPSBlLndoaWNoIHx8IGUuY2hhckNvZGUgfHwgZS5rZXlDb2RlO1xyXG4gICAgICAgICAgICBpZiAoIShjaGVja3ZhbCA9PT0gITAgfHwgZS5jdHJsS2V5ICYmIGUuYWx0S2V5KSAmJiAoZS5jdHJsS2V5IHx8IGUubWV0YUtleSB8fCBpZ25vcmFibGUpKSByZXR1cm4gayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuRU5URVIgJiYgdW5kb1ZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpICYmICh1bmRvVmFsdWUgPSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpLFxyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCksIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJjaGFuZ2VcIik7XHJcbiAgICAgICAgICAgIH0sIDApKSwgITA7XHJcbiAgICAgICAgICAgIGlmIChrKSB7XHJcbiAgICAgICAgICAgICAgICA0NiA9PT0gayAmJiBlLnNoaWZ0S2V5ID09PSAhMSAmJiBcIixcIiA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIChrID0gNDQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGZvcndhcmRQb3NpdGlvbiwgcG9zID0gY2hlY2t2YWwgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgYmVnaW46IG5keCxcclxuICAgICAgICAgICAgICAgICAgICBlbmQ6IG5keFxyXG4gICAgICAgICAgICAgICAgfSA6IGNhcmV0KGlucHV0KSwgYyA9IFN0cmluZy5mcm9tQ2hhckNvZGUoayksIGlzU2xjdG4gPSBpc1NlbGVjdGlvbihwb3MuYmVnaW4sIHBvcy5lbmQpO1xyXG4gICAgICAgICAgICAgICAgaXNTbGN0biAmJiAoZ2V0TWFza1NldCgpLnVuZG9Qb3NpdGlvbnMgPSAkLmV4dGVuZCghMCwge30sIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyksXHJcbiAgICAgICAgICAgICAgICBoYW5kbGVSZW1vdmUoaW5wdXQsIElucHV0bWFzay5rZXlDb2RlLkRFTEVURSwgcG9zLCAhMCksIHBvcy5iZWdpbiA9IGdldE1hc2tTZXQoKS5wLFxyXG4gICAgICAgICAgICAgICAgb3B0cy5pbnNlcnRNb2RlIHx8IChvcHRzLmluc2VydE1vZGUgPSAhb3B0cy5pbnNlcnRNb2RlLCBzZXRWYWxpZFBvc2l0aW9uKHBvcy5iZWdpbiwgc3RyaWN0KSxcclxuICAgICAgICAgICAgICAgIG9wdHMuaW5zZXJ0TW9kZSA9ICFvcHRzLmluc2VydE1vZGUpLCBpc1NsY3RuID0gIW9wdHMubXVsdGkpLCBnZXRNYXNrU2V0KCkud3JpdGVPdXRCdWZmZXIgPSAhMDtcclxuICAgICAgICAgICAgICAgIHZhciBwID0gaXNSVEwgJiYgIWlzU2xjdG4gPyBwb3MuZW5kIDogcG9zLmJlZ2luLCB2YWxSZXN1bHQgPSBpc1ZhbGlkKHAsIGMsIHN0cmljdCk7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsUmVzdWx0ICE9PSAhMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxSZXN1bHQgIT09ICEwICYmIChwID0gdm9pZCAwICE9PSB2YWxSZXN1bHQucG9zID8gdmFsUmVzdWx0LnBvcyA6IHAsIGMgPSB2b2lkIDAgIT09IHZhbFJlc3VsdC5jID8gdmFsUmVzdWx0LmMgOiBjKSxcclxuICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoITApLCB2b2lkIDAgIT09IHZhbFJlc3VsdC5jYXJldCkgZm9yd2FyZFBvc2l0aW9uID0gdmFsUmVzdWx0LmNhcmV0OyBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZwcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yd2FyZFBvc2l0aW9uID0gIW9wdHMua2VlcFN0YXRpYyAmJiAodm9pZCAwICE9PSB2cHNbcCArIDFdICYmIGdldFRlc3RzKHAgKyAxLCB2cHNbcF0ubG9jYXRvci5zbGljZSgpLCBwKS5sZW5ndGggPiAxIHx8IHZvaWQgMCAhPT0gdnBzW3BdLmFsdGVybmF0aW9uKSA/IHAgKyAxIDogc2Vla05leHQocCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGdldE1hc2tTZXQoKS5wID0gZm9yd2FyZFBvc2l0aW9uO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKHdyaXRlT3V0ICE9PSAhMSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdHMub25LZXlWYWxpZGF0aW9uLmNhbGwoc2VsZiwgdmFsUmVzdWx0LCBvcHRzKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCAwKSwgZ2V0TWFza1NldCgpLndyaXRlT3V0QnVmZmVyICYmIHZhbFJlc3VsdCAhPT0gITEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGdldEJ1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihpbnB1dCwgYnVmZmVyLCBjaGVja3ZhbCA/IHZvaWQgMCA6IG9wdHMubnVtZXJpY0lucHV0ID8gc2Vla1ByZXZpb3VzKGZvcndhcmRQb3NpdGlvbikgOiBmb3J3YXJkUG9zaXRpb24sIGUsIGNoZWNrdmFsICE9PSAhMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNoZWNrdmFsICE9PSAhMCAmJiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzQ29tcGxldGUoYnVmZmVyKSA9PT0gITAgJiYgJGlucHV0LnRyaWdnZXIoXCJjb21wbGV0ZVwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlzU2xjdG4gJiYgKGdldE1hc2tTZXQoKS5idWZmZXIgPSB2b2lkIDAsIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyA9IGdldE1hc2tTZXQoKS51bmRvUG9zaXRpb25zKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBpc1NsY3RuICYmIChnZXRNYXNrU2V0KCkuYnVmZmVyID0gdm9pZCAwLCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMgPSBnZXRNYXNrU2V0KCkudW5kb1Bvc2l0aW9ucyk7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5zaG93VG9vbHRpcCAmJiAoaW5wdXQudGl0bGUgPSBvcHRzLnRvb2x0aXAgfHwgZ2V0TWFza1NldCgpLm1hc2spLCBjaGVja3ZhbCAmJiAkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZVdyaXRlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSBvcHRzLm9uQmVmb3JlV3JpdGUoZSwgZ2V0QnVmZmVyKCksIGZvcndhcmRQb3NpdGlvbiwgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdCAmJiByZXN1bHQucmVmcmVzaEZyb21CdWZmZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZnJlc2ggPSByZXN1bHQucmVmcmVzaEZyb21CdWZmZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyKHJlZnJlc2ggPT09ICEwID8gcmVmcmVzaCA6IHJlZnJlc2guc3RhcnQsIHJlZnJlc2guZW5kLCByZXN1bHQuYnVmZmVyKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRNYXNrU2V0KCEwKSwgcmVzdWx0LmNhcmV0ICYmIChnZXRNYXNrU2V0KCkucCA9IHJlc3VsdC5jYXJldCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGUucHJldmVudERlZmF1bHQoKSwgY2hlY2t2YWwpIHJldHVybiB2YWxSZXN1bHQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gcGFzdGVFdmVudChlKSB7XHJcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsIGV2ID0gZS5vcmlnaW5hbEV2ZW50IHx8IGUsICRpbnB1dCA9ICQoaW5wdXQpLCBpbnB1dFZhbHVlID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCghMCksIGNhcmV0UG9zID0gY2FyZXQoaW5wdXQpO1xyXG4gICAgICAgICAgICBpZiAoXCJwcm9wZXJ0eWNoYW5nZVwiID09PSBlLnR5cGUgJiYgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCA8PSBnZXRNYXNrTGVuZ3RoKCkpIHJldHVybiAhMDtcclxuICAgICAgICAgICAgaWYgKFwicGFzdGVcIiA9PT0gZS50eXBlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVCZWZvcmVDYXJldCA9IGlucHV0VmFsdWUuc3Vic3RyKDAsIGNhcmV0UG9zLmJlZ2luKSwgdmFsdWVBZnRlckNhcmV0ID0gaW5wdXRWYWx1ZS5zdWJzdHIoY2FyZXRQb3MuZW5kLCBpbnB1dFZhbHVlLmxlbmd0aCk7XHJcbiAgICAgICAgICAgICAgICB2YWx1ZUJlZm9yZUNhcmV0ID09PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLnNsaWNlKDAsIGNhcmV0UG9zLmJlZ2luKS5qb2luKFwiXCIpICYmICh2YWx1ZUJlZm9yZUNhcmV0ID0gXCJcIiksXHJcbiAgICAgICAgICAgICAgICB2YWx1ZUFmdGVyQ2FyZXQgPT09IGdldEJ1ZmZlclRlbXBsYXRlKCkuc2xpY2UoY2FyZXRQb3MuZW5kKS5qb2luKFwiXCIpICYmICh2YWx1ZUFmdGVyQ2FyZXQgPSBcIlwiKSxcclxuICAgICAgICAgICAgICAgIHdpbmRvdy5jbGlwYm9hcmREYXRhICYmIHdpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEgPyBpbnB1dFZhbHVlID0gdmFsdWVCZWZvcmVDYXJldCArIHdpbmRvdy5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJUZXh0XCIpICsgdmFsdWVBZnRlckNhcmV0IDogZXYuY2xpcGJvYXJkRGF0YSAmJiBldi5jbGlwYm9hcmREYXRhLmdldERhdGEgJiYgKGlucHV0VmFsdWUgPSB2YWx1ZUJlZm9yZUNhcmV0ICsgZXYuY2xpcGJvYXJkRGF0YS5nZXREYXRhKFwidGV4dC9wbGFpblwiKSArIHZhbHVlQWZ0ZXJDYXJldCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIHBhc3RlVmFsdWUgPSBpbnB1dFZhbHVlO1xyXG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVQYXN0ZSkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChwYXN0ZVZhbHVlID0gb3B0cy5vbkJlZm9yZVBhc3RlLmNhbGwoaW5wdXQsIGlucHV0VmFsdWUsIG9wdHMpLCBwYXN0ZVZhbHVlID09PSAhMSkgcmV0dXJuIGUucHJldmVudERlZmF1bHQoKSxcclxuICAgICAgICAgICAgICAgICExO1xyXG4gICAgICAgICAgICAgICAgcGFzdGVWYWx1ZSB8fCAocGFzdGVWYWx1ZSA9IGlucHV0VmFsdWUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjaGVja1ZhbChpbnB1dCwgITEsICExLCBpc1JUTCA/IHBhc3RlVmFsdWUuc3BsaXQoXCJcIikucmV2ZXJzZSgpIDogcGFzdGVWYWx1ZS50b1N0cmluZygpLnNwbGl0KFwiXCIpKSxcclxuICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCB2b2lkIDAsIGUsICEwKSwgJGlucHV0LnRyaWdnZXIoXCJjbGlja1wiKSwgaXNDb21wbGV0ZShnZXRCdWZmZXIoKSkgPT09ICEwICYmICRpbnB1dC50cmlnZ2VyKFwiY29tcGxldGVcIiksXHJcbiAgICAgICAgICAgICExO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBpbnB1dEZhbGxCYWNrRXZlbnQoZSkge1xyXG4gICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzO1xyXG4gICAgICAgICAgICBjaGVja1ZhbChpbnB1dCwgITAsICExLCBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkuc3BsaXQoXCJcIikpLCBpc0NvbXBsZXRlKGdldEJ1ZmZlcigpKSA9PT0gITAgJiYgJChpbnB1dCkudHJpZ2dlcihcImNvbXBsZXRlXCIpLFxyXG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIG1vYmlsZUlucHV0RXZlbnQoZSkge1xyXG4gICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCBjYXJldFBvcyA9IGNhcmV0KGlucHV0KSwgY3VycmVudFZhbHVlID0gaW5wdXQuX3ZhbHVlR2V0KCk7XHJcbiAgICAgICAgICAgIGN1cnJlbnRWYWx1ZSA9IGN1cnJlbnRWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoXCIoXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgoZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpKSArIFwiKSpcIiksIFwiXCIpLFxyXG4gICAgICAgICAgICBjYXJldFBvcy5iZWdpbiA+IGN1cnJlbnRWYWx1ZS5sZW5ndGggJiYgKGNhcmV0KGlucHV0LCBjdXJyZW50VmFsdWUubGVuZ3RoKSwgY2FyZXRQb3MgPSBjYXJldChpbnB1dCkpLFxyXG4gICAgICAgICAgICBnZXRCdWZmZXIoKS5sZW5ndGggLSBjdXJyZW50VmFsdWUubGVuZ3RoICE9PSAxIHx8IGN1cnJlbnRWYWx1ZS5jaGFyQXQoY2FyZXRQb3MuYmVnaW4pID09PSBnZXRCdWZmZXIoKVtjYXJldFBvcy5iZWdpbl0gfHwgY3VycmVudFZhbHVlLmNoYXJBdChjYXJldFBvcy5iZWdpbiArIDEpID09PSBnZXRCdWZmZXIoKVtjYXJldFBvcy5iZWdpbl0gfHwgaXNNYXNrKGNhcmV0UG9zLmJlZ2luKSA/IGlucHV0RmFsbEJhY2tFdmVudC5jYWxsKHRoaXMsIGUpIDogKGUua2V5Q29kZSA9IG9wdHMua2V5Q29kZS5CQUNLU1BBQ0UsXHJcbiAgICAgICAgICAgIGtleWRvd25FdmVudC5jYWxsKGlucHV0LCBlKSksIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gY29tcG9zaXRpb25TdGFydEV2ZW50KGUpIHtcclxuICAgICAgICAgICAgdmFyIGV2ID0gZS5vcmlnaW5hbEV2ZW50IHx8IGU7XHJcbiAgICAgICAgICAgIHVuZG9WYWx1ZSA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIiksIFwiXCIgPT09IGNvbXBvc2l0aW9uRGF0YSB8fCAwICE9PSBldi5kYXRhLmluZGV4T2YoY29tcG9zaXRpb25EYXRhKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gY29tcG9zaXRpb25VcGRhdGVFdmVudChlKSB7XHJcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsIGV2ID0gZS5vcmlnaW5hbEV2ZW50IHx8IGU7XHJcbiAgICAgICAgICAgIDAgPT09IGV2LmRhdGEuaW5kZXhPZihjb21wb3NpdGlvbkRhdGEpICYmIChyZXNldE1hc2tTZXQoKSwgZ2V0TWFza1NldCgpLnAgPSBzZWVrTmV4dCgtMSksXHJcbiAgICAgICAgICAgIHNraXBJbnB1dEV2ZW50ID0gITApO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBuZXdEYXRhID0gZXYuZGF0YSwgaSA9IDA7IGkgPCBuZXdEYXRhLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5cHJlc3MgPSAkLkV2ZW50KFwia2V5cHJlc3NcIik7XHJcbiAgICAgICAgICAgICAgICBrZXlwcmVzcy53aGljaCA9IG5ld0RhdGEuY2hhckNvZGVBdChpKSwgc2tpcEtleVByZXNzRXZlbnQgPSAhMSwgaWdub3JhYmxlID0gITEsXHJcbiAgICAgICAgICAgICAgICBrZXlwcmVzc0V2ZW50LmNhbGwoaW5wdXQsIGtleXByZXNzLCAhMCwgITEsICExLCBnZXRNYXNrU2V0KCkucCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZm9yd2FyZFBvc2l0aW9uID0gZ2V0TWFza1NldCgpLnA7XHJcbiAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihpbnB1dCwgZ2V0QnVmZmVyKCksIG9wdHMubnVtZXJpY0lucHV0ID8gc2Vla1ByZXZpb3VzKGZvcndhcmRQb3NpdGlvbikgOiBmb3J3YXJkUG9zaXRpb24pO1xyXG4gICAgICAgICAgICB9LCAwKSwgY29tcG9zaXRpb25EYXRhID0gZXYuZGF0YTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gY29tcG9zaXRpb25FbmRFdmVudChlKSB7IH1cclxuICAgICAgICBmdW5jdGlvbiBzZXRWYWx1ZUV2ZW50KGUpIHtcclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgdmFsdWUgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCk7XHJcbiAgICAgICAgICAgIGNoZWNrVmFsKGlucHV0LCAhMCwgITEsICgkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spID8gb3B0cy5vbkJlZm9yZU1hc2suY2FsbChpbnB1dCwgdmFsdWUsIG9wdHMpIHx8IHZhbHVlIDogdmFsdWUpLnNwbGl0KFwiXCIpKSxcclxuICAgICAgICAgICAgdW5kb1ZhbHVlID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSwgKG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgfHwgb3B0cy5jbGVhckluY29tcGxldGUpICYmIGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpICYmIGlucHV0LmlucHV0bWFzay5fdmFsdWVTZXQoXCJcIik7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGZvY3VzRXZlbnQoZSkge1xyXG4gICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCBucHRWYWx1ZSA9IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKTtcclxuICAgICAgICAgICAgb3B0cy5zaG93TWFza09uRm9jdXMgJiYgKCFvcHRzLnNob3dNYXNrT25Ib3ZlciB8fCBvcHRzLnNob3dNYXNrT25Ib3ZlciAmJiBcIlwiID09PSBucHRWYWx1ZSkgPyBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikgJiYgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKSkgOiBtb3VzZUVudGVyID09PSAhMSAmJiBjYXJldChpbnB1dCwgc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSkpLFxyXG4gICAgICAgICAgICBvcHRzLnBvc2l0aW9uQ2FyZXRPblRhYiA9PT0gITAgJiYgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSkpO1xyXG4gICAgICAgICAgICB9LCAwKSwgdW5kb1ZhbHVlID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gbW91c2VsZWF2ZUV2ZW50KGUpIHtcclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcclxuICAgICAgICAgICAgaWYgKG1vdXNlRW50ZXIgPSAhMSwgb3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGdldEJ1ZmZlcigpLnNsaWNlKCksIG5wdFZhbHVlID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpO1xyXG4gICAgICAgICAgICAgICAgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gaW5wdXQgJiYgbnB0VmFsdWUgIT09IGlucHV0LmdldEF0dHJpYnV0ZShcInBsYWNlaG9sZGVyXCIpICYmIFwiXCIgIT09IG5wdFZhbHVlICYmICgtMSA9PT0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSAmJiBucHRWYWx1ZSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpID8gYnVmZmVyID0gW10gOiBjbGVhck9wdGlvbmFsVGFpbChidWZmZXIpLFxyXG4gICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGJ1ZmZlcikpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGNsaWNrRXZlbnQoZSkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBkb1JhZGl4Rm9jdXMoY2xpY2tQb3MpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRzLnJhZGl4Rm9jdXMgJiYgXCJcIiAhPT0gb3B0cy5yYWRpeFBvaW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZwcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucztcclxuICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwID09PSB2cHNbY2xpY2tQb3NdIHx8IHZwc1tjbGlja1Bvc10uaW5wdXQgPT09IGdldFBsYWNlaG9sZGVyKGNsaWNrUG9zKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY2xpY2tQb3MgPCBzZWVrTmV4dCgtMSkpIHJldHVybiAhMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4UG9zID0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgZ2V0QnVmZmVyKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoLTEgIT09IHJhZGl4UG9zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB2cCBpbiB2cHMpIGlmICh2cCA+IHJhZGl4UG9zICYmIHZwc1t2cF0uaW5wdXQgIT09IGdldFBsYWNlaG9sZGVyKHZwKSkgcmV0dXJuICExO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICExO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXM7XHJcbiAgICAgICAgICAgIGlmIChkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBpbnB1dCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdGVkQ2FyZXQgPSBjYXJldChpbnB1dCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoc2VsZWN0ZWRDYXJldC5iZWdpbiA9PT0gc2VsZWN0ZWRDYXJldC5lbmQpIGlmIChkb1JhZGl4Rm9jdXMoc2VsZWN0ZWRDYXJldC5iZWdpbikpIGNhcmV0KGlucHV0LCAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBnZXRCdWZmZXIoKSkpOyBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY2xpY2tQb3NpdGlvbiA9IHNlbGVjdGVkQ2FyZXQuYmVnaW4sIGx2Y2xpY2tQb3NpdGlvbiA9IGdldExhc3RWYWxpZFBvc2l0aW9uKGNsaWNrUG9zaXRpb24pLCBsYXN0UG9zaXRpb24gPSBzZWVrTmV4dChsdmNsaWNrUG9zaXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RQb3NpdGlvbiA+IGNsaWNrUG9zaXRpb24gPyBjYXJldChpbnB1dCwgaXNNYXNrKGNsaWNrUG9zaXRpb24pIHx8IGlzTWFzayhjbGlja1Bvc2l0aW9uIC0gMSkgPyBjbGlja1Bvc2l0aW9uIDogc2Vla05leHQoY2xpY2tQb3NpdGlvbikpIDogY2FyZXQoaW5wdXQsIG9wdHMubnVtZXJpY0lucHV0ID8gMCA6IGxhc3RQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZGJsY2xpY2tFdmVudChlKSB7XHJcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXM7XHJcbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIDAsIHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpKTtcclxuICAgICAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGN1dEV2ZW50KGUpIHtcclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgJGlucHV0ID0gJChpbnB1dCksIHBvcyA9IGNhcmV0KGlucHV0KSwgZXYgPSBlLm9yaWdpbmFsRXZlbnQgfHwgZSwgY2xpcGJvYXJkRGF0YSA9IHdpbmRvdy5jbGlwYm9hcmREYXRhIHx8IGV2LmNsaXBib2FyZERhdGEsIGNsaXBEYXRhID0gaXNSVEwgPyBnZXRCdWZmZXIoKS5zbGljZShwb3MuZW5kLCBwb3MuYmVnaW4pIDogZ2V0QnVmZmVyKCkuc2xpY2UocG9zLmJlZ2luLCBwb3MuZW5kKTtcclxuICAgICAgICAgICAgY2xpcGJvYXJkRGF0YS5zZXREYXRhKFwidGV4dFwiLCBpc1JUTCA/IGNsaXBEYXRhLnJldmVyc2UoKS5qb2luKFwiXCIpIDogY2xpcERhdGEuam9pbihcIlwiKSksXHJcbiAgICAgICAgICAgIGRvY3VtZW50LmV4ZWNDb21tYW5kICYmIGRvY3VtZW50LmV4ZWNDb21tYW5kKFwiY29weVwiKSwgaGFuZGxlUmVtb3ZlKGlucHV0LCBJbnB1dG1hc2sua2V5Q29kZS5ERUxFVEUsIHBvcyksXHJcbiAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSwgZ2V0TWFza1NldCgpLnAsIGUsIHVuZG9WYWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSksXHJcbiAgICAgICAgICAgIGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpICYmICRpbnB1dC50cmlnZ2VyKFwiY2xlYXJlZFwiKSxcclxuICAgICAgICAgICAgb3B0cy5zaG93VG9vbHRpcCAmJiAoaW5wdXQudGl0bGUgPSBvcHRzLnRvb2x0aXAgfHwgZ2V0TWFza1NldCgpLm1hc2spO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBibHVyRXZlbnQoZSkge1xyXG4gICAgICAgICAgICB2YXIgJGlucHV0ID0gJCh0aGlzKSwgaW5wdXQgPSB0aGlzO1xyXG4gICAgICAgICAgICBpZiAoaW5wdXQuaW5wdXRtYXNrKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbnB0VmFsdWUgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCksIGJ1ZmZlciA9IGdldEJ1ZmZlcigpLnNsaWNlKCk7XHJcbiAgICAgICAgICAgICAgICB1bmRvVmFsdWUgIT09IGJ1ZmZlci5qb2luKFwiXCIpICYmIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwiY2hhbmdlXCIpLCB1bmRvVmFsdWUgPSBidWZmZXIuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgICAgIH0sIDApLCBcIlwiICE9PSBucHRWYWx1ZSAmJiAob3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyAmJiAoLTEgPT09IGdldExhc3RWYWxpZFBvc2l0aW9uKCkgJiYgbnB0VmFsdWUgPT09IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKSA/IGJ1ZmZlciA9IFtdIDogY2xlYXJPcHRpb25hbFRhaWwoYnVmZmVyKSksXHJcbiAgICAgICAgICAgICAgICBpc0NvbXBsZXRlKGJ1ZmZlcikgPT09ICExICYmIChzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcImluY29tcGxldGVcIik7XHJcbiAgICAgICAgICAgICAgICB9LCAwKSwgb3B0cy5jbGVhckluY29tcGxldGUgJiYgKHJlc2V0TWFza1NldCgpLCBidWZmZXIgPSBvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzID8gW10gOiBnZXRCdWZmZXJUZW1wbGF0ZSgpLnNsaWNlKCkpKSxcclxuICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBidWZmZXIsIHZvaWQgMCwgZSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIG1vdXNlZW50ZXJFdmVudChlKSB7XHJcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXM7XHJcbiAgICAgICAgICAgIG1vdXNlRW50ZXIgPSAhMCwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCAhPT0gaW5wdXQgJiYgb3B0cy5zaG93TWFza09uSG92ZXIgJiYgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpICYmIHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIG1hc2soZWxlbSkge1xyXG4gICAgICAgICAgICBpZiAoZWwgPSBlbGVtLCAkZWwgPSAkKGVsKSwgb3B0cy5zaG93VG9vbHRpcCAmJiAoZWwudGl0bGUgPSBvcHRzLnRvb2x0aXAgfHwgZ2V0TWFza1NldCgpLm1hc2spLFxyXG4gICAgICAgICAgICAoXCJydGxcIiA9PT0gZWwuZGlyIHx8IG9wdHMucmlnaHRBbGlnbikgJiYgKGVsLnN0eWxlLnRleHRBbGlnbiA9IFwicmlnaHRcIiksIChcInJ0bFwiID09PSBlbC5kaXIgfHwgb3B0cy5udW1lcmljSW5wdXQpICYmIChlbC5kaXIgPSBcImx0clwiLFxyXG4gICAgICAgICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoXCJkaXJcIiksIGVsLmlucHV0bWFzay5pc1JUTCA9ICEwLCBpc1JUTCA9ICEwKSwgJGVsLm9mZihcIi5pbnB1dG1hc2tcIiksXHJcbiAgICAgICAgICAgIHBhdGNoVmFsdWVQcm9wZXJ0eShlbCksIChcIklOUFVUXCIgPT09IGVsLnRhZ05hbWUgJiYgaXNJbnB1dFR5cGVTdXBwb3J0ZWQoZWwuZ2V0QXR0cmlidXRlKFwidHlwZVwiKSkgfHwgZWwuaXNDb250ZW50RWRpdGFibGUpICYmICgkKGVsLmZvcm0pLm9uKFwic3VibWl0XCIsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHVuZG9WYWx1ZSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSAmJiAkZWwudHJpZ2dlcihcImNoYW5nZVwiKSwgb3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyAmJiAtMSA9PT0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSAmJiBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0ICYmIGVsLmlucHV0bWFzay5fdmFsdWVHZXQoKSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpICYmIGVsLmlucHV0bWFzay5fdmFsdWVTZXQoXCJcIiksXHJcbiAgICAgICAgICAgICAgICBvcHRzLnJlbW92ZU1hc2tPblN1Ym1pdCAmJiAoZWwuaW5wdXRtYXNrLl92YWx1ZVNldChlbC5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpLCAhMCksXHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihlbCwgZ2V0QnVmZmVyKCkpO1xyXG4gICAgICAgICAgICB9LCAwKSk7XHJcbiAgICAgICAgICAgIH0pLm9uKFwicmVzZXRcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGVsLnRyaWdnZXIoXCJzZXR2YWx1ZS5pbnB1dG1hc2tcIik7XHJcbiAgICAgICAgICAgIH0sIDApO1xyXG4gICAgICAgICAgICB9KSwgJGVsLm9uKFwibW91c2VlbnRlci5pbnB1dG1hc2tcIiwgd3JhcEV2ZW50UnVsZXIobW91c2VlbnRlckV2ZW50KSkub24oXCJibHVyLmlucHV0bWFza1wiLCB3cmFwRXZlbnRSdWxlcihibHVyRXZlbnQpKS5vbihcImZvY3VzLmlucHV0bWFza1wiLCB3cmFwRXZlbnRSdWxlcihmb2N1c0V2ZW50KSkub24oXCJtb3VzZWxlYXZlLmlucHV0bWFza1wiLCB3cmFwRXZlbnRSdWxlcihtb3VzZWxlYXZlRXZlbnQpKS5vbihcImNsaWNrLmlucHV0bWFza1wiLCB3cmFwRXZlbnRSdWxlcihjbGlja0V2ZW50KSkub24oXCJkYmxjbGljay5pbnB1dG1hc2tcIiwgd3JhcEV2ZW50UnVsZXIoZGJsY2xpY2tFdmVudCkpLm9uKFBhc3RlRXZlbnRUeXBlICsgXCIuaW5wdXRtYXNrIGRyYWdkcm9wLmlucHV0bWFzayBkcm9wLmlucHV0bWFza1wiLCB3cmFwRXZlbnRSdWxlcihwYXN0ZUV2ZW50KSkub24oXCJjdXQuaW5wdXRtYXNrXCIsIHdyYXBFdmVudFJ1bGVyKGN1dEV2ZW50KSkub24oXCJjb21wbGV0ZS5pbnB1dG1hc2tcIiwgd3JhcEV2ZW50UnVsZXIob3B0cy5vbmNvbXBsZXRlKSkub24oXCJpbmNvbXBsZXRlLmlucHV0bWFza1wiLCB3cmFwRXZlbnRSdWxlcihvcHRzLm9uaW5jb21wbGV0ZSkpLm9uKFwiY2xlYXJlZC5pbnB1dG1hc2tcIiwgd3JhcEV2ZW50UnVsZXIob3B0cy5vbmNsZWFyZWQpKS5vbihcImtleWRvd24uaW5wdXRtYXNrXCIsIHdyYXBFdmVudFJ1bGVyKGtleWRvd25FdmVudCkpLm9uKFwia2V5cHJlc3MuaW5wdXRtYXNrXCIsIHdyYXBFdmVudFJ1bGVyKGtleXByZXNzRXZlbnQpKSxcclxuICAgICAgICAgICAgYW5kcm9pZGZpcmVmb3ggfHwgJGVsLm9uKFwiY29tcG9zaXRpb25zdGFydC5pbnB1dG1hc2tcIiwgd3JhcEV2ZW50UnVsZXIoY29tcG9zaXRpb25TdGFydEV2ZW50KSkub24oXCJjb21wb3NpdGlvbnVwZGF0ZS5pbnB1dG1hc2tcIiwgd3JhcEV2ZW50UnVsZXIoY29tcG9zaXRpb25VcGRhdGVFdmVudCkpLm9uKFwiY29tcG9zaXRpb25lbmQuaW5wdXRtYXNrXCIsIHdyYXBFdmVudFJ1bGVyKGNvbXBvc2l0aW9uRW5kRXZlbnQpKSxcclxuICAgICAgICAgICAgXCJwYXN0ZVwiID09PSBQYXN0ZUV2ZW50VHlwZSAmJiAkZWwub24oXCJpbnB1dC5pbnB1dG1hc2tcIiwgd3JhcEV2ZW50UnVsZXIoaW5wdXRGYWxsQmFja0V2ZW50KSksXHJcbiAgICAgICAgICAgIChhbmRyb2lkIHx8IGFuZHJvaWRmaXJlZm94IHx8IGFuZHJvaWRjaHJvbWUgfHwga2luZGxlKSAmJiAoJGVsLm9mZihcImlucHV0LmlucHV0bWFza1wiKSxcclxuICAgICAgICAgICAgJGVsLm9uKFwiaW5wdXQuaW5wdXRtYXNrXCIsIHdyYXBFdmVudFJ1bGVyKG1vYmlsZUlucHV0RXZlbnQpKSkpLCAkZWwub24oXCJzZXR2YWx1ZS5pbnB1dG1hc2tcIiwgd3JhcEV2ZW50UnVsZXIoc2V0VmFsdWVFdmVudCkpLFxyXG4gICAgICAgICAgICBcIlwiICE9PSBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkgfHwgb3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyA9PT0gITEpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbml0aWFsVmFsdWUgPSAkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spID8gb3B0cy5vbkJlZm9yZU1hc2suY2FsbChlbCwgZWwuaW5wdXRtYXNrLl92YWx1ZUdldCgpLCBvcHRzKSB8fCBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkgOiBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KCk7XHJcbiAgICAgICAgICAgICAgICBjaGVja1ZhbChlbCwgITAsICExLCBpbml0aWFsVmFsdWUuc3BsaXQoXCJcIikpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGJ1ZmZlciA9IGdldEJ1ZmZlcigpLnNsaWNlKCk7XHJcbiAgICAgICAgICAgICAgICB1bmRvVmFsdWUgPSBidWZmZXIuam9pbihcIlwiKSwgaXNDb21wbGV0ZShidWZmZXIpID09PSAhMSAmJiBvcHRzLmNsZWFySW5jb21wbGV0ZSAmJiByZXNldE1hc2tTZXQoKSxcclxuICAgICAgICAgICAgICAgIG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgJiYgKGJ1ZmZlci5qb2luKFwiXCIpID09PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikgPyBidWZmZXIgPSBbXSA6IGNsZWFyT3B0aW9uYWxUYWlsKGJ1ZmZlcikpLFxyXG4gICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoZWwsIGJ1ZmZlciksIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGVsICYmIGNhcmV0KGVsLCBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIHVuZG9WYWx1ZSwgY29tcG9zaXRpb25EYXRhLCBlbCwgJGVsLCBtYXhMZW5ndGgsIHZhbHVlQnVmZmVyLCBpc1JUTCA9ICExLCBza2lwS2V5UHJlc3NFdmVudCA9ICExLCBza2lwSW5wdXRFdmVudCA9ICExLCBpZ25vcmFibGUgPSAhMSwgbW91c2VFbnRlciA9ICEwO1xyXG4gICAgICAgIGlmICh2b2lkIDAgIT09IGFjdGlvbk9iaikgc3dpdGNoIChhY3Rpb25PYmouYWN0aW9uKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJpc0NvbXBsZXRlXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZWwgPSBhY3Rpb25PYmouZWwsIGlzQ29tcGxldGUoZ2V0QnVmZmVyKCkpO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBcInVubWFza2VkdmFsdWVcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbCA9IGFjdGlvbk9iai5lbCwgdm9pZCAwICE9PSBlbCAmJiB2b2lkIDAgIT09IGVsLmlucHV0bWFzayA/IChtYXNrc2V0ID0gZWwuaW5wdXRtYXNrLm1hc2tzZXQsXHJcbiAgICAgICAgICAgICAgICBvcHRzID0gZWwuaW5wdXRtYXNrLm9wdHMsIGlzUlRMID0gZWwuaW5wdXRtYXNrLmlzUlRMLCB2YWx1ZUJ1ZmZlciA9IGlzUlRMID8gZWwuaW5wdXRtYXNrLl92YWx1ZUdldCgpLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogZWwuaW5wdXRtYXNrLl92YWx1ZUdldCgpKSA6IHZhbHVlQnVmZmVyID0gYWN0aW9uT2JqLnZhbHVlLFxyXG4gICAgICAgICAgICAgICAgb3B0cy5udW1lcmljSW5wdXQgJiYgKGlzUlRMID0gITApLCB2YWx1ZUJ1ZmZlciA9ICgkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spID8gb3B0cy5vbkJlZm9yZU1hc2sodmFsdWVCdWZmZXIsIG9wdHMpIHx8IHZhbHVlQnVmZmVyIDogdmFsdWVCdWZmZXIpLnNwbGl0KFwiXCIpLFxyXG4gICAgICAgICAgICAgICAgY2hlY2tWYWwodm9pZCAwLCAhMSwgITEsIGlzUlRMID8gdmFsdWVCdWZmZXIucmV2ZXJzZSgpIDogdmFsdWVCdWZmZXIpLCAkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZVdyaXRlKSAmJiBvcHRzLm9uQmVmb3JlV3JpdGUodm9pZCAwLCBnZXRCdWZmZXIoKSwgMCwgb3B0cyksXHJcbiAgICAgICAgICAgICAgICB1bm1hc2tlZHZhbHVlKGVsKTtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJtYXNrXCI6XHJcbiAgICAgICAgICAgICAgICBlbCA9IGFjdGlvbk9iai5lbCwgbWFza3NldCA9IGVsLmlucHV0bWFzay5tYXNrc2V0LCBvcHRzID0gZWwuaW5wdXRtYXNrLm9wdHMsIGlzUlRMID0gZWwuaW5wdXRtYXNrLmlzUlRMLFxyXG4gICAgICAgICAgICAgICAgdW5kb1ZhbHVlID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSwgbWFzayhlbCk7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJmb3JtYXRcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLm51bWVyaWNJbnB1dCAmJiAoaXNSVEwgPSAhMCksIHZhbHVlQnVmZmVyID0gKCQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlTWFzaykgPyBvcHRzLm9uQmVmb3JlTWFzayhhY3Rpb25PYmoudmFsdWUsIG9wdHMpIHx8IGFjdGlvbk9iai52YWx1ZSA6IGFjdGlvbk9iai52YWx1ZSkuc3BsaXQoXCJcIiksXHJcbiAgICAgICAgICAgICAgICBjaGVja1ZhbCh2b2lkIDAsICExLCAhMSwgaXNSVEwgPyB2YWx1ZUJ1ZmZlci5yZXZlcnNlKCkgOiB2YWx1ZUJ1ZmZlciksICQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlV3JpdGUpICYmIG9wdHMub25CZWZvcmVXcml0ZSh2b2lkIDAsIGdldEJ1ZmZlcigpLCAwLCBvcHRzKSxcclxuICAgICAgICAgICAgICAgIGFjdGlvbk9iai5tZXRhZGF0YSA/IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogaXNSVEwgPyBnZXRCdWZmZXIoKS5zbGljZSgpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogZ2V0QnVmZmVyKCkuam9pbihcIlwiKSxcclxuICAgICAgICAgICAgICAgICAgICBtZXRhZGF0YTogbWFza1Njb3BlKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aW9uOiBcImdldG1ldGFkYXRhXCJcclxuICAgICAgICAgICAgICAgICAgICB9LCBtYXNrc2V0LCBvcHRzKVxyXG4gICAgICAgICAgICAgICAgfSA6IGlzUlRMID8gZ2V0QnVmZmVyKCkuc2xpY2UoKS5yZXZlcnNlKCkuam9pbihcIlwiKSA6IGdldEJ1ZmZlcigpLmpvaW4oXCJcIik7XHJcblxyXG4gICAgICAgICAgICBjYXNlIFwiaXNWYWxpZFwiOlxyXG4gICAgICAgICAgICAgICAgb3B0cy5udW1lcmljSW5wdXQgJiYgKGlzUlRMID0gITApLCB2YWx1ZUJ1ZmZlciA9IGFjdGlvbk9iai52YWx1ZS5zcGxpdChcIlwiKSwgY2hlY2tWYWwodm9pZCAwLCAhMSwgITAsIGlzUlRMID8gdmFsdWVCdWZmZXIucmV2ZXJzZSgpIDogdmFsdWVCdWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCksIHJsID0gZGV0ZXJtaW5lTGFzdFJlcXVpcmVkUG9zaXRpb24oKSwgbG1pYiA9IGJ1ZmZlci5sZW5ndGggLSAxOyBsbWliID4gcmwgJiYgIWlzTWFzayhsbWliKSA7IGxtaWItLSk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYnVmZmVyLnNwbGljZShybCwgbG1pYiArIDEgLSBybCksIGlzQ29tcGxldGUoYnVmZmVyKSAmJiBhY3Rpb25PYmoudmFsdWUgPT09IGJ1ZmZlci5qb2luKFwiXCIpO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBcImdldGVtcHR5bWFza1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldEJ1ZmZlclRlbXBsYXRlKCk7XHJcblxyXG4gICAgICAgICAgICBjYXNlIFwicmVtb3ZlXCI6XHJcbiAgICAgICAgICAgICAgICBlbCA9IGFjdGlvbk9iai5lbCwgJGVsID0gJChlbCksIG1hc2tzZXQgPSBlbC5pbnB1dG1hc2subWFza3NldCwgb3B0cyA9IGVsLmlucHV0bWFzay5vcHRzLFxyXG4gICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLl92YWx1ZVNldCh1bm1hc2tlZHZhbHVlKGVsKSksICRlbC5vZmYoXCIuaW5wdXRtYXNrXCIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHZhbHVlUHJvcGVydHk7XHJcbiAgICAgICAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICh2YWx1ZVByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlbCwgXCJ2YWx1ZVwiKSksXHJcbiAgICAgICAgICAgICAgICB2YWx1ZVByb3BlcnR5ICYmIHZhbHVlUHJvcGVydHkuZ2V0ID8gZWwuaW5wdXRtYXNrLl9fdmFsdWVHZXQgJiYgT2JqZWN0LmRlZmluZVByb3BlcnR5KGVsLCBcInZhbHVlXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICBnZXQ6IGVsLmlucHV0bWFzay5fX3ZhbHVlR2V0LFxyXG4gICAgICAgICAgICAgICAgICAgIHNldDogZWwuaW5wdXRtYXNrLl9fdmFsdWVTZXRcclxuICAgICAgICAgICAgICAgIH0pIDogZG9jdW1lbnQuX19sb29rdXBHZXR0ZXJfXyAmJiBlbC5fX2xvb2t1cEdldHRlcl9fKFwidmFsdWVcIikgJiYgZWwuaW5wdXRtYXNrLl9fdmFsdWVHZXQgJiYgKGVsLl9fZGVmaW5lR2V0dGVyX18oXCJ2YWx1ZVwiLCBlbC5pbnB1dG1hc2suX192YWx1ZUdldCksXHJcbiAgICAgICAgICAgICAgICBlbC5fX2RlZmluZVNldHRlcl9fKFwidmFsdWVcIiwgZWwuaW5wdXRtYXNrLl9fdmFsdWVTZXQpKSwgZWwuaW5wdXRtYXNrID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBjYXNlIFwiZ2V0bWV0YWRhdGFcIjpcclxuICAgICAgICAgICAgICAgIGlmICgkLmlzQXJyYXkobWFza3NldC5tZXRhZGF0YSkpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhbHRlcm5hdGlvbiwgbHZwID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSwgZmlyc3RBbHQgPSBsdnA7IGZpcnN0QWx0ID49IDA7IGZpcnN0QWx0LS0pIGlmIChnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbZmlyc3RBbHRdICYmIHZvaWQgMCAhPT0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ZpcnN0QWx0XS5hbHRlcm5hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdGlvbiA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tmaXJzdEFsdF0uYWx0ZXJuYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwICE9PSBhbHRlcm5hdGlvbiA/IG1hc2tzZXQubWV0YWRhdGFbZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2x2cF0ubG9jYXRvclthbHRlcm5hdGlvbl1dIDogbWFza3NldC5tZXRhZGF0YVswXTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrc2V0Lm1ldGFkYXRhO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIElucHV0bWFzay5wcm90b3R5cGUgPSB7XHJcbiAgICAgICAgZGVmYXVsdHM6IHtcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiX1wiLFxyXG4gICAgICAgICAgICBvcHRpb25hbG1hcmtlcjoge1xyXG4gICAgICAgICAgICAgICAgc3RhcnQ6IFwiW1wiLFxyXG4gICAgICAgICAgICAgICAgZW5kOiBcIl1cIlxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBxdWFudGlmaWVybWFya2VyOiB7XHJcbiAgICAgICAgICAgICAgICBzdGFydDogXCJ7XCIsXHJcbiAgICAgICAgICAgICAgICBlbmQ6IFwifVwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGdyb3VwbWFya2VyOiB7XHJcbiAgICAgICAgICAgICAgICBzdGFydDogXCIoXCIsXHJcbiAgICAgICAgICAgICAgICBlbmQ6IFwiKVwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGFsdGVybmF0b3JtYXJrZXI6IFwifFwiLFxyXG4gICAgICAgICAgICBlc2NhcGVDaGFyOiBcIlxcXFxcIixcclxuICAgICAgICAgICAgbWFzazogbnVsbCxcclxuICAgICAgICAgICAgb25jb21wbGV0ZTogJC5ub29wLFxyXG4gICAgICAgICAgICBvbmluY29tcGxldGU6ICQubm9vcCxcclxuICAgICAgICAgICAgb25jbGVhcmVkOiAkLm5vb3AsXHJcbiAgICAgICAgICAgIHJlcGVhdDogMCxcclxuICAgICAgICAgICAgZ3JlZWR5OiAhMCxcclxuICAgICAgICAgICAgYXV0b1VubWFzazogITEsXHJcbiAgICAgICAgICAgIHJlbW92ZU1hc2tPblN1Ym1pdDogITEsXHJcbiAgICAgICAgICAgIGNsZWFyTWFza09uTG9zdEZvY3VzOiAhMCxcclxuICAgICAgICAgICAgaW5zZXJ0TW9kZTogITAsXHJcbiAgICAgICAgICAgIGNsZWFySW5jb21wbGV0ZTogITEsXHJcbiAgICAgICAgICAgIGFsaWFzZXM6IHt9LFxyXG4gICAgICAgICAgICBhbGlhczogbnVsbCxcclxuICAgICAgICAgICAgb25LZXlEb3duOiAkLm5vb3AsXHJcbiAgICAgICAgICAgIG9uQmVmb3JlTWFzazogbnVsbCxcclxuICAgICAgICAgICAgb25CZWZvcmVQYXN0ZTogZnVuY3Rpb24gKHBhc3RlZFZhbHVlLCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVNYXNrKSA/IG9wdHMub25CZWZvcmVNYXNrKHBhc3RlZFZhbHVlLCBvcHRzKSA6IHBhc3RlZFZhbHVlO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvbkJlZm9yZVdyaXRlOiBudWxsLFxyXG4gICAgICAgICAgICBvblVuTWFzazogbnVsbCxcclxuICAgICAgICAgICAgc2hvd01hc2tPbkZvY3VzOiAhMCxcclxuICAgICAgICAgICAgc2hvd01hc2tPbkhvdmVyOiAhMCxcclxuICAgICAgICAgICAgb25LZXlWYWxpZGF0aW9uOiAkLm5vb3AsXHJcbiAgICAgICAgICAgIHNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXI6IFwiIFwiLFxyXG4gICAgICAgICAgICBzaG93VG9vbHRpcDogITEsXHJcbiAgICAgICAgICAgIHRvb2x0aXA6IHZvaWQgMCxcclxuICAgICAgICAgICAgbnVtZXJpY0lucHV0OiAhMSxcclxuICAgICAgICAgICAgcmlnaHRBbGlnbjogITEsXHJcbiAgICAgICAgICAgIHVuZG9PbkVzY2FwZTogITAsXHJcbiAgICAgICAgICAgIHJhZGl4UG9pbnQ6IFwiXCIsXHJcbiAgICAgICAgICAgIGdyb3VwU2VwYXJhdG9yOiBcIlwiLFxyXG4gICAgICAgICAgICByYWRpeEZvY3VzOiAhMSxcclxuICAgICAgICAgICAgbm9qdW1wczogITEsXHJcbiAgICAgICAgICAgIG5vanVtcHNUaHJlc2hvbGQ6IDAsXHJcbiAgICAgICAgICAgIGtlZXBTdGF0aWM6IG51bGwsXHJcbiAgICAgICAgICAgIHBvc2l0aW9uQ2FyZXRPblRhYjogITEsXHJcbiAgICAgICAgICAgIHRhYlRocm91Z2g6ICExLFxyXG4gICAgICAgICAgICBzdXBwb3J0c0lucHV0VHlwZTogW10sXHJcbiAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBcIjlcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC05XVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25TeW1ib2w6IFwiKlwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgYToge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbQS1aYS16XFx1MDQxMC1cXHUwNDRmXFx1MDQwMVxcdTA0NTFcXHhjMC1cXHhmZlxceGI1XVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlZmluaXRpb25TeW1ib2w6IFwiKlwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXCIqXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiWzAtOUEtWmEtelxcdTA0MTAtXFx1MDQ0ZlxcdTA0MDFcXHUwNDUxXFx4YzAtXFx4ZmZcXHhiNV1cIixcclxuICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpZ25vcmFibGVzOiBbOCwgOSwgMTMsIDE5LCAyNywgMzMsIDM0LCAzNSwgMzYsIDM3LCAzOCwgMzksIDQwLCA0NSwgNDYsIDkzLCAxMTIsIDExMywgMTE0LCAxMTUsIDExNiwgMTE3LCAxMTgsIDExOSwgMTIwLCAxMjEsIDEyMiwgMTIzXSxcclxuICAgICAgICAgICAgaXNDb21wbGV0ZTogbnVsbCxcclxuICAgICAgICAgICAgY2FuQ2xlYXJQb3NpdGlvbjogJC5ub29wLFxyXG4gICAgICAgICAgICBwb3N0VmFsaWRhdGlvbjogbnVsbFxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWFza3NDYWNoZToge30sXHJcbiAgICAgICAgbWFzazogZnVuY3Rpb24gKGVsZW1zKSB7XHJcbiAgICAgICAgICAgIHZhciB0aGF0ID0gdGhpcztcclxuICAgICAgICAgICAgcmV0dXJuIFwic3RyaW5nXCIgPT0gdHlwZW9mIGVsZW1zICYmIChlbGVtcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoZWxlbXMpKSwgZWxlbXMgPSBlbGVtcy5ub2RlTmFtZSA/IFtlbGVtc10gOiBlbGVtcyxcclxuICAgICAgICAgICAgJC5lYWNoKGVsZW1zLCBmdW5jdGlvbiAobmR4LCBlbCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNjb3BlZE9wdHMgPSAkLmV4dGVuZCghMCwge30sIHRoYXQub3B0cyk7XHJcbiAgICAgICAgICAgICAgICBpbXBvcnRBdHRyaWJ1dGVPcHRpb25zKGVsLCBzY29wZWRPcHRzLCAkLmV4dGVuZCghMCwge30sIHRoYXQudXNlck9wdGlvbnMpKTtcclxuICAgICAgICAgICAgICAgIHZhciBtYXNrc2V0ID0gZ2VuZXJhdGVNYXNrU2V0KHNjb3BlZE9wdHMsIHRoYXQubm9NYXNrc0NhY2hlKTtcclxuICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gbWFza3NldCAmJiAodm9pZCAwICE9PSBlbC5pbnB1dG1hc2sgJiYgZWwuaW5wdXRtYXNrLnJlbW92ZSgpLCBlbC5pbnB1dG1hc2sgPSBuZXcgSW5wdXRtYXNrKCksXHJcbiAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2sub3B0cyA9IHNjb3BlZE9wdHMsIGVsLmlucHV0bWFzay5ub01hc2tzQ2FjaGUgPSB0aGF0Lm5vTWFza3NDYWNoZSwgZWwuaW5wdXRtYXNrLnVzZXJPcHRpb25zID0gJC5leHRlbmQoITAsIHt9LCB0aGF0LnVzZXJPcHRpb25zKSxcclxuICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5lbCA9IGVsLCBlbC5pbnB1dG1hc2subWFza3NldCA9IG1hc2tzZXQsIGVsLmlucHV0bWFzay5pc1JUTCA9ICExLCAkLmRhdGEoZWwsIFwiX2lucHV0bWFza19vcHRzXCIsIHNjb3BlZE9wdHMpLFxyXG4gICAgICAgICAgICAgICAgbWFza1Njb3BlKHtcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwibWFza1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGVsOiBlbFxyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9KSwgZWxlbXMgPyBlbGVtc1swXS5pbnB1dG1hc2sgfHwgdGhpcyA6IHRoaXM7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBvcHRpb246IGZ1bmN0aW9uIChvcHRpb25zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBcInN0cmluZ1wiID09IHR5cGVvZiBvcHRpb25zID8gdGhpcy5vcHRzW29wdGlvbnNdIDogXCJvYmplY3RcIiA9PSB0eXBlb2Ygb3B0aW9ucyA/ICgkLmV4dGVuZCh0aGlzLm9wdHMsIG9wdGlvbnMpLFxyXG4gICAgICAgICAgICAkLmV4dGVuZCh0aGlzLnVzZXJPcHRpb25zLCBvcHRpb25zKSwgdGhpcy5lbCAmJiAodm9pZCAwICE9PSBvcHRpb25zLm1hc2sgfHwgdm9pZCAwICE9PSBvcHRpb25zLmFsaWFzID8gdGhpcy5tYXNrKHRoaXMuZWwpIDogKCQuZGF0YSh0aGlzLmVsLCBcIl9pbnB1dG1hc2tfb3B0c1wiLCB0aGlzLm9wdHMpLFxyXG4gICAgICAgICAgICBtYXNrU2NvcGUoe1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcIm1hc2tcIixcclxuICAgICAgICAgICAgICAgIGVsOiB0aGlzLmVsXHJcbiAgICAgICAgICAgIH0pKSksIHRoaXMpIDogdm9pZCAwO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgdW5tYXNrZWR2YWx1ZTogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXNrU2NvcGUoe1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcInVubWFza2VkdmFsdWVcIixcclxuICAgICAgICAgICAgICAgIGVsOiB0aGlzLmVsLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXHJcbiAgICAgICAgICAgIH0sIHRoaXMuZWwgJiYgdGhpcy5lbC5pbnB1dG1hc2sgPyB0aGlzLmVsLmlucHV0bWFzay5tYXNrc2V0IDogZ2VuZXJhdGVNYXNrU2V0KHRoaXMub3B0cywgdGhpcy5ub01hc2tzQ2FjaGUpLCB0aGlzLm9wdHMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmVsID8gKG1hc2tTY29wZSh7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwicmVtb3ZlXCIsXHJcbiAgICAgICAgICAgICAgICBlbDogdGhpcy5lbFxyXG4gICAgICAgICAgICB9KSwgdGhpcy5lbC5pbnB1dG1hc2sgPSB2b2lkIDAsIHRoaXMuZWwpIDogdm9pZCAwO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0ZW1wdHltYXNrOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXNrU2NvcGUoe1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcImdldGVtcHR5bWFza1wiXHJcbiAgICAgICAgICAgIH0sIHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSksIHRoaXMub3B0cyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBoYXNNYXNrZWRWYWx1ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gIXRoaXMub3B0cy5hdXRvVW5tYXNrO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNDb21wbGV0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlKHtcclxuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJpc0NvbXBsZXRlXCIsXHJcbiAgICAgICAgICAgICAgICBlbDogdGhpcy5lbFxyXG4gICAgICAgICAgICB9LCB0aGlzLm1hc2tzZXQgfHwgZ2VuZXJhdGVNYXNrU2V0KHRoaXMub3B0cywgdGhpcy5ub01hc2tzQ2FjaGUpLCB0aGlzLm9wdHMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZ2V0bWV0YWRhdGE6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1hc2tTY29wZSh7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwiZ2V0bWV0YWRhdGFcIlxyXG4gICAgICAgICAgICB9LCB0aGlzLm1hc2tzZXQgfHwgZ2VuZXJhdGVNYXNrU2V0KHRoaXMub3B0cywgdGhpcy5ub01hc2tzQ2FjaGUpLCB0aGlzLm9wdHMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXNWYWxpZDogZnVuY3Rpb24gKHZhbHVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXNrU2NvcGUoe1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcImlzVmFsaWRcIixcclxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZVxyXG4gICAgICAgICAgICB9LCB0aGlzLm1hc2tzZXQgfHwgZ2VuZXJhdGVNYXNrU2V0KHRoaXMub3B0cywgdGhpcy5ub01hc2tzQ2FjaGUpLCB0aGlzLm9wdHMpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZm9ybWF0OiBmdW5jdGlvbiAodmFsdWUsIG1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXNrU2NvcGUoe1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcImZvcm1hdFwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlLFxyXG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IG1ldGFkYXRhXHJcbiAgICAgICAgICAgIH0sIHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSksIHRoaXMub3B0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgfSwgSW5wdXRtYXNrLmV4dGVuZERlZmF1bHRzID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICAkLmV4dGVuZCghMCwgSW5wdXRtYXNrLnByb3RvdHlwZS5kZWZhdWx0cywgb3B0aW9ucyk7XHJcbiAgICB9LCBJbnB1dG1hc2suZXh0ZW5kRGVmaW5pdGlvbnMgPSBmdW5jdGlvbiAoZGVmaW5pdGlvbikge1xyXG4gICAgICAgICQuZXh0ZW5kKCEwLCBJbnB1dG1hc2sucHJvdG90eXBlLmRlZmF1bHRzLmRlZmluaXRpb25zLCBkZWZpbml0aW9uKTtcclxuICAgIH0sIElucHV0bWFzay5leHRlbmRBbGlhc2VzID0gZnVuY3Rpb24gKGFsaWFzKSB7XHJcbiAgICAgICAgJC5leHRlbmQoITAsIElucHV0bWFzay5wcm90b3R5cGUuZGVmYXVsdHMuYWxpYXNlcywgYWxpYXMpO1xyXG4gICAgfSwgSW5wdXRtYXNrLmZvcm1hdCA9IGZ1bmN0aW9uICh2YWx1ZSwgb3B0aW9ucywgbWV0YWRhdGEpIHtcclxuICAgICAgICByZXR1cm4gSW5wdXRtYXNrKG9wdGlvbnMpLmZvcm1hdCh2YWx1ZSwgbWV0YWRhdGEpO1xyXG4gICAgfSwgSW5wdXRtYXNrLnVubWFzayA9IGZ1bmN0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiBJbnB1dG1hc2sob3B0aW9ucykudW5tYXNrZWR2YWx1ZSh2YWx1ZSk7XHJcbiAgICB9LCBJbnB1dG1hc2suaXNWYWxpZCA9IGZ1bmN0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiBJbnB1dG1hc2sob3B0aW9ucykuaXNWYWxpZCh2YWx1ZSk7XHJcbiAgICB9LCBJbnB1dG1hc2sucmVtb3ZlID0gZnVuY3Rpb24gKGVsZW1zKSB7XHJcbiAgICAgICAgJC5lYWNoKGVsZW1zLCBmdW5jdGlvbiAobmR4LCBlbCkge1xyXG4gICAgICAgICAgICBlbC5pbnB1dG1hc2sgJiYgZWwuaW5wdXRtYXNrLnJlbW92ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfSwgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4ID0gZnVuY3Rpb24gKHN0cikge1xyXG4gICAgICAgIHZhciBzcGVjaWFscyA9IFtcIi9cIiwgXCIuXCIsIFwiKlwiLCBcIitcIiwgXCI/XCIsIFwifFwiLCBcIihcIiwgXCIpXCIsIFwiW1wiLCBcIl1cIiwgXCJ7XCIsIFwifVwiLCBcIlxcXFxcIiwgXCIkXCIsIFwiXlwiXTtcclxuICAgICAgICByZXR1cm4gc3RyLnJlcGxhY2UobmV3IFJlZ0V4cChcIihcXFxcXCIgKyBzcGVjaWFscy5qb2luKFwifFxcXFxcIikgKyBcIilcIiwgXCJnaW1cIiksIFwiXFxcXCQxXCIpO1xyXG4gICAgfSwgSW5wdXRtYXNrLmtleUNvZGUgPSB7XHJcbiAgICAgICAgQUxUOiAxOCxcclxuICAgICAgICBCQUNLU1BBQ0U6IDgsXHJcbiAgICAgICAgQ0FQU19MT0NLOiAyMCxcclxuICAgICAgICBDT01NQTogMTg4LFxyXG4gICAgICAgIENPTU1BTkQ6IDkxLFxyXG4gICAgICAgIENPTU1BTkRfTEVGVDogOTEsXHJcbiAgICAgICAgQ09NTUFORF9SSUdIVDogOTMsXHJcbiAgICAgICAgQ09OVFJPTDogMTcsXHJcbiAgICAgICAgREVMRVRFOiA0NixcclxuICAgICAgICBET1dOOiA0MCxcclxuICAgICAgICBFTkQ6IDM1LFxyXG4gICAgICAgIEVOVEVSOiAxMyxcclxuICAgICAgICBFU0NBUEU6IDI3LFxyXG4gICAgICAgIEhPTUU6IDM2LFxyXG4gICAgICAgIElOU0VSVDogNDUsXHJcbiAgICAgICAgTEVGVDogMzcsXHJcbiAgICAgICAgTUVOVTogOTMsXHJcbiAgICAgICAgTlVNUEFEX0FERDogMTA3LFxyXG4gICAgICAgIE5VTVBBRF9ERUNJTUFMOiAxMTAsXHJcbiAgICAgICAgTlVNUEFEX0RJVklERTogMTExLFxyXG4gICAgICAgIE5VTVBBRF9FTlRFUjogMTA4LFxyXG4gICAgICAgIE5VTVBBRF9NVUxUSVBMWTogMTA2LFxyXG4gICAgICAgIE5VTVBBRF9TVUJUUkFDVDogMTA5LFxyXG4gICAgICAgIFBBR0VfRE9XTjogMzQsXHJcbiAgICAgICAgUEFHRV9VUDogMzMsXHJcbiAgICAgICAgUEVSSU9EOiAxOTAsXHJcbiAgICAgICAgUklHSFQ6IDM5LFxyXG4gICAgICAgIFNISUZUOiAxNixcclxuICAgICAgICBTUEFDRTogMzIsXHJcbiAgICAgICAgVEFCOiA5LFxyXG4gICAgICAgIFVQOiAzOCxcclxuICAgICAgICBXSU5ET1dTOiA5MVxyXG4gICAgfTtcclxuICAgIHZhciB1YSA9IG5hdmlnYXRvci51c2VyQWdlbnQsIGlwaG9uZSA9IG51bGwgIT09IHVhLm1hdGNoKG5ldyBSZWdFeHAoXCJpcGhvbmVcIiwgXCJpXCIpKSwgYW5kcm9pZCA9IG51bGwgIT09IHVhLm1hdGNoKG5ldyBSZWdFeHAoXCJhbmRyb2lkLipzYWZhcmkuKlwiLCBcImlcIikpLCBhbmRyb2lkY2hyb21lID0gbnVsbCAhPT0gdWEubWF0Y2gobmV3IFJlZ0V4cChcImFuZHJvaWQuKmNocm9tZS4qXCIsIFwiaVwiKSksIGFuZHJvaWRmaXJlZm94ID0gbnVsbCAhPT0gdWEubWF0Y2gobmV3IFJlZ0V4cChcImFuZHJvaWQuKmZpcmVmb3guKlwiLCBcImlcIikpLCBraW5kbGUgPSAvS2luZGxlL2kudGVzdCh1YSkgfHwgL1NpbGsvaS50ZXN0KHVhKSB8fCAvS0ZUVC9pLnRlc3QodWEpIHx8IC9LRk9UL2kudGVzdCh1YSkgfHwgL0tGSldBL2kudGVzdCh1YSkgfHwgL0tGSldJL2kudGVzdCh1YSkgfHwgL0tGU09XSS9pLnRlc3QodWEpIHx8IC9LRlRIV0EvaS50ZXN0KHVhKSB8fCAvS0ZUSFdJL2kudGVzdCh1YSkgfHwgL0tGQVBXQS9pLnRlc3QodWEpIHx8IC9LRkFQV0kvaS50ZXN0KHVhKSwgUGFzdGVFdmVudFR5cGUgPSBpc0lucHV0RXZlbnRTdXBwb3J0ZWQoXCJwYXN0ZVwiKSA/IFwicGFzdGVcIiA6IGlzSW5wdXRFdmVudFN1cHBvcnRlZChcImlucHV0XCIpID8gXCJpbnB1dFwiIDogXCJwcm9wZXJ0eWNoYW5nZVwiO1xyXG4gICAgcmV0dXJuIHdpbmRvdy5JbnB1dG1hc2sgPSBJbnB1dG1hc2ssIElucHV0bWFzaztcclxufShqUXVlcnkpLCBmdW5jdGlvbiAoJCwgSW5wdXRtYXNrKSB7XHJcbiAgICByZXR1cm4gdm9pZCAwID09PSAkLmZuLmlucHV0bWFzayAmJiAoJC5mbi5pbnB1dG1hc2sgPSBmdW5jdGlvbiAoZm4sIG9wdGlvbnMpIHtcclxuICAgICAgICB2YXIgbnB0bWFzaywgaW5wdXQ7XHJcbiAgICAgICAgaWYgKG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9LCBcInN0cmluZ1wiID09IHR5cGVvZiBmbikgc3dpdGNoIChmbikge1xyXG4gICAgICAgICAgICBjYXNlIFwibWFza1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5wdG1hc2sgPSBuZXcgSW5wdXRtYXNrKG9wdGlvbnMpLCB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5wdG1hc2subWFzayh0aGlzKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBcInVubWFza2VkdmFsdWVcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dCA9IHRoaXMuanF1ZXJ5ICYmIHRoaXMubGVuZ3RoID4gMCA/IHRoaXNbMF0gOiB0aGlzLCBpbnB1dC5pbnB1dG1hc2sgPyBpbnB1dC5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpIDogJChpbnB1dCkudmFsKCk7XHJcblxyXG4gICAgICAgICAgICBjYXNlIFwicmVtb3ZlXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmlucHV0bWFzayAmJiB0aGlzLmlucHV0bWFzay5yZW1vdmUoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBcImdldGVtcHR5bWFza1wiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0ID0gdGhpcy5qcXVlcnkgJiYgdGhpcy5sZW5ndGggPiAwID8gdGhpc1swXSA6IHRoaXMsIGlucHV0LmlucHV0bWFzayA/IGlucHV0LmlucHV0bWFzay5nZXRlbXB0eW1hc2soKSA6IFwiXCI7XHJcblxyXG4gICAgICAgICAgICBjYXNlIFwiaGFzTWFza2VkVmFsdWVcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dCA9IHRoaXMuanF1ZXJ5ICYmIHRoaXMubGVuZ3RoID4gMCA/IHRoaXNbMF0gOiB0aGlzLCBpbnB1dC5pbnB1dG1hc2sgPyBpbnB1dC5pbnB1dG1hc2suaGFzTWFza2VkVmFsdWUoKSA6ICExO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBcImlzQ29tcGxldGVcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dCA9IHRoaXMuanF1ZXJ5ICYmIHRoaXMubGVuZ3RoID4gMCA/IHRoaXNbMF0gOiB0aGlzLCBpbnB1dC5pbnB1dG1hc2sgPyBpbnB1dC5pbnB1dG1hc2suaXNDb21wbGV0ZSgpIDogITA7XHJcblxyXG4gICAgICAgICAgICBjYXNlIFwiZ2V0bWV0YWRhdGFcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBpbnB1dCA9IHRoaXMuanF1ZXJ5ICYmIHRoaXMubGVuZ3RoID4gMCA/IHRoaXNbMF0gOiB0aGlzLCBpbnB1dC5pbnB1dG1hc2sgPyBpbnB1dC5pbnB1dG1hc2suZ2V0bWV0YWRhdGEoKSA6IHZvaWQgMDtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJzZXR2YWx1ZVwiOlxyXG4gICAgICAgICAgICAgICAgaW5wdXQgPSB0aGlzLmpxdWVyeSAmJiB0aGlzLmxlbmd0aCA+IDAgPyB0aGlzWzBdIDogdGhpcywgJChpbnB1dCkudmFsKG9wdGlvbnMpLFxyXG4gICAgICAgICAgICAgICAgdm9pZCAwICE9PSBpbnB1dC5pbnB1dG1hc2sgJiYgJChpbnB1dCkudHJpZ2dlckhhbmRsZXIoXCJzZXR2YWx1ZS5pbnB1dG1hc2tcIik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJvcHRpb25cIjpcclxuICAgICAgICAgICAgICAgIGlmIChcInN0cmluZ1wiICE9IHR5cGVvZiBvcHRpb25zKSByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwICE9PSB0aGlzLmlucHV0bWFzayA/IHRoaXMuaW5wdXRtYXNrLm9wdGlvbihvcHRpb25zKSA6IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ID0gdGhpcy5qcXVlcnkgJiYgdGhpcy5sZW5ndGggPiAwID8gdGhpc1swXSA6IHRoaXMsIHZvaWQgMCAhPT0gaW5wdXQuaW5wdXRtYXNrKSByZXR1cm4gaW5wdXQuaW5wdXRtYXNrLm9wdGlvbihvcHRpb25zKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiBvcHRpb25zLmFsaWFzID0gZm4sIG5wdG1hc2sgPSBuZXcgSW5wdXRtYXNrKG9wdGlvbnMpLCB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIG5wdG1hc2subWFzayh0aGlzKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIGlmIChcIm9iamVjdFwiID09IHR5cGVvZiBmbikgcmV0dXJuIG5wdG1hc2sgPSBuZXcgSW5wdXRtYXNrKGZuKSwgdm9pZCAwID09PSBmbi5tYXNrICYmIHZvaWQgMCA9PT0gZm4uYWxpYXMgPyB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gdGhpcy5pbnB1dG1hc2sgPyB0aGlzLmlucHV0bWFzay5vcHRpb24oZm4pIDogdm9pZCBucHRtYXNrLm1hc2sodGhpcyk7XHJcbiAgICAgICAgICAgIH0pIDogdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIG5wdG1hc2subWFzayh0aGlzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IGZuKSByZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIG5wdG1hc2sgPSBuZXcgSW5wdXRtYXNrKG9wdGlvbnMpLCBucHRtYXNrLm1hc2sodGhpcyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgIH0pLCAkLmZuLmlucHV0bWFzaztcclxufShqUXVlcnksIElucHV0bWFzayksIGZ1bmN0aW9uICgkLCBJbnB1dG1hc2spIHtcclxuICAgIHJldHVybiBJbnB1dG1hc2suZXh0ZW5kRGVmaW5pdGlvbnMoe1xyXG4gICAgICAgIGg6IHtcclxuICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswMV1bMC05XXwyWzAtM11cIixcclxuICAgICAgICAgICAgY2FyZGluYWxpdHk6IDIsXHJcbiAgICAgICAgICAgIHByZXZhbGlkYXRvcjogW3tcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC0yXVwiLFxyXG4gICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDFcclxuICAgICAgICAgICAgfV1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHM6IHtcclxuICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTVdWzAtOV1cIixcclxuICAgICAgICAgICAgY2FyZGluYWxpdHk6IDIsXHJcbiAgICAgICAgICAgIHByZXZhbGlkYXRvcjogW3tcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC01XVwiLFxyXG4gICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDFcclxuICAgICAgICAgICAgfV1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGQ6IHtcclxuICAgICAgICAgICAgdmFsaWRhdG9yOiBcIjBbMS05XXxbMTJdWzAtOV18M1swMV1cIixcclxuICAgICAgICAgICAgY2FyZGluYWxpdHk6IDIsXHJcbiAgICAgICAgICAgIHByZXZhbGlkYXRvcjogW3tcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC0zXVwiLFxyXG4gICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDFcclxuICAgICAgICAgICAgfV1cclxuICAgICAgICB9LFxyXG4gICAgICAgIG06IHtcclxuICAgICAgICAgICAgdmFsaWRhdG9yOiBcIjBbMS05XXwxWzAxMl1cIixcclxuICAgICAgICAgICAgY2FyZGluYWxpdHk6IDIsXHJcbiAgICAgICAgICAgIHByZXZhbGlkYXRvcjogW3tcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMDFdXCIsXHJcbiAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxyXG4gICAgICAgICAgICB9XVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgeToge1xyXG4gICAgICAgICAgICB2YWxpZGF0b3I6IFwiKDE5fDIwKVxcXFxkezJ9XCIsXHJcbiAgICAgICAgICAgIGNhcmRpbmFsaXR5OiA0LFxyXG4gICAgICAgICAgICBwcmV2YWxpZGF0b3I6IFt7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiWzEyXVwiLFxyXG4gICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDFcclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIigxOXwyMClcIixcclxuICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAyXHJcbiAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCIoMTl8MjApXFxcXGRcIixcclxuICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAzXHJcbiAgICAgICAgICAgIH1dXHJcbiAgICAgICAgfVxyXG4gICAgfSksIElucHV0bWFzay5leHRlbmRBbGlhc2VzKHtcclxuICAgICAgICBcImRkL21tL3l5eXlcIjoge1xyXG4gICAgICAgICAgICBtYXNrOiBcIjEvMi95XCIsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcImRkL21tL3l5eXlcIixcclxuICAgICAgICAgICAgcmVnZXg6IHtcclxuICAgICAgICAgICAgICAgIHZhbDFwcmU6IG5ldyBSZWdFeHAoXCJbMC0zXVwiKSxcclxuICAgICAgICAgICAgICAgIHZhbDE6IG5ldyBSZWdFeHAoXCIwWzEtOV18WzEyXVswLTldfDNbMDFdXCIpLFxyXG4gICAgICAgICAgICAgICAgdmFsMnByZTogZnVuY3Rpb24gKHNlcGFyYXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlc2NhcGVkU2VwYXJhdG9yID0gSW5wdXRtYXNrLmVzY2FwZVJlZ2V4LmNhbGwodGhpcywgc2VwYXJhdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChcIigoMFsxLTldfFsxMl1bMC05XXwzWzAxXSlcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIlswMV0pXCIpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHZhbDI6IGZ1bmN0aW9uIChzZXBhcmF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXNjYXBlZFNlcGFyYXRvciA9IElucHV0bWFzay5lc2NhcGVSZWdleC5jYWxsKHRoaXMsIHNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoKDBbMS05XXxbMTJdWzAtOV0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIoMFsxLTldfDFbMDEyXSkpfCgzMFwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiKDBbMTMtOV18MVswMTJdKSl8KDMxXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIoMFsxMzU3OF18MVswMl0pKVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGVhcGRheTogXCIyOS8wMi9cIixcclxuICAgICAgICAgICAgc2VwYXJhdG9yOiBcIi9cIixcclxuICAgICAgICAgICAgeWVhcnJhbmdlOiB7XHJcbiAgICAgICAgICAgICAgICBtaW55ZWFyOiAxOTAwLFxyXG4gICAgICAgICAgICAgICAgbWF4eWVhcjogMjA5OVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpc0luWWVhclJhbmdlOiBmdW5jdGlvbiAoY2hycywgbWlueWVhciwgbWF4eWVhcikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzTmFOKGNocnMpKSByZXR1cm4gITE7XHJcbiAgICAgICAgICAgICAgICB2YXIgZW50ZXJlZHllYXIgPSBwYXJzZUludChjaHJzLmNvbmNhdChtaW55ZWFyLnRvU3RyaW5nKCkuc2xpY2UoY2hycy5sZW5ndGgpKSksIGVudGVyZWR5ZWFyMiA9IHBhcnNlSW50KGNocnMuY29uY2F0KG1heHllYXIudG9TdHJpbmcoKS5zbGljZShjaHJzLmxlbmd0aCkpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAoaXNOYU4oZW50ZXJlZHllYXIpID8gITEgOiBlbnRlcmVkeWVhciA+PSBtaW55ZWFyICYmIG1heHllYXIgPj0gZW50ZXJlZHllYXIpIHx8IChpc05hTihlbnRlcmVkeWVhcjIpID8gITEgOiBlbnRlcmVkeWVhcjIgPj0gbWlueWVhciAmJiBtYXh5ZWFyID49IGVudGVyZWR5ZWFyMik7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRldGVybWluZWJhc2V5ZWFyOiBmdW5jdGlvbiAobWlueWVhciwgbWF4eWVhciwgaGludCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGN1cnJlbnR5ZWFyID0gbmV3IERhdGUoKS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG1pbnllYXIgPiBjdXJyZW50eWVhcikgcmV0dXJuIG1pbnllYXI7XHJcbiAgICAgICAgICAgICAgICBpZiAoY3VycmVudHllYXIgPiBtYXh5ZWFyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbWF4WWVhclByZWZpeCA9IG1heHllYXIudG9TdHJpbmcoKS5zbGljZSgwLCAyKSwgbWF4WWVhclBvc3RmaXggPSBtYXh5ZWFyLnRvU3RyaW5nKCkuc2xpY2UoMiwgNCkgOyBtYXhZZWFyUHJlZml4ICsgaGludCA+IG1heHllYXI7KSBtYXhZZWFyUHJlZml4LS07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1heHhZZWFyID0gbWF4WWVhclByZWZpeCArIG1heFllYXJQb3N0Zml4O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBtaW55ZWFyID4gbWF4eFllYXIgPyBtaW55ZWFyIDogbWF4eFllYXI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY3VycmVudHllYXI7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uS2V5RG93bjogZnVuY3Rpb24gKGUsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUuY3RybEtleSAmJiBlLmtleUNvZGUgPT09IElucHV0bWFzay5rZXlDb2RlLlJJR0hUKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvZGF5ID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAkaW5wdXQudmFsKHRvZGF5LmdldERhdGUoKS50b1N0cmluZygpICsgKHRvZGF5LmdldE1vbnRoKCkgKyAxKS50b1N0cmluZygpICsgdG9kYXkuZ2V0RnVsbFllYXIoKS50b1N0cmluZygpKSxcclxuICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcInNldHZhbHVlLmlucHV0bWFza1wiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ2V0RnJvbnRWYWx1ZTogZnVuY3Rpb24gKG1hc2ssIGJ1ZmZlciwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgc3RhcnQgPSAwLCBsZW5ndGggPSAwLCBpID0gMDsgaSA8IG1hc2subGVuZ3RoICYmIFwiMlwiICE9PSBtYXNrLmNoYXJBdChpKSA7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWZpbml0aW9uID0gb3B0cy5kZWZpbml0aW9uc1ttYXNrLmNoYXJBdChpKV07XHJcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvbiA/IChzdGFydCArPSBsZW5ndGgsIGxlbmd0aCA9IGRlZmluaXRpb24uY2FyZGluYWxpdHkpIDogbGVuZ3RoKys7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYnVmZmVyLmpvaW4oXCJcIikuc3Vic3RyKHN0YXJ0LCBsZW5ndGgpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkZWZpbml0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgXCIxXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIChjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IG9wdHMucmVnZXgudmFsMS50ZXN0KGNocnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaWN0IHx8IGlzVmFsaWQgfHwgY2hycy5jaGFyQXQoMSkgIT09IG9wdHMuc2VwYXJhdG9yICYmIC0xID09PSBcIi0uL1wiLmluZGV4T2YoY2hycy5jaGFyQXQoMSkpIHx8ICEoaXNWYWxpZCA9IG9wdHMucmVnZXgudmFsMS50ZXN0KFwiMFwiICsgY2hycy5jaGFyQXQoMCkpKSA/IGlzVmFsaWQgOiAobWFza3NldC5idWZmZXJbcG9zIC0gMV0gPSBcIjBcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogcG9zIC0gMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHBvc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogY2hycy5jaGFyQXQoMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMixcclxuICAgICAgICAgICAgICAgICAgICBwcmV2YWxpZGF0b3I6IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGNocnMgPSBjaHJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNOYU4obWFza3NldC5idWZmZXJbcG9zICsgMV0pIHx8IChwY2hycyArPSBtYXNrc2V0LmJ1ZmZlcltwb3MgKyAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IDEgPT09IHBjaHJzLmxlbmd0aCA/IG9wdHMucmVnZXgudmFsMXByZS50ZXN0KHBjaHJzKSA6IG9wdHMucmVnZXgudmFsMS50ZXN0KHBjaHJzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RyaWN0ICYmICFpc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQgPSBvcHRzLnJlZ2V4LnZhbDEudGVzdChjaHJzICsgXCIwXCIpKSByZXR1cm4gbWFza3NldC5idWZmZXJbcG9zXSA9IGNocnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza3NldC5idWZmZXJbKytwb3NdID0gXCIwXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IFwiMFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCA9IG9wdHMucmVnZXgudmFsMS50ZXN0KFwiMFwiICsgY2hycykpIHJldHVybiBtYXNrc2V0LmJ1ZmZlcltwb3NdID0gXCIwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zKyssIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXHJcbiAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBcIjJcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmcm9udFZhbHVlID0gb3B0cy5nZXRGcm9udFZhbHVlKG1hc2tzZXQubWFzaywgbWFza3NldC5idWZmZXIsIG9wdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAtMSAhPT0gZnJvbnRWYWx1ZS5pbmRleE9mKG9wdHMucGxhY2Vob2xkZXJbMF0pICYmIChmcm9udFZhbHVlID0gXCIwMVwiICsgb3B0cy5zZXBhcmF0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IG9wdHMucmVnZXgudmFsMihvcHRzLnNlcGFyYXRvcikudGVzdChmcm9udFZhbHVlICsgY2hycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RyaWN0ICYmICFpc1ZhbGlkICYmIChjaHJzLmNoYXJBdCgxKSA9PT0gb3B0cy5zZXBhcmF0b3IgfHwgLTEgIT09IFwiLS4vXCIuaW5kZXhPZihjaHJzLmNoYXJBdCgxKSkpICYmIChpc1ZhbGlkID0gb3B0cy5yZWdleC52YWwyKG9wdHMuc2VwYXJhdG9yKS50ZXN0KGZyb250VmFsdWUgKyBcIjBcIiArIGNocnMuY2hhckF0KDApKSkpIHJldHVybiBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAxXSA9IFwiMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBwb3MgLSAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogcG9zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBjaHJzLmNoYXJBdCgwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5tYXNrLmluZGV4T2YoXCIyXCIpID09PSBvcHRzLm1hc2subGVuZ3RoIC0gMSAmJiBpc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF5TW9udGhWYWx1ZSA9IG1hc2tzZXQuYnVmZmVyLmpvaW4oXCJcIikuc3Vic3RyKDQsIDQpICsgY2hycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXlNb250aFZhbHVlICE9PSBvcHRzLmxlYXBkYXkpIHJldHVybiAhMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5ZWFyID0gcGFyc2VJbnQobWFza3NldC5idWZmZXIuam9pbihcIlwiKS5zdWJzdHIoMCwgNCksIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB5ZWFyICUgNCA9PT0gMCA/IHllYXIgJSAxMDAgPT09IDAgPyB5ZWFyICUgNDAwID09PSAwID8gITAgOiAhMSA6ICEwIDogITE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMixcclxuICAgICAgICAgICAgICAgICAgICBwcmV2YWxpZGF0b3I6IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc05hTihtYXNrc2V0LmJ1ZmZlcltwb3MgKyAxXSkgfHwgKGNocnMgKz0gbWFza3NldC5idWZmZXJbcG9zICsgMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZyb250VmFsdWUgPSBvcHRzLmdldEZyb250VmFsdWUobWFza3NldC5tYXNrLCBtYXNrc2V0LmJ1ZmZlciwgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAtMSAhPT0gZnJvbnRWYWx1ZS5pbmRleE9mKG9wdHMucGxhY2Vob2xkZXJbMF0pICYmIChmcm9udFZhbHVlID0gXCIwMVwiICsgb3B0cy5zZXBhcmF0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSAxID09PSBjaHJzLmxlbmd0aCA/IG9wdHMucmVnZXgudmFsMnByZShvcHRzLnNlcGFyYXRvcikudGVzdChmcm9udFZhbHVlICsgY2hycykgOiBvcHRzLnJlZ2V4LnZhbDIob3B0cy5zZXBhcmF0b3IpLnRlc3QoZnJvbnRWYWx1ZSArIGNocnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmljdCB8fCBpc1ZhbGlkIHx8ICEoaXNWYWxpZCA9IG9wdHMucmVnZXgudmFsMihvcHRzLnNlcGFyYXRvcikudGVzdChmcm9udFZhbHVlICsgXCIwXCIgKyBjaHJzKSkgPyBpc1ZhbGlkIDogKG1hc2tzZXQuYnVmZmVyW3Bvc10gPSBcIjBcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcysrLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxyXG4gICAgICAgICAgICAgICAgICAgIH1dXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgeToge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmlzSW5ZZWFyUmFuZ2UoY2hycywgb3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhcikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXlNb250aFZhbHVlID0gbWFza3NldC5idWZmZXIuam9pbihcIlwiKS5zdWJzdHIoMCwgNik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF5TW9udGhWYWx1ZSAhPT0gb3B0cy5sZWFwZGF5KSByZXR1cm4gITA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeWVhciA9IHBhcnNlSW50KGNocnMsIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB5ZWFyICUgNCA9PT0gMCA/IHllYXIgJSAxMDAgPT09IDAgPyB5ZWFyICUgNDAwID09PSAwID8gITAgOiAhMSA6ICEwIDogITE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICExO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDQsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmFsaWRhdG9yOiBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIChjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBvcHRzLmlzSW5ZZWFyUmFuZ2UoY2hycywgb3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0cmljdCAmJiAhaXNWYWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5ZWFyUHJlZml4ID0gb3B0cy5kZXRlcm1pbmViYXNleWVhcihvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyLCBjaHJzICsgXCIwXCIpLnRvU3RyaW5nKCkuc2xpY2UoMCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQgPSBvcHRzLmlzSW5ZZWFyUmFuZ2UoeWVhclByZWZpeCArIGNocnMsIG9wdHMueWVhcnJhbmdlLm1pbnllYXIsIG9wdHMueWVhcnJhbmdlLm1heHllYXIpKSByZXR1cm4gbWFza3NldC5idWZmZXJbcG9zKytdID0geWVhclByZWZpeC5jaGFyQXQoMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHllYXJQcmVmaXggPSBvcHRzLmRldGVybWluZWJhc2V5ZWFyKG9wdHMueWVhcnJhbmdlLm1pbnllYXIsIG9wdHMueWVhcnJhbmdlLm1heHllYXIsIGNocnMgKyBcIjBcIikudG9TdHJpbmcoKS5zbGljZSgwLCAyKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gb3B0cy5pc0luWWVhclJhbmdlKHllYXJQcmVmaXggKyBjaHJzLCBvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyKSkgcmV0dXJuIG1hc2tzZXQuYnVmZmVyW3BvcysrXSA9IHllYXJQcmVmaXguY2hhckF0KDApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tzZXQuYnVmZmVyW3BvcysrXSA9IHllYXJQcmVmaXguY2hhckF0KDEpLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gb3B0cy5pc0luWWVhclJhbmdlKGNocnMsIG9wdHMueWVhcnJhbmdlLm1pbnllYXIsIG9wdHMueWVhcnJhbmdlLm1heHllYXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdHJpY3QgJiYgIWlzVmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeWVhclByZWZpeCA9IG9wdHMuZGV0ZXJtaW5lYmFzZXllYXIob3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhciwgY2hycykudG9TdHJpbmcoKS5zbGljZSgwLCAyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCA9IG9wdHMuaXNJblllYXJSYW5nZShjaHJzWzBdICsgeWVhclByZWZpeFsxXSArIGNocnNbMV0sIG9wdHMueWVhcnJhbmdlLm1pbnllYXIsIG9wdHMueWVhcnJhbmdlLm1heHllYXIpKSByZXR1cm4gbWFza3NldC5idWZmZXJbcG9zKytdID0geWVhclByZWZpeC5jaGFyQXQoMSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHllYXJQcmVmaXggPSBvcHRzLmRldGVybWluZWJhc2V5ZWFyKG9wdHMueWVhcnJhbmdlLm1pbnllYXIsIG9wdHMueWVhcnJhbmdlLm1heHllYXIsIGNocnMpLnRvU3RyaW5nKCkuc2xpY2UoMCwgMiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5pc0luWWVhclJhbmdlKHllYXJQcmVmaXggKyBjaHJzLCBvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF5TW9udGhWYWx1ZSA9IG1hc2tzZXQuYnVmZmVyLmpvaW4oXCJcIikuc3Vic3RyKDAsIDYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGF5TW9udGhWYWx1ZSAhPT0gb3B0cy5sZWFwZGF5KSBpc1ZhbGlkID0gITA7IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHllYXIgPSBwYXJzZUludChjaHJzLCAxMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0geWVhciAlIDQgPT09IDAgPyB5ZWFyICUgMTAwID09PSAwID8geWVhciAlIDQwMCA9PT0gMCA/ICEwIDogITEgOiAhMCA6ICExO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlzVmFsaWQgPSAhMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCkgcmV0dXJuIG1hc2tzZXQuYnVmZmVyW3BvcyAtIDFdID0geWVhclByZWZpeC5jaGFyQXQoMCksIG1hc2tzZXQuYnVmZmVyW3BvcysrXSA9IHllYXJQcmVmaXguY2hhckF0KDEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tzZXQuYnVmZmVyW3BvcysrXSA9IGNocnMuY2hhckF0KDApLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogcG9zIC0gMyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogcG9zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMlxyXG4gICAgICAgICAgICAgICAgICAgIH0sIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHRzLmlzSW5ZZWFyUmFuZ2UoY2hycywgb3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAzXHJcbiAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW5zZXJ0TW9kZTogITEsXHJcbiAgICAgICAgICAgIGF1dG9Vbm1hc2s6ICExXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcIm1tL2RkL3l5eXlcIjoge1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJtbS9kZC95eXl5XCIsXHJcbiAgICAgICAgICAgIGFsaWFzOiBcImRkL21tL3l5eXlcIixcclxuICAgICAgICAgICAgcmVnZXg6IHtcclxuICAgICAgICAgICAgICAgIHZhbDJwcmU6IGZ1bmN0aW9uIChzZXBhcmF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXNjYXBlZFNlcGFyYXRvciA9IElucHV0bWFzay5lc2NhcGVSZWdleC5jYWxsKHRoaXMsIHNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoKDBbMTMtOV18MVswMTJdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiWzAtM10pfCgwMlwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiWzAtMl0pXCIpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHZhbDI6IGZ1bmN0aW9uIChzZXBhcmF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXNjYXBlZFNlcGFyYXRvciA9IElucHV0bWFzay5lc2NhcGVSZWdleC5jYWxsKHRoaXMsIHNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoKDBbMS05XXwxWzAxMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIoMFsxLTldfFsxMl1bMC05XSkpfCgoMFsxMy05XXwxWzAxMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIzMCl8KCgwWzEzNTc4XXwxWzAyXSlcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIjMxKVwiKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB2YWwxcHJlOiBuZXcgUmVnRXhwKFwiWzAxXVwiKSxcclxuICAgICAgICAgICAgICAgIHZhbDE6IG5ldyBSZWdFeHAoXCIwWzEtOV18MVswMTJdXCIpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxlYXBkYXk6IFwiMDIvMjkvXCIsXHJcbiAgICAgICAgICAgIG9uS2V5RG93bjogZnVuY3Rpb24gKGUsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUuY3RybEtleSAmJiBlLmtleUNvZGUgPT09IElucHV0bWFzay5rZXlDb2RlLlJJR0hUKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvZGF5ID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAkaW5wdXQudmFsKCh0b2RheS5nZXRNb250aCgpICsgMSkudG9TdHJpbmcoKSArIHRvZGF5LmdldERhdGUoKS50b1N0cmluZygpICsgdG9kYXkuZ2V0RnVsbFllYXIoKS50b1N0cmluZygpKSxcclxuICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcInNldHZhbHVlLmlucHV0bWFza1wiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJ5eXl5L21tL2RkXCI6IHtcclxuICAgICAgICAgICAgbWFzazogXCJ5LzEvMlwiLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJ5eXl5L21tL2RkXCIsXHJcbiAgICAgICAgICAgIGFsaWFzOiBcIm1tL2RkL3l5eXlcIixcclxuICAgICAgICAgICAgbGVhcGRheTogXCIvMDIvMjlcIixcclxuICAgICAgICAgICAgb25LZXlEb3duOiBmdW5jdGlvbiAoZSwgYnVmZmVyLCBjYXJldFBvcywgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5jdHJsS2V5ICYmIGUua2V5Q29kZSA9PT0gSW5wdXRtYXNrLmtleUNvZGUuUklHSFQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC52YWwodG9kYXkuZ2V0RnVsbFllYXIoKS50b1N0cmluZygpICsgKHRvZGF5LmdldE1vbnRoKCkgKyAxKS50b1N0cmluZygpICsgdG9kYXkuZ2V0RGF0ZSgpLnRvU3RyaW5nKCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwic2V0dmFsdWUuaW5wdXRtYXNrXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImRkLm1tLnl5eXlcIjoge1xyXG4gICAgICAgICAgICBtYXNrOiBcIjEuMi55XCIsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcImRkLm1tLnl5eXlcIixcclxuICAgICAgICAgICAgbGVhcGRheTogXCIyOS4wMi5cIixcclxuICAgICAgICAgICAgc2VwYXJhdG9yOiBcIi5cIixcclxuICAgICAgICAgICAgYWxpYXM6IFwiZGQvbW0veXl5eVwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImRkLW1tLXl5eXlcIjoge1xyXG4gICAgICAgICAgICBtYXNrOiBcIjEtMi15XCIsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcImRkLW1tLXl5eXlcIixcclxuICAgICAgICAgICAgbGVhcGRheTogXCIyOS0wMi1cIixcclxuICAgICAgICAgICAgc2VwYXJhdG9yOiBcIi1cIixcclxuICAgICAgICAgICAgYWxpYXM6IFwiZGQvbW0veXl5eVwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcIm1tLmRkLnl5eXlcIjoge1xyXG4gICAgICAgICAgICBtYXNrOiBcIjEuMi55XCIsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIm1tLmRkLnl5eXlcIixcclxuICAgICAgICAgICAgbGVhcGRheTogXCIwMi4yOS5cIixcclxuICAgICAgICAgICAgc2VwYXJhdG9yOiBcIi5cIixcclxuICAgICAgICAgICAgYWxpYXM6IFwibW0vZGQveXl5eVwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcIm1tLWRkLXl5eXlcIjoge1xyXG4gICAgICAgICAgICBtYXNrOiBcIjEtMi15XCIsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIm1tLWRkLXl5eXlcIixcclxuICAgICAgICAgICAgbGVhcGRheTogXCIwMi0yOS1cIixcclxuICAgICAgICAgICAgc2VwYXJhdG9yOiBcIi1cIixcclxuICAgICAgICAgICAgYWxpYXM6IFwibW0vZGQveXl5eVwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcInl5eXkubW0uZGRcIjoge1xyXG4gICAgICAgICAgICBtYXNrOiBcInkuMS4yXCIsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcInl5eXkubW0uZGRcIixcclxuICAgICAgICAgICAgbGVhcGRheTogXCIuMDIuMjlcIixcclxuICAgICAgICAgICAgc2VwYXJhdG9yOiBcIi5cIixcclxuICAgICAgICAgICAgYWxpYXM6IFwieXl5eS9tbS9kZFwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcInl5eXktbW0tZGRcIjoge1xyXG4gICAgICAgICAgICBtYXNrOiBcInktMS0yXCIsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcInl5eXktbW0tZGRcIixcclxuICAgICAgICAgICAgbGVhcGRheTogXCItMDItMjlcIixcclxuICAgICAgICAgICAgc2VwYXJhdG9yOiBcIi1cIixcclxuICAgICAgICAgICAgYWxpYXM6IFwieXl5eS9tbS9kZFwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkYXRldGltZToge1xyXG4gICAgICAgICAgICBtYXNrOiBcIjEvMi95IGg6c1wiLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJkZC9tbS95eXl5IGhoOm1tXCIsXHJcbiAgICAgICAgICAgIGFsaWFzOiBcImRkL21tL3l5eXlcIixcclxuICAgICAgICAgICAgcmVnZXg6IHtcclxuICAgICAgICAgICAgICAgIGhyc3ByZTogbmV3IFJlZ0V4cChcIlswMTJdXCIpLFxyXG4gICAgICAgICAgICAgICAgaHJzMjQ6IG5ldyBSZWdFeHAoXCIyWzAtNF18MVszLTldXCIpLFxyXG4gICAgICAgICAgICAgICAgaHJzOiBuZXcgUmVnRXhwKFwiWzAxXVswLTldfDJbMC00XVwiKSxcclxuICAgICAgICAgICAgICAgIGFtcG06IG5ldyBSZWdFeHAoXCJeW2F8cHxBfFBdW218TV1cIiksXHJcbiAgICAgICAgICAgICAgICBtc3ByZTogbmV3IFJlZ0V4cChcIlswLTVdXCIpLFxyXG4gICAgICAgICAgICAgICAgbXM6IG5ldyBSZWdFeHAoXCJbMC01XVswLTldXCIpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRpbWVzZXBhcmF0b3I6IFwiOlwiLFxyXG4gICAgICAgICAgICBob3VyRm9ybWF0OiBcIjI0XCIsXHJcbiAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBoOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiMjRcIiA9PT0gb3B0cy5ob3VyRm9ybWF0ICYmIDI0ID09PSBwYXJzZUludChjaHJzLCAxMCkpIHJldHVybiBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAxXSA9IFwiMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrc2V0LmJ1ZmZlcltwb3NdID0gXCIwXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHBvcyAtIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBwb3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBcIjBcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IG9wdHMucmVnZXguaHJzLnRlc3QoY2hycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RyaWN0ICYmICFpc1ZhbGlkICYmIChjaHJzLmNoYXJBdCgxKSA9PT0gb3B0cy50aW1lc2VwYXJhdG9yIHx8IC0xICE9PSBcIi0uOlwiLmluZGV4T2YoY2hycy5jaGFyQXQoMSkpKSAmJiAoaXNWYWxpZCA9IG9wdHMucmVnZXguaHJzLnRlc3QoXCIwXCIgKyBjaHJzLmNoYXJBdCgwKSkpKSByZXR1cm4gbWFza3NldC5idWZmZXJbcG9zIC0gMV0gPSBcIjBcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza3NldC5idWZmZXJbcG9zXSA9IGNocnMuY2hhckF0KDApLCBwb3MrKywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogcG9zIC0gMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHBvc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogb3B0cy50aW1lc2VwYXJhdG9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkICYmIFwiMjRcIiAhPT0gb3B0cy5ob3VyRm9ybWF0ICYmIG9wdHMucmVnZXguaHJzMjQudGVzdChjaHJzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcCA9IHBhcnNlSW50KGNocnMsIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAyNCA9PT0gdG1wID8gKG1hc2tzZXQuYnVmZmVyW3BvcyArIDVdID0gXCJhXCIsIG1hc2tzZXQuYnVmZmVyW3BvcyArIDZdID0gXCJtXCIpIDogKG1hc2tzZXQuYnVmZmVyW3BvcyArIDVdID0gXCJwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrc2V0LmJ1ZmZlcltwb3MgKyA2XSA9IFwibVwiKSwgdG1wIC09IDEyLCAxMCA+IHRtcCA/IChtYXNrc2V0LmJ1ZmZlcltwb3NdID0gdG1wLnRvU3RyaW5nKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAxXSA9IFwiMFwiKSA6IChtYXNrc2V0LmJ1ZmZlcltwb3NdID0gdG1wLnRvU3RyaW5nKCkuY2hhckF0KDEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza3NldC5idWZmZXJbcG9zIC0gMV0gPSB0bXAudG9TdHJpbmcoKS5jaGFyQXQoMCkpLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHBvcyAtIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogcG9zICsgNlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogbWFza3NldC5idWZmZXJbcG9zXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNWYWxpZDtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAyLFxyXG4gICAgICAgICAgICAgICAgICAgIHByZXZhbGlkYXRvcjogW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gb3B0cy5yZWdleC5ocnNwcmUudGVzdChjaHJzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpY3QgfHwgaXNWYWxpZCB8fCAhKGlzVmFsaWQgPSBvcHRzLnJlZ2V4Lmhycy50ZXN0KFwiMFwiICsgY2hycykpID8gaXNWYWxpZCA6IChtYXNrc2V0LmJ1ZmZlcltwb3NdID0gXCIwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MrKywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDFcclxuICAgICAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHM6IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiWzAtNV1bMC05XVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAyLFxyXG4gICAgICAgICAgICAgICAgICAgIHByZXZhbGlkYXRvcjogW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gb3B0cy5yZWdleC5tc3ByZS50ZXN0KGNocnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmljdCB8fCBpc1ZhbGlkIHx8ICEoaXNWYWxpZCA9IG9wdHMucmVnZXgubXMudGVzdChcIjBcIiArIGNocnMpKSA/IGlzVmFsaWQgOiAobWFza3NldC5idWZmZXJbcG9zXSA9IFwiMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zKyssIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXHJcbiAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMucmVnZXguYW1wbS50ZXN0KGNocnMgKyBcIm1cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjYXNpbmc6IFwibG93ZXJcIixcclxuICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbnNlcnRNb2RlOiAhMSxcclxuICAgICAgICAgICAgYXV0b1VubWFzazogITFcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRhdGV0aW1lMTI6IHtcclxuICAgICAgICAgICAgbWFzazogXCIxLzIveSBoOnMgdFxcXFxtXCIsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcImRkL21tL3l5eXkgaGg6bW0geG1cIixcclxuICAgICAgICAgICAgYWxpYXM6IFwiZGF0ZXRpbWVcIixcclxuICAgICAgICAgICAgaG91ckZvcm1hdDogXCIxMlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcIm1tL2RkL3l5eXkgaGg6bW0geG1cIjoge1xyXG4gICAgICAgICAgICBtYXNrOiBcIjEvMi95IGg6cyB0XFxcXG1cIixcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwibW0vZGQveXl5eSBoaDptbSB4bVwiLFxyXG4gICAgICAgICAgICBhbGlhczogXCJkYXRldGltZTEyXCIsXHJcbiAgICAgICAgICAgIHJlZ2V4OiB7XHJcbiAgICAgICAgICAgICAgICB2YWwycHJlOiBmdW5jdGlvbiAoc2VwYXJhdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVzY2FwZWRTZXBhcmF0b3IgPSBJbnB1dG1hc2suZXNjYXBlUmVnZXguY2FsbCh0aGlzLCBzZXBhcmF0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiKCgwWzEzLTldfDFbMDEyXSlcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIlswLTNdKXwoMDJcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIlswLTJdKVwiKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB2YWwyOiBmdW5jdGlvbiAoc2VwYXJhdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVzY2FwZWRTZXBhcmF0b3IgPSBJbnB1dG1hc2suZXNjYXBlUmVnZXguY2FsbCh0aGlzLCBzZXBhcmF0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiKCgwWzEtOV18MVswMTJdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiKDBbMS05XXxbMTJdWzAtOV0pKXwoKDBbMTMtOV18MVswMTJdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiMzApfCgoMFsxMzU3OF18MVswMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIzMSlcIik7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdmFsMXByZTogbmV3IFJlZ0V4cChcIlswMV1cIiksXHJcbiAgICAgICAgICAgICAgICB2YWwxOiBuZXcgUmVnRXhwKFwiMFsxLTldfDFbMDEyXVwiKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsZWFwZGF5OiBcIjAyLzI5L1wiLFxyXG4gICAgICAgICAgICBvbktleURvd246IGZ1bmN0aW9uIChlLCBidWZmZXIsIGNhcmV0UG9zLCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gJCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkgJiYgZS5rZXlDb2RlID09PSBJbnB1dG1hc2sua2V5Q29kZS5SSUdIVCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b2RheSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGlucHV0LnZhbCgodG9kYXkuZ2V0TW9udGgoKSArIDEpLnRvU3RyaW5nKCkgKyB0b2RheS5nZXREYXRlKCkudG9TdHJpbmcoKSArIHRvZGF5LmdldEZ1bGxZZWFyKCkudG9TdHJpbmcoKSksXHJcbiAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJzZXR2YWx1ZS5pbnB1dG1hc2tcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiaGg6bW0gdFwiOiB7XHJcbiAgICAgICAgICAgIG1hc2s6IFwiaDpzIHRcXFxcbVwiLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJoaDptbSB4bVwiLFxyXG4gICAgICAgICAgICBhbGlhczogXCJkYXRldGltZVwiLFxyXG4gICAgICAgICAgICBob3VyRm9ybWF0OiBcIjEyXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiaDpzIHRcIjoge1xyXG4gICAgICAgICAgICBtYXNrOiBcImg6cyB0XFxcXG1cIixcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiaGg6bW0geG1cIixcclxuICAgICAgICAgICAgYWxpYXM6IFwiZGF0ZXRpbWVcIixcclxuICAgICAgICAgICAgaG91ckZvcm1hdDogXCIxMlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImhoOm1tOnNzXCI6IHtcclxuICAgICAgICAgICAgbWFzazogXCJoOnM6c1wiLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJoaDptbTpzc1wiLFxyXG4gICAgICAgICAgICBhbGlhczogXCJkYXRldGltZVwiLFxyXG4gICAgICAgICAgICBhdXRvVW5tYXNrOiAhMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJoaDptbVwiOiB7XHJcbiAgICAgICAgICAgIG1hc2s6IFwiaDpzXCIsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcImhoOm1tXCIsXHJcbiAgICAgICAgICAgIGFsaWFzOiBcImRhdGV0aW1lXCIsXHJcbiAgICAgICAgICAgIGF1dG9Vbm1hc2s6ICExXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkYXRlOiB7XHJcbiAgICAgICAgICAgIGFsaWFzOiBcImRkL21tL3l5eXlcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJtbS95eXl5XCI6IHtcclxuICAgICAgICAgICAgbWFzazogXCIxL3lcIixcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwibW0veXl5eVwiLFxyXG4gICAgICAgICAgICBsZWFwZGF5OiBcImRvbm90dXNlXCIsXHJcbiAgICAgICAgICAgIHNlcGFyYXRvcjogXCIvXCIsXHJcbiAgICAgICAgICAgIGFsaWFzOiBcIm1tL2RkL3l5eXlcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgc2hhbXNpOiB7XHJcbiAgICAgICAgICAgIHJlZ2V4OiB7XHJcbiAgICAgICAgICAgICAgICB2YWwycHJlOiBmdW5jdGlvbiAoc2VwYXJhdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVzY2FwZWRTZXBhcmF0b3IgPSBJbnB1dG1hc2suZXNjYXBlUmVnZXguY2FsbCh0aGlzLCBzZXBhcmF0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiKCgwWzEtOV18MVswMTJdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiWzAtM10pXCIpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHZhbDI6IGZ1bmN0aW9uIChzZXBhcmF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXNjYXBlZFNlcGFyYXRvciA9IElucHV0bWFzay5lc2NhcGVSZWdleC5jYWxsKHRoaXMsIHNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoKDBbMS05XXwxWzAxMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIoMFsxLTldfFsxMl1bMC05XSkpfCgoMFsxLTldfDFbMDEyXSlcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIjMwKXwoKDBbMS02XSlcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIjMxKVwiKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB2YWwxcHJlOiBuZXcgUmVnRXhwKFwiWzAxXVwiKSxcclxuICAgICAgICAgICAgICAgIHZhbDE6IG5ldyBSZWdFeHAoXCIwWzEtOV18MVswMTJdXCIpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHllYXJyYW5nZToge1xyXG4gICAgICAgICAgICAgICAgbWlueWVhcjogMTMwMCxcclxuICAgICAgICAgICAgICAgIG1heHllYXI6IDE0OTlcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbWFzazogXCJ5LzEvMlwiLFxyXG4gICAgICAgICAgICBsZWFwZGF5OiBcIi8xMi8zMFwiLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJ5eXl5L21tL2RkXCIsXHJcbiAgICAgICAgICAgIGFsaWFzOiBcIm1tL2RkL3l5eXlcIixcclxuICAgICAgICAgICAgY2xlYXJJbmNvbXBsZXRlOiAhMFxyXG4gICAgICAgIH1cclxuICAgIH0pLCBJbnB1dG1hc2s7XHJcbn0oalF1ZXJ5LCBJbnB1dG1hc2spLCBmdW5jdGlvbiAoJCwgSW5wdXRtYXNrKSB7XHJcbiAgICByZXR1cm4gSW5wdXRtYXNrLmV4dGVuZERlZmluaXRpb25zKHtcclxuICAgICAgICBBOiB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbQS1aYS16XFx1MDQxMC1cXHUwNDRmXFx1MDQwMVxcdTA0NTFcXHhjMC1cXHhmZlxceGI1XVwiLFxyXG4gICAgICAgICAgICBjYXJkaW5hbGl0eTogMSxcclxuICAgICAgICAgICAgY2FzaW5nOiBcInVwcGVyXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiJlwiOiB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC05QS1aYS16XFx1MDQxMC1cXHUwNDRmXFx1MDQwMVxcdTA0NTFcXHhjMC1cXHhmZlxceGI1XVwiLFxyXG4gICAgICAgICAgICBjYXJkaW5hbGl0eTogMSxcclxuICAgICAgICAgICAgY2FzaW5nOiBcInVwcGVyXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiI1wiOiB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC05QS1GYS1mXVwiLFxyXG4gICAgICAgICAgICBjYXJkaW5hbGl0eTogMSxcclxuICAgICAgICAgICAgY2FzaW5nOiBcInVwcGVyXCJcclxuICAgICAgICB9XHJcbiAgICB9KSwgSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMoe1xyXG4gICAgICAgIHVybDoge1xyXG4gICAgICAgICAgICBtYXNrOiBcImlyXCIsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlwiLFxyXG4gICAgICAgICAgICBzZXBhcmF0b3I6IFwiXCIsXHJcbiAgICAgICAgICAgIGRlZmF1bHRQcmVmaXg6IFwiaHR0cDovL1wiLFxyXG4gICAgICAgICAgICByZWdleDoge1xyXG4gICAgICAgICAgICAgICAgdXJscHJlMTogbmV3IFJlZ0V4cChcIltmaF1cIiksXHJcbiAgICAgICAgICAgICAgICB1cmxwcmUyOiBuZXcgUmVnRXhwKFwiKGZ0fGh0KVwiKSxcclxuICAgICAgICAgICAgICAgIHVybHByZTM6IG5ldyBSZWdFeHAoXCIoZnRwfGh0dClcIiksXHJcbiAgICAgICAgICAgICAgICB1cmxwcmU0OiBuZXcgUmVnRXhwKFwiKGZ0cDp8aHR0cHxmdHBzKVwiKSxcclxuICAgICAgICAgICAgICAgIHVybHByZTU6IG5ldyBSZWdFeHAoXCIoZnRwOi98ZnRwczp8aHR0cDp8aHR0cHMpXCIpLFxyXG4gICAgICAgICAgICAgICAgdXJscHJlNjogbmV3IFJlZ0V4cChcIihmdHA6Ly98ZnRwczovfGh0dHA6L3xodHRwczopXCIpLFxyXG4gICAgICAgICAgICAgICAgdXJscHJlNzogbmV3IFJlZ0V4cChcIihmdHA6Ly98ZnRwczovL3xodHRwOi8vfGh0dHBzOi8pXCIpLFxyXG4gICAgICAgICAgICAgICAgdXJscHJlODogbmV3IFJlZ0V4cChcIihmdHA6Ly98ZnRwczovL3xodHRwOi8vfGh0dHBzOi8vKVwiKVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkZWZpbml0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgaToge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMDtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiA4LFxyXG4gICAgICAgICAgICAgICAgICAgIHByZXZhbGlkYXRvcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByZXN1bHQgPSBbXSwgcHJlZml4TGltaXQgPSA4LCBpID0gMDsgcHJlZml4TGltaXQgPiBpOyBpKyspIHJlc3VsdFtpXSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBqID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMucmVnZXhbXCJ1cmxwcmVcIiArIChqICsgMSldKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaywgdG1wID0gY2hycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGogKyAxIC0gY2hycy5sZW5ndGggPiAwICYmICh0bXAgPSBtYXNrc2V0LmJ1ZmZlci5qb2luKFwiXCIpLnN1YnN0cmluZygwLCBqICsgMSAtIGNocnMubGVuZ3RoKSArIFwiXCIgKyB0bXApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBvcHRzLnJlZ2V4W1widXJscHJlXCIgKyAoaiArIDEpXS50ZXN0KHRtcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0cmljdCAmJiAhaXNWYWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocG9zIC09IGosIGsgPSAwOyBrIDwgb3B0cy5kZWZhdWx0UHJlZml4Lmxlbmd0aDsgaysrKSBtYXNrc2V0LmJ1ZmZlcltwb3NdID0gb3B0cy5kZWZhdWx0UHJlZml4W2tdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcysrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoayA9IDA7IGsgPCB0bXAubGVuZ3RoIC0gMTsgaysrKSBtYXNrc2V0LmJ1ZmZlcltwb3NdID0gdG1wW2tdLCBwb3MrKztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNWYWxpZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gITE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogalxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIH0oKVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHI6IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiLlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiA1MFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbnNlcnRNb2RlOiAhMSxcclxuICAgICAgICAgICAgYXV0b1VubWFzazogITFcclxuICAgICAgICB9LFxyXG4gICAgICAgIGlwOiB7XHJcbiAgICAgICAgICAgIG1hc2s6IFwiaVtpW2ldXS5pW2lbaV1dLmlbaVtpXV0uaVtpW2ldXVwiLFxyXG4gICAgICAgICAgICBkZWZpbml0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgaToge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwb3MgLSAxID4gLTEgJiYgXCIuXCIgIT09IG1hc2tzZXQuYnVmZmVyW3BvcyAtIDFdID8gKGNocnMgPSBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAxXSArIGNocnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNocnMgPSBwb3MgLSAyID4gLTEgJiYgXCIuXCIgIT09IG1hc2tzZXQuYnVmZmVyW3BvcyAtIDJdID8gbWFza3NldC5idWZmZXJbcG9zIC0gMl0gKyBjaHJzIDogXCIwXCIgKyBjaHJzKSA6IGNocnMgPSBcIjAwXCIgKyBjaHJzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXcgUmVnRXhwKFwiMjVbMC01XXwyWzAtNF1bMC05XXxbMDFdWzAtOV1bMC05XVwiKS50ZXN0KGNocnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDFcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25Vbk1hc2s6IGZ1bmN0aW9uIChtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tlZFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBlbWFpbDoge1xyXG4gICAgICAgICAgICBtYXNrOiBcIip7MSw2NH1bLip7MSw2NH1dWy4qezEsNjR9XVsuKnsxLDY0fV1AKnsxLDY0fVsuKnsyLDY0fV1bLip7Miw2fV1bLip7MSwyfV1cIixcclxuICAgICAgICAgICAgZ3JlZWR5OiAhMSxcclxuICAgICAgICAgICAgb25CZWZvcmVQYXN0ZTogZnVuY3Rpb24gKHBhc3RlZFZhbHVlLCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcGFzdGVkVmFsdWUgPSBwYXN0ZWRWYWx1ZS50b0xvd2VyQ2FzZSgpLCBwYXN0ZWRWYWx1ZS5yZXBsYWNlKFwibWFpbHRvOlwiLCBcIlwiKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIFwiKlwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLVphLXohIyQlJicqKy89P15fYHt8fX4tXVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2luZzogXCJsb3dlclwiXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbiAobWFza2VkVmFsdWUsIHVubWFza2VkVmFsdWUsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrZWRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbWFjOiB7XHJcbiAgICAgICAgICAgIG1hc2s6IFwiIyM6IyM6IyM6IyM6IyM6IyNcIlxyXG4gICAgICAgIH1cclxuICAgIH0pLCBJbnB1dG1hc2s7XHJcbn0oalF1ZXJ5LCBJbnB1dG1hc2spLCBmdW5jdGlvbiAoJCwgSW5wdXRtYXNrKSB7XHJcbiAgICByZXR1cm4gSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMoe1xyXG4gICAgICAgIG51bWVyaWM6IHtcclxuICAgICAgICAgICAgbWFzazogZnVuY3Rpb24gKG9wdHMpIHtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGF1dG9Fc2NhcGUodHh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZXNjYXBlZFR4dCA9IFwiXCIsIGkgPSAwOyBpIDwgdHh0Lmxlbmd0aDsgaSsrKSBlc2NhcGVkVHh0ICs9IG9wdHMuZGVmaW5pdGlvbnNbdHh0LmNoYXJBdChpKV0gPyBcIlxcXFxcIiArIHR4dC5jaGFyQXQoaSkgOiB0eHQuY2hhckF0KGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlc2NhcGVkVHh0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKDAgIT09IG9wdHMucmVwZWF0ICYmIGlzTmFOKG9wdHMuaW50ZWdlckRpZ2l0cykgJiYgKG9wdHMuaW50ZWdlckRpZ2l0cyA9IG9wdHMucmVwZWF0KSxcclxuICAgICAgICAgICAgICAgIG9wdHMucmVwZWF0ID0gMCwgb3B0cy5ncm91cFNlcGFyYXRvciA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIChcIi5cIiA9PT0gb3B0cy5yYWRpeFBvaW50ID8gb3B0cy5ncm91cFNlcGFyYXRvciA9IFwiLFwiIDogXCIsXCIgPT09IG9wdHMucmFkaXhQb2ludCA/IG9wdHMuZ3JvdXBTZXBhcmF0b3IgPSBcIi5cIiA6IG9wdHMuZ3JvdXBTZXBhcmF0b3IgPSBcIlwiKSxcclxuICAgICAgICAgICAgICAgIFwiIFwiID09PSBvcHRzLmdyb3VwU2VwYXJhdG9yICYmIChvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIgPSB2b2lkIDApLCBvcHRzLmF1dG9Hcm91cCA9IG9wdHMuYXV0b0dyb3VwICYmIFwiXCIgIT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IsXHJcbiAgICAgICAgICAgICAgICBvcHRzLmF1dG9Hcm91cCAmJiAoXCJzdHJpbmdcIiA9PSB0eXBlb2Ygb3B0cy5ncm91cFNpemUgJiYgaXNGaW5pdGUob3B0cy5ncm91cFNpemUpICYmIChvcHRzLmdyb3VwU2l6ZSA9IHBhcnNlSW50KG9wdHMuZ3JvdXBTaXplKSksXHJcbiAgICAgICAgICAgICAgICBpc0Zpbml0ZShvcHRzLmludGVnZXJEaWdpdHMpKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZXBzID0gTWF0aC5mbG9vcihvcHRzLmludGVnZXJEaWdpdHMgLyBvcHRzLmdyb3VwU2l6ZSksIG1vZCA9IG9wdHMuaW50ZWdlckRpZ2l0cyAlIG9wdHMuZ3JvdXBTaXplO1xyXG4gICAgICAgICAgICAgICAgICAgIG9wdHMuaW50ZWdlckRpZ2l0cyA9IHBhcnNlSW50KG9wdHMuaW50ZWdlckRpZ2l0cykgKyAoMCA9PT0gbW9kID8gc2VwcyAtIDEgOiBzZXBzKSxcclxuICAgICAgICAgICAgICAgICAgICBvcHRzLmludGVnZXJEaWdpdHMgPCAxICYmIChvcHRzLmludGVnZXJEaWdpdHMgPSBcIipcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBvcHRzLnBsYWNlaG9sZGVyLmxlbmd0aCA+IDEgJiYgKG9wdHMucGxhY2Vob2xkZXIgPSBvcHRzLnBsYWNlaG9sZGVyLmNoYXJBdCgwKSksXHJcbiAgICAgICAgICAgICAgICBvcHRzLnJhZGl4Rm9jdXMgPSBvcHRzLnJhZGl4Rm9jdXMgJiYgXCJcIiAhPT0gb3B0cy5wbGFjZWhvbGRlciAmJiBvcHRzLmludGVnZXJPcHRpb25hbCA9PT0gITAsXHJcbiAgICAgICAgICAgICAgICBvcHRzLmRlZmluaXRpb25zW1wiO1wiXSA9IG9wdHMuZGVmaW5pdGlvbnNbXCJ+XCJdLCBvcHRzLmRlZmluaXRpb25zW1wiO1wiXS5kZWZpbml0aW9uU3ltYm9sID0gXCJ+XCIsXHJcbiAgICAgICAgICAgICAgICBvcHRzLm51bWVyaWNJbnB1dCA9PT0gITAgJiYgKG9wdHMucmFkaXhGb2N1cyA9ICExLCBvcHRzLmRpZ2l0c09wdGlvbmFsID0gITEsIGlzTmFOKG9wdHMuZGlnaXRzKSAmJiAob3B0cy5kaWdpdHMgPSAyKSxcclxuICAgICAgICAgICAgICAgIG9wdHMuZGVjaW1hbFByb3RlY3QgPSAhMSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWFzayA9IGF1dG9Fc2NhcGUob3B0cy5wcmVmaXgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hc2sgKz0gXCJbK11cIiwgbWFzayArPSBvcHRzLmludGVnZXJPcHRpb25hbCA9PT0gITAgPyBcIn57MSxcIiArIG9wdHMuaW50ZWdlckRpZ2l0cyArIFwifVwiIDogXCJ+e1wiICsgb3B0cy5pbnRlZ2VyRGlnaXRzICsgXCJ9XCIsXHJcbiAgICAgICAgICAgICAgICB2b2lkIDAgIT09IG9wdHMuZGlnaXRzICYmIChpc05hTihvcHRzLmRpZ2l0cykgfHwgcGFyc2VJbnQob3B0cy5kaWdpdHMpID4gMCkgJiYgKG1hc2sgKz0gb3B0cy5kaWdpdHNPcHRpb25hbCA/IFwiW1wiICsgKG9wdHMuZGVjaW1hbFByb3RlY3QgPyBcIjpcIiA6IG9wdHMucmFkaXhQb2ludCkgKyBcIjt7MSxcIiArIG9wdHMuZGlnaXRzICsgXCJ9XVwiIDogKG9wdHMuZGVjaW1hbFByb3RlY3QgPyBcIjpcIiA6IG9wdHMucmFkaXhQb2ludCkgKyBcIjt7XCIgKyBvcHRzLmRpZ2l0cyArIFwifVwiKSxcclxuICAgICAgICAgICAgICAgIFwiXCIgIT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjayAmJiAobWFzayArPSBcIlstXVwiKSwgbWFzayArPSBhdXRvRXNjYXBlKG9wdHMuc3VmZml4KSxcclxuICAgICAgICAgICAgICAgIG9wdHMuZ3JlZWR5ID0gITEsIG1hc2s7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlwiLFxyXG4gICAgICAgICAgICBncmVlZHk6ICExLFxyXG4gICAgICAgICAgICBkaWdpdHM6IFwiKlwiLFxyXG4gICAgICAgICAgICBkaWdpdHNPcHRpb25hbDogITAsXHJcbiAgICAgICAgICAgIHJhZGl4UG9pbnQ6IFwiLlwiLFxyXG4gICAgICAgICAgICByYWRpeEZvY3VzOiAhMCxcclxuICAgICAgICAgICAgZ3JvdXBTaXplOiAzLFxyXG4gICAgICAgICAgICBncm91cFNlcGFyYXRvcjogXCJcIixcclxuICAgICAgICAgICAgYXV0b0dyb3VwOiAhMSxcclxuICAgICAgICAgICAgYWxsb3dQbHVzOiAhMCxcclxuICAgICAgICAgICAgYWxsb3dNaW51czogITAsXHJcbiAgICAgICAgICAgIG5lZ2F0aW9uU3ltYm9sOiB7XHJcbiAgICAgICAgICAgICAgICBmcm9udDogXCItXCIsXHJcbiAgICAgICAgICAgICAgICBiYWNrOiBcIlwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGludGVnZXJEaWdpdHM6IFwiK1wiLFxyXG4gICAgICAgICAgICBpbnRlZ2VyT3B0aW9uYWw6ICEwLFxyXG4gICAgICAgICAgICBwcmVmaXg6IFwiXCIsXHJcbiAgICAgICAgICAgIHN1ZmZpeDogXCJcIixcclxuICAgICAgICAgICAgcmlnaHRBbGlnbjogITAsXHJcbiAgICAgICAgICAgIGRlY2ltYWxQcm90ZWN0OiAhMCxcclxuICAgICAgICAgICAgbWluOiBudWxsLFxyXG4gICAgICAgICAgICBtYXg6IG51bGwsXHJcbiAgICAgICAgICAgIHN0ZXA6IDEsXHJcbiAgICAgICAgICAgIGluc2VydE1vZGU6ICEwLFxyXG4gICAgICAgICAgICBhdXRvVW5tYXNrOiAhMSxcclxuICAgICAgICAgICAgdW5tYXNrQXNOdW1iZXI6ICExLFxyXG4gICAgICAgICAgICBwb3N0Rm9ybWF0OiBmdW5jdGlvbiAoYnVmZmVyLCBwb3MsIHJlZm9ybWF0T25seSwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgb3B0cy5udW1lcmljSW5wdXQgPT09ICEwICYmIChidWZmZXIgPSBidWZmZXIucmV2ZXJzZSgpLCBpc0Zpbml0ZShwb3MpICYmIChwb3MgPSBidWZmZXIuam9pbihcIlwiKS5sZW5ndGggLSBwb3MgLSAxKSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgaSwgbCwgc3VmZml4U3RyaXBwZWQgPSAhMTtcclxuICAgICAgICAgICAgICAgIGJ1ZmZlci5sZW5ndGggPj0gb3B0cy5zdWZmaXgubGVuZ3RoICYmIGJ1ZmZlci5qb2luKFwiXCIpLmluZGV4T2Yob3B0cy5zdWZmaXgpID09PSBidWZmZXIubGVuZ3RoIC0gb3B0cy5zdWZmaXgubGVuZ3RoICYmIChidWZmZXIubGVuZ3RoID0gYnVmZmVyLmxlbmd0aCAtIG9wdHMuc3VmZml4Lmxlbmd0aCxcclxuICAgICAgICAgICAgICAgIHN1ZmZpeFN0cmlwcGVkID0gITApLCBwb3MgPSBwb3MgPj0gYnVmZmVyLmxlbmd0aCA/IGJ1ZmZlci5sZW5ndGggLSAxIDogcG9zIDwgb3B0cy5wcmVmaXgubGVuZ3RoID8gb3B0cy5wcmVmaXgubGVuZ3RoIDogcG9zO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5lZWRzUmVmcmVzaCA9ICExLCBjaGFyQXRQb3MgPSBidWZmZXJbcG9zXTtcclxuICAgICAgICAgICAgICAgIGlmIChcIlwiID09PSBvcHRzLmdyb3VwU2VwYXJhdG9yIHx8IG9wdHMubnVtZXJpY0lucHV0ICE9PSAhMCAmJiAtMSAhPT0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgYnVmZmVyKSAmJiBwb3MgPiAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBidWZmZXIpIHx8IG5ldyBSZWdFeHAoXCJbXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCkgKyBcIitdXCIpLnRlc3QoY2hhckF0UG9zKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzdWZmaXhTdHJpcHBlZCkgZm9yIChpID0gMCwgbCA9IG9wdHMuc3VmZml4Lmxlbmd0aDsgbCA+IGk7IGkrKykgYnVmZmVyLnB1c2gob3B0cy5zdWZmaXguY2hhckF0KGkpKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvc1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgY2J1ZiA9IGJ1ZmZlci5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgY2hhckF0UG9zID09PSBvcHRzLmdyb3VwU2VwYXJhdG9yICYmIChjYnVmLnNwbGljZShwb3MtLSwgMSksIGNoYXJBdFBvcyA9IGNidWZbcG9zXSksXHJcbiAgICAgICAgICAgICAgICByZWZvcm1hdE9ubHkgPyBjaGFyQXRQb3MgIT09IG9wdHMucmFkaXhQb2ludCAmJiAoY2J1Zltwb3NdID0gXCI/XCIpIDogY2J1Zi5zcGxpY2UocG9zLCAwLCBcIj9cIik7XHJcbiAgICAgICAgICAgICAgICB2YXIgYnVmVmFsID0gY2J1Zi5qb2luKFwiXCIpLCBidWZWYWxPcmlnaW4gPSBidWZWYWw7XHJcbiAgICAgICAgICAgICAgICBpZiAoYnVmVmFsLmxlbmd0aCA+IDAgJiYgb3B0cy5hdXRvR3JvdXAgfHwgcmVmb3JtYXRPbmx5ICYmIC0xICE9PSBidWZWYWwuaW5kZXhPZihvcHRzLmdyb3VwU2VwYXJhdG9yKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlc2NhcGVkR3JvdXBTZXBhcmF0b3IgPSBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgbmVlZHNSZWZyZXNoID0gMCA9PT0gYnVmVmFsLmluZGV4T2Yob3B0cy5ncm91cFNlcGFyYXRvciksIGJ1ZlZhbCA9IGJ1ZlZhbC5yZXBsYWNlKG5ldyBSZWdFeHAoZXNjYXBlZEdyb3VwU2VwYXJhdG9yLCBcImdcIiksIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByYWRpeFNwbGl0ID0gYnVmVmFsLnNwbGl0KG9wdHMucmFkaXhQb2ludCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGJ1ZlZhbCA9IFwiXCIgPT09IG9wdHMucmFkaXhQb2ludCA/IGJ1ZlZhbCA6IHJhZGl4U3BsaXRbMF0sIGJ1ZlZhbCAhPT0gb3B0cy5wcmVmaXggKyBcIj8wXCIgJiYgYnVmVmFsLmxlbmd0aCA+PSBvcHRzLmdyb3VwU2l6ZSArIG9wdHMucHJlZml4Lmxlbmd0aCkgZm9yICh2YXIgcmVnID0gbmV3IFJlZ0V4cChcIihbLStdP1tcXFxcZD9dKykoW1xcXFxkP117XCIgKyBvcHRzLmdyb3VwU2l6ZSArIFwifSlcIikgOyByZWcudGVzdChidWZWYWwpIDspIGJ1ZlZhbCA9IGJ1ZlZhbC5yZXBsYWNlKHJlZywgXCIkMVwiICsgb3B0cy5ncm91cFNlcGFyYXRvciArIFwiJDJcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgYnVmVmFsID0gYnVmVmFsLnJlcGxhY2Uob3B0cy5ncm91cFNlcGFyYXRvciArIG9wdHMuZ3JvdXBTZXBhcmF0b3IsIG9wdHMuZ3JvdXBTZXBhcmF0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIFwiXCIgIT09IG9wdHMucmFkaXhQb2ludCAmJiByYWRpeFNwbGl0Lmxlbmd0aCA+IDEgJiYgKGJ1ZlZhbCArPSBvcHRzLnJhZGl4UG9pbnQgKyByYWRpeFNwbGl0WzFdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGZvciAobmVlZHNSZWZyZXNoID0gYnVmVmFsT3JpZ2luICE9PSBidWZWYWwsIGJ1ZmZlci5sZW5ndGggPSBidWZWYWwubGVuZ3RoLCBpID0gMCxcclxuICAgICAgICAgICAgICAgIGwgPSBidWZWYWwubGVuZ3RoOyBsID4gaTsgaSsrKSBidWZmZXJbaV0gPSBidWZWYWwuY2hhckF0KGkpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG5ld1BvcyA9ICQuaW5BcnJheShcIj9cIiwgYnVmZmVyKTtcclxuICAgICAgICAgICAgICAgIGlmICgtMSA9PT0gbmV3UG9zICYmIGNoYXJBdFBvcyA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIChuZXdQb3MgPSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBidWZmZXIpKSxcclxuICAgICAgICAgICAgICAgIHJlZm9ybWF0T25seSA/IGJ1ZmZlcltuZXdQb3NdID0gY2hhckF0UG9zIDogYnVmZmVyLnNwbGljZShuZXdQb3MsIDEpLCAhbmVlZHNSZWZyZXNoICYmIHN1ZmZpeFN0cmlwcGVkKSBmb3IgKGkgPSAwLFxyXG4gICAgICAgICAgICAgICAgbCA9IG9wdHMuc3VmZml4Lmxlbmd0aDsgbCA+IGk7IGkrKykgYnVmZmVyLnB1c2gob3B0cy5zdWZmaXguY2hhckF0KGkpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBuZXdQb3MgPSBvcHRzLm51bWVyaWNJbnB1dCAmJiBpc0Zpbml0ZShwb3MpID8gYnVmZmVyLmpvaW4oXCJcIikubGVuZ3RoIC0gbmV3UG9zIC0gMSA6IG5ld1BvcyxcclxuICAgICAgICAgICAgICAgIG9wdHMubnVtZXJpY0lucHV0ICYmIChidWZmZXIgPSBidWZmZXIucmV2ZXJzZSgpLCAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBidWZmZXIpIDwgbmV3UG9zICYmIGJ1ZmZlci5qb2luKFwiXCIpLmxlbmd0aCAtIG9wdHMuc3VmZml4Lmxlbmd0aCAhPT0gbmV3UG9zICYmIChuZXdQb3MgLT0gMSkpLFxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgIHBvczogbmV3UG9zLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyOiBuZWVkc1JlZnJlc2gsXHJcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiBidWZmZXJcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uQmVmb3JlV3JpdGU6IGZ1bmN0aW9uIChlLCBidWZmZXIsIGNhcmV0UG9zLCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZSAmJiAoXCJibHVyXCIgPT09IGUudHlwZSB8fCBcImNoZWNrdmFsXCIgPT09IGUudHlwZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWFza2VkVmFsdWUgPSBidWZmZXIuam9pbihcIlwiKSwgcHJvY2Vzc1ZhbHVlID0gbWFza2VkVmFsdWUucmVwbGFjZShvcHRzLnByZWZpeCwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG9wdHMuc3VmZml4LCBcIlwiKSwgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvciksIFwiZ1wiKSwgXCJcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgXCIsXCIgPT09IG9wdHMucmFkaXhQb2ludCAmJiAocHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMucmFkaXhQb2ludCksIFwiLlwiKSksXHJcbiAgICAgICAgICAgICAgICAgICAgaXNGaW5pdGUocHJvY2Vzc1ZhbHVlKSAmJiBpc0Zpbml0ZShvcHRzLm1pbikgJiYgcGFyc2VGbG9hdChwcm9jZXNzVmFsdWUpIDwgcGFyc2VGbG9hdChvcHRzLm1pbikpIHJldHVybiAkLmV4dGVuZCghMCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcjogITAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogKG9wdHMucHJlZml4ICsgb3B0cy5taW4pLnNwbGl0KFwiXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgb3B0cy5wb3N0Rm9ybWF0KChvcHRzLnByZWZpeCArIG9wdHMubWluKS5zcGxpdChcIlwiKSwgMCwgITAsIG9wdHMpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5udW1lcmljSW5wdXQgIT09ICEwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0bXBCdWZTcGxpdCA9IFwiXCIgIT09IG9wdHMucmFkaXhQb2ludCA/IGJ1ZmZlci5qb2luKFwiXCIpLnNwbGl0KG9wdHMucmFkaXhQb2ludCkgOiBbYnVmZmVyLmpvaW4oXCJcIildLCBtYXRjaFJzbHQgPSB0bXBCdWZTcGxpdFswXS5tYXRjaChvcHRzLnJlZ2V4LmludGVnZXJQYXJ0KG9wdHMpKSwgbWF0Y2hSc2x0RGlnaXRzID0gMiA9PT0gdG1wQnVmU3BsaXQubGVuZ3RoID8gdG1wQnVmU3BsaXRbMV0ubWF0Y2gob3B0cy5yZWdleC5pbnRlZ2VyTlBhcnQob3B0cykpIDogdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hSc2x0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaFJzbHRbMF0gIT09IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQgKyBcIjBcIiAmJiBtYXRjaFJzbHRbMF0gIT09IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQgJiYgXCIrXCIgIT09IG1hdGNoUnNsdFswXSB8fCB2b2lkIDAgIT09IG1hdGNoUnNsdERpZ2l0cyAmJiAhbWF0Y2hSc2x0RGlnaXRzWzBdLm1hdGNoKC9eMCskLykgfHwgYnVmZmVyLnNwbGljZShtYXRjaFJzbHQuaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4UG9zaXRpb24gPSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBidWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC0xICE9PSByYWRpeFBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzRmluaXRlKG9wdHMuZGlnaXRzKSAmJiAhb3B0cy5kaWdpdHNPcHRpb25hbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8PSBvcHRzLmRpZ2l0czsgaSsrKSAodm9pZCAwID09PSBidWZmZXJbcmFkaXhQb3NpdGlvbiArIGldIHx8IGJ1ZmZlcltyYWRpeFBvc2l0aW9uICsgaV0gPT09IG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KDApKSAmJiAoYnVmZmVyW3JhZGl4UG9zaXRpb24gKyBpXSA9IFwiMFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyOiBtYXNrZWRWYWx1ZSAhPT0gYnVmZmVyLmpvaW4oXCJcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXI6IGJ1ZmZlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmFkaXhQb3NpdGlvbiA9PT0gYnVmZmVyLmxlbmd0aCAtIG9wdHMuc3VmZml4Lmxlbmd0aCAtIDEpIHJldHVybiBidWZmZXIuc3BsaWNlKHJhZGl4UG9zaXRpb24sIDEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXI6ICEwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBidWZmZXI6IGJ1ZmZlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5hdXRvR3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcnNsdCA9IG9wdHMucG9zdEZvcm1hdChidWZmZXIsIG9wdHMubnVtZXJpY0lucHV0ID8gY2FyZXRQb3MgOiBjYXJldFBvcyAtIDEsICEwLCBvcHRzKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcnNsdC5jYXJldCA9IGNhcmV0UG9zIDw9IG9wdHMucHJlZml4Lmxlbmd0aCA/IHJzbHQucG9zIDogcnNsdC5wb3MgKyAxLCByc2x0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZWdleDoge1xyXG4gICAgICAgICAgICAgICAgaW50ZWdlclBhcnQ6IGZ1bmN0aW9uIChvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCJbXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCkgKyBcIitdP1xcXFxkK1wiKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBpbnRlZ2VyTlBhcnQ6IGZ1bmN0aW9uIChvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCJbXFxcXGRcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSArIFwiXStcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNpZ25IYW5kbGVyOiBmdW5jdGlvbiAoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgIGlmICghc3RyaWN0ICYmIG9wdHMuYWxsb3dNaW51cyAmJiBcIi1cIiA9PT0gY2hycyB8fCBvcHRzLmFsbG93UGx1cyAmJiBcIitcIiA9PT0gY2hycykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaFJzbHQgPSBtYXNrc2V0LmJ1ZmZlci5qb2luKFwiXCIpLm1hdGNoKG9wdHMucmVnZXguaW50ZWdlclBhcnQob3B0cykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaFJzbHQgJiYgbWF0Y2hSc2x0WzBdLmxlbmd0aCA+IDApIHJldHVybiBtYXNrc2V0LmJ1ZmZlclttYXRjaFJzbHQuaW5kZXhdID09PSAoXCItXCIgPT09IGNocnMgPyBcIitcIiA6IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpID8gXCItXCIgPT09IGNocnMgPyBcIlwiICE9PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2sgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvczogbWF0Y2hSc2x0LmluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjOiBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmU6IG1hdGNoUnNsdC5pbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IHBvcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IG1hc2tzZXQuYnVmZmVyLmxlbmd0aCAtIG9wdHMuc3VmZml4Lmxlbmd0aCAtIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2tcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvczogbWF0Y2hSc2x0LmluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjOiBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmU6IG1hdGNoUnNsdC5pbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IHBvc1xyXG4gICAgICAgICAgICAgICAgICAgIH0gOiBcIlwiICE9PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2sgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvczogbWF0Y2hSc2x0LmluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjOiBcIitcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlOiBbbWF0Y2hSc2x0LmluZGV4LCBtYXNrc2V0LmJ1ZmZlci5sZW5ndGggLSBvcHRzLnN1ZmZpeC5sZW5ndGggLSAxXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IHBvc1xyXG4gICAgICAgICAgICAgICAgICAgIH0gOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvczogbWF0Y2hSc2x0LmluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjOiBcIitcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlOiBtYXRjaFJzbHQuaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBwb3NcclxuICAgICAgICAgICAgICAgICAgICB9IDogbWFza3NldC5idWZmZXJbbWF0Y2hSc2x0LmluZGV4XSA9PT0gKFwiLVwiID09PSBjaHJzID8gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCA6IFwiK1wiKSA/IFwiLVwiID09PSBjaHJzICYmIFwiXCIgIT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjayA/IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlOiBbbWF0Y2hSc2x0LmluZGV4LCBtYXNrc2V0LmJ1ZmZlci5sZW5ndGggLSBvcHRzLnN1ZmZpeC5sZW5ndGggLSAxXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IHBvcyAtIDFcclxuICAgICAgICAgICAgICAgICAgICB9IDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmU6IG1hdGNoUnNsdC5pbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IHBvcyAtIDFcclxuICAgICAgICAgICAgICAgICAgICB9IDogXCItXCIgPT09IGNocnMgPyBcIlwiICE9PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2sgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvczogbWF0Y2hSc2x0LmluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjOiBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcG9zICsgMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IG1hc2tzZXQuYnVmZmVyLmxlbmd0aCAtIG9wdHMuc3VmZml4Lmxlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IG9wdHMubmVnYXRpb25TeW1ib2wuYmFja1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBtYXRjaFJzbHQuaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGM6IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBwb3MgKyAxXHJcbiAgICAgICAgICAgICAgICAgICAgfSA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBtYXRjaFJzbHQuaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGM6IGNocnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBwb3MgKyAxXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiAhMTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcmFkaXhIYW5kbGVyOiBmdW5jdGlvbiAoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgIGlmICghc3RyaWN0ICYmICgtMSAhPT0gJC5pbkFycmF5KGNocnMsIFtcIixcIiwgXCIuXCJdKSAmJiAoY2hycyA9IG9wdHMucmFkaXhQb2ludCksXHJcbiAgICAgICAgICAgICAgICBjaHJzID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgdm9pZCAwICE9PSBvcHRzLmRpZ2l0cyAmJiAoaXNOYU4ob3B0cy5kaWdpdHMpIHx8IHBhcnNlSW50KG9wdHMuZGlnaXRzKSA+IDApKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByYWRpeFBvcyA9ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIG1hc2tzZXQuYnVmZmVyKSwgaW50ZWdlclZhbHVlID0gbWFza3NldC5idWZmZXIuam9pbihcIlwiKS5tYXRjaChvcHRzLnJlZ2V4LmludGVnZXJQYXJ0KG9wdHMpKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoLTEgIT09IHJhZGl4UG9zICYmIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcmFkaXhQb3NdKSByZXR1cm4gbWFza3NldC52YWxpZFBvc2l0aW9uc1tyYWRpeFBvcyAtIDFdID8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcmFkaXhQb3MgKyAxXHJcbiAgICAgICAgICAgICAgICAgICAgfSA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBpbnRlZ2VyVmFsdWUuaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGM6IGludGVnZXJWYWx1ZVswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IHJhZGl4UG9zICsgMVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFpbnRlZ2VyVmFsdWUgfHwgXCIwXCIgPT09IGludGVnZXJWYWx1ZVswXSAmJiBpbnRlZ2VyVmFsdWUuaW5kZXggKyAxICE9PSBwb3MpIHJldHVybiBtYXNrc2V0LmJ1ZmZlcltpbnRlZ2VyVmFsdWUgPyBpbnRlZ2VyVmFsdWUuaW5kZXggOiBwb3NdID0gXCIwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3M6IChpbnRlZ2VyVmFsdWUgPyBpbnRlZ2VyVmFsdWUuaW5kZXggOiBwb3MpICsgMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYzogb3B0cy5yYWRpeFBvaW50XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiAhMTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGVhZGluZ1plcm9IYW5kbGVyOiBmdW5jdGlvbiAoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRzLm51bWVyaWNJbnB1dCA9PT0gITApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoXCIwXCIgPT09IG1hc2tzZXQuYnVmZmVyW21hc2tzZXQuYnVmZmVyLmxlbmd0aCAtIG9wdHMucHJlZml4Lmxlbmd0aCAtIDFdKSByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlOiBtYXNrc2V0LmJ1ZmZlci5sZW5ndGggLSBvcHRzLnByZWZpeC5sZW5ndGggLSAxXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoUnNsdCA9IG1hc2tzZXQuYnVmZmVyLmpvaW4oXCJcIikubWF0Y2gob3B0cy5yZWdleC5pbnRlZ2VyTlBhcnQob3B0cykpLCByYWRpeFBvc2l0aW9uID0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgbWFza3NldC5idWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaFJzbHQgJiYgIXN0cmljdCAmJiAoLTEgPT09IHJhZGl4UG9zaXRpb24gfHwgcmFkaXhQb3NpdGlvbiA+PSBwb3MpKSBpZiAoMCA9PT0gbWF0Y2hSc2x0WzBdLmluZGV4T2YoXCIwXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA8IG9wdHMucHJlZml4Lmxlbmd0aCAmJiAocG9zID0gbWF0Y2hSc2x0LmluZGV4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIF9yYWRpeFBvc2l0aW9uID0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgbWFza3NldC5fYnVmZmVyKSwgZGlnaXRzTWF0Y2ggPSBtYXNrc2V0Ll9idWZmZXIgJiYgbWFza3NldC5idWZmZXIuc2xpY2UocmFkaXhQb3NpdGlvbikuam9pbihcIlwiKSA9PT0gbWFza3NldC5fYnVmZmVyLnNsaWNlKF9yYWRpeFBvc2l0aW9uKS5qb2luKFwiXCIpIHx8IDAgPT09IHBhcnNlSW50KG1hc2tzZXQuYnVmZmVyLnNsaWNlKHJhZGl4UG9zaXRpb24gKyAxKS5qb2luKFwiXCIpKSwgaW50ZWdlck1hdGNoID0gbWFza3NldC5fYnVmZmVyICYmIG1hc2tzZXQuYnVmZmVyLnNsaWNlKG1hdGNoUnNsdC5pbmRleCwgcmFkaXhQb3NpdGlvbikuam9pbihcIlwiKSA9PT0gbWFza3NldC5fYnVmZmVyLnNsaWNlKG9wdHMucHJlZml4Lmxlbmd0aCwgX3JhZGl4UG9zaXRpb24pLmpvaW4oXCJcIikgfHwgXCIwXCIgPT09IG1hc2tzZXQuYnVmZmVyLnNsaWNlKG1hdGNoUnNsdC5pbmRleCwgcmFkaXhQb3NpdGlvbikuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKC0xID09PSByYWRpeFBvc2l0aW9uIHx8IGRpZ2l0c01hdGNoICYmIGludGVnZXJNYXRjaCkgcmV0dXJuIG1hc2tzZXQuYnVmZmVyLnNwbGljZShtYXRjaFJzbHQuaW5kZXgsIDEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MgPSBwb3MgPiBtYXRjaFJzbHQuaW5kZXggPyBwb3MgLSAxIDogbWF0Y2hSc2x0LmluZGV4LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZTogbWF0Y2hSc2x0LmluZGV4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaFJzbHQuaW5kZXggKyAxID09PSBwb3MgfHwgXCIwXCIgPT09IGNocnMpIHJldHVybiBtYXNrc2V0LmJ1ZmZlci5zcGxpY2UobWF0Y2hSc2x0LmluZGV4LCAxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zID0gbWF0Y2hSc2x0LmluZGV4LCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZTogbWF0Y2hSc2x0LmluZGV4XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChcIjBcIiA9PT0gY2hycyAmJiBwb3MgPD0gbWF0Y2hSc2x0LmluZGV4ICYmIG1hdGNoUnNsdFswXSAhPT0gb3B0cy5ncm91cFNlcGFyYXRvcikgcmV0dXJuICExO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICEwO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBwb3N0VmFsaWRhdGlvbjogZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSAhMCwgbWFza2VkVmFsdWUgPSBidWZmZXIuam9pbihcIlwiKSwgcHJvY2Vzc1ZhbHVlID0gbWFza2VkVmFsdWUucmVwbGFjZShvcHRzLnByZWZpeCwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2Uob3B0cy5zdWZmaXgsIFwiXCIpLCBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSwgXCJnXCIpLCBcIlwiKSxcclxuICAgICAgICAgICAgICAgIFwiLFwiID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgKHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnJhZGl4UG9pbnQpLCBcIi5cIikpLFxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChcIl5cIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSksIFwiLVwiKSxcclxuICAgICAgICAgICAgICAgIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaykgKyBcIiRcIiksIFwiXCIpLFxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlID09PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250ID8gcHJvY2Vzc1ZhbHVlICsgXCIwXCIgOiBwcm9jZXNzVmFsdWUsXHJcbiAgICAgICAgICAgICAgICBpc0Zpbml0ZShwcm9jZXNzVmFsdWUpICYmIChudWxsICE9PSBvcHRzLm1heCAmJiBpc0Zpbml0ZShvcHRzLm1heCkgJiYgKGlzVmFsaWQgPSBwYXJzZUZsb2F0KHByb2Nlc3NWYWx1ZSkgPD0gcGFyc2VGbG9hdChvcHRzLm1heCkpLFxyXG4gICAgICAgICAgICAgICAgaXNWYWxpZCAmJiBudWxsICE9PSBvcHRzLm1pbiAmJiBpc0Zpbml0ZShvcHRzLm1pbikgJiYgKDAgPj0gcHJvY2Vzc1ZhbHVlIHx8IHByb2Nlc3NWYWx1ZS50b1N0cmluZygpLmxlbmd0aCA+PSBvcHRzLm1pbi50b1N0cmluZygpLmxlbmd0aCkgJiYgKGlzVmFsaWQgPSBwYXJzZUZsb2F0KHByb2Nlc3NWYWx1ZSkgPj0gcGFyc2VGbG9hdChvcHRzLm1pbiksXHJcbiAgICAgICAgICAgICAgICBpc1ZhbGlkIHx8IChpc1ZhbGlkID0gJC5leHRlbmQoITAsIHtcclxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcjogITAsXHJcbiAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiAob3B0cy5wcmVmaXggKyBvcHRzLm1pbikuc3BsaXQoXCJcIilcclxuICAgICAgICAgICAgICAgIH0sIG9wdHMucG9zdEZvcm1hdCgob3B0cy5wcmVmaXggKyBvcHRzLm1pbikuc3BsaXQoXCJcIiksIDAsICEwLCBvcHRzKSksIGlzVmFsaWQucmVmcmVzaEZyb21CdWZmZXIgPSAhMCkpKSxcclxuICAgICAgICAgICAgICAgIGlzVmFsaWQ7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBcIn5cIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gb3B0cy5zaWduSGFuZGxlcihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZCAmJiAoaXNWYWxpZCA9IG9wdHMucmFkaXhIYW5kbGVyKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIWlzVmFsaWQgJiYgKGlzVmFsaWQgPSBzdHJpY3QgPyBuZXcgUmVnRXhwKFwiWzAtOVwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpICsgXCJdXCIpLnRlc3QoY2hycykgOiBuZXcgUmVnRXhwKFwiWzAtOV1cIikudGVzdChjaHJzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9PT0gITAgJiYgKGlzVmFsaWQgPSBvcHRzLmxlYWRpbmdaZXJvSGFuZGxlcihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cyksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPT09ICEwKSkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb3NpdGlvbiA9ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIG1hc2tzZXQuYnVmZmVyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSAtMSAhPT0gcmFkaXhQb3NpdGlvbiAmJiBvcHRzLmRpZ2l0c09wdGlvbmFsID09PSAhMSAmJiBvcHRzLm51bWVyaWNJbnB1dCAhPT0gITAgJiYgcG9zID4gcmFkaXhQb3NpdGlvbiAmJiAhc3RyaWN0ID8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZTogcG9zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmFsaWRhdG9yOiBudWxsXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXCIrXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIChjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IG9wdHMuc2lnbkhhbmRsZXIoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWlzVmFsaWQgJiYgKHN0cmljdCAmJiBvcHRzLmFsbG93TWludXMgJiYgY2hycyA9PT0gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCB8fCBvcHRzLmFsbG93TWludXMgJiYgXCItXCIgPT09IGNocnMgfHwgb3B0cy5hbGxvd1BsdXMgJiYgXCIrXCIgPT09IGNocnMpICYmIChpc1ZhbGlkID0gXCItXCIgPT09IGNocnMgPyBcIlwiICE9PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2sgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IFwiLVwiID09PSBjaHJzID8gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCA6IFwiK1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IHBvcyArIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IG1hc2tzZXQuYnVmZmVyLmxlbmd0aCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2tcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogXCItXCIgPT09IGNocnMgPyBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250IDogXCIrXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcG9zICsgMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IDogITApLCBpc1ZhbGlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmFsaWRhdG9yOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIlwiXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgXCItXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIChjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IG9wdHMuc2lnbkhhbmRsZXIoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWlzVmFsaWQgJiYgc3RyaWN0ICYmIG9wdHMuYWxsb3dNaW51cyAmJiBjaHJzID09PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmJhY2sgJiYgKGlzVmFsaWQgPSAhMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMSxcclxuICAgICAgICAgICAgICAgICAgICBwcmV2YWxpZGF0b3I6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBcIjpcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gb3B0cy5zaWduSGFuZGxlcihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghaXNWYWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4ID0gXCJbXCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5yYWRpeFBvaW50KSArIFwiLFxcXFwuXVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IG5ldyBSZWdFeHAocmFkaXgpLnRlc3QoY2hycyksIGlzVmFsaWQgJiYgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdICYmIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXS5tYXRjaC5wbGFjZWhvbGRlciA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIChpc1ZhbGlkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBwb3MgKyAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNWYWxpZCA/IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IG9wdHMucmFkaXhQb2ludFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IDogaXNWYWxpZDtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIHByZXZhbGlkYXRvcjogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogZnVuY3Rpb24gKG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMucmFkaXhQb2ludDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uVW5NYXNrOiBmdW5jdGlvbiAobWFza2VkVmFsdWUsIHVubWFza2VkVmFsdWUsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwcm9jZXNzVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKG9wdHMucHJlZml4LCBcIlwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShvcHRzLnN1ZmZpeCwgXCJcIiksIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpLCBcImdcIiksIFwiXCIpLFxyXG4gICAgICAgICAgICAgICAgb3B0cy51bm1hc2tBc051bWJlciA/IChcIlwiICE9PSBvcHRzLnJhZGl4UG9pbnQgJiYgLTEgIT09IHByb2Nlc3NWYWx1ZS5pbmRleE9mKG9wdHMucmFkaXhQb2ludCkgJiYgKHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKElucHV0bWFzay5lc2NhcGVSZWdleC5jYWxsKHRoaXMsIG9wdHMucmFkaXhQb2ludCksIFwiLlwiKSksXHJcbiAgICAgICAgICAgICAgICBOdW1iZXIocHJvY2Vzc1ZhbHVlKSkgOiBwcm9jZXNzVmFsdWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGlzQ29tcGxldGU6IGZ1bmN0aW9uIChidWZmZXIsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBtYXNrZWRWYWx1ZSA9IGJ1ZmZlci5qb2luKFwiXCIpLCBidWZDbG9uZSA9IGJ1ZmZlci5zbGljZSgpO1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdHMucG9zdEZvcm1hdChidWZDbG9uZSwgMCwgITAsIG9wdHMpLCBidWZDbG9uZS5qb2luKFwiXCIpICE9PSBtYXNrZWRWYWx1ZSkgcmV0dXJuICExO1xyXG4gICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NWYWx1ZSA9IG1hc2tlZFZhbHVlLnJlcGxhY2Uob3B0cy5wcmVmaXgsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG9wdHMuc3VmZml4LCBcIlwiKSwgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvciksIFwiZ1wiKSwgXCJcIiksXHJcbiAgICAgICAgICAgICAgICBcIixcIiA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIChwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5yYWRpeFBvaW50KSwgXCIuXCIpKSxcclxuICAgICAgICAgICAgICAgIGlzRmluaXRlKHByb2Nlc3NWYWx1ZSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uQmVmb3JlTWFzazogZnVuY3Rpb24gKGluaXRpYWxWYWx1ZSwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKFwiXCIgIT09IG9wdHMucmFkaXhQb2ludCAmJiBpc0Zpbml0ZShpbml0aWFsVmFsdWUpKSBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCBvcHRzLnJhZGl4UG9pbnQpOyBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga29tbWFNYXRjaGVzID0gaW5pdGlhbFZhbHVlLm1hdGNoKC8sL2cpLCBkb3RNYXRjaGVzID0gaW5pdGlhbFZhbHVlLm1hdGNoKC9cXC4vZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZG90TWF0Y2hlcyAmJiBrb21tYU1hdGNoZXMgPyBkb3RNYXRjaGVzLmxlbmd0aCA+IGtvbW1hTWF0Y2hlcy5sZW5ndGggPyAoaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnJlcGxhY2UoL1xcLi9nLCBcIlwiKSxcclxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUucmVwbGFjZShcIixcIiwgb3B0cy5yYWRpeFBvaW50KSkgOiBrb21tYU1hdGNoZXMubGVuZ3RoID4gZG90TWF0Y2hlcy5sZW5ndGggPyAoaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnJlcGxhY2UoLywvZywgXCJcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnJlcGxhY2UoXCIuXCIsIG9wdHMucmFkaXhQb2ludCkpIDogaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLmluZGV4T2YoXCIuXCIpIDwgaW5pdGlhbFZhbHVlLmluZGV4T2YoXCIsXCIpID8gaW5pdGlhbFZhbHVlLnJlcGxhY2UoL1xcLi9nLCBcIlwiKSA6IGluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZS5yZXBsYWNlKC8sL2csIFwiXCIpIDogaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvciksIFwiZ1wiKSwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoMCA9PT0gb3B0cy5kaWdpdHMgJiYgKC0xICE9PSBpbml0aWFsVmFsdWUuaW5kZXhPZihcIi5cIikgPyBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUuc3Vic3RyaW5nKDAsIGluaXRpYWxWYWx1ZS5pbmRleE9mKFwiLlwiKSkgOiAtMSAhPT0gaW5pdGlhbFZhbHVlLmluZGV4T2YoXCIsXCIpICYmIChpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUuc3Vic3RyaW5nKDAsIGluaXRpYWxWYWx1ZS5pbmRleE9mKFwiLFwiKSkpKSxcclxuICAgICAgICAgICAgICAgIFwiXCIgIT09IG9wdHMucmFkaXhQb2ludCAmJiBpc0Zpbml0ZShvcHRzLmRpZ2l0cykgJiYgLTEgIT09IGluaXRpYWxWYWx1ZS5pbmRleE9mKG9wdHMucmFkaXhQb2ludCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdmFsdWVQYXJ0cyA9IGluaXRpYWxWYWx1ZS5zcGxpdChvcHRzLnJhZGl4UG9pbnQpLCBkZWNQYXJ0ID0gdmFsdWVQYXJ0c1sxXS5tYXRjaChuZXcgUmVnRXhwKFwiXFxcXGQqXCIpKVswXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocGFyc2VJbnQob3B0cy5kaWdpdHMpIDwgZGVjUGFydC50b1N0cmluZygpLmxlbmd0aCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGlnaXRzRmFjdG9yID0gTWF0aC5wb3coMTAsIHBhcnNlSW50KG9wdHMuZGlnaXRzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZS5yZXBsYWNlKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnJhZGl4UG9pbnQpLCBcIi5cIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IE1hdGgucm91bmQocGFyc2VGbG9hdChpbml0aWFsVmFsdWUpICogZGlnaXRzRmFjdG9yKSAvIGRpZ2l0c0ZhY3RvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnRvU3RyaW5nKCkucmVwbGFjZShcIi5cIiwgb3B0cy5yYWRpeFBvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5pdGlhbFZhbHVlLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGNhbkNsZWFyUG9zaXRpb246IGZ1bmN0aW9uIChtYXNrc2V0LCBwb3NpdGlvbiwgbHZwLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwb3NpdGlvbklucHV0ID0gbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NpdGlvbl0uaW5wdXQsIGNhbkNsZWFyID0gcG9zaXRpb25JbnB1dCAhPT0gb3B0cy5yYWRpeFBvaW50IHx8IG51bGwgIT09IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zaXRpb25dLm1hdGNoLmZuICYmIG9wdHMuZGVjaW1hbFByb3RlY3QgPT09ICExIHx8IGlzRmluaXRlKHBvc2l0aW9uSW5wdXQpIHx8IHBvc2l0aW9uID09PSBsdnAgfHwgcG9zaXRpb25JbnB1dCA9PT0gb3B0cy5ncm91cFNlcGFyYXRvciB8fCBwb3NpdGlvbklucHV0ID09PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250IHx8IHBvc2l0aW9uSW5wdXQgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjaztcclxuICAgICAgICAgICAgICAgIGlmIChjYW5DbGVhciAmJiBpc0Zpbml0ZShwb3NpdGlvbklucHV0KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaFJzbHQsIHJhZGl4UG9zID0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgbWFza3NldC5idWZmZXIpLCByYWRpeEluamVjdGlvbiA9ICExO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcmFkaXhQb3NdICYmIChtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3JhZGl4UG9zXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IG9wdHMucmFkaXhQb2ludFxyXG4gICAgICAgICAgICAgICAgICAgIH0sIHJhZGl4SW5qZWN0aW9uID0gITApLCAhc3RyaWN0ICYmIG1hc2tzZXQuYnVmZmVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoUnNsdCA9IG1hc2tzZXQuYnVmZmVyLmpvaW4oXCJcIikuc3Vic3RyKDAsIHBvc2l0aW9uKS5tYXRjaChvcHRzLnJlZ2V4LmludGVnZXJOUGFydChvcHRzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwb3MgPSBwb3NpdGlvbiArIDEsIGlzTnVsbCA9IG51bGwgPT0gbWF0Y2hSc2x0IHx8IDAgPT09IHBhcnNlSW50KG1hdGNoUnNsdFswXS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpLCBcImdcIiksIFwiXCIpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTnVsbCkgZm9yICg7IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXSAmJiAobWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdLmlucHV0ID09PSBvcHRzLmdyb3VwU2VwYXJhdG9yIHx8IFwiMFwiID09PSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10uaW5wdXQpIDspIGRlbGV0ZSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcysrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdnAgaW4gbWFza3NldC52YWxpZFBvc2l0aW9ucykgdm9pZCAwICE9PSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3ZwXS5pbnB1dCAmJiBidWZmZXIucHVzaChtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3ZwXS5pbnB1dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhZGl4SW5qZWN0aW9uICYmIGRlbGV0ZSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3JhZGl4UG9zXSwgcmFkaXhQb3MgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBidWZWYWwgPSBidWZmZXIuam9pbihcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoUnNsdCA9IGJ1ZlZhbC5tYXRjaChvcHRzLnJlZ2V4LmludGVnZXJOUGFydChvcHRzKSkpIGlmIChyYWRpeFBvcyA+PSBwb3NpdGlvbikgaWYgKDAgPT09IG1hdGNoUnNsdFswXS5pbmRleE9mKFwiMFwiKSkgY2FuQ2xlYXIgPSBtYXRjaFJzbHQuaW5kZXggIT09IHBvc2l0aW9uIHx8IFwiMFwiID09PSBvcHRzLnBsYWNlaG9sZGVyOyBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnRQYXJ0ID0gcGFyc2VJbnQobWF0Y2hSc2x0WzBdLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvciksIFwiZ1wiKSwgXCJcIikpLCByYWRpeFBhcnQgPSBwYXJzZUludChidWZWYWwuc3BsaXQob3B0cy5yYWRpeFBvaW50KVsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAxMCA+IGludFBhcnQgJiYgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NpdGlvbl0gJiYgKFwiMFwiICE9PSBvcHRzLnBsYWNlaG9sZGVyIHx8IHJhZGl4UGFydCA+IDApICYmIChtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc2l0aW9uXS5pbnB1dCA9IFwiMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza3NldC5wID0gb3B0cy5wcmVmaXgubGVuZ3RoICsgMSwgY2FuQ2xlYXIgPSAhMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSAwID09PSBtYXRjaFJzbHRbMF0uaW5kZXhPZihcIjBcIikgJiYgMyA9PT0gYnVmVmFsLmxlbmd0aCAmJiAobWFza3NldC52YWxpZFBvc2l0aW9ucyA9IHt9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYW5DbGVhciA9ICExKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gY2FuQ2xlYXI7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uS2V5RG93bjogZnVuY3Rpb24gKGUsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUuY3RybEtleSkgc3dpdGNoIChlLmtleUNvZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIElucHV0bWFzay5rZXlDb2RlLlVQOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudmFsKHBhcnNlRmxvYXQodGhpcy5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpKSArIHBhcnNlSW50KG9wdHMuc3RlcCkpLCAkaW5wdXQudHJpZ2dlcihcInNldHZhbHVlLmlucHV0bWFza1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSW5wdXRtYXNrLmtleUNvZGUuRE9XTjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGlucHV0LnZhbChwYXJzZUZsb2F0KHRoaXMuaW5wdXRtYXNrLnVubWFza2VkdmFsdWUoKSkgLSBwYXJzZUludChvcHRzLnN0ZXApKSwgJGlucHV0LnRyaWdnZXIoXCJzZXR2YWx1ZS5pbnB1dG1hc2tcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGN1cnJlbmN5OiB7XHJcbiAgICAgICAgICAgIHByZWZpeDogXCIkIFwiLFxyXG4gICAgICAgICAgICBncm91cFNlcGFyYXRvcjogXCIsXCIsXHJcbiAgICAgICAgICAgIGFsaWFzOiBcIm51bWVyaWNcIixcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiMFwiLFxyXG4gICAgICAgICAgICBhdXRvR3JvdXA6ICEwLFxyXG4gICAgICAgICAgICBkaWdpdHM6IDIsXHJcbiAgICAgICAgICAgIGRpZ2l0c09wdGlvbmFsOiAhMSxcclxuICAgICAgICAgICAgY2xlYXJNYXNrT25Mb3N0Rm9jdXM6ICExXHJcbiAgICAgICAgfSxcclxuICAgICAgICBkZWNpbWFsOiB7XHJcbiAgICAgICAgICAgIGFsaWFzOiBcIm51bWVyaWNcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW50ZWdlcjoge1xyXG4gICAgICAgICAgICBhbGlhczogXCJudW1lcmljXCIsXHJcbiAgICAgICAgICAgIGRpZ2l0czogMCxcclxuICAgICAgICAgICAgcmFkaXhQb2ludDogXCJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGVyY2VudGFnZToge1xyXG4gICAgICAgICAgICBhbGlhczogXCJudW1lcmljXCIsXHJcbiAgICAgICAgICAgIGRpZ2l0czogMixcclxuICAgICAgICAgICAgcmFkaXhQb2ludDogXCIuXCIsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIjBcIixcclxuICAgICAgICAgICAgYXV0b0dyb3VwOiAhMSxcclxuICAgICAgICAgICAgbWluOiAwLFxyXG4gICAgICAgICAgICBtYXg6IDEwMCxcclxuICAgICAgICAgICAgc3VmZml4OiBcIiAlXCIsXHJcbiAgICAgICAgICAgIGFsbG93UGx1czogITEsXHJcbiAgICAgICAgICAgIGFsbG93TWludXM6ICExXHJcbiAgICAgICAgfVxyXG4gICAgfSksIElucHV0bWFzaztcclxufShqUXVlcnksIElucHV0bWFzayksIGZ1bmN0aW9uICgkLCBJbnB1dG1hc2spIHtcclxuICAgIHJldHVybiBJbnB1dG1hc2suZXh0ZW5kQWxpYXNlcyh7XHJcbiAgICAgICAgcGhvbmU6IHtcclxuICAgICAgICAgICAgdXJsOiBcInBob25lLWNvZGVzL3Bob25lLWNvZGVzLmpzXCIsXHJcbiAgICAgICAgICAgIGNvdW50cnljb2RlOiBcIlwiLFxyXG4gICAgICAgICAgICBtYXNrOiBmdW5jdGlvbiAob3B0cykge1xyXG4gICAgICAgICAgICAgICAgb3B0cy5kZWZpbml0aW9uc1tcIiNcIl0gPSBvcHRzLmRlZmluaXRpb25zWzldO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1hc2tMaXN0ID0gW107XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5hamF4KHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IG9wdHMudXJsLFxyXG4gICAgICAgICAgICAgICAgICAgIGFzeW5jOiAhMSxcclxuICAgICAgICAgICAgICAgICAgICBkYXRhVHlwZTogXCJqc29uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgc3VjY2VzczogZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tMaXN0ID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBlcnJvcjogZnVuY3Rpb24gKHhociwgYWpheE9wdGlvbnMsIHRocm93bkVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KHRocm93bkVycm9yICsgXCIgLSBcIiArIG9wdHMudXJsKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KSwgbWFza0xpc3QgPSBtYXNrTGlzdC5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIChhLm1hc2sgfHwgYSkgPCAoYi5tYXNrIHx8IGIpID8gLTEgOiAxO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGtlZXBTdGF0aWM6ICExLFxyXG4gICAgICAgICAgICBub2p1bXBzOiAhMCxcclxuICAgICAgICAgICAgbm9qdW1wc1RocmVzaG9sZDogMSxcclxuICAgICAgICAgICAgb25CZWZvcmVNYXNrOiBmdW5jdGlvbiAodmFsdWUsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwcm9jZXNzZWRWYWx1ZSA9IHZhbHVlLnJlcGxhY2UoL14wL2csIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChwcm9jZXNzZWRWYWx1ZS5pbmRleE9mKG9wdHMuY291bnRyeWNvZGUpID4gMSB8fCAtMSA9PT0gcHJvY2Vzc2VkVmFsdWUuaW5kZXhPZihvcHRzLmNvdW50cnljb2RlKSkgJiYgKHByb2Nlc3NlZFZhbHVlID0gXCIrXCIgKyBvcHRzLmNvdW50cnljb2RlICsgcHJvY2Vzc2VkVmFsdWUpLFxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc2VkVmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIHBob25lYmU6IHtcclxuICAgICAgICAgICAgYWxpYXM6IFwicGhvbmVcIixcclxuICAgICAgICAgICAgdXJsOiBcInBob25lLWNvZGVzL3Bob25lLWJlLmpzXCIsXHJcbiAgICAgICAgICAgIGNvdW50cnljb2RlOiBcIjMyXCIsXHJcbiAgICAgICAgICAgIG5vanVtcHNUaHJlc2hvbGQ6IDRcclxuICAgICAgICB9XHJcbiAgICB9KSwgSW5wdXRtYXNrO1xyXG59KGpRdWVyeSwgSW5wdXRtYXNrKSwgZnVuY3Rpb24gKCQsIElucHV0bWFzaykge1xyXG4gICAgcmV0dXJuIElucHV0bWFzay5leHRlbmRBbGlhc2VzKHtcclxuICAgICAgICBSZWdleDoge1xyXG4gICAgICAgICAgICBtYXNrOiBcInJcIixcclxuICAgICAgICAgICAgZ3JlZWR5OiAhMSxcclxuICAgICAgICAgICAgcmVwZWF0OiBcIipcIixcclxuICAgICAgICAgICAgcmVnZXg6IG51bGwsXHJcbiAgICAgICAgICAgIHJlZ2V4VG9rZW5zOiBudWxsLFxyXG4gICAgICAgICAgICB0b2tlbml6ZXI6IC9cXFtcXF4/XT8oPzpbXlxcXFxcXF1dK3xcXFxcW1xcU1xcc10/KSpdP3xcXFxcKD86MCg/OlswLTNdWzAtN117MCwyfXxbNC03XVswLTddPyk/fFsxLTldWzAtOV0qfHhbMC05QS1GYS1mXXsyfXx1WzAtOUEtRmEtZl17NH18Y1tBLVphLXpdfFtcXFNcXHNdPyl8XFwoKD86XFw/Wzo9IV0/KT98KD86Wz8qK118XFx7WzAtOV0rKD86LFswLTldKik/XFx9KVxcPz98W14uPyorXiR7WygpfFxcXFxdK3wuL2csXHJcbiAgICAgICAgICAgIHF1YW50aWZpZXJGaWx0ZXI6IC9bMC05XStbXixdLyxcclxuICAgICAgICAgICAgaXNDb21wbGV0ZTogZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAob3B0cy5yZWdleCkudGVzdChidWZmZXIuam9pbihcIlwiKSk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICByOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gUmVnZXhUb2tlbihpc0dyb3VwLCBpc1F1YW50aWZpZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0Y2hlcyA9IFtdLCB0aGlzLmlzR3JvdXAgPSBpc0dyb3VwIHx8ICExLCB0aGlzLmlzUXVhbnRpZmllciA9IGlzUXVhbnRpZmllciB8fCAhMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMucXVhbnRpZmllciA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW46IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4OiAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCB0aGlzLnJlcGVhdGVyUGFydCA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBhbmFseXNlUmVnZXgoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2gsIG0sIGN1cnJlbnRUb2tlbiA9IG5ldyBSZWdleFRva2VuKCksIG9wZW5ncm91cHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAob3B0cy5yZWdleFRva2VucyA9IFtdOyBtYXRjaCA9IG9wdHMudG9rZW5pemVyLmV4ZWMob3B0cy5yZWdleCkgOykgc3dpdGNoIChtID0gbWF0Y2hbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtLmNoYXJBdCgwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIoXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5ncm91cHMucHVzaChuZXcgUmVnZXhUb2tlbighMCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIilcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZ3JvdXBUb2tlbiA9IG9wZW5ncm91cHMucG9wKCksIG9wZW5ncm91cHMubGVuZ3RoID4gMCA/IG9wZW5ncm91cHNbb3Blbmdyb3Vwcy5sZW5ndGggLSAxXS5tYXRjaGVzLnB1c2goZ3JvdXBUb2tlbikgOiBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKGdyb3VwVG9rZW4pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIntcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiK1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIqXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBxdWFudGlmaWVyVG9rZW4gPSBuZXcgUmVnZXhUb2tlbighMSwgITApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtID0gbS5yZXBsYWNlKC9be31dL2csIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbXEgPSBtLnNwbGl0KFwiLFwiKSwgbXEwID0gaXNOYU4obXFbMF0pID8gbXFbMF0gOiBwYXJzZUludChtcVswXSksIG1xMSA9IDEgPT09IG1xLmxlbmd0aCA/IG1xMCA6IGlzTmFOKG1xWzFdKSA/IG1xWzFdIDogcGFyc2VJbnQobXFbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocXVhbnRpZmllclRva2VuLnF1YW50aWZpZXIgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtaW46IG1xMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1heDogbXExXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIG9wZW5ncm91cHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSBvcGVuZ3JvdXBzW29wZW5ncm91cHMubGVuZ3RoIC0gMV0ubWF0Y2hlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoID0gbWF0Y2hlcy5wb3AoKSwgbWF0Y2guaXNHcm91cCB8fCAoZ3JvdXBUb2tlbiA9IG5ldyBSZWdleFRva2VuKCEwKSwgZ3JvdXBUb2tlbi5tYXRjaGVzLnB1c2gobWF0Y2gpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBncm91cFRva2VuKSwgbWF0Y2hlcy5wdXNoKG1hdGNoKSwgbWF0Y2hlcy5wdXNoKHF1YW50aWZpZXJUb2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBtYXRjaCA9IGN1cnJlbnRUb2tlbi5tYXRjaGVzLnBvcCgpLCBtYXRjaC5pc0dyb3VwIHx8IChncm91cFRva2VuID0gbmV3IFJlZ2V4VG9rZW4oITApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cFRva2VuLm1hdGNoZXMucHVzaChtYXRjaCksIG1hdGNoID0gZ3JvdXBUb2tlbiksIGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2gobWF0Y2gpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKHF1YW50aWZpZXJUb2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuZ3JvdXBzLmxlbmd0aCA+IDAgPyBvcGVuZ3JvdXBzW29wZW5ncm91cHMubGVuZ3RoIC0gMV0ubWF0Y2hlcy5wdXNoKG0pIDogY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUb2tlbi5tYXRjaGVzLmxlbmd0aCA+IDAgJiYgb3B0cy5yZWdleFRva2Vucy5wdXNoKGN1cnJlbnRUb2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gdmFsaWRhdGVSZWdleFRva2VuKHRva2VuLCBmcm9tR3JvdXApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc3ZhbGlkID0gITE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcm9tR3JvdXAgJiYgKHJlZ2V4UGFydCArPSBcIihcIiwgb3Blbkdyb3VwQ291bnQrKyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBtbmR4ID0gMDsgbW5keCA8IHRva2VuLm1hdGNoZXMubGVuZ3RoOyBtbmR4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hUb2tlbiA9IHRva2VuLm1hdGNoZXNbbW5keF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoVG9rZW4uaXNHcm91cCA9PT0gITApIGlzdmFsaWQgPSB2YWxpZGF0ZVJlZ2V4VG9rZW4obWF0Y2hUb2tlbiwgITApOyBlbHNlIGlmIChtYXRjaFRva2VuLmlzUXVhbnRpZmllciA9PT0gITApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNycm50bmR4ID0gJC5pbkFycmF5KG1hdGNoVG9rZW4sIHRva2VuLm1hdGNoZXMpLCBtYXRjaEdyb3VwID0gdG9rZW4ubWF0Y2hlc1tjcnJudG5keCAtIDFdLCByZWdleFBhcnRCYWsgPSByZWdleFBhcnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc05hTihtYXRjaFRva2VuLnF1YW50aWZpZXIubWF4KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICg7IG1hdGNoVG9rZW4ucmVwZWF0ZXJQYXJ0ICYmIG1hdGNoVG9rZW4ucmVwZWF0ZXJQYXJ0ICE9PSByZWdleFBhcnQgJiYgbWF0Y2hUb2tlbi5yZXBlYXRlclBhcnQubGVuZ3RoID4gcmVnZXhQYXJ0Lmxlbmd0aCAmJiAhKGlzdmFsaWQgPSB2YWxpZGF0ZVJlZ2V4VG9rZW4obWF0Y2hHcm91cCwgITApKSA7KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzdmFsaWQgPSBpc3ZhbGlkIHx8IHZhbGlkYXRlUmVnZXhUb2tlbihtYXRjaEdyb3VwLCAhMCksIGlzdmFsaWQgJiYgKG1hdGNoVG9rZW4ucmVwZWF0ZXJQYXJ0ID0gcmVnZXhQYXJ0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4UGFydCA9IHJlZ2V4UGFydEJhayArIG1hdGNoVG9rZW4ucXVhbnRpZmllci5tYXg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMCwgcW0gPSBtYXRjaFRva2VuLnF1YW50aWZpZXIubWF4IC0gMTsgcW0gPiBpICYmICEoaXN2YWxpZCA9IHZhbGlkYXRlUmVnZXhUb2tlbihtYXRjaEdyb3VwLCAhMCkpIDsgaSsrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4UGFydCA9IHJlZ2V4UGFydEJhayArIFwie1wiICsgbWF0Y2hUb2tlbi5xdWFudGlmaWVyLm1pbiArIFwiLFwiICsgbWF0Y2hUb2tlbi5xdWFudGlmaWVyLm1heCArIFwifVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICh2b2lkIDAgIT09IG1hdGNoVG9rZW4ubWF0Y2hlcykgZm9yICh2YXIgayA9IDA7IGsgPCBtYXRjaFRva2VuLmxlbmd0aCAmJiAhKGlzdmFsaWQgPSB2YWxpZGF0ZVJlZ2V4VG9rZW4obWF0Y2hUb2tlbltrXSwgZnJvbUdyb3VwKSkgOyBrKyspOyBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3RFeHA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChcIltcIiA9PSBtYXRjaFRva2VuLmNoYXJBdCgwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdEV4cCA9IHJlZ2V4UGFydCwgdGVzdEV4cCArPSBtYXRjaFRva2VuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IG9wZW5Hcm91cENvdW50ID4gajsgaisrKSB0ZXN0RXhwICs9IFwiKVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4cCA9IG5ldyBSZWdFeHAoXCJeKFwiICsgdGVzdEV4cCArIFwiKSRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc3ZhbGlkID0gZXhwLnRlc3QoYnVmZmVyU3RyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGZvciAodmFyIGwgPSAwLCB0bCA9IG1hdGNoVG9rZW4ubGVuZ3RoOyB0bCA+IGw7IGwrKykgaWYgKFwiXFxcXFwiICE9PSBtYXRjaFRva2VuLmNoYXJBdChsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVzdEV4cCA9IHJlZ2V4UGFydCwgdGVzdEV4cCArPSBtYXRjaFRva2VuLnN1YnN0cigwLCBsICsgMSksIHRlc3RFeHAgPSB0ZXN0RXhwLnJlcGxhY2UoL1xcfCQvLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGogPSAwOyBvcGVuR3JvdXBDb3VudCA+IGo7IGorKykgdGVzdEV4cCArPSBcIilcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHAgPSBuZXcgUmVnRXhwKFwiXihcIiArIHRlc3RFeHAgKyBcIikkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzdmFsaWQgPSBleHAudGVzdChidWZmZXJTdHIpKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWdleFBhcnQgKz0gbWF0Y2hUb2tlbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzdmFsaWQpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZyb21Hcm91cCAmJiAocmVnZXhQYXJ0ICs9IFwiKVwiLCBvcGVuR3JvdXBDb3VudC0tKSwgaXN2YWxpZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZ3JvdXBUb2tlbiwgY2J1ZmZlciA9IG1hc2tzZXQuYnVmZmVyLnNsaWNlKCksIHJlZ2V4UGFydCA9IFwiXCIsIGlzVmFsaWQgPSAhMSwgb3Blbkdyb3VwQ291bnQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBudWxsID09PSBvcHRzLnJlZ2V4VG9rZW5zICYmIGFuYWx5c2VSZWdleCgpLCBjYnVmZmVyLnNwbGljZShwb3MsIDAsIGNocnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBidWZmZXJTdHIgPSBjYnVmZmVyLmpvaW4oXCJcIiksIGkgPSAwOyBpIDwgb3B0cy5yZWdleFRva2Vucy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZ2V4VG9rZW4gPSBvcHRzLnJlZ2V4VG9rZW5zW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQgPSB2YWxpZGF0ZVJlZ2V4VG9rZW4ocmVnZXhUb2tlbiwgcmVnZXhUb2tlbi5pc0dyb3VwKSkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSksIElucHV0bWFzaztcclxufShqUXVlcnksIElucHV0bWFzayk7XHJcbi8qIGpzaGludCBpZ25vcmU6ZW5kICovIiwiKGZ1bmN0aW9uICgpIHtcclxuICAgIFwidXNlIHN0cmljdFwiOyBcclxuICAgIHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnYXBwJyxcclxuICAgICAgICBbJ25nUmVzb3VyY2UnLCAndWkucm91dGVyJywgJ25nQ29va2llcycsICd1aS5tYXNrJywgJ3VpLmJvb3RzdHJhcCcsICdpc3RldmVuLW11bHRpLXNlbGVjdCcsICduZ0lucHV0TW9kaWZpZWQnLCAndWkudmFsaWRhdGUnLCAnY2dCdXN5JyxcclxuICAgICAgICAgICAgJ2FuZ3VsYXIuZmlsdGVyJywgJ3hlZGl0YWJsZScsICdjaGVja2xpc3QtbW9kZWwnLCAnbmdGaWxlVXBsb2FkJywgJ1NUTlJlc291cmNlJywgJ3VpLmJvb3RzdHJhcC5kYXRldGltZXBpY2tlcicsJ2xlYWZsZXQtZGlyZWN0aXZlJywnbmdIYW5kc29udGFibGUnLFxyXG4gICAgICAgICAgICAnU1ROQ29udHJvbGxlcnMnLCAnTG9nSW5PdXRDb250cm9sbGVyJywgJ01vZGFsQ29udHJvbGxlcnMnLCAnU2V0dGluZ3NDb250cm9sbGVycycsICdXaU0uU2VydmljZXMnLCAnV2lNLkV2ZW50JywgJ3dpbV9hbmd1bGFyJywgJ2FuZ3VsYXJTcGlubmVycyddKTtcclxuICBhcHAuY29uc3RhbnQoJ1NFUlZFUl9VUkwnLCAnaHR0cHM6Ly9zdG4ud2ltLnVzZ3MuZ292L1NUTlNlcnZpY2VzJyk7XHJcbiAgLy8gICAgYXBwLmNvbnN0YW50KCdTRVJWRVJfVVJMJywgJ2h0dHBzOi8vc3RudGVzdC53aW0udXNncy5nb3YvU1ROU2VydmljZXMyJyk7XHJcbiAgICAvL2FwcC5jb25zdGFudCgnU0VSVkVSX1VSTCcsICdodHRwOi8vbG9jYWxob3N0L1NUTlNlcnZpY2VzMicpO1xyXG5cclxuICAgIC8vIGFwcC5jb25zdGFudCgnRU5WSVJPTk1FTlQnLCAnVGVzdGluZycpO1xyXG4gICBhcHAuY29uc3RhbnQoJ0VOVklST05NRU5UJywgJ1Byb2R1Y3Rpb24nKTtcclxuXHJcbiAgICAgYXBwLnJ1bihbJyRyb290U2NvcGUnLCAnJHVpYk1vZGFsU3RhY2snLCAnJGNvb2tpZXMnLCAnJHN0YXRlJywgJ0VOVklST05NRU5UJywgZnVuY3Rpb24gKCRyb290U2NvcGUsICR1aWJNb2RhbFN0YWNrLCAkY29va2llcywgJHN0YXRlLCBFTlZJUk9OTUVOVCkge1xyXG4gICAgICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uIChldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcykge1xyXG4gICAgICAgICAgICBpZiAoKCRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gdW5kZWZpbmVkIHx8ICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gXCJcIikgJiYgdG9TdGF0ZS5hdXRoZW50aWNhdGUpIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUucmV0dXJuVG9TdGF0ZSA9IHRvU3RhdGUubmFtZTtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUucmV0dXJuVG9TdGF0ZVBhcmFtcyA9IHRvUGFyYW1zLmlkO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnZW50cnknKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcgPSB7IHNob3dMb2FkaW5nOiB0cnVlIH07XHJcbiAgICAgICAgICAgICAgICAvL2Nsb3NlIGFsbCBtb2RhbHMgd2hlbiBjaGFuZ2luZyBzdGF0ZXMgKHNpdGUgY3JlYXRlIG9wZW4sIHdhbnQgdG8gdXNlIGEgbmVhcmJ5IHNpdGUgb3IganVzdCBjaGFuZ2UgdGhlIHVybCB1cCB0b3AsIGNsb3NlIHRoZSBtb2RhbCB0b28pXHJcbiAgICAgICAgICAgICAgICAkdWliTW9kYWxTdGFjay5kaXNtaXNzQWxsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRvU3RhdGUudXJsID09IFwiL1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHVzZXJuYW1lIGZvY3VzXHJcbiAgICAgICAgICAgICAgICAgICAgJChcIiN1c2VyTmFtZUZvY3VzXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJHJvb3RTY29wZS5lbnZpcm9ubWVudCA9IEVOVklST05NRU5UO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlU3VjY2VzcycsIGZ1bmN0aW9uIChldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcywgZXJyb3IpIHtcclxuICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlRXJyb3InLCBmdW5jdGlvbiAoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMsIGVycm9yKSB7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgYWxlcnQoXCJFcnJvciBvY2N1cnJlZDogU3RhdHVzXCIgKyBlcnJvci5zdGF0dXMgKyBcIiwgXCIgKyBlcnJvci5zdGF0dXNUZXh0ICsgXCIuIFRoZSBmb2xsb3dpbmcgcmVxdWVzdCB3YXMgdW5zdWNjZXNzZnVsOiBcIiArIGVycm9yLmNvbmZpZy51cmwgKyBcIiBQbGVhc2UgcmVmcmVzaCBhbmQgdHJ5IGFnYWluLlwiKTtcclxuICAgICAgICB9KTtcclxuICAgICAgICBcclxuICAgIH1dKTtcclxuICAgIC8vYXBwLmNvbmZpZyhmdW5jdGlvbiB0aGF0IGRlZmluZXMgdGhlIGNvbmZpZyBjb2RlLiAndWkuc2VsZWN0JywgJ25nU2FuaXRpemUnLCckbG9jYXRpb25Qcm92aWRlcicsICRsb2NhdGlvblByb3ZpZGVyXHJcbiAgICBhcHAuY29uZmlnKFsnJHN0YXRlUHJvdmlkZXInLCAnJHVybFJvdXRlclByb3ZpZGVyJywgXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vaWYgbm8gYWN0aXZlIHN0YXRlLCBkaXNwbGF5IHN0YXRlIGFzc29jaWF0ZWQgd2l0aCB0aGlzIGZyYWdtZW50IGlkZW50aWZpZXJcclxuICAgICAgICAgICAgJHVybFJvdXRlclByb3ZpZGVyLm90aGVyd2lzZShcIi9cIik7XHJcblxyXG4gICAgICAgICAgICAvL2h0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTk3MjExMjUvcmVzb2x2ZS1odHRwLXJlcXVlc3QtYmVmb3JlLXJ1bm5pbmctYXBwLWFuZC1zd2l0Y2hpbmctdG8tYS1yb3V0ZS1vci1zdGF0ZVxyXG4gICAgICAgICAgICAvL2h0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjI1MzczMTEvYW5ndWxhci11aS1yb3V0ZXItbG9naW4tYXV0aGVudGljYXRpb25cclxuICAgICAgICAgICAgJHN0YXRlUHJvdmlkZXJcclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBlbnRyeVBvaW50XHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJlbnRyeVwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9cIixcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQvbWFpbi9tYWluVmlldy5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJtYWluQ3RybFwiXHJcbiAgICAgICAgICAgICAgICB9KVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBlbnRyeVBvaW50XHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIG1hcFxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwibWFwXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL01hcFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L21hcC9tYXAuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vY29udHJvbGxlcjogXCJNYXBDb250cm9sbGVyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgLy9hdXRoZW50aWNhdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJyc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdNYXBDb250cm9sbGVyJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9tYXAvbWFwLmh0bWxcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWFwRmlsdGVyc0BtYXAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudC9tYXAvbWFwRmlsdGVycy5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdNYXBGaWx0ZXJzQ29udHJvbGxlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgczogJ1NUQVRFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZUxpc3Q6IGZ1bmN0aW9uIChzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vuc1Q6ICdTRU5TT1JfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vuc29yVHlwZXM6IGZ1bmN0aW9uIChzZW5zVCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2Vuc1QuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXR3TjogJ05FVFdPUktfTkFNRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV0d29ya05hbWVzOiBmdW5jdGlvbiAobmV0d04pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldHdOLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJ3dpbUxlZ2VuZEBtYXAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudC9WaWV3cy9MZWdlbmQvbGVnZW5kLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgY29udHJvbGxlcjogJ3dpbUxlZ2VuZCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ21hcFNpdGVJbmZvQG1hcCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50L3NpdGUvbWFwU2l0ZUluZm9WaWV3Lmh0bWwnLCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdNYXBTaXRlSW5mb0NvbnRyb2xsZXInXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdtYXBQZWFrc1ZpZXdAbWFwJzoge3RlbXBsYXRlVXJsOiAnY29tcG9uZW50L3BlYWsvbWFwUGVha3NWaWV3Lmh0bWwnLCBjb250cm9sbGVyOiAnTWFwUGVha3NDb250cm9sbGVyJ30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdtYXBTZW5zb3JQcm9wb3NlQG1hcCc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50L3NlbnNvci9tYXBTZW5zb3JQcm9wb3NlLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR0OiAnREVQTE9ZTUVOVF9UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxEZXBsb3lUeXBlczogZnVuY3Rpb24gKGR0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkdC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2Q6ICdTRU5TT1JfREVQTE9ZTUVOVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hbGxTZW5zRGVwczogZnVuY3Rpb24gKHNkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgcmV0dXJuIHNkLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNkOiAnU0VOU09SX1RZUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFNlbnNEZXBzOiBmdW5jdGlvbiAoc2QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNkLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTWFwU2Vuc29yUHJvcG9zZUNvbnRyb2xsZXInXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIG1hcFxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBhcHByb3ZhbCBwYWdlXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJhcHByb3ZhbFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9BcHByb3ZhbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9hcHByb3ZhbC9hcHByb3ZhbC5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJhcHByb3ZhbEN0cmxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzOiAnU1RBVEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZUxpc3Q6IGZ1bmN0aW9uIChzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaTogJ0lOU1RSVU1FTlQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVtZW50TGlzdDogZnVuY3Rpb24gKGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdDogJ1NFTlNPUl9UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsU2Vuc29yVHlwZXM6IGZ1bmN0aW9uIChzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkdDogJ0RFUExPWU1FTlRfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbERlcFR5cGVzOiBmdW5jdGlvbiAoZHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkdC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gc2l0ZXNTZWFyY2ggcGFnZVxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwic2l0ZVNlYXJjaFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9TaXRlU2VhcmNoXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3NpdGVTZWFyY2gvc2l0ZVNlYXJjaC5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJzaXRlU2VhcmNoQ3RybFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHM6ICdTVEFURScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlTGlzdDogZnVuY3Rpb24gKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW5zVDogJ1NFTlNPUl9UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vuc29yVHlwZXM6IGZ1bmN0aW9uIChzZW5zVCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbnNULmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXR3TjogJ05FVFdPUktfTkFNRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldHdvcmtOYW1lczogZnVuY3Rpb24gKG5ldHdOKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV0d04uZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIHJlcG9ydGluZ1xyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIHJlcG9ydGluZyAoYWJzdHJhY3QpXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJyZXBvcnRpbmdcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvUmVwb3J0aW5nXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3JlcG9ydGluZy9yZXBvcnRpbmcuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwicmVwb3J0aW5nQ3RybFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGU6ICdFVkVOVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEV2ZW50czogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogJ1NUQVRFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsU3RhdGVzOiBmdW5jdGlvbiAoc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcjogJ1JFUE9SVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFJlcG9ydHM6IGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXQ6ICdFVkVOVF9UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsRXZlbnRUeXBlczogZnVuY3Rpb24gKGV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVzOiAnRVZFTlRfU1RBVFVTJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsRXZlbnRTdGF0dXM6IGZ1bmN0aW9uIChlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVzLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZzogJ0FHRU5DWScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEFnZW5jaWVzOiBmdW5jdGlvbiAoYWcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhZy5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWVtYmVyUmVwb3J0czogZnVuY3Rpb24gKHIsICRjb29raWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbUlEID0gJGNvb2tpZXMuZ2V0KCdtSUQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByLmdldE1lbWJlclJlcG9ydHMoeyBtZW1iZXJJZDogbUlEIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXBvcnRpbmcgKGFic3RyYWN0KVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXBvcnRpbmcucmVwb3J0RGFzaFxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwicmVwb3J0aW5nLnJlcG9ydERhc2hcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvRGFzaGJvYXJkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3JlcG9ydGluZy9yZXBvcnRpbmdEYXNoYm9hcmQuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwicmVwb3J0aW5nRGFzaEN0cmxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByOiAnUkVQT1JUJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsUmVwb3J0c0FnYWluOiBmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KS8vI2VuZHJlZ2lvbiByZXBvcnRpbmcucmVwb3J0RGFzaFxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXBvcnRpbmcuU3VibWl0UmVwb3J0XHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJyZXBvcnRpbmcuc3VibWl0UmVwb3J0XCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL1N1Ym1pdFJlcG9ydFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9yZXBvcnRpbmcvc3VibWl0UmVwb3J0Lmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBcInN1Ym1pdFJlcG9ydEN0cmxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlcG9ydGluZy5TdWJtaXRSZXBvcnRcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVwb3J0aW5nLkdlbmVyYXRlUmVwb3J0XHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJyZXBvcnRpbmcuZ2VuZXJhdGVSZXBvcnRcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvR2VuZXJhdGVSZXBvcnRcIixcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQvcmVwb3J0aW5nL2dlbmVyYXRlUmVwb3J0Lmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICB9KS8vI2VuZHJlZ2lvbiByZXBvcnRpbmcuR2VuZXJhdGVSZXBvcnRcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXBvcnRpbmdcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gc2V0dGluZ3MgXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJzZXR0aW5nc1wiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9TZXR0aW5nc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9zZXR0aW5ncy9zZXR0aW5ncy5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJzZXR0aW5nc0N0cmxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWVcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gc2V0dGluZ3NcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gbWVtYmVyc1xyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIG1lbWJlcnMgKGFic3RyYWN0KVxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwibWVtYmVyc1wiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9NZW1iZXJzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7IGlkOiBudWxsfSxcclxuICAgICAgICAgICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogXCI8ZGl2IHVpLXZpZXc+PC9kaXY+XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJtZW1iZXJDdHJsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcjogJ1JPTEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxSb2xlczogZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhOiAnQUdFTkNZJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsQWdlbmNpZXM6IGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXNlclByb2ZpbGVJZDogZnVuY3Rpb24gKCRzdGF0ZVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5pZCAhPT0gdW5kZWZpbmVkKSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHN0YXRlUGFyYW1zLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KS8vI2VuZHJlZ2lvbiBtZW1iZXJzXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIG1lbWJlcnMuTWVtYmVyc0xpc3RcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcIm1lbWJlcnMuTWVtYmVyc0xpc3RcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvTWVtYmVyc0xpc3RcIixcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQvbWVtYmVyL21lbWJlcnNMaXN0Lmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWVcclxuICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIG1lbWJlcnMuTWVtYmVyc0xpc3RcclxuICAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gbWVtYmVyc1xyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBldmVudHNcclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBldmVudHNcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcImV2ZW50c1wiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9FdmVudHNcIixcclxuICAgICAgICAgICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogXCI8ZGl2IHVpLXZpZXc+PC9kaXY+XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJldmVudEN0cmxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlOiAnRVZFTlQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxFdmVudHM6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXQ6ICdFVkVOVF9UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsRXZlbnRUeXBlczogZnVuY3Rpb24gKGV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVzOiAnRVZFTlRfU1RBVFVTJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsRXZlbnRTdGF0czogZnVuY3Rpb24gKGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXMuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG06ICdNRU1CRVInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxDb29yZE1lbWJlcnM6IGZ1bmN0aW9uIChtLCAkaHR0cCwgJGNvb2tpZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtLmdldFJvbGVNZW1iZXJzKHsgcm9sZUlkOiAxIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkvLyNlbmRyZWdpb24gZXZlbnRzXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIGV2ZW50cy5FdmVudHNMaXN0XHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJldmVudHMuRXZlbnRzTGlzdFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9FdmVudHNMaXN0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L2V2ZW50L2V2ZW50c0xpc3QuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBldmVudHMuRXZlbnRzTGlzdFxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBldmVudHMuRXZlbnRJbmZvZlxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwiZXZlbnRzLkV2ZW50SW5mb1wiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9ldmVudEluZm8vOmlkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L2V2ZW50L2V2ZW50SW5mby5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJldmVudEluZm9DdHJsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZTogJ0VWRU5UJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0V2ZW50OiBmdW5jdGlvbiAoZSwgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnRJZCA9ICRzdGF0ZVBhcmFtcy5pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChldmVudElkID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnF1ZXJ5KFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7IGlkOiBldmVudElkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkvLyNlbmRyZWdpb24gZXZlbnRzLkV2ZW50SW5mb1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIGV2ZW50c1xyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXNcclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMgbWFpbiAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwicmVzb3VyY2VzXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL1Jlc291cmNlc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxkaXYgdWktdmlldz48L2Rpdj5cIixcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBcInJlc291cmNlc0N0cmxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogJ1NUQVRFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsU3RhdGVzOiBmdW5jdGlvbiAoc3RhdGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWc6ICdBR0VOQ1knLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxBZ2VuY2llczogZnVuY3Rpb24gKGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWcuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGM6ICdDT05UQUNUX1RZUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxDb250YWN0VHlwZXM6IGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYy5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZDogJ0RFUExPWU1FTlRfUFJJT1JJVFknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxEZXBsb3lQcmlvcml0aWVzOiBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVzOiAnRVZFTlRfU1RBVFVTJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsRXZlbnRTdGF0czogZnVuY3Rpb24gKGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXMuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV0OiAnRVZFTlRfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEV2ZW50VHlwZXM6IGZ1bmN0aW9uIChldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV0LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdDogJ0ZJTEVfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEZpbGVUeXBlczogZnVuY3Rpb24gKGZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhjbTogJ0hPUklaT05UQUxfQ09MTF9NRVRIT0RTJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsSG9yQ29sbE1ldGhvZHM6IGZ1bmN0aW9uIChoY20pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoY20uZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhkOiAnSE9SSVpPTlRBTF9EQVRVTScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEhvckRhdHVtczogZnVuY3Rpb24gKGhkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0OiAnSE9VU0lOR19UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsSG91c2VUeXBlczogZnVuY3Rpb24gKGh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaHQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhxOiAnSFdNX1FVQUxJVFknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxIV01xdWFsaXRpZXM6IGZ1bmN0aW9uIChocSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhxLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBod21UOiAnSFdNX1RZUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxIV010eXBlczogZnVuY3Rpb24gKGh3bVQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBod21ULmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY2M6ICdJTlNUX0NPTExfQ09ORElUSU9OJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsSW5zdENvbGxlY3RDb25kaXRpb25zOiBmdW5jdGlvbiAoaWNjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWNjLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtOiAnTUFSS0VSJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsTWFya2VyczogZnVuY3Rpb24gKG0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBubjogJ05FVFdPUktfTkFNRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbE5ldHdvcmtOYW1lczogZnVuY3Rpb24gKG5uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbm4uZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wcTogJ09QX1FVQUxJVFknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxPYmpQdFF1YWxpdGllczogZnVuY3Rpb24gKG9wcSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wcS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0OiAnT1BfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbE9ialB0VHlwZXM6IGZ1bmN0aW9uIChvcHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNiOiAnU0VOU09SX0JSQU5EJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsU2Vuc29yQnJhbmRzOiBmdW5jdGlvbiAoc2IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzYi5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHQ6ICdERVBMT1lNRU5UX1RZUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxEZXBsb3ltZW50VHlwZXM6IGZ1bmN0aW9uIChkdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGR0LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzc3RhdDogJ1NUQVRVU19UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsU3RhdHVzVHlwZXM6IGZ1bmN0aW9uIChzc3RhdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNzdGF0LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdDogJ1NFTlNPUl9UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsU2Vuc29yVHlwZXM6IGZ1bmN0aW9uIChzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBudDogJ05FVFdPUktfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbE5ldHdvcmtUeXBlczogZnVuY3Rpb24gKG50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbnQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZjbTogJ1ZFUlRJQ0FMX0NPTExfTUVUSE9EJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsVmVydGljYWxDb2xsTWV0aG9kczogZnVuY3Rpb24gKHZjbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZjbS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmQ6ICdWRVJUSUNBTF9EQVRVTScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFZlcnRpY2FsRGF0dW1zOiBmdW5jdGlvbiAodmQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2ZC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pLy8jZW5kcmVnaW9uIHJlc291cmNlcyBtYWluXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0XHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJyZXNvdXJjZXMuUmVzb3VyY2VzTGlzdFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9SZXNvdXJjZXNMaXN0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9yZXNvdXJjZXNMaXN0Lmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWVcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3RcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gYWxsIGxvb2t1cCBodG1sc1xyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LmFnZW5jeVxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwicmVzb3VyY2VzLlJlc291cmNlc0xpc3QuYWdlbmN5XCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL0FnZW5jaWVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9hZ2VuY3kuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5hZ2VuY3lcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuQ29udGFjdFR5cGVcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkNvbnRhY3RUeXBlXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL0NvbnRhY3RUeXBlc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9yZXNvdXJjZXMvY29udGFjdFR5cGUuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5Db250YWN0VHlwZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5EZXBQcmlvcml0eVxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwicmVzb3VyY2VzLlJlc291cmNlc0xpc3QuRGVwUHJpb3JpdHlcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvRGVwbG95bWVudFByaW9yaXRpZXNcIixcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQvcmVzb3VyY2VzL2RlcGxveW1lbnRQcmlvcml0eS5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkRlcFByaW9yaXR5XHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkV2ZW50U3RhdHVzXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJyZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5FdmVudFN0YXR1c1wiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9FdmVudFN0YXR1c1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9yZXNvdXJjZXMvZXZlbnRTdGF0dXMuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5FdmVudFN0YXR1c1xyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5FdmVudFR5cGVcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkV2ZW50VHlwZVwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9FdmVudFR5cGVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9ldmVudFR5cGUuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5FdmVudFR5cGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuRmlsZVR5cGVcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkZpbGVUeXBlXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL0ZpbGVUeXBlc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9yZXNvdXJjZXMvZmlsZVR5cGUuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5GaWxlVHlwZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5Ib3JDb2xsTWV0aGRcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkhvckNvbGxNZXRoZFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9Ib3Jpem9udGFsQ29sbE1ldGhvZHNcIixcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQvcmVzb3VyY2VzL2hvcml6b250YWxDb2xsZWN0aW9uTWV0aG9kLmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWVcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuSG9yQ29sbE1ldGhkXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkhvckRhdHVtXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJyZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5Ib3JEYXR1bVwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9Ib3Jpem9udGFsRGF0dW1zXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9ob3Jpem9udGFsRGF0dW0uaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5Ib3JEYXR1bVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5Ib3VzaW5nVHlwZVxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwicmVzb3VyY2VzLlJlc291cmNlc0xpc3QuSG91c2luZ1R5cGVcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvSG91c2luZ1R5cGVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9ob3VzaW5nVHlwZS5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkhvdXNpbmdUeXBlXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkhXTVF1YWxcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkhXTVF1YWxcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvSFdNUXVhbGl0aWVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9od21RdWFsaXR5Lmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWVcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuSFdNUXVhbFxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5IV01UeXBlXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJyZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5IV01UeXBlXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL0hXTVR5cGVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9od21UeXBlLmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWVcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuSFdNVHlwZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5JbnN0ckNvbGxDb25kaXRpb25cclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlc291cmNlcy5SZXNvdXJjZXNMaXN0Lkluc3RyQ29sbENvbmRpdGlvblwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9JbnN0ckNvbGxDb25kaXRpb25zXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9pbnN0cnVtZW50Q29sbGVjdGlvbkNvbmRpdGlvbi5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0Lkluc3RyQ29sbENvbmRpdGlvblxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5NYXJrZXJcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlc291cmNlcy5SZXNvdXJjZXNMaXN0Lk1hcmtlclwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9NYXJrZXJzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9tYXJrZXIuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5NYXJrZXJcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuTmV0d29ya05hbWVzXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJyZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5OZXR3b3JrTmFtZXNcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvTmV0d29ya05hbWVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9uZXR3b3JrTmFtZXMuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5OZXR3b3JrTmFtZXNcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuT1BxdWFsaXR5XHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJyZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5PUHF1YWxpdHlcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvT2JqUG9pbnRRdWFsaXRpZXNcIixcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQvcmVzb3VyY2VzL29iamVjdGl2ZVBvaW50UXVhbGl0eS5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0Lk9QcXVhbGl0eVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5PUFR5cGVcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlc291cmNlcy5SZXNvdXJjZXNMaXN0Lk9QVHlwZVwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9PYmpQb2ludFR5cGVcIixcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQvcmVzb3VyY2VzL29iamVjdGl2ZVBvaW50VHlwZS5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0Lk9QVHlwZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5TZW5zb3JCcmFuZFxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwicmVzb3VyY2VzLlJlc291cmNlc0xpc3QuU2Vuc29yQnJhbmRcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvU2Vuc29yQnJhbmRzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9zZW5zb3JCcmFuZC5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LlNlbnNvckJyYW5kXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkRlcFR5cGVcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlc291cmNlcy5SZXNvdXJjZXNMaXN0LlNlbkRlcFR5cGVcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvU2Vuc29yRGVwbG95bWVudFR5cGVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9kZXBsb3ltZW50VHlwZS5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkRlcFR5cGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuU3RhdHVzVHlwZVxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwicmVzb3VyY2VzLlJlc291cmNlc0xpc3QuU3RhdHVzVHlwZVwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9TdGF0dXNUeXBlc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9yZXNvdXJjZXMvc3RhdHVzVHlwZS5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LlN0YXR1c1R5cGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuU2Vuc29yVHlwZVxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwicmVzb3VyY2VzLlJlc291cmNlc0xpc3QuU2Vuc29yVHlwZVwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9TZW5zb3JUeXBlc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9yZXNvdXJjZXMvc2Vuc29yVHlwZS5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LlNlbnNvclR5cGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuTmV0d29ya1R5cGVcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlc291cmNlcy5SZXNvdXJjZXNMaXN0Lk5ldHdvcmtUeXBlXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL05ldHdvcmtUeXBlc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9yZXNvdXJjZXMvbmV0d29ya1R5cGUuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5OZXR3b3JrVHlwZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5WZXJ0Q29sbE1ldGhvZFxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwicmVzb3VyY2VzLlJlc291cmNlc0xpc3QuVmVydENvbGxNZXRob2RcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvVmVydGljYWxDb2xsTWV0aG9kc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9yZXNvdXJjZXMvdmVydGljYWxDb2xsZWN0aW9uTWV0aG9kLmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWVcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuVmVydENvbGxNZXRob2RcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuVmVydERhdHVtXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJyZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5WZXJ0RGF0dW1cIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvVmVydGljYWxEYXR1bXNcIixcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQvcmVzb3VyY2VzL3ZlcnRpY2FsRGF0dW0uaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LlZlcnREYXR1bVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBhbGwgbG9va3VwIGh0bWxzXHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gcmVzb3VyY2VzXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIGJ1bGsgaHdtIGFkanVzdG1lbnQgcGFnZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwiYnVsa0hXTUFkalwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9CdWxrSFdNX2FkanVzdG1lbnRzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L2h3bS9idWxrSFdNQWRqLmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJidWxrSFdNQWRqQ3RybFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZTogJ0VWRU5UJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRMaXN0OiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHM6ICdTVEFURScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlTGlzdDogZnVuY3Rpb24gKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjOiAnQ09VTlRJRVMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb3VudHlMaXN0OiBmdW5jdGlvbiAoYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIGJ1bGsgaHdtIGFkanVzdG1lbnQgcGFnZSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwiYnVsa0hXTVwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9IaXN0b3JpY0hXTV9VcGxvYWRcIixcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQvaHdtL2J1bGtIV00uaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBcImJ1bGtIV01DdHJsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlOiAnRVZFTlQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudExpc3Q6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgczogJ1NUQVRFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVMaXN0OiBmdW5jdGlvbiAocykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGM6ICdDT1VOVElFUycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvdW50eUxpc3Q6IGZ1bmN0aW9uIChjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYy5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHQ6ICdIV01fVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh3bVR5cGVMaXN0OiBmdW5jdGlvbiAoaHQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGh0LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtOiAnTUFSS0VSJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFya2VyTGlzdDogZnVuY3Rpb24gKG0pe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhxOiAnSFdNX1FVQUxJVFknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBod21RdWFsTGlzdDogZnVuY3Rpb24gKGhxKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBocS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGQ6ICdIT1JJWk9OVEFMX0RBVFVNJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaG9yaXpEYXR1bUxpc3Q6IGZ1bmN0aW9uIChoZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhjbTogJ0hPUklaT05UQUxfQ09MTF9NRVRIT0RTJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaG9yQ29sbE1ldGhMaXN0OiBmdW5jdGlvbiAoaGNtKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoY20uZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZkOiAnVkVSVElDQUxfREFUVU0nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0RGF0dW1MaXN0OiBmdW5jdGlvbiAodmQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZkLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2Y206ICdWRVJUSUNBTF9DT0xMX01FVEhPRCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRDb2xsTWV0aExpc3Q6IGZ1bmN0aW9uICh2Y20pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2Y20uZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGY6ICdGSUxFX1RZUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlVHlwZXNMaXN0OiBmdW5jdGlvbiAoZikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGYuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGE6ICdBR0VOQ1knLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZ2VuY2llc0xpc3Q6IGZ1bmN0aW9uIChhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIGhpc3RvcmljSFdNIHVwbG9hZFxyXG4gICAgICAgICAgIC8qICAgICAuc3RhdGUoXCJoaXN0b3JpY0hXTXNcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvRXZlbnRzLzppZC9IaXN0b3JpY0hXTXNcIixcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQvaHdtL2hpc3RvcmljLmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJoaXN0b3JpY0hXTUN0cmxcIixcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGU6ICdFVkVOVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNFdmVudDogZnVuY3Rpb24gKGUsICRzdGF0ZVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5pZCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5xdWVyeSh7IGlkOiAkc3RhdGVQYXJhbXMuaWQgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhkOiAnSE9SSVpPTlRBTF9EQVRVTScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEhEYXR1bXM6IGZ1bmN0aW9uIChoZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhjOiAnSE9SSVpPTlRBTF9DT0xMX01FVEhPRFMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBIQ29sbGVjdE1ldGhzOiBmdW5jdGlvbiAoaGMpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhjLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzOiAnU1RBVEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTdGF0ZXM6IGZ1bmN0aW9uIChzKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjOiAnQ09VTlRJRVMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBDb3VudGllczogZnVuY3Rpb24gKGMpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdDogJ09QX1RZUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBPUFR5cGVzOiBmdW5jdGlvbiAob3B0KXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZkOiAnVkVSVElDQUxfREFUVU0nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBWRGF0dW1zOiBmdW5jdGlvbiAodmQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZkLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBodDogJ0hXTV9UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgSFR5cGVzOiBmdW5jdGlvbiAoaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBodC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHF1OiAnSFdNX1FVQUxJVFknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBIV01RdWFsczogZnVuY3Rpb24gKGhxdSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhxdS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pKi9cclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvblxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gc2l0ZSAoYWJzdHJhY3QpXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJzaXRlXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL1NpdGUvOmlkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZToge3ZhbHVlOiBudWxsLCBzcXVhc2g6IHRydWV9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IHt2YWx1ZTogbnVsbCwgc3F1YXNoOiB0cnVlfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3NpdGUvc2l0ZS5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRzdGF0ZVBhcmFtcycsIGZ1bmN0aW9uICgkc2NvcGUsICRzdGF0ZVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZUlEID0gJHN0YXRlUGFyYW1zLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8jcmVnaW9uIHNpdGUgc3R1ZmZcclxuICAgICAgICAgICAgICAgICAgICAgICAgczogJ1NJVEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzU2l0ZTogZnVuY3Rpb24gKHMsICRzdGF0ZVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5pZCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5xdWVyeSh7IGlkOiAkc3RhdGVQYXJhbXMuaWQgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhdGxvbmc6IGZ1bmN0aW9uICgkc3RhdGVQYXJhbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc3RhdGVQYXJhbXMubGF0aXR1ZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGF0bG9uZ2FycmF5ID0gWyRzdGF0ZVBhcmFtcy5sYXRpdHVkZSwgJHN0YXRlUGFyYW1zLmxvbmdpdHVkZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhdGxvbmdhcnJheTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1NpdGVOZXR3b3JrTmFtZXM6IGZ1bmN0aW9uIChzLCAkc3RhdGVQYXJhbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc3RhdGVQYXJhbXMuaWQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMuZ2V0U2l0ZU5ldHdvcmtOYW1lcyh7IGlkOiAkc3RhdGVQYXJhbXMuaWQgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNTaXRlTmV0d29ya1R5cGVzOiBmdW5jdGlvbiAocywgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHN0YXRlUGFyYW1zLmlkID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLmdldFNpdGVOZXR3b3JrVHlwZXMoeyBpZDogJHN0YXRlUGFyYW1zLmlkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzU2l0ZUhvdXNpbmdzOiBmdW5jdGlvbiAocywgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHN0YXRlUGFyYW1zLmlkID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLmdldFNpdGVIb3VzaW5ncyh7IGlkOiAkc3RhdGVQYXJhbXMuaWQgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNTaXRlT1BzOiBmdW5jdGlvbiAocywgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHN0YXRlUGFyYW1zLmlkID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLmdldFNpdGVPUHMoeyBpZDogJHN0YXRlUGFyYW1zLmlkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzU2l0ZVNlbnNvcnM6IGZ1bmN0aW9uIChzLCAkc3RhdGVQYXJhbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc3RhdGVQYXJhbXMuaWQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMuZ2V0U2l0ZVNlbnNvcnMoeyBpZDogJHN0YXRlUGFyYW1zLmlkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzU2l0ZUhXTXM6IGZ1bmN0aW9uIChzLCAkc3RhdGVQYXJhbXMsICRodHRwLCAkY29va2llcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5pZCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLmdldFNpdGVIV01zKHsgaWQ6ICRzdGF0ZVBhcmFtcy5pZCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1NpdGVGaWxlczogZnVuY3Rpb24gKHMsICRzdGF0ZVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5pZCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5nZXRTaXRlRmlsZXMoeyBpZDogJHN0YXRlUGFyYW1zLmlkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzU2l0ZVBlYWtzOiBmdW5jdGlvbiAocywgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHN0YXRlUGFyYW1zLmlkID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLmdldFNpdGVQZWFrcyh7IGlkOiAkc3RhdGVQYXJhbXMuaWQgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhkOiAnSE9SSVpPTlRBTF9EQVRVTScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEhvckRhdHVtczogZnVuY3Rpb24gKGhkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhjbTogJ0hPUklaT05UQUxfQ09MTF9NRVRIT0RTJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsSG9yQ29sbE1ldGhvZHM6IGZ1bmN0aW9uIChoY20pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoY20uZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0OiAnU1RBVEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxTdGF0ZXM6IGZ1bmN0aW9uIChzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjOiAnQ09VTlRJRVMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxDb3VudGllczogZnVuY3Rpb24gKGMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBodDogJ0hPVVNJTkdfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEhvdXNpbmdUeXBlczogZnVuY3Rpb24gKGh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaHQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5uOiAnTkVUV09SS19OQU1FJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsTmV0d29ya05hbWVzOiBmdW5jdGlvbiAobm4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBubi5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnQ6ICdORVRXT1JLX1RZUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxOZXR3b3JrVHlwZXM6IGZ1bmN0aW9uIChudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG50LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkdDogJ0RFUExPWU1FTlRfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbERlcGxveVR5cGVzOiBmdW5jdGlvbiAoZHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkdC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zZDogJ1NFTlNPUl9ERVBMT1lNRU5UJywgLS0tLS0tLS0tLS0tLS0tLXJldHVybmVkIGluIHRoZSBiZWxvdyByZXF1ZXN0ICdhbGxTZW5zb3JUeXBlcycgZ3JvdXBlZCB0b2dldGhlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2FsbFNlbnNEZXBzOiBmdW5jdGlvbiAoc2QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgcmV0dXJuIHNkLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL30sICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHA6ICdERVBMT1lNRU5UX1BSSU9SSVRZJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsRGVwbG95UHJpb3JpdGllczogZnVuY3Rpb24gKGRwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZHAuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBzaXRlIHN0dWZmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBvcCBzdHVmZiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHQ6ICdPUF9UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsT1BUeXBlczogZnVuY3Rpb24gKG9wdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmVydERhdHM6ICdWRVJUSUNBTF9EQVRVTScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFZlcnREYXR1bXM6IGZ1bmN0aW9uICh2ZXJ0RGF0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZlcnREYXRzLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0Q29sTWV0OiAnVkVSVElDQUxfQ09MTF9NRVRIT0QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxWZXJ0Q29sTWV0aG9kczogZnVuY3Rpb24gKHZlcnRDb2xNZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2ZXJ0Q29sTWV0LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcFF1YWw6ICdPUF9RVUFMSVRZJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsT1BRdWFsaXRpZXM6IGZ1bmN0aW9uIChvcFF1YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcFF1YWwuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBvcCBzdHVmZlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyNyZWdpb24gc2Vuc29yIHN0dWZmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGU6ICdFVkVOVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEV2ZW50czogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW50OiAnU0VOU09SX1RZUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxTZW5zb3JUeXBlczogZnVuY3Rpb24gKHNlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZW50LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYjogJ1NFTlNPUl9CUkFORCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFNlbnNvckJyYW5kczogZnVuY3Rpb24gKHNiKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzYi5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gc2Vuc29yIHN0dWZmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBod20gc3R1ZmZcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHdtdDogJ0hXTV9UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsSFdNVHlwZXM6IGZ1bmN0aW9uIChod210KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaHdtdC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHE6ICdIV01fUVVBTElUWScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEhXTVF1YWxpdGllczogZnVuY3Rpb24gKGhxKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBocS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbTogJ01BUktFUicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbE1hcmtlcnM6IGZ1bmN0aW9uIChtKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIGh3bSBzdHVmZlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyNyZWdpb24gZmlsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdDogJ0ZJTEVfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEZpbGVUeXBlczogZnVuY3Rpb24oZnQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ0LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhOiAnQUdFTkNZJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsQWdlbmNpZXM6IGZ1bmN0aW9uKGEpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIGZpbGVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHNpdGUgKGFic3RyYWN0KVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBzaXRlLmluZm9cclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInNpdGUuZGFzaGJvYXJkXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL1NpdGVEYXNoYm9hcmRcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3NpdGVObyc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRjb29raWVzJywgJ3RoaXNTaXRlJywgZnVuY3Rpb24gKCRzY29wZSwgJGNvb2tpZXMsIHRoaXNTaXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTaXRlICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlTm8gPSB0aGlzU2l0ZS5zaXRlX25vO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdhdGNoIGZvciB0aGUgc2Vzc2lvbiBldmVudCB0byBjaGFuZ2UgYW5kIHVwZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJyk7IH0sIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vzc2lvbkV2ZW50ID0gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJykgIT09IG51bGwgJiYgJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJykgIT09IHVuZGVmaW5lZCA/ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50TmFtZScpIDogXCJBbGwgRXZlbnRzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdj48aDIgc3R5bGU9XCJtYXJnaW4tdG9wOjBcIj5TaXRlIHt7U2l0ZU5vfX0gLSBGb3Ige3tzZXNzaW9uRXZlbnR9fTwvaDI+PC9kaXY+PGhyIC8+JyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2FNYXAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc2l0ZU1hcEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnQvc2l0ZS9zaXRlTWFwVmlldy5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhU2l0ZTogZnVuY3Rpb24gKHRoaXNTaXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzU2l0ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1NpdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGR0OiAnREVQTE9ZTUVOVF9UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBsb3ltZW50VHlwZXM6IGZ1bmN0aW9uKHRoaXNTaXRlLCBkdCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzU2l0ZSAhPT0gdW5kZWZpbmVkKSByZXR1cm4gZHQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzOiAnU0lURScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZUhXTXM6IGZ1bmN0aW9uICh0aGlzU2l0ZSwgcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1NpdGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMuZ2V0U2l0ZUhXTXMoeyBpZDogdGhpc1NpdGUuc2l0ZV9pZCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaTogJ0lOU1RSVU1FTlQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhcm9TZW5zb3JzOiBmdW5jdGlvbiAodGhpc1NpdGUsIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTaXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpLmdldFNlbnNvclZpZXcoeyBWaWV3VHlwZTogJ2Jhcm9fdmlldycgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ldFNlbnNvcnM6IGZ1bmN0aW9uICh0aGlzU2l0ZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1NpdGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkuZ2V0U2Vuc29yVmlldyh7IFZpZXdUeXBlOiAnbWV0X3ZpZXcnIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZGdTZW5zb3JzOiBmdW5jdGlvbiAodGhpc1NpdGUsIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTaXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpLmdldFNlbnNvclZpZXcoeyBWaWV3VHlwZTogJ3JkZ192aWV3JyB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Rvcm1TZW5zb3JzOiBmdW5jdGlvbiAodGhpc1NpdGUsIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTaXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpLmdldFNlbnNvclZpZXcoeyBWaWV3VHlwZTogJ3N0b3JtdGlkZV92aWV3JyB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2F2ZVNlbnNvcnM6IGZ1bmN0aW9uICh0aGlzU2l0ZSwgaSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1NpdGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGkuZ2V0U2Vuc29yVmlldyh7IFZpZXdUeXBlOiAnd2F2ZWhlaWdodF92aWV3JyB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJlc1RlbXBTZW5zb3JzOiBmdW5jdGlvbiAodGhpc1NpdGUsIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTaXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpLmdldFNlbnNvclZpZXcoeyBWaWV3VHlwZTogJ3ByZXNzdXJldGVtcF92aWV3JyB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhlcm1TZW5zb3JzOiBmdW5jdGlvbiAodGhpc1NpdGUsIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTaXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpLmdldFNlbnNvclZpZXcoeyBWaWV3VHlwZTogJ3RoZXJtX3ZpZXcnIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3ZWJjYW1TZW5zb3JzOiBmdW5jdGlvbiAodGhpc1NpdGUsIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTaXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpLmdldFNlbnNvclZpZXcoeyBWaWV3VHlwZTogJ3dlYmNhbV92aWV3JyB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFpbmdhZ2VTZW5zb3JzOiBmdW5jdGlvbiAodGhpc1NpdGUsIGkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTaXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpLmdldFNlbnNvclZpZXcoeyBWaWV3VHlwZTogJ3JhaW5nYWdlX3ZpZXcnIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnYVNpdGUnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc2l0ZUN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnQvc2l0ZS9zaXRlSW5mb1ZpZXcuaHRtbCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ29wJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ29iamVjdGl2ZVBvaW50Q3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudC9vYmplY3RpdmVQb2ludC9vYmplY3RpdmVQb2ludExpc3QuaHRtbCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3NlbnNvcic6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdzZW5zb3JDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50L3NlbnNvci9zZW5zb3JMaXN0Lmh0bWwnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdod20nOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnaHdtQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudC9od20vaHdtTGlzdC5odG1sJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnZmlsZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdmaWxlQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudC9maWxlL2ZpbGVMaXN0Lmh0bWwnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdwZWFrJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3BlYWtDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50L3BlYWsvcGVha0xpc3QuaHRtbCdcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KS8vI2VuZHJlZ2lvbiBzaXRlLmluZm9cclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gUXVpY2tIV00gcGFnZVxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwicXVpY2tDcmVhdGVcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvUXVpY2tDcmVhdGUvOmlkXCIsICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQvc2l0ZS9xdWlja0NyZWF0ZS5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJxdWlja0NyZWF0ZUN0cmxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGljaFF1aWNrOiBmdW5jdGlvbiAoJHN0YXRlUGFyYW1zKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkc3RhdGVQYXJhbXMuaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBzaXRlIHN0dWZmICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhkOiAnSE9SSVpPTlRBTF9EQVRVTScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEhvckRhdHVtczogZnVuY3Rpb24gKGhkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhjbTogJ0hPUklaT05UQUxfQ09MTF9NRVRIT0RTJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsSG9yQ29sbE1ldGhvZHM6IGZ1bmN0aW9uIChoY20pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoY20uZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0OiAnU1RBVEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxTdGF0ZXM6IGZ1bmN0aW9uIChzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjOiAnQ09VTlRJRVMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxDb3VudGllczogZnVuY3Rpb24gKGMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gc2l0ZSBzdHVmZlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyNyZWdpb24gb3Agc3R1ZmYgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0OiAnT1BfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbE9QVHlwZXM6IGZ1bmN0aW9uIChvcHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcHQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZlcnREYXRzOiAnVkVSVElDQUxfREFUVU0nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxWZXJ0RGF0dW1zOiBmdW5jdGlvbiAodmVydERhdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2ZXJ0RGF0cy5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmVydENvbE1ldDogJ1ZFUlRJQ0FMX0NPTExfTUVUSE9EJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsVmVydENvbE1ldGhvZHM6IGZ1bmN0aW9uICh2ZXJ0Q29sTWV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmVydENvbE1ldC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BRdWFsOiAnT1BfUVVBTElUWScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbE9QUXVhbGl0aWVzOiBmdW5jdGlvbiAob3BRdWFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3BRdWFsLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gb3Agc3R1ZmYgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8jcmVnaW9uIGh3bSBzdHVmZiAoaWYgaWQ9J2h3bSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHdtdDogJ0hXTV9UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsSFdNVHlwZXM6IGZ1bmN0aW9uIChod210LCAkc3RhdGVQYXJhbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc3RhdGVQYXJhbXMuaWQgPT0gJ0hXTScpIHJldHVybiBod210LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBocTogJ0hXTV9RVUFMSVRZJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsSFdNUXVhbGl0aWVzOiBmdW5jdGlvbiAoaHEsICRzdGF0ZVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5pZCA9PSAnSFdNJykgcmV0dXJuIGhxLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtOiAnTUFSS0VSJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsTWFya2VyczogZnVuY3Rpb24gKG0sICRzdGF0ZVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5pZCA9PSAnSFdNJykgcmV0dXJuIG0uZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBod20gc3R1ZmYgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyNyZWdpb24gc2Vuc29yIHN0dWZmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGR0OiAnREVQTE9ZTUVOVF9UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsRGVwbG95VHlwZXM6IGZ1bmN0aW9uIChkdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGR0LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlOiAnRVZFTlQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxFdmVudHM6IGZ1bmN0aW9uIChlLCAkc3RhdGVQYXJhbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc3RhdGVQYXJhbXMuaWQgPT0gJ1NlbnNvcicpIHJldHVybiBlLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW50OiAnU0VOU09SX1RZUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxTZW5zb3JUeXBlczogZnVuY3Rpb24gKHNlbnQsICRzdGF0ZVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5pZCA9PSAnU2Vuc29yJykgcmV0dXJuIHNlbnQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNiOiAnU0VOU09SX0JSQU5EJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsU2Vuc29yQnJhbmRzOiBmdW5jdGlvbiAoc2IsICRzdGF0ZVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5pZCA9PSAnU2Vuc29yJykgcmV0dXJuIHNiLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3NkOiAnU0VOU09SX0RFUExPWU1FTlQnLCAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXJldHVybmVkIGluIGFib3ZlICdhbGxTZW5zb3JUeXBlcycgZ3JvdXBlZCB0b2dldGhlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2FsbFNlbnNEZXBzOiBmdW5jdGlvbiAoc2QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgcmV0dXJuIHNkLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0OiAnSE9VU0lOR19UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsSG91c2luZ1R5cGVzOiBmdW5jdGlvbiAoaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBodC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb25cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBRdWlja0hXTSBwYWdlXHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvL3RoaXMgY2F1c2VzIGlzc3VlcyB3aXRoIFN0YXR1czQwNCBOb3QgZm91bmQgb24gY29tcG9uZW50L21haW4vbWFpblZpZXcuaHRtbFxyXG4gICAgICAgICAgICAvLyRsb2NhdGlvblByb3ZpZGVyLmh0bWw1TW9kZSh7XHJcbiAgICAgICAgICAgIC8vICAgIGVuYWJsZWQ6IHRydWUsXHJcbiAgICAgICAgICAgIC8vICAgIHJlcXVpcmVCYXNlOiBmYWxzZVxyXG4gICAgICAgICAgICAvL30pO1xyXG4gICAgICAgIH1cclxuICAgIF0pO1xyXG59KCkpO1xyXG4iXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
