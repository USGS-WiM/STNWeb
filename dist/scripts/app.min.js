!function(){"use strict";{var STNControllers=(angular.module("SettingsControllers",["ngInputModified","ui.validate","angular.filter","xeditable","checklist-model","ngFileUpload"]),angular.module("STNControllers",[]));angular.module("ModalControllers",[])}STNControllers.constant("RegExp",{PASSWORD:/^(((?=.*[a-z])(?=.*[A-Z])(?=.*[0-9]))|((?=.*[a-z])(?=.*[A-Z])(?=.*[!@@?#$%^&_:;-]))|((?=.*[a-z])(?=.*[0-9])(?=.*[!@@?#$%^&_:;-]))|((?=.*[A-Z])(?=.*[0-9])(?=.*[!@@?#$%^&_:;-]))).{8,}$/})}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.directive("barsChart",["$parse",function($parse){var directiveDefinitionObject={restrict:"E",replace:!1,scope:{data:"=elevationData"},link:function(scope,element,attrs){var chart=(attrs.elevationData.split(","),d3.select(element[0]));chart.append("div").attr("class","chart").selectAll("div").data(scope.data).enter().append("div").transition().ease("elastic").style("width",function(d){return d+"%"}).text(function(d){return d+"%"}),scope.$watch("data",function(newValue,oldValue){scope.data=newValue})}};return directiveDefinitionObject}]),STNControllers.directive("siteSearch",function(){return{restrict:"E",scope:{model:"=ngModel",searchBy:"=",searchTerm:"="},replace:!0,template:'<div class="searchnav"><div class="searchby"><b>Search By:</b><div class="searchbyoption"><input type="radio" name="SearchBy" ng-model="searchBy.val" value="bySiteId" />ID</div><div class="searchbyoption"><input type="radio" name="SearchBy" ng-model="searchBy.val" value="bySiteNo" />Number</div><div class="searchbyoption"><input type="radio" name="SearchBy" ng-model="searchBy.val" value="bySiteName" />Name</div></div><div class="search-input"><input ng-focus="goSearch" type="text" ng-model="searchTerm" ng-enter="IndexSearchSites()" placeholder="Search Sites..." /><button type="button" class="borderLess" ng-click="IndexSearchSites()">Search <i class="ion-search"></i></button></div></div>',controller:["$scope","$state","$http","SITE","$uibModal",function($scope,$state,$http,SITE,$uibModal){$scope.searchTerm="",$scope.searchBy={val:"bySiteNo"},$scope.placeholder="...",$scope.IndexSearchSites=function(){if(""!==$scope.searchTerm)switch($http.defaults.headers.common.Accept="application/json",$scope.searchBy.val){case"bySiteNo":SITE.getSearchedSite({bySiteNo:$scope.searchTerm},function(resp){siteSearchResponse(resp)},function(errorResponse){siteSearchResponse(errorResponse)});break;case"bySiteId":SITE.getSearchedSite({bySiteId:$scope.searchTerm},function(resp){siteSearchResponse(resp)},function(errorResponse){siteSearchResponse(errorResponse)});break;case"bySiteName":SITE.getSearchedSite({bySiteName:$scope.searchTerm},function(resp){siteSearchResponse(resp)},function(errorResponse){siteSearchResponse(errorResponse)})}};var siteSearchResponse=function(s){if(void 0!==s.status){var errorModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>No site found. For more site search options, go to the Sites navigation tab to search for sites.</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});errorModal.result.then(function(){$scope.searchTerm="",$scope.searchBy={val:"bySiteNo"}})}else $scope.searchTerm="",$scope.searchBy={val:"bySiteNo"},$state.go("site.dashboard",{id:s.site_id})}}]}}),STNControllers.directive("ngEnter",function(){return function(scope,element,attrs){element.bind("keydown keypress",function(event){13===event.which&&(scope.$apply(function(){scope.$eval(attrs.ngEnter)}),event.preventDefault())})}}),STNControllers.directive("numericOnly",function(){return{require:"ngModel",link:function(scope,element,attrs,modelCtrl){modelCtrl.$parsers.push(function(inputValue){var transformedInput=inputValue?inputValue.replace(/[^\d.-]/g,""):null;return transformedInput!=inputValue&&(modelCtrl.$setViewValue(transformedInput),modelCtrl.$render()),transformedInput})}}}),STNControllers.directive("datepickerPopup",function(){return{restrict:"EAC",require:"ngModel",link:function(scope,element,attr,controller){controller.$formatters.shift()}}}),STNControllers.directive("focus",function(){return function(scope,element,attributes){element[0].focus()}}),STNControllers.directive("backButton",function(){return{restrict:"A",link:function(scope,element,attrs){function goBack(){history.back(),scope.$apply()}element.bind("click",goBack)}}}),STNControllers.directive("passwordValidate",["RegExp",function(regex){return{require:"ngModel",link:function(scope,elm,attrs,ctrl){elm.unbind("keydown").unbind("change"),elm.bind("blur",function(viewValue){scope.$apply(function(){return regex.PASSWORD.test(viewValue.target.value)?(ctrl.$setValidity("passwordValidate",!0),viewValue):void ctrl.$setValidity("passwordValidate",!1)})})}}}]),STNControllers.directive("sameAs",["$parse",function($parse){return{require:"ngModel",restrict:"A",link:function(scope,elm,attrs,ctrl){elm.unbind("keydown").unbind("change"),elm.bind("blur",function(viewValue){scope.$watch(function(){return $parse(attrs.sameAs)(scope)===ctrl.$modelValue},function(currentValue){ctrl.$setValidity("passwordMismatch",currentValue)})})}}}]),STNControllers.directive("elastic",["$timeout",function($timeout){return{restrict:"A",link:function($scope,element){$scope.initialHeight=$scope.initialHeight||element[0].style.height;var resize=function(){element[0].style.height=$scope.initialHeight,element[0].style.height=""+element[0].scrollHeight+"px"};element.on("input change",resize),$timeout(resize,0)}}}]),STNControllers.directive("myInputMask",function(){return{restrict:"AC",link:function(scope,el,attrs){el.inputmask(scope.$eval(attrs.myInputMask)),el.on("change",function(){scope.$eval(attrs.ngModel+"='"+el.val()+"'")})}}}),STNControllers.directive("fileModel",["$parse",function($parse){return{restrict:"A",link:function(scope,element,attrs){var model=$parse(attrs.fileModel),modelSetter=model.assign;element.bind("change",function(){scope.$apply(function(){modelSetter(scope,element[0].files[0])})})}}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("siteSearchCtrl",["$scope","$cookies","$rootScope","$location","stateList","sensorTypes","networkNames","SITE",function($scope,$cookies,$rootScope,$location,stateList,sensorTypes,networkNames,SITE){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{if($rootScope.thisPage="Site Search",$rootScope.activeMenu="sites",$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEvent=null!==$cookies.get("SessionEventName")&&void 0!==$cookies.get("SessionEventName")?$cookies.get("SessionEventName"):"All Events"}),$scope.states=stateList,$scope.senTypes=sensorTypes,$scope.netNames=networkNames,$scope.Chosen={},$scope.chosenStates=[],$scope.siteResponse=!1,$scope.checkboxModel={hwmOnly:0,senOnly:0,rdgOnly:0,opDefined:0},$scope.sort_by=function(newSortingOrder){$scope.sortingOrder==newSortingOrder&&($scope.reverse=!$scope.reverse),$scope.sortingOrder=newSortingOrder,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+newSortingOrder+" i").removeClass().addClass($scope.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")},void 0!==$rootScope.searchParams){var thisSearch=$rootScope.searchParams;$scope.sessionEvent=Number(thisSearch.event);for(var i=0;i<$scope.states.length;i++){for(var y=0;y<thisSearch.state.length;y++)thisSearch.state[y]==$scope.states[i].state_abbrev?($scope.states[i].selected=!0,y=thisSearch.state.length):$scope.states[i].selected=!1;0===thisSearch.state.length&&($scope.states[i].selected=!1)}$scope.chosenStates=thisSearch.state,$scope.Chosen.sensor=thisSearch.SensorType,$scope.Chosen.network=thisSearch.NetworkName,$scope.Chosen.survey=thisSearch.HWMSurveyed,$scope.checkboxModel.hwmOnly=thisSearch.HWMOnly,$scope.checkboxModel.senOnly=thisSearch.SensorOnly,$scope.checkboxModel.rdgOnly=thisSearch.RDGOnly,$scope.checkboxModel.opDefined=thisSearch.OPDefined,SITE.getFilteredSites({Event:$scope.sessionEvent,State:$scope.chosenStates.join(),SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined},function(response){$scope.siteList=response,$scope.siteResponse=!0,$rootScope.stateIsLoading.showLoading=!1},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,alert("Error: "+errorResponse.statusText)})}$scope.searchSites=function(){$rootScope.stateIsLoading.showLoading=!0;var stateString=$scope.chosenStates.join();$scope.siteResponse=!1,$scope.siteList=[];var evID=null!==$cookies.get("SessionEventID")&&void 0!==$cookies.get("SessionEventID")?$cookies.get("SessionEventID"):0;$rootScope.searchParams={event:evID,state:$scope.chosenStates,SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined},SITE.getFilteredSites({Event:evID,State:stateString,SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined},function(response){$scope.siteList=response,$scope.siteResponse=!0,$rootScope.stateIsLoading.showLoading=!1},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,alert("Error: "+errorResponse.statusText)})},$scope.stateClick=function(data){if(data.selected===!0&&$scope.chosenStates.push(data.state_abbrev),data.selected===!1){var ind=$scope.chosenStates.indexOf(data.state_abbrev);ind>=0&&$scope.chosenStates.splice(ind,1)}},$scope.clearFilters=function(){$scope.checkboxModel={hwmOnly:0,senOnly:0,rdgOnly:0,opDefined:0},$scope.Chosen={},$scope.chosenStates=[],angular.forEach($scope.states,function(st){st.selected=!1})}}}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("settingsCtrl",["$scope","$rootScope","$cookies","$location","$state",function($scope,$rootScope,$cookies,$location,$state){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Settings",$rootScope.activeMenu="settings",$scope.settings="Welcome to the new STN Settings Page!!",$scope.changeView=function(view){$state.go(view)})}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("siteModalCtrl",["$scope","$rootScope","$cookies","$q","$location","$state","$http","$sce","$timeout","$uibModal","$uibModalInstance","$filter","leafletMarkerEvents","allDropDownParts","latlong","thisSiteStuff","SITE","SITE_HOUSING","MEMBER","INSTRUMENT","INSTRUMENT_STATUS","LANDOWNER_CONTACT","GEOCODE",function($scope,$rootScope,$cookies,$q,$location,$state,$http,$sce,$timeout,$uibModal,$uibModalInstance,$filter,leafletMarkerEvents,allDropDownParts,latlong,thisSiteStuff,SITE,SITE_HOUSING,MEMBER,INSTRUMENT,INSTRUMENT_STATUS,LANDOWNER_CONTACT,GEOCODE){$scope.HorizontalDatumList=allDropDownParts[0],$scope.HorCollMethodList=allDropDownParts[1],$scope.StateList=allDropDownParts[2],$scope.AllCountyList=allDropDownParts[3],$scope.stateCountyList=[],$scope.DMS={},$scope.allHousingTypeList=allDropDownParts[4],$scope.DepPriorityList=allDropDownParts[5],$scope.NetNameList=allDropDownParts[6],$scope.NetTypeList=allDropDownParts[7],$scope.ProposedSens=allDropDownParts[8],$scope.SensorDeployment=allDropDownParts[9],$scope.userRole=$cookies.get("usersRole"),$scope.closeSites=0,$scope.showMap=!1,$scope.siteLat=0,$scope.siteLong=0,$scope.htmlDescriptionTip=$sce.trustAsHtml("Required by NWIS. Can be listed as <em>'unknown'</em> or <em>'Atlantic Ocean'</em>"),$scope.mapCenter={lat:$scope.siteLat,lng:$scope.siteLong,zoom:17},$scope.events={mapMarkers:{enable:leafletMarkerEvents.getAvailableEvents()}},$scope.mapMarkers=[];var icons={stn:{type:"div",iconSize:[10,10],className:"stnSiteIcon"},newSTN:{type:"div",iconSize:[10,10],className:"newSiteIcon",iconAnchor:[5,5]}},azimuth=function(deg,min,sec){var azi=0;return 0>deg?(azi=-1*deg+1*min/60+1*sec/3600,(-1*azi).toFixed(5)):(azi=1*deg+1*min/60+1*sec/3600,azi.toFixed(5))};$scope.updateAddressOnly=function(){void 0!==$scope.DMS.LADeg&&($scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)),delete $http.defaults.headers.common.Authorization,$http.defaults.headers.common.Accept="application/json",GEOCODE.getAddressParts({Longitude:$scope.aSite.longitude_dd,Latitude:$scope.aSite.latitude_dd},function(response){if(response.result.geographies.Counties.length>0){var stateFIPS=response.result.geographies.Counties[0].STATE,countyName=response.result.geographies.Counties[0].NAME,thisStateID=$scope.AllCountyList.filter(function(c){return c.state_fip==stateFIPS})[0].state_id,thisState=$scope.StateList.filter(function(s){return s.state_id==thisStateID})[0];void 0!==thisState?($scope.aSite.state=thisState.state_abbrev,$scope.stateCountyList=$scope.AllCountyList.filter(function(c){return c.state_id==thisState.state_id}),$scope.aSite.county=countyName):($rootScope.stateIsLoading.showLoading=!1,toastr.error("The Latitude/Longitude did not return a recognized state. Please choose one from the dropdown."))}else $rootScope.stateIsLoading.showLoading=!1,toastr.error("No location information came back from that lat/long")},function(errorResponse){toastr.error("Error getting location information.")})},$scope.$on("leafletDirectiveMarker.dragend",function(event,args){var dragendLocation=args.model;$scope.aSite.latitude_dd=parseFloat(dragendLocation.lat.toFixed(6)),$scope.aSite.longitude_dd=parseFloat(dragendLocation.lng.toFixed(6));var latDMS=deg_to_dms($scope.aSite.latitude_dd).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.aSite.longitude_dd),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2],$scope.updateAddressOnly()}),$scope.getAddress=function(){if(void 0!==$scope.DMS.LADeg&&($scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)),void 0!==$scope.aSite.latitude_dd&&void 0!==$scope.aSite.longitude_dd)$scope.mapCenter={lat:parseFloat($scope.aSite.latitude_dd),lng:parseFloat($scope.aSite.longitude_dd),zoom:18},$scope.mapMarkers=[],$rootScope.stateIsLoading.showLoading=!0,$http.defaults.headers.common.Accept="application/json",delete $http.defaults.headers.common.Authorization,GEOCODE.getAddressParts({Longitude:$scope.aSite.longitude_dd,Latitude:$scope.aSite.latitude_dd},function(response){if(response.result.geographies.Counties.length>0){var stateFIPS=response.result.geographies.Counties[0].STATE,countyName=response.result.geographies.Counties[0].NAME,thisStateID=$scope.AllCountyList.filter(function(c){return c.state_fip==stateFIPS})[0].state_id,thisState=$scope.StateList.filter(function(s){return s.state_id==thisStateID})[0];void 0!==thisState?($scope.aSite.state=thisState.state_abbrev,$scope.stateCountyList=$scope.AllCountyList.filter(function(c){return c.state_id==thisState.state_id}),$scope.aSite.county=countyName,SITE.getProximitySites({Latitude:$scope.aSite.latitude_dd,Longitude:$scope.aSite.longitude_dd,Buffer:5e-4},function(response){if($scope.closeSites=response,$scope.closeSites.length>0)for(var i=0;i<$scope.closeSites.length;i++){var a=$scope.closeSites[i];$scope.mapMarkers.push({lat:a.latitude,lng:a.longitude,site_id:a.site_id,site_no:a.site_no,icon:icons.stn,message:a.site_no,focus:!1})}$scope.mapMarkers.push({lat:parseFloat($scope.aSite.latitude_dd),lng:parseFloat($scope.aSite.longitude_dd),icon:icons.newSTN,message:"New draggable STN site",focus:!1,draggable:!0}),$scope.showMap=!0,$rootScope.stateIsLoading.showLoading=!1},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error: "+errorResponse.statusText)}).$promise):($rootScope.stateIsLoading.showLoading=!1,toastr.error("The Latitude/Longitude did not return a recognized state. Please choose one from the dropdown."))}else $rootScope.stateIsLoading.showLoading=!1,toastr.error("Error getting address location.")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)});else{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please provide a Latitude and Longitude before clicking Verify Location</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}},$scope.houseDirty=!1,$scope.netNameDirty=!1,$scope.netTypeDirty=!1,$scope.siteHouseTypesTable=[],$scope.aSite={},void 0!==latlong&&($scope.aSite.latitude_dd=parseFloat(latlong[0].toFixed(6)),$scope.aSite.longitude_dd=parseFloat(latlong[1].toFixed(6)),$scope.aSite.hdatum_id=4,$scope.aSite.hcollect_method_id=4,$scope.getAddress()),$scope.aSite.decDegORdms="dd",$scope.originalSiteHousings=[],$scope.checked="",$scope.checkedName="Not Defined",$scope.landowner={},$scope.addLandowner=!1,$scope.disableSensorParts=!1,$scope.showSiteHouseTable=!1,$scope.siteHouseTypesTable=[],$scope.siteHousesModel={},$scope.siteHousesToRemove=[],$scope.siteNetworkNames=[],$scope.siteNetworkTypes=[];var openLatModal=function(w){var latModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Latitude must be between 0 and 73.0</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});latModal.result.then(function(fieldFocus){"latlong"==w?$("#latitude_dd").focus():$("#LaDeg").focus()})},openLongModal=function(w){var longModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Longitude must be between -175.0 and -60.0</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});longModal.result.then(function(fieldFocus){"latlong"==w?$("#longitude_dd").focus():$("#LoDeg").focus()})};$scope.checkValue=function(d){"dms"==d?(($scope.DMS.LADeg<0||$scope.DMS.LADeg>73)&&openLatModal("dms"),($scope.DMS.LODeg<-175||$scope.DMS.LODeg>-60)&&openLongModal("dms")):(($scope.aSite.latitude_dd<0||$scope.aSite.latitude_dd>73)&&openLatModal("latlong"),($scope.aSite.longitude_dd<-175||$scope.aSite.longitude_dd>-60)&&openLongModal("latlong"))};var deg_to_dms=function(deg){0>deg&&(deg=deg.toString(),deg=deg.substring(1));var d=Math.floor(deg),minfloat=60*(deg-d),m=Math.floor(minfloat),s=(60*(minfloat-m)).toFixed(3);return""+d+":"+m+":"+s};$scope.latLongChange=function(){if("dd"==$scope.aSite.decDegORdms){if(void 0!==$scope.DMS.LADeg){$scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)}}else if(void 0!==$scope.aSite.latitude_dd){var latDMS=deg_to_dms($scope.aSite.latitude_dd).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.aSite.longitude_dd),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2]}},$scope.netTypeChg=function(){$scope.netTypeDirty=!0},$scope.whichOne=function(n){if($scope.netNameDirty=!0,"Not Defined"==n.name&&n.selected===!0){for(var nn=0;nn<$scope.NetNameList.length;nn++)"Not Defined"!=$scope.NetNameList[nn].name&&($scope.NetNameList[nn].selected=!1);$scope.checked="Not Defined"}"Not Defined"==n.name&&n.selected===!1&&($scope.checked="")},$scope.dimAction=function(){if(1==$scope.aSite.sensor_not_appropriate){$scope.disableSensorParts=!0;for(var x=0;x<$scope.ProposedSens.length;x++)$scope.ProposedSens[x].selected=!1;$scope.aSite.is_permanent_housing_installed="No"}else $scope.disableSensorParts=!1},$scope.useSiteAddress,$scope.useAddressforLO=function(){$scope.useSiteAddress?($scope.landowner.address=$scope.aSite.address,$scope.landowner.city=$scope.aSite.city,$scope.landowner.state=$scope.aSite.state,$scope.landowner.zip=$scope.aSite.zip):($scope.landowner.address="",$scope.landowner.city="",$scope.landowner.state="",$scope.landowner.zip="")},$scope.save=function(valid){valid&&($rootScope.stateIsLoading.showLoading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.addLandowner===!0?null!==$scope.aSite.landownercontact_id&&void 0!==$scope.aSite.landownercontact_id&&$scope.aSite.landownercontact_id>0?LANDOWNER_CONTACT.update({id:$scope.aSite.landownercontact_id},$scope.landowner).$promise.then(function(){putSiteAndParts()}):void 0!==$scope.landowner.fname||void 0!==$scope.landowner.lname||void 0!==$scope.landowner.title||void 0!==$scope.landowner.address||void 0!==$scope.landowner.city||void 0!==$scope.landowner.primaryphone?LANDOWNER_CONTACT.save($scope.landowner,function(response){$scope.aSite.landownercontact_id=response.landownercontactid,putSiteAndParts()},function(errorResponse){toastr.error("Error adding Landowner: "+errorResponse.statusText)}):putSiteAndParts():putSiteAndParts())};var putSiteAndParts=function(){void 0!==$scope.DMS.LADeg&&($scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec));var updateSite=angular.copy($scope.aSite);delete updateSite.Creator,delete updateSite.HorizontalCollectMethod,delete updateSite.HorizontalDatum,delete updateSite.PriorityName,delete updateSite.decDegORdms,SITE.update({id:$scope.aSite.site_id},updateSite,function(response){var RemovePromises=($q.defer(),[]),AddPromises=[];angular.forEach($scope.siteHousesToRemove,function(shID){var delSHProm=SITE_HOUSING["delete"]({id:shID}).$promise;RemovePromises.push(delSHProm)}),$scope.netNameDirty===!0&&angular.forEach($scope.NetNameList,function(nnL){if(nnL.selected===!1){$http.defaults.headers.common["X-HTTP-Method-Override"]="DELETE";var delNNProm=SITE.deleteSiteNetworkName({siteId:$scope.aSite.site_id,networkNameId:nnL.network_name_id}).$promise;RemovePromises.push(delNNProm),delete $http.defaults.headers.common["X-HTTP-Method-Override"]}}),$scope.netTypeDirty===!0&&angular.forEach($scope.NetTypeList,function(ntL){if(ntL.selected===!1){$http.defaults.headers.common["X-HTTP-Method-Override"]="DELETE";var delNTProm=({network_type_id:ntL.network_type_id,network_type_name:ntL.network_type_name},SITE.deleteSiteNetworkType({siteId:$scope.aSite.site_id,networkTypeId:ntL.network_type_id}).$promise);RemovePromises.push(delNTProm),delete $http.defaults.headers.common["X-HTTP-Method-Override"]}}),$scope.houseDirty===!0&&angular.forEach($scope.siteHouseTypesTable,function(ht){var addHtProm;void 0!==ht.site_housing_id?addHtProm=SITE_HOUSING.update({id:ht.site_housing_id},ht).$promise:(ht.site_id=$scope.aSite.site_id,addHtProm=SITE_HOUSING.save(ht).$promise),AddPromises.push(addHtProm)}),angular.forEach($scope.NetNameList,function(AnnL){if(AnnL.selected===!0){$scope.siteNetworkNames.push(AnnL.name);var addNNProm=SITE.postSiteNetworkName({siteId:$scope.aSite.site_id,networkNameId:AnnL.network_name_id}).$promise;AddPromises.push(addNNProm)}}),angular.forEach($scope.NetTypeList,function(AnTL){if(AnTL.selected===!0){$scope.siteNetworkTypes.push(AnTL.network_type_name);var addNTProm=SITE.postSiteNetworkType({siteId:$scope.aSite.site_id,networkTypeId:AnTL.network_type_id}).$promise;AddPromises.push(addNTProm)}}),$q.all(RemovePromises).then(function(){$q.all(AddPromises).then(function(response){var sendBack=[$scope.aSite,$scope.siteNetworkNames,$scope.siteNetworkTypes];$uibModalInstance.close(sendBack),$rootScope.stateIsLoading.showLoading=!1,toastr.success("Site updated")})["catch"](function(msg){console.error(msg)})})["catch"](function(msg){console.error(msg)})},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error updating Site: "+errorResponse.statusText)})},finishPOST=function(sID){var postPromises=($q.defer(),[]);angular.forEach($scope.siteHouseTypesTable,function(htype){htype.site_id=sID,delete htype.type_name;var hTPromise=SITE_HOUSING.save(htype).$promise;postPromises.push(hTPromise)}),angular.forEach($scope.NetNameList,function(nName){if(nName.selected===!0){var nNPromise=SITE.postSiteNetworkName({siteId:sID,networkNameId:nName.network_name_id}).$promise;postPromises.push(nNPromise)}}),angular.forEach($scope.NetTypeList,function(nType){if(nType.selected===!0){var nTPromise=SITE.postSiteNetworkType({siteId:sID,networkTypeId:nType.network_type_id}).$promise;postPromises.push(nTPromise)}}),$q.all(postPromises).then(function(response){$uibModalInstance.dismiss("cancel"),$rootScope.stateIsLoading.showLoading=!1,$timeout(function(){$state.go("site.dashboard",{id:sID})})})};$scope.create=function(valid){valid&&($rootScope.stateIsLoading.showLoading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",delete $scope.aSite.Creator,delete $scope.aSite.decDegORdms,$scope.addLandowner===!0&&(void 0!==$scope.landowner.fname||void 0!==$scope.landowner.lname||void 0!==$scope.landowner.title||void 0!==$scope.landowner.address||void 0!==$scope.landowner.city||void 0!==$scope.landowner.primaryphone)?LANDOWNER_CONTACT.save($scope.landowner,function(response){$scope.aSite.landownercontact_id=response.landownercontactid,postSiteAndParts()},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error posting landowner: "+errorResponse.statusText)}):postSiteAndParts())};var postSiteAndParts=function(){var createdSiteID=0;void 0!==$scope.DMS.LADeg&&($scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)),SITE.save($scope.aSite,function(response){if(createdSiteID=response.site_id,$scope.disableSensorParts===!1){var selectedProposedSensors=$scope.ProposedSens.filter(function(p){return p.selected===!0});selectedProposedSensors.length>0?angular.forEach(selectedProposedSensors,function(propSens,index){var sID=0;angular.forEach($scope.SensorDeployment,function(sdt){for(var x=0;x<sdt.deploymenttypes.length;x++)sdt.deploymenttypes[x].deployment_type_id==propSens.deployment_type_id&&(sID=sdt.sensor_type_id)});var sensorTypeID=sID,inst={deployment_type_id:propSens.deployment_type_id,site_id:createdSiteID,sensor_type_id:sensorTypeID};INSTRUMENT.save(inst).$promise.then(function(insResponse){var instStat={instrument_id:insResponse.instrument_id,status_type_id:4,member_id:$scope.aSite.member_id,time_stamp:new Date,time_zone:"UTC"};INSTRUMENT_STATUS.save(instStat).$promise.then(function(){index==selectedProposedSensors.length-1&&finishPOST(createdSiteID)},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error adding proposed Sensor: "+errorResponse.statusText)})},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error adding proposed Sensor: "+errorResponse.statusText)})}):finishPOST(createdSiteID)}else finishPOST(createdSiteID)},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error creating site: "+errorResponse.statusText)})};if(void 0!==thisSiteStuff){if($scope.aSite=angular.copy(thisSiteStuff[0]),$scope.aSite.hcollect_method_id<=0&&($scope.aSite.hcollect_method_id=null),$scope.aSite.sensor_not_appropriate>0){$scope.disableSensorParts=!0;for(var x=0;x<$scope.ProposedSens.length;x++)$scope.ProposedSens[x].selected=!1;$scope.aSite.is_permanent_housing_installed="No"}var thisState=$scope.StateList.filter(function(s){return s.state_abbrev==$scope.aSite.state})[0];if($scope.stateCountyList=$scope.AllCountyList.filter(function(c){return c.state_id==thisState.state_id}),thisSiteStuff[1].length>0){$scope.originalSiteHousings=thisSiteStuff[1],$scope.showSiteHouseTable=!0,$scope.siteHouseTypesTable=thisSiteStuff[2],$scope.landowner=thisSiteStuff[5],$scope.addLandowner=void 0!==$scope.landowner.fname||void 0!==$scope.landowner.lname||void 0!==$scope.landowner.address||void 0!==$scope.landowner.primaryphone?!0:!1;for(var ht=0;ht<$scope.allHousingTypeList.length;ht++){for(var y=0;y<$scope.originalSiteHousings.length;y++)$scope.originalSiteHousings[y].housing_type_id==$scope.allHousingTypeList[ht].housing_type_id?($scope.allHousingTypeList[ht].selected=!0,y=$scope.originalSiteHousings.length):$scope.allHousingTypeList[ht].selected=!1;0===$scope.originalSiteHousings.length&&($scope.allHousingTypeList[ht].selected=!1)}}if(thisSiteStuff[3].length>0){for(var a=0;a<$scope.NetNameList.length;a++)for(var e=0;e<thisSiteStuff[3].length;e++)thisSiteStuff[3][e].network_name_id==$scope.NetNameList[a].network_name_id?($scope.NetNameList[a].selected=!0,e=thisSiteStuff[3].length):$scope.NetNameList[a].selected=!1,0===thisSiteStuff[3].length&&($scope.NetNameList[a].selected=!1);$scope.NetNameList[0].selected===!0&&($scope.checked="Not Defined")}if(thisSiteStuff[4].length>0)for(var ni=0;ni<$scope.NetTypeList.length;ni++)for(var ny=0;ny<thisSiteStuff[4].length;ny++)thisSiteStuff[4][ny].network_type_id==$scope.NetTypeList[ni].network_type_id?($scope.NetTypeList[ni].selected=!0,ny=thisSiteStuff[4].length):$scope.NetTypeList[ni].selected=!1,0===thisSiteStuff[4].length&&($scope.NetTypeList[ni].selected=!1)}else $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.query({id:$cookies.get("mID")},function(response){$scope.aSite.Creator=response.fname+" "+response.lname,$scope.aSite.member_id=response.member_id,$scope.aSite.is_permanent_housing_installed="No",$scope.aSite.access_granted="Not Needed"},function(errorResponse){toastr.error("Error getting Member info: "+errorResponse.statusText)});$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.HouseTypeClick=function(ht){if($scope.houseDirty=!0,ht.selected===!0){var houseT={type_name:ht.type_name,housing_type_id:ht.housing_type_id,length:ht.length,material:ht.material,notes:ht.notes,amount:1};$scope.siteHouseTypesTable.push(houseT),$scope.showSiteHouseTable=!0}if(ht.selected===!1){if(void 0!==$scope.aSite.site_id){var sH_ID=$scope.siteHouseTypesTable.filter(function(h){return h.type_name==ht.type_name;

})[0].site_housing_id;$scope.siteHousesToRemove.push(sH_ID)}var i=$scope.siteHouseTypesTable.indexOf($scope.siteHouseTypesTable.filter(function(h){return h.type_name==ht.type_name})[0]);$scope.siteHouseTypesTable.splice(i,1),0===$scope.siteHouseTypesTable.length&&($scope.showSiteHouseTable=!1)}},$scope.showLandOwnerPart=function(){$scope.addLandowner=!0},$scope.updateCountyList=function(s){var thisState=$scope.StateList.filter(function(st){return st.state_abbrev==s})[0];$scope.stateCountyList=$scope.AllCountyList.filter(function(c){return c.state_id==thisState.state_id})},$scope.cancel=function(){$rootScope.stateIsLoading.showLoading=!1,$uibModalInstance.dismiss("cancel")},$scope.deleteSite=function(){var thisSite=$scope.aSite,dSiteModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Delete Site</h3></div><div class="modal-body"><p>Are you sure you want to delete site {{siteNo}}?</p></div><div class="modal-footer"><button type="button" class="btn btn-danger" ng-click="deleteIt()">Delete</button><button type="button" class="btn btn-primary" ng-click="ok()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.siteNo=thisSite.site_no,$scope.ok=function(){$uibModalInstance.dismiss("cancel")},$scope.deleteIt=function(){$uibModalInstance.close(thisSite)}}],size:"sm"});dSiteModal.result.then(function(s){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),SITE["delete"]({id:s.site_id}).$promise.then(function(){toastr.success("Site Removed");var sendBack="Deleted";$uibModalInstance.close(sendBack)},function(errorResponse){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>{{message}}</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-click="ok()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.message=errorResponse.headers("usgswim-messages"),$scope.ok=function(){$uibModalInstance.dismiss("cancel")}}],size:"sm"})})},function(){})},$rootScope.stateIsLoading.showLoading=!1}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("siteMapCtrl",["$scope","$rootScope","$cookies","$location","$state","SITE","leafletData","aSite",function($scope,$rootScope,$cookies,$location,$state,SITE,leafletData,aSite){if(void 0!=aSite){$scope.mapStuff="here's the map accordion content",$scope.thisSite=aSite,$scope.paths={},$scope.markers=[];var icons={stn:{type:"div",iconSize:[10,10],className:"stnSiteIcon"},selected:{type:"div",iconSize:[12,12],className:"selectedIcon"}};$scope.pathsObj={circleMarker:{type:"circleMarker",radius:20,weight:3,color:"#000099",latlngs:{}}};var addShape=function(){$scope.paths={},$scope.pathsObj.circleMarker.latlngs={lat:$scope.thisSite.latitude_dd,lng:$scope.thisSite.longitude_dd},$scope.paths.circleMarker=$scope.pathsObj.circleMarker};addShape(),$scope.markers.push({lat:$scope.thisSite.latitude_dd,lng:$scope.thisSite.longitude_dd,icon:icons.selected}),SITE.getProximitySites({Latitude:$scope.thisSite.latitude_dd,Longitude:$scope.thisSite.longitude_dd,Buffer:.05},function(response){if($scope.closeSites=response,$scope.closeSites.length>0)for(var i=0;i<$scope.closeSites.length;i++){var a=$scope.closeSites[i];$scope.markers.push({lat:a.latitude_dd,lng:a.longitude_dd,icon:icons.stn})}},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}),angular.extend($scope,{mapCenter:{lat:$scope.thisSite.latitude_dd,lng:$scope.thisSite.longitude_dd,zoom:16,minZoom:16},markers:[],markersLatLngArray:[],layers:{baselayers:{topo:{name:"World Topographic",type:"agsBase",layer:"Topographic",visible:!1}},overlays:{stnSites:{type:"group",name:"STN Sites",visible:!0}}}})}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("siteCtrl",["$scope","$state","$rootScope","$cookies","$location","$http","$uibModal","$filter","thisSite","latlong","thisSiteNetworkNames","thisSiteNetworkTypes","thisSiteHousings","SITE","MEMBER","allHorDatums","allHorCollMethods","allStates","allCounties","allDeployPriorities","allHousingTypes","allNetworkNames","allNetworkTypes","allDeployTypes","allSensorTypes",function($scope,$state,$rootScope,$cookies,$location,$http,$uibModal,$filter,thisSite,latlong,thisSiteNetworkNames,thisSiteNetworkTypes,thisSiteHousings,SITE,MEMBER,allHorDatums,allHorCollMethods,allStates,allCounties,allDeployPriorities,allHousingTypes,allNetworkNames,allNetworkTypes,allDeployTypes,allSensorTypes){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else if($rootScope.thisPage="Site Dashboard",$scope.aSite={},$scope.status={mapOpen:!1,siteOpen:!0,opOpen:!1,sensorOpen:!1,hwmOpen:!1,filesOpen:!1,peakOpen:!1},$scope.thisSiteHouseTypeModel=[],$scope.openSiteCreate=function(){$rootScope.stateIsLoading.showLoading=!0;var dropdownParts=[allHorDatums,allHorCollMethods,allStates,allCounties,allHousingTypes,allDeployPriorities,allNetworkNames,allNetworkTypes,allDeployTypes,allSensorTypes],modalInstance=$uibModal.open({templateUrl:"SITEmodal.html",controller:"siteModalCtrl",size:"lg",keyboard:!1,backdrop:"static",windowClass:"rep-dialog",resolve:{allDropDownParts:function(){return dropdownParts},thisSiteStuff:function(){if(void 0!==$scope.aSite.site_id){var origSiteHouses=void 0!==$scope.originalSiteHousings?$scope.originalSiteHousings:[],sHouseTypeModel=$scope.thisSiteHouseTypeModel.length>0?$scope.thisSiteHouseTypeModel:[],sNetNames=void 0!==thisSiteNetworkNames?thisSiteNetworkNames:[],sNetTypes=void 0!==thisSiteNetworkTypes?thisSiteNetworkTypes:[],lo=void 0!==$scope.landowner?$scope.landowner:{},siteRelatedStuff=[$scope.aSite,origSiteHouses,sHouseTypeModel,sNetNames,sNetTypes,lo];return siteRelatedStuff}},latlong:function(){return void 0!==latlong?latlong:void 0}}});modalInstance.result.then(function(r){"Deleted"!==r?($scope.aSite=r[0],$scope.aSite.HorizontalDatum=$scope.aSite.hdatum_id>0?allHorDatums.filter(function(hd){return hd.datum_id==$scope.aSite.hdatum_id})[0].datum_name:"---",$scope.aSite.HorizontalCollectMethod=void 0!==$scope.aSite.hcollect_method_id&&$scope.aSite.hcollect_method_id>0?allHorCollMethods.filter(function(hc){return hc.hcollect_method_id==$scope.aSite.hcollect_method_id})[0].hcollect_method:"---",$scope.aSite.PriorityName=void 0!==$scope.aSite.priority_id&&$scope.aSite.priority_id>0?allDeployPriorities.filter(function(dp){return dp.priority_id==$scope.aSite.priority_id})[0].priority_name:"---",$scope.siteNetworkNames=r[1],$scope.siteNetworkTypes=r[2]):($scope.aSite={},$state.go("map")),$rootScope.stateIsLoading.showLoading=!1})},void 0!==thisSite)if(void 0!==thisSite.site_id){if($scope.aSite=thisSite,$scope.aSite.decDegORdms="dd",$scope.aSite.HorizontalDatum=$scope.aSite.hdatum_id>0?allHorDatums.filter(function(hd){return hd.datum_id==$scope.aSite.hdatum_id})[0].datum_name:"---",$scope.aSite.HorizontalCollectMethod=void 0!==$scope.aSite.hcollect_method_id&&$scope.aSite.hcollect_method_id>0?allHorCollMethods.filter(function(hc){return hc.hcollect_method_id==$scope.aSite.hcollect_method_id})[0].hcollect_method:"---",$scope.aSite.PriorityName=void 0!==$scope.aSite.priority_id&&$scope.aSite.priority_id>0?allDeployPriorities.filter(function(dp){return dp.priority_id==$scope.aSite.priority_id})[0].priority_name:"---",thisSiteHousings.length>0){$scope.originalSiteHousings=angular.copy(thisSiteHousings),$scope.showSiteHouseTable=!0;for(var z=0;z<$scope.originalSiteHousings.length;z++){var houseTypeName=allHousingTypes.filter(function(h){return h.housing_type_id==$scope.originalSiteHousings[z].housing_type_id})[0].type_name,houseT={type_name:houseTypeName,housing_type_id:$scope.originalSiteHousings[z].housing_type_id,site_housing_id:$scope.originalSiteHousings[z].site_housing_id,length:$scope.originalSiteHousings[z].length,material:$scope.originalSiteHousings[z].material,notes:$scope.originalSiteHousings[z].notes,amount:$scope.originalSiteHousings[z].amount};$scope.thisSiteHouseTypeModel.push(houseT)}}if($scope.siteNetworkNames=[],thisSiteNetworkNames.length>0)for(var a=0;a<thisSiteNetworkNames.length;a++){var nn=allNetworkNames.filter(function(n){return n.network_name_id==thisSiteNetworkNames[a].network_name_id})[0];$scope.siteNetworkNames.push(nn.name)}if($scope.siteNetworkTypes=[],thisSiteNetworkTypes.length>0)for(var b=0;b<thisSiteNetworkTypes.length;b++){var nt=allNetworkTypes.filter(function(nt){return nt.network_type_id==thisSiteNetworkTypes[b].network_type_id})[0];$scope.siteNetworkTypes.push(nt.network_type_name)}$scope.sensorNotAppr=void 0!==$scope.aSite.sensor_not_appropriate||$scope.aSite.sensor_not_appropriate>0?"Yes":"No",void 0!==$scope.aSite.member_id&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.query({id:$scope.aSite.member_id}).$promise.then(function(response){$scope.aSite.Creator=response.fname+" "+response.lname},function(error){$scope.aSite.Creator="Not recorded"}).$promise),null!==$scope.aSite.landownercontact_id&&void 0!==$scope.aSite.landownercontact_id&&$scope.aSite.landownercontact_id>0&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",SITE.getSiteLandOwner({id:$scope.aSite.site_id},function(response){$scope.landowner=response,$scope.addLandowner=!0},function(errorResponse){toastr.error("Error getting Landowner Information: "+errorResponse.statusText)}).$promise)}else toastr.error("This site does not exist"),$location.path("/Home").replace(),$scope.apply;else $scope.openSiteCreate()}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("quickCreateCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$uibModal","$filter","$sce","whichQuick","allHorDatums","allHorCollMethods","allStates","allCounties","allOPTypes","allVertDatums","allVertColMethods","allOPQualities","allHWMTypes","allHWMQualities","allMarkers","allEvents","allSensorTypes","allSensorBrands","allDeployTypes","allHousingTypes","SITE","OBJECTIVE_POINT","HWM","MEMBER","INSTRUMENT","INSTRUMENT_STATUS","OP_MEASURE","OP_CONTROL_IDENTIFIER","GEOCODE",function($scope,$rootScope,$cookies,$location,$state,$http,$uibModal,$filter,$sce,whichQuick,allHorDatums,allHorCollMethods,allStates,allCounties,allOPTypes,allVertDatums,allVertColMethods,allOPQualities,allHWMTypes,allHWMQualities,allMarkers,allEvents,allSensorTypes,allSensorBrands,allDeployTypes,allHousingTypes,SITE,OBJECTIVE_POINT,HWM,MEMBER,INSTRUMENT,INSTRUMENT_STATUS,OP_MEASURE,OP_CONTROL_IDENTIFIER,GEOCODE){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$scope.CreateWhat=whichQuick,$scope.htmlDescriptionTip=$sce.trustAsHtml("Required by NWIS. Can be listed as <em>'unknown'</em> or <em>'Atlantic Ocean'</em>"),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.query({id:$cookies.get("mID")}).$promise.then(function(response){$scope.loggedInMember=response}),$rootScope.thisPage="Quick"+whichQuick,$scope.quickForm={};var makeAdate=function(d){var aDate=new Date;""!==d&&void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};if($scope.decDegORdms={},$scope.EventName=$cookies.get("SessionEventName"),$scope.aSite={member_id:$cookies.get("mID")},$scope.aOP={date_established:makeAdate("")},$scope.status={siteOpen:!0,opOpen:!1,hwmOpen:!1},$scope.removeOPCarray=[],$scope.addedIdentifiers=[],$scope.showControlIDinput=!1,$scope.horDatumList=allHorDatums,$scope.horCollMethodList=allHorCollMethods,$scope.stateList=allStates,$scope.allCountyList=allCounties,$scope.stateCountyList=[],$scope.opTypeList=allOPTypes,$scope.vertDatumList=allVertDatums,$scope.vertCollMethodList=allVertColMethods,$scope.opQualList=allOPQualities,"HWM"==whichQuick&&($scope.aHWM={hwm_environment:"Riverine",event_id:$cookies.get("SessionEventID"),bank:"N/A",flag_date:makeAdate(""),stillwater:0,flag_member_id:$cookies.get("mID")},$scope.hwmTypeList=allHWMTypes,$scope.hwmQualList=allHWMQualities,$scope.markerList=allMarkers),"Sensor"==whichQuick){var getTimeZoneStamp=function(dsent){var d,sendThis=[];d=void 0!==dsent?new Date(dsent):new Date;var offset=d.toString().substring(35),zone="";switch(offset.substr(0,3)){case"Cen":zone="CST";break;case"Eas":zone="EST";break;case"Mou":zone="MST";break;case"Pac":zone="PST"}return sendThis=[d,zone]};$scope.depTypeList=allDeployTypes,$scope.houseTypeList=allHousingTypes,$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.aSensor={event_id:$cookies.get("SessionEventID")},$scope.aSensStatus={status_type_id:1,member_id:$cookies.get("mID")},$scope.eventList=allEvents,$scope.sensorTypeList=allSensorTypes,$scope.sensorBrandList=allSensorBrands,$scope.IntervalType={type:"Seconds"};var DeptimeParts=getTimeZoneStamp();$scope.aSensStatus.time_stamp=DeptimeParts[0],$scope.aSensStatus.time_zone=DeptimeParts[1],$scope.getDepTypes=function(){$scope.filteredDeploymentTypes=[];var matchingSensDeplist=allSensorTypes.filter(function(sd){return sd.sensor_type_id==$scope.aSensor.sensor_type_id})[0];$scope.filteredDeploymentTypes=matchingSensDeplist.deploymenttypes,1==$scope.filteredDeploymentTypes.length&&($scope.aSensor.deployment_type_id=$scope.filteredDeploymentTypes[0].deployment_type_id)}}$scope.FTorMETER="ft",$scope.FTorCM="ft",$scope.addNewIdentifier=function(){$scope.addedIdentifiers.push({identifier:"",identifier_type:""}),$scope.showControlIDinput=!0};var dealWithTimeStampb4Send=function(){if("UTC"!=$scope.aSensStatus.time_zone){var utcDateTime=new Date($scope.aSensStatus.time_stamp).toUTCString();$scope.aSensStatus.time_stamp=utcDateTime,$scope.aSensStatus.time_zone="UTC"}else{var i=$scope.aSensStatus.time_stamp.toString().indexOf("GMT")+3;$scope.aSensStatus.time_stamp=$scope.aSensStatus.time_stamp.toString().substring(0,i)}};$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.decDegORdms.val="dd",$scope.DMS={};var azimuth=function(deg,min,sec){var azi=0;return 0>deg?(azi=-1*deg+1*min/60+1*sec/3600,(-1*azi).toFixed(5)):(azi=1*deg+1*min/60+1*sec/3600,azi.toFixed(5))},deg_to_dms=function(deg){0>deg&&(deg=deg.toString(),deg=deg.substring(1));var d=Math.floor(deg),minfloat=60*(deg-d),m=Math.floor(minfloat),s=(60*(minfloat-m)).toFixed(3);return""+d+":"+m+":"+s};$scope.latLongChange=function(){if("dd"==$scope.decDegORdms.val){if(void 0!==$scope.DMS.LADeg){$scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)}}else if(void 0!==$scope.aSite.latitude_dd){var latDMS=deg_to_dms($scope.aSite.latitude_dd).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.aSite.longitude_dd),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2]}};var openLatModal=function(w){var latModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Latitude must be between 0 and 73.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});latModal.result.then(function(fieldFocus){"latlong"==w?$("#SITE_latitude_dd").focus():$("#LaDeg").focus()})},openLongModal=function(w){var longModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Longitude must be between -175.0 and -60.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});longModal.result.then(function(fieldFocus){"latlong"==w?$("#SITE_longitude_dd").focus():$("#LoDeg").focus()})};$scope.checkValue=function(d){"dms"==d?(($scope.DMS.LADeg<0||$scope.DMS.LADeg>73)&&openLatModal("dms"),($scope.DMS.LODeg<-175||$scope.DMS.LODeg>-60)&&openLongModal("dms")):(($scope.aSite.latitude_dd<0||$scope.aSite.latitude_dd>73)&&openLatModal("latlong"),($scope.aSite.longitude_dd<-175||$scope.aSite.longitude_dd>-60)&&openLongModal("latlong"))},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.getAddress=function(){if(delete $scope.aSite.address,delete $scope.aSite.city,delete $scope.aSite.state,$scope.stateCountyList=[],delete $scope.aSite.zip,void 0!==$scope.DMS.LADeg&&($scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)),void 0!==$scope.aSite.latitude_dd&&void 0!==$scope.aSite.longitude_dd)$rootScope.stateIsLoading.showLoading=!0,delete $http.defaults.headers.common.Authorization,$http.defaults.headers.common.Accept="application/json",GEOCODE.getAddressParts({Longitude:$scope.aSite.longitude_dd,Latitude:$scope.aSite.latitude_dd},function(response){if(response.result.geographies.Counties.length>0){var stateFIPS=response.result.geographies.Counties[0].STATE,countyName=response.result.geographies.Counties[0].NAME,thisStateID=$scope.allCountyList.filter(function(c){return c.state_fip==stateFIPS})[0].state_id,thisState=$scope.stateList.filter(function(s){return s.state_id==thisStateID})[0];void 0!==thisState?($scope.aSite.state=thisState.state_abbrev,$scope.stateCountyList=$scope.allCountyList.filter(function(c){return c.state_id==thisState.state_id}),$scope.aSite.county=countyName,$rootScope.stateIsLoading.showLoading=!1):($rootScope.stateIsLoading.showLoading=!1,toastr.error("The Latitude/Longitude did not return a recognized state. Please choose one from the dropdown."))}else $rootScope.stateIsLoading.showLoading=!1,toastr.error("No location information came back from that lat/long")},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error getting address: "+errorResponse.statusText)});else{$rootScope.stateIsLoading.showLoading=!1;{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please provide a Latitude and Longitude before clicking Verify Location</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}}},$scope.chooseQuality=function(){if(""!==$scope.aHWM.hwm_uncertainty){var x=Number($scope.aHWM.hwm_uncertainty);$scope.aHWM.hwm_quality_id=$scope.hwmQualList.filter(function(h){return h.min_range<=x&&h.max_range>=x})[0].hwm_quality_id}},$scope.compareToUncertainty=function(){if(""!==$scope.aHWM.hwm_uncertainty&&void 0!==$scope.aHWM.hwm_uncertainty){var x=Number($scope.aHWM.hwm_uncertainty),matchingQualId=$scope.hwmQualList.filter(function(h){return h.min_range<=x&&h.max_range>=x})[0].hwm_quality_id;if($scope.aHWM.hwm_quality_id!==matchingQualId){var incongruentModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Warning</h3></div><div class="modal-body"><p>There is a mismatch between the hwm quality chosen and the hwm uncertainty above. Please correct your hwm uncertainty.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});incongruentModal.result.then(function(){angular.element("[name='hwm_uncertainty']").focus()})}}},$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1}),$scope.updateCountyList=function(s){var thisState=$scope.stateList.filter(function(st){return st.state_abbrev==s})[0];$scope.stateCountyList=$scope.allCountyList.filter(function(c){return c.state_id==thisState.state_id})},$scope.UnquantChecked=function(){1==$scope.aOP.unquantified&&($scope.aOP.uncertainty=null)};var trimOP=function(op){var OBJ_PT={objective_point_id:void 0!==op.objective_point_id?op.objective_point_id:0,name:op.name,description:op.description,elev_ft:void 0!==op.elev_ft?op.elev_ft:null,date_established:op.date_established,op_is_destroyed:void 0!==op.op_is_destroyed?op.op_is_destroyed:0,op_notes:void 0!==op.op_notes?op.op_notes:null,site_id:op.site_id,vdatum_id:void 0!==op.vdatum_id?op.vdatum_id:0,latitude_dd:op.latitude_dd,longitude_dd:op.longitude_dd,hdatum_id:void 0!==op.hdatum_id?op.hdatum_id:0,hcollect_method_id:void 0!==op.hcollect_method_id?op.hcollect_method_id:0,vcollect_method_id:void 0!==op.vcollect_method_id?op.vcollect_method_id:0,op_type_id:op.op_type_id,date_recovered:void 0!==op.date_recovered?op.date_recovered:null,uncertainty:void 0!==op.uncertainty?op.uncertainty:null,unquantified:void 0!==op.unquantified?op.unquantified:null,op_quality_id:void 0!==op.op_quality_id?op.op_quality_id:null};return OBJ_PT};$scope.RemoveID=function(opControl){var i=$scope.addedIdentifiers.indexOf(opControl);void 0!==opControl.op_control_identifier_id?($scope.removeOPCarray.push(opControl),$scope.addedIdentifiers.splice(i,1)):$scope.addedIdentifiers.splice(i,1)};var formatDefaults=function(theOP){"meter"==theOP.FTorMETER&&($scope.aOP.FTorMETER="ft",$scope.aOP.elev_ft=3.2808*$scope.aOP.elev_ft),"cm"==theOP.FTorCM&&($scope.aOP.FTorCM="ft",$scope.aOP.uncertainty=$scope.aOP.uncertainty/30.48)};$scope.tapedown={Open:!1};var showNeedOPfirstModal=function(){var needOPModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">No Datum Location</h3></div><div class="modal-body"><p>In order to add tape down information, please populate the Datum Location section above first.</p><p>The following fields are required for the tape down section: <b>Name</b>, <b>Elevation</b> and <b>Vertical Datum</b>.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});needOPModal.result.then(function(){$scope.tapedown.Open=!1})};$scope.tapeDownTable=[],$scope.removeOP=function(){var removeOPMeas=$uibModal.open({backdrop:"static",keyboard:!1,template:'<div class="modal-header"><h3 class="modal-title">Remove OP Measure</h3></div><div class="modal-body"><p>Are you sure you don\'t want to add this OP Measurement to this quick sensor?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">Yes</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close("remove")},$scope.cancel=function(){$uibModalInstance.close("cancel")}}],size:"sm"});removeOPMeas.result.then(function(yesOrNo){"remove"==yesOrNo&&($scope.tapedown.Open=!1,$scope.tapeDownTable.splice(0,1),$scope.OPsForTapeDown=[],$scope.OPMeasure={},$scope.addTapedown=!1,$scope.aSensStatus.sensor_elevation="",$scope.aSensStatus.ws_elevation="",$scope.aSensStatus.gs_elevation="",$scope.aSensStatus.vdatum_id="")})},$scope.addTapedown=!1,$scope.OPsForTapeDown=[],$scope.showTapedownPart=function(){$scope.tapeDownTable.length<1?void 0!==$scope.aOP.name&&void 0!==$scope.aOP.elev_ft&&void 0!==$scope.aOP.vdatum_id?($scope.OPMeasure={},$scope.OPMeasure.op_name=$scope.aOP.name,$scope.OPMeasure.elevation=$scope.aOP.elev_ft,$scope.OPMeasure.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==$scope.aOP.vdatum_id})[0].datum_abbreviation,$scope.tapeDownTable.push($scope.OPMeasure),$scope.OPsForTapeDown.push($scope.aOP),$scope.addTapedown=!0,$scope.tapedown.Open=!0,$scope.aSensStatus.vdatum_id=$scope.aOP.vdatum_id):showNeedOPfirstModal():($scope.addTapedown=!0,$scope.tapedown.Open=!0)},$scope.siteErrors=!1,$scope.opErrors=!1,$scope.hwmErrors=!1,$scope.create=function(){$rootScope.stateIsLoading.showLoading=!0;var theForm=$scope.quickForm.quick;if($scope.siteErrors=!1,$scope.opErrors=!1,$scope.hwmErrors=!1,theForm.$valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0===$scope.aSite.latitude_dd&&($scope.aSite.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0===$scope.aSite.longitude_dd&&($scope.aSite.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec));var createdSiteID=0;SITE.save($scope.aSite,function(response){createdSiteID=response.site_id,$scope.aOP.site_id=createdSiteID,$scope.aOP.latitude_dd=response.latitude_dd,$scope.aOP.longitude_dd=response.longitude_dd,$scope.aOP.hdatum_id=response.hdatum_id,$scope.aOP.hcollect_method_id=response.hcollect_method_id,"HWM"==$scope.CreateWhat&&($scope.aHWM.site_id=createdSiteID,$scope.aHWM.waterbody=response.waterbody,$scope.aHWM.latitude_dd=response.latitude_dd,$scope.aHWM.longitude_dd=response.longitude_dd,$scope.aHWM.hcollect_method_id=response.hcollect_method_id,$scope.aHWM.hdatum_id=response.hdatum_id,$scope.aHWM.flag_member_id=response.member_id,$scope.aHWM.event_id=$cookies.get("SessionEventID"));var createdOP={};formatDefaults($scope.aOP);var OPtoPOST=trimOP($scope.aOP);OBJECTIVE_POINT.save(OPtoPOST,function(response){if(createdOP=response,$scope.addedIdentifiers.length>0)for(var opc=0;opc<$scope.addedIdentifiers.length;opc++){var thisOPControlID=$scope.addedIdentifiers[opc];thisOPControlID.objective_point_id=response.objective_point_id,OP_CONTROL_IDENTIFIER.save(thisOPControlID).$promise}if("HWM"==$scope.CreateWhat){void 0!==$scope.aHWM.survey_date&&($scope.aHWM.survey_member_id=$scope.aHWM.flag_member_id),void 0!==$scope.aHWM.elev_ft&&(void 0===$scope.aHWM.survey_date&&($scope.aHWM.survey_date=makeAdate("")),$scope.aHWM.survey_member_id=$scope.aHWM.flag_member_id),HWM.save($scope.aHWM).$promise.then(function(response){toastr.success("Quick HWM created"),$rootScope.stateIsLoading.showLoading=!1,$location.path("/Site/"+createdSiteID+"/SiteDashboard").replace(),$scope.apply})}if("Sensor"==$scope.CreateWhat){var createdSensor={};"Minutes"==$scope.IntervalType.type&&($scope.aSensor.interval=60*$scope.aSensor.interval),$scope.aSensor.site_id=createdSiteID,dealWithTimeStampb4Send(),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INSTRUMENT.save($scope.aSensor).$promise.then(function(response){createdSensor=response,$scope.aSensStatus.instrument_id=response.instrument_id,INSTRUMENT_STATUS.save($scope.aSensStatus).$promise.then(function(statResponse){if($scope.tapeDownTable.length>0){var thisTape=$scope.tapeDownTable[0];thisTape.instrument_status_id=statResponse.instrument_status_id,thisTape.objective_point_id=createdOP.objective_point_id,OP_MEASURE.save(thisTape).$promise}toastr.success("Quick Sensor created"),$rootScope.stateIsLoading.showLoading=!1,$location.path("/Site/"+createdSiteID+"/SiteDashboard").replace(),$scope.apply})})}})})}else $rootScope.stateIsLoading.showLoading=!1,$scope.status.siteOpen=!0,$scope.status.opOpen=!0,$scope.status.hwmOpen=!0,angular.element("[name='"+theForm.$name+"']").find(".ng-invalid:visible:first").focus(),(theForm.site_description.$invalid||theForm.latitude_dd.$invalid||theForm.longitude_dd.$invalid||theForm.hdatum_id.$invalid||theForm.hcollect_method_id.$invalid||theForm.waterbody.$invalid||theForm.state.$invalidv||theForm.county.$invalid)&&($scope.siteErrors=!0),(theForm.op_type_id.$invalid||theForm.name.$invalid||theForm.description.$invalid||theForm.de.$invalid)&&($scope.opErrors=!0),(theForm.hwm_type_id.$invalid||theForm.hwm_environment.$invalid||theForm.hwm_quality_id.$invalid||theForm.fd.$invalid)&&($scope.hwmErrors=!0),toastr.error("Quick HWM not created.")}}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("sensorModalCtrl",["$scope","$rootScope","$timeout","$cookies","$http","$sce","$uibModalInstance","$uibModal","SERVER_URL","FILE_STAMP","allDropdowns","agencyList","Site_Files","allDepTypes","thisSensor","SensorSite","siteOPs","allMembers","INSTRUMENT","INSTRUMENT_STATUS","DATA_FILE","FILE","SOURCE","OP_MEASURE",function($scope,$rootScope,$timeout,$cookies,$http,$sce,$uibModalInstance,$uibModal,SERVER_URL,FILE_STAMP,allDropdowns,agencyList,Site_Files,allDepTypes,thisSensor,SensorSite,siteOPs,allMembers,INSTRUMENT,INSTRUMENT_STATUS,DATA_FILE,FILE,SOURCE,OP_MEASURE){$scope.sensorTypeList=allDropdowns[0],$scope.sensorBrandList=allDropdowns[1],$scope.houseTypeList=allDropdowns[2],$scope.eventList=allDropdowns[3],$scope.fileTypeList=allDropdowns[4],$scope.vertDatumList=allDropdowns[5],$scope.depSenfileIsUploading=!1,$scope.allSFiles=Site_Files.getAllSiteFiles(),$scope.DepSensorFiles="empty"!==thisSensor?$scope.allSFiles.filter(function(sf){return sf.instrument_id==thisSensor.instrument_id}):[],$scope.depSensImageFiles=$scope.DepSensorFiles.filter(function(hf){return 1===hf.filetype_id}),$scope.showFileForm=!1,$scope.showNWISFileForm=!1,$scope.OPsPresent=siteOPs.length>0?!0:!1,$scope.OPsForTapeDown=siteOPs,$scope.removeOPList=[],$scope.tapeDownTable=[],$scope.depTypeList=allDepTypes,$scope.filteredDeploymentTypes=[],$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.userRole=$cookies.get("usersRole"),$scope.showEventDD=!1,$scope.adminChanged={},$scope.IntervalType={},$scope.whichButton="",$scope.serverURL=SERVER_URL,$scope.nwisHeaderTip=$sce.trustAsHtml("Connect your transmitting sensor with NWIS via <em>Station ID for USGS gage</em> from the Site details."),$scope.view={DEPval:"detail",RETval:"detail"},$scope.sensorDataNWIS=!1,$scope.s={depOpen:!0,sFileOpen:!1,NWISFileOpen:!1};var getDateTimeParts=function(d){var theDate,isDate="[object Date]"===Object.prototype.toString.call(d);if(isDate===!1){var y=d.substr(0,4),m=d.substr(5,2)-1,da=d.substr(8,2),h=d.substr(11,2),mi=d.substr(14,2),sec=d.substr(17,2);theDate=new Date(y,m,da,h,mi,sec)}else theDate=d;return theDate};$scope.dateOptions={startingDay:1,showWeeks:!1},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.stamp=FILE_STAMP.getStamp(),$scope.fileItemExists=!0,$scope.saveFileUpload=function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.sFileIsUploading=!0;var fileParts={FileEntity:{file_id:$scope.aFile.file_id,name:$scope.aFile.name,description:$scope.aFile.description,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,file_date:$scope.aFile.file_date,hwm_id:$scope.aFile.hwm_id,site_id:$scope.aFile.site_id,
filetype_id:$scope.aFile.filetype_id,source_id:$scope.aFile.source_id,path:$scope.aFile.path,data_file_id:$scope.aFile.data_file_id,instrument_id:$scope.aFile.instrument_id,photo_date:$scope.aFile.photo_date,is_nwis:$scope.aFile.is_nwis,objective_point_id:$scope.aFile.objective_point_id},File:void 0!==$scope.aFile.File1?$scope.aFile.File1:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),FILE_STAMP.setStamp(),$scope.stamp=FILE_STAMP.getStamp(),$scope.isPhoto=$scope.aFile.File1.type.indexOf("image")>-1?!0:!1,$scope.aFile.name=fresponse.name,$scope.aFile.path=fresponse.path,void 0!==$scope.aFile.File1&&($scope.aFile.File=$scope.aFile.File1,$scope.aFile.File1=void 0),fresponse.fileBelongsTo=2==$scope.aFile.filetype_id?"DataFile File":"Sensor File",1===fresponse.filetype_id&&($scope.depSensImageFiles.splice($scope.existIMGFileIndex,1),$scope.depSensImageFiles.push(fresponse)),$scope.DepSensorFiles[$scope.existFileIndex]=fresponse,$scope.allSFiles[$scope.allSFileIndex]=fresponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.sFileIsUploading=!1,$scope.fileItemExists=!0},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})},$scope.showFile=function(file){if($scope.fileTypes=$scope.fileTypeList,$scope.agencies=agencyList,$scope.existFileIndex=-1,$scope.existIMGFileIndex=-1,$scope.allSFileIndex=-1,$scope.aFile={},$scope.aSource={},$scope.datafile={},0!==file){if($scope.existFileIndex=$scope.DepSensorFiles.indexOf(file),$scope.allSFileIndex=$scope.allSFiles.indexOf(file),$scope.existIMGFileIndex=$scope.depSensImageFiles.length>0?$scope.depSensImageFiles.indexOf(file):-1,$scope.aFile=angular.copy(file),FILE.getFileItem({id:$scope.aFile.file_id}).$promise.then(function(response){$scope.fileItemExists=response.Length>0?!0:!1}),$scope.aFile.fileType=$scope.fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,void 0!==$scope.aFile.name){var fI=$scope.aFile.name.lastIndexOf("."),fileExt=$scope.aFile.name.substring(fI+1);$scope.isPhoto=fileExt.match(/(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)?!0:!1}$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),void 0!==file.source_id&&SOURCE.query({id:file.source_id}).$promise.then(function(s){$scope.aSource=s,$scope.aSource.FULLname=$scope.aSource.source_name,1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}),void 0!==file.data_file_id&&DATA_FILE.query({id:file.data_file_id}).$promise.then(function(df){$scope.datafile=df,$scope.processor=allMembers.filter(function(m){return m.member_id==$scope.datafile.processor_id})[0],$scope.datafile.collect_date=new Date($scope.datafile.collect_date),$scope.datafile.good_start=getDateTimeParts($scope.datafile.good_start),$scope.datafile.good_end=getDateTimeParts($scope.datafile.good_end)})}else{$scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname,$scope.processor=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0];var dt=getTimeZoneStamp();$scope.datafile.collect_date=dt[0],$scope.datafile.time_zone=dt[1],$scope.datafile.good_start=new Date,$scope.datafile.good_end=new Date}$scope.showFileForm=!0,$scope.updateAgencyForCaption=function(){1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}},$scope.createFile=function(valid){if(2==$scope.aFile.filetype_id){var s=$scope.datafile.good_start,e=$scope.datafile.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}}if(valid)if($scope.depSenfileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",2==$scope.aFile.filetype_id){if("UTC"!=$scope.datafile.time_zone){var utcStartDateTime=new Date($scope.datafile.good_start).toUTCString(),utcEndDateTime=new Date($scope.datafile.good_end).toUTCString();$scope.datafile.good_start=utcStartDateTime,$scope.datafile.good_end=utcEndDateTime,$scope.datafile.time_zone="UTC"}else{var si=$scope.datafile.good_start.toString().indexOf("GMT")+3,ei=$scope.datafile.good_end.toString().indexOf("GMT")+3;$scope.datafile.good_start=$scope.datafile.good_start.toString().substring(0,si),$scope.datafile.good_end=$scope.datafile.good_end.toString().substring(0,ei)}$scope.datafile.instrument_id=thisSensor.instrument_id,$scope.datafile.processor_id=$cookies.get("mID"),DATA_FILE.save($scope.datafile).$promise.then(function(dfResonse){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,description:$scope.aFile.description,site_id:$scope.thisSensorSite.site_id,data_file_id:dfResonse.data_file_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,instrument_id:thisSensor.instrument_id},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="DataFile File",$scope.DepSensorFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),1===fresponse.filetype_id&&$scope.depSensImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.depSenfileIsUploading=!1},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving Source info: "+errorResponse.statusText)})}else{var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){if(8!==$scope.aFile.filetype_id){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,photo_date:$scope.aFile.photo_date,description:$scope.aFile.description,site_id:$scope.thisSensorSite.site_id,source_id:response.source_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,instrument_id:thisSensor.instrument_id},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Sensor File",$scope.DepSensorFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),1===fresponse.filetype_id&&$scope.depSensImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.depSenfileIsUploading=!1},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})}else $scope.aFile.source_id=response.source_id,$scope.aFile.site_id=$scope.thisSensorSite.site_id,$scope.aFile.instrument_id=thisSensor.instrument_id,FILE.save($scope.aFile).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Sensor File",$scope.DepSensorFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.depSenfileIsUploading=!1},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving Source info: "+errorResponse.statusText)})}},$scope.saveFile=function(valid){if(2==$scope.aFile.filetype_id){var s=$scope.datafile.good_start,e=$scope.datafile.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}}if(valid){$scope.depSenfileIsUploading=!0;{$scope.aFile.fileBelongsTo}if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.datafile.data_file_id){if("UTC"!=$scope.datafile.time_zone){var utcStartDateTime=new Date($scope.datafile.good_start).toUTCString(),utcEndDateTime=new Date($scope.datafile.good_end).toUTCString();$scope.datafile.good_start=utcStartDateTime,$scope.datafile.good_end=utcEndDateTime,$scope.datafile.time_zone="UTC"}else{var si=$scope.datafile.good_start.toString().indexOf("GMT")+3,ei=$scope.datafile.good_end.toString().indexOf("GMT")+3;$scope.datafile.good_start=$scope.datafile.good_start.toString().substring(0,si),$scope.datafile.good_end=$scope.datafile.good_end.toString().substring(0,ei)}DATA_FILE.update({id:$scope.datafile.data_file_id},$scope.datafile).$promise.then(function(){FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="DataFile File",$scope.DepSensorFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.depSenfileIsUploading=!1},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving data file: "+errorResponse.statusText)})}else $scope.aSource.source_name=$scope.aSource.FULLname,SOURCE.update({id:$scope.aSource.source_id},$scope.aSource).$promise.then(function(){FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="Sensor File",$scope.DepSensorFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.depSenfileIsUploading=!1},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.depSenfileIsUploading=!1,toastr.error("Error saving source: "+errorResponse.statusText)})}},$scope.deleteFile=function(){var DeleteModalInstance=$uibModal.open({backdrop:"static",keyboard:!1,templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.DepSensorFiles.splice($scope.existFileIndex,1),$scope.allSFiles.splice($scope.allSFileIndex,1),$scope.depSensImageFiles.splice($scope.existIMGFileIndex,1),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelFile=function(){$scope.aFile={},$scope.aSource={},$scope.datafile={},$scope.showFileForm=!1},$scope.showNWISFile=function(f){$scope.existFileIndex=-1,$scope.allSFileIndex=-1,0!==f?($scope.existFileIndex=$scope.sensorNWISFiles.indexOf(f),$scope.allSFileIndex=$scope.allSFiles.indexOf(f),$scope.NWISFile=angular.copy(f),$scope.NWISFile.file_date=new Date($scope.NWISFile.file_date),$scope.NWISFile.FileType="Data",DATA_FILE.query({id:f.data_file_id}).$promise.then(function(df){$scope.NWISDF=df,$scope.nwisProcessor=allMembers.filter(function(m){return m.member_id==$scope.NWISDF.processor_id})[0],$scope.NWISDF.collect_date=new Date($scope.NWISDF.collect_date),$scope.NWISDF.good_start=getDateTimeParts($scope.NWISDF.good_start),$scope.NWISDF.good_end=getDateTimeParts($scope.NWISDF.good_end)})):($scope.NWISFile={name:"http://waterdata.usgs.gov/nwis/uv?site_no="+$scope.thisSensorSite.usgs_sid,path:"<link>",file_date:new Date,filetype_id:2,FileType:"Data",site_id:$scope.aSensor.site_id,data_file_id:0,instrument_id:$scope.aSensor.instrument_id,is_nwis:1},$scope.NWISDF={processor_id:$cookies.get("mID"),instrument_id:$scope.aSensor.instrument_id,collect_date:dt[0],time_zone:dt[1],good_start:new Date,good_end:new Date},$scope.nwisProcessor=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0]),$scope.showNWISFileForm=!0};var postApprovalForNWISfile=function(DFid){DATA_FILE.approveNWISDF({id:DFid}).$promise.then(function(approvalResponse){$scope.NWISDF.approval_id=approvalResponse.approval_id})};$scope.createNWISFile=function(valid){var s=$scope.NWISDF.good_start,e=$scope.NWISDF.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}if(valid){if($scope.depNWISSenfileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json","UTC"!=$scope.NWISDF.time_zone){var utcStartDateTime=new Date($scope.NWISDF.good_start).toUTCString(),utcEndDateTime=new Date($scope.NWISDF.good_end).toUTCString();$scope.NWISDF.good_start=utcStartDateTime,$scope.NWISDF.good_end=utcEndDateTime,$scope.NWISDF.time_zone="UTC"}else{var si=$scope.NWISDF.good_start.toString().indexOf("GMT")+3,ei=$scope.NWISDF.good_end.toString().indexOf("GMT")+3;$scope.NWISDF.good_start=$scope.NWISDF.good_start.toString().substring(0,si),$scope.NWISDF.good_end=$scope.NWISDF.good_end.toString().substring(0,ei)}DATA_FILE.save($scope.NWISDF).$promise.then(function(NdfResponse){$scope.NWISDF.data_file_id=NdfResponse.data_file_id,postApprovalForNWISfile(NdfResponse.data_file_id),$scope.NWISFile.data_file_id=NdfResponse.data_file_id,$scope.NWISFile.path="<link>",delete $scope.NWISFile.FileType,FILE.save($scope.NWISFile).$promise.then(function(Fresponse){toastr.success("File Data saved"),Fresponse.fileBelongsTo="DataFile File",$scope.sensorNWISFiles.push(Fresponse),$scope.allSFiles.push(Fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showNWISFileForm=!1,$scope.depNWISSenfileIsUploading=!1},function(errorResponse){$scope.depNWISSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.depNWISSenfileIsUploading=!1,toastr.error("Error saving data file info: "+errorResponse.statusText)})}},$scope.saveNWISFile=function(valid){var s=$scope.NWISDF.good_start,e=$scope.NWISDF.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}if(valid){if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json","UTC"!=$scope.NWISDF.time_zone){var utcStartDateTime=new Date($scope.NWISDF.good_start).toUTCString(),utcEndDateTime=new Date($scope.NWISDF.good_end).toUTCString();$scope.NWISDF.good_start=utcStartDateTime,$scope.NWISDF.good_end=utcEndDateTime,$scope.NWISDF.time_zone="UTC"}else{var si=$scope.NWISDF.good_start.toString().indexOf("GMT")+3,ei=$scope.NWISDF.good_end.toString().indexOf("GMT")+3;$scope.NWISDF.good_start=$scope.NWISDF.good_start.toString().substring(0,si),$scope.NWISDF.good_end=$scope.NWISDF.good_end.toString().substring(0,ei)}DATA_FILE.update({id:$scope.NWISDF.data_file_id},$scope.NWISDF).$promise.then(function(){FILE.update({id:$scope.NWISFile.file_id},$scope.NWISFile).$promise.then(function(fileResponse){toastr.success("File Data Updated"),fileResponse.fileBelongsTo="DataFile File",$scope.sensorNWISFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showNWISFileForm=!1},function(errorResponse){toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){toastr.error("Error saving data: "+errorResponse.statusText)})}},$scope.deleteNWISFile=function(){var DeleteModalInstance=$uibModal.open({backdrop:"static",keyboard:!1,templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.NWISFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.sensorNWISFiles.splice($scope.existFileIndex,1),$scope.allSFiles.splice($scope.allSFileIndex,1),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showNWISFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelNWISFile=function(){$scope.NWISFile={},$scope.NWISDF={},$scope.showNWISFileForm=!1},$scope.OPchosen=function(opChosen){var opI=$scope.OPsForTapeDown.map(function(o){return o.objective_point_id}).indexOf(opChosen.objective_point_id);if(opChosen.selected)$scope.OPMeasure={},$scope.OPMeasure.op_name=opChosen.name,$scope.OPMeasure.elevation=opChosen.elev_ft,$scope.OPMeasure.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==opChosen.vdatum_id})[0].datum_abbreviation,$scope.OPMeasure.objective_point_id=opChosen.objective_point_id,void 0!==$scope.aSensor.instrument_id&&4!==$scope.aSensStatus.status_type_id?($scope.depTapeCopy.push($scope.OPMeasure),$scope.depStuffCopy[1].vdatum_id=opChosen.vdatum_id):($scope.tapeDownTable.push($scope.OPMeasure),$scope.aSensStatus.vdatum_id=opChosen.vdatum_id);else{var removeOPMeas=$uibModal.open({backdrop:"static",keyboard:!1,template:'<div class="modal-header"><h3 class="modal-title">Remove OP Measure</h3></div><div class="modal-body"><p>Are you sure you want to remove this OP Measurement from this sensor?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close("remove")},$scope.cancel=function(){$uibModalInstance.close("cancel")}}],size:"sm"});removeOPMeas.result.then(function(yesOrNo){if("remove"==yesOrNo){var createOrEdit=void 0!==$scope.aSensor.instrument_id&&4!==$scope.aSensStatus.status_type_id?"edit":"create",tapeDownToRemove="edit"==createOrEdit?$scope.depTapeCopy.filter(function(a){return a.objective_point_id==opChosen.objective_point_id})[0]:$scope.tapeDownTable.filter(function(a){return a.objective_point_id==opChosen.objective_point_id})[0],tInd="edit"==createOrEdit?$scope.depTapeCopy.map(function(o){return o.objective_point_id}).indexOf(tapeDownToRemove.objective_point_id):$scope.tapeDownTable.map(function(o){return o.objective_point_id}).indexOf(tapeDownToRemove.objective_point_id);void 0!==tapeDownToRemove.op_measurements_id&&$scope.removeOPList.push(tapeDownToRemove.op_measurements_id),"edit"==createOrEdit?$scope.depTapeCopy.splice(tInd,1):$scope.tapeDownTable.splice(tInd,1),"edit"==createOrEdit?0===$scope.depTapeCopy.length&&($scope.depStuffCopy[1].vdatum_id=0,$scope.depStuffCopy[1].gs_elevation="",$scope.depStuffCopy[1].ws_elevation="",$scope.depStuffCopy[1].sensor_elevation=""):0===$scope.tapeDownTable.length&&($scope.aSensStatus.vdatum_id=0,$scope.aSensStatus.gs_elevation="",$scope.aSensStatus.ws_elevation="",$scope.aSensStatus.sensor_elevation="")}else $scope.OPsForTapeDown[opI].selected=!0})}};var getTimeZoneStamp=function(dsent){var d,sendThis=[];d=void 0!==dsent?new Date(dsent):new Date;var offset=d.toString().substring(35),zone="";switch(offset.substr(0,3)){case"Cen":zone="CST";break;case"Eas":zone="EST";break;case"Mou":zone="MST";break;case"Pac":zone="PST"}return sendThis=[d,zone]};$scope.showChangeEventDD=function(){$scope.showEventDD=!$scope.showEventDD},$scope.ChangeEvent=function(){$scope.EventName=$scope.eventList.filter(function(el){return el.event_id==$scope.adminChanged.event_id})[0].event_name},$scope.getDepTypes=function(){$scope.filteredDeploymentTypes=[];var matchingSensDeplist=$scope.sensorTypeList.filter(function(sd){return sd.sensor_type_id==$scope.aSensor.sensor_type_id})[0];$scope.filteredDeploymentTypes=matchingSensDeplist.deploymenttypes,1==$scope.filteredDeploymentTypes.length&&($scope.aSensor.deployment_type_id=$scope.filteredDeploymentTypes[0].deployment_type_id)},$scope.LoggedInMember=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSensor={},$scope.aSensStatus={},$scope.thisSensorSite=SensorSite,$scope.cancel=function(){$rootScope.stateIsLoading.showLoading=!1;var sensorObjectToSendBack=thisSensor;$timeout(function(){var sendBack=[sensorObjectToSendBack];$uibModalInstance.close(sendBack)})},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())};var dealWithTimeStampb4Send=function(w){if("saving"==w)if("UTC"!=$scope.depStuffCopy[1].time_zone){var utcDateTimeS=new Date($scope.depStuffCopy[1].time_stamp).toUTCString();$scope.depStuffCopy[1].time_stamp=utcDateTimeS,$scope.depStuffCopy[1].time_zone="UTC"}else{var i=$scope.depStuffCopy[1].time_stamp.toString().indexOf("GMT")+3;$scope.depStuffCopy[1].time_stamp=$scope.depStuffCopy[1].time_stamp.toString().substring(0,i)}else if("UTC"!=$scope.aSensStatus.time_zone){var utcDateTimeD=new Date($scope.aSensStatus.time_stamp).toUTCString();$scope.aSensStatus.time_stamp=utcDateTimeD,$scope.aSensStatus.time_zone="UTC"}else{var Di=$scope.aSensStatus.time_stamp.toString().indexOf("GMT")+3;$scope.aSensStatus.time_stamp=$scope.aSensStatus.time_stamp.toString().substring(0,Di)}};if($scope.save=function(valid){if(valid){var updatedSensor={},updatedSenStat={};void 0!==$scope.adminChanged.event_id&&($scope.depStuffCopy[0].event_id=$scope.adminChanged.event_id),"Minutes"==$scope.IntervalType.type&&($scope.depStuffCopy[0].interval=60*$scope.depStuffCopy[0].interval),dealWithTimeStampb4Send("saving"),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INSTRUMENT.update({id:$scope.depStuffCopy[0].instrument_id},$scope.depStuffCopy[0]).$promise.then(function(response){updatedSensor=response,updatedSensor.deploymentType=$scope.depStuffCopy[0].deployment_type_id>0?$scope.depTypeList.filter(function(d){return d.deployment_type_id==$scope.depStuffCopy[0].deployment_type_id})[0].method:"",updatedSensor.housingType=$scope.depStuffCopy[0].housing_type_id>0?$scope.houseTypeList.filter(function(h){return h.housing_type_id==$scope.depStuffCopy[0].housing_type_id})[0].type_name:"",updatedSensor.sensorBrand=$scope.sensorBrandList.filter(function(s){return s.sensor_brand_id==$scope.depStuffCopy[0].sensor_brand_id})[0].brand_name,updatedSensor.sensorType=$scope.sensorTypeList.filter(function(t){return t.sensor_type_id==$scope.depStuffCopy[0].sensor_type_id})[0].sensor,INSTRUMENT_STATUS.update({id:$scope.depStuffCopy[1].instrument_status_id},$scope.depStuffCopy[1]).$promise.then(function(statResponse){for(var rt=0;rt<$scope.removeOPList.length;rt++){var idToRemove=$scope.removeOPList[rt];OP_MEASURE["delete"]({id:idToRemove}).$promise}$scope.tapeDownTable=$scope.depTapeCopy.length>0?[]:$scope.tapeDownTable;for(var at=0;at<$scope.depTapeCopy.length;at++){var DEPthisTape=$scope.depTapeCopy[at];void 0!==DEPthisTape.op_measurements_id?OP_MEASURE.update({id:DEPthisTape.op_measurements_id},DEPthisTape).$promise.then(function(tapeResponse){tapeResponse.op_name=DEPthisTape.op_name,tapeResponse.Vdatum=DEPthisTape.Vdatum,$scope.tapeDownTable.push(tapeResponse)}):(DEPthisTape.instrument_status_id=statResponse.instrument_status_id,OP_MEASURE.save(DEPthisTape).$promise.then(function(tapeResponse){tapeResponse.op_name=DEPthisTape.op_name,tapeResponse.Vdatum=DEPthisTape.Vdatum,$scope.tapeDownTable.push(tapeResponse)}))}updatedSenStat=statResponse,updatedSenStat.status="Deployed";var instrument_statusesHolder=$scope.aSensor.instrument_status;$scope.aSensor=updatedSensor,thisSensor=updatedSensor,thisSensor.instrument_status=instrument_statusesHolder,$scope.aSensStatus=updatedSenStat,$scope.aSensStatus.time_stamp=getDateTimeParts($scope.aSensStatus.time_stamp);var ind=thisSensor.instrument_status.map(function(i){return i.status_type_id}).indexOf(1);thisSensor.instrument_status[ind]=$scope.aSensStatus,$scope.depStuffCopy=[],$scope.IntervalType={type:"Seconds"},$scope.view.DEPval="detail",toastr.success("Sensor Updated")},function(errorResponse){toastr.error("error saving sensor status: "+errorResponse.statusText)})},function(errorResponse){toastr.error("error saving sensor: "+errorResponse.statusText)})}},$scope.deploy=function(){if(this.SensorForm.$valid){"Minutes"==$scope.IntervalType.type&&($scope.aSensor.interval=60*$scope.aSensor.interval),$scope.aSensor.event_id=$cookies.get("SessionEventID"),$scope.aSensor.site_id=SensorSite.site_id,dealWithTimeStampb4Send("deploy"),$scope.aSensStatus.status_type_id=1,$scope.aSensStatus.member_id=$cookies.get("mID");var createdSensor={},depSenStat={};$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.aSensor.instrument_id?INSTRUMENT.update({id:$scope.aSensor.instrument_id},$scope.aSensor).$promise.then(function(response){createdSensor=response,createdSensor.deploymentType=$scope.aSensor.deploymentType,createdSensor.housingType=response.housing_type_id>0?$scope.houseTypeList.filter(function(h){return h.housing_type_id==response.housing_type_id})[0].type_name:"",createdSensor.sensorBrand=$scope.sensorBrandList.filter(function(s){return s.sensor_brand_id==response.sensor_brand_id})[0].brand_name,createdSensor.sensorType=$scope.sensorTypeList.filter(function(t){return t.sensor_type_id==response.sensor_type_id})[0].sensor,$scope.aSensStatus.instrument_id=response.instrument_id,INSTRUMENT_STATUS.save($scope.aSensStatus).$promise.then(function(statResponse){if($scope.tapeDownTable.length>0)for(var t=0;t<$scope.tapeDownTable.length;t++){var thisTape=$scope.tapeDownTable[t];thisTape.instrument_status_id=statResponse.instrument_status_id,OP_MEASURE.save(thisTape).$promise}depSenStat=statResponse,depSenStat.status="Deployed",createdSensor.instrument_status=[depSenStat,$scope.previousStateStatus],$timeout(function(){toastr.success("Sensor deployed");var state="deployP"==$scope.whichButton?"proposedDeployed":"newDeployed",sendBack=[createdSensor,state];$uibModalInstance.close(sendBack)})})}):INSTRUMENT.save($scope.aSensor).$promise.then(function(response){createdSensor=response,createdSensor.deploymentType=null!==response.deployment_type_id&&void 0!==response.deployment_type_id?$scope.depTypeList.filter(function(d){return d.deployment_type_id==response.deployment_type_id})[0].method:"",createdSensor.housingType=null!==response.housing_type_id&&void 0!==response.housing_type_id?$scope.houseTypeList.filter(function(h){return h.housing_type_id==response.housing_type_id})[0].type_name:"",createdSensor.sensorBrand=$scope.sensorBrandList.filter(function(s){return s.sensor_brand_id==response.sensor_brand_id})[0].brand_name,createdSensor.sensorType=$scope.sensorTypeList.filter(function(t){return t.sensor_type_id==response.sensor_type_id})[0].sensor,$scope.aSensStatus.instrument_id=response.instrument_id,INSTRUMENT_STATUS.save($scope.aSensStatus).$promise.then(function(statResponse){if($scope.tapeDownTable.length>0)for(var t=0;t<$scope.tapeDownTable.length;t++){var thisTape=$scope.tapeDownTable[t];thisTape.instrument_status_id=statResponse.instrument_status_id,OP_MEASURE.save(thisTape).$promise}depSenStat=statResponse,depSenStat.status="Deployed",createdSensor.instrument_status=[depSenStat],toastr.success("Sensor deployed");var state="deployP"==$scope.whichButton?"proposedDeployed":"newDeployed",sendBack=[createdSensor,state];$uibModalInstance.close(sendBack)})})}},$scope.deleteS=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",backdrop:"static",keyboard:!1,resolve:{nameToRemove:function(){return $scope.aSensor},what:function(){return"Sensor"}}});DeleteModalInstance.result.then(function(sensorToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),INSTRUMENT["delete"]({id:sensorToRemove.instrument_id}).$promise.then(function(){$scope.DepSensorFiles=[],$scope.depSensImageFiles=[];for(var l=$scope.allSFiles.length;l--;)$scope.allSFiles[l].instrument_id==sensorToRemove.instrument_id&&$scope.allSFiles.splice(l,1);Site_Files.setAllSiteFiles($scope.allSFiles),toastr.success("Sensor Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},"empty"!=thisSensor){if($scope.aSensor=angular.copy(thisSensor),$scope.aSensStatus=angular.copy(thisSensor.instrument_status[0]),$scope.sensorDataNWIS=2==$scope.aSensor.sensor_type_id||5==$scope.aSensor.sensor_type_id||6==$scope.aSensor.sensor_type_id?!0:!1,$scope.getDepTypes(),$scope.IntervalType.type="Seconds",$scope.sensorDataNWIS){$scope.sensorNWISFiles=[];for(var ai=$scope.DepSensorFiles.length-1;ai>=0;ai--)1==$scope.DepSensorFiles[ai].is_nwis&&($scope.sensorNWISFiles.push($scope.DepSensorFiles[ai]),
$scope.DepSensorFiles.splice(ai,1));var dt=getTimeZoneStamp();$scope.NWISFile={},$scope.NWISDF={}}if("Proposed"==thisSensor.instrument_status[0].status){$scope.previousStateStatus=angular.copy(thisSensor.instrument_status[0]),$scope.whichButton="deployP",$scope.aSensor.interval=0===$scope.aSensor.interval?null:$scope.aSensor.interval;var timeParts=getTimeZoneStamp();$scope.aSensStatus.time_stamp=timeParts[0],$scope.aSensStatus.time_zone=timeParts[1],$scope.aSensStatus.member_id=$cookies.get("mID"),$scope.EventName=$cookies.get("SessionEventName"),$scope.Deployer=$scope.LoggedInMember}else $scope.whichButton="edit",$scope.aSensor.interval=0===$scope.aSensor.interval?null:$scope.aSensor.interval,$scope.EventName=$scope.eventList.filter(function(e){return e.event_id==$scope.aSensor.event_id})[0].event_name,$scope.aSensStatus.time_stamp=getDateTimeParts($scope.aSensStatus.time_stamp),$scope.Deployer=null!==$scope.aSensStatus.member_id||void 0!==$scope.aSensStatus.member_id?allMembers.filter(function(m){return m.member_id==$scope.aSensStatus.member_id})[0]:{},OP_MEASURE.getInstStatOPMeasures({instrumentStatusId:$scope.aSensStatus.instrument_status_id}).$promise.then(function(response){for(var r=0;r<response.length;r++){var sensMeasures=response[r],whichOP=siteOPs.filter(function(op){return op.objective_point_id==response[r].objective_point_id})[0];sensMeasures.elevation=whichOP.elev_ft,sensMeasures.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==whichOP.vdatum_id})[0].datum_abbreviation,sensMeasures.op_name=whichOP.name,$scope.tapeDownTable.push(sensMeasures)}for(var i=0;i<$scope.OPsForTapeDown.length;i++){for(var y=0;y<response.length;y++)response[y].objective_point_id==$scope.OPsForTapeDown[i].objective_point_id?($scope.OPsForTapeDown[i].selected=!0,y=response.length):$scope.OPsForTapeDown[i].selected=!1;0===response.length&&($scope.OPsForTapeDown[i].selected=!1)}});$rootScope.stateIsLoading.showLoading=!1}else{$scope.whichButton="deploy",$scope.IntervalType.type="Seconds";var DeptimeParts=getTimeZoneStamp();$scope.aSensStatus.time_stamp=DeptimeParts[0],$scope.aSensStatus.time_zone=DeptimeParts[1],$scope.aSensStatus.member_id=$cookies.get("mID"),$scope.EventName=$cookies.get("SessionEventName"),$scope.Deployer=$scope.LoggedInMember,$rootScope.stateIsLoading.showLoading=!1}$scope.myData=[$scope.aSensStatus.sensor_elevation,$scope.aSensStatus.ws_elevation,$scope.aSensStatus.gs_elevation],$scope.wannaEditDep=function(){$scope.view.DEPval="edit",$scope.depStuffCopy=[angular.copy($scope.aSensor),angular.copy($scope.aSensStatus)],$scope.depTapeCopy=angular.copy($scope.tapeDownTable)},$scope.cancelDepEdit=function(){$scope.view.DEPval="detail",$scope.depStuffCopy=[],$scope.depTapeCopy=[];for(var i=0;i<$scope.OPsForTapeDown.length;i++){for(var y=0;y<$scope.tapeDownTable.length;y++)$scope.tapeDownTable[y].objective_point_id==$scope.OPsForTapeDown[i].objective_point_id?($scope.OPsForTapeDown[i].selected=!0,y=$scope.tapeDownTable.length):$scope.OPsForTapeDown[i].selected=!1;0===$scope.tapeDownTable.length&&($scope.OPsForTapeDown[i].selected=!1)}}}]),ModalControllers.controller("sensorRetrievalModalCtrl",["$scope","$rootScope","$timeout","$cookies","$http","$uibModalInstance","$uibModal","thisSensor","SensorSite","siteOPs","allEventList","allVDatumList","allMembers","allStatusTypes","allInstCollCond","INSTRUMENT","INSTRUMENT_STATUS","OP_MEASURE",function($scope,$rootScope,$timeout,$cookies,$http,$uibModalInstance,$uibModal,thisSensor,SensorSite,siteOPs,allEventList,allVDatumList,allMembers,allStatusTypes,allInstCollCond,INSTRUMENT,INSTRUMENT_STATUS,OP_MEASURE){$scope.aSensor=thisSensor,$scope.EventName=allEventList.filter(function(r){return r.event_id==$scope.aSensor.event_id})[0].event_name,$scope.depSensStatus=angular.copy(thisSensor.instrument_status[0]);var isDate="[object Date]"===Object.prototype.toString.call($scope.depSensStatus.time_stamp);if(isDate===!1){var y=$scope.depSensStatus.time_stamp.substr(0,4),m=$scope.depSensStatus.time_stamp.substr(5,2)-1,d=$scope.depSensStatus.time_stamp.substr(8,2),h=$scope.depSensStatus.time_stamp.substr(11,2),mi=$scope.depSensStatus.time_stamp.substr(14,2),sec=$scope.depSensStatus.time_stamp.substr(17,2);$scope.depSensStatus.time_stamp=new Date(y,m,d,h,mi,sec)}void 0!==$scope.depSensStatus.vdatum_id&&$scope.depSensStatus.vdatum_id>0&&($scope.depSensStatus.VDatum=allVDatumList.filter(function(v){return v.datum_id==$scope.depSensStatus.vdatum_id})[0].datum_abbreviation),$scope.OPsForTapeDown=siteOPs,$scope.OPsPresent=siteOPs.length>0?!0:!1,$scope.vertDatumList=allVDatumList,$scope.removeOPList=[],$scope.tapeDownTable=[],$scope.DEPtapeDownTable=[],$scope.Deployer=allMembers.filter(function(m){return m.member_id==$scope.depSensStatus.member_id})[0],$scope.whichButton="Retrieve",$scope.statusTypeList=allStatusTypes.filter(function(s){return"Retrieved"==s.status||"Lost"==s.status}),$scope.collectCondList=allInstCollCond,$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.userRole=$cookies.get("usersRole");var getTimeZoneStamp=function(dsent){var d,sendThis=[];d=void 0!==dsent?new Date(dsent):new Date;var offset=d.toString().substring(35),zone="";switch(offset.substr(0,3)){case"Cen":zone="CST";break;case"Eas":zone="EST";break;case"Mou":zone="MST";break;case"Pac":zone="PST"}return sendThis=[d,zone]};$scope.OPchosen=function(opChosen){var opI=$scope.OPsForTapeDown.map(function(o){return o.objective_point_id}).indexOf(opChosen.objective_point_id);if(opChosen.selected)$scope.OPMeasure={},$scope.OPMeasure.op_name=opChosen.name,$scope.OPMeasure.elevation=opChosen.elev_ft,$scope.OPMeasure.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==opChosen.vdatum_id})[0].datum_abbreviation,$scope.OPMeasure.objective_point_id=opChosen.objective_point_id,$scope.tapeDownTable.push($scope.OPMeasure),$scope.aRetrieval.vdatum_id=opChosen.vdatum_id;else{var removeOPMeas=$uibModal.open({backdrop:"static",keyboard:!1,template:'<div class="modal-header"><h3 class="modal-title">Remove OP Measure</h3></div><div class="modal-body"><p>Are you sure you want to remove this OP Measurement from this sensor?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close("remove")},$scope.cancel=function(){$uibModalInstance.close("cancel")}}],size:"sm"});removeOPMeas.result.then(function(yesOrNo){if("remove"==yesOrNo){var tapeDownToRemove=$scope.tapeDownTable.filter(function(a){return a.objective_point_id==opChosen.objective_point_id})[0],tInd=$scope.tapeDownTable.map(function(o){return o.objective_point_id}).indexOf(tapeDownToRemove.objective_point_id);void 0!==tapeDownToRemove.op_measurements_id&&$scope.removeOPList.push(tapeDownToRemove.op_measurements_id),$scope.tapeDownTable.splice(tInd,1),0===$scope.tapeDownTable.length&&($scope.aRetrieval.vdatum_id=0,$scope.aRetrieval.gs_elevation="",$scope.aRetrieval.ws_elevation="",$scope.aRetrieval.sensor_elevation="")}else $scope.OPsForTapeDown[opI].selected=!0})}},OP_MEASURE.getInstStatOPMeasures({instrumentStatusId:$scope.depSensStatus.instrument_status_id}).$promise.then(function(response){for(var r=0;r<response.length;r++){var sensMeasures=response[r],whichOP=siteOPs.filter(function(op){return op.objective_point_id==response[r].objective_point_id})[0];sensMeasures.elevation=whichOP.elev_ft,sensMeasures.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==whichOP.vdatum_id})[0].datum_abbreviation,sensMeasures.op_name=whichOP.name,$scope.DEPtapeDownTable.push(sensMeasures)}});var dtparts=getTimeZoneStamp();$scope.aRetrieval={time_stamp:dtparts[0],time_zone:dtparts[1],instrument_id:$scope.aSensor.instrument_id,member_id:$cookies.get("mID")},$scope.Retriever=allMembers.filter(function(am){return am.member_id==$cookies.get("mID")})[0];var dealWithTimeStampb4Send=function(){if("UTC"!=$scope.aRetrieval.time_zone){var utcDateTime=new Date($scope.aRetrieval.time_stamp).toUTCString();$scope.aRetrieval.time_stamp=utcDateTime,$scope.aRetrieval.time_zone="UTC"}else{var i=$scope.aRetrieval.time_stamp.toString().indexOf("GMT")+3;$scope.aRetrieval.time_stamp=$scope.aRetrieval.time_stamp.toString().substring(0,i)}};$scope.cancel=function(){$rootScope.stateIsLoading.showLoading=!1,$uibModalInstance.dismiss("cancel")};var depTimeStampb4Send=function(){var returnThis,i=$scope.depSensStatus.time_stamp.toString().indexOf("GMT")+3;return returnThis=$scope.depSensStatus.time_stamp.toString().substring(0,i)};$scope.cancel=function(){$rootScope.stateIsLoading.showLoading=!1,$uibModalInstance.dismiss("cancel")},$scope.retrieveS=function(valid){if(valid){dealWithTimeStampb4Send();var depSenTS=depTimeStampb4Send(),retSenTS=angular.copy($scope.aRetrieval.time_stamp.replace(/\,/g,""));if(new Date(retSenTS)<new Date(depSenTS)){var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The retrieval date must be after the deployed date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){$scope.aRetrieval.time_stamp="",$scope.aRetrieval.time_stamp=getTimeZoneStamp()[0],$scope.aRetrieval.time_zone=getTimeZoneStamp()[1],angular.element("#retrievalDate").trigger("focus")})}else{$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var updatedSensor={},createRetSens={};INSTRUMENT.update({id:$scope.aSensor.instrument_id},$scope.aSensor).$promise.then(function(response){updatedSensor=response,updatedSensor.deploymentType=$scope.aSensor.deploymentType,updatedSensor.housingType=$scope.aSensor.housingType,updatedSensor.sensorBrand=$scope.aSensor.sensorBrand,updatedSensor.sensorType=$scope.aSensor.sensorType,updatedSensor.instCollection=$scope.collectCondList.filter(function(i){return i.id===$scope.aSensor.inst_collection_id})[0].condition,INSTRUMENT_STATUS.save($scope.aRetrieval).$promise.then(function(statResponse){if($scope.tapeDownTable.length>0)for(var t=0;t<$scope.tapeDownTable.length;t++){var thisTape=$scope.tapeDownTable[t];thisTape.instrument_status_id=statResponse.instrument_status_id,OP_MEASURE.save(thisTape).$promise}createRetSens=statResponse,createRetSens.status=2==statResponse.status_type_id?"Retrieved":"Lost",updatedSensor.instrument_status=[createRetSens,thisSensor.instrument_status[0]],$timeout(function(){toastr.success("Sensor retrieved");var state="retrieved",sendBack=[updatedSensor,state];$uibModalInstance.close(sendBack)})})})}}},$rootScope.stateIsLoading.showLoading=!1}]),ModalControllers.controller("fullSensorModalCtrl",["$scope","$rootScope","$filter","$timeout","$cookies","$http","$uibModalInstance","$uibModal","SERVER_URL","FILE_STAMP","allDepDropdowns","agencyList","Site_Files","allStatusTypes","allInstCollCond","allEvents","allDepTypes","thisSensor","SensorSite","siteOPs","allMembers","INSTRUMENT","INSTRUMENT_STATUS","DATA_FILE","FILE","SOURCE","OP_MEASURE",function($scope,$rootScope,$filter,$timeout,$cookies,$http,$uibModalInstance,$uibModal,SERVER_URL,FILE_STAMP,allDepDropdowns,agencyList,Site_Files,allStatusTypes,allInstCollCond,allEvents,allDepTypes,thisSensor,SensorSite,siteOPs,allMembers,INSTRUMENT,INSTRUMENT_STATUS,DATA_FILE,FILE,SOURCE,OP_MEASURE){$scope.serverURL=SERVER_URL,$scope.fullSenfileIsUploading=!1,$scope.sensorTypeList=allDepDropdowns[0],$scope.sensorBrandList=allDepDropdowns[1],$scope.houseTypeList=allDepDropdowns[2],$scope.fileTypeList=allDepDropdowns[3],$scope.vertDatumList=allDepDropdowns[4],$scope.allSFiles=Site_Files.getAllSiteFiles(),$scope.sensorFiles="empty"!==thisSensor?$scope.allSFiles.filter(function(sf){return sf.instrument_id==thisSensor.instrument_id}):[],$scope.sensImageFiles=$scope.sensorFiles.filter(function(hf){return 1===hf.filetype_id}),$scope.showFileForm=!1,$scope.showNWISFileForm=!1,$scope.sensorDataNWIS=!1,$scope.collectCondList=allInstCollCond,$scope.OPsPresent=siteOPs.length>0?!0:!1,$scope.DEPOPsForTapeDown=angular.copy(siteOPs),$scope.RETOPsForTapeDown=angular.copy(siteOPs),$scope.depTypeList=allDepTypes,$scope.filteredDeploymentTypes=[],$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.statusTypeList=allStatusTypes.filter(function(s){return"Retrieved"==s.status||"Lost"==s.status}),$scope.IntervalType={type:"Seconds"},$scope.view={DEPval:"detail",RETval:"detail"};var getTimeZoneStamp=function(dsent){var d,sendThis=[];d=void 0!==dsent?new Date(dsent):new Date;var offset=d.toString().substring(35),zone="";switch(offset.substr(0,3)){case"Cen":zone="CST";break;case"Eas":zone="EST";break;case"Mou":zone="MST";break;case"Pac":zone="PST"}return sendThis=[d,zone]},getDateTimeParts=function(d){var theDate,isDate="[object Date]"===Object.prototype.toString.call(d);if(isDate===!1){var y=d.substr(0,4),m=d.substr(5,2)-1,da=d.substr(8,2),h=d.substr(11,2),mi=d.substr(14,2),sec=d.substr(17,2);theDate=new Date(y,m,da,h,mi,sec)}else theDate=d;return theDate};$scope.thisSensorSite=SensorSite,$scope.userRole=$cookies.get("usersRole"),$scope.sensor=angular.copy(thisSensor),$scope.sensorDataNWIS=2==$scope.sensor.sensor_type_id||5==$scope.sensor.sensor_type_id||6==$scope.sensor.sensor_type_id?!0:!1,$scope.DeployedSensorStat=angular.copy(thisSensor.instrument_status.filter(function(inst){return"Deployed"===inst.status})[0]),$scope.DeployedSensorStat.time_stamp=getDateTimeParts($scope.DeployedSensorStat.time_stamp),$scope.Deployer=allMembers.filter(function(m){return m.member_id===$scope.DeployedSensorStat.member_id})[0],$scope.DEPremoveOPList=[],$scope.DEPtapeDownTable=[],$scope.DEPOPchosen=function(DEPopChosen){var opI=$scope.DEPOPsForTapeDown.map(function(o){return o.objective_point_id}).indexOf(DEPopChosen.objective_point_id);if(DEPopChosen.selected)$scope.DEPOPMeasure={},$scope.DEPOPMeasure.op_name=DEPopChosen.name,$scope.DEPOPMeasure.elevation=DEPopChosen.elev_ft,$scope.DEPOPMeasure.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==DEPopChosen.vdatum_id})[0].datum_abbreviation,$scope.DEPOPMeasure.objective_point_id=DEPopChosen.objective_point_id,$scope.depTapeCopy.push($scope.DEPOPMeasure),$scope.depStuffCopy[1].vdatum_id=DEPopChosen.vdatum_id;else{var DEPremoveOPMeas=$uibModal.open({backdrop:"static",keyboard:!1,template:'<div class="modal-header"><h3 class="modal-title">Remove OP Measure</h3></div><div class="modal-body"><p>Are you sure you want to remove this OP Measurement from this deployed sensor?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="DEPok()">OK</button><button class="btn btn-primary" ng-click="DEPcancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.DEPok=function(){$uibModalInstance.close("remove")},$scope.DEPcancel=function(){$uibModalInstance.close("cancel")}}],size:"sm"});DEPremoveOPMeas.result.then(function(yesOrNo){if("remove"==yesOrNo){var DEPtapeDownToRemove=$scope.depTapeCopy.filter(function(a){return a.objective_point_id==DEPopChosen.objective_point_id})[0],DEPtInd=$scope.depTapeCopy.map(function(o){return o.objective_point_id}).indexOf(DEPtapeDownToRemove.objective_point_id);void 0!==DEPtapeDownToRemove.op_measurements_id&&$scope.DEPremoveOPList.push(DEPtapeDownToRemove.op_measurements_id),$scope.depTapeCopy.splice(DEPtInd,1),0===$scope.depTapeCopy.length&&($scope.depStuffCopy[1].vdatum_id=0,$scope.depStuffCopy[1].gs_elevation="",$scope.depStuffCopy[1].ws_elevation="",$scope.depStuffCopy[1].sensor_elevation="")}else $scope.DEPOPsForTapeDown[opI].selected=!0})}},$scope.OPsPresent&&OP_MEASURE.getInstStatOPMeasures({instrumentStatusId:$scope.DeployedSensorStat.instrument_status_id}).$promise.then(function(DEPresponse){for(var r=0;r<DEPresponse.length;r++){var DEPsensMeasures=DEPresponse[r],whichOP=siteOPs.filter(function(op){return op.objective_point_id==DEPresponse[r].objective_point_id})[0];DEPsensMeasures.elevation=whichOP.elev_ft,DEPsensMeasures.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==whichOP.vdatum_id})[0].datum_abbreviation,DEPsensMeasures.op_name=$scope.DEPOPsForTapeDown.filter(function(op){return op.objective_point_id==DEPresponse[r].objective_point_id})[0].name,$scope.DEPtapeDownTable.push(DEPsensMeasures)}for(var i=0;i<$scope.DEPOPsForTapeDown.length;i++){for(var y=0;y<DEPresponse.length;y++)DEPresponse[y].objective_point_id==$scope.DEPOPsForTapeDown[i].objective_point_id?($scope.DEPOPsForTapeDown[i].selected=!0,y=DEPresponse.length):$scope.DEPOPsForTapeDown[i].selected=!1;0===DEPresponse.length&&($scope.DEPOPsForTapeDown[i].selected=!1)}}),$scope.RetrievedSensorStat=angular.copy(thisSensor.instrument_status.filter(function(inst){return"Retrieved"===inst.status})[0]),void 0===$scope.RetrievedSensorStat?($scope.RetrievedSensorStat=angular.copy(thisSensor.instrument_status.filter(function(inst){return"Lost"===inst.status})[0]),$scope.mostRecentStatus="Lost"):$scope.mostRecentStatus="Retrieved",void 0!==$scope.RetrievedSensorStat.vdatum_id&&($scope.RetrievedSensorStat.vdatumName=$scope.vertDatumList.filter(function(vd){return vd.datum_id==$scope.RetrievedSensorStat.vdatum_id})[0].datum_abbreviation),$scope.RetrievedSensorStat.time_stamp=getDateTimeParts($scope.RetrievedSensorStat.time_stamp),$scope.Retriever=allMembers.filter(function(m){return m.member_id===$scope.RetrievedSensorStat.member_id})[0],$scope.RETremoveOPList=[],$scope.RETtapeDownTable=[],$scope.RETOPchosen=function(RETopChosen){var opI=$scope.RETOPsForTapeDown.map(function(o){return o.objective_point_id}).indexOf(RETopChosen.objective_point_id);if(RETopChosen.selected)$scope.RETOPMeasure={},$scope.RETOPMeasure.op_name=RETopChosen.name,$scope.RETOPMeasure.elevation=RETopChosen.elev_ft,$scope.RETOPMeasure.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==RETopChosen.vdatum_id})[0].datum_abbreviation,$scope.RETOPMeasure.objective_point_id=RETopChosen.objective_point_id,$scope.retTapeCopy.push($scope.RETOPMeasure),$scope.retStuffCopy[1].vdatum_id=RETopChosen.vdatum_id;else{var RETremoveOPMeas=$uibModal.open({backdrop:"static",keyboard:!1,template:'<div class="modal-header"><h3 class="modal-title">Remove OP Measure</h3></div><div class="modal-body"><p>Are you sure you want to remove this OP Measurement from this retrieved sensor?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="RETok()">OK</button><button class="btn btn-primary" ng-click="RETcancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.RETok=function(){$uibModalInstance.close("remove")},$scope.RETcancel=function(){$uibModalInstance.close("cancel")}}],size:"sm"});RETremoveOPMeas.result.then(function(yesOrNo){if("remove"==yesOrNo){var RETtapeDownToRemove=$scope.retTapeCopy.filter(function(a){return a.objective_point_id==RETopChosen.objective_point_id})[0],RETtInd=$scope.retTapeCopy.map(function(o){return o.objective_point_id}).indexOf(RETtapeDownToRemove.objective_point_id);$scope.RETremoveOPList.push(RETtapeDownToRemove.op_measurements_id),$scope.retTapeCopy.splice(RETtInd,1),0===$scope.retTapeCopy.length&&($scope.retStuffCopy[1].vdatum_id=0,$scope.retStuffCopy[1].gs_elevation="",$scope.retStuffCopy[1].ws_elevation="",$scope.retStuffCopy[1].sensor_elevation="")}else $scope.RETOPsForTapeDown[opI].selected=!0})}},$scope.OPsPresent&&OP_MEASURE.getInstStatOPMeasures({instrumentStatusId:$scope.RetrievedSensorStat.instrument_status_id}).$promise.then(function(RETresponse){for(var r=0;r<RETresponse.length;r++){var RETsensMeasures=RETresponse[r],whichOP=siteOPs.filter(function(op){return op.objective_point_id==RETresponse[r].objective_point_id})[0];RETsensMeasures.elevation=whichOP.elev_ft,RETsensMeasures.Vdatum=$scope.vertDatumList.filter(function(vd){return vd.datum_id==whichOP.vdatum_id})[0].datum_abbreviation,RETsensMeasures.op_name=$scope.RETOPsForTapeDown.filter(function(op){return op.objective_point_id==RETresponse[r].objective_point_id})[0].name,$scope.RETtapeDownTable.push(RETsensMeasures)}for(var i=0;i<$scope.RETOPsForTapeDown.length;i++){for(var y=0;y<RETresponse.length;y++)RETresponse[y].objective_point_id==$scope.RETOPsForTapeDown[i].objective_point_id?($scope.RETOPsForTapeDown[i].selected=!0,y=RETresponse.length):$scope.RETOPsForTapeDown[i].selected=!1;0===RETresponse.length&&($scope.RETOPsForTapeDown[i].selected=!1)}}),$scope.EventName=allEvents.filter(function(e){return e.event_id===$scope.sensor.event_id})[0].event_name,$scope.s={depOpen:!1,retOpen:!0,sFileOpen:!1,NWISFileOpen:!1},$scope.dateOptions={startingDay:1,showWeeks:!1},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.getDepTypes=function(sensType){$scope.filteredDeploymentTypes=[];var matchingSensDeplist=$scope.sensorTypeList.filter(function(sd){return sd.sensor_type_id==sensType.sensor_type_id})[0];$scope.filteredDeploymentTypes=matchingSensDeplist.deploymenttypes},$scope.getDepTypes($scope.sensor),$scope.cancel=function(){$timeout(function(){var sendBack=[thisSensor];$uibModalInstance.close(sendBack)})};var dealWithTimeStampb4Send=function(w){var utcDateTime,i;"deployed"===w?"UTC"!=$scope.depStuffCopy[1].time_zone?(utcDateTime=new Date($scope.depStuffCopy[1].time_stamp).toUTCString(),$scope.depStuffCopy[1].time_stamp=utcDateTime,$scope.depStuffCopy[1].time_zone="UTC"):(i=$scope.depStuffCopy[1].time_stamp.toString().indexOf("GMT")+3,$scope.depStuffCopy[1].time_stamp=$scope.depStuffCopy[1].time_stamp.toString().substring(0,i)):"UTC"!=$scope.retStuffCopy[1].time_zone?(utcDateTime=new Date($scope.retStuffCopy[1].time_stamp).toUTCString(),$scope.retStuffCopy[1].time_stamp=utcDateTime,$scope.retStuffCopy[1].time_zone="UTC"):(i=$scope.retStuffCopy[1].time_stamp.toString().indexOf("GMT")+3,$scope.retStuffCopy[1].time_stamp=$scope.retStuffCopy[1].time_stamp.toString().substring(0,i))};if($scope.wannaEditDep=function(){$scope.view.DEPval="edit",$scope.depStuffCopy=[angular.copy($scope.sensor),angular.copy($scope.DeployedSensorStat)],$scope.depTapeCopy=angular.copy($scope.DEPtapeDownTable)},$scope.saveDeployed=function(valid){if(valid){var updatedSensor={},updatedSenStat={};"Minutes"==$scope.IntervalType.type&&($scope.depStuffCopy[0].interval=60*$scope.depStuffCopy[0].interval),dealWithTimeStampb4Send("deployed"),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INSTRUMENT.update({id:$scope.depStuffCopy[0].instrument_id},$scope.depStuffCopy[0]).$promise.then(function(response){updatedSensor=response,updatedSensor.deploymentType=$scope.depStuffCopy[0].deployment_type_id>0?$scope.depTypeList.filter(function(d){return d.deployment_type_id===$scope.depStuffCopy[0].deployment_type_id})[0].method:"",updatedSensor.housingType=$scope.depStuffCopy[0].housing_type_id>0?$scope.houseTypeList.filter(function(h){return h.housing_type_id===$scope.depStuffCopy[0].housing_type_id})[0].type_name:"",updatedSensor.sensorBrand=$scope.sensorBrandList.filter(function(s){return s.sensor_brand_id===$scope.depStuffCopy[0].sensor_brand_id})[0].brand_name,updatedSensor.sensorType=$scope.sensorTypeList.filter(function(t){return t.sensor_type_id===$scope.depStuffCopy[0].sensor_type_id})[0].sensor,updatedSensor.instCollection=$scope.collectCondList.filter(function(i){return i.id===$scope.depStuffCopy[0].inst_collection_id})[0].condition,INSTRUMENT_STATUS.update({id:$scope.depStuffCopy[1].instrument_status_id},$scope.depStuffCopy[1]).$promise.then(function(statResponse){for(var rt=0;rt<$scope.DEPremoveOPList.length;rt++){var DEPidToRemove=$scope.DEPremoveOPList[rt];OP_MEASURE["delete"]({id:DEPidToRemove}).$promise}$scope.DEPtapeDownTable=$scope.depTapeCopy.length>0?[]:$scope.DEPtapeDownTable;for(var at=0;at<$scope.depTapeCopy.length;at++){var DEPthisTape=$scope.depTapeCopy[at];void 0!==DEPthisTape.op_measurements_id?OP_MEASURE.update({id:DEPthisTape.op_measurements_id},DEPthisTape).$promise.then(function(tapeResponse){tapeResponse.op_name=DEPthisTape.op_name,tapeResponse.Vdatum=DEPthisTape.Vdatum,$scope.DEPtapeDownTable.push(tapeResponse)}):(DEPthisTape.instrument_status_id=statResponse.instrument_status_id,OP_MEASURE.save(DEPthisTape).$promise.then(function(tapeResponse){tapeResponse.op_name=DEPthisTape.op_name,tapeResponse.Vdatum=DEPthisTape.Vdatum,$scope.DEPtapeDownTable.push(tapeResponse)}))}updatedSenStat=statResponse,updatedSenStat.status="Deployed",$scope.sensor=updatedSensor;var allStatusHolder=thisSensor.instrument_status;thisSensor=updatedSensor,$scope.DeployedSensorStat=updatedSenStat,$scope.DeployedSensorStat.time_stamp=getDateTimeParts($scope.DeployedSensorStat.time_stamp),thisSensor.instrument_status=allStatusHolder;var ind=thisSensor.instrument_status.map(function(i){return i.status_type_id}).indexOf(1);thisSensor.instrument_status[ind]=$scope.DeployedSensorStat,$scope.sensor.instrument_status=thisSensor.instrument_status,$scope.depStuffCopy=[],$scope.depTapeCopy=[],$scope.IntervalType={type:"Seconds"},$scope.view.DEPval="detail",toastr.success("Sensor Updated")},function(errorResponse){toastr.error("error saving sensor status: "+errorResponse.statusText)})},function(errorResponse){toastr.error("error saving sensor: "+errorResponse.statusText)})}},$scope.cancelDepEdit=function(){$scope.view.DEPval="detail",$scope.depStuffCopy=[],$scope.depTapeCopy=[];for(var i=0;i<$scope.DEPOPsForTapeDown.length;i++){for(var y=0;y<$scope.DEPtapeDownTable.length;y++)$scope.DEPtapeDownTable[y].objective_point_id==$scope.DEPOPsForTapeDown[i].objective_point_id?($scope.DEPOPsForTapeDown[i].selected=!0,y=$scope.DEPtapeDownTable.length):$scope.DEPOPsForTapeDown[i].selected=!1;0===$scope.DEPtapeDownTable.length&&($scope.DEPOPsForTapeDown[i].selected=!1)}},$scope.wannaEditRet=function(){$scope.view.RETval="edit",$scope.retStuffCopy=[angular.copy($scope.sensor),angular.copy($scope.RetrievedSensorStat)],$scope.retTapeCopy=angular.copy($scope.RETtapeDownTable)},$scope.saveRetrieved=function(valid){if(valid){var updatedRetSensor={};dealWithTimeStampb4Send("retrieved"),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INSTRUMENT.update({id:$scope.retStuffCopy[0].instrument_id},$scope.retStuffCopy[0]).$promise.then(function(response){updatedRetSensor=response,updatedRetSensor.deploymentType=$scope.retStuffCopy[0].deployment_type_id>0?$scope.depTypeList.filter(function(d){return d.deployment_type_id===$scope.retStuffCopy[0].deployment_type_id})[0].method:"",updatedRetSensor.housingType=$scope.retStuffCopy[0].housing_type_id>0?$scope.houseTypeList.filter(function(h){return h.housing_type_id===$scope.retStuffCopy[0].housing_type_id})[0].type_name:"",updatedRetSensor.sensorBrand=$scope.sensorBrandList.filter(function(s){return s.sensor_brand_id===$scope.retStuffCopy[0].sensor_brand_id})[0].brand_name,updatedRetSensor.sensorType=$scope.sensorTypeList.filter(function(t){return t.sensor_type_id===$scope.retStuffCopy[0].sensor_type_id})[0].sensor,updatedRetSensor.instCollection=$scope.collectCondList.filter(function(i){return i.id===$scope.retStuffCopy[0].inst_collection_id})[0].condition,$scope.sensor=updatedRetSensor;var statsHolder=thisSensor.instrument_status;thisSensor=updatedRetSensor,thisSensor.instrument_status=statsHolder,INSTRUMENT_STATUS.update({id:$scope.retStuffCopy[1].instrument_status_id},$scope.retStuffCopy[1]).$promise.then(function(statResponse){$scope.mostRecentStatus=2==statResponse.status_type_id?"Retrieved":"Lost",$scope.RetrievedSensorStat=statResponse,$scope.RetrievedSensorStat.status=2==statResponse.status_type_id?"Retrieved":"Lost",$scope.RetrievedSensorStat.time_stamp=getDateTimeParts($scope.RetrievedSensorStat.time_stamp),thisSensor.instrument_status[0]=$scope.RetrievedSensorStat;for(var rt=0;rt<$scope.RETremoveOPList.length;rt++){var RETidToRemove=$scope.RETremoveOPList[rt];OP_MEASURE["delete"]({id:RETidToRemove}).$promise}$scope.RETtapeDownTable=$scope.retTapeCopy.length>0?[]:$scope.RETtapeDownTable;for(var at=0;at<$scope.retTapeCopy.length;at++){var RETthisTape=$scope.retTapeCopy[at];void 0!==RETthisTape.op_measurements_id?OP_MEASURE.update({id:RETthisTape.op_measurements_id},RETthisTape).$promise.then(function(tapeResponse){tapeResponse.op_name=RETthisTape.op_name,tapeResponse.Vdatum=RETthisTape.Vdatum,$scope.RETtapeDownTable.push(tapeResponse)}):(RETthisTape.instrument_status_id=statResponse.instrument_status_id,OP_MEASURE.save(RETthisTape).$promise.then(function(tapeResponse){tapeResponse.op_name=RETthisTape.op_name,tapeResponse.Vdatum=RETthisTape.Vdatum,$scope.RETtapeDownTable.push(tapeResponse)}))}$scope.retStuffCopy=[],$scope.retTapeCopy=[],$scope.view.RETval="detail",toastr.success("Sensor updated")},function(errorResponse){toastr.error("error saving sensor status: "+errorResponse.statusText)})},function(errorResponse){toastr.error("error saving sensor: "+errorResponse.statusText)})}},$scope.cancelRetEdit=function(){$scope.view.RETval="detail",$scope.retStuffCopy=[],$scope.retTapeCopy=[];for(var i=0;i<$scope.RETOPsForTapeDown.length;i++){for(var y=0;y<$scope.RETtapeDownTable.length;y++)$scope.RETtapeDownTable[y].objective_point_id==$scope.RETOPsForTapeDown[i].objective_point_id?($scope.RETOPsForTapeDown[i].selected=!0,y=$scope.RETtapeDownTable.length):$scope.RETOPsForTapeDown[i].selected=!1;0===$scope.RETtapeDownTable.length&&($scope.RETOPsForTapeDown[i].selected=!1)}},$scope.deleteS=function(){var DeleteModalInstance=$uibModal.open({backdrop:"static",keyboard:!1,templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.sensor},what:function(){return"Sensor"}}});DeleteModalInstance.result.then(function(sensorToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),INSTRUMENT["delete"]({id:sensorToRemove.instrument_id}).$promise.then(function(){$scope.sensorFiles=[],$scope.sensImageFiles=[];for(var l=$scope.allSFiles.length;l--;)$scope.allSFiles[l].instrument_id==sensorToRemove.instrument_id&&$scope.allSFiles.splice(l,1);Site_Files.setAllSiteFiles($scope.allSFiles),toastr.success("Sensor Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.stamp=FILE_STAMP.getStamp(),$scope.fileItemExists=!0,$scope.saveFileUpload=function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.sFileIsUploading=!0;var fileParts={FileEntity:{file_id:$scope.aFile.file_id,name:$scope.aFile.name,description:$scope.aFile.description,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,file_date:$scope.aFile.file_date,hwm_id:$scope.aFile.hwm_id,site_id:$scope.aFile.site_id,filetype_id:$scope.aFile.filetype_id,source_id:$scope.aFile.source_id,path:$scope.aFile.path,data_file_id:$scope.aFile.data_file_id,instrument_id:$scope.aFile.instrument_id,photo_date:$scope.aFile.photo_date,is_nwis:$scope.aFile.is_nwis,objective_point_id:$scope.aFile.objective_point_id},File:void 0!==$scope.aFile.File1?$scope.aFile.File1:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),
FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),FILE_STAMP.setStamp(),$scope.stamp=FILE_STAMP.getStamp(),$scope.isPhoto=$scope.aFile.File1.type.indexOf("image")>-1?!0:!1,$scope.aFile.name=fresponse.name,$scope.aFile.path=fresponse.path,void 0!==$scope.aFile.File1&&($scope.aFile.File=$scope.aFile.File1,$scope.aFile.File1=void 0),fresponse.fileBelongsTo=2==$scope.aFile.filetype_id?"DataFile File":"Sensor File",1===fresponse.filetype_id&&($scope.sensImageFiles.splice($scope.existIMGFileIndex,1),$scope.sensImageFiles.push(fresponse)),$scope.sensorFiles[$scope.existFileIndex]=fresponse,$scope.allSFiles[$scope.allSFileIndex]=fresponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.sFileIsUploading=!1,$scope.fileItemExists=!0},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})},$scope.showFile=function(file){if($scope.fileTypes=$scope.fileTypeList,$scope.agencies=agencyList,$scope.existFileIndex=-1,$scope.existIMGFileIndex=-1,$scope.allSFileIndex=-1,$scope.aFile={},$scope.aSource={},$scope.datafile={},0!==file){if($scope.existFileIndex=$scope.sensorFiles.indexOf(file),$scope.allSFileIndex=$scope.allSFiles.indexOf(file),$scope.existIMGFileIndex=$scope.sensImageFiles.length>0?$scope.sensImageFiles.indexOf(file):-1,$scope.aFile=angular.copy(file),FILE.getFileItem({id:$scope.aFile.file_id}).$promise.then(function(response){$scope.fileItemExists=response.Length>0?!0:!1}),$scope.aFile.fileType=$scope.fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,void 0!==$scope.aFile.name){var fI=$scope.aFile.name.lastIndexOf("."),fileExt=$scope.aFile.name.substring(fI+1);$scope.isPhoto=fileExt.match(/(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)?!0:!1}$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),void 0!==file.source_id&&SOURCE.query({id:file.source_id}).$promise.then(function(s){$scope.aSource=s,$scope.aSource.FULLname=$scope.aSource.source_name,1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}),void 0!==file.data_file_id&&($scope.ApprovalInfo={},DATA_FILE.query({id:file.data_file_id}).$promise.then(function(df){$scope.datafile=df,$scope.processor=allMembers.filter(function(m){return m.member_id==$scope.datafile.processor_id})[0],$scope.datafile.collect_date=new Date($scope.datafile.collect_date),$scope.datafile.good_start=getDateTimeParts($scope.datafile.good_start),$scope.datafile.good_end=getDateTimeParts($scope.datafile.good_end),void 0!==df.approval_id&&null!==df.approval_id&&df.approval_id>=1&&DATA_FILE.getDFApproval({id:df.data_file_id},function(approvalResponse){$scope.ApprovalInfo.approvalDate=new Date(approvalResponse.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==approvalResponse.member_id})[0]},function(errorResponse){toastr.error("Error getting data file approval information")})}))}else{$scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname,$scope.processor=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0];var dt=getTimeZoneStamp();$scope.datafile.collect_date=dt[0],$scope.datafile.time_zone=dt[1],$scope.datafile.good_start=new Date,$scope.datafile.good_end=new Date}$scope.showFileForm=!0,$scope.updateAgencyForCaption=function(){1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}},$scope.createFile=function(valid){if(2==$scope.aFile.filetype_id){var s=$scope.datafile.good_start,e=$scope.datafile.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}}if(valid)if($scope.fullSenfileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",2==$scope.aFile.filetype_id){if("UTC"!=$scope.datafile.time_zone){var utcStartDateTime=new Date($scope.datafile.good_start).toUTCString(),utcEndDateTime=new Date($scope.datafile.good_end).toUTCString();$scope.datafile.good_start=utcStartDateTime,$scope.datafile.good_end=utcEndDateTime,$scope.datafile.time_zone="UTC"}else{var si=$scope.datafile.good_start.toString().indexOf("GMT")+3,ei=$scope.datafile.good_end.toString().indexOf("GMT")+3;$scope.datafile.good_start=$scope.datafile.good_start.toString().substring(0,si),$scope.datafile.good_end=$scope.datafile.good_end.toString().substring(0,ei)}$scope.datafile.instrument_id=thisSensor.instrument_id,$scope.datafile.processor_id=$cookies.get("mID"),DATA_FILE.save($scope.datafile).$promise.then(function(dfResonse){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,description:$scope.aFile.description,site_id:$scope.thisSensorSite.site_id,data_file_id:dfResonse.data_file_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,instrument_id:thisSensor.instrument_id},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="DataFile File",$scope.sensorFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),1===fresponse.filetype_id&&$scope.sensImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.fullSenfileIsUploading=!1},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving data file: "+errorResponse.statusText)})}else{var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,photo_date:$scope.aFile.photo_date,description:$scope.aFile.description,site_id:$scope.thisSensorSite.site_id,source_id:response.source_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,instrument_id:thisSensor.instrument_id},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Sensor File",$scope.sensorFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),1===fresponse.filetype_id&&$scope.sensImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.fullSenfileIsUploading=!1},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving source info: "+errorResponse.statusText)})}},$scope.saveFile=function(valid){if(2==$scope.aFile.filetype_id){var s=$scope.datafile.good_start,e=$scope.datafile.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}}if(valid){$scope.fullSenfileIsUploading=!0;{$scope.aFile.fileBelongsTo}if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.datafile.data_file_id){if("UTC"!=$scope.datafile.time_zone){var utcStartDateTime=new Date($scope.datafile.good_start).toUTCString(),utcEndDateTime=new Date($scope.datafile.good_end).toUTCString();$scope.datafile.good_start=utcStartDateTime,$scope.datafile.good_end=utcEndDateTime,$scope.datafile.time_zone="UTC"}else{var si=$scope.datafile.good_start.toString().indexOf("GMT")+3,ei=$scope.datafile.good_end.toString().indexOf("GMT")+3;$scope.datafile.good_start=$scope.datafile.good_start.toString().substring(0,si),$scope.datafile.good_end=$scope.datafile.good_end.toString().substring(0,ei)}DATA_FILE.update({id:$scope.datafile.data_file_id},$scope.datafile).$promise.then(function(){FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="DataFile File",$scope.sensorFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.fullSenfileIsUploading=!1},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving data file: "+errorResponse.statusText)})}else $scope.aSource.source_name=$scope.aSource.FULLname,SOURCE.update({id:$scope.aSource.source_id},$scope.aSource).$promise.then(function(){FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="Sensor File",$scope.sensorFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.fullSenfileIsUploading=!1},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.fullSenfileIsUploading=!1,toastr.error("Error saving source: "+errorResponse.statusText)})}},$scope.deleteFile=function(){var DeleteModalInstance=$uibModal.open({backdrop:"static",keyboard:!1,templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.sensorFiles.splice($scope.existFileIndex,1),$scope.allSFiles.splice($scope.allSFileIndex,1),$scope.sensImageFiles.splice($scope.existIMGFileIndex,1),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelFile=function(){$scope.aFile={},$scope.aSource={},$scope.datafile={},$scope.showFileForm=!1},$scope.approveDF=function(){var thisDF=$scope.datafile,approveModal=$uibModal.open({template:"<div class='modal-header'><h3 class='modal-title'>Approve Data File</h3></div><div class='modal-body'><p>Are you ready to approve this Data File?</p></div><div class='modal-footer'><button class='btn btn-primary' ng-click='approveIt()'>Approve</button><button class='btn btn-warning' ng-click='cancel()'>Cancel</button></div>",controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.approveIt=function(){$uibModalInstance.close(thisDF)}}],size:"sm"});approveModal.result.then(function(df){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),DATA_FILE.approveDF({id:df.data_file_id}).$promise.then(function(approvalResponse){df.approval_id=approvalResponse.approval_id,$scope.datafile=df,toastr.success("Data File Approved"),$scope.ApprovalInfo.approvalDate=new Date(approvalResponse.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==approvalResponse.member_id})[0]},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.unApproveDF=function(){var thisDF=$scope.datafile,unapproveModal=$uibModal.open({template:"<div class='modal-header'><h3 class='modal-title'>Remove Approval</h3></div><div class='modal-body'><p>Are you sure you wan to unapprove this Data File?</p></div><div class='modal-footer'><button class='btn btn-primary' ng-click='unApproveIt()'>Unapprove</button><button class='btn btn-warning' ng-click='cancel()'>Cancel</button></div>",controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.unApproveIt=function(){$uibModalInstance.close(thisDF)}}],size:"sm"});unapproveModal.result.then(function(df){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),DATA_FILE.unApproveDF({id:df.data_file_id}).$promise.then(function(){df.approval_id=null,$scope.datafile=df,toastr.success("Data File Unapproved"),$scope.ApprovalInfo={}},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.sensorDataNWIS){$scope.sensorNWISFiles=[];for(var ai=$scope.sensorFiles.length-1;ai>=0;ai--)1==$scope.sensorFiles[ai].is_nwis&&($scope.sensorNWISFiles.push($scope.sensorFiles[ai]),$scope.sensorFiles.splice(ai,1));var dt=getTimeZoneStamp();$scope.NWISFile={},$scope.NWISDF={}}$scope.showNWISFile=function(f){$scope.existFileIndex=-1,$scope.allSFileIndex=-1,0!==f?($scope.existFileIndex=$scope.sensorNWISFiles.indexOf(f),$scope.allSFileIndex=$scope.allSFiles.indexOf(f),$scope.NWISFile=angular.copy(f),$scope.NWISFile.file_date=new Date($scope.NWISFile.file_date),$scope.NWISFile.FileType="Data",DATA_FILE.query({id:f.data_file_id}).$promise.then(function(df){$scope.NWISDF=df,$scope.nwisProcessor=allMembers.filter(function(m){return m.member_id==$scope.NWISDF.processor_id})[0],$scope.NWISDF.collect_date=new Date($scope.NWISDF.collect_date),$scope.NWISDF.good_start=getDateTimeParts($scope.NWISDF.good_start),$scope.NWISDF.good_end=getDateTimeParts($scope.NWISDF.good_end)})):($scope.NWISFile={file_date:new Date,filetype_id:2,name:"http://waterdata.usgs.gov/nwis/uv?site_no="+$scope.thisSensorSite.usgs_sid,path:"<link>",FileType:"Data",site_id:$scope.sensor.site_id,data_file_id:0,instrument_id:$scope.sensor.instrument_id,is_nwis:1},$scope.NWISDF={processor_id:$cookies.get("mID"),instrument_id:$scope.sensor.instrument_id,collect_date:dt[0],time_zone:dt[1],good_start:new Date,good_end:new Date},$scope.nwisProcessor=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0]),$scope.showNWISFileForm=!0};var postApprovalForNWISfile=function(DFid){DATA_FILE.approveNWISDF({id:DFid}).$promise.then(function(approvalResponse){$scope.NWISFile.approval_id=approvalResponse.approval_id})};$scope.createNWISFile=function(valid){var s=$scope.NWISDF.good_start,e=$scope.NWISDF.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}if(valid){if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json","UTC"!=$scope.NWISDF.time_zone){var utcStartDateTime=new Date($scope.NWISDF.good_start).toUTCString(),utcEndDateTime=new Date($scope.NWISDF.good_end).toUTCString();$scope.NWISDF.good_start=utcStartDateTime,$scope.NWISDF.good_end=utcEndDateTime,$scope.NWISDF.time_zone="UTC"}else{var si=$scope.NWISDF.good_start.toString().indexOf("GMT")+3,ei=$scope.NWISDF.good_end.toString().indexOf("GMT")+3;$scope.NWISDF.good_start=$scope.NWISDF.good_start.toString().substring(0,si),$scope.NWISDF.good_end=$scope.NWISDF.good_end.toString().substring(0,ei)}DATA_FILE.save($scope.NWISDF).$promise.then(function(NdfResonse){$scope.NWISFile.data_file_id=NdfResonse.data_file_id,postApprovalForNWISfile(NdfResonse.data_file_id),FILE.save($scope.NWISFile).$promise.then(function(Fresponse){toastr.success("File Data saved"),Fresponse.fileBelongsTo="DataFile File",$scope.sensorNWISFiles.push(Fresponse),$scope.allSFiles.push(Fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showNWISFileForm=!1})})}},$scope.saveNWISFile=function(valid){var s=$scope.NWISDF.good_start,e=$scope.NWISDF.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}if(valid){if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json","UTC"!=$scope.NWISDF.time_zone){var utcStartDateTime=new Date($scope.NWISDF.good_start).toUTCString(),utcEndDateTime=new Date($scope.NWISDF.good_end).toUTCString();$scope.NWISDF.good_start=utcStartDateTime,$scope.NWISDF.good_end=utcEndDateTime,$scope.NWISDF.time_zone="UTC"}else{var si=$scope.NWISDF.good_start.toString().indexOf("GMT")+3,ei=$scope.NWISDF.good_end.toString().indexOf("GMT")+3;$scope.NWISDF.good_start=$scope.NWISDF.good_start.toString().substring(0,si),$scope.NWISDF.good_end=$scope.NWISDF.good_end.toString().substring(0,ei)}DATA_FILE.update({id:$scope.NWISDF.data_file_id},$scope.NWISDF).$promise.then(function(){FILE.update({id:$scope.NWISFile.file_id},$scope.NWISFile).$promise.then(function(fileResponse){toastr.success("File Data Updated"),fileResponse.fileBelongsTo="DataFile File",$scope.sensorNWISFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showNWISFileForm=!1})})}},$scope.deleteNWISFile=function(){var DeleteModalInstance=$uibModal.open({backdrop:"static",keyboard:!1,templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.NWISFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.sensorNWISFiles.splice($scope.existFileIndex,1),$scope.allSFiles.splice($scope.allSFileIndex,1),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showNWISFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelNWISFile=function(){$scope.NWISFile={},$scope.NWISDF={},$scope.showNWISFileForm=!1},$rootScope.stateIsLoading.showLoading=!1}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("sensorCtrl",["$scope","$rootScope","$q","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","thisSite","Instrument_Service","thisSiteSensors","allSensorBrands","allAgencies","allVertDatums","allDeployTypes","allSensorTypes","allHousingTypes","allEvents","allFileTypes","INSTRUMENT","INSTRUMENT_STATUS","SITE","MEMBER","DEPLOYMENT_TYPE","STATUS_TYPE","INST_COLL_CONDITION",function($scope,$rootScope,$q,$cookies,$location,$state,$http,$uibModal,$filter,$timeout,thisSite,Instrument_Service,thisSiteSensors,allSensorBrands,allAgencies,allVertDatums,allDeployTypes,allSensorTypes,allHousingTypes,allEvents,allFileTypes,INSTRUMENT,INSTRUMENT_STATUS,SITE,MEMBER,DEPLOYMENT_TYPE,STATUS_TYPE,INST_COLL_CONDITION){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$scope.sensorCount={total:thisSiteSensors.length},$scope.deployTypeList=angular.copy(allDeployTypes);for(var tempDepTypeID=0,d=0;d<$scope.deployTypeList.length;d++)"Temperature"===$scope.deployTypeList[d].method&&(tempDepTypeID=$scope.deployTypeList[d].deployment_type_id,$scope.deployTypeList[d].method="Temperature (Met sensor)");$scope.deployTypeList.push({deployment_type_id:tempDepTypeID,method:"Temperature (Pressure Transducer)"}),$scope.sensDepTypes=allSensorTypes,$scope.showProposed=!1,$scope.SiteSensors=thisSiteSensors,Instrument_Service.setAllSiteSensors($scope.SiteSensors);var SensFileTypes=allFileTypes.filter(function(sft){return"Photo"===sft.filetype||"Data"===sft.filetype||"Historic Citation"===sft.filetype||"Field Sheets"===sft.filetype||"Level Notes"===sft.filetype||"Other"===sft.filetype||"Link"===sft.filetype||"Sketch"===sft.filetype});$scope.showHideProposed=function(){$scope.showProposed=!$scope.showProposed},$scope.AddProposed=function(){for(var Time_STAMP=new Date,dt=0;dt<$scope.deployTypeList.length;dt++)if($scope.deployTypeList[dt].selected===!0){var proposedToAdd={},propStatToAdd={};if("Temp"==$scope.deployTypeList[dt].method.substring(0,4))proposedToAdd={deployment_type_id:$scope.deployTypeList[dt].deployment_type_id,site_id:thisSite.site_id,sensor_type_id:"Temperature (Pressure Transducer)"==$scope.deployTypeList[dt].method?1:2};else{var sID=0;angular.forEach($scope.sensDepTypes,function(sdt){for(var x=0;x<sdt.deploymenttypes.length;x++)sdt.deploymenttypes[x].deployment_type_id==$scope.deployTypeList[dt].deployment_type_id&&(sID=sdt.sensor_type_id)}),proposedToAdd={deployment_type_id:$scope.deployTypeList[dt].deployment_type_id,site_id:thisSite.site_id,sensor_type_id:sID}}$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INSTRUMENT.save(proposedToAdd).$promise.then(function(response){var createdPropSensor={deployment_type_id:response.deployment_type_id,site_id:response.site_id,sensor_type_id:response.sensor_type_id,instrument_id:response.instrument_id,deploymentType:$scope.deployTypeList.filter(function(dtl){return dtl.deployment_type_id==response.deployment_type_id})[0].method,sensorType:$scope.sensDepTypes.filter(function(s){return s.sensor_type_id==response.sensor_type_id})[0].sensor};propStatToAdd={instrument_id:response.instrument_id,status_type_id:4,member_id:$cookies.get("mID"),time_stamp:Time_STAMP,time_zone:"UTC"},INSTRUMENT_STATUS.save(propStatToAdd).$promise.then(function(statResponse){propStatToAdd.status="Proposed",propStatToAdd.instrument_status_id=statResponse.instrument_status_id,createdPropSensor.instrument_status=[propStatToAdd],$scope.SiteSensors.push(createdPropSensor),$scope.sensorCount={total:$scope.SiteSensors.length};for(var dep=0;dep<$scope.deployTypeList.length;dep++)$scope.deployTypeList[dep].selected=!1;$timeout(function(){$scope.showProposed=!1,toastr.success("Proposed sensor created")})},function(errorResponse){toastr.error("Error saving Sensor: "+errorResponse.statusText)})},function(errorResponse){toastr.error("Error saving Sensor: "+errorResponse.statusText)})}},$scope.showRetrieveModal=function(sensorClicked){var indexClicked=$scope.SiteSensors.indexOf(sensorClicked),allindex=thisSiteSensors.indexOf(sensorClicked);$rootScope.stateIsLoading.showLoading=!0;var modalInstance=$uibModal.open({templateUrl:"SensorRetrievalModal.html",controller:"sensorRetrievalModalCtrl",size:"lg",backdrop:"static",windowClass:"rep-dialog",resolve:{thisSensor:function(){return 0!==sensorClicked?sensorClicked:"empty"},SensorSite:function(){return thisSite},allEventList:function(){return allEvents},siteOPs:function(){return SITE.getSiteOPs({id:thisSite.site_id}).$promise},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise},allStatusTypes:function(){return STATUS_TYPE.getAll().$promise},allInstCollCond:function(){return INST_COLL_CONDITION.getAll().$promise},allVDatumList:function(){return allVertDatums}}});modalInstance.result.then(function(retrievedSensor){if("retrieved"==retrievedSensor[1]&&($scope.SiteSensors[indexClicked]=retrievedSensor[0],thisSiteSensors[allindex]=retrievedSensor[0]),"deletedR"==retrievedSensor[1]){var indexClicked1=$scope.SiteSensors.indexOf(sensorClicked);$scope.SiteSensors.splice(indexClicked1,1),$scope.sensorCount.total=$scope.SiteSensors.length}$rootScope.stateIsLoading.showLoading=!1})},$scope.showProposedSensor=function(proposedSensorClicked){var propIndex=$scope.SiteSensors.indexOf(proposedSensorClicked),propModalInstance=$uibModal.open({templateUrl:"ProposedSensor.html",controller:["$scope","$uibModalInstance","proposedSensor",function($scope,$uibModalInstance,proposedSensor){$scope.thisProposedSensor=proposedSensor,$scope.cancel=function(){$uibModalInstance.dismiss()},$scope.deleteProposed=function(){$uibModalInstance.close("delete")}}],size:"sm",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{proposedSensor:function(){return proposedSensorClicked}}});propModalInstance.result.then(function(d){"delete"==d&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),INSTRUMENT["delete"]({id:proposedSensorClicked.instrument_id}).$promise.then(function(){thisSiteSensors.splice(propIndex,1),$scope.SiteSensors=thisSiteSensors,Instrument_Service.setAllSiteSensors($scope.SiteSensors),toastr.success("Proposed sensor deleted")},function(errorResponse){toastr.error("Error deleting proposed sensor. Refresh and try again. Error: "+errorResponse.statusText)}))})},$scope.showSensorModal=function(sensorClicked){var passAllLists=[allSensorTypes,allSensorBrands,allHousingTypes,allEvents,SensFileTypes,allVertDatums],indexClicked=$scope.SiteSensors.indexOf(sensorClicked);$rootScope.stateIsLoading.showLoading=!0;var modalInstance=$uibModal.open({templateUrl:0===sensorClicked||4===sensorClicked.instrument_status[0].status_type_id?"Sensormodal.html":"DepSensormodal.html",controller:"sensorModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{allDropdowns:function(){return passAllLists},allDepTypes:function(){return DEPLOYMENT_TYPE.getAll().$promise},thisSensor:function(){return 0!==sensorClicked?sensorClicked:"empty"},SensorSite:function(){return thisSite},siteOPs:function(){return SITE.getSiteOPs({id:thisSite.site_id}).$promise},agencyList:function(){return allAgencies},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise}}});modalInstance.result.then(function(createdSensor){var i=$scope.SiteSensors.indexOf(sensorClicked),si=thisSiteSensors.indexOf(sensorClicked);"proposedDeployed"==createdSensor[1]&&($scope.SiteSensors[i]=createdSensor[0],thisSiteSensors[si]=createdSensor[0],Instrument_Service.setAllSiteSensors($scope.SiteSensors)),"newDeployed"==createdSensor[1]&&($scope.SiteSensors.push(createdSensor[0]),$scope.sensorCount.total=$scope.SiteSensors.length,Instrument_Service.setAllSiteSensors($scope.SiteSensors)),void 0===createdSensor[1]&&($scope.SiteSensors[indexClicked]=createdSensor[0],$rootScope.stateIsLoading.showLoading=!1),"deleted"==createdSensor[1]&&($scope.SiteSensors.splice(i,1),$scope.sensorCount.total=$scope.SiteSensors.length,Instrument_Service.setAllSiteSensors($scope.SiteSensors)),$rootScope.stateIsLoading.showLoading=!1})},$scope.showFullSensorModal=function(sensorClicked){var deployedStuff=[allSensorTypes,allSensorBrands,allHousingTypes,SensFileTypes,allVertDatums],indexClicked=$scope.SiteSensors.indexOf(sensorClicked);$rootScope.stateIsLoading.showLoading=!0;var modalInstance=$uibModal.open({templateUrl:"fullSensormodal.html",controller:"fullSensorModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{allDepDropdowns:function(){return deployedStuff},allStatusTypes:function(){return STATUS_TYPE.getAll().$promise},allInstCollCond:function(){return INST_COLL_CONDITION.getAll().$promise},allEvents:function(){return allEvents},allDepTypes:function(){return DEPLOYMENT_TYPE.getAll().$promise},thisSensor:function(){return 0!==sensorClicked?sensorClicked:"empty"},SensorSite:function(){return thisSite},siteOPs:function(){return SITE.getSiteOPs({id:thisSite.site_id}).$promise},agencyList:function(){return allAgencies},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise}}});modalInstance.result.then(function(createdSensor){$scope.SiteSensors[indexClicked]=createdSensor[0],$rootScope.stateIsLoading.showLoading=!1})},$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1,void 0!==newValue?($scope.SiteSensors=thisSiteSensors.filter(function(h){return h.event_id==$cookies.get("SessionEventID")||4==h.instrument_status[0].status_type_id}),$scope.sensorCount={total:$scope.SiteSensors.length}):($scope.SiteSensors=thisSiteSensors,$scope.sensorCount={total:$scope.SiteSensors.length})})}}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("resourcesCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$filter","$uibModal","AGENCY","CONTACT_TYPE","DEPLOYMENT_PRIORITY","EVENT_STATUS","EVENT_TYPE","FILE_TYPE","HORIZONTAL_COLL_METHODS","HORIZONTAL_DATUM","HOUSING_TYPE","HWM_QUALITY","HWM_TYPE","INST_COLL_CONDITION","MARKER","NETWORK_NAME","OP_QUALITY","OP_TYPE","SENSOR_BRAND","DEPLOYMENT_TYPE","SENSOR_TYPE","NETWORK_TYPE","STATUS_TYPE","VERTICAL_COLL_METHOD","VERTICAL_DATUM","allStates","allAgencies","allContactTypes","allDeployPriorities","allEventStats","allEventTypes","allFileTypes","allHorCollMethods","allHorDatums","allHouseTypes","allHWMqualities","allHWMtypes","allInstCollectConditions","allMarkers","allNetworkNames","allObjPtQualities","allObjPtTypes","allSensorBrands","allDeploymentTypes","allStatusTypes","allSensorTypes","allNetworkTypes","allVerticalCollMethods","allVerticalDatums",function($scope,$rootScope,$cookies,$location,$state,$http,$filter,$uibModal,AGENCY,CONTACT_TYPE,DEPLOYMENT_PRIORITY,EVENT_STATUS,EVENT_TYPE,FILE_TYPE,HORIZONTAL_COLL_METHODS,HORIZONTAL_DATUM,HOUSING_TYPE,HWM_QUALITY,HWM_TYPE,INST_COLL_CONDITION,MARKER,NETWORK_NAME,OP_QUALITY,OP_TYPE,SENSOR_BRAND,DEPLOYMENT_TYPE,SENSOR_TYPE,NETWORK_TYPE,STATUS_TYPE,VERTICAL_COLL_METHOD,VERTICAL_DATUM,allStates,allAgencies,allContactTypes,allDeployPriorities,allEventStats,allEventTypes,allFileTypes,allHorCollMethods,allHorDatums,allHouseTypes,allHWMqualities,allHWMtypes,allInstCollectConditions,allMarkers,allNetworkNames,allObjPtQualities,allObjPtTypes,allSensorBrands,allDeploymentTypes,allStatusTypes,allSensorTypes,allNetworkTypes,allVerticalCollMethods,allVerticalDatums){
void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Settings/Resources",$scope.accountRole=$cookies.get("usersRole"),$scope.sort_by=function(newSortingOrder){$scope.sortingOrder==newSortingOrder&&($scope.reverse=!$scope.reverse),$scope.sortingOrder=newSortingOrder,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+newSortingOrder+" i").removeClass().addClass($scope.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")},$scope.lookupForm={},$scope.showAddAgForm=!1,$scope.addAgButtonShowing=!0,$scope.activeMenu="",$scope.stateList=allStates,$scope.agencyList=allAgencies,$scope.showAddAgForm=!1,$scope.addAgButtonShowing=!0,$scope.newAg={},$scope.showAddAgClicked=function(){$scope.showAddAgForm=!0,$scope.addAgButtonShowing=!1},$scope.NeverMindAg=function(){$scope.newAg={},$scope.showAddAgForm=!1,$scope.addAgButtonShowing=!0},$scope.AddAgency=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",AGENCY.save($scope.newAg,function(response){$scope.agencyList.push(response),$scope.newAg={},$scope.showAddAgForm=!1,$scope.addAgButtonShowing=!0,toastr.success("Agency Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveAgency=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",AGENCY.update({id:id},data,function(response){retur=response,toastr.success("Agency Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteAgency=function(ag){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ag},what:function(){return"Agency"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.agencyList.indexOf(ag);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),AGENCY["delete"]({id:ag.agency_id},ag,function(response){$scope.agencyList.splice(index,1),toastr.success("Agency Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.showStateAbbrev=function(a){var selected=[];return a.state&&(selected=$filter("filter")($scope.stateList,{state_abbrev:a.state})),selected.length?selected[0].state_abbrev:""},$scope.contactTypeList=allContactTypes,$scope.showAddCTForm=!1,$scope.addCTButtonShowing=!0,$scope.newCT={},$scope.showAddCTClicked=function(){$scope.showAddCTForm=!0,$scope.addCTButtonShowing=!1},$scope.NeverMindCT=function(){$scope.newCT={},$scope.showAddCTForm=!1,$scope.addCTButtonShowing=!0},$scope.AddContactType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",CONTACT_TYPE.save($scope.newCT,function(response){$scope.contactTypeList.push(response),$scope.newCT={},$scope.showAddCTForm=!1,$scope.addCTButtonShowing=!0,toastr.success("Contact Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveContactType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",CONTACT_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Contact Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteContactType=function(ct){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ct},what:function(){return"Contact Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.contactTypeList.indexOf(ct);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),CONTACT_TYPE["delete"]({id:ct.contact_type_id},ct,function(response){$scope.contactTypeList.splice(index,1),toastr.success("Contact Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.deployPriorityList=allDeployPriorities,$scope.showAddDPForm=!1,$scope.addDPButtonShowing=!0,$scope.newDP={},$scope.showAddDPClicked=function(){$scope.showAddDPForm=!0,$scope.addDPButtonShowing=!1},$scope.NeverMindDP=function(){$scope.newDP={},$scope.showAddDPForm=!1,$scope.addDPButtonShowing=!0},$scope.AddDepPriority=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",DEPLOYMENT_PRIORITY.save($scope.newDP,function(response){$scope.deployPriorityList.push(response),$scope.newDP={},$scope.showAddDPForm=!1,$scope.addDPButtonShowing=!0,toastr.success("Deployment Priority Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveDepPriority=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",DEPLOYMENT_PRIORITY.update({id:id},data,function(response){retur=response,toastr.success("Deployment Priority Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteDepPriority=function(dp){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return dp},what:function(){return"Deployment Priority"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.deployPriorityList.indexOf(dp);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),DEPLOYMENT_PRIORITY["delete"]({id:dp.priority_id},dp,function(response){$scope.deployPriorityList.splice(index,1),toastr.success("Deployment Priority Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.eventStatList=allEventStats,$scope.showAddESForm=!1,$scope.addESButtonShowing=!0,$scope.newES={},$scope.showAddESClicked=function(){$scope.showAddESForm=!0,$scope.addESButtonShowing=!1},$scope.NeverMindES=function(){$scope.newES={},$scope.showAddESForm=!1,$scope.addESButtonShowing=!0},$scope.AddEventStat=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",EVENT_STATUS.save($scope.newES,function(response){$scope.eventStatList.push(response),$scope.newES={},$scope.showAddESForm=!1,$scope.addESButtonShowing=!0,toastr.success("Event Status Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveEventStat=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",EVENT_STATUS.update({id:id},data,function(response){retur=response,toastr.success("Event Status Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteEventStat=function(es){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return es},what:function(){return"Event Status"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.eventStatList.indexOf(es);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),EVENT_STATUS["delete"]({id:es.event_status_id},es,function(response){$scope.eventStatList.splice(index,1),toastr.success("Event Status Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.eventTypeList=allEventTypes,$scope.showAddETForm=!1,$scope.addETButtonShowing=!0,$scope.newET={},$scope.showAddETClicked=function(){$scope.showAddETForm=!0,$scope.addETButtonShowing=!1},$scope.NeverMindET=function(){$scope.newET={},$scope.showAddETForm=!1,$scope.addETButtonShowing=!0},$scope.AddEventType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",EVENT_TYPE.save($scope.newET,function(response){$scope.eventTypeList.push(response),$scope.newET={},$scope.showAddETForm=!1,$scope.addETButtonShowing=!0,toastr.success("Event Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveEventType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",EVENT_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Event Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteEventType=function(et){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return et},what:function(){return"Event Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.eventTypeList.indexOf(et);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),EVENT_TYPE["delete"]({id:et.event_type_id},et,function(response){$scope.eventTypeList.splice(index,1),toastr.success("Event Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.fileTypeList=allFileTypes,$scope.showAddFTForm=!1,$scope.addFTButtonShowing=!0,$scope.newFT={},$scope.showAddFTClicked=function(){$scope.showAddFTForm=!0,$scope.addFTButtonShowing=!1},$scope.NeverMindFT=function(){$scope.newFT={},$scope.showAddFTForm=!1,$scope.addFTButtonShowing=!0},$scope.AddFileType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",FILE_TYPE.save($scope.newFT,function(response){$scope.fileTypeList.push(response),$scope.newFT={},$scope.showAddFTForm=!1,$scope.addFTButtonShowing=!0,toastr.success("File Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveFileType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",FILE_TYPE.update({id:id},data,function(response){retur=response,toastr.success("File Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteFileType=function(ft){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ft},what:function(){return"File Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.fileTypeList.indexOf(ft);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE_TYPE["delete"]({id:ft.filetype_id},ft,function(response){$scope.fileTypeList.splice(index,1),toastr.success("File Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.horColMethList=allHorCollMethods,$scope.showAddHCMForm=!1,$scope.addHCMButtonShowing=!0,$scope.newHCM={},$scope.showAddHCMClicked=function(){$scope.showAddHCMForm=!0,$scope.addHCMButtonShowing=!1},$scope.NeverMindHCM=function(){$scope.newHCM={},$scope.showAddHCMForm=!1,$scope.addHCMButtonShowing=!0},$scope.AddHorCollMethod=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HORIZONTAL_COLL_METHODS.save($scope.newHCM,function(response){$scope.horColMethList.push(response),$scope.newHCM={},$scope.showAddHCMForm=!1,$scope.addHCMButtonShowing=!0,toastr.success("Horizontal Collection Method Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveHorCollMethod=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HORIZONTAL_COLL_METHODS.update({id:id},data,function(response){retur=response,toastr.success("Horizontal Collection Method Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteHorCollMethod=function(hcm){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return hcm},what:function(){return"Horizontal Collection Method"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.horColMethList.indexOf(hcm);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HORIZONTAL_COLL_METHODS["delete"]({id:hcm.hcollect_method_id},hcm,function(response){$scope.horColMethList.splice(index,1),toastr.success("Horizontal Collection Method Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.horDatList=allHorDatums,$scope.showAddHDForm=!1,$scope.addHDButtonShowing=!0,$scope.newHD={},$scope.showAddHDClicked=function(){$scope.showAddHDForm=!0,$scope.addHDButtonShowing=!1},$scope.NeverMindHD=function(){$scope.newHD={},$scope.showAddHDForm=!1,$scope.addHDButtonShowing=!0},$scope.AddHorDatum=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HORIZONTAL_DATUM.save($scope.newHD,function(response){$scope.horDatList.push(response),$scope.newHD={},$scope.showAddHDForm=!1,$scope.addHDButtonShowing=!0,toastr.success("Horizontal Datum Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveHorDatum=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HORIZONTAL_DATUM.update({id:id},data,function(response){retur=response,toastr.success("Horizontal Datum Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteHorDatum=function(hd){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return hd},what:function(){return"Horizontal Datum"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.horDatList.indexOf(hd);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HORIZONTAL_DATUM["delete"]({id:hd.datum_id},hd,function(response){$scope.horDatList.splice(index,1),toastr.success("Horizontal Datum Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.houseTypeList=allHouseTypes,$scope.showAddHTForm=!1,$scope.addHTButtonShowing=!0,$scope.newHT={},$scope.showAddHTClicked=function(){$scope.showAddHTForm=!0,$scope.addHTButtonShowing=!1},$scope.NeverMindHT=function(){$scope.newHT={},$scope.showAddHTForm=!1,$scope.addHTButtonShowing=!0},$scope.AddHouseType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HOUSING_TYPE.save($scope.newHT,function(response){$scope.houseTypeList.push(response),$scope.newHT={},$scope.showAddHTForm=!1,$scope.addHTButtonShowing=!0,toastr.success("Housing Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveHouseType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HOUSING_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Housing Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteHouseType=function(ht){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ht},what:function(){return"Housing Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.houseTypeList.indexOf(ht);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HOUSING_TYPE["delete"]({id:ht.housing_type_id},ht,function(response){$scope.houseTypeList.splice(index,1),toastr.success("Housing Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.hwmQualList=allHWMqualities,$scope.showAddHWMQForm=!1,$scope.addHWMQButtonShowing=!0,$scope.newHWMQ={},$scope.showAddHWMQClicked=function(){$scope.showAddHWMQForm=!0,$scope.addHWMQButtonShowing=!1},$scope.NeverMindHWMQ=function(){$scope.newHWMQ={},$scope.showAddHWMQForm=!1,$scope.addHWMQButtonShowing=!0},$scope.AddHwmQuality=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM_QUALITY.save($scope.newHWMQ,function(response){$scope.hwmQualList.push(response),$scope.newHWMQ={},$scope.showAddHWMQForm=!1,$scope.addHWMQButtonShowing=!0,toastr.success("HWM Quality Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveHwmQuality=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM_QUALITY.update({id:id},data,function(response){retur=response,toastr.success("HWM Quality Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteHwmQuality=function(hwmq){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return hwmq},what:function(){return"HWM Quality"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.hwmQualList.indexOf(hwmq);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM_QUALITY["delete"]({id:hwmq.hwm_quality_id},hwmq,function(response){$scope.hwmQualList.splice(index,1),toastr.success("HWM Quality Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.hwmTypeList=allHWMtypes,$scope.showAddHWMTForm=!1,$scope.addHWMTButtonShowing=!0,$scope.newHWMT={},$scope.showAddHWMTClicked=function(){$scope.showAddHWMTForm=!0,$scope.addHWMTButtonShowing=!1},$scope.NeverMindHWMT=function(){$scope.newHWMT={},$scope.showAddHWMTForm=!1,$scope.addHWMTButtonShowing=!0},$scope.AddHwmType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM_TYPE.save($scope.newHWMT,function(response){$scope.hwmTypeList.push(response),$scope.newHWMT={},$scope.showAddHWMTForm=!1,$scope.addHWMTButtonShowing=!0,toastr.success("HWM Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveHwmType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM_TYPE.update({id:id},data,function(response){retur=response,toastr.success("HWM Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteHwmType=function(hwmt){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return hwmt},what:function(){return"HWM Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.hwmTypeList.indexOf(hwmt);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM_TYPE["delete"]({id:hwmt.hwm_type_id},hwmt,function(response){$scope.hwmTypeList.splice(index,1),toastr.success("HWM Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.instColCondList=allInstCollectConditions,$scope.showAddICCForm=!1,$scope.addICCButtonShowing=!0,$scope.newICC={},$scope.showAddICCClicked=function(){$scope.showAddICCForm=!0,$scope.addICCButtonShowing=!1},$scope.NeverMindICC=function(){$scope.newICC={},$scope.showAddICCForm=!1,$scope.addICCButtonShowing=!0},$scope.AddInstColCond=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INST_COLL_CONDITION.save($scope.newICC,function(response){$scope.instColCondList.push(response),$scope.newICC={},$scope.showAddICCForm=!1,$scope.addICCButtonShowing=!0,toastr.success("Instrument Collection Condition Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveInstColCond=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INST_COLL_CONDITION.update({id:id},data,function(response){retur=response,toastr.success("Instrument Collection Condition Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteInstColCond=function(icc){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return icc},what:function(){return"Instrument Collection Condition"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.instColCondList.indexOf(icc);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),INST_COLL_CONDITION["delete"]({id:icc.id},icc,function(response){$scope.instColCondList.splice(index,1),toastr.success("Instrument Collection Condition Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.markList=allMarkers,$scope.showAddMForm=!1,$scope.addMButtonShowing=!0,$scope.newM={},$scope.showAddMClicked=function(){$scope.showAddMForm=!0,$scope.addMButtonShowing=!1},$scope.NeverMindM=function(){$scope.newM={},$scope.showAddMForm=!1,$scope.addMButtonShowing=!0},$scope.AddMarker=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MARKER.save($scope.newM,function(response){$scope.markList.push(response),$scope.newM={},$scope.showAddMForm=!1,$scope.addMButtonShowing=!0,toastr.success("Marker Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveMarker=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MARKER.update({id:id},data,function(response){retur=response,toastr.success("Marker Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteMarker=function(m){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return m},what:function(){return"Marker"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.markList.indexOf(m);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),MARKER["delete"]({id:m.marker_id},m,function(response){$scope.markList.splice(index,1),toastr.success("Marker Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.netNameList=allNetworkNames,$scope.showAddNNForm=!1,$scope.addNNButtonShowing=!0,$scope.newNN={},$scope.showAddNNClicked=function(){$scope.showAddNNForm=!0,$scope.addNNButtonShowing=!1},$scope.NeverMindNN=function(){$scope.newNN={},$scope.showAddNNForm=!1,$scope.addNNButtonShowing=!0},$scope.AddNetworkName=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",NETWORK_NAME.save($scope.newNN,function(response){$scope.netNameList.push(response),$scope.newNN={},$scope.showAddNNForm=!1,$scope.addNNButtonShowing=!0,toastr.success("Network Name Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveNetworkName=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",NETWORK_NAME.update({id:id},data,function(response){retur=response,toastr.success("Network Name Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteNetworkName=function(nn){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return nn},what:function(){return"Network Name"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.netNameList.indexOf(nn);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),NETWORK_NAME["delete"]({id:nn.network_name_id},nn,function(response){$scope.netNameList.splice(index,1),toastr.success("Network Name Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.opQualList=allObjPtQualities,$scope.showAddOPQForm=!1,$scope.addOPQButtonShowing=!0,$scope.newOPQ={},$scope.showAddOPQClicked=function(){$scope.showAddOPQForm=!0,$scope.addOPQButtonShowing=!1},$scope.NeverMindOPQ=function(){$scope.newOPQ={},$scope.showAddOPQForm=!1,$scope.addOPQButtonShowing=!0},$scope.AddOPQuality=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",OP_QUALITY.save($scope.newOPQ,function(response){$scope.opQualList.push(response),$scope.newOPQ={},$scope.showAddOPQForm=!1,$scope.addOPQButtonShowing=!0,toastr.success("Objective Point Quality Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveOPQuality=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",OP_QUALITY.update({id:id},data,function(response){retur=response,toastr.success("Objective Point Quality Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteOPQuality=function(opq){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return opq},what:function(){return"Objective Point Quality"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.opQualList.indexOf(opq);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),OP_QUALITY["delete"]({id:opq.op_quality_id},opq,function(response){$scope.opQualList.splice(index,1),toastr.success("Objective Point Quality Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.opTypeList=allObjPtTypes,$scope.showAddOPTForm=!1,$scope.addOPTButtonShowing=!0,$scope.newOPT={},$scope.showAddOPTClicked=function(){$scope.showAddOPTForm=!0,$scope.addOPTButtonShowing=!1},$scope.NeverMindOPT=function(){$scope.newOPT={},$scope.showAddOPTForm=!1,$scope.addOPTButtonShowing=!0},$scope.AddOPType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",OP_TYPE.save($scope.newOPT,function(response){$scope.opTypeList.push(response),$scope.newOPT={},$scope.showAddOPTForm=!1,$scope.addOPTButtonShowing=!0,toastr.success("Objective Point Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveOPType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",OP_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Objective Point Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteOPType=function(opt){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return opt},what:function(){return"Objective Point Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.opTypeList.indexOf(opt);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),OP_TYPE["delete"]({id:opt.objective_point_type_id},opt,function(response){$scope.opTypeList.splice(index,1),toastr.success("Objective Point Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.sensBrandList=allSensorBrands,$scope.showAddSBForm=!1,$scope.addSBButtonShowing=!0,$scope.newSB={},$scope.showAddSBClicked=function(){$scope.showAddSBForm=!0,$scope.addSBButtonShowing=!1},$scope.NeverMindSB=function(){$scope.newSB={},$scope.showAddSBForm=!1,$scope.addSBButtonShowing=!0},$scope.AddSensorBrand=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",SENSOR_BRAND.save($scope.newSB,function(response){$scope.sensBrandList.push(response),$scope.newSB={},$scope.showAddSBForm=!1,$scope.addSBButtonShowing=!0,toastr.success("Sensor Brand Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveSensorBrand=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",SENSOR_BRAND.update({id:id},data,function(response){retur=response,toastr.success("Sensor Brand Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteSensorBrand=function(sb){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return sb},what:function(){return"Sensor Brand"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.sensBrandList.indexOf(sb);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),SENSOR_BRAND["delete"]({id:sb.sensor_brand_id},sb,function(response){$scope.sensBrandList.splice(index,1),toastr.success("Sensor Brand Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.depTypeList=allDeploymentTypes,$scope.showAddDTForm=!1,$scope.addDTButtonShowing=!0,$scope.newDT={},$scope.showAddDTClicked=function(){$scope.showAddDTForm=!0,$scope.addDTButtonShowing=!1},$scope.NeverMindDT=function(){$scope.newDT={},$scope.showAddDTForm=!1,$scope.addDTButtonShowing=!0},$scope.AddDepType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",DEPLOYMENT_TYPE.save($scope.newDT,function(response){$scope.depTypeList.push(response),$scope.newDT={},$scope.showAddDTForm=!1,$scope.addDTButtonShowing=!0,toastr.success("Deployment Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveDepType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",
DEPLOYMENT_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Deployment Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteDepType=function(dt){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return dt},what:function(){return"Deployment Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.depTypeList.indexOf(dt);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),DEPLOYMENT_TYPE["delete"]({id:dt.deployment_type_id},dt,function(response){$scope.depTypeList.splice(index,1),toastr.success("Deployment Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.statTypeList=allStatusTypes,$scope.showAddStatTForm=!1,$scope.addStatTButtonShowing=!0,$scope.newStatT={},$scope.showAddStatTClicked=function(){$scope.showAddStatTForm=!0,$scope.addStatTButtonShowing=!1},$scope.NeverMindStatT=function(){$scope.newStatT={},$scope.showAddStatTForm=!1,$scope.addStatTButtonShowing=!0},$scope.AddStatusType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",STATUS_TYPE.save($scope.newStatT,function(response){$scope.statTypeList.push(response),$scope.newStatTT={},$scope.showAddStatTForm=!1,$scope.addStatTButtonShowing=!0,toastr.success("Status Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveStatusType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",STATUS_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Status Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteStatusType=function(statT){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return statT},what:function(){return"Status Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.statTypeList.indexOf(statT);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),STATUS_TYPE["delete"]({id:statT.status_type_id},statT,function(response){$scope.statTypeList.splice(index,1),toastr.success("Status Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.sensTypeList=allSensorTypes,$scope.newDepTypeRelating=[],$scope.commaSepDepMETHODS=[],$scope.formattedSensTypeList=[],$scope.sensTypeList.forEach(function(sensType){SENSOR_TYPE.getSensorDeploymentTypes({id:sensType.sensor_type_id},function(response){var deps=response;sensType.DepTypes=[];var DepMStrings=[];sensType.DepMETHODStrings="",deps.length>0&&deps.forEach(function(d){sensType.DepTypes.push(d.deployment_type_id),DepMStrings.push(d.method),sensType.DepMETHODStrings=DepMStrings.join(", ")}),$scope.formattedSensTypeList.push(sensType)}).$promise}),$scope.showDepTypes=function(SenT){var selected=[];return angular.forEach($scope.depTypeList,function(s){SenT.DepTypes.indexOf(s.deployment_type_id)>=0&&selected.push(s.method)}),selected.length?selected.join(", "):""},$scope.removeTheseDepTypes=[],$scope.checkListCheck=function(originalChecked,nowChecked){nowChecked.length<originalChecked.length&&angular.forEach(originalChecked,function(oc){if(nowChecked.indexOf(oc)<0){var deleteDep=$scope.depTypeList.filter(function(dt){return dt.deployment_type_id==oc})[0];if($scope.removeTheseDepTypes.length>0)for(var d=0;d<$scope.removeTheseDepTypes.length;d++)$scope.removeTheseDepTypes[d].deployment_type_id==deleteDep.deployment_type_id?d=$scope.newDepTypeRelating.length:$scope.removeTheseDepTypes.push(deleteDep);else $scope.removeTheseDepTypes.push(deleteDep)}})},$scope.showAddSenTForm=!1,$scope.addSenTButtonShowing=!0,$scope.newSenT={},$scope.showAddSenTClicked=function(){$scope.showAddSenTForm=!0,$scope.addSenTButtonShowing=!1},$scope.NeverMindSenT=function(){$scope.newSenT={},$scope.newDepTypeRelating=[],angular.forEach($scope.depTypeList,function(d){d.selected=!1}),$scope.showAddSenTForm=!1,$scope.addSenTButtonShowing=!0},$scope.addDepTypeToNewSenT=function(dt){if(dt.selected===!0){if($scope.newDepTypeRelating.length>0)for(var d=0;d<$scope.newDepTypeRelating.length;d++)$scope.newDepTypeRelating[d].deployment_type_id==dt.deployment_type_id?d=$scope.newDepTypeRelating.length:($scope.newDepTypeRelating.push(dt),d=$scope.newDepTypeRelating.length);0===$scope.newDepTypeRelating.length&&$scope.newDepTypeRelating.push(dt)}},$scope.AddSensorType=function(valid){if(valid){var newSensor={},relatedDeps=[];$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",SENSOR_TYPE.save($scope.newSenT,function(response){newSensor=response,$scope.newSenT={},$scope.showAddSenTForm=!1,$scope.addSenTButtonShowing=!0,$scope.newDepTypeRelating.length>0&&angular.forEach($scope.newDepTypeRelating,function(ndt){delete ndt.selected,relatedDeps.push(ndt.deployment_type_id),SENSOR_TYPE.addSensorDeploymentType({sensorTypeId:newSensor.sensor_type_id,deploymentTypeId:ndt.deployment_type_id},function(response1){},function(errorResponse){errorResponse.statusText})}),newSensor.DepTypes=relatedDeps,$scope.formattedSensTypeList.push(newSensor),toastr.success("Sensor Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})}},$scope.saveSensorType=function(data,id){var retur=!1;$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var DTs=({sensor_type_id:data.sensor_type_id,sensor:data.sensor},[]);return angular.forEach($scope.depTypeList,function(s){if(data.DepTypes.indexOf(s.deployment_type_id)>=0){var thisDT={deployment_type_id:s.deployment_type_id,method:s.method};DTs.push(thisDT)}}),SENSOR_TYPE.update({id:id},data,function(response){retur=response,angular.forEach(DTs,function(dt){SENSOR_TYPE.addSensorDeploymentType({sensorTypeId:id,deploymentTypeId:ndt.deployment_type_id},dt,function(response1){toastr.success("Deployment Type is now related")},function(errorResponse1){errorResponse1.statusText})}),toastr.success("Sensor Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}).$promise.then(angular.forEach($scope.removeTheseDepTypes,function(rdt){SENSOR_TYPE.removeSensorDeploymentType({sensorTypeId:id,DeploymentTypeId:rdt.deployment_type_id},function(response2){toastr.success("Deployment Type is no longer related")},function(errorResponse){errorResponse.statusText})})),retur},$scope.deleteSensorType=function(senT){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return senT},what:function(){return"Sensor Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.formattedSensTypeList.indexOf(senT),ST={sensor_type_id:senT.sensor_type_id,sensor:senT.sensor};$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),angular.forEach($scope.depTypeList,function(s){if(senT.DepTypes.indexOf(s.deployment_type_id)>=0){var thisDT={deployment_type_id:s.deployment_type_id,method:s.method};SENSOR_TYPE.removeSensorDeploymentType({sensorTypeId:ST.sensor_type_id,DeploymentTypeId:thisDT.deployment_type_id},function(response2){})}}),SENSOR_TYPE["delete"]({id:ST.sensor_type_id},ST,function(response){$scope.formattedSensTypeList.splice(index,1),toastr.success("Sensor Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.netTypeList=allNetworkTypes,$scope.showAddNTForm=!1,$scope.addNTButtonShowing=!0,$scope.newNT={},$scope.showAddNTClicked=function(){$scope.showAddNTForm=!0,$scope.addNTButtonShowing=!1},$scope.NeverMindNT=function(){$scope.newNT={},$scope.showAddNTForm=!1,$scope.addNTButtonShowing=!0},$scope.AddNetType=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",NETWORK_TYPE.save($scope.newNT,function(response){$scope.netTypeList.push(response),$scope.newNT={},$scope.showAddNTForm=!1,$scope.addNTButtonShowing=!0,toastr.success("Network Type Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveNetType=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",NETWORK_TYPE.update({id:id},data,function(response){retur=response,toastr.success("Network Type Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteNetType=function(nt){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return nt},what:function(){return"Network Type"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.netTypeList.indexOf(nt);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),NETWORK_TYPE["delete"]({id:nt.network_type_id},nt,function(response){$scope.netTypeList.splice(index,1),toastr.success("Network Type Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.vertColMethList=allVerticalCollMethods,$scope.showAddVCMForm=!1,$scope.addVCMButtonShowing=!0,$scope.newVCM={},$scope.showAddVCMClicked=function(){$scope.showAddVCMForm=!0,$scope.addVCMButtonShowing=!1},$scope.NeverMindVCM=function(){$scope.newVCM={},$scope.showAddVCMForm=!1,$scope.addVCMButtonShowing=!0},$scope.AddVertColMeth=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",VERTICAL_COLL_METHOD.save($scope.newVCM,function(response){$scope.vertColMethList.push(response),$scope.newVCM={},$scope.showAddVCMForm=!1,$scope.addVCMButtonShowing=!0,toastr.success("Vertical Collection Method Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveVertColMeth=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",VERTICAL_COLL_METHOD.update({id:id},data,function(response){retur=response,toastr.success("Vertical Collection Method Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteVertColMeth=function(vcm){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return vcm},what:function(){return"Vertical Collection Method"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.vertColMethList.indexOf(vcm);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),VERTICAL_COLL_METHOD["delete"]({id:vcm.vcollect_method_id},vcm,function(response){$scope.vertColMethList.splice(index,1),toastr.success("Vertical Collection Method Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.vertDatList=allVerticalDatums,$scope.showAddVDForm=!1,$scope.addVDButtonShowing=!0,$scope.newVD={},$scope.showAddVDClicked=function(){$scope.showAddVDForm=!0,$scope.addVDButtonShowing=!1},$scope.NeverMindVD=function(){$scope.newVD={},$scope.showAddVDForm=!1,$scope.addVDButtonShowing=!0},$scope.AddVertDatum=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",VERTICAL_DATUM.save($scope.newVD,function(response){$scope.vertDatList.push(response),$scope.newVD={},$scope.showAddVDForm=!1,$scope.addVDButtonShowing=!0,toastr.success("Vertical Datum Added")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}))},$scope.saveVertDatum=function(data,id){var retur=!1;return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",VERTICAL_DATUM.update({id:id},data,function(response){retur=response,toastr.success("Vertical Datum Updated")},function(errorResponse){retur=!1,toastr.error("Error: "+errorResponse.statusText)}),retur},$scope.deleteVertDatum=function(vd){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return vd},what:function(){return"Vertical Datum"}}});modalInstance.result.then(function(keyToRemove){var index=$scope.vertDatList.indexOf(vd);$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),VERTICAL_DATUM["delete"]({id:vd.datum_id},vd,function(response){$scope.vertDatList.splice(index,1),toastr.success("Vertical Datum Removed")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})})}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("submitReportCtrl",["$scope","$http","$cookies","$uibModal","$state","CONTACT","REPORT",function($scope,$http,$cookies,$uibModal,$state,CONTACT,REPORT){if($scope.$parent.needToComplete!==!0)$scope.$parent.newReport={report_date:new Date};else{var yr=$scope.newReport.report_date.substr(0,4),mo=$scope.newReport.report_date.substr(5,2),day=$scope.newReport.report_date.substr(8,2);$scope.newReport.report_date=new Date(mo+"/"+day+"/"+yr)}$scope.DeployStaff={},$scope.GenStaff={},$scope.InlandStaff={},$scope.CoastStaff={},$scope.WaterStaff={},$scope.status={openContacts:!1,openCounts:!1,openPersonnel:!1};$scope.$parent.needToComplete=!1,void 0===$scope.newReport.reporting_metrics_id&&($scope.disabled=!0),$scope.getEventName=function(evID){var name,thisEvent=$scope.events.filter(function(e){return e.event_id==evID})[0];return name=thisEvent.event_name};var getReportContacts=function(reportID){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",CONTACT.getContactModel({ReportMetric:reportID},function(response){$scope.DeployStaff=response.filter(function(d){return"Deployed Staff"==d.contactType})[0],$scope.GenStaff=response.filter(function(d){return"General"==d.contactType})[0],$scope.InlandStaff=response.filter(function(d){return"Inland Flood"==d.contactType})[0],$scope.CoastStaff=response.filter(function(d){return"Coastal Flood"==d.contactType})[0],$scope.WaterStaff=response.filter(function(d){return"Water Quality"==d.contactType})[0]}).$promise,$scope.disabled=!1},postReportContacts=function(reportID){angular.equals({},$scope.DeployStaff)||void 0===$scope.DeployStaff||REPORT.addReportContact({reportId:reportID,contactTypeId:1},$scope.DeployStaff,function(response1){toastr.success("Deploy Staff Updated")},function(errorResponse1){alert("Error: "+errorResponse1.statusText)}).$promise,angular.equals({},$scope.GenStaff)||void 0===$scope.GenStaff||REPORT.addReportContact({reportId:reportID,contactTypeId:2},$scope.GenStaff,function(response2){toastr.success("General Staff Updated")},function(errorResponse2){alert("Error: "+errorResponse2.statusText)}).$promise,angular.equals({},$scope.InlandStaff)||void 0===$scope.InlandStaff||REPORT.addReportContact({reportId:reportID,contactTypeId:3},$scope.InlandStaff,function(response3){toastr.success("Inland Staff Updated")},function(errorResponse3){alert("Error: "+errorResponse3.statusText)}).$promise,angular.equals({},$scope.CoastStaff)||void 0===$scope.CoastStaff||REPORT.addReportContact({reportId:reportID,contactTypeId:4},$scope.CoastStaff,function(response4){toastr.success("Coastal Staff Updated")},function(errorResponse4){alert("Error: "+errorResponse4.statusText)}).$promise,angular.equals({},$scope.WaterStaff)||void 0===$scope.WaterStaff||REPORT.addReportContact({reportId:reportID,contactTypeId:5},$scope.WaterStaff,function(response5){toastr.success("Water Staff Updated")},function(errorResponse5){alert("Error: "+errorResponse5.statusText)}).$promise},removeIncomplete=function(){for(var index=0,i=0;i<$scope.memberIncompletes.length;i++)$scope.memberIncompletes[i].reporting_metrics_id==$scope.newReport.reporting_metrics_id&&(index=i,i=$scope.memberIncompletes.length);$scope.memberIncompletes.splice(index,1)},PostPutReportAndReportContacts=function(){$scope.newReport.report_date=$scope.newReport.report_date.toDateString(),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.newReport.reporting_metrics_id?REPORT.update({id:$scope.newReport.reporting_metrics_id},$scope.newReport,function(response){toastr.success("Report Updated"),$scope.newReport.event_name=$scope.getEventName($scope.newReport.event_id),1==$scope.newReport.complete&&(removeIncomplete(),$scope.isCompleted=!0),postReportContacts($scope.newReport.reporting_metrics_id)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$scope.fullReportForm.submit.$setPristine(),$scope.fullReportForm.submit.event_id.$viewValue=void 0,$state.go("reporting.reportDash")}):REPORT.save($scope.newReport,function(response){toastr.success("Report Created"),$scope.reports.push(response),1==$scope.newReport.complete?(removeIncomplete(),$scope.isCompleted=!0,$scope.newReport.event_name=$scope.getEventName($scope.newReport.event_id)):$scope.memberIncompletes.push(response),$scope.newReport.reporting_metrics_id=response.reporting_metrics_id,postReportContacts($scope.newReport.reporting_metrics_id)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$scope.fullReportForm.submit.$setPristine(),$scope.fullReportForm.submit.event_id.$viewValue=void 0,$state.go("reporting.reportDash")})};$scope.populateYestTots=function(){if(void 0!==$scope.newReport.report_date&&void 0!==$scope.newReport.state&&void 0!==$scope.newReport.event_id){var formatDate=new Date($scope.newReport.report_date);formatDate.setHours(0,0,0,0),formatDate=formatDate.toISOString().substr(0,10);var myDate=formatDate,theState=$scope.newReport.state,eID=$scope.newReport.event_id;$scope.disabled=!1,$scope.newReport={report_date:$scope.newReport.report_date,state:theState,event_id:eID},$scope.DeployStaff={},$scope.GenStaff={},$scope.InlandStaff={},$scope.CoastStaff={},$scope.WaterStaff={};var previousDay=new Date(myDate);previousDay.setHours(0,0,0,0),previousDay=previousDay.toISOString().substr(0,10);var yesterdayRpt=$scope.reports.filter(function(r){var repDate=r.report_date.toString().substring(0,10);return r.event_id==$scope.newReport.event_id&&r.state==$scope.newReport.state&&repDate==previousDay})[0];$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==yesterdayRpt?($scope.newReport.yest_fieldpers=yesterdayRpt.tod_fieldpers,$scope.newReport.yest_officepers=yesterdayRpt.tod_officepers,getReportContacts(yesterdayRpt.reporting_metrics_id)):($scope.newReport.yest_fieldpers=0,$scope.newReport.yest_officepers=0),REPORT.getDailyReportTots({Date:myDate,Event:$scope.newReport.event_id,State:$scope.newReport.state},function(response6){$scope.newReport.dep_rapdepl_gage=response6.dep_rapdepl_gage,$scope.newReport.rec_rapdepl_gage=response6.rec_rapdepl_gage,$scope.newReport.lost_rapdepl_gage=response6.lost_rapdepl_gage,$scope.newReport.dep_wtrlev_sensor=response6.dep_wtrlev_sensor,$scope.newReport.rec_wtrlev_sensor=response6.rec_wtrlev_sensor,$scope.newReport.lost_wtrlev_sensor=response6.lost_wtrlev_sensor,$scope.newReport.dep_wv_sens=response6.dep_wv_sens,$scope.newReport.rec_wv_sens=response6.rec_wv_sens,$scope.newReport.lost_wv_sens=response6.lost_wv_sens,$scope.newReport.dep_barometric=response6.dep_barometric,$scope.newReport.rec_barometric=response6.rec_barometric,$scope.newReport.lost_barometric=response6.lost_barometric,$scope.newReport.dep_meteorological=response6.dep_meteorological,$scope.newReport.rec_meteorological=response6.rec_meteorological,$scope.newReport.lost_meteorological=response6.lost_meteorological,$scope.newReport.hwm_flagged=response6.hwm_flagged,$scope.newReport.hwm_collected=response6.hwm_collected},function(errorResponse6){alert("Error: "+errorResponse6.statusText)})}else alert("Please choose a date, event and state first.")},$scope.saveReport=function(valid){if(void 0===$scope.newReport.complete||0===$scope.newReport.complete){var modalInstance=$uibModal.open({templateUrl:"saveReportModal.html",controller:"confirmReportModalCtrl",size:"sm"});modalInstance.result.then(function(){$scope.newReport.complete=0,$scope.newReport.member_id=$scope.MemberLoggedIn.member_id,PostPutReportAndReportContacts()})}else valid?($scope.newReport.member_id=$scope.MemberLoggedIn.member_id,PostPutReportAndReportContacts()):($scope.status.openContacts=!0,$scope.status.openCounts=!0,$scope.status.openPersonnel=!0,angular.element("[name='"+$scope.fullReportForm.submit.$name+"']").find(".ng-invalid:visible:first").focus())},$scope.populateDeployer=function(){$scope.DeployStaff=$scope.MemberLoggedIn},$scope.getIncompleteReport=function(){var reportId=this.ir.reporting_metrics_id;REPORT.query({id:reportId},function(response){$scope.newReport=response;var yr=response.report_date.substr(0,4),mo=response.report_date.substr(5,2),day=response.report_date.substr(8,2);$scope.newReport.report_date=new Date(mo+"/"+day+"/"+yr),$scope.fullReportForm.submit.$setDirty(),getReportContacts(reportId)}).$promise},void 0!==$scope.newReport.reporting_metrics_id&&getReportContacts($scope.newReport.reporting_metrics_id)}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("reportModalCtrl",["$scope","$uibModalInstance","report","submitPerson","contacts",function($scope,$uibModalInstance,report,submitPerson,contacts){$scope.ReportView={},$scope.ReportView.Report=report,$scope.ReportView.submitter=submitPerson,$scope.ReportView.deployStaff=contacts.filter(function(d){return"Deployed Staff"==d.contactType})[0],$scope.ReportView.generalStaff=contacts.filter(function(d){return"General"==d.contactType})[0],$scope.ReportView.inlandStaff=contacts.filter(function(d){return"Inland Flood"==d.contactType})[0],$scope.ReportView.coastStaff=contacts.filter(function(d){return"Coastal Flood"==d.contactType})[0],$scope.ReportView.waterStaff=contacts.filter(function(d){return"Water Quality"==d.contactType})[0],$scope.print=function(){window.print()},$scope.ok=function(){$uibModalInstance.dismiss("cancel")}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("reportingDashCtrl",["$scope","$cookies","$filter","$uibModal","$state","$http","CONTACT","MEMBER","allReportsAgain",function($scope,$cookies,$filter,$uibModal,$state,$http,CONTACT,MEMBER,allReportsAgain){$scope.reportsToDate=allReportsAgain,$scope.todayRpts=[],$scope.yesterdayRpts=[],$scope.pickDateRpts=[],$scope.pickAdateReports=!1,$scope.today=new Date,$scope.today.setHours(0,0,0,0),$scope.yesterday=new Date($scope.today),$scope.yesterday.setDate($scope.today.getDate()-1),$scope.today=$scope.today.toISOString().substr(0,10),$scope.yesterday=$scope.yesterday.toISOString().substr(0,10),$scope.THIS_DATE={},$scope.ViewReport=function(r){var modalInstance=$uibModal.open({templateUrl:"ViewReport.html",controller:"reportModalCtrl",size:"lg",windowClass:"rep-dialog",resolve:{report:function(){return r},submitPerson:function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var member={};return MEMBER.query({id:r.member_id},function(response){member.mem=response;var memberAgency=$scope.agencies.filter(function(a){return a.agency_id==member.mem.agency_id})[0];member.agency_name=memberAgency.agency_name,member.agency_address=memberAgency.address+", "+memberAgency.city+" "+memberAgency.state+" "+memberAgency.zip}).$promise,member},contacts:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",CONTACT.getContactModel({ReportMetric:r.reporting_metrics_id}).$promise}}});modalInstance.result.then(function(r){})};var formatReport=function(repList){for(var returnList=[],i=0;i<repList.length;i++){var rep=repList[i],event=$scope.events.filter(function(e){return e.event_id==rep.event_id})[0];rep.event_name=event.event_name,returnList.push(rep)}return returnList},todayReports=$scope.reportsToDate.filter(function(todayrep){var reportDate=todayrep.report_date.toString().substring(0,10);return reportDate==$scope.today});$scope.todayRpts=formatReport(todayReports);var yesterdayReports=$scope.reportsToDate.filter(function(yestrep){var reportDate=yestrep.report_date.toString().substring(0,10);return reportDate==$scope.yesterday});$scope.yesterdayRpts=formatReport(yesterdayReports),$scope.getReportsByDate=function(){if(void 0!==$scope.THIS_DATE.date){var formatDate=new Date($scope.THIS_DATE.date);formatDate.setHours(0,0,0,0),formatDate=formatDate.toISOString().substr(0,10);var thisDateReports=$scope.reportsToDate.filter(function(tdate){var reportDate=tdate.report_date.toString().substring(0,10);return reportDate==formatDate});$scope.pickDateRpts=formatReport(thisDateReports),$scope.pickAdateReports=!0}else alert("Pick a date first.")},$scope.CompleteThisReport=function(rep){$scope.$parent.newReport=rep,$scope.$parent.disabled=!1,$scope.$parent.needToComplete=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",CONTACT.getContactModel({ReportMetric:rep.reporting_metrics_id},function(response){response.length>=1?($scope.$parent.DeployStaff=response.filter(function(d){return"Deployed Staff"==d.contactType})[0],$scope.$parent.GenStaff=response.filter(function(d){return"General"==d.contactType})[0],$scope.$parent.InlandStaff=response.filter(function(d){return"Inland Flood"==d.contactType})[0],$scope.$parent.CoastStaff=response.filter(function(d){return"Coastal Flood"==d.contactType})[0],$scope.$parent.WaterStaff=response.filter(function(d){return"Water Quality"==d.contactType})[0]):($scope.$parent.DeployStaff={},$scope.$parent.GenStaff={},$scope.$parent.InlandStaff={},$scope.$parent.CoastStaff={},$scope.$parent.WaterStaff={})}).$promise.then(function(){$state.go("reporting.submitReport")})},$scope.getProjectAlertText=function(rep){$scope.ProjectAlertParts={},$scope.ProjectAlertParts.Report=rep,$scope.ProjectAlertParts.totYestFieldPers=rep.yest_fieldpers,$scope.ProjectAlertParts.totYestOfficPers=rep.yest_officepers,$scope.ProjectAlertParts.measureCts=rep.tot_discharge_meas;var eventReports=$scope.reportsToDate.filter(function(r){return r.event_id==rep.event_id}),test=$filter("countBy")(eventReports,"state");$scope.ProjectAlertParts.stateCount=0,angular.forEach(test,function(er){$scope.ProjectAlertParts.stateCount++}),$scope.ProjectAlertParts.Event=$scope.events.filter(function(e){return e.event_id==rep.event_id})[0];var modalInstance=$uibModal.open({templateUrl:1==$scope.ProjectAlertParts.Event.event_type_id?"FloodPA.html":"HurricanePA.html",controller:"ProjAlertModalCtrl",size:"md",windowClass:"rep-dialog",resolve:{ProjAlert:function(){return $scope.ProjectAlertParts}}});modalInstance.result.then(function(r){})}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("reportingCtrl",["$scope","$rootScope","$cookies","$location","$http","$uibModal","memberReports","allEvents","allStates","allReports","allEventTypes","allEventStatus","allAgencies","SERVER_URL","REPORT","MEMBER",function($scope,$rootScope,$cookies,$location,$http,$uibModal,memberReports,allEvents,allStates,allReports,allEventTypes,allEventStatus,allAgencies,SERVER_URL,REPORT,MEMBER){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Reporting",$rootScope.activeMenu="report",$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){var formIsPopulated=!1;switch(fromState.url){case"/SubmitReport":void 0!==$scope.fullReportForm.submit&&(formIsPopulated=$scope.fullReportForm.submit.$dirty,formIsPopulated=void 0!==$scope.fullReportForm.submit.event_id.$viewValue?!0:formIsPopulated)}formIsPopulated&&(console.log("toState.name: "+toState.name),console.log("fromState.name: "+fromState.name),confirm("Are you sure you want to leave the Submit Report Tab? Any unsaved information will be lost.")?console.log("go to: "+toState.name):(console.log("stay at state: "+fromState.name),$rootScope.stateIsLoading.showLoading=!1,event.preventDefault()))}),$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.formatDate=function(d){var currentDt=new Date(d),mm=currentDt.getMonth()+1;mm=10>mm?"0"+mm:mm;var dd=currentDt.getDate(),yyyy=currentDt.getFullYear(),date=mm+"/"+dd+"/"+yyyy;return date},$scope.serverURL=SERVER_URL,$scope.fullReportForm={},$scope.newReport={},$scope.DeployStaff={},$scope.GenStaff={},$scope.InlandStaff={},$scope.CoastStaff={},$scope.WaterStaff={},$scope.disabled=!0,$scope.needToComplete=!1,$scope.memberIncompletes=memberReports.filter(function(ir){return 0===ir.complete}),$scope.events=allEvents,$scope.states=allStates,$scope.reports=allReports,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.query({id:$cookies.get("mID")},function(response){$scope.MemberLoggedIn=response;var memberAgency=allAgencies.filter(function(a){return a.agency_id==$scope.MemberLoggedIn.agency_id})[0];$scope.MemberLoggedIn.agency_name=memberAgency.agency_name,$scope.MemberLoggedIn.agency_address=memberAgency.address+", "+memberAgency.city+" "+memberAgency.state+" "+memberAgency.zip}).$promise,MEMBER.getAll().$promise.then(function(response){$scope.members=response}),$scope.agencies=allAgencies,$scope.eventTypes=allEventTypes,$scope.eventStats=allEventStatus,$scope.Statemodel={},$scope.genSummary={},$scope.filteredReports=[],$scope.genRepChange=function(){$scope.EventName=$scope.events.filter(function(e){return e.event_id==$scope.genSummary.event_id})[0];var names=[],abbrevs=[];angular.forEach($scope.Statemodel.value,function(state){names.push(state.state_name),abbrevs.push(state.state_abbrev)}),$scope.StateNames=names.join(","),$scope.StateAbbrevs=abbrevs.join(",")},$scope.MetricDisplayModel=[],$scope.displayMetricSum=function(valid){if(valid){$scope.MetricDisplayModel=[],$scope.GenRepEventModel={},$scope.totalRow={},$scope.totalRow.notAcctForEmps=0,$scope.totalRow.cumPField=0,$scope.totalRow.yesPField=0,$scope.totalRow.todPField=0,$scope.totalRow.tomPField=0,$scope.totalRow.cumPOffice=0,$scope.totalRow.yesPOffice=0,$scope.totalRow.todPOffice=0,$scope.totalRow.tomPOffice=0,$scope.totalRow.truck=0,$scope.totalRow.boat=0,$scope.totalRow.other=0,$scope.totalRow.gageVisits=0,$scope.totalRow.gagesDown=0,$scope.totalRow.disCtoDate=0,$scope.totalRow.disCPlanned=0,$scope.totalRow.CheckMeasToDate=0,$scope.totalRow.CheckMeasPlanned=0,$scope.totalRow.indMeas=0,$scope.totalRow.ratExt=0,$scope.totalRow.peaksOfRec=0,$scope.totalRow.QWGageVis=0,$scope.totalRow.contQWGageVis=0,$scope.totalRow.contQWGageDown=0,$scope.totalRow.disQWSamples=0,$scope.totalRow.sedSamples=0,$scope.totalRow.rdgPlan=0,$scope.totalRow.rdgDep=0,$scope.totalRow.rdgRec=0,
$scope.totalRow.rdgLost=0,$scope.totalRow.waterPlan=0,$scope.totalRow.waterDep=0,$scope.totalRow.waterRec=0,$scope.totalRow.waterLost=0,$scope.totalRow.wavePlan=0,$scope.totalRow.waveDep=0,$scope.totalRow.waveRec=0,$scope.totalRow.waveLost=0,$scope.totalRow.baroPlan=0,$scope.totalRow.baroDep=0,$scope.totalRow.baroRec=0,$scope.totalRow.baroLost=0,$scope.totalRow.metPlan=0,$scope.totalRow.metDep=0,$scope.totalRow.metRec=0,$scope.totalRow.metLost=0,$scope.totalRow.hwmFlag=0,$scope.totalRow.hwmCol=0;var abbrevs=[];angular.forEach($scope.Statemodel.value,function(state){abbrevs.push(state.state_abbrev)});var abbrevString=abbrevs.join(","),thisDate=$scope.formatDate($scope.genSummary.sum_date);REPORT.getFilteredReports({Event:$scope.EventName.event_id,States:abbrevString,Date:thisDate}).$promise.then(function(result){for(var x=0;x<result.length;x++){var thisRPModel={};thisRPModel.report=result[x],$scope.totalRow.notAcctForEmps+=thisRPModel.report.sw_fieldpers_notacct+thisRPModel.report.wq_fieldpers_notacct,$scope.totalRow.cumPField+=thisRPModel.report.yest_fieldpers+thisRPModel.report.tod_fieldpers+thisRPModel.report.tmw_fieldpers,$scope.totalRow.yesPField+=thisRPModel.report.yest_fieldpers,$scope.totalRow.todPField+=thisRPModel.report.tod_fieldpers,$scope.totalRow.tomPField+=thisRPModel.report.tmw_fieldpers,$scope.totalRow.cumPOffice+=thisRPModel.report.yest_officepers+thisRPModel.report.tod_officepers+thisRPModel.report.tmw_officepers,$scope.totalRow.yesPOffice+=thisRPModel.report.yest_officepers,$scope.totalRow.todPOffice+=thisRPModel.report.tod_officepers,$scope.totalRow.tomPOffice+=thisRPModel.report.tmw_officepers,$scope.totalRow.gageVisits+=thisRPModel.report.gage_visit,$scope.totalRow.gagesDown+=thisRPModel.report.gage_down,$scope.totalRow.disCtoDate+=thisRPModel.report.tot_discharge_meas,$scope.totalRow.disCPlanned+=thisRPModel.report.plan_discharge_meas,$scope.totalRow.indMeas+=thisRPModel.report.plan_indirect_meas,$scope.totalRow.ratExt+=thisRPModel.report.rating_extens,$scope.totalRow.peaksOfRec+=thisRPModel.report.gage_peak_record,$scope.totalRow.disQWSamples+=thisRPModel.report.qw_discr_samples,$scope.totalRow.sedSamples+=thisRPModel.report.coll_sedsamples,$scope.totalRow.rdgPlan+=thisRPModel.report.plan_rapdepl_gage,$scope.totalRow.rdgDep+=thisRPModel.report.dep_rapdepl_gage,$scope.totalRow.rdgRec+=thisRPModel.report.rec_rapdepl_gage,$scope.totalRow.rdgLost+=thisRPModel.report.lost_rapdepl_gage,$scope.totalRow.waterPlan+=thisRPModel.report.plan_wtrlev_sensor,$scope.totalRow.waterDep+=thisRPModel.report.dep_wtrlev_sensor,$scope.totalRow.waterRec+=thisRPModel.report.rec_wtrlev_sensor,$scope.totalRow.waterLost+=thisRPModel.report.lost_wtrlev_sensor,$scope.totalRow.wavePlan+=thisRPModel.report.plan_wv_sens,$scope.totalRow.waveDep+=thisRPModel.report.dep_wv_sens,$scope.totalRow.waveRec+=thisRPModel.report.rec_wv_sens,$scope.totalRow.waveLost+=thisRPModel.report.lost_wv_sens,$scope.totalRow.baroPlan+=thisRPModel.report.plan_barometric,$scope.totalRow.baroDep+=thisRPModel.report.dep_barometric,$scope.totalRow.baroRec+=thisRPModel.report.rec_barometric,$scope.totalRow.baroLost+=thisRPModel.report.lost_barometric,$scope.totalRow.metPlan+=thisRPModel.report.plan_meteorological,$scope.totalRow.metDep+=thisRPModel.report.dep_meteorological,$scope.totalRow.metRec+=thisRPModel.report.rec_meteorological,$scope.totalRow.metLost+=thisRPModel.report.lost_meteorological,$scope.totalRow.hwmFlag+=thisRPModel.report.hwm_flagged,$scope.totalRow.hwmCol=thisRPModel.report.hwm_collected,$scope.MetricDisplayModel.push(thisRPModel)}$scope.GenRepEventModel={},$scope.GenRepEventModel.Event=$scope.EventName,$scope.GenRepEventModel.EventType=$scope.eventTypes.filter(function(et){return et.event_type_id==$scope.EventName.event_type_id})[0],$scope.GenRepEventModel.EventStat=$scope.eventStats.filter(function(es){return es.event_status_id==$scope.EventName.event_status_id})[0],$scope.GenRepEventModel.Coordinator=$scope.members.filter(function(m){return m.member_id==$scope.GenRepEventModel.Event.event_coordinator})[0],$scope.GenRepEventModel.CoordAgency=$scope.agencies.filter(function(a){return a.agency_id==$scope.GenRepEventModel.Coordinator.agency_id})[0];var modalInstance=$uibModal.open({templateUrl:"MetricsSummary.html",size:"lg",windowClass:"rep-dialog",resolve:{thisReport:function(){return $scope.MetricDisplayModel},thisEvent:function(){return $scope.GenRepEventModel},theTotalRow:function(){return $scope.totalRow}},controller:["$scope","$uibModalInstance","thisReport","thisEvent","theTotalRow",function($scope,$uibModalInstance,thisReport,thisEvent,theTotalRow){$scope.Report=thisReport,$scope.Event=thisEvent,$scope.totals=theTotalRow,$scope.ok=function(){$uibModalInstance.dismiss("cancel")},$scope.print=function(){window.print()}}]});modalInstance.result.then(function(){})})}},$scope.displayContactsSum=function(valid){if(valid){var abbrevs=[];angular.forEach($scope.Statemodel.value,function(state){abbrevs.push(state.state_abbrev)});var abbrevString=abbrevs.join(","),thisDate=$scope.formatDate($scope.genSummary.sum_date);$scope.reportModel=[],$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",REPORT.getReportwithContacts({Event:$scope.EventName.event_id,States:abbrevString,Date:thisDate}).$promise.then(function(result){for(var x=0;x<result.length;x++){var rep={};rep.repID=result[x].reporting_metrics_id,rep.State=result[x].state,rep.report_date=result[x].report_date;var submitter=$scope.members.filter(function(m){return m.member_id==result[x].member_id})[0],submitterAgency=$scope.agencies.filter(function(a){return a.agency_id==submitter.agency_id})[0],sub={};sub.fname=submitter.fname,sub.lname=submitter.lname,sub.email=submitter.email,sub.phone=submitter.phone,sub.agencyname=submitterAgency.agency_name,sub.agencyadd=submitterAgency.city+" "+submitterAgency.state+" "+submitterAgency.zip,rep.submitter=sub,rep.depC=result[x].ReportContacts.filter(function(x){return"Deployed Staff"==x.type})[0],rep.genC=result[x].ReportContacts.filter(function(x){return"General"==x.type})[0],rep.inlC=result[x].ReportContacts.filter(function(x){return"Inland Flood"==x.type})[0],rep.coastC=result[x].ReportContacts.filter(function(x){return"Coastal Flood"==x.type})[0],rep.waterC=result[x].ReportContacts.filter(function(x){return"Water Quality"==x.type})[0],$scope.reportModel.push(rep)}setTimeout(function(){showModal()},3e3);var showModal=function(){var modalInstance=$uibModal.open({templateUrl:"ContactMetricsSummary.html",size:"lg",windowClass:"rep-dialog",resolve:{theseReports:function(){return $scope.reportModel},thisEvent:function(){return $scope.GenRepEventModel={},$scope.GenRepEventModel.Event=$scope.EventName,$scope.GenRepEventModel.EventType=$scope.eventTypes.filter(function(et){return et.event_type_id==$scope.EventName.event_type_id})[0],$scope.GenRepEventModel.EventStat=$scope.eventStats.filter(function(es){return es.event_status_id==$scope.EventName.event_status_id})[0],$scope.GenRepEventModel.Coordinator=$scope.members.filter(function(m){return m.member_id==$scope.EventName.event_coordinator})[0],$scope.GenRepEventModel.CoordAgency=$scope.agencies.filter(function(a){return a.agency_id==$scope.GenRepEventModel.Coordinator.agency_id})[0],$scope.GenRepEventModel}},controller:["$scope","$http","$uibModalInstance","theseReports","thisEvent",function($scope,$http,$uibModalInstance,theseReports,thisEvent){$scope.Reports=theseReports,$scope.Event=thisEvent,$scope.ok=function(){$uibModalInstance.dismiss("cancel")},$scope.print=function(){window.print()}}]});modalInstance.result.then(function(){})}})}},$scope.getCSVfile=function(valid){valid&&($http.defaults.headers.common.Accept="text/csv",REPORT.getReportsCSV({Event:$scope.genSummary.event_id,States:$scope.StateAbbrevs,Date:$scope.genSummary.sum_date}).$promise.then(function(result){var anchor=angular.element("<a/>"),joinedResponse=result.join(""),file=new Blob([joinedResponse],{type:"application/csv"}),fileURL=URL.createObjectURL(file);anchor.href=fileURL,anchor.download="report.csv",anchor.click()}),function(){console.log("error")})})}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("ProjAlertModalCtrl",["$scope","$uibModalInstance","ProjAlert",function($scope,$uibModalInstance,ProjAlert){$scope.ProjAlertParts=ProjAlert,$scope.ok=function(){$uibModalInstance.dismiss("cancel")}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("confirmReportModalCtrl",["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("peakModalCtrl",["$scope","$rootScope","$cookies","$http","$uibModalInstance","$uibModal","SERVER_URL","allVertDatums","allCollectConditions","thisPeak","peakSite","allMembers","allEventHWMs","allSiteSensors","allSiteFiles","thisPeakDFs","DATA_FILE","PEAK","HWM",function($scope,$rootScope,$cookies,$http,$uibModalInstance,$uibModal,SERVER_URL,allVertDatums,allCollectConditions,thisPeak,peakSite,allMembers,allEventHWMs,allSiteSensors,allSiteFiles,thisPeakDFs,DATA_FILE,PEAK,HWM){$scope.serverURL=SERVER_URL,$scope.VDatumsList=allVertDatums,$scope.thisSite=peakSite,$scope.memberList=allMembers,$scope.loggedInRole=$cookies.get("usersRole");for(var determineDFPresent=function(f){for(var x=0;x<f.length;x++)if(2==f[x].filetype_id)return!0;return!1},sf=0;sf<allSiteFiles.length;sf++)("DataFile File"==allSiteFiles[sf].fileBelongsTo||"Sensor File"==allSiteFiles[sf].fileBelongsTo)&&(allSiteFiles[sf].selected=!1);$scope.eventSiteHWMs=allEventHWMs.filter(function(h){return h.site_id==peakSite.site_id}),angular.forEach($scope.eventSiteHWMs,function(esh){esh.selected=!1,esh.files=allSiteFiles.filter(function(sf){return sf.hwm_id==esh.hwm_id&&"HWM File"==sf.fileBelongsTo})}),$scope.eventSiteSensors=allSiteSensors.filter(function(s){return s.event_id==$cookies.get("SessionEventID")}),angular.forEach($scope.eventSiteSensors,function(ess){ess.CollectCondition=null!==ess.inst_collection_id&&ess.inst_collection_id>0?allCollectConditions.filter(function(cc){return cc.id==ess.inst_collection_id})[0].condition:"",ess.isRetrieved="Retrieved"==ess.instrument_status[0].status?!0:!1,ess.files=allSiteFiles.filter(function(sf){return sf.instrument_id==ess.instrument_id&&("DataFile File"==sf.fileBelongsTo||"Sensor File"==sf.fileBelongsTo)}),(2==ess.sensor_type_id||5==ess.sensor_type_id||6==ess.sensor_type_id)&&(0===ess.files.length?ess.NeedDF=!0:determineDFPresent(ess.files)||(ess.NeedDF=!0))}),$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.LoggedInMember=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.chosenHWMList=[],$scope.removedChosenHWMList=[],$scope.chosenDFList=[],$scope.removedChosenDFList=[],$scope.hwmDetail=!1,$scope.HWMBox={},$scope.sensorDetail=!1,$scope.SensorBox={},$scope.dataFileDetail=!1,$scope.DFBox={},$scope.aPeak={};var getDateTimeParts=function(d){var y=d.substr(0,4),m=d.substr(5,2)-1,da=d.substr(8,2),h=d.substr(11,2),mi=d.substr(14,2),sec=d.substr(17,2),theDate=new Date(y,m,da,h,mi,sec);return theDate},getTimeZoneStamp=function(dsent){var d,sendThis=[];d=void 0!==dsent?new Date(dsent):new Date;var offset=d.toString().substring(35),zone="";switch(offset.substr(0,3)){case"Cen":zone="CST";break;case"Eas":zone="EST";break;case"Mou":zone="MST";break;case"Pac":zone="PST"}return sendThis=[d,zone]};$scope.dateOptions={startingDay:1,showWeeks:!1},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0};var dealWithTimeStampb4Send=function(){if("UTC"!=$scope.aPeak.time_zone){var utcDateTime=new Date($scope.aPeak.peak_date).toUTCString();$scope.aPeak.peak_date=utcDateTime,$scope.aPeak.time_zone="UTC"}else{var i=$scope.aPeak.peak_date.toString().indexOf("GMT")+3;$scope.aPeak.peak_date=$scope.aPeak.peak_date.toString().substring(0,i)}};if($scope.cancel=function(){$rootScope.stateIsLoading.showLoading=!1,$uibModalInstance.dismiss("cancel")},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},"empty"!=thisPeak){$scope.aPeak=angular.copy(thisPeak),$scope.aPeak.peak_date={date:getDateTimeParts($scope.aPeak.peak_date),time:getDateTimeParts($scope.aPeak.peak_date)},$scope.PeakCreator=allMembers.filter(function(m){return m.member_id==$scope.aPeak.member_id})[0];for(var h=0;h<$scope.eventSiteHWMs.length;h++)$scope.eventSiteHWMs[h].peak_summary_id==$scope.aPeak.peak_summary_id&&($scope.eventSiteHWMs[h].selected=!0);for(var s=0;s<$scope.eventSiteSensors.length;s++)for(var essI=s,df=0;df<$scope.eventSiteSensors[essI].files.length;df++){var isThere=thisPeakDFs.filter(function(pdf){return pdf.data_file_id==$scope.eventSiteSensors[essI].files[df].data_file_id})[0];void 0!==isThere&&($scope.eventSiteSensors[essI].files[df].selected=!0)}}else{var timeParts=getTimeZoneStamp();$scope.aPeak={peak_date:{date:timeParts[0],time:timeParts[0]},time_zone:timeParts[1],member_id:$cookies.get("mID")},$scope.PeakCreator=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0]}$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})};var formatSelectedHWM=function(h){var fhwm={};return fhwm.approval_id=h.approval_id,fhwm.bank=h.bank,fhwm.elev_ft=h.elev_ft,fhwm.event_id=h.event_id,fhwm.flag_date=h.flag_date,fhwm.flag_member_id=h.flag_member_id,fhwm.hcollect_method_id=h.hcollect_method_id,fhwm.hdatum_id=h.hdatum_id,fhwm.height_above_gnd=h.height_above_gnd,fhwm.hwm_environment=h.hwm_environment,fhwm.hwm_id=h.hwm_id,fhwm.hwm_locationdescription=h.hwm_locationdescription,fhwm.hwm_notes=h.hwm_notes,fhwm.hwm_uncertainty=h.hwm_uncertainty,fhwm.hwm_quality_id=h.hwm_quality_id,fhwm.hwm_type_id=h.hwm_type_id,fhwm.latitude_dd=h.latitude,fhwm.longitude_dd=h.longitude,fhwm.marker_id=h.marker_id,fhwm.peak_summary_id=h.peak_summary_id,fhwm.site_id=h.site_id,fhwm.stillwater="No"==h.stillwater?0:1,fhwm.survey_date=h.survey_date,fhwm.survey_member_id=h.survey_member_id,fhwm.vcollect_method_id=h.vcollect_method_id,fhwm.vdatum_id=h.vdatum_id,fhwm.waterbody=h.waterbody,fhwm};$scope.addHWM=function(h){var aHWM=formatSelectedHWM(h);if(h.selected===!0)$scope.chosenHWMList.push(aHWM);else if(void 0!==$scope.aPeak.peak_summary_id&&$scope.removedChosenHWMList.push(dataFile),$scope.chosenHWMList.length>0){var ind=$scope.chosenHWMList.map(function(hwm){return hwm.hwm_id}).indexOf(aHWM.hwm_id);$scope.chosenHWMList.splice(ind,1)}},$scope.showHWMDetails=function(h){$scope.hwmDetail=!0,$scope.sensorDetail=!1,$scope.dataFileDetail=!1,$scope.HWMBox=h},$scope.primaryHWM=function(h){var setPrimHWM=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Set as Primary</h3></div><div class="modal-body"><p>Are you sure you want to set this as the Primary HWM? Doing so will populate the Peak Date (not including time), Stage, Vertical Datum and Height Above Ground.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="SetIt()">Set as Primary</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.cancel=function(){$uibModalInstance.dismiss()},$scope.SetIt=function(){$uibModalInstance.close("Yes")}}],size:"sm"});setPrimHWM.result.then(function(setIt){if("Yes"==setIt){$scope.aPeak.peak_date.date=new Date(h.flag_date),$scope.aPeak.peak_stage=h.elev_ft,$scope.aPeak.vdatum_id=h.vdatum_id,$scope.aPeak.height_above_gnd=h.height_above_gnd;var hIndex=$scope.eventSiteHWMs.indexOf(h);$scope.eventSiteHWMs[hIndex].selected=!0}})},$scope.closeDetail=function(){$scope.sensorDetail=!1,$scope.hwmDetail=!1,$scope.dataFileDetail=!1},$scope.addDataFile=function(datafile){var dataFile={};DATA_FILE.query({id:datafile.data_file_id}).$promise.then(function(response){if(dataFile=response,datafile.selected===!0)$scope.chosenDFList.push(dataFile);else if(void 0!==$scope.aPeak.peak_summary_id&&$scope.removedChosenDFList.push(dataFile),$scope.chosenDFList.length>0){var ind=$scope.chosenDFList.map(function(df){return df.data_file_id}).indexOf(datafile.data_file_id);$scope.chosenDFList.splice(ind,1)}})},$scope.showSensorDetails=function(s){$scope.sensorDetail=!0,$scope.hwmDetail=!1,$scope.dataFileDetail=!1,$scope.SensorBox=s},$scope.showDataFileDetails=function(f){DATA_FILE.query({id:f.data_file_id},function(response){$scope.DFBox=response,$scope.DFBox.filePath=f.path,$scope.DFBox.fileID=f.file_id,$scope.DFBox.fileDesc=f.description,$scope.DFBox.processedBy=allMembers.filter(function(m){return m.member_id==response.processor_id})[0],$scope.DFBox.nwisFile=1==f.is_nwis?!0:!1,$scope.DFBox.fileURL=f.name,$scope.dataFileDetail=!0,$scope.hwmDetail=!1,$scope.sensorDetail=!1})},$scope.primaryDataFile=function(f){var setPrimeDF=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Set as Primary</h3></div><div class="modal-body"><p>Are you sure you want to set this as the Primary Data file?</p><p>(Coming soon: Script processing to populate the Peak date, time and time zone, Stage, Vertical Datum and Height above ground)</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="SetIt()">Set as Primary</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.cancel=function(){$uibModalInstance.dismiss()},$scope.SetIt=function(){$uibModalInstance.close("Yes")}}],size:"sm"});setPrimeDF.result.then(function(setIt){if("Yes"==setIt){var sens=$scope.eventSiteSensors.filter(function(s){return s.instrument_id==f.instrument_id})[0],sIndex=$scope.eventSiteSensors.indexOf(sens),fIndex=sens.files.indexOf(f);$scope.eventSiteSensors[sIndex].files[fIndex].selected=!0}})},$scope.savePeak=function(valid){if(valid){var updatedPeak={},datetime=new Date($scope.aPeak.peak_date.date.getFullYear(),$scope.aPeak.peak_date.date.getMonth(),$scope.aPeak.peak_date.date.getDate(),$scope.aPeak.peak_date.time.getHours(),$scope.aPeak.peak_date.time.getMinutes(),$scope.aPeak.peak_date.time.getSeconds());$scope.aPeak.peak_date=datetime,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",PEAK.update({id:$scope.aPeak.peak_summary_id},$scope.aPeak).$promise.then(function(response){if($scope.removedChosenDFList.length>0)for(var remd=0;remd<$scope.removedChosenDFList.length;remd++)$scope.removedChosenDFList[remd].peak_summary_id=null,DATA_FILE.update({id:$scope.removedChosenDFList[remd].data_file_id},$scope.removedChosenDFList[remd]).$promise;if($scope.removedChosenHWMList.length>0)for(var remh=0;remh<$scope.removedChosenHWMList.length;remh++)$scope.removedChosenHWMList[remh].peak_summary_id=null,HWM.update({id:$scope.removedChosenHWMList[remh].data_file_id},$scope.removedChosenHWMList[remh]).$promise;for(var addh=0;addh<$scope.chosenHWMList.length;addh++)$scope.chosenHWMList[addh].peak_summary_id=response.peak_summary_id,HWM.update({id:$scope.chosenHWMList[addh].hwm_id},$scope.chosenHWMList[addh]).$promise;for(var addd=0;addd<$scope.chosenDFList.length;addd++)$scope.chosenDFList[addd].peak_summary_id=response.peak_summary_id,DATA_FILE.update({id:$scope.chosenDFList[addd].data_file_id},$scope.chosenDFList[addd]).$promise;toastr.success("Peak updated"),updatedPeak=response;var sendBack=[updatedPeak,"updated"];$uibModalInstance.close(sendBack)})}};var updateDFwoPeakID=function(df_id){DATA_FILE.query({id:df_id}).$promise.then(function(res){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",res.peak_summary_id=null,DATA_FILE.update({id:res.data_file_id},res).$promise})};$scope.deletePeak=function(){var deletePeakMdl=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Remove Peak</h3></div><div class="modal-body"><p>Are you sure you want to delete this Peak?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="Ok()">OK</button><button class="btn btn-warning" ng-click="cancel()">Cancel</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.Ok=function(){$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss()}}],size:"sm"});deletePeakMdl.result.then(function(){var datetime=($scope.aPeak.peak_summary_id,new Date($scope.aPeak.peak_date.date.getFullYear(),$scope.aPeak.peak_date.date.getMonth(),$scope.aPeak.peak_date.date.getDate(),$scope.aPeak.peak_date.time.getHours(),$scope.aPeak.peak_date.time.getMinutes(),$scope.aPeak.peak_date.time.getSeconds()));$scope.aPeak.peak_date=datetime,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",PEAK["delete"]({id:$scope.aPeak.peak_summary_id}).$promise.then(function(){for(var i=0;i<$scope.eventSiteSensors.length;i++)for(var thisS=$scope.eventSiteSensors[i],f=0;f<thisS.files.length;f++){var thisF=thisS.files[f];thisF.selected&&updateDFwoPeakID(thisF.data_file_id)}for(var h=0;h<$scope.eventSiteHWMs.length;h++){var thisH=$scope.eventSiteHWMs[h];if(thisH.selected){thisH.peak_summary_id=null;var updateThisHWM=formatSelectedHWM(thisH);HWM.update({id:thisH.hwm_id},updateThisHWM).$promise}}toastr.success("Peak Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.createPeak=function(valid){var isHwmChecked=!1,isDFChecked=!1;if(angular.forEach($scope.eventSiteHWMs,function(shwm){shwm.selected&&(isHwmChecked=!0)}),angular.forEach($scope.eventSiteSensors,function(ssen){for(var fI=0;fI<ssen.files.length;fI++)ssen.files[fI].selected&&(isDFChecked=!0,fI=ssen.files.length)}),isHwmChecked||isDFChecked){if(valid){var createdPeak={},datetime=new Date($scope.aPeak.peak_date.date.getFullYear(),$scope.aPeak.peak_date.date.getMonth(),$scope.aPeak.peak_date.date.getDate(),$scope.aPeak.peak_date.time.getHours(),$scope.aPeak.peak_date.time.getMinutes(),$scope.aPeak.peak_date.time.getSeconds());$scope.aPeak.peak_date=datetime,dealWithTimeStampb4Send(),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",PEAK.save($scope.aPeak).$promise.then(function(response){createdPeak=response;for(var h=0;h<$scope.chosenHWMList.length;h++)$scope.chosenHWMList[h].peak_summary_id=response.peak_summary_id,HWM.update({id:$scope.chosenHWMList[h].hwm_id},$scope.chosenHWMList[h]).$promise;for(var d=0;d<$scope.chosenDFList.length;d++)$scope.chosenDFList[d].peak_summary_id=response.peak_summary_id,DATA_FILE.update({id:$scope.chosenDFList[d].data_file_id},$scope.chosenDFList[d]).$promise;toastr.success("Peak created");var sendBack=[createdPeak,"created"];$uibModalInstance.close(sendBack)})}}else{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>You must choose at least one HWM or Data File to use for interpretation for this Peak Summary.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="Ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.Ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}},$scope.showIncompleteDFInfo=function(){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Incomplete Data File</h3></div><div class="modal-body"><p>All RDGs, Met Station, and Rain Gage sensors require data file information in order to use as primary in the Peak summary.</p><p>Please revisit the Retrieved Sensor and click on NWIS Data Connection to add a link to the NWIS data if you want to use as primary.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="Ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.Ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})},$scope.showIncompleteHWMInfo=function(){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Incomplete HWM</h3></div><div class="modal-body"><p>Survey date and elevation are required in order to use as primary in the Peak summary.</p><p>Please revisit the HWM and add Survey date and elevation if you want to use as primary.</p><p>The HWM can be used for interpreation withouth a final elevation.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="Ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.Ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})},$scope.showRetrieveInfo=function(){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Deployed Sensor</h3></div><div class="modal-body"><p>This senosr needs to be retrieved before a Peak can be created.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="Ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.Ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})},$rootScope.stateIsLoading.showLoading=!1}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("peakCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","thisSite","Site_Files","thisSitePeaks","allVertDatums","allHWMQualities","allHWMTypes","PEAK","HWM","MEMBER","SITE","INST_COLL_CONDITION",function($scope,$rootScope,$cookies,$location,$state,$http,$uibModal,$filter,$timeout,thisSite,Site_Files,thisSitePeaks,allVertDatums,allHWMQualities,allHWMTypes,PEAK,HWM,MEMBER,SITE,INST_COLL_CONDITION){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($scope.peakCount={total:thisSitePeaks.length},$scope.SitePeaks=thisSitePeaks,$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1,void 0!==newValue?($scope.SitePeaks=thisSitePeaks.filter(function(p){return p.event_name==$scope.sessionEventName}),$scope.peakCount={total:$scope.SitePeaks.length}):($scope.SitePeaks=thisSitePeaks,$scope.peakCount={total:$scope.SitePeaks.length})}),$scope.showPeakModal=function(peakClicked){$rootScope.stateIsLoading.showLoading=!0;var indexClicked=$scope.SitePeaks.indexOf(peakClicked),modalInstance=$uibModal.open({templateUrl:"PEAKmodal.html",controller:"peakModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{allCollectConditions:function(){return INST_COLL_CONDITION.getAll().$promise},allVertDatums:function(){return allVertDatums},thisPeak:function(){return 0!==peakClicked?PEAK.query({id:peakClicked.peak_summary_id}).$promise:"empty"},thisPeakDFs:function(){return 0!==peakClicked?PEAK.getPeakSummaryDFs({id:peakClicked.peak_summary_id}).$promise:void 0},peakSite:function(){return thisSite},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise},allEventHWMs:function(){return HWM.getFilteredHWMs({Event:$cookies.get("SessionEventID"),EventStatus:0}).$promise},allSiteFiles:function(){return Site_Files.getAllSiteFiles()},allSiteSensors:function(){return SITE.getSiteSensors({id:thisSite.site_id}).$promise}}});modalInstance.result.then(function(createdPeak){"created"==createdPeak[1]&&($scope.SitePeaks.push(createdPeak[0]),$scope.peakCount.total=$scope.SitePeaks.length),"updated"==createdPeak[1]&&($scope.SitePeaks[indexClicked]=createdPeak[0]),"deleted"==createdPeak[1]&&($scope.SitePeaks.splice(indexClicked,1),$scope.peakCount.total=$scope.SitePeaks.length),$rootScope.stateIsLoading.showLoading=!1})})}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("OPmodalCtrl",["$scope","$rootScope","$cookies","$http","$sce","$uibModalInstance","$uibModal","SERVER_URL","FILE_STAMP","Site_Files","allDropdowns","thisOP","thisOPControls","opSite","agencyList","allMembers","OBJECTIVE_POINT","OP_CONTROL_IDENTIFIER","OP_MEASURE","SOURCE","FILE",function($scope,$rootScope,$cookies,$http,$sce,$uibModalInstance,$uibModal,SERVER_URL,FILE_STAMP,Site_Files,allDropdowns,thisOP,thisOPControls,opSite,agencyList,allMembers,OBJECTIVE_POINT,OP_CONTROL_IDENTIFIER,OP_MEASURE,SOURCE,FILE){$scope.serverURL=SERVER_URL,$scope.view={OPval:"detail"},$scope.fileIsUploading=!1,$scope.dl={dlOpen:!0,dlFileOpen:!1},$scope.OPTypeList=allDropdowns[0],$scope.HDList=allDropdowns[1],$scope.HCollectMethodList=allDropdowns[2],$scope.VDatumList=allDropdowns[3],$scope.VCollectMethodList=allDropdowns[4],$scope.OPQualityList=allDropdowns[5],$scope.fileTypeList=allDropdowns[6],$scope.htmlDescriptionTip=$sce.trustAsHtml("Please describe location and type of mark <em>ie. 'chiseled square on third sidewalk block on the south side of the street'</em>"),$scope.HWMfileIsUploading=!1,$scope.OP={},$scope.removeOPCarray=[],$scope.thisOPsite=opSite,$scope.addedIdentifiers=[],$scope.showControlIDinput=!1,$scope.DMS={},$scope.allSFiles=Site_Files.getAllSiteFiles(),$scope.OPFiles="empty"!==thisOP?$scope.allSFiles.filter(function(sf){return sf.objective_point_id==thisOP.objective_point_id}):[],$scope.opImageFiles=$scope.OPFiles.filter(function(opf){return 1===opf.filetype_id}),$scope.showFileForm=!1,$scope.UnquantChecked=function(){1==$scope.OP.unquantified&&($scope.OP.uncertainty="")},$scope.stamp=FILE_STAMP.getStamp(),$scope.fileItemExists=!0,$scope.saveFileUpload=function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.sFileIsUploading=!0;var fileParts={FileEntity:{file_id:$scope.aFile.file_id,name:$scope.aFile.name,description:$scope.aFile.description,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,file_date:$scope.aFile.file_date,hwm_id:$scope.aFile.hwm_id,site_id:$scope.aFile.site_id,filetype_id:$scope.aFile.filetype_id,source_id:$scope.aFile.source_id,path:$scope.aFile.path,data_file_id:$scope.aFile.data_file_id,instrument_id:$scope.aFile.instrument_id,photo_date:$scope.aFile.photo_date,is_nwis:$scope.aFile.is_nwis,objective_point_id:$scope.aFile.objective_point_id},File:void 0!==$scope.aFile.File1?$scope.aFile.File1:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Objective Point File",$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),FILE_STAMP.setStamp(),$scope.stamp=FILE_STAMP.getStamp(),$scope.isPhoto=$scope.aFile.File1.type.indexOf("image")>-1?!0:!1,$scope.aFile.name=fresponse.name,
$scope.aFile.path=fresponse.path,void 0!==$scope.aFile.File1&&($scope.aFile.File=$scope.aFile.File1,$scope.aFile.File1=void 0),$scope.OPFiles.splice($scope.existFileIndex,1),$scope.OPFiles.push(fresponse),1===fresponse.filetype_id&&($scope.opImageFiles.splice($scope.existFileIndex,1),$scope.opImageFiles.push(fresponse)),$scope.allSFiles[$scope.allSFileIndex]=fresponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.sFileIsUploading=!1,$scope.fileItemExists=!0},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})},$scope.showFile=function(file){if($scope.fileTypes=$scope.fileTypeList,$scope.agencies=agencyList,$scope.existFileIndex=-1,$scope.existIMGFileIndex=-1,$scope.allSFileIndex=-1,$scope.aFile={},$scope.aSource={},0!==file){if($scope.existFileIndex=$scope.OPFiles.indexOf(file),$scope.allSFileIndex=$scope.allSFiles.indexOf(file),$scope.existIMGFileIndex=$scope.opImageFiles.length>0?$scope.opImageFiles.indexOf(file):-1,$scope.aFile=angular.copy(file),$scope.aFile.fileType=$scope.fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,FILE.getFileItem({id:$scope.aFile.file_id}).$promise.then(function(response){$scope.fileItemExists=response.Length>0?!0:!1}),void 0!==$scope.aFile.name){var fI=$scope.aFile.name.lastIndexOf("."),fileExt=$scope.aFile.name.substring(fI+1);$scope.isPhoto=fileExt.match(/(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)?!0:!1}$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),null!==file.source_id&&SOURCE.query({id:file.source_id}).$promise.then(function(s){$scope.aSource=s,$scope.aSource.FULLname=$scope.aSource.source_name,1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)})}else $scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname;$scope.showFileForm=!0,$scope.updateAgencyForCaption=function(){1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}},$scope.createFile=function(valid){if(valid&&($scope.fileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",null!==$scope.aSource.agency_id)){var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,photo_date:$scope.aFile.photo_date,description:$scope.aFile.description,site_id:$scope.thisOPsite.site_id,source_id:response.source_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,objective_point_id:$scope.OP.objective_point_id},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Objective Point File",$scope.OPFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),FILE_STAMP.setStamp(),1===fresponse.filetype_id&&$scope.opImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.fileIsUploading=!1},function(errorResponse){$scope.fileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.fileIsUploading=!1,toastr.error("Error saving Source info: "+errorResponse.statusText)})}},$scope.saveFile=function(valid){if(valid){$scope.fileIsUploading=!0;{$scope.aFile.fileBelongsTo}$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.aSource.source_id&&($scope.aSource.source_name=$scope.aSource.FULLname,SOURCE.update({id:$scope.aSource.source_id},$scope.aSource).$promise.then(function(){FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="Objective Point File",$scope.OPFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.fileIsUploading=!1},function(errorResponse){$scope.fileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.fileIsUploading=!1,toastr.error("Error saving source: "+errorResponse.statusText)}))}},$scope.deleteFile=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.OPFiles.splice($scope.existFileIndex,1),$scope.allSFiles.splice($scope.allSFileIndex,1),$scope.opImageFiles.splice($scope.existIMGFileIndex,1),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelFile=function(){$scope.aFile={},$scope.aSource={},$scope.showFileForm=!1};var makeAdate=function(d){var aDate=new Date;""!==d&&void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};"empty"!=thisOP?($scope.opModalHeader="Datum Location Information",$scope.createOReditOP="edit",$scope.OP=angular.copy(thisOP),$scope.OP.date_established=makeAdate($scope.OP.date_established),0===$scope.OP.vdatum_id&&delete $scope.OP.vdatum_id,null!==$scope.OP.date_recovered&&($scope.OP.date_recovered=makeAdate($scope.OP.date_recovered)),thisOPControls.length>0&&($scope.addedIdentifiers=thisOPControls,$scope.showControlIDinput=!0),$scope.OP.opType=$scope.OP.op_type_id>0?$scope.OPTypeList.filter(function(t){return t.objective_point_type_id==$scope.OP.op_type_id})[0].op_type:"",$scope.OP.quality=$scope.OP.op_quality_id>0?$scope.OPQualityList.filter(function(q){return q.op_quality_id==$scope.OP.op_quality_id})[0].quality:"",$scope.OP.hdatum=$scope.OP.hdatum_id>0?$scope.HDList.filter(function(hd){return hd.datum_id==$scope.OP.hdatum_id})[0].datum_name:"",$scope.OP.hCollectMethod=$scope.OP.hcollect_method_id>0?$scope.HCollectMethodList.filter(function(hc){return hc.hcollect_method_id==$scope.OP.hcollect_method_id})[0].hcollect_method:"",$scope.OP.vDatum=$scope.OP.vdatum_id>0?$scope.VDatumList.filter(function(vd){return vd.datum_id==$scope.OP.vdatum_id})[0].datum_name:"",$scope.OP.vCollectMethod=$scope.OP.vcollect_method_id>0?$scope.VCollectMethodList.filter(function(vc){return vc.vcollect_method_id==$scope.OP.vcollect_method_id})[0].vcollect_method:""):($scope.opModalHeader="Create new Datum Location",$scope.createOReditOP="create",$scope.OP.latitude_dd=opSite.latitude_dd,$scope.OP.longitude_dd=opSite.longitude_dd,$scope.OP.hdatum_id=opSite.hdatum_id,$scope.OP.date_established=makeAdate("")),$scope.OP.decDegORdms="dd",$scope.OP.FTorMETER="ft",$scope.OP.FTorCM="ft",$scope.addNewIdentifier=function(){"edit"==$scope.createOReditOP?$scope.addedIdentifiersCopy.push({objective_point_id:$scope.OP.objective_point_id,identifier:"",identifier_type:""}):$scope.addedIdentifiers.push({identifier:"",identifier_type:""}),$scope.showControlIDinput=!0},$scope.datepickrs={},$scope.dateOptions={startingDay:1,showWeeks:!1},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())};var azimuth=function(deg,min,sec){var azi=0;return 0>deg?(azi=-1*deg+1*min/60+1*sec/3600,(-1*azi).toFixed(5)):(azi=1*deg+1*min/60+1*sec/3600,azi.toFixed(5))},deg_to_dms=function(deg){0>deg&&(deg=deg.toString(),deg=deg.substring(1));var d=Math.floor(deg),minfloat=60*(deg-d),m=Math.floor(minfloat),s=(60*(minfloat-m)).toFixed(3);return""+d+":"+m+":"+s};$scope.latLongChange=function(){if("edit"==$scope.createOReditOP){if("dd"==$scope.opCopy.decDegORdms)void 0!==$scope.DMS.LADeg&&($scope.opCopy.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.opCopy.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),$scope.DMS={});else if(void 0!==$scope.opCopy.latitude_dd){var latDMS=deg_to_dms($scope.opCopy.latitude_dd).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.opCopy.longitude_dd),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2],$scope.opCopy.latitude_dd=void 0,$scope.opCopy.longitude_dd=void 0}}else if("dd"==$scope.OP.decDegORdms)void 0!==$scope.DMS.LADeg&&($scope.OP.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.OP.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),$scope.DMS={});else if(void 0!==$scope.OP.latitude_dd){var create_latDMS=deg_to_dms($scope.OP.latitude_dd).toString(),create_ladDMSarray=create_latDMS.split(":");$scope.DMS.LADeg=create_ladDMSarray[0],$scope.DMS.LAMin=create_ladDMSarray[1],$scope.DMS.LASec=create_ladDMSarray[2];var create_longDMS=deg_to_dms($scope.OP.longitude_dd),create_longDMSarray=create_longDMS.split(":");$scope.DMS.LODeg=-1*create_longDMSarray[0],$scope.DMS.LOMin=create_longDMSarray[1],$scope.DMS.LOSec=create_longDMSarray[2],$scope.OP.latitude_dd=void 0,$scope.OP.longitude_dd=void 0}};var trimOP=function(op){var OBJ_PT={name:op.name,description:op.description,elev_ft:void 0!==op.elev_ft?op.elev_ft:null,date_established:op.date_established,op_is_destroyed:void 0!==op.op_is_destroyed?op.op_is_destroyed:0,op_notes:void 0!==op.op_notes?op.op_notes:null,site_id:$scope.thisOPsite.site_id,vdatum_id:void 0!==op.vdatum_id?op.vdatum_id:0,latitude_dd:op.latitude_dd,longitude_dd:op.longitude_dd,hdatum_id:void 0!==op.hdatum_id?op.hdatum_id:0,hcollect_method_id:void 0!==op.hcollect_method_id?op.hcollect_method_id:0,vcollect_method_id:void 0!==op.vcollect_method_id?op.vcollect_method_id:0,op_type_id:op.op_type_id,date_recovered:void 0!==op.date_recovered?op.date_recovered:null,uncertainty:void 0!==op.uncertainty&&""!==op.uncertainty?op.uncertainty:null,unquantified:void 0!==op.unquantified?op.unquantified:null,op_quality_id:void 0!==op.op_quality_id?op.op_quality_id:null};return OBJ_PT};$scope.cancel=function(){$uibModalInstance.close()};var formatDefaults=function(theOP){"meter"==theOP.FTorMETER&&($scope.OP.FTorMETER="ft",$scope.OP.elev_ft=3.2808*$scope.OP.elev_ft),"cm"==theOP.FTorCM&&($scope.OP.FTorCM="ft",$scope.OP.uncertainty=$scope.OP.uncertainty/30.48),"dms"==theOP.decDegORdms&&($scope.OP.decDegORdms="dd",$scope.OP.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.OP.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),$scope.DMS={},$scope.OP.site_id=$scope.thisOPsite.site_id)};$scope.create=function(){if(this.OPForm.$valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var createdOP={};formatDefaults($scope.OP);var OPtoPOST=trimOP($scope.OP);OBJECTIVE_POINT.save(OPtoPOST,function(response){if(toastr.success("Datum Location created"),createdOP=response,$scope.addedIdentifiers.length>0)for(var opc=0;opc<$scope.addedIdentifiers.length;opc++){var thisOne=$scope.addedIdentifiers[opc];thisOne.objective_point_id=response.objective_point_id,OP_CONTROL_IDENTIFIER.save(thisOne).$promise}},function(errorResponse){toastr.error("Error creating Datum Location: "+errorResponse.statusText)}).$promise.then(function(){var sendBack=[createdOP,"created"];$uibModalInstance.close(sendBack)})}},$scope.RemoveID=function(opControl){if(void 0!==$scope.addedIdentifiersCopy){var i=$scope.addedIdentifiersCopy.indexOf(opControl);void 0!==opControl.op_control_identifier_id?($scope.removeOPCarray.push(opControl),$scope.addedIdentifiersCopy.splice(i,1)):$scope.addedIdentifiersCopy.splice(i,1)}else{var ci=$scope.addedIdentifiers.indexOf(opControl);$scope.addedIdentifiers.splice(ci,1)}},$scope.save=function(valid){if(valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.DMS.LADeg&&($scope.opCopy.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.opCopy.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec));if($scope.addedIdentifiersCopy.length>0)for(var i=0;i<$scope.addedIdentifiersCopy.length;i++)if(void 0!==$scope.addedIdentifiersCopy[i].op_control_identifier_id){var existIndex=$scope.addedIdentifiers.map(function(i){return i.op_control_identifier_id}).indexOf($scope.addedIdentifiersCopy[i].op_control_identifier_id);OP_CONTROL_IDENTIFIER.update({id:$scope.addedIdentifiersCopy[i].op_control_identifier_id},$scope.addedIdentifiersCopy[i]).$promise.then(function(response){$scope.addedIdentifiers[existIndex]=response})}else{var thisOPControlID=$scope.addedIdentifiersCopy[i];thisOPControlID.objective_point_id=$scope.OP.objective_point_id,OP_CONTROL_IDENTIFIER.save(thisOPControlID).$promise.then(function(response){$scope.addedIdentifiers.push(response)})}if($scope.removeOPCarray.length>0)for(var r=0;r<$scope.removeOPCarray.length;r++){var deIndex=$scope.addedIdentifiers.map(function(ri){return ri.op_control_identifier_id}).indexOf($scope.removeOPCarray[r].op_control_identifier_id);OP_CONTROL_IDENTIFIER["delete"]({id:$scope.removeOPCarray[r].op_control_identifier_id}).$promise.then(function(){$scope.addedIdentifiers.splice(deIndex,1)})}formatDefaults($scope.opCopy);var OPtoPOST=trimOP($scope.opCopy);OPtoPOST.objective_point_id=$scope.opCopy.objective_point_id,OBJECTIVE_POINT.update({id:OPtoPOST.objective_point_id},OPtoPOST,function(response){toastr.success("Datum Location updated"),$scope.OP=response,thisOP=response,$scope.OP.date_established=makeAdate($scope.OP.date_established),null!==$scope.OP.date_recovered&&($scope.OP.date_recovered=makeAdate($scope.OP.date_recovered)),$scope.OP.opType=$scope.OP.op_type_id>0?$scope.OPTypeList.filter(function(t){return t.objective_point_type_id==$scope.OP.op_type_id})[0].op_type:"",$scope.OP.quality=$scope.OP.op_quality_id>0?$scope.OPQualityList.filter(function(q){return q.op_quality_id==$scope.OP.op_quality_id})[0].quality:"",$scope.OP.hdatum=$scope.OP.hdatum_id>0?$scope.HDList.filter(function(hd){return hd.datum_id==$scope.OP.hdatum_id})[0].datum_name:"",$scope.OP.hCollectMethod=$scope.OP.hcollect_method_id>0?$scope.HCollectMethodList.filter(function(hc){return hc.hcollect_method_id==$scope.OP.hcollect_method_id})[0].hcollect_method:"",$scope.OP.vDatum=$scope.OP.vdatum_id>0?$scope.VDatumList.filter(function(vd){return vd.datum_id==$scope.OP.vdatum_id})[0].datum_name:"",$scope.OP.vCollectMethod=$scope.OP.vcollect_method_id>0?$scope.VCollectMethodList.filter(function(vc){return vc.vcollect_method_id==$scope.OP.vcollect_method_id})[0].vcollect_method:"",$scope.opCopy={},$scope.addedIdentifiersCopy=[],$scope.view.OPval="detail"},function(errorResponse){toastr.error("Error updating Datum Location: "+errorResponse.statusText)}).$promise}},$scope.deleteOP=function(){OP_MEASURE.getDatumLocationOPMeasures({objectivePointId:$scope.OP.objective_point_id}).$promise.then(function(result){if(result.length>0){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Cannot Delete</h3></div><div class="modal-body"><p>This Datum Location is being used for one or more sensor tape downs. Please delete the tape down before deleting the datum location.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}else{var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.OP},what:function(){return"Objective Point"}}});DeleteModalInstance.result.then(function(opToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),OBJECTIVE_POINT["delete"]({id:opToRemove.objective_point_id},opToRemove).$promise.then(function(){$scope.OPFiles=[],$scope.opImageFiles=[];for(var l=$scope.allSFiles.length;l--;)$scope.allSFiles[l].objective_point_id==opToRemove.objective_point_id&&$scope.allSFiles.splice(l,1);Site_Files.setAllSiteFiles($scope.allSFiles),toastr.success("Datum Location Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})}})};var openLatModal=function(w){var latModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Latitude must be between 0 and 73.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});latModal.result.then(function(fieldFocus){"latlong"==w?$("#latitude_dd").focus():$("#LaDeg").focus()})},openLongModal=function(w){var longModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Longitude must be between -175.0 and -60.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});longModal.result.then(function(fieldFocus){"latlong"==w?$("#longitude_dd").focus():$("#LoDeg").focus()})};$scope.checkValue=function(d){if("dms"==d)($scope.DMS.LADeg<0||$scope.DMS.LADeg>73)&&openLatModal("dms"),($scope.DMS.LODeg<-175||$scope.DMS.LODeg>-60)&&openLongModal("dms");else{var op="edit"==$scope.view.OPval?$scope.opCopy:$scope.OP;(op.latitude_dd<0||op.latitude_dd>73)&&openLatModal("latlong"),(op.longitude_dd<-175||op.longitude_dd>-60)&&openLongModal("latlong")}},$scope.wannaEditOP=function(){$scope.view.OPval="edit",$scope.opCopy=angular.copy($scope.OP),$scope.opCopy.decDegORdms="dd",$scope.addedIdentifiersCopy=angular.copy($scope.addedIdentifiers)},$scope.cancelOPEdit=function(){$scope.view.OPval="detail",$scope.opCopy=[]},$rootScope.stateIsLoading.showLoading=!1}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("objectivePointCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","OBJECTIVE_POINT","MEMBER","thisSite","thisSiteOPs","allOPTypes","allHorDatums","allHorCollMethods","allVertDatums","allVertColMethods","allOPQualities","allFileTypes","allAgencies",function($scope,$rootScope,$cookies,$location,$state,$http,$uibModal,$filter,$timeout,OBJECTIVE_POINT,MEMBER,thisSite,thisSiteOPs,allOPTypes,allHorDatums,allHorCollMethods,allVertDatums,allVertColMethods,allOPQualities,allFileTypes,allAgencies){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($scope.opCount={total:thisSiteOPs.length},$scope.SiteObjectivePoints=thisSiteOPs,$scope.showOPModal=function(OPclicked){$scope.opFileTypes=allFileTypes.filter(function(oft){return"Photo"===oft.filetype||"Field Sheets"===oft.filetype||"Level Notes"===oft.filetype||"Other"===oft.filetype||"NGS Datasheet"===oft.filetype||"Sketch"===oft.filetype});{var passAllLists=[allOPTypes,allHorDatums,allHorCollMethods,allVertDatums,allVertColMethods,allOPQualities,$scope.opFileTypes];$scope.SiteObjectivePoints.indexOf(OPclicked)}$rootScope.stateIsLoading={showLoading:!0};var modalInstance=$uibModal.open({templateUrl:"OPmodal.html",controller:"OPmodalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{allDropdowns:function(){return passAllLists},thisOP:function(){return 0!==OPclicked?OPclicked:"empty"},thisOPControls:function(){return 0!==OPclicked?OBJECTIVE_POINT.getOPControls({id:OPclicked.objective_point_id}).$promise:void 0},opSite:function(){return thisSite},agencyList:function(){return allAgencies},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise}}});modalInstance.result.then(function(createdOP){if($rootScope.stateIsLoading={showLoading:!1},void 0!==createdOP){if("created"==createdOP[1]&&($scope.SiteObjectivePoints.push(createdOP[0]),$scope.opCount.total=$scope.SiteObjectivePoints.length),void 0===createdOP[1]){var iClicked=$scope.SiteObjectivePoints.indexOf(OPclicked);$scope.SiteObjectivePoints[iClicked]=createdOP}if("deleted"==createdOP[1]){var indexClicked1=$scope.SiteObjectivePoints.indexOf(OPclicked);$scope.SiteObjectivePoints.splice(indexClicked1,1),$scope.opCount.total=$scope.SiteObjectivePoints.length}}})})}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("memberModalCtrl",["$scope","$rootScope","$cookies","$http","$uibModal","$uibModalInstance","$filter","$sce","roleList","agencyList","thisMember","MEMBER",function($scope,$rootScope,$cookies,$http,$uibModal,$uibModalInstance,$filter,$sce,roleList,agencyList,thisMember,MEMBER){switch($scope.aMember={},$scope.matchingUsers=!0,$scope.usernameTooltip=$sce.trustAsHtml("Active Directory user ID. ie: 'mpeppler' not 'mpeppler@usgs.gov'."),$scope.agencyList=agencyList,$scope.pass={newP:"",confirmP:""},$scope.newPass="",$scope.loggedInUser={},$scope.loggedInUser.Name=$cookies.get("usersName"),$scope.loggedInUser.ID=$cookies.get("mID"),$scope.loggedInUser.Role=$cookies.get("usersRole"),$scope.loggedInUser.Role){case"Admin":$scope.roleList=roleList.filter(function(r){return r.role_id<=3});break;case"Manager":$scope.roleList=roleList.filter(function(r){return 3==r.role_id})}"empty"!=thisMember?($scope.matchingUsers=thisMember.member_id==$scope.loggedInUser.ID?!0:!1,$scope.aMember=angular.copy(thisMember),$scope.aMember.Role=roleList.filter(function(r){return r.role_id==$scope.aMember.role_id})[0].role_name,$scope.changePass=!1,$scope.changeMyPassBtn=function(evt){$scope.changePass=$scope.changePass===!1?!0:!1},$scope.DontChangePass=function(){$scope.changePass=!1}):($scope.aMember={},1==$scope.roleList.length&&($scope.aMember.role_id=$scope.roleList[0].role_id)),$scope.create=function(valid){if(valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.aMember.password=btoa($scope.pass.confirmP);var createdMember={};MEMBER.save($scope.aMember,function(response){toastr.success("Member Created"),createdMember=response;var ag=$scope.agencyList.filter(function(a){return a.agency_id==response.agency_id})[0],ro=roleList.filter(function(r){return r.role_id==response.role_id})[0];createdMember.Agency=ag.agency_name,createdMember.Role=ro.role_name},function(errorResponse){toastr.error("Error creating new member: "+errorResponse.statusText)}).$promise.then(function(){var sendBack=[createdMember,"created"];$uibModalInstance.close(sendBack)})}},$scope.save=function(valid){if(valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",""!==$scope.pass.newP&&($scope.aMember.password=btoa($scope.pass.newP));var updatedMember={},formattedMember=angular.copy($scope.aMember);delete formattedMember.Role,delete formattedMember.Agency,MEMBER.update({id:formattedMember.member_id},formattedMember,function(response){updatedMember=response;var ag=$scope.agencyList.filter(function(a){return a.agency_id==response.agency_id})[0],ro=roleList.filter(function(r){return r.role_id==response.role_id})[0];if(updatedMember.Agency=ag.agency_name,updatedMember.Role=ro.role_name,$scope.loggedInUser.ID==response.member_id){if(void 0!==$scope.aMember.password){var enc=btoa(updatedMember.username.concat(":",$scope.pass.newP)),expireDate=(new Date).addHours(8);$cookies.put("STNCreds",enc,{expires:expireDate})}$cookies.put("STNUsername",updatedMember.username);var usersNAME=updatedMember.fname+" "+updatedMember.lname;$cookies.put("usersName",usersNAME)}toastr.success("Member Updated")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){var sendBack=[updatedMember,"updated"];$uibModalInstance.close(sendBack)})}else{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all required fields.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}},$scope.DeleteMember=function(mem){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return mem},what:function(){return"Member"}}});modalInstance.result.then(function(memToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),MEMBER.deleteMember({id:memToRemove.member_id},function(response){toastr.success("Member Deleted")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$uibModalInstance.close(["de","deleted"])})})},$scope.cancel=function(){$uibModalInstance.close()},$rootScope.stateIsLoading={showLoading:!1}}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("memberInfoCtrl",["$scope","$cookies","$location","$http","$uibModal","$stateParams","$filter","$sce","allRoles","MEMBER","thisMember",function($scope,$cookies,$location,$http,$uibModal,$stateParams,$filter,$sce,allRoles,MEMBER,thisMember){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($scope.aMember={},$scope.matchingUsers=!0,$scope.usernameTooltip=$sce.trustAsHtml("Active Directory user ID. ie: 'mpeppler' not 'mpeppler@usgs.gov'."),$scope.DeleteMember=function(mem){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return mem},what:function(){return"Member"}}});modalInstance.result.then(function(nameToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),MEMBER.deleteMember({id:nameToRemove.member_id},function(response){var delMem={};delMem.member_id=nameToRemove.member_id,delMem.Name=nameToRemove.fname+" "+nameToRemove.lname;var ag=$scope.agencyList.filter(function(a){return a.agency_id==nameToRemove.agency_id})[0],ro=allRoles.filter(function(r){return r.role_id==nameToRemove.role_id})[0];delMem.Agency=ag.agency_name,delMem.Role=ro.role_name,$scope.memberList.splice($scope.memberList.indexOf(delMem),1),toastr.success("Member Deleted")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$location.path("/Members/MembersList").replace()})})},$scope.pass={newP:"",confirmP:""},$scope.newPass="",void 0!==thisMember?($scope.matchingUsers=$stateParams.id==$scope.loggedInUser.ID?!0:!1,$scope.aMember=thisMember,$scope.aMember.Role=allRoles.filter(function(r){return r.role_id==$scope.aMember.role_id})[0].role_name,$scope.changePass=!1,$scope.SaveOnBlur=function(v){if(v)$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.update({id:$scope.aMember.member_id},$scope.aMember,function(response){toastr.success("Member Updated")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)});else{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please populate all required fields.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}},$scope.changeMyPassBtn=function(evt){$scope.changePass=$scope.changePass===!1?!0:!1},$scope.ChangePassword=function(){if(""===$scope.pass.newP||""===$scope.pass.confirmP){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>You must first enter a new password.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}else MEMBER.changePW({username:$scope.aMember.username,newPass:$scope.pass.newP},function(response){if(toastr.success("Password Updated"),$scope.aMember.member_id==$scope.loggedInUser.member_id){var enc=btoa($scope.aMember.username.concat(":",$scope.pass.newP));$cookies.put("STNCreds",enc),$cookies.put("STNUsername",$scope.aMember.username),$cookies.put("usersName",$scope.loggedInUser.Name),$cookies.put("mID",$scope.aMember.member_id);var roleName;switch($scope.aMember.role_id){case 1:roleName="Admin";break;case 2:roleName="Manager";break;case 3:roleName="Field";break;case 4:roleName="Public";break;default:roleName="CitizenManager"}$cookies.put("usersRole",roleName)}$scope.changePass=!1,$scope.pass.newP="",$scope.pass.confirmP=""},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},$scope.DontChangePass=function(){$scope.changePass=!1}):$scope.save=function(valid){valid&&($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.addMember({pass:$scope.pass.confirmP},$scope.aMember,function(response){toastr.success("Member Created");var nm={};nm.member_id=response.member_id,nm.Name=response.fname+" "+response.lname;var ag=$scope.agencyList.filter(function(a){return a.agency_id==response.agency_id})[0],ro=allRoles.filter(function(r){return r.role_id==response.role_id;

})[0];nm.Agency=ag.agency_name,nm.Role=ro.role_name,$scope.memberList.push(nm)}).$promise.then(function(){$location.path("/Members/MembersList").replace()}))})}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("memberCtrl",["$scope","$rootScope","$cookies","$location","$http","$filter","$uibModal","MEMBER","allRoles","allAgencies","userProfileId",function($scope,$rootScope,$cookies,$location,$http,$filter,$uibModal,MEMBER,allRoles,allAgencies,userProfileId){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($rootScope.thisPage="Settings/Members",$scope.sort_by=function(newSortingOrder){$scope.sortingOrder==newSortingOrder&&($scope.reverse=!$scope.reverse),$scope.sortingOrder=newSortingOrder,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+newSortingOrder+" i").removeClass().addClass($scope.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")},$scope.showMemberModal=function(memberClicked){var indexClicked=$scope.memberList.indexOf(memberClicked);$rootScope.stateIsLoading={showLoading:!0};var modalInstance=$uibModal.open({templateUrl:"memberModal.html",controller:"memberModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{thisMember:function(){return 0!==memberClicked?memberClicked:"empty"},agencyList:function(){return allAgencies},roleList:function(){return allRoles}}});modalInstance.result.then(function(createdMember){$rootScope.stateIsLoading={showLoading:!1},void 0!==createdMember&&("created"==createdMember[1]&&$scope.memberList.push(createdMember[0]),"updated"===createdMember[1]&&($scope.memberList[indexClicked]=createdMember[0]),"deleted"==createdMember[1]&&$scope.memberList.splice(indexClicked,1))})},$scope.agencyList=allAgencies,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise.then(function(response){$scope.memberList=[];for(var x=0;x<response.length;x++){var eachM=response[x],ag=$scope.agencyList.filter(function(a){return a.agency_id==response[x].agency_id})[0],ro=allRoles.filter(function(r){return r.role_id==response[x].role_id})[0];eachM.Agency=ag.agency_name,eachM.Role=ro.role_name,$scope.memberList.push(eachM)}void 0!==userProfileId&&null!==userProfileId&&MEMBER.query({id:userProfileId}).$promise.then(function(resp){$scope.showMemberModal(resp)})}))}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("MapSiteInfoController",["$scope","$http","$rootScope","$cookies","$location","SITE","leafletMarkerEvents","leafletBoundsHelpers","$state","spinnerService",function($scope,$http,$rootScope,$cookies,$location,SITE,leafletMarkerEvents,leafletBoundsHelpers,$state,spinnerService){$scope.status={siteOpen:!0},$rootScope.$on("mapSiteClickResults",function(event,siteParts){$scope.aSite=siteParts[0],$scope.aSite.latitude_dd=parseFloat($scope.aSite.latitude_dd.toFixed(6)),$scope.aSite.longitude_dd=parseFloat($scope.aSite.longitude_dd.toFixed(6)),spinnerService.hide("siteInfoSpinner")}),$scope.goToSiteDashboard=function(){$state.go("site.dashboard",{id:$scope.aSite.site_id})}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("MapSensorProposeController",["$scope","$http","$timeout","$rootScope","$cookies","$location","SITE","INSTRUMENT","INSTRUMENT_STATUS","allDeployTypes","allSensDeps","leafletMarkerEvents","leafletBoundsHelpers","$state",function($scope,$http,$timeout,$rootScope,$cookies,$location,SITE,INSTRUMENT,INSTRUMENT_STATUS,allDeployTypes,allSensDeps,leafletMarkerEvents,leafletBoundsHelpers,$state){$rootScope.$on("mapSiteClickResults",function(event,siteParts){$scope.thisSite=siteParts[0],$scope.status.sensorOpen=!1,$scope.ProposedSensors4Site=[],$scope.showProposed=!1}),$scope.deployTypeList=angular.copy(allDeployTypes);for(var tempDepTypeID=0,d=0;d<$scope.deployTypeList.length;d++)"Temperature"===$scope.deployTypeList[d].method&&(tempDepTypeID=$scope.deployTypeList[d].deployment_type_id,$scope.deployTypeList[d].method="Temperature (Met sensor)");$scope.deployTypeList.push({deployment_type_id:tempDepTypeID,method:"Temperature (Pressure Transducer)"}),$scope.getProposedSensors=function(){SITE.getSiteSensors({id:$scope.thisSite.site_id}).$promise.then(function(sResponse){$scope.ProposedSensors4Site=sResponse.filter(function(ss){return 4==ss.instrument_status[0].status_type_id})})},$scope.sensDepTypes=allSensDeps,$scope.showProposed=!1,$scope.status={sensorOpen:!1},$scope.showHideProposed=function(){$scope.showProposed=!$scope.showProposed},$scope.cancelProposing=function(){$scope.showProposed=!1},$scope.AddProposed=function(){for(var Time_STAMP=new Date,dt=0;dt<$scope.deployTypeList.length;dt++)if($scope.deployTypeList[dt].selected===!0){var proposedToAdd={},propStatToAdd={};if("Temp"==$scope.deployTypeList[dt].method.substring(0,4))proposedToAdd={deployment_type_id:$scope.deployTypeList[dt].deployment_type_id,site_id:$scope.thisSite.site_id,sensor_type_id:"Temperature (Pressure Transducer)"==$scope.deployTypeList[dt].method?1:2};else{var sID=0;angular.forEach($scope.sensDepTypes,function(sdt){for(var x=0;x<sdt.deploymenttypes.length;x++)sdt.deploymenttypes[x].deployment_type_id==$scope.deployTypeList[dt].deployment_type_id&&(sID=sdt.sensor_type_id)}),proposedToAdd={deployment_type_id:$scope.deployTypeList[dt].deployment_type_id,site_id:$scope.thisSite.site_id,sensor_type_id:sID}}$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",INSTRUMENT.save(proposedToAdd).$promise.then(function(response){var createdPropSensor={deployment_type_id:response.deployment_type_id,site_id:response.site_id,sensor_type_id:response.sensor_type_id,instrument_id:response.instrument_id,deploymentType:$scope.deployTypeList.filter(function(dtl){return dtl.deployment_type_id==response.deployment_type_id})[0].method,sensorType:$scope.sensDepTypes.filter(function(s){return s.sensor_type_id==response.sensor_type_id})[0].sensor};propStatToAdd={instrument_id:response.instrument_id,status_type_id:4,member_id:$cookies.get("mID"),time_stamp:Time_STAMP,time_zone:"UTC"},INSTRUMENT_STATUS.save(propStatToAdd).$promise.then(function(statResponse){propStatToAdd.status="Proposed",propStatToAdd.instrument_status_id=statResponse.instrument_status_id,createdPropSensor.instrument_status=[propStatToAdd],$scope.ProposedSensors4Site.push(createdPropSensor);for(var dep=0;dep<$scope.deployTypeList.length;dep++)$scope.deployTypeList[dep].selected=!1;$timeout(function(){$scope.showProposed=!1,toastr.success("Proposed sensor created")})},function(errorResponse){toastr.error("Error creating proposed instrument: "+errorResponse.statusText)})},function(errorResponse){toastr.error("Error creating proposed instrument: "+errorResponse.statusText)})}}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("MapPeaksController",["$scope","$rootScope","$http","$cookies","$location","leafletMarkerEvents","leafletBoundsHelpers","$state",function($scope,$rootScope,$http,$cookies,$location,leafletMarkerEvents,leafletBoundsHelpers,$state){$rootScope.$on("mapSiteClickResults",function(event,siteParts){$scope.sitePeaks=[];for(var allSitePeaks=siteParts[1],p=0;p<allSitePeaks.length;p++)allSitePeaks[p].event_name==$cookies.get("SessionEventName")&&$scope.sitePeaks.push(allSitePeaks[p]);$scope.showPeaks=!0}),$scope.showPeaks=!1}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("MapFiltersController",["$scope","$http","$rootScope","$cookies","$location","SITE","EVENT","Map_Filter","$state","stateList","sensorTypes","networkNames","spinnerService",function($scope,$http,$rootScope,$cookies,$location,SITE,EVENT,Map_Filter,$state,stateList,sensorTypes,networkNames,spinnerService){$scope.status={siteOpen:!0},$scope.states=stateList,$scope.senTypes=sensorTypes,$scope.netNames=networkNames,$scope.surveyOptions=[{id:!0,value:"Surveyed HWMs"},{id:!1,value:"Unsurveyed HWMs"}],$scope.Chosen={network:null,sensor:null,survey:null},$scope.chosenStates=[],$scope.siteResponse=!1,$scope.checkboxModel={eventSitesOnly:"1",hwmOnly:"0",senOnly:"0",rdgOnly:"0",opDefined:"0"},$scope.searchSites=function(){if(spinnerService.show("mapSpinner"),"1"===$scope.checkboxModel.eventSitesOnly&&1==$scope.sessionEventExists){var stateString=$scope.chosenStates.join();$scope.siteResponse=!1,$scope.siteList=[];var evID=null!==$cookies.get("SessionEventID")&&void 0!==$cookies.get("SessionEventID")?$cookies.get("SessionEventID"):0;$rootScope.searchParams={event:evID,state:$scope.chosenStates,SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined},SITE.getFilteredSites({Event:evID,State:stateString,SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined},function(response){spinnerService.hide("mapSpinner"),Map_Filter.setFilteredSites(response)},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,alert("Error: "+errorResponse.statusText)})}else if("0"===$scope.checkboxModel.eventSitesOnly||0==$scope.sessionEventExists){var stateString=$scope.chosenStates.join();$scope.siteResponse=!1,$scope.siteList=[],$rootScope.searchParams={state:$scope.chosenStates,SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined};var sp=$rootScope.searchParams;if("0"===sp.HWMOnly&&null==sp.HWMSurveyed&&null==sp.NetworkName&&"0"===sp.OPDefined&&"0"===sp.RDGOnly&&"0"===sp.SensorOnly&&null===sp.SensorType&&0==sp.state.length)return spinnerService.hide("mapSpinner"),toastr.options.positionClass="toast-bottom-right",void toastr.warning("Please select at least one search parameter.","Map Filters");SITE.getFilteredSites({State:stateString,SensorType:$scope.Chosen.sensor,NetworkName:$scope.Chosen.network,HWMOnly:$scope.checkboxModel.hwmOnly,HWMSurveyed:$scope.Chosen.survey,SensorOnly:$scope.checkboxModel.senOnly,RDGOnly:$scope.checkboxModel.rdgOnly,OPDefined:$scope.checkboxModel.opDefined},function(response){spinnerService.hide("mapSpinner"),Map_Filter.setFilteredSites(response)},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,alert("Error: "+errorResponse.statusText)})}},$scope.stateClick=function(data){if(data.selected===!0&&$scope.chosenStates.push(data.state_abbrev),data.selected===!1){var ind=$scope.chosenStates.indexOf(data.state_abbrev);ind>=0&&$scope.chosenStates.splice(ind,1)}},$scope.clearFilters=function(){spinnerService.show("mapSpinner"),$scope.checkboxModel={eventSitesOnly:1,hwmOnly:0,senOnly:0,rdgOnly:0,opDefined:0},$scope.Chosen={},$scope.chosenStates=[],angular.forEach($scope.states,function(st){st.selected=!1});var evID=null!==$cookies.get("SessionEventID")&&void 0!==$cookies.get("SessionEventID")?$cookies.get("SessionEventID"):0;$scope.sitesPromise=EVENT.getEventSites({id:evID},function(response){Map_Filter.setFilteredSites(response),spinnerService.hide("mapSpinner")},function(errorResponse){})}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("MapController",["$scope","$http","$rootScope","$cookies","$location","SITE","EVENT","Map_Site","leafletMarkerEvents","leafletBoundsHelpers","leafletData","$state","spinnerService",function($scope,$http,$rootScope,$cookies,$location,SITE,EVENT,Map_Site,leafletMarkerEvents,leafletBoundsHelpers,leafletData,$state,spinnerService){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$rootScope.thisPage="Map",$rootScope.activeMenu="map",$scope.message="Many of the supplemental GIS data layers found in the map are from a range of sources and are not maintained by WiM. We offer these map layers as a decision support supplement to the STN sites layer, but we cannot guarantee their performance and availability. Many of these externally maintained layers are large datasets and may load slowly depending on network latency. In some cases they may fail to load entirely when network latency is high.",$rootScope.$on("filterSitesClick",function(event,filteredSitesArray){filteredSitesArray.length>0?($scope.paths={},$scope.selectedMarkerNum=0,showEventSites(filteredSitesArray)):(toastr.options.positionClass="toast-bottom-right",toastr.warning("Your filter returned no results.","Map Filters"))});var icons={stn:{type:"div",iconSize:[10,10],className:"stnSiteIcon"},stnGray:{type:"div",iconSize:[10,10],className:"stnSiteGray"},newSite:{type:"div",iconSize:[10,10],className:"newSiteIcon",iconAnchor:[5,5]},selected:{type:"div",iconSize:[12,12],className:"selectedIcon"},nwis:L.divIcon({iconSize:[10,10],className:"arrow-up"}),action:L.icon({iconUrl:"images/action.png",popupAnchor:[10,10]}),low_threshold:L.icon({iconUrl:"images/low_threshold.png",popupAnchor:[10,10]}),major:L.icon({iconUrl:"images/major.png",popupAnchor:[10,10]}),minor:L.icon({iconUrl:"images/minor.png",popupAnchor:[10,10]}),moderate:L.icon({iconUrl:"images/moderate.png",popupAnchor:[10,10]}),no_flooding:L.icon({iconUrl:"images/no_flooding.png",popupAnchor:[10,10]}),not_defined:L.icon({iconUrl:"images/not_defined.png",popupAnchor:[10,10]}),obs_not_current:L.icon({iconUrl:"images/obs_not_current.png",popupAnchor:[10,10]}),out_of_service:L.icon({iconUrl:"images/out_of_service.png",popupAnchor:[10,10]})},showEventSites=function(response){var sitesArray=response;$scope.sites=sitesArray,$scope.markers=[],$scope.markersLatLngArray=[],leafletData.getDirectiveControls().then(function(controls){controls.markers.create({},$scope.markers);for(var markers=[],i=0;i<sitesArray.length;i++){var a=sitesArray[i];markers.push({layer:"stnSites",lat:a.latitude_dd,lng:a.longitude_dd,site_id:a.site_id,title:"STN Site",icon:icons.stn}),$scope.markersLatLngArray.push([a.latitude_dd,a.longitude_dd])}controls.markers.create(markers,$scope.markers),$scope.markers=markers,console.table($scope.markers);var LLBounds=new L.LatLngBounds($scope.markersLatLngArray);$scope.bounds=leafletBoundsHelpers.createBoundsFromArray([[LLBounds._northEast.lat,LLBounds._northEast.lng],[LLBounds._southWest.lat,LLBounds._southWest.lng]])})};$scope.pathsObj={circleMarker:{type:"circleMarker",radius:20,weight:3,color:"#000099",latlngs:{}}},$scope.selectedMarkerNum=0,$scope.$on("leafletDirectiveMarker.click",function(event,args){if("newSite"!=args.model.site_id){spinnerService.show("siteInfoSpinner"),$scope.markers[$scope.selectedMarkerNum].icon=icons.stn,delete $scope.markers[$scope.selectedMarkerNum].label;var siteID=args.model.site_id;Map_Site.setMapSiteParts(siteID),$scope.selectedMarkerNum=parseInt(args.modelName),$scope.markers[$scope.selectedMarkerNum].icon=icons.selected,$scope.markers[$scope.selectedMarkerNum].label={message:"Site "+siteID,options:{noHide:!0,offset:[25,-15],className:"siteLabel"}},$scope.mapCenter.zoom<=9?$scope.mapCenter={lat:args.model.lat,lng:args.model.lng,zoom:10}:$scope.mapCenter.zoom>=10&&($scope.mapCenter={lat:args.model.lat,lng:args.model.lng,zoom:$scope.mapCenter.zoom});var addShape=function(){$scope.paths={},$scope.pathsObj.circleMarker.latlngs={lat:args.model.lat,lng:args.model.lng},$scope.paths.circleMarker=$scope.pathsObj.circleMarker};addShape()}}),$scope.$watch(function(){return $cookies.get("SessionEventID")},function(newValue){if(void 0===newValue)return toastr.options.positionClass="toast-bottom-right",toastr.options.timeOut="8000",toastr.options.closeButton=!0,void toastr.warning("No sites are showing because you have no filters applied. Please select at least one search parameter.","Map Filters");$scope.sessionEvent=null!==$cookies.get("SessionEventName")&&void 0!==$cookies.get("SessionEventName")?$cookies.get("SessionEventName"):"All Events";var evID=newValue;spinnerService.show("mapSpinner"),$scope.selectedMarkerNum=0,$scope.paths={},$scope.sitesPromise=EVENT.getEventSites({id:evID},function(response){spinnerService.hide("mapSpinner"),showEventSites(response)},function(errorResponse){$scope.error="Could not fetch sites"})}),$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1});$scope.$on("leafletDirectiveMap.click",function(event,args){if(1==$scope.createSiteModeActive){removeUserCreatedSite();var leafEvent=args.leafletEvent;$scope.userCreatedSite={latitude:leafEvent.latlng.lat,longitude:leafEvent.latlng.lng},$scope.markers.push({layer:"newSite",lat:$scope.userCreatedSite.latitude,lng:$scope.userCreatedSite.longitude,site_id:"newSite",icon:icons.newSite,message:"New draggable STN site",draggable:!0,focus:!1,label:{message:"New Site",options:{noHide:!0,className:"newSiteLabel"}}})}});var removeUserCreatedSite=function(){var createdSiteIndex=$scope.markers.map(function(obj){return obj.site_id}).indexOf("newSite");createdSiteIndex>-1&&($scope.markers.splice(createdSiteIndex,1),$scope.userCreatedSite={})};$scope.$on("leafletDirectiveMarker.dragend",function(event,args){var dragendLocation=args.model;$scope.userCreatedSite={latitude:dragendLocation.lat,longitude:dragendLocation.lng}}),$scope.$watch("createSiteModeActive",function(){$scope.createSiteButtonText=$scope.createSiteModeActive?"Cancel Create Site Mode":"Create New Site on Map",$scope.mapStyle=$scope.createSiteModeActive?{cursor:"crosshair"}:{cursor:"grab"},$scope.createSiteModeActive||removeUserCreatedSite()}),$scope.createSiteFromMap=function(){void 0!==$scope.userCreatedSite.latitude&&void 0!==$scope.userCreatedSite.longitude?$state.go("site.dashboard",{id:0,latitude:$scope.userCreatedSite.latitude,longitude:$scope.userCreatedSite.longitude}):alert("Please click a location on the map to create a site this way.")},leafletData.getMap().then(function(map){var geoSearchControl=new L.Control.GeoSearch({provider:new L.GeoSearch.Provider.Esri,position:"topleft",zoomLevel:15});geoSearchControl.addTo(map)}),delete $http.defaults.headers.common.Authorization,angular.extend($scope,{events:{markers:{enable:leafletMarkerEvents.getAvailableEvents()}},mapCenter:{lat:41.278,lng:-92.336,zoom:4,minZoom:4},controls:{},markersWatchOptions:{doWatch:!0,isDeep:!0,individual:{doWatch:!0,isDeep:!1}},paths:{},markers:[],markersLatLngArray:[],createSiteModeActive:!1,userCreatedSite:{},layers:{baselayers:{gray:{name:"Gray",type:"agsBase",layer:"Gray",visible:!1},streets:{name:"Streets",type:"agsBase",layer:"Streets",visible:!1},topo:{name:"World Topographic",type:"agsBase",layer:"Topographic",visible:!1},national:{name:"National Geographic",type:"agsBase",layer:"NationalGeographic",visible:!1},oceans:{name:"Oceans",type:"agsBase",layer:"Oceans",visible:!1},darkgray:{name:"DarkGray",type:"agsBase",layer:"DarkGray",visible:!1},imagery:{name:"Imagery",type:"agsBase",layer:"Imagery",visible:!1},shadedrelief:{name:"Shaded Relief",type:"agsBase",layer:"ShadedRelief",visible:!1},terrain:{name:"Terrain",type:"agsBase",layer:"Terrain",visible:!1}},overlays:{stnSites:{type:"group",name:"STN Sites",visible:!0},stnSitesAll:{type:"group",name:"STN Sites All",visible:!0},newSite:{type:"group",name:"newSite",visible:!0,layerParams:{showOnSelector:!1}},nwis:{name:"USGS real-time streamgages",type:"agsFeature",url:"https://stnmapservices.wim.usgs.gov:6443/arcgis/rest/services/STN/STN_nwis_rt/MapServer/0",visible:!1,layerOptions:{pointToLayer:function(geojson,latlng){return L.marker(latlng,{icon:icons.nwis})},onEachFeature:function(feature,layer){layer.bindPopup(feature.properties.PopupInfo+'<br><img style="width: 350px" src="http://waterdata.usgs.gov/nwisweb/graph?agency_cd=USGS&site_no='+feature.properties.Name+'&parm_cd=00065&period=7">')}}},ahps:{name:"AHPS Gages",type:"agsFeature",url:"https://idpgis.ncep.noaa.gov/arcgis/rest/services/NWS_Observations/ahps_riv_gauges/MapServer/0",visible:!1,layerOptions:{opacity:1,pointToLayer:function(geojson,latlng){return L.marker(latlng,{icon:icons[geojson.properties.status]})},onEachFeature:function(feature,layer){var graphURL="https://water.weather.gov/resources/hydrographs/"+feature.properties.gaugelid.toLowerCase()+"_hg.png";layer.bindPopup("<b>Gage ID: </b>"+feature.properties.gaugelid+"</br><a target='_blank' href='"+feature.properties.url+"'><img title='Click for details page' width=300 src='"+graphURL+"'/></a>")}}},radar:{name:"Weather Radar",type:"agsDynamic",url:"https://idpgis.ncep.noaa.gov/arcgis/rest/services/NWS_Observations/radar_base_reflectivity/MapServer",visible:!1,layerOptions:{layers:[0],opacity:1}},watchWarn:{name:"NWS Watches & Warnings",type:"agsDynamic",url:"https://idpgis.ncep.noaa.gov/arcgis/rest/services/NWS_Forecasts_Guidance_Warnings/watch_warn_adv/MapServer",visible:!1,layerOptions:{layers:[1],opacity:1}},lmwa:{name:"Limit Moderate Wave Action",type:"agsDynamic",url:"https://hazards.fema.gov/gis/nfhl/rest/services/public/NFHL/MapServer",visible:!1,layerOptions:{layers:[19],opacity:1}},floodBounds:{name:"Flood Hazard Boundaries",type:"agsDynamic",url:"https://hazards.fema.gov/gis/nfhl/rest/services/public/NFHL/MapServer",visible:!1,layerOptions:{layers:[27],opacity:1}},floodZones:{name:"Flood Hazard Zones",type:"agsDynamic",url:"https://hazards.fema.gov/gis/nfhl/rest/services/public/NFHL/MapServer",visible:!1,layerOptions:{layers:[28],opacity:.7}}}}})}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("mainCtrl",["$scope","$rootScope","$document","$cookies","$uibModal","$location","$state",function($scope,$rootScope,$document,$cookies,$uibModal,$location,$state){if($rootScope.isAuth={},$rootScope.activeMenu="home",void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$rootScope.isAuth.val=!1,$location.path("/login");else{if(void 0!==$document[0].documentMode){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Warning</h3></div><div class="modal-body"><p>This application uses functionality that is not completely supported by Internet Explorer. The preferred browser is Chrome (bison connect).</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}$rootScope.isAuth.val=!0,$rootScope.usersName=$cookies.get("usersName"),$rootScope.userID=$cookies.get("mID");var EventName=$cookies.get("SessionEventName");null!==EventName&&void 0!==EventName&&($rootScope.sessionEvent="Session Event: "+EventName+"."),$state.go("map")}}])}(),function(){"use strict";var LogInOutController=angular.module("LogInOutController",[]);LogInOutController.controller("loginCtrl",["$scope","$state","$location","$uibModal","$http","$cookies","$rootScope","$document","SERVER_URL","Login",function($scope,$state,$location,$uibModal,$http,$cookies,$rootScope,$document,SERVER_URL,Login){if($("[type=password]").keypress(function(e){var $password=$(this),tooltipVisible=$(".tooltip").is(":visible"),s=String.fromCharCode(e.which);s.toUpperCase()!==s||s.toLowerCase()===s||e.shiftKey?tooltipVisible&&$password.tooltip("hide"):tooltipVisible||$password.tooltip("show"),$password.blur(function(e){$password.tooltip("hide")})}),void 0!==$document[0].documentMode){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Warning</h3></div><div class="modal-body"><p>This application uses functionality that is not completely supported by Internet Explorer. The preferred browser is Chrome (bison connect).</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}Date.prototype.addHours=function(h){return this.setHours(this.getHours()+h),this},$scope.serverURL=SERVER_URL,$scope.submit=function(){$rootScope.stateIsLoading.showLoading=!0;var up=({username:$scope.username,password:$scope.password},$scope.username+":"+$scope.password);$http.defaults.headers.common.Authorization="Basic "+btoa(up),$http.defaults.headers.common.Accept="application/json",Login.login({},function(response){var user=response;if(void 0!==user){var usersNAME=user.fname+" "+user.lname,enc=btoa($scope.username.concat(":",$scope.password)),expireDate=(new Date).addHours(8);$cookies.put("STNCreds",enc,{expires:expireDate}),$cookies.put("STNUsername",$scope.username),$cookies.put("usersName",usersNAME),$cookies.put("mID",user.member_id);var roleName;switch(user.role_id){case 1:roleName="Admin";break;case 2:roleName="Manager";break;case 3:roleName="Field";break;case 4:roleName="Public";break;default:roleName="CitizenManager"}$cookies.put("usersRole",roleName),$rootScope.isAuth.val=!0,$rootScope.usersName=usersNAME,$rootScope.userID=user.member_id,void 0!==$rootScope.returnToState?$state.go($rootScope.returnToState,{id:$rootScope.returnToStateParams}):$state.go("map")}else $rootScope.stateIsLoading.showLoading=!1,$scope.error="Login Failed"},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1;var modalInstance=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>There was an error.</p><p>Error: {{status}} - {{statusText}}</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.status=errorResponse.status,$scope.statusText=errorResponse.statusText}],size:"sm"});modalInstance.result.then(function(fieldFocus){$location.path("/login")})})}}]),LogInOutController.controller("logoutCtrl",["$scope","$rootScope","$cookies","$location",function($scope,$rootScope,$cookies,$location){$scope.logout=function(){$cookies.remove("STNCreds"),$cookies.remove("STNUsername"),$cookies.remove("usersName"),$cookies.remove("usersRole"),$cookies.remove("mID"),$cookies.remove("SessionEventID"),$cookies.remove("SessionEventName"),$rootScope.thisPage=void 0,$rootScope.returnToState=void 0,$rootScope.returnToStateParams=void 0,$rootScope.stateIsLoading=void 0,$rootScope.activeMenu=void 0,$rootScope.sessionEvent=void 0,$rootScope.isAuth=void 0,$rootScope.searchTerm=void 0,$rootScope.searchParams=void 0,$rootScope.approvalSearch=void 0,$location.path("/login")}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("quickHWMCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$uibModal","$filter","allHorDatums","allHorCollMethods","allStates","allCounties","allOPTypes","allVertDatums","allVertColMethods","allOPQualities","allHWMTypes","allHWMQualities","allMarkers","SITE","OBJECTIVE_POINT","HWM",function($scope,$rootScope,$cookies,$location,$state,$http,$uibModal,$filter,allHorDatums,allHorCollMethods,allStates,allCounties,allOPTypes,allVertDatums,allVertColMethods,allOPQualities,allHWMTypes,allHWMQualities,allMarkers,SITE,OBJECTIVE_POINT,HWM){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$rootScope.thisPage="Quick HWM",$scope.qhwmForm={};var makeAdate=function(d){var aDate=new Date;""!==d&&void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};$scope.decDegORdms={},$scope.aSite={MEMBER_ID:$cookies.get("mID")},$scope.aOP={DATE_ESTABLISHED:makeAdate("")},$scope.aHWM={HWM_ENVIRONMENT:"Riverine",BANK:"N/A",FLAG_DATE:makeAdate(""),STILLWATER:0},$scope.status={siteOpen:!0,opOpen:!1,hwmOpen:!1},$scope.removeOPCarray=[],$scope.addedIdentifiers=[],$scope.showControlIDinput=!1,$scope.horDatumList=allHorDatums,$scope.horCollMethodList=allHorCollMethods,$scope.stateList=allStates,$scope.allCountyList=allCounties,$scope.stateCountyList=[],$scope.opTypeList=allOPTypes,$scope.vertDatumList=allVertDatums,$scope.vertCollMethodList=allVertColMethods,$scope.opQualList=allOPQualities,$scope.hwmTypeList=allHWMTypes,$scope.hwmQualList=allHWMQualities,$scope.markerList=allMarkers,$scope.FTorMETER="ft",$scope.FTorCM="ft",$scope.addNewIdentifier=function(){$scope.addedIdentifiers.push({OBJECTIVE_POINT_ID:$scope.aOP.OBJECTIVE_POINT_ID,IDENTIFIER:"",IDENTIFIER_TYPE:""}),$scope.showControlIDinput=!0},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.decDegORdms.val="dd",$scope.DMS={};var azimuth=function(deg,min,sec){var azi=0;return 0>deg?(azi=-1*deg+1*min/60+1*sec/3600,(-1*azi).toFixed(5)):(azi=1*deg+1*min/60+1*sec/3600,azi.toFixed(5))},deg_to_dms=function(deg){0>deg&&(deg=deg.toString(),deg=deg.substring(1));var d=Math.floor(deg),minfloat=60*(deg-d),m=Math.floor(minfloat),s=(60*(minfloat-m)).toFixed(3);return""+d+":"+m+":"+s};$scope.latLongChange=function(){if("dd"==$scope.decDegORdms.val){if(void 0!==$scope.DMS.LADeg){$scope.aSite.LATITUDE_DD=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.aSite.LONGITUDE_DD=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)}}else if(void 0!==$scope.aSite.LATITUDE_DD){var latDMS=deg_to_dms($scope.aSite.LATITUDE_DD).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.aSite.LONGITUDE_DD),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2]}},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.getAddress=function(){delete $scope.aSite.ADDRESS,delete $scope.aSite.CITY,delete $scope.aSite.STATE,$scope.stateCountyList=[],delete $scope.aSite.ZIP,$rootScope.stateIsLoading.showLoading=!0;var geocoder=new google.maps.Geocoder,latlng=new google.maps.LatLng($scope.aSite.LATITUDE_DD,$scope.aSite.LONGITUDE_DD);geocoder.geocode({latLng:latlng},function(results,status){if(status==google.maps.GeocoderStatus.OK){var address_components=results[0].address_components,components={};$.each(address_components,function(k,v1){$.each(v1.types,function(k2,v2){components[v2]=v1.long_name})}),$scope.aSite.ADDRESS=void 0!==components.street_number?components.street_number+" "+components.route:components.route,$scope.aSite.CITY=components.locality;var thisState=$scope.stateList.filter(function(s){return s.STATE_NAME==components.administrative_area_level_1})[0];void 0!==thisState?($scope.aSite.STATE=thisState.STATE_ABBREV,$scope.stateCountyList=$scope.allCountyList.filter(function(c){return c.STATE_ID==thisState.STATE_ID}),$scope.aSite.COUNTY=components.administrative_area_level_2,$scope.aSite.ZIP=components.postal_code,$rootScope.stateIsLoading.showLoading=!1,$scope.$apply()):($rootScope.stateIsLoading.showLoading=!1,toastr.error("The Latitude/Longitude did not return a location within the U.S."))}else $rootScope.stateIsLoading.showLoading=!1,
toastr.error("There was an error getting address. Please try again.")})},$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1}),$scope.updateCountyList=function(s){var thisState=$scope.stateList.filter(function(st){return st.STATE_ABBREV==s})[0];$scope.stateCountyList=$scope.allCountyList.filter(function(c){return c.STATE_ID==thisState.STATE_ID})},$scope.UnquantChecked=function(){1==$scope.aOP.UNQUANTIFIED&&($scope.aOP.UNCERTAINTY=null)};var trimOP=function(op){var OBJ_PT={OBJECTIVE_POINT_ID:void 0!==op.OBJECTIVE_POINT_ID?op.OBJECTIVE_POINT_ID:0,NAME:op.NAME,DESCRIPTION:op.DESCRIPTION,ELEV_FT:void 0!==op.ELEV_FT?op.ELEV_FT:null,DATE_ESTABLISHED:op.DATE_ESTABLISHED,OP_IS_DESTROYED:void 0!==op.OP_IS_DESTROYED?op.OP_IS_DESTROYED:0,OP_NOTES:void 0!==op.OP_NOTES?op.OP_NOTES:null,SITE_ID:op.SITE_ID,VDATUM_ID:void 0!==op.VDATUM_ID?op.VDATUM_ID:0,LATITUDE_DD:op.LATITUDE_DD,LONGITUDE_DD:op.LONGITUDE_DD,HDATUM_ID:void 0!==op.HDATUM_ID?op.HDATUM_ID:0,HCOLLECT_METHOD_ID:void 0!==op.HCOLLECT_METHOD_ID?op.HCOLLECT_METHOD_ID:0,VCOLLECT_METHOD_ID:void 0!==op.VCOLLECT_METHOD_ID?op.VCOLLECT_METHOD_ID:0,OP_TYPE_ID:op.OP_TYPE_ID,DATE_RECOVERED:void 0!==op.DATE_RECOVERED?op.DATE_RECOVERED:null,UNCERTAINTY:void 0!==op.UNCERTAINTY?op.UNCERTAINTY:null,UNQUANTIFIED:void 0!==op.UNQUANTIFIED?op.UNQUANTIFIED:null,OP_QUALITY_ID:void 0!==op.OP_QUALITY_ID?op.OP_QUALITY_ID:null};return OBJ_PT},formatDefaults=function(theOP){"meter"==theOP.FTorMETER&&($scope.aOP.FTorMETER="ft",$scope.aOP.ELEV_FT=3.2808*$scope.aOP.ELEV_FT),"cm"==theOP.FTorCM&&($scope.aOP.FTorCM="ft",$scope.aOP.UNCERTAINTY=$scope.aOP.UNCERTAINTY/30.48)};$scope.siteErrors=!1,$scope.opErrors=!1,$scope.hwmErrors=!1,$scope.create=function(){$rootScope.stateIsLoading.showLoading=!0;var theForm=$scope.qhwmForm.quickHWM;if($scope.siteErrors=!1,$scope.opErrors=!1,$scope.hwmErrors=!1,theForm.$valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var createdSiteID=0;$scope.aSite.LONGITUDE_DD>0&&($scope.aSite.LONGITUDE_DD=-1*$scope.aSite.LONGITUDE_DD),SITE.save($scope.aSite,function(response){createdSiteID=response.SITE_ID,$scope.aOP.SITE_ID=createdSiteID,$scope.aOP.LATITUDE_DD=response.LATITUDE_DD,$scope.aOP.LONGITUDE_DD=response.LONGITUDE_DD,$scope.aOP.HDATUM_ID=response.HDATUM_ID,$scope.aOP.HCOLLECT_METHOD_ID=response.HCOLLECT_METHOD_ID,$scope.aHWM.SITE_ID=createdSiteID,$scope.aHWM.WATERBODY=response.WATERBODY,$scope.aHWM.LATITUDE_DD=response.LATITUDE_DD,$scope.aHWM.LONGITUDE_DD=response.LONGITUDE_DD,$scope.aHWM.HCOLLECT_METHOD_ID=response.HCOLLECT_METHOD_ID,$scope.aHWM.HDATUM_ID=response.HDATUM_ID,$scope.aHWM.FLAG_TEAM_ID=response.MEMBER_ID,$scope.aHWM.EVENT_ID=$cookies.get("SessionEventID");var createdOP={};formatDefaults($scope.aOP);var OPtoPOST=trimOP($scope.aOP);OBJECTIVE_POINT.save(OPtoPOST,function(response){if(createdOP=response,$scope.addedIdentifiers.length>0)for(var opc=0;opc<$scope.addedIdentifiers.length;opc++)OBJECTIVE_POINT.createOPControlID({id:response.OBJECTIVE_POINT_ID},$scope.addedIdentifiers[opc]).$promise;void 0!==$scope.aHWM.SURVEY_DATE&&($scope.aHWM.SURVEY_TEAM_ID=$scope.aHWM.FLAG_TEAM_ID),void 0!==$scope.aHWM.ELEV_FT&&(void 0===$scope.aHWM.SURVEY_DATE&&($scope.aHWM.SURVEY_DATE=makeAdate("")),$scope.aHWM.SURVEY_TEAM_ID=$scope.aHWM.FLAG_TEAM_ID),HWM.save($scope.aHWM).$promise.then(function(response){toastr.success("Quick HWM created"),$rootScope.stateIsLoading.showLoading=!1,$location.path("/Site/"+createdSiteID+"/SiteDashboard").replace(),$scope.apply})})})}else $rootScope.stateIsLoading.showLoading=!1,$scope.status.siteOpen=!0,$scope.status.opOpen=!0,$scope.status.hwmOpen=!0,angular.element("[name='"+theForm.$name+"']").find(".ng-invalid:visible:first").focus(),(theForm.SITE_DESCRIPTION.$invalid||theForm.LATITUDE_DD.$invalid||theForm.LONGITUDE_DD.$invalid||theForm.HDATUM_ID.$invalid||theForm.HCOLLECT_METHOD_ID.$invalid||theForm.WATERBODY.$invalid||theForm.STATE.$invalidv||theForm.COUNTY.$invalid)&&($scope.siteErrors=!0),(theForm.OP_TYPE_ID.$invalid||theForm.NAME.$invalid||theForm.DESCRIPTION.$invalid||theForm.de.$invalid)&&($scope.opErrors=!0),(theForm.HWM_TYPE_ID.$invalid||theForm.HWM_ENVIRONMENT.$invalid||theForm.HWM_QUALITY_ID.$invalid||theForm.fd.$invalid)&&($scope.hwmErrors=!0),toastr.error("Quick HWM not created.")}}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("hwmModalCtrl",["$scope","$rootScope","$cookies","$http","$sce","$uibModalInstance","$uibModal","SERVER_URL","FILE_STAMP","allDropdowns","Site_Files","thisHWM","hwmApproval","agencyList","hwmSite","allMembers","HWM","SOURCE","FILE",function($scope,$rootScope,$cookies,$http,$sce,$uibModalInstance,$uibModal,SERVER_URL,FILE_STAMP,allDropdowns,Site_Files,thisHWM,hwmApproval,agencyList,hwmSite,allMembers,HWM,SOURCE,FILE){$scope.view={HWMval:"detail"},$scope.h={hOpen:!0,hFileOpen:!1},$scope.hwmTypeList=allDropdowns[0],$scope.hwmQualList=allDropdowns[1],$scope.HDatumsList=allDropdowns[2],$scope.hCollMList=allDropdowns[3],$scope.VDatumsList=allDropdowns[4],$scope.vCollMList=allDropdowns[5],$scope.markerList=allDropdowns[6],$scope.eventList=allDropdowns[7],$scope.fileTypeList=allDropdowns[8],$scope.allSFiles=Site_Files.getAllSiteFiles(),$scope.HWMFiles="empty"!==thisHWM?$scope.allSFiles.filter(function(sf){return sf.hwm_id==thisHWM.hwm_id}):[],$scope.hwmImageFiles=$scope.HWMFiles.filter(function(hf){return 1===hf.filetype_id}),$scope.showFileForm=!1,$scope.userRole=$cookies.get("usersRole"),$scope.FlagMember="",$scope.showEventDD=!1,$scope.adminChanged={},$scope.serverURL=SERVER_URL,$scope.showChangeEventDD=function(){$scope.showEventDD=!$scope.showEventDD},$scope.ChangeEvent=function(){$scope.EventName=$scope.eventList.filter(function(el){return el.event_id==$scope.adminChanged.event_id})[0].event_name},$scope.LoggedInMember=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aHWM={},$scope.DMS={},$scope.thisHWMsite=hwmSite,$scope.ApprovalInfo={},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0};var azimuth=function(deg,min,sec){var azi=0;return 0>deg?(azi=-1*deg+1*min/60+1*sec/3600,(-1*azi).toFixed(5)):(azi=1*deg+1*min/60+1*sec/3600,azi.toFixed(5))},deg_to_dms=function(deg){0>deg&&(deg=deg.toString(),deg=deg.substring(1));var d=Math.floor(deg),minfloat=60*(deg-d),m=Math.floor(minfloat),s=(60*(minfloat-m)).toFixed(3);return""+d+":"+m+":"+s};$scope.latLongChange=function(){if("edit"==$scope.createOReditHWM){if("dd"==$scope.hwmCopy.decDegORdms)void 0!==$scope.DMS.LADeg&&($scope.hwmCopy.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.hwmCopy.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),$scope.DMS={});else if(void 0!==$scope.hwmCopy.latitude_dd){var latDMS=deg_to_dms($scope.hwmCopy.latitude_dd).toString(),ladDMSarray=latDMS.split(":");$scope.DMS.LADeg=ladDMSarray[0],$scope.DMS.LAMin=ladDMSarray[1],$scope.DMS.LASec=ladDMSarray[2];var longDMS=deg_to_dms($scope.hwmCopy.longitude_dd),longDMSarray=longDMS.split(":");$scope.DMS.LODeg=-1*longDMSarray[0],$scope.DMS.LOMin=longDMSarray[1],$scope.DMS.LOSec=longDMSarray[2],$scope.hwmCopy.latitude_dd=void 0,$scope.hwmCopy.longitude_dd=void 0}}else if("dd"==$scope.aHWM.decDegORdms)void 0!==$scope.DMS.LADeg&&($scope.aHWM.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec),$scope.aHWM.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec),$scope.DMS={});else if(void 0!==$scope.aHWM.latitude_dd){var create_latDMS=deg_to_dms($scope.aHWM.latitude_dd).toString(),create_ladDMSarray=create_latDMS.split(":");$scope.DMS.LADeg=create_ladDMSarray[0],$scope.DMS.LAMin=create_ladDMSarray[1],$scope.DMS.LASec=create_ladDMSarray[2];var create_longDMS=deg_to_dms($scope.aHWM.longitude_dd),create_longDMSarray=create_longDMS.split(":");$scope.DMS.LODeg=-1*create_longDMSarray[0],$scope.DMS.LOMin=create_longDMSarray[1],$scope.DMS.LOSec=create_longDMSarray[2],$scope.aHWM.latitude_dd=void 0,$scope.aHWM.longitude_dd=void 0}};var openLatModal=function(w){var latModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Latitude must be between 0 and 73.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});latModal.result.then(function(fieldFocus){"latlong"==w?$("#latitude_dd").focus():$("#LaDeg").focus()})},openLongModal=function(w){var longModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The Longitude must be between -175.0 and -60.0</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});longModal.result.then(function(fieldFocus){"latlong"==w?$("#longitude_dd").focus():$("#LoDeg").focus()})};$scope.checkValue=function(d){if("dms"==d)($scope.DMS.LADeg<0||$scope.DMS.LADeg>73)&&openLatModal("dms"),($scope.DMS.LODeg<-175||$scope.DMS.LODeg>-60)&&openLongModal("dms");else{var h="edit"==$scope.view.HWMval?$scope.hwmCopy:$scope.aHWM;(h.latitude_dd<0||h.latitude_dd>73)&&openLatModal("latlong"),(h.longitude_dd<-175||h.longitude_dd>-60)&&openLongModal("latlong")}},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.chooseQuality=function(){var h="edit"==$scope.view.HWMval?$scope.hwmCopy:$scope.aHWM;if(""!==h.hwm_uncertainty){var x=Number(h.hwm_uncertainty);h.hwm_quality_id=$scope.hwmQualList.filter(function(h){return h.min_range<=x&&h.max_range>=x})[0].hwm_quality_id}},$scope.compareToUncertainty=function(){var h="edit"==$scope.view.HWMval?$scope.hwmCopy:$scope.aHWM;if(""!==h.hwm_uncertainty&&void 0!==h.hwm_uncertainty){var x=Number(h.hwm_uncertainty),matchingQualId=$scope.hwmQualList.filter(function(h){return h.min_range<=x&&h.max_range>=x})[0].hwm_quality_id;if(h.hwm_quality_id!==matchingQualId){var incongruentModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Warning</h3></div><div class="modal-body"><p>There is a mismatch between the hwm quality chosen and the hwm uncertainty above. Please correct your hwm uncertainty.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});incongruentModal.result.then(function(){angular.element("[name='hwm_uncertainty']").focus()})}}};var makeAdate=function(d){var aDate=new Date;""!==d&&void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};"empty"!=thisHWM?($scope.createOReditHWM="edit",$scope.aHWM=angular.copy(thisHWM),$scope.aHWM.hwm_type=$scope.hwmTypeList.filter(function(ht){return ht.hwm_type_id==$scope.aHWM.hwm_type_id})[0].hwm_type,null!==$scope.aHWM.stillwater&&($scope.aHWM.Tranquil=$scope.aHWM.stillwater>0?"Yes":"No"),$scope.aHWM.Marker=$scope.aHWM.marker_id>0?$scope.markerList.filter(function(m){return m.marker_id==$scope.aHWM.marker_id})[0].marker1:"",$scope.aHWM.Quality=$scope.aHWM.hwm_quality_id>0?$scope.hwmQualList.filter(function(hq){return hq.hwm_quality_id==$scope.aHWM.hwm_quality_id})[0].hwm_quality:"",$scope.aHWM.hdatum=$scope.aHWM.hdatum_id>0?$scope.HDatumsList.filter(function(hd){return hd.datum_id==$scope.aHWM.hdatum_id})[0].datum_name:"",$scope.aHWM.hCollectMethod=$scope.aHWM.hcollect_method_id>0?$scope.hCollMList.filter(function(hc){return hc.hcollect_method_id==$scope.aHWM.hcollect_method_id})[0].hcollect_method:"",$scope.aHWM.vDatum=$scope.aHWM.vdatum_id>0?$scope.VDatumsList.filter(function(vd){return vd.datum_id==$scope.aHWM.vdatum_id})[0].datum_name:"",$scope.aHWM.vCollectMethod=$scope.aHWM.vcollect_method_id>0?$scope.vCollMList.filter(function(vc){return vc.vcollect_method_id==$scope.aHWM.vcollect_method_id})[0].vcollect_method:"",void 0!==$scope.aHWM.approval_id&&HWM.getHWMApproval({id:$scope.aHWM.hwm_id}).$promise.then(function(response){$scope.ApprovalInfo.approvalDate=new Date(response.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==response.member_id})[0]}),$scope.hwmModalHeader="HWM Information",$scope.EventName=$scope.aHWM.event_id>0?$scope.eventList.filter(function(e){return e.event_id==$scope.aHWM.event_id})[0].event_name:"None provided",$scope.aHWM.flag_date=makeAdate($scope.aHWM.flag_date),null!==$scope.aHWM.survey_date&&void 0!==$scope.aHWM.survey_date&&($scope.aHWM.survey_date=makeAdate($scope.aHWM.survey_date),$scope.SurveyMember=allMembers.filter(function(m){return m.member_id==$scope.aHWM.survey_member_id})[0]),$scope.FlagMember=allMembers.filter(function(m){return m.member_id==$scope.aHWM.flag_member_id})[0]):($scope.hwmModalHeader="Create new HWM",$scope.createOReditHWM="create",$scope.aHWM={site_id:$scope.thisHWMsite.site_id,event_id:$cookies.get("SessionEventID"),hwm_environment:"Riverine",bank:"N/A",stillwater:0,latitude_dd:hwmSite.latitude_dd,longitude_dd:hwmSite.longitude_dd,waterbody:hwmSite.waterbody,hdatum_id:hwmSite.hdatum_id,hcollect_method_id:hwmSite.hcollect_method_id,flag_date:makeAdate(""),flag_member_id:$scope.LoggedInMember.member_id},$scope.EventName=$cookies.get("SessionEventName"),$scope.FlagMember=$scope.LoggedInMember),$scope.aHWM.decDegORdms="dd",$scope.FTorCM="ft",$scope.create=function(valid){if(valid){var createdHWM={};void 0!==$scope.DMS.LADeg&&($scope.aHWM.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.aHWM.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)),void 0!==$scope.aHWM.survey_date&&null!==$scope.aHWM.survey_date&&($scope.aHWM.survey_member_id=$scope.flag_member_id),"cm"==$scope.FTorCM&&($scope.FTorCM="ft",void 0!==$scope.aHWM.uncertainty&&($scope.aHWM.uncertainty=$scope.aHWM.uncertainty/30.48)),void 0!==$scope.aHWM.elev_ft&&null!==$scope.aHWM.elev_ft&&(void 0===$scope.aHWM.survey_date&&($scope.aHWM.survey_date=makeAdate("")),$scope.aHWM.survey_member_id=$scope.aHWM.flag_member_id),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM.save($scope.aHWM).$promise.then(function(response){createdHWM=response,toastr.success("HWM created");var sendBack=[createdHWM,"created"];$uibModalInstance.close(sendBack)})}},$scope.approveHWM=function(){var thisHWM=$scope.aHWM,approveModal=$uibModal.open({template:"<div class='modal-header'><h3 class='modal-title'>Approve HWM</h3></div><div class='modal-body'><p>Are you ready to approve this HWM?</p><p>The surveyed elevation is {{approveHWM.elev_ft || '---'}}</p><p>The height above ground is {{approveHWM.height_above_gnd || '---'}}</p></div><div class='modal-footer'><button class='btn btn-primary' ng-click='approveIt()'>Approve</button><button class='btn btn-warning' ng-click='cancel()'>Cancel</button></div>",controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.approveHWM=thisHWM,$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.approveIt=function(){$uibModalInstance.close(thisHWM)}}],size:"sm"});approveModal.result.then(function(h){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM.approveHWM({id:h.hwm_id}).$promise.then(function(approvalResponse){h.approval_id=approvalResponse.approval_id,toastr.success("HWM Approved"),$scope.ApprovalInfo.approvalDate=new Date(approvalResponse.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==approvalResponse.member_id})[0]},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.unApproveHWM=function(){var thisHWM=$scope.aHWM,unapproveModal=$uibModal.open({template:"<div class='modal-header'><h3 class='modal-title'>Remove Approval</h3></div><div class='modal-body'><p>Are you sure you wan to unapprove this HWM?</p></div><div class='modal-footer'><button class='btn btn-primary' ng-click='unApproveIt()'>Unapprove</button><button class='btn btn-warning' ng-click='cancel()'>Cancel</button></div>",controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.approveHWM=thisHWM,$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.unApproveIt=function(){$uibModalInstance.close(thisHWM)}}],size:"sm"});unapproveModal.result.then(function(h){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM.unApproveHWM({id:h.hwm_id}).$promise.then(function(){h.approval_id=null,toastr.success("HWM Unapproved"),$scope.ApprovalInfo={}},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})};var formatHWM=function(h){var formattedHWM={hwm_id:h.hwm_id,bank:h.bank,elev_ft:h.elev_ft,event_id:h.event_id,flag_date:h.flag_date,flag_member_id:h.flag_member_id,hcollect_method_id:h.hcollect_method_id,hdatum_id:h.hdatum_id,height_above_gnd:h.height_above_gnd,hwm_environment:h.hwm_environment,hwm_locationdescription:h.hwm_locationdescription,hwm_notes:h.hwm_notes,hwm_uncertainty:h.hwm_uncertainty,hwm_quality_id:h.hwm_quality_id,hwm_type_id:h.hwm_type_id,latitude_dd:h.latitude_dd,longitude_dd:h.longitude_dd,marker_id:h.marker_id,site_id:h.site_id,stillwater:h.stillwater,survey_date:h.survey_date,survey_member_id:h.survey_member_id,vcollect_method_id:h.vcollect_method_id,vdatum_id:h.vdatum_id,waterbody:h.waterbody};return formattedHWM};$scope.save=function(valid){if(valid){void 0!==$scope.DMS.LADeg&&($scope.hwmCopy.latitude_dd=azimuth($scope.DMS.LADeg,$scope.DMS.LAMin,$scope.DMS.LASec)),void 0!==$scope.DMS.LODeg&&($scope.hwmCopy.longitude_dd=azimuth($scope.DMS.LODeg,$scope.DMS.LOMin,$scope.DMS.LOSec)),void 0!==$scope.adminChanged.event_id&&($scope.hwmCopy.event_id=$scope.adminChanged.event_id),void 0!==$scope.hwmCopy.survey_date&&void 0===$scope.hwmCopy.survey_member_id&&($scope.hwmCopy.survey_member_id=$cookies.get("mID")),"cm"==$scope.FTorCM&&($scope.FTorCM="ft",void 0!==$scope.hwmCopy.uncertainty&&($scope.hwmCopy.uncertainty=$scope.hwmCopy.uncertainty/30.48)),void 0!==$scope.hwmCopy.elev_ft&&null!==$scope.hwmCopy.elev_ft&&(void 0===$scope.hwmCopy.survey_date&&($scope.hwmCopy.survey_date=makeAdate("")),void 0===$scope.hwmCopy.survey_member_id&&($scope.hwmCopy.survey_member_id=$cookies.get("mID"))),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var cleanHWM=formatHWM($scope.hwmCopy);HWM.update({id:cleanHWM.hwm_id},cleanHWM).$promise.then(function(response){toastr.success("HWM updated"),$scope.aHWM=response,thisHWM=response,$scope.aHWM.hwm_type=$scope.hwmTypeList.filter(function(ht){return ht.hwm_type_id==$scope.aHWM.hwm_type_id})[0].hwm_type,null!==$scope.aHWM.stillwater&&($scope.aHWM.Tranquil=$scope.aHWM.stillwater>0?"Yes":"No"),$scope.aHWM.Marker=$scope.aHWM.marker_id>0?$scope.markerList.filter(function(m){return m.marker_id==$scope.aHWM.marker_id})[0].marker1:"",$scope.aHWM.Quality=$scope.aHWM.hwm_quality_id>0?$scope.hwmQualList.filter(function(hq){return hq.hwm_quality_id==$scope.aHWM.hwm_quality_id})[0].hwm_quality:"",$scope.aHWM.hdatum=$scope.aHWM.hdatum_id>0?$scope.HDatumsList.filter(function(hd){return hd.datum_id==$scope.aHWM.hdatum_id})[0].datum_name:"",$scope.aHWM.hCollectMethod=$scope.aHWM.hcollect_method_id>0?$scope.hCollMList.filter(function(hc){return hc.hcollect_method_id==$scope.aHWM.hcollect_method_id})[0].hcollect_method:"",$scope.aHWM.vDatum=$scope.aHWM.vdatum_id>0?$scope.VDatumsList.filter(function(vd){return vd.datum_id==$scope.aHWM.vdatum_id})[0].datum_name:"",$scope.aHWM.vCollectMethod=$scope.aHWM.vcollect_method_id>0?$scope.vCollMList.filter(function(vc){return vc.vcollect_method_id==$scope.aHWM.vcollect_method_id})[0].vcollect_method:"",$scope.aHWM.flag_date=makeAdate($scope.aHWM.flag_date),void 0!==hwmApproval&&($scope.ApprovalInfo.approvalDate=new Date(hwmApproval.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==hwmApproval.member_id})[0]),null!==$scope.aHWM.survey_date&&void 0!==$scope.aHWM.survey_date&&($scope.aHWM.survey_date=makeAdate($scope.aHWM.survey_date),$scope.SurveyMember=allMembers.filter(function(m){return m.member_id==$scope.aHWM.survey_member_id})[0]),$scope.FlagMember=allMembers.filter(function(m){return m.member_id==$scope.aHWM.flag_member_id})[0],$scope.hwmCopy={},$scope.view.HWMval="detail"})}},$scope.deleteHWM=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aHWM},what:function(){return"HWM"}}});DeleteModalInstance.result.then(function(hwmToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),HWM["delete"]({id:hwmToRemove.hwm_id},hwmToRemove).$promise.then(function(){$scope.HWMFiles=[],$scope.hwmImageFiles=[];for(var l=$scope.allSFiles.length;l--;)$scope.allSFiles[l].hwm_id==hwmToRemove.hwm_id&&$scope.allSFiles.splice(l,1);Site_Files.setAllSiteFiles($scope.allSFiles),toastr.success("HWM Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.cancel=function(){$rootScope.stateIsLoading.showLoading=!1;var sendBack=$scope.aHWM;$uibModalInstance.close(sendBack)},$scope.wannaEditHWM=function(){$scope.view.HWMval="edit",$scope.hwmCopy=angular.copy($scope.aHWM),$scope.hwmCopy.decDegORdms="dd"},$scope.cancelHWMEdit=function(){$scope.view.HWMval="detail",$scope.hwmCopy=[],$scope.adminChanged={},$scope.EventName=$scope.eventList.filter(function(e){return e.event_id==$scope.aHWM.event_id})[0].event_name},$scope.stamp=FILE_STAMP.getStamp(),$scope.fileItemExists=!0,$scope.saveFileUpload=function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.sFileIsUploading=!0;var fileParts={FileEntity:{file_id:$scope.aFile.file_id,name:$scope.aFile.name,description:$scope.aFile.description,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,file_date:$scope.aFile.file_date,hwm_id:$scope.aFile.hwm_id,site_id:$scope.aFile.site_id,filetype_id:$scope.aFile.filetype_id,source_id:$scope.aFile.source_id,path:$scope.aFile.path,data_file_id:$scope.aFile.data_file_id,instrument_id:$scope.aFile.instrument_id,photo_date:$scope.aFile.photo_date,is_nwis:$scope.aFile.is_nwis,objective_point_id:$scope.aFile.objective_point_id},File:void 0!==$scope.aFile.File1?$scope.aFile.File1:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),FILE_STAMP.setStamp(),$scope.stamp=FILE_STAMP.getStamp(),$scope.isPhoto=$scope.aFile.File1.type.indexOf("image")>-1?!0:!1,$scope.aFile.name=fresponse.name,$scope.aFile.path=fresponse.path,void 0!==$scope.aFile.File1&&($scope.aFile.File=$scope.aFile.File1,$scope.aFile.File1=void 0),fresponse.fileBelongsTo="HWM File",$scope.HWMFiles.splice($scope.existFileIndex,1),$scope.HWMFiles.push(fresponse),1===fresponse.filetype_id&&($scope.hwmImageFiles.splice($scope.existFileIndex,1),$scope.hwmImageFiles.push(fresponse)),$scope.allSFiles[$scope.allSFileIndex]=fresponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.sFileIsUploading=!1,$scope.fileItemExists=!0},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})},$scope.showFile=function(file){if($scope.fileTypes=$scope.fileTypeList,$scope.agencies=agencyList,$scope.existFileIndex=-1,$scope.existIMGFileIndex=-1,$scope.allSFileIndex=-1,$scope.aFile={},$scope.aSource={},0!==file){if($scope.existFileIndex=$scope.HWMFiles.indexOf(file),$scope.allSFileIndex=$scope.allSFiles.indexOf(file),$scope.existIMGFileIndex=$scope.hwmImageFiles.length>0?$scope.hwmImageFiles.indexOf(file):-1,$scope.aFile=angular.copy(file),FILE.getFileItem({id:$scope.aFile.file_id}).$promise.then(function(response){$scope.fileItemExists=response.Length>0?!0:!1}),$scope.aFile.fileType=$scope.fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,void 0!==$scope.aFile.name){var fI=$scope.aFile.name.lastIndexOf("."),fileExt=$scope.aFile.name.substring(fI+1);$scope.isPhoto=fileExt.match(/(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)?!0:!1}$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),null!==file.source_id&&SOURCE.query({id:file.source_id}).$promise.then(function(s){$scope.aSource=s,$scope.aSource.FULLname=$scope.aSource.source_name,$scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name})}else $scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname,$scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name;$scope.showFileForm=!0,$scope.updateAgencyForCaption=function(){1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name)}},$scope.createFile=function(valid){if(valid){$scope.HWMfileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){if(8!==$scope.aFile.filetype_id){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,photo_date:$scope.aFile.photo_date,description:$scope.aFile.description,site_id:$scope.thisHWMsite.site_id,source_id:response.source_id,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,hwm_id:$scope.aHWM.hwm_id},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="HWM File",$scope.HWMFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),1===fresponse.filetype_id&&$scope.hwmImageFiles.push(fresponse),$scope.showFileForm=!1,$scope.HWMfileIsUploading=!1},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error uploading file: "+errorResponse.statusText)})}else $scope.aFile.source_id=response.source_id,$scope.aFile.site_id=$scope.thisHWMsite.site_id,$scope.aFile.hwm_id=$scope.aHWM.hwm_id,FILE.save($scope.aFile).$promise.then(function(fresponse){toastr.success("Link saved"),fresponse.fileBelongsTo="HWM File",$scope.HWMFiles.push(fresponse),$scope.allSFiles.push(fresponse),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.HWMfileIsUploading=!1},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error creating Source info: "+errorResponse.statusText)})}},$scope.saveFile=function(valid){if(valid){$scope.HWMfileIsUploading=!0;{$scope.aFile.fileBelongsTo}$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.aSource.source_id&&($scope.aSource.source_name=$scope.aSource.FULLname,SOURCE.update({id:$scope.aSource.source_id},$scope.aSource).$promise.then(function(){FILE.update({id:$scope.aFile.file_id},$scope.aFile).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo="HWM File",$scope.HWMFiles[$scope.existFileIndex]=fileResponse,$scope.allSFiles[$scope.allSFileIndex]=fileResponse,Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1,$scope.HWMfileIsUploading=!1},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.HWMfileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)}))}},$scope.deleteFile=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed"),$scope.HWMFiles.splice($scope.existFileIndex,1),$scope.allSFiles.splice($scope.allSFileIndex,1),$scope.hwmImageFiles.splice($scope.existIMGFileIndex,1),Site_Files.setAllSiteFiles($scope.allSFiles),$scope.showFileForm=!1},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.cancelFile=function(){$scope.aFile={},$scope.aSource={},$scope.showFileForm=!1},$rootScope.stateIsLoading.showLoading=!1}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("hwmCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","$uibModal","$filter","$timeout","thisSite","thisSiteHWMs","HWM_Service","allAgencies","allHWMTypes","allHWMQualities","allHorDatums","allMarkers","allHorCollMethods","allVertDatums","allVertColMethods","allEvents","allFileTypes","MEMBER","HWM",function($scope,$rootScope,$cookies,$location,$state,$http,$uibModal,$filter,$timeout,thisSite,thisSiteHWMs,HWM_Service,allAgencies,allHWMTypes,allHWMQualities,allHorDatums,allMarkers,allHorCollMethods,allVertDatums,allVertColMethods,allEvents,allFileTypes,MEMBER,HWM){void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds")?($scope.auth=!1,$location.path("/login")):($scope.hwmCount={total:thisSiteHWMs.length},$scope.SiteHWMs=thisSiteHWMs,
HWM_Service.setAllSiteHWMs($scope.SiteHWMs),$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1,void 0!==newValue?($scope.SiteHWMs=thisSiteHWMs.filter(function(h){return h.event_id==$cookies.get("SessionEventID")}),$scope.hwmCount={total:$scope.SiteHWMs.length}):($scope.SiteHWMs=thisSiteHWMs,$scope.hwmCount={total:$scope.SiteHWMs.length})}),$scope.showHWMModal=function(HWMclicked){{var hwmFileTypes=allFileTypes.filter(function(hft){return"Photo"===hft.filetype||"Historic Citation"===hft.filetype||"Field Sheets"===hft.filetype||"Level Notes"===hft.filetype||"Other"===hft.filetype||"Link"===hft.filetype||"Sketch"===hft.filetype}),passAllLists=[allHWMTypes,allHWMQualities,allHorDatums,allHorCollMethods,allVertDatums,allVertColMethods,allMarkers,allEvents,hwmFileTypes];$scope.SiteHWMs.indexOf(HWMclicked)}$rootScope.stateIsLoading.showLoading=!0;var modalInstance=$uibModal.open({templateUrl:"HWMmodal.html",controller:"hwmModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{allDropdowns:function(){return passAllLists},thisHWM:function(){return 0!==HWMclicked?HWMclicked:"empty"},hwmApproval:function(){return 0!==HWMclicked&&void 0!==HWMclicked.approval_id&&HWMclicked.approval_id>0?HWM.getHWMApproval({id:HWMclicked.hwm_id}).$promise:void 0},hwmSite:function(){return thisSite},agencyList:function(){return allAgencies},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise}}});modalInstance.result.then(function(createdHWM){if("created"==createdHWM[1]&&($scope.SiteHWMs.push(createdHWM[0]),HWM_Service.setAllSiteHWMs($scope.SiteHWMs),$scope.hwmCount.total=$scope.SiteHWMs.length),void 0===createdHWM[1]){var indexClicked=$scope.SiteHWMs.indexOf(HWMclicked);$scope.SiteHWMs[indexClicked]=createdHWM,HWM_Service.setAllSiteHWMs($scope.SiteHWMs)}if("deleted"==createdHWM[1]){var indexClicked1=$scope.SiteHWMs.indexOf(HWMclicked);$scope.SiteHWMs.splice(indexClicked1,1),$scope.hwmCount.total=$scope.SiteHWMs.length,HWM_Service.setAllSiteHWMs($scope.SiteHWMs)}})})}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("historicHWMCtrl",["$scope","$rootScope","$cookies","$location","$http","$filter","$uibModal","SITE","HWM","OBJECTIVE_POINT","GEOCODE","thisEvent","HDatums","HCollectMeths","States","Counties","OPTypes","VDatums","HTypes","HWMQuals",function($scope,$rootScope,$cookies,$location,$http,$filter,$uibModal,SITE,HWM,OBJECTIVE_POINT,GEOCODE,thisEvent,HDatums,HCollectMeths,States,Counties,OPTypes,VDatums,HTypes,HWMQuals){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$scope.showLoading=!1,$scope.dynamic=0,$scope.max=0,$scope.hotInstance,$scope.columnWidths=[140,76,84,220,220,100,150,120,120,180,120,140,140,120,140,140,140,120],$scope.Changes=[],$scope.invalids=[],$scope.event=thisEvent,$scope.hDatumList=HDatums,$scope.hDatumArray=[],$scope.hCollectList=HCollectMeths,$scope.hcollectArray=[],$scope.stateList=States,$scope.stateArray=[],$scope.countyList=Counties,$scope.countyArray=[],$scope.opTypeList=OPTypes,$scope.opTypeArray=[],$scope.vDatumList=VDatums,$scope.vDatumArray=[],$scope.hwmTypeList=HTypes,$scope.hwmTypeArray=[],$scope.hwmEnvirList=["Coastal","Riverine"],$scope.hwmQualityList=HWMQuals,$scope.hwmQualityArray=[],$scope.historicHWMs=[],angular.forEach($scope.hDatumList,function(l){$scope.hDatumArray.push(l.datum_name)}),angular.forEach($scope.hCollectList,function(l){$scope.hcollectArray.push(l.hcollect_method)}),angular.forEach($scope.stateList,function(l){$scope.stateArray.push(l.state_name)}),angular.forEach($scope.countyList,function(l){$scope.countyArray.push(l.county_name)}),angular.forEach($scope.opTypeList,function(l){$scope.opTypeArray.push(l.op_type)}),angular.forEach($scope.vDatumList,function(l){$scope.vDatumArray.push(l.datum_abbreviation)}),angular.forEach($scope.hwmTypeList,function(l){$scope.hwmTypeArray.push(l.hwm_type)}),angular.forEach($scope.hwmQualityList,function(l){$scope.hwmQualityArray.push(l.hwm_quality)}),$scope.getStateCo=function(c,r){var rowValues=$scope.hotInstance.getDataAtRow(r);if(""!==rowValues[1]&&null!==rowValues[1]&&""!==rowValues[2]&&null!==rowValues[2])$rootScope.stateIsLoading.showLoading=!0,$http.defaults.headers.common.Accept="application/json",delete $http.defaults.headers.common.Authorization,GEOCODE.getAddressParts({Longitude:rowValues[2],Latitude:rowValues[1]},function(response){if(response.result.geographies.Counties.length>0){var stateFIPS=response.result.geographies.Counties[0].STATE,countyName=response.result.geographies.Counties[0].NAME,thisStateID=$scope.countyList.filter(function(c){return c.state_fip==stateFIPS})[0].state_id,thisState=$scope.stateList.filter(function(s){return s.state_id==thisStateID})[0];if(void 0!==thisState){$scope.hotInstance.setDataAtCell(r,7,thisState.state_name);var stateCountyList=$scope.countyList.filter(function(c){return c.state_id==thisState.state_id});$scope.countyArray=[],angular.forEach(stateCountyList,function(l){$scope.countyArray.push(l.county_name)}),$scope.hotInstance.setCellMeta(r,8,"source",$scope.countyArray),$scope.hotInstance.setDataAtCell(r,8,countyName),$rootScope.stateIsLoading.showLoading=!1}else $rootScope.stateIsLoading.showLoading=!1,toastr.error("The Latitude/Longitude did not return a recognized state. Please choose one from the dropdown.")}else $rootScope.stateIsLoading.showLoading=!1,toastr.error("Error getting address location.")},function(errorResponse){$rootScope.stateIsLoading.showLoading=!1,toastr.error("Error: "+errorResponse.statusText)});else{$rootScope.stateIsLoading.showLoading=!1;{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Please provide a Latitude and Longitude before clicking Get State/County</p></div><div class="modal-footer"><button type="button" class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"})}}},$scope.UpdateCounties=function(theChange){var thisState=$scope.stateList.filter(function(s){return s.state_name==theChange[3]})[0],stateCountyList=$scope.countyList.filter(function(c){return c.state_id==thisState.state_id});$scope.countyArray=[],angular.forEach(stateCountyList,function(l){$scope.countyArray.push(l.county_name)}),$scope.hotInstance.setCellMeta(theChange[0],8,"source",$scope.countyArray)};var requiredModal=function(){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>This field is required.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',backdrop:"static",keyboard:!1,controller:function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}},size:"sm"})};$scope.latValidator=function(value,callback){if(0>value||isNaN(value)){{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Latitude must be greater than 0.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}callback(!1)}else value?callback(!0):(requiredModal(),callback(!1))},$scope.longValidator=function(value,callback){if(value>0||isNaN(value)){{$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>Longitude must be less than 0.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.dismiss()}}],size:"sm"})}callback(!1)}else value?callback(!0):(requiredModal(),callback(!1))};var colorRenderer=function(instance,td,row,col,prop,value,cellProperties){var $button=$('<button type="button" class="btn bnt-primary"></button>');return $button.html("Get State/County"),$(td).empty().append($button),td};$scope.requiredValidator=function(value,callback){value?callback(!0):(requiredModal(),callback(!1))},$scope.reset=function(){var resetModal=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title"></h3></div><div class="modal-body"><p>Are you sure you want to clear the table?</p></div><div class="modal-footer"><button class="btn btn-primary" ng-click="ok()">OK</button><button class="btn btn-primary" ng-click="cancel()">Cancel</button></div>',backdrop:"static",keyboard:!1,controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()},$scope.cancel=function(){$uibModalInstance.dismiss()}}],size:"sm"});resetModal.result.then(function(){$scope.historicHWMs=[],$scope.invalids=[]})},$scope.tableSettings={colHeaders:!0,rowHeaders:!0,contextMenu:["row_above","row_below","remove_row"],minSpareRows:3,afterInit:function(){$scope.hotInstance=this},manualColumnResize:!0,manualRowResize:!0,wordWrap:!1,viewportColumnRenderingOffsetNumber:1,colWidths:$scope.columnWidths,cells:function(row,col,prop){if(6==col){var cellprops={};return cellprops.renderer=colorRenderer,cellprops}},onBeforeChange:function(data){for(var i=0;i<data.length;i++)"state"==data[i][1]&&data[i][3]!==data[i][2]&&$scope.UpdateCounties(data[i])},onAfterChange:function(change,source){if("loadData"!=source)for(var i=0;i<change.length;i++)change[i][2]!==change[i][3]&&$scope.Changes.push(change[i])},afterOnCellMouseDown:function(event,coords,td){6==coords.col&&$scope.getStateCo(coords.col,coords.row)},onAfterValidate:function(isValid,value,row,prop,souce){if(isValid||$scope.invalids.push({isValid:isValid,row:row,prop:prop}),isValid){for(var vIndex=-1,vI=0;vI<$scope.invalids.length;vI++)if($scope.invalids[vI].row==row&&$scope.invalids[vI].prop==prop){vIndex=vI;break}vIndex>-1&&$scope.invalids.splice(vIndex,1)}},rowHeights:50}}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("helpCtrl",["$scope",function($scope){$scope.helpInfo={},$scope.helpInfo.fact="Some really interesting help will be here."}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("siteFileModalCtrl",["$scope","$cookies","$http","$uibModalInstance","$uibModal","SERVER_URL","FILE_STAMP","fileTypeList","thisFile","fileExists","allMembers","fileSource","dataFile","agencyList","fileSite","FILE","SOURCE","DATA_FILE",function($scope,$cookies,$http,$uibModalInstance,$uibModal,SERVER_URL,FILE_STAMP,fileTypeList,thisFile,fileExists,allMembers,fileSource,dataFile,agencyList,fileSite,FILE,SOURCE,DATA_FILE){$scope.serverURL=SERVER_URL,$scope.userRole=$cookies.get("usersRole"),$scope.view={FILEval:"detail"},$scope.sFileIsUploading=!1,$scope.fileTypes=fileTypeList,$scope.agencies=agencyList,$scope.theSite=fileSite,$scope.aFile={},$scope.aSource={},$scope.datafile={},$scope.isNum=function(evt){var theEvent=evt||window.event,key=theEvent.keyCode||theEvent.which;46!=key&&45!=key&&key>31&&(48>key||key>57)&&(theEvent.returnValue=!1,theEvent.preventDefault&&theEvent.preventDefault())},$scope.fileItemExists=void 0==fileExists||fileExists.Length>0?!0:!1,$scope.datepickrs={},$scope.dateOptions={startingDay:1,showWeeks:!1},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.updateAgencyForCaption=function(){"create"==$scope.createOReditFile?1==$scope.aFile.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name):1==$scope.fileCopy.filetype_id&&($scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.sourceCopy.agency_id})[0].agency_name)};var getDateTimeParts=function(d){var y=d.substr(0,4),m=d.substr(5,2)-1,da=d.substr(8,2),h=d.substr(11,2),mi=d.substr(14,2),sec=d.substr(17,2),theDate=new Date(y,m,da,h,mi,sec);return theDate};if(void 0!==thisFile){if($scope.createOReditFile="edit",$scope.whoseFile=thisFile.fileBelongsTo,"Objective Point File"==$scope.whoseFile&&($scope.whoseFile="Datum Location File"),$scope.aFile=thisFile,$scope.aFile.fileType=fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,void 0!==$scope.aFile.name){var fI=$scope.aFile.name.lastIndexOf("."),fileExt=$scope.aFile.name.substring(fI+1);$scope.isPhoto=fileExt.match(/(jpg|JPG|jpeg|JPEG|png|PNG|gif|GIF)$/)?!0:!1}if($scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),void 0!==fileSource&&($scope.aSource=fileSource,$scope.aSource.FULLname=$scope.aSource.source_name,$scope.aSource.agencyName=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name,$scope.agencyNameForCap=$scope.aSource.agencyName),void 0!==dataFile){$scope.ApprovalInfo={},$scope.datafile=dataFile,$scope.timeZoneList=["UTC","PST","MST","CST","EST"],$scope.datafile.collect_date=new Date($scope.datafile.collect_date),$scope.datafile.good_start=getDateTimeParts($scope.datafile.good_start),$scope.datafile.good_end=getDateTimeParts($scope.datafile.good_end),void 0!==$scope.datafile.approval_id&&null!==$scope.datafile.approval_id&&$scope.datafile.approval_id>=1&&DATA_FILE.getDFApproval({id:$scope.datafile.data_file_id},function(approvalResponse){$scope.ApprovalInfo.approvalDate=new Date(approvalResponse.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==approvalResponse.member_id})[0]},function(errorResponse){toastr.error("Error getting data file approval information")});var aProcessor=null!==$scope.datafile.processor_id?allMembers.filter(function(amem){return amem.member_id==$scope.datafile.processor_id})[0]:{};$scope.processor=void 0!==aProcessor.fname?aProcessor.fname+" "+aProcessor.lname:""}}else $scope.whoseFile="Site File",$scope.createOReditFile="create",$scope.aFile.file_date=new Date,$scope.aFile.photo_date=new Date,$scope.aSource=allMembers.filter(function(m){return m.member_id==$cookies.get("mID")})[0],$scope.aSource.FULLname=$scope.aSource.fname+" "+$scope.aSource.lname,$scope.agencyNameForCap=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name;$scope.cancel=function(){$scope.sFileIsUploading=!1;var sendBack=$scope.aFile;$uibModalInstance.close(sendBack)},$scope.create=function(valid){if(valid){$scope.sFileIsUploading=!0,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var theSource={source_name:$scope.aSource.FULLname,agency_id:$scope.aSource.agency_id};SOURCE.save(theSource).$promise.then(function(response){if(8!==$scope.aFile.filetype_id){var fileParts={FileEntity:{filetype_id:$scope.aFile.filetype_id,name:$scope.aFile.File.name,file_date:$scope.aFile.file_date,photo_date:$scope.aFile.photo_date,description:$scope.aFile.description,site_id:$scope.theSite.site_id,source_id:response.source_id,photo_direction:$scope.aFile.photo_direction},File:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Site File";var state="created",sendBack=[fresponse,state];$scope.sFileIsUploading=!1,$uibModalInstance.close(sendBack)},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})}else $scope.aFile.site_id=$scope.theSite.site_id,$scope.aFile.source_id=response.source_id,FILE.save($scope.aFile).$promise.then(function(fresponse){toastr.success("File Uploaded"),fresponse.fileBelongsTo="Site File";var state="created",sendBack=[fresponse,state];$scope.sFileIsUploading=!1,$uibModalInstance.close(sendBack)},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving Source info: "+errorResponse.statusText)})}},$scope.changedFileType=function(){},$scope.save=function(valid){if(2==$scope.fileCopy.filetype_id){var s=$scope.dfCopy.good_start,e=$scope.dfCopy.good_end;if(new Date(e)<new Date(s)){valid=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The good end date must be after the good start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){valid=!1})}}if(valid){$scope.sFileIsUploading=!0;var whatkind=$scope.aFile.fileBelongsTo;if($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",void 0!==$scope.sourceCopy.source_id)$scope.sourceCopy.source_name=$scope.sourceCopy.FULLname,SOURCE.update({id:$scope.sourceCopy.source_id},$scope.sourceCopy).$promise.then(function(sResponse){$scope.aSource=sResponse,$scope.aSource.FULLname=$scope.aSource.source_name,$scope.aSource.agencyName=$scope.agencies.filter(function(a){return a.agency_id==$scope.aSource.agency_id})[0].agency_name,FILE.update({id:$scope.fileCopy.file_id},$scope.fileCopy).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo=whatkind,$scope.aFile=fileResponse,$scope.aFile.fileType=fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),$scope.fileCopy={},$scope.sourceCopy={},$scope.view.FILEval="detail",$scope.sFileIsUploading=!1},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving source: "+errorResponse.statusText)});else{if("UTC"!=$scope.dfCopy.time_zone){var utcStartDateTime=new Date($scope.dfCopy.good_start).toUTCString(),utcEndDateTime=new Date($scope.dfCopy.good_end).toUTCString();$scope.dfCopy.good_start=utcStartDateTime,$scope.dfCopy.good_end=utcEndDateTime,$scope.dfCopy.time_zone="UTC"}else{var si=$scope.dfCopy.good_start.toString().indexOf("GMT")+3,ei=$scope.dfCopy.good_end.toString().indexOf("GMT")+3;$scope.dfCopy.good_start=$scope.dfCopy.good_start.toString().substring(0,si),$scope.dfCopy.good_end=$scope.dfCopy.good_end.toString().substring(0,ei)}DATA_FILE.update({id:$scope.dfCopy.data_file_id},$scope.dfCopy).$promise.then(function(dfResponse){$scope.datafile=dfResponse,$scope.datafile.collect_date=new Date($scope.datafile.collect_date),$scope.datafile.good_start=getDateTimeParts($scope.datafile.good_start),$scope.datafile.good_end=getDateTimeParts($scope.datafile.good_end);var aProcessor=null!==$scope.datafile.processor_id?allMembers.filter(function(amem){return amem.member_id==$scope.datafile.processor_id})[0]:{};$scope.processor=void 0!==aProcessor.fname?aProcessor.fname+" "+aProcessor.lname:"",FILE.update({id:$scope.fileCopy.file_id},$scope.fileCopy).$promise.then(function(fileResponse){toastr.success("File Updated"),fileResponse.fileBelongsTo=whatkind,$scope.aFile=fileResponse,$scope.aFile.fileType=fileTypeList.filter(function(ft){return ft.filetype_id==$scope.aFile.filetype_id})[0].filetype,$scope.aFile.file_date=new Date($scope.aFile.file_date),void 0!==$scope.aFile.photo_date&&($scope.aFile.photo_date=new Date($scope.aFile.photo_date)),$scope.fileCopy={},$scope.dfCopy={},$scope.view.FILEval="detail",$scope.sFileIsUploading=!1},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving data file: "+errorResponse.statusText)})}}},$scope.saveFileUpload=function(){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",$scope.sFileIsUploading=!0;var fileParts={FileEntity:{file_id:$scope.aFile.file_id,name:$scope.aFile.name,description:$scope.aFile.description,photo_direction:$scope.aFile.photo_direction,latitude_dd:$scope.aFile.latitude_dd,longitude_dd:$scope.aFile.longitude_dd,file_date:$scope.aFile.file_date,hwm_id:$scope.aFile.hwm_id,site_id:$scope.aFile.site_id,filetype_id:$scope.aFile.filetype_id,source_id:$scope.aFile.source_id,path:$scope.aFile.path,data_file_id:$scope.aFile.data_file_id,instrument_id:$scope.aFile.instrument_id,photo_date:$scope.aFile.photo_date,is_nwis:$scope.aFile.is_nwis,objective_point_id:$scope.aFile.objective_point_id},File:void 0!==$scope.aFile.File1?$scope.aFile.File1:$scope.aFile.File},fd=new FormData;fd.append("FileEntity",JSON.stringify(fileParts.FileEntity)),fd.append("File",fileParts.File),FILE.uploadFile(fd).$promise.then(function(fresponse){toastr.success("File Uploaded"),$scope.src=$scope.serverURL+"/Files/"+$scope.aFile.file_id+"/Item"+FILE_STAMP.getStamp(),FILE_STAMP.setStamp(),$scope.stamp=FILE_STAMP.getStamp(),$scope.aFile.name=fresponse.name,$scope.aFile.path=fresponse.path,$scope.isPhoto=void 0!==$scope.aFile.File1?$scope.aFile.File1.type.indexOf("image")>-1?!0:!1:$scope.aFile.File.type.indexOf("image")>-1?!0:!1,void 0!==$scope.aFile.File1&&($scope.aFile.File=$scope.aFile.File1,$scope.aFile.File1=void 0),$scope.sFileIsUploading=!1,$scope.fileItemExists=!0},function(errorResponse){$scope.sFileIsUploading=!1,toastr.error("Error saving file: "+errorResponse.statusText)})},$scope.deleteFile=function(){var DeleteModalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return $scope.aFile},what:function(){return"File"}}});DeleteModalInstance.result.then(function(fileToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),FILE["delete"]({id:fileToRemove.file_id}).$promise.then(function(){toastr.success("File Removed");var sendBack=["de","deleted"];$uibModalInstance.close(sendBack)},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})})},$scope.wannaEditFILE=function(){$scope.view.FILEval="edit",$scope.fileCopy=angular.copy($scope.aFile),$scope.dfCopy=angular.copy($scope.datafile),$scope.sourceCopy=angular.copy($scope.aSource)},$scope.cancelFILEEdit=function(){$scope.view.FILEval="detail",$scope.fileCopy={},$scope.dfCopy={},$scope.sourceCopy={}},$scope.approveDF=function(){var thisDF=$scope.datafile,approveModal=$uibModal.open({template:"<div class='modal-header'><h3 class='modal-title'>Approve Data File</h3></div><div class='modal-body'><p>Are you ready to approve this Data File?</p></div><div class='modal-footer'><button class='btn btn-primary' ng-click='approveIt()'>Approve</button><button class='btn btn-warning' ng-click='cancel()'>Cancel</button></div>",controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.approveIt=function(){$uibModalInstance.close(thisDF)}}],size:"sm"});approveModal.result.then(function(df){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),DATA_FILE.approveDF({id:df.data_file_id}).$promise.then(function(approvalResponse){df.approval_id=approvalResponse.approval_id,$scope.datafile=df,toastr.success("Data File Approved"),$scope.ApprovalInfo.approvalDate=new Date(approvalResponse.approval_date),$scope.ApprovalInfo.Member=allMembers.filter(function(amem){return amem.member_id==approvalResponse.member_id})[0]},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})},$scope.unApproveDF=function(){var thisDF=$scope.datafile,unapproveModal=$uibModal.open({template:"<div class='modal-header'><h3 class='modal-title'>Remove Approval</h3></div><div class='modal-body'><p>Are you sure you wan to unapprove this Data File?</p></div><div class='modal-footer'><button class='btn btn-primary' ng-click='unApproveIt()'>Unapprove</button><button class='btn btn-warning' ng-click='cancel()'>Cancel</button></div>",controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.cancel=function(){$uibModalInstance.dismiss("cancel")},$scope.unApproveIt=function(){$uibModalInstance.close(thisDF)}}],size:"sm"});unapproveModal.result.then(function(df){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),DATA_FILE.unApproveDF({id:df.data_file_id}).$promise.then(function(){df.approval_id=null,$scope.datafile=df,toastr.success("Data File Unapproved"),$scope.ApprovalInfo={}},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)})},function(){})}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("fileCtrl",["$scope","$rootScope","$cookies","$location","$state","$http","SERVER_URL","FILE_STAMP","Site_Files","HWM_Service","Instrument_Service","$uibModal","$filter","$timeout","thisSite","thisSiteFiles","allFileTypes","allAgencies","thisSiteSensors","thisSiteOPs","thisSiteHWMs","FILE","DATA_FILE","MEMBER","SOURCE",function($scope,$rootScope,$cookies,$location,$state,$http,SERVER_URL,FILE_STAMP,Site_Files,HWM_Service,Instrument_Service,$uibModal,$filter,$timeout,thisSite,thisSiteFiles,allFileTypes,allAgencies,thisSiteSensors,thisSiteOPs,thisSiteHWMs,FILE,DATA_FILE,MEMBER,SOURCE){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$scope.serverURL=SERVER_URL,$scope.stamp=FILE_STAMP.getStamp(),$rootScope.$on("fileStampSet",function(event,st){$scope.stamp=st}),$scope.siteHWMs=thisSiteHWMs,$scope.siteSensors=thisSiteSensors;for(var sf=0;sf<thisSiteFiles.length;sf++){var whatKindaFile="";if(thisSiteFiles[sf].hwm_id>0&&null!==thisSiteFiles[sf].hwm_id&&(whatKindaFile="HWM File"),thisSiteFiles[sf].data_file_id>0&&null!==thisSiteFiles[sf].data_file_id&&(whatKindaFile="DataFile File"),thisSiteFiles[sf].instrument_id>0&&null!==thisSiteFiles[sf].instrument_id){whatKindaFile="Sensor File";var thisIns=thisSiteSensors.filter(function(s){return s.instrument_id==thisSiteFiles[sf].instrument_id})[0];thisSiteFiles[sf].typeName=thisIns.serial_number}thisSiteFiles[sf].objective_point_id>0&&null!==thisSiteFiles[sf].objective_point_id&&(whatKindaFile="Objective Point File",thisSiteFiles[sf].typeName=thisSiteOPs.filter(function(op){return op.objective_point_id==thisSiteFiles[sf].objective_point_id})[0].name),""===whatKindaFile&&(whatKindaFile="Site File"),thisSiteFiles[sf].fileBelongsTo=whatKindaFile}Site_Files.setAllSiteFiles(thisSiteFiles),$scope.SiteFiles=Site_Files.getAllSiteFiles(),$scope.siteImageFiles=[];for(var s=0;s<$scope.SiteFiles.length;s++){var extI=$scope.SiteFiles[s].name.indexOf("."),extString=$scope.SiteFiles[s].name.substring(extI+1);["jpg","JPG","jpeg","JPEG","png","PNG","gif","GIF"].indexOf(extString)>-1&&$scope.siteImageFiles.push($scope.SiteFiles[s])}$scope.$on("siteFilesUpdated",function(event,sitefiles){$scope.siteHWMs=HWM_Service.getAllSiteHWMs(),$scope.siteSensors=Instrument_Service.getAllSiteSensors(),$scope.SiteFiles=sitefiles.filter(function(h){return"Site File"==h.fileBelongsTo||"Objective Point File"==h.fileBelongsTo}),angular.forEach($scope.SiteFiles,function(sf){"Objective Point File"==sf.fileBelongsTo&&(sf.typeName=thisSiteOPs.filter(function(op){return op.objective_point_id==sf.objective_point_id})[0].name)});var hwmFiles=sitefiles.filter(function(sfiles){return"HWM File"==sfiles.fileBelongsTo}),sensFiles=sitefiles.filter(function(sfi){return sfi.instrument_id>0&&null!==sfi.instrument_id});if(void 0!==$cookies.get("SessionEventID"))for(var hf=0;hf<hwmFiles.length;hf++)for(var hwm=0;hwm<$scope.siteHWMs.length;hwm++)hwmFiles[hf].hwm_id==$scope.siteHWMs[hwm].hwm_id&&$scope.siteHWMs[hwm].event_id==$cookies.get("SessionEventID")&&$scope.SiteFiles.push(hwmFiles[hf]);else for(var hf=0;hf<hwmFiles.length;hf++)for(var hwm=0;hwm<$scope.siteHWMs.length;hwm++)hwmFiles[hf].hwm_id==$scope.siteHWMs[hwm].hwm_id&&$scope.SiteFiles.push(hwmFiles[hf]);if(void 0!==$cookies.get("SessionEventID"))for(var sf=0;sf<sensFiles.length;sf++)for(var inst=0;inst<$scope.siteSensors.length;inst++)sensFiles[sf].instrument_id==$scope.siteSensors[inst].instrument_id&&$scope.siteSensors[inst].event_id==$cookies.get("SessionEventID")&&(sensFiles[sf].typeName=$scope.siteSensors[inst].serial_number,$scope.SiteFiles.push(sensFiles[sf]));else for(var sf=0;sf<sensFiles.length;sf++)for(var inst=0;inst<$scope.siteSensors.length;inst++)sensFiles[sf].instrument_id==$scope.siteSensors[inst].instrument_id&&(sensFiles[sf].typeName=$scope.siteSensors[inst].serial_number,$scope.SiteFiles.push(sensFiles[sf]));$scope.siteImageFiles=[],angular.forEach($scope.SiteFiles,function(sf){var extI=sf.name.indexOf("."),extString=sf.name.substring(extI+1);["jpg","JPG","jpeg","JPEG","png","PNG","gif","GIF"].indexOf(extString)>-1&&$scope.siteImageFiles.push(sf)})},!0),$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){if($scope.sessionEventName=void 0!==newValue?newValue:"All Events",$scope.sessionEventExists="All Events"!=$scope.sessionEventName?!0:!1,void 0!==newValue){$scope.siteHWMs=HWM_Service.getAllSiteHWMs(),$scope.siteSensors=Instrument_Service.getAllSiteSensors(),$scope.SiteFiles=Site_Files.getAllSiteFiles().filter(function(h){return"Site File"==h.fileBelongsTo||"Objective Point File"==h.fileBelongsTo}),angular.forEach($scope.SiteFiles,function(sf){"Objective Point File"==sf.fileBelongsTo&&(sf.typeName=thisSiteOPs.filter(function(op){return op.objective_point_id==sf.objective_point_id})[0].name),$scope.siteImageFiles=[];var extI=sf.name.indexOf("."),extString=sf.name.substring(extI+1);["jpg","JPG","jpeg","JPEG","png","PNG","gif","GIF"].indexOf(extString)>-1&&$scope.siteImageFiles.push(sf)});for(var hwmFiles=Site_Files.getAllSiteFiles().filter(function(sfiles){return"HWM File"==sfiles.fileBelongsTo}),sensFiles=Site_Files.getAllSiteFiles().filter(function(sfi){return sfi.instrument_id>0&&null!==sfi.instrument_id}),hf=0;hf<hwmFiles.length;hf++)for(var hwm=0;hwm<$scope.siteHWMs.length;hwm++)hwmFiles[hf].hwm_id==$scope.siteHWMs[hwm].hwm_id&&$scope.siteHWMs[hwm].event_id==$cookies.get("SessionEventID")&&$scope.SiteFiles.push(hwmFiles[hf]);for(var sf=0;sf<sensFiles.length;sf++)for(var inst=0;inst<$scope.siteSensors.length;inst++)sensFiles[sf].instrument_id==$scope.siteSensors[inst].instrument_id&&$scope.siteSensors[inst].event_id==$cookies.get("SessionEventID")&&(sensFiles[sf].typeName=$scope.siteSensors[inst].serial_number,$scope.SiteFiles.push(sensFiles[sf]))}else $scope.SiteFiles=Site_Files.getAllSiteFiles()},!0),$scope.showImageModal=function(image){$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Image File Preview</h3></div><div class="modal-body"><img ng-src="{{setSRC}}" /></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){
$scope.ok=function(){$uibModalInstance.close()},$scope.imageId=image,$scope.setSRC=SERVER_URL+"/Files/"+$scope.imageId+"/Item"}],size:"md"})},$scope.showFileModal=function(FileClicked){var SindexClicked=$scope.SiteFiles.indexOf(FileClicked);$scope.siteFileTypes=allFileTypes.filter(function(ft){return"Photo"===ft.filetype||"Historic Citation"===ft.filetype||"Field Sheets"===ft.filetype||"Level Notes"===ft.filetype||"Site Sketch"===ft.filetype||"Other"===ft.filetype||"Link"===ft.filetype||"Sketch"===ft.filetype||"Landowner Permission Form"===ft.filetype}),$scope.hwmFileTypes=allFileTypes.filter(function(hft){return"Photo"===hft.filetype||"Historic Citation"===hft.filetype||"Field Sheets"===hft.filetype||"Level Notes"===hft.filetype||"Other"===hft.filetype||"Link"===hft.filetype||"Sketch"===hft.filetype}),$scope.sensorFileTypes=allFileTypes.filter(function(sft){return"Photo"===sft.filetype||"Data"===sft.filetype||"Historic Citation"===sft.filetype||"Field Sheets"===sft.filetype||"Level Notes"===sft.filetype||"Other"===sft.filetype||"Link"===sft.filetype||"Sketch"===sft.filetype}),$scope.opFileTypes=allFileTypes.filter(function(oft){return"Photo"===oft.filetype||"Field Sheets"===oft.filetype||"Level Notes"===oft.filetype||"Other"===oft.filetype||"NGS Datasheet"===oft.filetype||"Sketch"===oft.filetype});var modalInstance=$uibModal.open({templateUrl:0!==FileClicked?"FILEmodal.html":"FileCreateModal.html",controller:"siteFileModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{fileExists:function(){return 0!==FileClicked?FILE.getFileItem({id:FileClicked.file_id}).$promise:void 0},fileTypeList:function(){if(0===FileClicked)return $scope.siteFileTypes;switch(FileClicked.fileBelongsTo){case"HWM File":return $scope.hwmFileTypes;case"DataFile File":return $scope.sensorFileTypes;case"Sensor File":return $scope.sensorFileTypes;case"Objective Point File":return $scope.opFileTypes;case"Site File":return $scope.siteFileTypes}},agencyList:function(){return allAgencies},thisFile:function(){return 0!==FileClicked?FileClicked:void 0},fileSite:function(){return thisSite},allMembers:function(){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll().$promise},fileSource:function(){return 0!==FileClicked&&void 0!==FileClicked.source_id?SOURCE.query({id:FileClicked.source_id}).$promise:void 0},dataFile:function(){return 0!==FileClicked&&void 0!==FileClicked.data_file_id?DATA_FILE.query({id:FileClicked.data_file_id}).$promise:void 0}}});modalInstance.result.then(function(createdFile){"created"==createdFile[1]&&($scope.SiteFiles.push(createdFile[0]),Site_Files.setAllSiteFiles($scope.SiteFiles)),void 0===createdFile[1]&&($scope.SiteFiles[SindexClicked]=createdFile,Site_Files.setAllSiteFiles($scope.SiteFiles),$scope.stamp=FILE_STAMP.getStamp()),"deleted"==createdFile[1]&&($scope.SiteFiles.splice(SindexClicked,1),Site_Files.setAllSiteFiles($scope.SiteFiles))})}}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("eventSessionModalCtrl",["$scope","$rootScope","$cookies","$uibModalInstance","allEvents","allEventTypes","allStates","EVENT",function($scope,$rootScope,$cookies,$uibModalInstance,allEvents,allEventTypes,allStates,EVENT){$scope.EventList=allEvents,$scope.EventTypeList=allEventTypes,$scope.StateList=allStates;var chosenEv=$cookies.get("SessionEventID");$scope.event={EventChosen:void 0!==chosenEv?Number(chosenEv):""},$scope.filterEvents=function(){var d=null!==$scope.event.DATE&&void 0!==$scope.event.DATE?$scope.event.DATE:null,t=null!==$scope.event.type&&void 0!==$scope.event.type?$scope.event.type:0,s=null!==$scope.event.state&&void 0!==$scope.event.state?$scope.event.state:null;EVENT.getFilteredEvents({Date:d,Type:t,State:s}).$promise.then(function(response){$scope.EventList=response})},$scope.clearFilters=function(){$scope.event={EventChosen:void 0!==chosenEv?Number(chosenEv):""},$scope.EventList=allEvents},$scope.setEvent=function(){$scope.evID=$scope.event.EventChosen;var eventName=allEvents.filter(function(x){return x.event_id==$scope.evID})[0];$cookies.put("SessionEventID",$scope.evID),$cookies.put("SessionEventName",eventName.event_name),$rootScope.sessionEvent="Session Event: "+eventName.event_name+".",$uibModalInstance.dismiss("cancel")},$scope.clearEvent=function(){$scope.event={},$cookies.remove("SessionEventID"),$cookies.remove("SessionEventName"),$rootScope.sessionEvent="",$uibModalInstance.dismiss("cancel")},$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0},$scope.close=function(){$uibModalInstance.dismiss("cancel")}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("eventSessionCtrl",["$scope","$rootScope","$cookies","$uibModal","$location","$state","EVENT","EVENT_TYPE","STATE",function($scope,$rootScope,$cookies,$uibModal,$location,$state,EVENT,EVENT_TYPE,STATE){$scope.openEventModal=function(){var modalInstance=$uibModal.open({templateUrl:"ChooseEvent.html",controller:"eventSessionModalCtrl",size:"md",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{allEvents:function(){return EVENT.getAll().$promise},allEventTypes:function(){return EVENT_TYPE.getAll().$promise},allStates:function(){return STATE.getAll().$promise}}});modalInstance.result.then(function(r){})}}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("eventModalCtrl",["$scope","$rootScope","$cookies","$http","$uibModal","$uibModalInstance","$filter","thisEvent","eventTypeList","eventStatusList","adminList","EVENT",function($scope,$rootScope,$cookies,$http,$uibModal,$uibModalInstance,$filter,thisEvent,eventTypeList,eventStatusList,adminList,EVENT){$scope.anEvent={},$scope.eventTypes=eventTypeList,$scope.eventStatuses=eventStatusList,$scope.adminMembers=adminList,$scope.loggedInRole=$cookies.get("usersRole"),$scope.datepickrs={},$scope.open=function($event,which){$event.preventDefault(),$event.stopPropagation(),$scope.datepickrs[which]=!0};var makeAdate=function(d){var aDate=new Date;void 0!==d&&(aDate=new Date(d));var year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=new Date(monthNames[month]+" "+day+", "+year);return dateWOtime};"empty"!=thisEvent?($scope.anEvent=angular.copy(thisEvent),$scope.anEvent.event_start_date=void 0!==$scope.anEvent.event_start_date?makeAdate($scope.anEvent.event_start_date):"",$scope.anEvent.event_end_date=void 0!==$scope.anEvent.event_end_date?makeAdate($scope.anEvent.event_end_date):""):$scope.anEvent.event_start_date=makeAdate();var compareDates=function(v,sd,ed){if(new Date(ed)<new Date(sd)){v=!1;var fixDate=$uibModal.open({template:'<div class="modal-header"><h3 class="modal-title">Error</h3></div><div class="modal-body"><p>The event end date must be after the event start date.</p></div><div class="modal-footer"><button class="btn btn-primary" ng-enter="ok()" ng-click="ok()">OK</button></div>',controller:["$scope","$uibModalInstance",function($scope,$uibModalInstance){$scope.ok=function(){$uibModalInstance.close()}}],size:"sm"});fixDate.result.then(function(){v=!1})}return v};$scope.create=function(valid){if(void 0!==$scope.anEvent.event_start_date&&null!==$scope.anEvent.event_start_date&&void 0!==$scope.anEvent.event_end_date&&null!==$scope.anEvent.event_end_date&&(valid=compareDates(valid,$scope.anEvent.event_start_date,$scope.anEvent.event_end_date)),valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var createdEvent={};EVENT.save($scope.anEvent,function(response){toastr.success("Event Created"),createdEvent=response,createdEvent.event_id=response.event_id,createdEvent.Name=response.event_name,createdEvent.Type=$scope.eventTypes.filter(function(a){return a.event_type_id==response.event_type_id})[0].type,createdEvent.Status=$scope.eventStatuses.filter(function(r){return r.event_status_id==response.event_status_id})[0].status;var coord=$scope.adminMembers.filter(function(c){return c.member_id==response.event_coordinator})[0];createdEvent.StartDate=response.event_start_date,createdEvent.EndDate=response.event_end_date,createdEvent.Coord=void 0!==coord?coord.fname+" "+coord.lname:""},function(errorResponse){toastr.error("Error creating new event: "+errorResponse.statusText)}).$promise.then(function(){var sendBack=[createdEvent,"created"];$uibModalInstance.close(sendBack)})}},$scope.save=function(valid){if(void 0!==$scope.anEvent.event_start_date&&null!==$scope.anEvent.event_start_date&&void 0!==$scope.anEvent.event_end_date&&null!==$scope.anEvent.event_end_date&&(valid=compareDates(valid,$scope.anEvent.event_start_date,$scope.anEvent.event_end_date)),valid){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json";var updatedEvent={};EVENT.update({id:$scope.anEvent.event_id},$scope.anEvent,function(response){updatedEvent=response,updatedEvent.event_id=response.event_id,updatedEvent.Name=response.event_name,updatedEvent.Type=$scope.eventTypes.filter(function(a){return a.event_type_id==response.event_type_id})[0].type,updatedEvent.Status=$scope.eventStatuses.filter(function(r){return r.event_status_id==response.event_status_id})[0].status;var coord=$scope.adminMembers.filter(function(c){return c.member_id==response.event_coordinator})[0];updatedEvent.StartDate=response.event_start_date,updatedEvent.EndDate=response.event_end_date,updatedEvent.Coord=void 0!==coord?coord.fname+" "+coord.lname:"",toastr.success("Event Updated")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){var sendBack=[updatedEvent,"updated"];$uibModalInstance.close(sendBack)})}},$scope.DeleteEvent=function(ev){var modalInstance=$uibModal.open({templateUrl:"removemodal.html",controller:"ConfirmModalCtrl",size:"sm",resolve:{nameToRemove:function(){return ev},what:function(){return"Event"}}});modalInstance.result.then(function(eventToRemove){$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),EVENT["delete"]({id:eventToRemove.event_id},function(response){toastr.success("Event Deleted")},function(errorResponse){toastr.error("Error: "+errorResponse.statusText)}).$promise.then(function(){$uibModalInstance.close(["de","deleted"])})})},$scope.cancel=function(){$uibModalInstance.close()},$rootScope.stateIsLoading={showLoading:!1}}])}(),function(){"use strict";var SettingsControllers=angular.module("SettingsControllers");SettingsControllers.controller("eventCtrl",["$scope","$rootScope","$cookies","$location","$http","$filter","$uibModal","MEMBER","allCoordMembers","allEvents","allEventTypes","allEventStats",function($scope,$rootScope,$cookies,$location,$http,$filter,$uibModal,MEMBER,allCoordMembers,allEvents,allEventTypes,allEventStats){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{$rootScope.thisPage="Settings/Events",$scope.loggedInRole=$cookies.get("usersRole"),$scope.isAdmin="Admin"==$scope.loggedInRole?!0:!1,$scope.sort_by=function(newSortingOrder){$scope.sortingOrder==newSortingOrder&&($scope.reverse=!$scope.reverse),$scope.sortingOrder=newSortingOrder,$("th i").each(function(){$(this).removeClass().addClass("glyphicon glyphicon-sort")}),$("th."+newSortingOrder+" i").removeClass().addClass($scope.reverse?"glyphicon glyphicon-chevron-up":"glyphicon glyphicon-chevron-down")},$scope.eventTypeList=allEventTypes,$scope.eventStatList=allEventStats,$scope.eventCoordList=allCoordMembers,$scope.eventList=[];for(var x=0;x<allEvents.length;x++){var E=allEvents[x];E.Name=allEvents[x].event_name,E.Type=$scope.eventTypeList.filter(function(a){return a.event_type_id==allEvents[x].event_type_id})[0].type,E.Status=$scope.eventStatList.filter(function(r){return r.event_status_id==allEvents[x].event_status_id})[0].status;var coord=$scope.eventCoordList.filter(function(c){return c.member_id==allEvents[x].event_coordinator})[0];E.StartDate=allEvents[x].event_start_date,E.EndDate=allEvents[x].event_end_date,E.Coord=void 0!==coord?coord.fname+" "+coord.lname:"",$scope.eventList.push(E)}$scope.showEventModal=function(eventClicked){var indexClicked=$scope.eventList.indexOf(eventClicked);$rootScope.stateIsLoading={showLoading:!0};var modalInstance=$uibModal.open({templateUrl:"eventModal.html",controller:"eventModalCtrl",size:"lg",backdrop:"static",keyboard:!1,windowClass:"rep-dialog",resolve:{thisEvent:function(){return 0!==eventClicked?eventClicked:"empty"},eventTypeList:function(){return allEventTypes},eventStatusList:function(){return allEventStats},adminList:function(){return allCoordMembers}}});modalInstance.result.then(function(createdEvent){$rootScope.stateIsLoading={showLoading:!1},void 0!==createdEvent&&("created"==createdEvent[1]&&$scope.eventList.push(createdEvent[0]),"updated"===createdEvent[1]&&($scope.eventList[indexClicked]=createdEvent[0]),"deleted"==createdEvent[1]&&$scope.eventList.splice(indexClicked,1))})}}}])}(),function(){"use strict";var STNControllers=angular.module("STNControllers");STNControllers.controller("approvalCtrl",["$scope","$cookies","$rootScope","$location","$http","stateList","instrumentList","allSensorTypes","allDepTypes","HWM","DATA_FILE","INSTRUMENT","MEMBER","SITE",function($scope,$cookies,$rootScope,$location,$http,stateList,instrumentList,allSensorTypes,allDepTypes,HWM,DATA_FILE,INSTRUMENT,MEMBER,SITE){if(void 0===$cookies.get("STNCreds")||""===$cookies.get("STNCreds"))$scope.auth=!1,$location.path("/login");else{if($rootScope.thisPage="Approval",$rootScope.activeMenu="approval",$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEvent=null!==$cookies.get("SessionEventName")&&void 0!==$cookies.get("SessionEventName")?$cookies.get("SessionEventName"):"All Events"}),$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",MEMBER.getAll(function(response){$scope.allMembers=response}).$promise,$scope.allStates=stateList,$scope.allInstruments=instrumentList,$scope.allSensorTypes=allSensorTypes,$scope.allDeploymentTypes=allDepTypes,$scope.ChosenEvent={},$scope.ChosenState={},$scope.ChosenMember={},$scope.unApprovedHWMs=[],$scope.showHWMbox=!1,$scope.unApprovedDFs=[],$scope.showDFbox=!1,void 0!==$rootScope.approvalSearch){var thisSearch=$rootScope.approvalSearch;$scope.sessionEvent=Number(thisSearch.eventID),$scope.ChosenState.id=thisSearch.stateID,$scope.ChosenMember.id=thisSearch.memberID,$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM.getUnapprovedHWMs({IsApproved:"false",Event:thisSearch.eventID,Member:thisSearch.memberID,State:thisSearch.stateID},function(response){$scope.unApprovedHWMs=response,$scope.showHWMbox=!0},function(errorResponse){alert("Error: "+errorResponse.statusText)}),DATA_FILE.getUnapprovedDFs({IsApproved:"false",Event:thisSearch.eventID,Processor:thisSearch.memberID,State:thisSearch.stateID},function(response1){var DFs=response1;angular.forEach(DFs,function(df){var thisdfInst=$scope.allInstruments.filter(function(i){return i.instrument_id==df.instrument_id})[0],formattedDF={},siteID=thisdfInst.site_id;formattedDF.SiteId=siteID,formattedDF.senType=$scope.allSensorTypes.filter(function(s){return s.sensor_type_id==thisdfInst.sensor_type_id})[0].sensor;var depType=$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==thisdfInst.deployment_type_id})[0];formattedDF.depType=void 0!==depType?depType.method:void 0,formattedDF.InstrID=thisdfInst.instrument_id,SITE.query({id:siteID}).$promise.then(function(response2){formattedDF.SiteNo=response2.site_no,$scope.unApprovedDFs.push(formattedDF)})}),$scope.showDFbox=!0},function(errorResponse1){alert("Error: "+errorResponse1.statusText)})}$scope.search=function(){$scope.unApprovedHWMs=[],$scope.showHWMbox=!1,$scope.unApprovedDFs=[],$scope.showDFbox=!1;var evID=null!==$cookies.get("SessionEventID")&&void 0!==$cookies.get("SessionEventID")?$cookies.get("SessionEventID"):0,sID=void 0!==$scope.ChosenState.id?$scope.ChosenState.id:0,mID=void 0!==$scope.ChosenMember.id?$scope.ChosenMember.id:0;$rootScope.approvalSearch={eventID:evID,stateID:sID,memberID:mID},$http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",HWM.getUnapprovedHWMs({IsApproved:"false",Event:evID,Member:mID,State:sID},function(response){angular.forEach(response,function(h){SITE.query({id:h.site_id}).$promise.then(function(sresponse){h.site_no=sresponse.site_no,$scope.unApprovedHWMs.push(h)})}),$scope.showHWMbox=!0},function(errorResponse){alert("Error: "+errorResponse.statusText)}),DATA_FILE.getUnapprovedDFs({IsApproved:"false",Event:evID,Processor:mID,State:sID},function(response1){var DFs=response1;angular.forEach(DFs,function(df){var thisdfInst=$scope.allInstruments.filter(function(i){return i.instrument_id==df.instrument_id})[0],formattedDF={},siteID=thisdfInst.site_id;formattedDF.SiteId=siteID,formattedDF.senType=$scope.allSensorTypes.filter(function(s){return s.sensor_type_id==thisdfInst.sensor_type_id})[0].sensor;var depType=$scope.allDeploymentTypes.filter(function(d){return d.deployment_type_id==thisdfInst.deployment_type_id})[0];formattedDF.depType=void 0!==depType?depType.method:void 0,formattedDF.InstrID=thisdfInst.instrument_id,SITE.query({id:siteID}).$promise.then(function(response2){formattedDF.SiteNo=response2.site_no,$scope.unApprovedDFs.push(formattedDF)})}),$scope.showDFbox=!0},function(errorResponse1){alert("Error: "+errorResponse1.statusText)})}}}])}(),function(){"use strict";var STNResource=angular.module("STNResource",["ngResource"]),rootURL="https://stn.wim.usgs.gov/STNServices";STNResource.factory("GEOCODE",["$resource",function($resource){return $resource(rootURL+"/Geocode/location",{},{getAddressParts:{method:"GET",params:{Latitude:"@Latitude",Longitude:"@Longitude"}}})}]),STNResource.factory("AGENCY",["$resource",function($resource){return $resource(rootURL+"/Agencies/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("CONTACT_TYPE",["$resource",function($resource){return $resource(rootURL+"/ContactTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("CONTACT",["$resource",function($resource){return $resource(rootURL+"/Contacts/:id.json",{},{query:{},getContactModel:{method:"GET",isArray:!0},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("COUNTIES",["$resource",function($resource){return $resource(rootURL+"/Counties/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("DATA_FILE",["$resource",function($resource){return $resource(rootURL+"/DataFiles/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getDFApproval:{method:"GET",cache:!1,isArray:!1,url:rootURL+"/DataFiles/:id/Approval.json"},getUnapprovedDFs:{method:"GET",isArray:!0,cache:!1},approveDF:{method:"POST",cache:!1,isArray:!1,params:{id:"@id"},url:rootURL+"/datafiles/:id/Approve.json"},approveNWISDF:{method:"POST",cache:!1,isArray:!1,params:{id:"@id"},url:rootURL+"/datafiles/:id/NWISApprove.json"},unApproveDF:{method:"DELETE",cache:!1,isArray:!1,url:rootURL+"/datafiles/:id/Unapprove.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("DEPLOYMENT_PRIORITY",["$resource",function($resource){return $resource(rootURL+"/DeploymentPriorities/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("DEPLOYMENT_TYPE",["$resource",function($resource){return $resource(rootURL+"/DeploymentTypes/:id.json",{},{query:{},getDepSensType:{method:"GET",isArray:!1,url:rootURL+"/DeploymentTypes/:id/SensorType.json"},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("EVENT",["$resource",function($resource){return $resource(rootURL+"/Events/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getEventSites:{method:"GET",isArray:!0,url:rootURL+"/Events/:id/Sites.json"},getFilteredEvents:{method:"GET",isArray:!0,url:rootURL+"/Events/FilteredEvents.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("EVENT_STATUS",["$resource",function($resource){return $resource(rootURL+"/EventStatus/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("EVENT_TYPE",["$resource",function($resource){return $resource(rootURL+"/EventTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("FILE",["$resource",function($resource){return $resource(rootURL+"/Files/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getFileItem:{method:"GET",isArray:!1,url:rootURL+"/Files/:id/Item"},update:{method:"PUT",cache:!1,isArray:!1},uploadFile:{method:"POST",url:rootURL+"/Files/bytes",headers:{"Content-Type":void 0},transformRequest:angular.identity,cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("FILE_STAMP",["$rootScope",function($rootScope){return{getStamp:function(){var stamp="?"+(new Date).getTime();return stamp},setStamp:function(){var stamp="?"+(new Date).getTime();$rootScope.$broadcast("fileStampSet",stamp)}}}]),STNResource.factory("FILE_TYPE",["$resource",function($resource){return $resource(rootURL+"/FileTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HORIZONTAL_COLL_METHODS",["$resource",function($resource){return $resource(rootURL+"/HorizontalMethods/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HORIZONTAL_DATUM",["$resource",function($resource){return $resource(rootURL+"/HorizontalDatums/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HOUSING_TYPE",["$resource",function($resource){return $resource(rootURL+"/HousingTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HWM",["$resource",function($resource){return $resource(rootURL+"/hwms/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getFilteredHWMs:{method:"GET",isArray:!0,url:rootURL+"/HWMs/FilteredHWMs.json"},getUnapprovedHWMs:{method:"GET",isArray:!0,cache:!1},getHWMApproval:{method:"GET",cache:!1,isArray:!1,url:rootURL+"/hwms/:id/Approval.json"},approveHWM:{method:"POST",cache:!1,isArray:!1,params:{id:"@id"},url:rootURL+"/hwms/:id/Approve.json"},unApproveHWM:{method:"DELETE",cache:!1,isArray:!1,url:rootURL+"/hwms/:id/Unapprove.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HWM_Service",[function(){var allSiteHWMs=[];return{getAllSiteHWMs:function(){return allSiteHWMs},setAllSiteHWMs:function(sh){allSiteHWMs=sh}}}]),STNResource.factory("HWM_QUALITY",["$resource",function($resource){return $resource(rootURL+"/HWMQualities/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("HWM_TYPE",["$resource",function($resource){return $resource(rootURL+"/HWMTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("INSTRUMENT",["$resource",function($resource){return $resource(rootURL+"/Instruments/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getstatusInstruments:{method:"GET",isArray:!0,url:rootURL+"/Instruments.json/"},getFullInstrument:{method:"GET",url:rootURL+"/Instruments/:id/FullInstrument.json"},getInstrumentStatus:{method:"GET",url:rootURL+"/Instruments/:id/InstrumentStatus.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("Instrument_Service",[function(){var allSiteSensors=[];return{getAllSiteSensors:function(){return allSiteSensors},setAllSiteSensors:function(ss){allSiteSensors=ss}}}]),STNResource.factory("INSTRUMENT_STATUS",["$resource",function($resource){return $resource(rootURL+"/InstrumentStatus/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("INST_COLL_CONDITION",["$resource",function($resource){return $resource(rootURL+"/InstrCollectConditions/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("LANDOWNER_CONTACT",["$resource",function($resource){return $resource(rootURL+"/LandOwners/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("Map_Site",["SITE","$rootScope","$cookies",function(SITE,$rootScope,$cookies){var MapSiteParts=[];return{getMapSiteParts:function(){return MapSiteParts},setMapSiteParts:function(siteId){MapSiteParts=[],SITE.query({id:siteId}).$promise.then(function(response){MapSiteParts.push(response),SITE.getSitePeaks({id:siteId}).$promise.then(function(pResponse){MapSiteParts.push(pResponse),$rootScope.$broadcast("mapSiteClickResults",MapSiteParts)})})}}}]),STNResource.factory("Map_Filter",["$rootScope",function($rootScope){var filteredSites=[];return{setFilteredSites:function(sitesArray){filteredSites=sitesArray,$rootScope.$broadcast("filterSitesClick",filteredSites)}}}]),STNResource.factory("MARKER",["$resource",function($resource){return $resource(rootURL+"/Markers/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("MEMBER",["$resource",function($resource){return $resource(rootURL+"/Members/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getRoleMembers:{method:"GET",isArray:!0,url:rootURL+"/Roles/:roleId/Members.json"},getEventPeople:{method:"GET",isArray:!0,url:rootURL+"/Events/:Eventid/Members.json"},changePW:{method:"GET",isArray:!1,url:rootURL+"/Members.json"},addMember:{method:"POST",cache:!1,isArray:!1,url:rootURL+"/Members/:pass/addMember"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},deleteMember:{method:"DELETE",cache:!1,isArray:!1,url:rootURL+"/Members/:id"}})}]),STNResource.factory("NETWORK_NAME",["$resource",function($resource){return $resource(rootURL+"/NetworkNames/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("NETWORK_TYPE",["$resource",function($resource){return $resource(rootURL+"/NetworkTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("OBJECTIVE_POINT",["$resource",function($resource){return $resource(rootURL+"/ObjectivePoints/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},getOPFiles:{method:"GET",isArray:!0,url:rootURL+"/ObjectivePoints/:id/Files"},getOPControls:{method:"GET",cache:!1,isArray:!0,url:rootURL+"/ObjectivePoints/:id/OPControls.json"},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("OP_CONTROL_IDENTIFIER",["$resource",function($resource){return $resource(rootURL+"/OPControlIdentifiers/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("OP_MEASURE",["$resource",function($resource){return $resource(rootURL+"/OPMeasurements/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getInstStatOPMeasures:{method:"GET",isArray:!0,url:rootURL+"/InstrumentStatus/:instrumentStatusId/OPMeasurements"},getDatumLocationOPMeasures:{method:"GET",isArray:!0,url:rootURL+"/ObjectivePoints/:objectivePointId/OPMeasurements"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("OP_QUALITY",["$resource",function($resource){return $resource(rootURL+"/ObjectivePointQualities/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("OP_TYPE",["$resource",function($resource){return $resource(rootURL+"/OPTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("PEAK",["$resource",function($resource){return $resource(rootURL+"/PeakSummaries/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getPeakSummaryDFs:{method:"GET",isArray:!0,cache:!1,url:rootURL+"/PeakSummaries/:id/DataFiles.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("REPORT",["$resource",function($resource){return $resource(rootURL+"/ReportingMetrics/:id.json",{},{query:{},getReportByEvSt:{method:"GET",isArray:!0},getDailyReportTots:{method:"GET",url:rootURL+"/ReportingMetrics/DailyReportTotals"},getMemberReports:{method:"GET",isArray:!0,url:rootURL+"/Members/:memberId/Reports.json"
},getFilteredReports:{method:"GET",isArray:!0,url:rootURL+"/ReportingMetrics/FilteredReports.json"},getReportwithContacts:{method:"GET",isArray:!0,url:rootURL+"/ReportResource/FilteredReportModel.json"},getReportsCSV:{method:"GET",url:rootURL+"/ReportingMetrics/FilteredReports.csv"},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},addReportContact:{method:"POST",cache:!1,isArray:!1,params:{ReportId:"@reportId",ContactTypeId:"@contactTypeId"},url:rootURL+"/ReportingMetrics/:reportId/AddContactType/:contactTypeId"},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("ROLE",["$resource",function($resource){return $resource(rootURL+"/Roles/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0}})}]),STNResource.factory("SENSOR_BRAND",["$resource",function($resource){return $resource(rootURL+"/SensorBrands/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("SENSOR_TYPE",["$resource",function($resource){return $resource(rootURL+"/SensorTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},getSensorDeploymentTypes:{method:"GET",isArray:!0,url:rootURL+"/SensorTypes/:id/DeploymentTypes.json"},addSensorDeploymentType:{method:"POST",cache:!1,isArray:!0,params:{sensorTypeId:"@sensorTypeId",DeploymentTypeId:"@deploymentTypeId"},url:rootURL+"/SensorTypes/:sensorTypeId/addDeploymentType"},removeSensorDeploymentType:{method:"POST",isArray:!1,params:{sensorTypeId:"@sensorTypeId",DeploymentTypeId:"@deploymentTypeId"},url:rootURL+"/SensorTypes/:sensorTypeId/removeDeploymentType"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("SITE",["$resource",function($resource){return $resource(rootURL+"/Sites/:id.json",{},{query:{},getProximitySites:{method:"GET",isArray:!0,params:{Latitude:"@latitude",Longitude:"@longitude",Buffer:"@buffer"}},getAll:{method:"GET",isArray:!0},getSearchedSite:{method:"GET",isArray:!1,url:rootURL+"/Sites/Search"},getFilteredSites:{method:"GET",isArray:!0,url:rootURL+"/Sites/FilteredSites.json"},getSiteLandOwner:{method:"GET",url:rootURL+"/Sites/:id/LandOwner.json"},getSiteNetworkTypes:{method:"GET",isArray:!0,url:rootURL+"/sites/:id/networkTypes.json"},postSiteNetworkType:{method:"POST",cache:!1,params:{siteId:"@siteId",NetworkTypeId:"@networkTypeId"},isArray:!0,url:rootURL+"/sites/:siteId/AddNetworkType"},deleteSiteNetworkType:{method:"DELETE",cache:!1,isArray:!1,url:rootURL+"/sites/:siteId/removeNetworkType?NetworkTypeId:networkTypeId"},getSiteNetworkNames:{method:"GET",isArray:!0,url:rootURL+"/sites/:id/networkNames.json"},postSiteNetworkName:{method:"POST",cache:!1,params:{siteId:"@siteId",NetworkNameId:"@networkNameId"},isArray:!0,url:rootURL+"/sites/:siteId/AddNetworkName"},deleteSiteNetworkName:{method:"DELETE",cache:!1,isArray:!1,url:rootURL+"/sites/:siteId/removeNetworkName?NetworkNameId:networkNameId"},getSiteHousings:{method:"GET",isArray:!0,url:rootURL+"/sites/:id/SiteHousings.json"},getSiteOPs:{method:"GET",isArray:!0,url:rootURL+"/Sites/:id/ObjectivePoints.json"},getSiteSensors:{method:"GET",isArray:!0,url:rootURL+"/Sites/:id/SiteFullInstrumentList.json"},getSiteHWMs:{method:"GET",isArray:!0,url:rootURL+"/Sites/:id/HWMs.json"},getSiteFiles:{method:"GET",isArray:!0,url:rootURL+"/Sites/:id/Files.json"},getSitePeaks:{method:"GET",isArray:!0,url:rootURL+"/Sites/:id/PeakSummaryView.json"},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("Site_Files",["$cookies","$rootScope",function($cookies,$rootScope){var allSiteFiles=[];return{getAllSiteFiles:function(){return allSiteFiles},setAllSiteFiles:function(sf){allSiteFiles=sf,$rootScope.$broadcast("siteFilesUpdated",allSiteFiles)}}}]),STNResource.factory("STATE",["$resource",function($resource){return $resource(rootURL+"/States/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("SITE_HOUSING",["$resource",function($resource){return $resource(rootURL+"/SiteHousings/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("STATUS_TYPE",["$resource",function($resource){return $resource(rootURL+"/StatusTypes/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("SOURCE",["$resource",function($resource){return $resource(rootURL+"/Sources/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("VERTICAL_COLL_METHOD",["$resource",function($resource){return $resource(rootURL+"/VerticalMethods/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("VERTICAL_DATUM",["$resource",function($resource){return $resource(rootURL+"/VerticalDatums/:id.json",{},{query:{},getAll:{method:"GET",isArray:!0},update:{method:"PUT",cache:!1,isArray:!1},save:{method:"POST",cache:!1,isArray:!1},"delete":{method:"DELETE",cache:!1,isArray:!1}})}]),STNResource.factory("Login",["$resource",function($resource){return $resource(rootURL+"/login",{},{login:{method:"GET",cache:!1,isArray:!1}})}])}(),function(){"use strict";var STNBusinessServices=angular.module("STNBusinessServices",["ngCookies"]);STNBusinessServices.factory("setCreds",["$cookies",function($cookies){return function(un,pw,userName,userRole,userID){var token=un.concat(":",pw);$cookies.STNCreds=token,$cookies.STNUsername=un,$cookies.usersName=userName,$cookies.mID=userID;var roleName;switch(userRole){case 1:roleName="Admin";break;case 2:roleName="Manager";break;case 3:roleName="Field";break;case 4:roleName="Public";break;default:roleName="CitizenManager"}$cookies.usersRole=roleName}}]),STNBusinessServices.factory("setSessionEvent",["$cookies",function($cookies){return function(evId,evName){$cookies.SessionEventID=evId,$cookies.SessionEventName=evName}}]),STNBusinessServices.factory("setSessionTeam",["$cookies",function($cookies){return function(tId,tName){$cookies.SessionTeaID=tId,$cookies.SessionTeamName=tName}}]),STNBusinessServices.factory("setLoggedIn",["$cookies",function($cookies){var loggedIn=!1;return{isLoggedIn:function(){return loggedIn},changeLoggedIn:function(YesOrNo){loggedIn=YesOrNo}}}]),STNBusinessServices.factory("checkCreds",["$cookies",function($cookies){return function(){var returnVal=!1,STNCreds=$cookies.STNCreds;return void 0!==STNCreds&&""!==STNCreds&&(returnVal=!0),returnVal}}]),STNBusinessServices.factory("getCreds",["$cookies",function($cookies){return function(){var returnVal="",STNCreds=$cookies.STNCreds;return void 0!==STNCreds&&""!==STNCreds&&(returnVal=btoa(STNCreds)),returnVal}}]),STNBusinessServices.factory("getUsersNAME",["$cookies",function($cookies){return function(){var returnVal="",usesName=$cookies.usersName;return void 0!==usesName&&""!==usesName&&(returnVal=usesName),returnVal}}]),STNBusinessServices.factory("getUserID",["$cookies",function($cookies){return function(){var returnVal="",userID=$cookies.mID;return void 0!==userID&&""!==userID&&(returnVal=userID),returnVal}}]),STNBusinessServices.factory("getUsername",["$cookies",function($cookies){return function(){var returnVal="",STNUsername=$cookies.STNUsername;return void 0!==STNUsername&&""!==STNUsername&&(returnVal=STNUsername),returnVal}}]),STNBusinessServices.factory("getUserRole",["$cookies",function($cookies){return function(){var returnVal="",userRole=$cookies.usersRole;return void 0!==userRole&&""!==userRole&&(returnVal=userRole),returnVal}}]),STNBusinessServices.factory("deleteCreds",["$cookies",function($cookies){return function(){$cookies.STNCreds="",$cookies.STNUsername="",$cookies.usersName="",$cookies.usersRole=""}}])}(),function(){"use strict";var ModalControllers=angular.module("ModalControllers");ModalControllers.controller("ConfirmModalCtrl",["$scope","$uibModalInstance","nameToRemove","what",function($scope,$uibModalInstance,nameToRemove,what){switch(what){case"Member":$scope.nameToRmv=nameToRemove.fname+" "+nameToRemove.lname;break;case"Event":$scope.nameToRmv=nameToRemove.event_name;break;case"Agency":$scope.nameToRmv=nameToRemove.agency_name;break;case"Contact Type":$scope.nameToRmv=nameToRemove.type;break;case"Deployment Priority":$scope.nameToRmv=nameToRemove.priority_name;break;case"Event Status":$scope.nameToRmv=nameToRemove.status;break;case"File Type":$scope.nameToRmv=nameToRemove.filetype;break;case"Horizontal Collection Method":$scope.nameToRmv=nameToRemove.hcollect_method;break;case"Horizontal Datum":$scope.nameToRmv=nameToRemove.datum_name;break;case"Housing Type":$scope.nameToRmv=nameToRemove.type_name;break;case"HWM Quality":$scope.nameToRmv=nameToRemove.hwm_quality;break;case"HWM Type":$scope.nameToRmv=nameToRemove.hwm_type;break;case"Instrument Collection Condition":$scope.nameToRmv=nameToRemove.condition;break;case"Marker":$scope.nameToRmv=nameToRemove.marker1;break;case"Network Name":$scope.nameToRmv=nameToRemove.name;break;case"Objective Point Quality":$scope.nameToRmv=nameToRemove.quality;break;case"Objective Point Type":$scope.nameToRmv=nameToRemove.op_type;break;case"Sensor Brand":$scope.nameToRmv=nameToRemove.brand_name;break;case"Deployment Type":$scope.nameToRmv=nameToRemove.method;break;case"Status Type":$scope.nameToRmv=nameToRemove.status;break;case"Sensor Type":$scope.nameToRmv=nameToRemove.sensor;break;case"Network Type":$scope.nameToRmv=nameToRemove.network_type_name;break;case"Vertical Collection Method":$scope.nameToRmv=nameToRemove.vcollect_method;break;case"Vertical Datum":$scope.nameToRmv=nameToRemove.datum_abbreviation;break;case"Objective Point":$scope.nameToRmv=nameToRemove.name;break;case"HWM":var aDate=new Date(nameToRemove.flag_date),year=aDate.getFullYear(),month=aDate.getMonth(),day=("0"+aDate.getDate()).slice(-2),monthNames=["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],dateWOtime=monthNames[month]+" "+day+", "+year;$scope.nameToRmv="Flagged on: "+dateWOtime;break;case"Sensor":$scope.nameToRmv=nameToRemove.deploymentType;break;case"File":var f=void 0!==nameToRemove.name||null!==nameToRemove.name?nameToRemove.name:nameToRemove.file_date;f=null!==f||void 0!==f?f:nameToRemove.file_id,$scope.nameToRmv=f;break;case"Peak":$scope.nameToRmv=nameToRemove.peak_summary_id}$scope.what=what,$scope.ok=function(){$uibModalInstance.close(nameToRemove)},$scope.cancel=function(){$uibModalInstance.dismiss("cancel")}}])}(),!function($){function Inputmask(alias,options){return this instanceof Inputmask?("object"==typeof alias?options=alias:(options=options||{},options.alias=alias),this.el=void 0,this.opts=$.extend(!0,{},this.defaults,options),this.noMasksCache=options&&void 0!==options.definitions,this.userOptions=options||{},void resolveAlias(this.opts.alias,options,this.opts)):new Inputmask(alias,options)}function isInputEventSupported(eventName){var el=document.createElement("input"),evName="on"+eventName,isSupported=evName in el;return isSupported||(el.setAttribute(evName,"return;"),isSupported="function"==typeof el[evName]),el=null,isSupported}function isInputTypeSupported(inputType){var isSupported="text"===inputType||"tel"===inputType||"password"===inputType;if(!isSupported){var el=document.createElement("input");el.setAttribute("type",inputType),isSupported="text"===el.type,el=null}return isSupported}function resolveAlias(aliasStr,options,opts){var aliasDefinition=opts.aliases[aliasStr];return aliasDefinition?(aliasDefinition.alias&&resolveAlias(aliasDefinition.alias,void 0,opts),$.extend(!0,opts,aliasDefinition),$.extend(!0,opts,options),!0):(null===opts.mask&&(opts.mask=aliasStr),!1)}function importAttributeOptions(npt,opts,userOptions){function importOption(option,optionData){optionData=void 0!==optionData?optionData:npt.getAttribute("data-inputmask-"+option),null!==optionData&&("string"==typeof optionData&&(0===option.indexOf("on")?optionData=window[optionData]:"false"===optionData?optionData=!1:"true"===optionData&&(optionData=!0)),"mask"===option&&0===optionData.indexOf("[")?(userOptions[option]=optionData.replace(/[\s[\]]/g,"").split(","),userOptions[option][0]=userOptions[option][0].replace("'",""),userOptions[option][userOptions[option].length-1]=userOptions[option][userOptions[option].length-1].replace("'","")):userOptions[option]=optionData)}var option,dataoptions,optionData,attrOptions=npt.getAttribute("data-inputmask");attrOptions&&""!==attrOptions&&(attrOptions=attrOptions.replace(new RegExp("'","g"),'"'),dataoptions=JSON.parse("{"+attrOptions+"}"));for(option in opts){if(dataoptions){optionData=void 0;for(var p in dataoptions)if(p.toLowerCase()===option.toLowerCase()){optionData=dataoptions[p];break}}importOption(option,optionData)}if(userOptions.alias){resolveAlias(userOptions.alias,userOptions,opts);for(option in opts)importOption(option)}return $.extend(!0,opts,userOptions),opts}function generateMaskSet(opts,nocache){function analyseMask(mask){function MaskToken(isGroup,isOptional,isQuantifier,isAlternator){this.matches=[],this.isGroup=isGroup||!1,this.isOptional=isOptional||!1,this.isQuantifier=isQuantifier||!1,this.isAlternator=isAlternator||!1,this.quantifier={min:1,max:1}}function insertTestDefinition(mtoken,element,position){var maskdef=opts.definitions[element];position=void 0!==position?position:mtoken.matches.length;var prevMatch=mtoken.matches[position-1];if(maskdef&&!escaped){maskdef.placeholder=$.isFunction(maskdef.placeholder)?maskdef.placeholder(opts):maskdef.placeholder;for(var prevalidators=maskdef.prevalidator,prevalidatorsL=prevalidators?prevalidators.length:0,i=1;i<maskdef.cardinality;i++){var prevalidator=prevalidatorsL>=i?prevalidators[i-1]:[],validator=prevalidator.validator,cardinality=prevalidator.cardinality;mtoken.matches.splice(position++,0,{fn:validator?"string"==typeof validator?new RegExp(validator):new function(){this.test=validator}:new RegExp("."),cardinality:cardinality?cardinality:1,optionality:mtoken.isOptional,newBlockMarker:void 0===prevMatch||prevMatch.def!==(maskdef.definitionSymbol||element),casing:maskdef.casing,def:maskdef.definitionSymbol||element,placeholder:maskdef.placeholder,mask:element}),prevMatch=mtoken.matches[position-1]}mtoken.matches.splice(position++,0,{fn:maskdef.validator?"string"==typeof maskdef.validator?new RegExp(maskdef.validator):new function(){this.test=maskdef.validator}:new RegExp("."),cardinality:maskdef.cardinality,optionality:mtoken.isOptional,newBlockMarker:void 0===prevMatch||prevMatch.def!==(maskdef.definitionSymbol||element),casing:maskdef.casing,def:maskdef.definitionSymbol||element,placeholder:maskdef.placeholder,mask:element})}else mtoken.matches.splice(position++,0,{fn:null,cardinality:0,optionality:mtoken.isOptional,newBlockMarker:void 0===prevMatch||prevMatch.def!==element,casing:null,def:element,placeholder:void 0,mask:element}),escaped=!1}function verifyGroupMarker(lastMatch,isOpenGroup){lastMatch.isGroup&&(lastMatch.isGroup=!1,insertTestDefinition(lastMatch,opts.groupmarker.start,0),isOpenGroup!==!0&&insertTestDefinition(lastMatch,opts.groupmarker.end))}function maskCurrentToken(m,currentToken,lastMatch,extraCondition){currentToken.matches.length>0&&(void 0===extraCondition||extraCondition)&&(lastMatch=currentToken.matches[currentToken.matches.length-1],verifyGroupMarker(lastMatch)),insertTestDefinition(currentToken,m)}function defaultCase(){if(openenings.length>0){if(currentOpeningToken=openenings[openenings.length-1],maskCurrentToken(m,currentOpeningToken,lastMatch,!currentOpeningToken.isAlternator),currentOpeningToken.isAlternator){alternator=openenings.pop();for(var mndx=0;mndx<alternator.matches.length;mndx++)alternator.matches[mndx].isGroup=!1;openenings.length>0?(currentOpeningToken=openenings[openenings.length-1],currentOpeningToken.matches.push(alternator)):currentToken.matches.push(alternator)}}else maskCurrentToken(m,currentToken,lastMatch)}function reverseTokens(maskToken){function reverseStatic(st){return st===opts.optionalmarker.start?st=opts.optionalmarker.end:st===opts.optionalmarker.end?st=opts.optionalmarker.start:st===opts.groupmarker.start?st=opts.groupmarker.end:st===opts.groupmarker.end&&(st=opts.groupmarker.start),st}maskToken.matches=maskToken.matches.reverse();for(var match in maskToken.matches){var intMatch=parseInt(match);if(maskToken.matches[match].isQuantifier&&maskToken.matches[intMatch+1]&&maskToken.matches[intMatch+1].isGroup){var qt=maskToken.matches[match];maskToken.matches.splice(match,1),maskToken.matches.splice(intMatch+1,0,qt)}maskToken.matches[match]=void 0!==maskToken.matches[match].matches?reverseTokens(maskToken.matches[match]):reverseStatic(maskToken.matches[match])}return maskToken}for(var match,m,openingToken,currentOpeningToken,alternator,lastMatch,groupToken,tokenizer=/(?:[?*+]|\{[0-9\+\*]+(?:,[0-9\+\*]*)?\})|[^.?*+^${[]()|\\]+|./g,escaped=!1,currentToken=new MaskToken,openenings=[],maskTokens=[];match=tokenizer.exec(mask);)if(m=match[0],escaped)defaultCase();else switch(m.charAt(0)){case opts.escapeChar:escaped=!0;break;case opts.optionalmarker.end:case opts.groupmarker.end:if(openingToken=openenings.pop(),void 0!==openingToken)if(openenings.length>0){if(currentOpeningToken=openenings[openenings.length-1],currentOpeningToken.matches.push(openingToken),currentOpeningToken.isAlternator){alternator=openenings.pop();for(var mndx=0;mndx<alternator.matches.length;mndx++)alternator.matches[mndx].isGroup=!1;openenings.length>0?(currentOpeningToken=openenings[openenings.length-1],currentOpeningToken.matches.push(alternator)):currentToken.matches.push(alternator)}}else currentToken.matches.push(openingToken);else defaultCase();break;case opts.optionalmarker.start:openenings.push(new MaskToken(!1,!0));break;case opts.groupmarker.start:openenings.push(new MaskToken(!0));break;case opts.quantifiermarker.start:var quantifier=new MaskToken(!1,!1,!0);m=m.replace(/[{}]/g,"");var mq=m.split(","),mq0=isNaN(mq[0])?mq[0]:parseInt(mq[0]),mq1=1===mq.length?mq0:isNaN(mq[1])?mq[1]:parseInt(mq[1]);if(("*"===mq1||"+"===mq1)&&(mq0="*"===mq1?0:1),quantifier.quantifier={min:mq0,max:mq1},openenings.length>0){var matches=openenings[openenings.length-1].matches;match=matches.pop(),match.isGroup||(groupToken=new MaskToken(!0),groupToken.matches.push(match),match=groupToken),matches.push(match),matches.push(quantifier)}else match=currentToken.matches.pop(),match.isGroup||(groupToken=new MaskToken(!0),groupToken.matches.push(match),match=groupToken),currentToken.matches.push(match),currentToken.matches.push(quantifier);break;case opts.alternatormarker:openenings.length>0?(currentOpeningToken=openenings[openenings.length-1],lastMatch=currentOpeningToken.matches.pop()):lastMatch=currentToken.matches.pop(),lastMatch.isAlternator?openenings.push(lastMatch):(alternator=new MaskToken(!1,!1,!1,!0),alternator.matches.push(lastMatch),openenings.push(alternator));break;default:defaultCase()}for(;openenings.length>0;)openingToken=openenings.pop(),verifyGroupMarker(openingToken,!0),currentToken.matches.push(openingToken);return currentToken.matches.length>0&&(lastMatch=currentToken.matches[currentToken.matches.length-1],verifyGroupMarker(lastMatch),maskTokens.push(currentToken)),opts.numericInput&&reverseTokens(maskTokens[0]),maskTokens}function generateMask(mask,metadata){if(null===mask||""===mask)return void 0;if(1===mask.length&&opts.greedy===!1&&0!==opts.repeat&&(opts.placeholder=""),opts.repeat>0||"*"===opts.repeat||"+"===opts.repeat){var repeatStart="*"===opts.repeat?0:"+"===opts.repeat?1:opts.repeat;mask=opts.groupmarker.start+mask+opts.groupmarker.end+opts.quantifiermarker.start+repeatStart+","+opts.repeat+opts.quantifiermarker.end}var masksetDefinition;return void 0===Inputmask.prototype.masksCache[mask]||nocache===!0?(masksetDefinition={mask:mask,maskToken:analyseMask(mask),validPositions:{},_buffer:void 0,buffer:void 0,tests:{},metadata:metadata},nocache!==!0&&(Inputmask.prototype.masksCache[opts.numericInput?mask.split("").reverse().join(""):mask]=masksetDefinition,masksetDefinition=$.extend(!0,{},Inputmask.prototype.masksCache[opts.numericInput?mask.split("").reverse().join(""):mask]))):masksetDefinition=$.extend(!0,{},Inputmask.prototype.masksCache[opts.numericInput?mask.split("").reverse().join(""):mask]),masksetDefinition}function preProcessMask(mask){return mask=mask.toString()}var ms;if($.isFunction(opts.mask)&&(opts.mask=opts.mask(opts)),$.isArray(opts.mask)){if(opts.mask.length>1){opts.keepStatic=null===opts.keepStatic?!0:opts.keepStatic;var altMask="(";return $.each(opts.numericInput?opts.mask.reverse():opts.mask,function(ndx,msk){altMask.length>1&&(altMask+=")|("),altMask+=preProcessMask(void 0===msk.mask||$.isFunction(msk.mask)?msk:msk.mask)}),altMask+=")",generateMask(altMask,opts.mask)}opts.mask=opts.mask.pop()}return opts.mask&&(ms=void 0===opts.mask.mask||$.isFunction(opts.mask.mask)?generateMask(preProcessMask(opts.mask),opts.mask):generateMask(preProcessMask(opts.mask.mask),opts.mask)),ms}function maskScope(actionObj,maskset,opts){function getMaskTemplate(baseOnInput,minimalPos,includeInput){minimalPos=minimalPos||0;var ndxIntlzr,test,testPos,maskTemplate=[],pos=0;do{if(baseOnInput===!0&&getMaskSet().validPositions[pos]){var validPos=getMaskSet().validPositions[pos];test=validPos.match,ndxIntlzr=validPos.locator.slice(),maskTemplate.push(includeInput===!0?validPos.input:getPlaceholder(pos,test))}else testPos=getTestTemplate(pos,ndxIntlzr,pos-1),test=testPos.match,ndxIntlzr=testPos.locator.slice(),maskTemplate.push(getPlaceholder(pos,test));pos++}while((void 0===maxLength||maxLength>pos-1)&&null!==test.fn||null===test.fn&&""!==test.def||minimalPos>=pos);return maskTemplate.pop(),maskTemplate}function getMaskSet(){return maskset}function resetMaskSet(soft){var maskset=getMaskSet();maskset.buffer=void 0,maskset.tests={},soft!==!0&&(maskset._buffer=void 0,maskset.validPositions={},maskset.p=0)}function getLastValidPosition(closestTo,strict){var maskset=getMaskSet(),lastValidPosition=-1,valids=maskset.validPositions;void 0===closestTo&&(closestTo=-1);var before=lastValidPosition,after=lastValidPosition;for(var posNdx in valids){var psNdx=parseInt(posNdx);valids[psNdx]&&(strict||null!==valids[psNdx].match.fn)&&(closestTo>=psNdx&&(before=psNdx),psNdx>=closestTo&&(after=psNdx))}return lastValidPosition=-1!==before&&closestTo-before>1||closestTo>after?before:after}function setValidPosition(pos,validTest,fromSetValid){if(opts.insertMode&&void 0!==getMaskSet().validPositions[pos]&&void 0===fromSetValid){var i,positionsClone=$.extend(!0,{},getMaskSet().validPositions),lvp=getLastValidPosition();for(i=pos;lvp>=i;i++)delete getMaskSet().validPositions[i];getMaskSet().validPositions[pos]=validTest;var j,valid=!0,vps=getMaskSet().validPositions;for(i=j=pos;lvp>=i;i++){var t=positionsClone[i];if(void 0!==t)for(var posMatch=j,prevPosMatch=-1;posMatch<getMaskLength()&&(null==t.match.fn&&vps[i]&&(vps[i].match.optionalQuantifier===!0||vps[i].match.optionality===!0)||null!=t.match.fn);){if(null===t.match.fn||!opts.keepStatic&&vps[i]&&(void 0!==vps[i+1]&&getTests(i+1,vps[i].locator.slice(),i).length>1||void 0!==vps[i].alternation)?posMatch++:posMatch=seekNext(j),positionCanMatchDefinition(posMatch,t.match.def)){valid=isValid(posMatch,t.input,!0,!0)!==!1,j=posMatch;break}if(valid=null==t.match.fn,prevPosMatch===posMatch)break;prevPosMatch=posMatch}if(!valid)break}if(!valid)return getMaskSet().validPositions=$.extend(!0,{},positionsClone),resetMaskSet(!0),!1}else getMaskSet().validPositions[pos]=validTest;return resetMaskSet(!0),!0}function stripValidPositions(start,end,nocheck,strict){var i,startPos=start;for(getMaskSet().p=start,i=startPos;end>i;i++)void 0!==getMaskSet().validPositions[i]&&(nocheck===!0||opts.canClearPosition(getMaskSet(),i,getLastValidPosition(),strict,opts)!==!1)&&delete getMaskSet().validPositions[i];for(i=startPos+1;i<=getLastValidPosition();){for(;void 0!==getMaskSet().validPositions[startPos];)startPos++;var s=getMaskSet().validPositions[startPos];if(startPos>i&&(i=startPos+1),void 0===getMaskSet().validPositions[i]&&isMask(i)||void 0!==s)i++;else{var t=getTestTemplate(i);positionCanMatchDefinition(startPos,t.match.def)?isValid(startPos,t.input||getPlaceholder(i),!0)!==!1&&(delete getMaskSet().validPositions[i],i++):isMask(i)||(i++,startPos--),startPos++}}var lvp=getLastValidPosition(),ml=getMaskLength();for(strict!==!0&&nocheck!==!0&&void 0!==getMaskSet().validPositions[lvp]&&getMaskSet().validPositions[lvp].input===opts.radixPoint&&delete getMaskSet().validPositions[lvp],i=lvp+1;ml>=i;i++)getMaskSet().validPositions[i]&&delete getMaskSet().validPositions[i];resetMaskSet(!0)}function getTestTemplate(pos,ndxIntlzr,tstPs){var testPos=getMaskSet().validPositions[pos];if(void 0===testPos)for(var testPositions=getTests(pos,ndxIntlzr,tstPs),lvp=getLastValidPosition(),lvTest=getMaskSet().validPositions[lvp]||getTests(0)[0],lvTestAltArr=void 0!==lvTest.alternation?lvTest.locator[lvTest.alternation].toString().split(","):[],ndx=0;ndx<testPositions.length&&(testPos=testPositions[ndx],!(testPos.match&&(opts.greedy&&testPos.match.optionalQuantifier!==!0||(testPos.match.optionality===!1||testPos.match.newBlockMarker===!1)&&testPos.match.optionalQuantifier!==!0)&&(void 0===lvTest.alternation||lvTest.alternation!==testPos.alternation||void 0!==testPos.locator[lvTest.alternation]&&checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(","),lvTestAltArr))));ndx++);return testPos}function getTest(pos){return getMaskSet().validPositions[pos]?getMaskSet().validPositions[pos].match:getTests(pos)[0].match}function positionCanMatchDefinition(pos,def){for(var valid=!1,tests=getTests(pos),tndx=0;tndx<tests.length;tndx++)if(tests[tndx].match&&tests[tndx].match.def===def){valid=!0;break}return valid}function getTests(pos,ndxIntlzr,tstPs,cacheable){function resolveTestFromToken(maskToken,ndxInitializer,loopNdx,quantifierRecurse){function handleMatch(match,loopNdx,quantifierRecurse){if(testPos>1e4)throw"Inputmask: There is probably an error in your mask definition or in the code. Create an issue on github with an example of the mask you are using. "+getMaskSet().mask;if(testPos===pos&&void 0===match.matches)return matches.push({match:match,locator:loopNdx.reverse()}),!0;if(void 0!==match.matches){if(match.isGroup&&quantifierRecurse!==match){if(match=handleMatch(maskToken.matches[$.inArray(match,maskToken.matches)+1],loopNdx))return!0}else if(match.isOptional){var optionalToken=match;if(match=resolveTestFromToken(match,ndxInitializer,loopNdx,quantifierRecurse)){if(latestMatch=matches[matches.length-1].match,isFirstMatch=0===$.inArray(latestMatch,optionalToken.matches),!isFirstMatch)return!0;insertStop=!0,testPos=pos}}else if(match.isAlternator){var maltMatches,alternateToken=match,malternateMatches=[],currentMatches=matches.slice(),loopNdxCnt=loopNdx.length,altIndex=ndxInitializer.length>0?ndxInitializer.shift():-1;if(-1===altIndex||"string"==typeof altIndex){var currentPos=testPos,ndxInitializerClone=ndxInitializer.slice(),altIndexArr=[];"string"==typeof altIndex&&(altIndexArr=altIndex.split(","));for(var amndx=0;amndx<alternateToken.matches.length;amndx++){if(matches=[],match=handleMatch(alternateToken.matches[amndx],[amndx].concat(loopNdx),quantifierRecurse)||match,match!==!0&&void 0!==match&&altIndexArr[altIndexArr.length-1]<alternateToken.matches.length){var ntndx=maskToken.matches.indexOf(match)+1;maskToken.matches.length>ntndx&&(match=handleMatch(maskToken.matches[ntndx],[ntndx].concat(loopNdx.slice(1,loopNdx.length)),quantifierRecurse),match&&(altIndexArr.push(ntndx.toString()),$.each(matches,function(ndx,lmnt){lmnt.alternation=loopNdx.length-1})))}maltMatches=matches.slice(),testPos=currentPos,matches=[];for(var i=0;i<ndxInitializerClone.length;i++)ndxInitializer[i]=ndxInitializerClone[i];for(var ndx1=0;ndx1<maltMatches.length;ndx1++){var altMatch=maltMatches[ndx1];altMatch.alternation=altMatch.alternation||loopNdxCnt;for(var ndx2=0;ndx2<malternateMatches.length;ndx2++){var altMatch2=malternateMatches[ndx2];if(altMatch.match.mask===altMatch2.match.mask&&("string"!=typeof altIndex||-1!==$.inArray(altMatch.locator[altMatch.alternation].toString(),altIndexArr))){maltMatches.splice(ndx1,1),ndx1--,altMatch2.locator[altMatch.alternation]=altMatch2.locator[altMatch.alternation]+","+altMatch.locator[altMatch.alternation],altMatch2.alternation=altMatch.alternation;break}}}malternateMatches=malternateMatches.concat(maltMatches)}"string"==typeof altIndex&&(malternateMatches=$.map(malternateMatches,function(lmnt,ndx){if(isFinite(ndx)){var mamatch,alternation=lmnt.alternation,altLocArr=lmnt.locator[alternation].toString().split(",");lmnt.locator[alternation]=void 0,lmnt.alternation=void 0;for(var alndx=0;alndx<altLocArr.length;alndx++)mamatch=-1!==$.inArray(altLocArr[alndx],altIndexArr),mamatch&&(void 0!==lmnt.locator[alternation]?(lmnt.locator[alternation]+=",",lmnt.locator[alternation]+=altLocArr[alndx]):lmnt.locator[alternation]=parseInt(altLocArr[alndx]),lmnt.alternation=alternation);if(void 0!==lmnt.locator[alternation])return lmnt}})),matches=currentMatches.concat(malternateMatches),testPos=pos,insertStop=matches.length>0}else match=alternateToken.matches[altIndex]?handleMatch(alternateToken.matches[altIndex],[altIndex].concat(loopNdx),quantifierRecurse):!1;if(match)return!0}else if(match.isQuantifier&&quantifierRecurse!==maskToken.matches[$.inArray(match,maskToken.matches)-1])for(var qt=match,qndx=ndxInitializer.length>0?ndxInitializer.shift():0;qndx<(isNaN(qt.quantifier.max)?qndx+1:qt.quantifier.max)&&pos>=testPos;qndx++){var tokenGroup=maskToken.matches[$.inArray(qt,maskToken.matches)-1];if(match=handleMatch(tokenGroup,[qndx].concat(loopNdx),tokenGroup)){if(latestMatch=matches[matches.length-1].match,latestMatch.optionalQuantifier=qndx>qt.quantifier.min-1,isFirstMatch=0===$.inArray(latestMatch,tokenGroup.matches)){if(qndx>qt.quantifier.min-1){insertStop=!0,testPos=pos;break}return!0}return!0}}else if(match=resolveTestFromToken(match,ndxInitializer,loopNdx,quantifierRecurse))return!0}else testPos++}for(var tndx=ndxInitializer.length>0?ndxInitializer.shift():0;tndx<maskToken.matches.length;tndx++)if(maskToken.matches[tndx].isQuantifier!==!0){var match=handleMatch(maskToken.matches[tndx],[tndx].concat(loopNdx),quantifierRecurse);if(match&&testPos===pos)return match;if(testPos>pos)break}}var latestMatch,isFirstMatch,maskTokens=getMaskSet().maskToken,testPos=ndxIntlzr?tstPs:0,ndxInitializer=ndxIntlzr||[0],matches=[],insertStop=!1;if(cacheable===!0&&getMaskSet().tests[pos])return getMaskSet().tests[pos];if(void 0===ndxIntlzr){for(var test,previousPos=pos-1;void 0===(test=getMaskSet().validPositions[previousPos])&&previousPos>-1&&(!getMaskSet().tests[previousPos]||void 0===(test=getMaskSet().tests[previousPos][0]));)previousPos--;void 0!==test&&previousPos>-1&&(testPos=previousPos,ndxInitializer=test.locator.slice())}for(var mtndx=ndxInitializer.shift();mtndx<maskTokens.length;mtndx++){var match=resolveTestFromToken(maskTokens[mtndx],ndxInitializer,[mtndx]);if(match&&testPos===pos||testPos>pos)break}return(0===matches.length||insertStop)&&matches.push({match:{fn:null,cardinality:0,optionality:!0,casing:null,def:""},locator:[]}),getMaskSet().tests[pos]=$.extend(!0,[],matches),getMaskSet().tests[pos];

}function getBufferTemplate(){return void 0===getMaskSet()._buffer&&(getMaskSet()._buffer=getMaskTemplate(!1,1)),getMaskSet()._buffer}function getBuffer(noCache){return(void 0===getMaskSet().buffer||noCache===!0)&&(noCache===!0&&(getMaskSet().test={}),getMaskSet().buffer=getMaskTemplate(!0,getLastValidPosition(),!0)),getMaskSet().buffer}function refreshFromBuffer(start,end,buffer){var i;if(buffer=buffer,start===!0)resetMaskSet(),start=0,end=buffer.length;else for(i=start;end>i;i++)delete getMaskSet().validPositions[i],delete getMaskSet().tests[i];for(i=start;end>i;i++)resetMaskSet(!0),buffer[i]!==opts.skipOptionalPartCharacter&&isValid(i,buffer[i],!0,!0)}function casing(elem,test){switch(test.casing){case"upper":elem=elem.toUpperCase();break;case"lower":elem=elem.toLowerCase()}return elem}function checkAlternationMatch(altArr1,altArr2){for(var altArrC=opts.greedy?altArr2:altArr2.slice(0,1),isMatch=!1,alndx=0;alndx<altArr1.length;alndx++)if(-1!==$.inArray(altArr1[alndx],altArrC)){isMatch=!0;break}return isMatch}function isValid(pos,c,strict,fromSetValid){function _isValid(position,c,strict,fromSetValid){var rslt=!1;return $.each(getTests(position),function(ndx,tst){for(var test=tst.match,loopend=c?1:0,chrs="",i=test.cardinality;i>loopend;i--)chrs+=getBufferElement(position-(i-1));if(c&&(chrs+=c),getBuffer(!0),rslt=null!=test.fn?test.fn.test(chrs,getMaskSet(),position,strict,opts):c!==test.def&&c!==opts.skipOptionalPartCharacter||""===test.def?!1:{c:test.def,pos:position},rslt!==!1){var elem=void 0!==rslt.c?rslt.c:c;elem=elem===opts.skipOptionalPartCharacter&&null===test.fn?test.def:elem;var validatedPos=position,possibleModifiedBuffer=getBuffer();if(void 0!==rslt.remove&&($.isArray(rslt.remove)||(rslt.remove=[rslt.remove]),$.each(rslt.remove.sort(function(a,b){return b-a}),function(ndx,lmnt){stripValidPositions(lmnt,lmnt+1,!0)})),void 0!==rslt.insert&&($.isArray(rslt.insert)||(rslt.insert=[rslt.insert]),$.each(rslt.insert.sort(function(a,b){return a-b}),function(ndx,lmnt){isValid(lmnt.pos,lmnt.c,!0)})),rslt.refreshFromBuffer){var refresh=rslt.refreshFromBuffer;if(strict=!0,refreshFromBuffer(refresh===!0?refresh:refresh.start,refresh.end,possibleModifiedBuffer),void 0===rslt.pos&&void 0===rslt.c)return rslt.pos=getLastValidPosition(),!1;if(validatedPos=void 0!==rslt.pos?rslt.pos:position,validatedPos!==position)return rslt=$.extend(rslt,isValid(validatedPos,elem,!0)),!1}else if(rslt!==!0&&void 0!==rslt.pos&&rslt.pos!==position&&(validatedPos=rslt.pos,refreshFromBuffer(position,validatedPos,getBuffer().slice()),validatedPos!==position))return rslt=$.extend(rslt,isValid(validatedPos,elem,!0)),!1;return rslt!==!0&&void 0===rslt.pos&&void 0===rslt.c?!1:(ndx>0&&resetMaskSet(!0),setValidPosition(validatedPos,$.extend({},tst,{input:casing(elem,test)}),fromSetValid)||(rslt=!1),!1)}}),rslt}function alternate(pos,c,strict,fromSetValid){for(var lastAlt,alternation,isValidRslt,altPos,i,validPos,validPsClone=$.extend(!0,{},getMaskSet().validPositions),lAlt=getLastValidPosition();lAlt>=0&&(altPos=getMaskSet().validPositions[lAlt],!altPos||void 0===altPos.alternation||(lastAlt=lAlt,alternation=getMaskSet().validPositions[lastAlt].alternation,getTestTemplate(lastAlt).locator[altPos.alternation]===altPos.locator[altPos.alternation]));lAlt--);if(void 0!==alternation){lastAlt=parseInt(lastAlt);for(var decisionPos in getMaskSet().validPositions)if(decisionPos=parseInt(decisionPos),altPos=getMaskSet().validPositions[decisionPos],decisionPos>=lastAlt&&void 0!==altPos.alternation){var altNdxs=getMaskSet().validPositions[lastAlt].locator[alternation].toString().split(","),decisionTaker=altPos.locator[alternation]||altNdxs[0];decisionTaker.length>0&&(decisionTaker=decisionTaker.split(",")[0]);for(var mndx=0;mndx<altNdxs.length;mndx++)if(decisionTaker<altNdxs[mndx]){for(var possibilityPos,possibilities,dp=decisionPos;dp>=0;dp--)if(possibilityPos=getMaskSet().validPositions[dp],void 0!==possibilityPos){possibilities=possibilityPos.locator[alternation],possibilityPos.locator[alternation]=parseInt(altNdxs[mndx]);break}if(decisionTaker!==possibilityPos.locator[alternation]){var validInputs=[],staticInputsBeforePos=0;for(i=decisionPos+1;i<getLastValidPosition()+1;i++)validPos=getMaskSet().validPositions[i],validPos&&(null!=validPos.match.fn?validInputs.push(validPos.input):pos>i&&staticInputsBeforePos++),delete getMaskSet().validPositions[i],delete getMaskSet().tests[i];for(resetMaskSet(!0),opts.keepStatic=!opts.keepStatic,isValidRslt=!0;validInputs.length>0;){var input=validInputs.shift();if(input!==opts.skipOptionalPartCharacter&&!(isValidRslt=isValid(getLastValidPosition()+1,input,!1,!0)))break}if(possibilityPos.alternation=alternation,possibilityPos.locator[alternation]=possibilities,isValidRslt){var targetLvp=getLastValidPosition(pos)+1,staticInputsBeforePosAlternate=0;for(i=decisionPos+1;i<getLastValidPosition()+1;i++)validPos=getMaskSet().validPositions[i],validPos&&null==validPos.match.fn&&pos>i&&staticInputsBeforePosAlternate++;pos+=staticInputsBeforePosAlternate-staticInputsBeforePos,isValidRslt=isValid(pos>targetLvp?targetLvp:pos,c,strict,fromSetValid)}if(opts.keepStatic=!opts.keepStatic,isValidRslt)return isValidRslt;resetMaskSet(),getMaskSet().validPositions=$.extend(!0,{},validPsClone)}}break}}return!1}function trackbackAlternations(originalPos,newPos){for(var vp=getMaskSet().validPositions[newPos],targetLocator=vp.locator,tll=targetLocator.length,ps=originalPos;newPos>ps;ps++)if(!isMask(ps)){var tests=getTests(ps),bestMatch=tests[0],equality=-1;$.each(tests,function(ndx,tst){for(var i=0;tll>i;i++)tst.locator[i]&&checkAlternationMatch(tst.locator[i].toString().split(","),targetLocator[i].toString().split(","))&&i>equality&&(equality=i,bestMatch=tst)}),setValidPosition(ps,$.extend({},bestMatch,{input:bestMatch.match.def}),!0)}}strict=strict===!0;for(var buffer=getBuffer(),pndx=pos-1;pndx>-1&&!getMaskSet().validPositions[pndx];pndx--);for(pndx++;pos>pndx;pndx++)void 0===getMaskSet().validPositions[pndx]&&((!isMask(pndx)||buffer[pndx]!==getPlaceholder(pndx))&&getTests(pndx).length>1||buffer[pndx]===opts.radixPoint||"0"===buffer[pndx]&&$.inArray(opts.radixPoint,buffer)<pndx)&&_isValid(pndx,buffer[pndx],!0);var maskPos=pos,result=!1,positionsClone=$.extend(!0,{},getMaskSet().validPositions);if(maskPos<getMaskLength()&&(result=_isValid(maskPos,c,strict,fromSetValid),(!strict||fromSetValid)&&result===!1)){var currentPosValid=getMaskSet().validPositions[maskPos];if(!currentPosValid||null!==currentPosValid.match.fn||currentPosValid.match.def!==c&&c!==opts.skipOptionalPartCharacter){if((opts.insertMode||void 0===getMaskSet().validPositions[seekNext(maskPos)])&&!isMask(maskPos))for(var nPos=maskPos+1,snPos=seekNext(maskPos);snPos>=nPos;nPos++)if(result=_isValid(nPos,c,strict,fromSetValid),result!==!1){trackbackAlternations(maskPos,nPos),maskPos=nPos;break}}else result={caret:seekNext(maskPos)}}if(result===!1&&opts.keepStatic&&isComplete(buffer)&&(result=alternate(pos,c,strict,fromSetValid)),result===!0&&(result={pos:maskPos}),$.isFunction(opts.postValidation)&&result!==!1&&!strict){var postValidResult=opts.postValidation(getBuffer(!0),opts);if(postValidResult){if(postValidResult.refreshFromBuffer){var refresh=postValidResult.refreshFromBuffer;refreshFromBuffer(refresh===!0?refresh:refresh.start,refresh.end,postValidResult.buffer),resetMaskSet(!0),result=postValidResult}}else resetMaskSet(!0),getMaskSet().validPositions=$.extend(!0,{},positionsClone),result=!1}return result}function isMask(pos){var test=getTest(pos);if(null!=test.fn)return test.fn;if(pos>-1&&!opts.keepStatic&&void 0===getMaskSet().validPositions[pos]){for(var tests=getTests(pos),staticAlternations=!0,i=0;i<tests.length;i++)if(""!==tests[i].match.def&&(void 0===tests[i].alternation||tests[i].locator[tests[i].alternation].length>1)){staticAlternations=!1;break}return staticAlternations}return!1}function getMaskLength(){var maskLength;maxLength=void 0!==el?el.maxLength:void 0,-1===maxLength&&(maxLength=void 0);var pos,lvp=getLastValidPosition(),testPos=getMaskSet().validPositions[lvp],ndxIntlzr=void 0!==testPos?testPos.locator.slice():void 0;for(pos=lvp+1;void 0===testPos||null!==testPos.match.fn||null===testPos.match.fn&&""!==testPos.match.def;pos++)testPos=getTestTemplate(pos,ndxIntlzr,pos-1),ndxIntlzr=testPos.locator.slice();var lastTest=getTest(pos-1);return maskLength=""!==lastTest.def?pos:pos-1,void 0===maxLength||maxLength>maskLength?maskLength:maxLength}function seekNext(pos,newBlock){var maskL=getMaskLength();if(pos>=maskL)return maskL;for(var position=pos;++position<maskL&&(newBlock===!0&&(getTest(position).newBlockMarker!==!0||!isMask(position))||newBlock!==!0&&!isMask(position)&&(opts.nojumps!==!0||opts.nojumpsThreshold>position)););return position}function seekPrevious(pos,newBlock){var position=pos;if(0>=position)return 0;for(;--position>0&&(newBlock===!0&&getTest(position).newBlockMarker!==!0||newBlock!==!0&&!isMask(position)););return position}function getBufferElement(position){return void 0===getMaskSet().validPositions[position]?getPlaceholder(position):getMaskSet().validPositions[position].input}function writeBuffer(input,buffer,caretPos,event,triggerInputEvent){if(event&&$.isFunction(opts.onBeforeWrite)){var result=opts.onBeforeWrite.call(input,event,buffer,caretPos,opts);if(result){if(result.refreshFromBuffer){var refresh=result.refreshFromBuffer;refreshFromBuffer(refresh===!0?refresh:refresh.start,refresh.end,result.buffer||buffer),buffer=getBuffer(!0)}void 0!==caretPos&&(caretPos=void 0!==result.caret?result.caret:caretPos)}}input.inputmask._valueSet(buffer.join("")),void 0===caretPos||void 0!==event&&"blur"===event.type||caret(input,caretPos),triggerInputEvent===!0&&(skipInputEvent=!0,$(input).trigger("input"))}function getPlaceholder(pos,test){if(test=test||getTest(pos),void 0!==test.placeholder)return test.placeholder;if(null===test.fn){if(pos>-1&&!opts.keepStatic&&void 0===getMaskSet().validPositions[pos]){for(var prevTest,tests=getTests(pos),hasAlternations=!1,i=0;i<tests.length;i++){if(prevTest&&""!==tests[i].match.def&&tests[i].match.def!==prevTest.match.def&&(void 0===tests[i].alternation||tests[i].alternation===prevTest.alternation)){hasAlternations=!0;break}tests[i].match.optionality!==!0&&tests[i].match.optionalQuantifier!==!0&&(prevTest=tests[i])}if(hasAlternations)return opts.placeholder.charAt(pos%opts.placeholder.length)}return test.def}return opts.placeholder.charAt(pos%opts.placeholder.length)}function checkVal(input,writeOut,strict,nptvl){function isTemplateMatch(){var isMatch=!1,charCodeNdx=getBufferTemplate().slice(initialNdx,seekNext(initialNdx)).join("").indexOf(charCodes);if(-1!==charCodeNdx&&!isMask(initialNdx)){isMatch=!0;for(var bufferTemplateArr=getBufferTemplate().slice(initialNdx,initialNdx+charCodeNdx),i=0;i<bufferTemplateArr.length;i++)if(" "!==bufferTemplateArr[i]){isMatch=!1;break}}return isMatch}var inputValue=nptvl.slice(),charCodes="",initialNdx=0;if(resetMaskSet(),getMaskSet().p=seekNext(-1),!strict)if(opts.autoUnmask!==!0){var staticInput=getBufferTemplate().slice(0,seekNext(-1)).join(""),matches=inputValue.join("").match(new RegExp("^"+Inputmask.escapeRegex(staticInput),"g"));matches&&matches.length>0&&(inputValue.splice(0,matches.length*staticInput.length),initialNdx=seekNext(initialNdx))}else initialNdx=seekNext(initialNdx);$.each(inputValue,function(ndx,charCode){var keypress=$.Event("keypress");keypress.which=charCode.charCodeAt(0),charCodes+=charCode;var lvp=getLastValidPosition(void 0,!0),lvTest=getMaskSet().validPositions[lvp],nextTest=getTestTemplate(lvp+1,lvTest?lvTest.locator.slice():void 0,lvp);if(!isTemplateMatch()||strict||opts.autoUnmask){var pos=strict?ndx:null==nextTest.match.fn&&nextTest.match.optionality&&lvp+1<getMaskSet().p?lvp+1:getMaskSet().p;keypressEvent.call(input,keypress,!0,!1,strict,pos),initialNdx=pos+1,charCodes=""}else keypressEvent.call(input,keypress,!0,!1,!0,lvp+1)}),writeOut&&writeBuffer(input,getBuffer(),document.activeElement===input?seekNext(getLastValidPosition(0)):void 0,$.Event("checkval"))}function unmaskedvalue(input){if(input&&void 0===input.inputmask)return input.value;var umValue=[],vps=getMaskSet().validPositions;for(var pndx in vps)vps[pndx].match&&null!=vps[pndx].match.fn&&umValue.push(vps[pndx].input);var unmaskedValue=0===umValue.length?null:(isRTL?umValue.reverse():umValue).join("");if(null!==unmaskedValue){var bufferValue=(isRTL?getBuffer().slice().reverse():getBuffer()).join("");$.isFunction(opts.onUnMask)&&(unmaskedValue=opts.onUnMask.call(input,bufferValue,unmaskedValue,opts)||unmaskedValue)}return unmaskedValue}function caret(input,begin,end){function translatePosition(pos){if(isRTL&&"number"==typeof pos&&(!opts.greedy||""!==opts.placeholder)){var bffrLght=getBuffer().join("").length;pos=bffrLght-pos}return pos}var range;if("number"!=typeof begin)return input.setSelectionRange?(begin=input.selectionStart,end=input.selectionEnd):window.getSelection?(range=window.getSelection().getRangeAt(0),(range.commonAncestorContainer.parentNode===input||range.commonAncestorContainer===input)&&(begin=range.startOffset,end=range.endOffset)):document.selection&&document.selection.createRange&&(range=document.selection.createRange(),begin=0-range.duplicate().moveStart("character",-1e5),end=begin+range.text.length),{begin:translatePosition(begin),end:translatePosition(end)};begin=translatePosition(begin),end=translatePosition(end),end="number"==typeof end?end:begin;var scrollCalc=parseInt(((input.ownerDocument.defaultView||window).getComputedStyle?(input.ownerDocument.defaultView||window).getComputedStyle(input,null):input.currentStyle).fontSize)*end;if(input.scrollLeft=scrollCalc>input.scrollWidth?scrollCalc:0,androidchrome||opts.insertMode!==!1||begin!==end||end++,input.setSelectionRange)input.selectionStart=begin,input.selectionEnd=end;else if(window.getSelection){if(range=document.createRange(),void 0===input.firstChild){var textNode=document.createTextNode("");input.appendChild(textNode)}range.setStart(input.firstChild,begin<input.inputmask._valueGet().length?begin:input.inputmask._valueGet().length),range.setEnd(input.firstChild,end<input.inputmask._valueGet().length?end:input.inputmask._valueGet().length),range.collapse(!0);var sel=window.getSelection();sel.removeAllRanges(),sel.addRange(range)}else input.createTextRange&&(range=input.createTextRange(),range.collapse(!0),range.moveEnd("character",end),range.moveStart("character",begin),range.select())}function determineLastRequiredPosition(returnDefinition){var pos,testPos,buffer=getBuffer(),bl=buffer.length,lvp=getLastValidPosition(),positions={},lvTest=getMaskSet().validPositions[lvp],ndxIntlzr=void 0!==lvTest?lvTest.locator.slice():void 0;for(pos=lvp+1;pos<buffer.length;pos++)testPos=getTestTemplate(pos,ndxIntlzr,pos-1),ndxIntlzr=testPos.locator.slice(),positions[pos]=$.extend(!0,{},testPos);var lvTestAlt=lvTest&&void 0!==lvTest.alternation?lvTest.locator[lvTest.alternation]:void 0;for(pos=bl-1;pos>lvp&&(testPos=positions[pos],(testPos.match.optionality||testPos.match.optionalQuantifier||lvTestAlt&&(lvTestAlt!==positions[pos].locator[lvTest.alternation]&&null!=testPos.match.fn||null===testPos.match.fn&&testPos.locator[lvTest.alternation]&&checkAlternationMatch(testPos.locator[lvTest.alternation].toString().split(","),lvTestAlt.toString().split(","))&&""!==getTests(pos)[0].def))&&buffer[pos]===getPlaceholder(pos,testPos.match));pos--)bl--;return returnDefinition?{l:bl,def:positions[bl]?positions[bl].match:void 0}:bl}function clearOptionalTail(buffer){for(var rl=determineLastRequiredPosition(),lmib=buffer.length-1;lmib>rl&&!isMask(lmib);lmib--);return buffer.splice(rl,lmib+1-rl),buffer}function isComplete(buffer){if($.isFunction(opts.isComplete))return opts.isComplete.call(el,buffer,opts);if("*"===opts.repeat)return void 0;var complete=!1,lrp=determineLastRequiredPosition(!0),aml=seekPrevious(lrp.l);if(void 0===lrp.def||lrp.def.newBlockMarker||lrp.def.optionality||lrp.def.optionalQuantifier){complete=!0;for(var i=0;aml>=i;i++){var test=getTestTemplate(i).match;if(null!==test.fn&&void 0===getMaskSet().validPositions[i]&&test.optionality!==!0&&test.optionalQuantifier!==!0||null===test.fn&&buffer[i]!==getPlaceholder(i,test)){complete=!1;break}}}return complete}function isSelection(begin,end){return isRTL?begin-end>1||begin-end===1&&opts.insertMode:end-begin>1||end-begin===1&&opts.insertMode}function wrapEventRuler(eventHandler){return function(e){var inComposition=!1,keydownPressed=!1;if(void 0===this.inputmask){var imOpts=$.data(this,"_inputmask_opts");imOpts?new Inputmask(imOpts).mask(this):$(this).off(".inputmask")}else{if("setvalue"===e.type||!(this.disabled||this.readOnly&&!("keydown"===e.type&&e.ctrlKey&&67===e.keyCode||opts.tabThrough===!1&&e.keyCode===Inputmask.keyCode.TAB))){switch(e.type){case"input":if(skipInputEvent===!0||inComposition===!0)return skipInputEvent=!1,e.preventDefault();keydownPressed=!1;break;case"keydown":skipKeyPressEvent=!1,inComposition=!1,keydownPressed=!0;break;case"keypress":if(skipKeyPressEvent===!0)return e.preventDefault();skipKeyPressEvent=!0;break;case"compositionstart":inComposition=!0;break;case"compositionupdate":skipInputEvent=keydownPressed;break;case"compositionend":inComposition=!1,keydownPressed=!1;break;case"cut":skipInputEvent=!0}return eventHandler.apply(this,arguments)}e.preventDefault()}}}function patchValueProperty(npt){function patchValhook(type){if($.valHooks&&(void 0===$.valHooks[type]||$.valHooks[type].inputmaskpatch!==!0)){var valhookGet=$.valHooks[type]&&$.valHooks[type].get?$.valHooks[type].get:function(elem){return elem.value},valhookSet=$.valHooks[type]&&$.valHooks[type].set?$.valHooks[type].set:function(elem,value){return elem.value=value,elem};$.valHooks[type]={get:function(elem){if(elem.inputmask){if(elem.inputmask.opts.autoUnmask)return elem.inputmask.unmaskedvalue();var result=valhookGet(elem),maskset=elem.inputmask.maskset,bufferTemplate=maskset._buffer;return bufferTemplate=bufferTemplate?bufferTemplate.join(""):"",result!==bufferTemplate?result:""}return valhookGet(elem)},set:function(elem,value){var result,$elem=$(elem);return result=valhookSet(elem,value),elem.inputmask&&$elem.trigger("setvalue.inputmask"),result},inputmaskpatch:!0}}}function getter(){return this.inputmask?this.inputmask.opts.autoUnmask?this.inputmask.unmaskedvalue():valueGet.call(this)!==getBufferTemplate().join("")?document.activeElement===this&&opts.clearMaskOnLostFocus?(isRTL?clearOptionalTail(getBuffer()).reverse():clearOptionalTail(getBuffer())).join(""):valueGet.call(this):"":valueGet.call(this)}function setter(value){valueSet.call(this,value),this.inputmask&&$(this).trigger("setvalue.inputmask")}function installNativeValueSetFallback(npt){$(npt).on("mouseenter.inputmask",wrapEventRuler(function(event){var $input=$(this),input=this,value=input.inputmask._valueGet();""!==value&&value!==getBuffer().join("")&&$input.trigger("setvalue.inputmask")}))}var valueGet,valueSet;npt.inputmask.__valueGet||(Object.getOwnPropertyDescriptor&&void 0===npt.value?(valueGet=function(){return this.textContent},valueSet=function(value){this.textContent=value},Object.defineProperty(npt,"value",{get:getter,set:setter})):document.__lookupGetter__&&npt.__lookupGetter__("value")?(valueGet=npt.__lookupGetter__("value"),valueSet=npt.__lookupSetter__("value"),npt.__defineGetter__("value",getter),npt.__defineSetter__("value",setter)):(valueGet=function(){return npt.value},valueSet=function(value){npt.value=value},patchValhook(npt.type),installNativeValueSetFallback(npt)),npt.inputmask.__valueGet=valueGet,npt.inputmask._valueGet=function(overruleRTL){return isRTL&&overruleRTL!==!0?valueGet.call(this.el).split("").reverse().join(""):valueGet.call(this.el)},npt.inputmask.__valueSet=valueSet,npt.inputmask._valueSet=function(value,overruleRTL){valueSet.call(this.el,null===value||void 0===value?"":overruleRTL!==!0&&isRTL?value.split("").reverse().join(""):value)})}function handleRemove(input,k,pos,strict){function generalize(){if(opts.keepStatic){resetMaskSet(!0);var lastAlt,validInputs=[],positionsClone=$.extend(!0,{},getMaskSet().validPositions);for(lastAlt=getLastValidPosition();lastAlt>=0;lastAlt--){var validPos=getMaskSet().validPositions[lastAlt];if(validPos&&(null!=validPos.match.fn&&validInputs.push(validPos.input),delete getMaskSet().validPositions[lastAlt],void 0!==validPos.alternation&&validPos.locator[validPos.alternation]===getTestTemplate(lastAlt).locator[validPos.alternation]))break}if(lastAlt>-1)for(;validInputs.length>0;){getMaskSet().p=seekNext(getLastValidPosition());var keypress=$.Event("keypress");keypress.which=validInputs.pop().charCodeAt(0),keypressEvent.call(input,keypress,!0,!1,!1,getMaskSet().p)}else getMaskSet().validPositions=$.extend(!0,{},positionsClone)}}if((opts.numericInput||isRTL)&&(k===Inputmask.keyCode.BACKSPACE?k=Inputmask.keyCode.DELETE:k===Inputmask.keyCode.DELETE&&(k=Inputmask.keyCode.BACKSPACE),isRTL)){var pend=pos.end;pos.end=pos.begin,pos.begin=pend}k===Inputmask.keyCode.BACKSPACE&&(pos.end-pos.begin<1||opts.insertMode===!1)?(pos.begin=seekPrevious(pos.begin),void 0===getMaskSet().validPositions[pos.begin]||getMaskSet().validPositions[pos.begin].input!==opts.groupSeparator&&getMaskSet().validPositions[pos.begin].input!==opts.radixPoint||pos.begin--):k===Inputmask.keyCode.DELETE&&pos.begin===pos.end&&(pos.end=isMask(pos.end)?pos.end+1:seekNext(pos.end)+1,void 0===getMaskSet().validPositions[pos.begin]||getMaskSet().validPositions[pos.begin].input!==opts.groupSeparator&&getMaskSet().validPositions[pos.begin].input!==opts.radixPoint||pos.end++),stripValidPositions(pos.begin,pos.end,!1,strict),strict!==!0&&generalize();var lvp=getLastValidPosition(pos.begin);lvp<pos.begin?(-1===lvp&&resetMaskSet(),getMaskSet().p=seekNext(lvp)):strict!==!0&&(getMaskSet().p=pos.begin)}function keydownEvent(e){var input=this,$input=$(input),k=e.keyCode,pos=caret(input);k===Inputmask.keyCode.BACKSPACE||k===Inputmask.keyCode.DELETE||iphone&&127===k||e.ctrlKey&&88===k&&!isInputEventSupported("cut")?(e.preventDefault(),88===k&&(undoValue=getBuffer().join("")),handleRemove(input,k,pos),writeBuffer(input,getBuffer(),getMaskSet().p,e,undoValue!==getBuffer().join("")),input.inputmask._valueGet()===getBufferTemplate().join("")?$input.trigger("cleared"):isComplete(getBuffer())===!0&&$input.trigger("complete"),opts.showTooltip&&(input.title=opts.tooltip||getMaskSet().mask)):k===Inputmask.keyCode.END||k===Inputmask.keyCode.PAGE_DOWN?setTimeout(function(){var caretPos=seekNext(getLastValidPosition());opts.insertMode||caretPos!==getMaskLength()||e.shiftKey||caretPos--,caret(input,e.shiftKey?pos.begin:caretPos,caretPos)},0):k===Inputmask.keyCode.HOME&&!e.shiftKey||k===Inputmask.keyCode.PAGE_UP?caret(input,0,e.shiftKey?pos.begin:0):(opts.undoOnEscape&&k===Inputmask.keyCode.ESCAPE||90===k&&e.ctrlKey)&&e.altKey!==!0?(checkVal(input,!0,!1,undoValue.split("")),$input.trigger("click")):k!==Inputmask.keyCode.INSERT||e.shiftKey||e.ctrlKey?opts.tabThrough===!0&&k===Inputmask.keyCode.TAB?(e.shiftKey===!0?(null===getTest(pos.begin).fn&&(pos.begin=seekNext(pos.begin)),pos.end=seekPrevious(pos.begin,!0),pos.begin=seekPrevious(pos.end,!0)):(pos.begin=seekNext(pos.begin,!0),pos.end=seekNext(pos.begin,!0),pos.end<getMaskLength()&&pos.end--),pos.begin<getMaskLength()&&(e.preventDefault(),caret(input,pos.begin,pos.end))):opts.insertMode!==!1||e.shiftKey||(k===Inputmask.keyCode.RIGHT?setTimeout(function(){var caretPos=caret(input);caret(input,caretPos.begin)},0):k===Inputmask.keyCode.LEFT&&setTimeout(function(){var caretPos=caret(input);caret(input,isRTL?caretPos.begin+1:caretPos.begin-1)},0)):(opts.insertMode=!opts.insertMode,caret(input,opts.insertMode||pos.begin!==getMaskLength()?pos.begin:pos.begin-1)),opts.onKeyDown(e,getBuffer(),caret(input).begin,opts),ignorable=-1!==$.inArray(k,opts.ignorables)}function keypressEvent(e,checkval,writeOut,strict,ndx){var input=this,$input=$(input),k=e.which||e.charCode||e.keyCode;if(!(checkval===!0||e.ctrlKey&&e.altKey)&&(e.ctrlKey||e.metaKey||ignorable))return k===Inputmask.keyCode.ENTER&&undoValue!==getBuffer().join("")&&(undoValue=getBuffer().join(""),e.preventDefault(),setTimeout(function(){$input.trigger("change")},0)),!0;if(k){46===k&&e.shiftKey===!1&&","===opts.radixPoint&&(k=44);var forwardPosition,pos=checkval?{begin:ndx,end:ndx}:caret(input),c=String.fromCharCode(k),isSlctn=isSelection(pos.begin,pos.end);isSlctn&&(getMaskSet().undoPositions=$.extend(!0,{},getMaskSet().validPositions),handleRemove(input,Inputmask.keyCode.DELETE,pos,!0),pos.begin=getMaskSet().p,opts.insertMode||(opts.insertMode=!opts.insertMode,setValidPosition(pos.begin,strict),opts.insertMode=!opts.insertMode),isSlctn=!opts.multi),getMaskSet().writeOutBuffer=!0;var p=isRTL&&!isSlctn?pos.end:pos.begin,valResult=isValid(p,c,strict);if(valResult!==!1){if(valResult!==!0&&(p=void 0!==valResult.pos?valResult.pos:p,c=void 0!==valResult.c?valResult.c:c),resetMaskSet(!0),void 0!==valResult.caret)forwardPosition=valResult.caret;else{var vps=getMaskSet().validPositions;forwardPosition=!opts.keepStatic&&(void 0!==vps[p+1]&&getTests(p+1,vps[p].locator.slice(),p).length>1||void 0!==vps[p].alternation)?p+1:seekNext(p)}getMaskSet().p=forwardPosition}if(writeOut!==!1){var self=this;if(setTimeout(function(){opts.onKeyValidation.call(self,valResult,opts)},0),getMaskSet().writeOutBuffer&&valResult!==!1){var buffer=getBuffer();writeBuffer(input,buffer,checkval?void 0:opts.numericInput?seekPrevious(forwardPosition):forwardPosition,e,checkval!==!0),checkval!==!0&&setTimeout(function(){isComplete(buffer)===!0&&$input.trigger("complete")},0)}else isSlctn&&(getMaskSet().buffer=void 0,getMaskSet().validPositions=getMaskSet().undoPositions)}else isSlctn&&(getMaskSet().buffer=void 0,getMaskSet().validPositions=getMaskSet().undoPositions);if(opts.showTooltip&&(input.title=opts.tooltip||getMaskSet().mask),checkval&&$.isFunction(opts.onBeforeWrite)){var result=opts.onBeforeWrite(e,getBuffer(),forwardPosition,opts);if(result&&result.refreshFromBuffer){var refresh=result.refreshFromBuffer;refreshFromBuffer(refresh===!0?refresh:refresh.start,refresh.end,result.buffer),resetMaskSet(!0),result.caret&&(getMaskSet().p=result.caret)}}if(e.preventDefault(),checkval)return valResult}}function pasteEvent(e){var input=this,ev=e.originalEvent||e,$input=$(input),inputValue=input.inputmask._valueGet(!0),caretPos=caret(input);if("propertychange"===e.type&&input.inputmask._valueGet().length<=getMaskLength())return!0;if("paste"===e.type){var valueBeforeCaret=inputValue.substr(0,caretPos.begin),valueAfterCaret=inputValue.substr(caretPos.end,inputValue.length);valueBeforeCaret===getBufferTemplate().slice(0,caretPos.begin).join("")&&(valueBeforeCaret=""),valueAfterCaret===getBufferTemplate().slice(caretPos.end).join("")&&(valueAfterCaret=""),window.clipboardData&&window.clipboardData.getData?inputValue=valueBeforeCaret+window.clipboardData.getData("Text")+valueAfterCaret:ev.clipboardData&&ev.clipboardData.getData&&(inputValue=valueBeforeCaret+ev.clipboardData.getData("text/plain")+valueAfterCaret)}var pasteValue=inputValue;if($.isFunction(opts.onBeforePaste)){if(pasteValue=opts.onBeforePaste.call(input,inputValue,opts),pasteValue===!1)return e.preventDefault(),!1;pasteValue||(pasteValue=inputValue)}return checkVal(input,!1,!1,isRTL?pasteValue.split("").reverse():pasteValue.toString().split("")),writeBuffer(input,getBuffer(),void 0,e,!0),$input.trigger("click"),isComplete(getBuffer())===!0&&$input.trigger("complete"),!1}function inputFallBackEvent(e){var input=this;checkVal(input,!0,!1,input.inputmask._valueGet().split("")),isComplete(getBuffer())===!0&&$(input).trigger("complete"),e.preventDefault()}function mobileInputEvent(e){var input=this,caretPos=caret(input),currentValue=input._valueGet();currentValue=currentValue.replace(new RegExp("("+Inputmask.escapeRegex(getBufferTemplate().join(""))+")*"),""),caretPos.begin>currentValue.length&&(caret(input,currentValue.length),caretPos=caret(input)),getBuffer().length-currentValue.length!==1||currentValue.charAt(caretPos.begin)===getBuffer()[caretPos.begin]||currentValue.charAt(caretPos.begin+1)===getBuffer()[caretPos.begin]||isMask(caretPos.begin)?inputFallBackEvent.call(this,e):(e.keyCode=opts.keyCode.BACKSPACE,keydownEvent.call(input,e)),e.preventDefault()}function compositionStartEvent(e){var ev=e.originalEvent||e;undoValue=getBuffer().join(""),""===compositionData||0!==ev.data.indexOf(compositionData)}function compositionUpdateEvent(e){var input=this,ev=e.originalEvent||e;0===ev.data.indexOf(compositionData)&&(resetMaskSet(),getMaskSet().p=seekNext(-1),skipInputEvent=!0);for(var newData=ev.data,i=0;i<newData.length;i++){var keypress=$.Event("keypress");keypress.which=newData.charCodeAt(i),skipKeyPressEvent=!1,ignorable=!1,keypressEvent.call(input,keypress,!0,!1,!1,getMaskSet().p)}setTimeout(function(){var forwardPosition=getMaskSet().p;writeBuffer(input,getBuffer(),opts.numericInput?seekPrevious(forwardPosition):forwardPosition)},0),compositionData=ev.data}function compositionEndEvent(e){}function setValueEvent(e){var input=this,value=input.inputmask._valueGet();checkVal(input,!0,!1,($.isFunction(opts.onBeforeMask)?opts.onBeforeMask.call(input,value,opts)||value:value).split("")),undoValue=getBuffer().join(""),(opts.clearMaskOnLostFocus||opts.clearIncomplete)&&input.inputmask._valueGet()===getBufferTemplate().join("")&&input.inputmask._valueSet("")}function focusEvent(e){var input=this,nptValue=input.inputmask._valueGet();opts.showMaskOnFocus&&(!opts.showMaskOnHover||opts.showMaskOnHover&&""===nptValue)?input.inputmask._valueGet()!==getBuffer().join("")&&writeBuffer(input,getBuffer(),seekNext(getLastValidPosition())):mouseEnter===!1&&caret(input,seekNext(getLastValidPosition())),opts.positionCaretOnTab===!0&&setTimeout(function(){caret(input,seekNext(getLastValidPosition()))},0),undoValue=getBuffer().join("")}function mouseleaveEvent(e){var input=this;if(mouseEnter=!1,opts.clearMaskOnLostFocus){var buffer=getBuffer().slice(),nptValue=input.inputmask._valueGet();document.activeElement!==input&&nptValue!==input.getAttribute("placeholder")&&""!==nptValue&&(-1===getLastValidPosition()&&nptValue===getBufferTemplate().join("")?buffer=[]:clearOptionalTail(buffer),writeBuffer(input,buffer))}}function clickEvent(e){function doRadixFocus(clickPos){if(opts.radixFocus&&""!==opts.radixPoint){var vps=getMaskSet().validPositions;if(void 0===vps[clickPos]||vps[clickPos].input===getPlaceholder(clickPos)){if(clickPos<seekNext(-1))return!0;var radixPos=$.inArray(opts.radixPoint,getBuffer());if(-1!==radixPos){for(var vp in vps)if(vp>radixPos&&vps[vp].input!==getPlaceholder(vp))return!1;return!0}}}return!1}var input=this;if(document.activeElement===input){var selectedCaret=caret(input);if(selectedCaret.begin===selectedCaret.end)if(doRadixFocus(selectedCaret.begin))caret(input,$.inArray(opts.radixPoint,getBuffer()));else{var clickPosition=selectedCaret.begin,lvclickPosition=getLastValidPosition(clickPosition),lastPosition=seekNext(lvclickPosition);lastPosition>clickPosition?caret(input,isMask(clickPosition)||isMask(clickPosition-1)?clickPosition:seekNext(clickPosition)):caret(input,opts.numericInput?0:lastPosition)}}}function dblclickEvent(e){var input=this;setTimeout(function(){caret(input,0,seekNext(getLastValidPosition()))},0)}function cutEvent(e){var input=this,$input=$(input),pos=caret(input),ev=e.originalEvent||e,clipboardData=window.clipboardData||ev.clipboardData,clipData=isRTL?getBuffer().slice(pos.end,pos.begin):getBuffer().slice(pos.begin,pos.end);clipboardData.setData("text",isRTL?clipData.reverse().join(""):clipData.join("")),document.execCommand&&document.execCommand("copy"),handleRemove(input,Inputmask.keyCode.DELETE,pos),writeBuffer(input,getBuffer(),getMaskSet().p,e,undoValue!==getBuffer().join("")),input.inputmask._valueGet()===getBufferTemplate().join("")&&$input.trigger("cleared"),opts.showTooltip&&(input.title=opts.tooltip||getMaskSet().mask)}function blurEvent(e){var $input=$(this),input=this;

if(input.inputmask){var nptValue=input.inputmask._valueGet(),buffer=getBuffer().slice();undoValue!==buffer.join("")&&setTimeout(function(){$input.trigger("change"),undoValue=buffer.join("")},0),""!==nptValue&&(opts.clearMaskOnLostFocus&&(-1===getLastValidPosition()&&nptValue===getBufferTemplate().join("")?buffer=[]:clearOptionalTail(buffer)),isComplete(buffer)===!1&&(setTimeout(function(){$input.trigger("incomplete")},0),opts.clearIncomplete&&(resetMaskSet(),buffer=opts.clearMaskOnLostFocus?[]:getBufferTemplate().slice())),writeBuffer(input,buffer,void 0,e))}}function mouseenterEvent(e){var input=this;mouseEnter=!0,document.activeElement!==input&&opts.showMaskOnHover&&input.inputmask._valueGet()!==getBuffer().join("")&&writeBuffer(input,getBuffer())}function mask(elem){if(el=elem,$el=$(el),opts.showTooltip&&(el.title=opts.tooltip||getMaskSet().mask),("rtl"===el.dir||opts.rightAlign)&&(el.style.textAlign="right"),("rtl"===el.dir||opts.numericInput)&&(el.dir="ltr",el.removeAttribute("dir"),el.inputmask.isRTL=!0,isRTL=!0),$el.off(".inputmask"),patchValueProperty(el),("INPUT"===el.tagName&&isInputTypeSupported(el.getAttribute("type"))||el.isContentEditable)&&($(el.form).on("submit",function(){undoValue!==getBuffer().join("")&&$el.trigger("change"),opts.clearMaskOnLostFocus&&-1===getLastValidPosition()&&el.inputmask._valueGet&&el.inputmask._valueGet()===getBufferTemplate().join("")&&el.inputmask._valueSet(""),opts.removeMaskOnSubmit&&(el.inputmask._valueSet(el.inputmask.unmaskedvalue(),!0),setTimeout(function(){writeBuffer(el,getBuffer())},0))}).on("reset",function(){setTimeout(function(){$el.trigger("setvalue.inputmask")},0)}),$el.on("mouseenter.inputmask",wrapEventRuler(mouseenterEvent)).on("blur.inputmask",wrapEventRuler(blurEvent)).on("focus.inputmask",wrapEventRuler(focusEvent)).on("mouseleave.inputmask",wrapEventRuler(mouseleaveEvent)).on("click.inputmask",wrapEventRuler(clickEvent)).on("dblclick.inputmask",wrapEventRuler(dblclickEvent)).on(PasteEventType+".inputmask dragdrop.inputmask drop.inputmask",wrapEventRuler(pasteEvent)).on("cut.inputmask",wrapEventRuler(cutEvent)).on("complete.inputmask",wrapEventRuler(opts.oncomplete)).on("incomplete.inputmask",wrapEventRuler(opts.onincomplete)).on("cleared.inputmask",wrapEventRuler(opts.oncleared)).on("keydown.inputmask",wrapEventRuler(keydownEvent)).on("keypress.inputmask",wrapEventRuler(keypressEvent)),androidfirefox||$el.on("compositionstart.inputmask",wrapEventRuler(compositionStartEvent)).on("compositionupdate.inputmask",wrapEventRuler(compositionUpdateEvent)).on("compositionend.inputmask",wrapEventRuler(compositionEndEvent)),"paste"===PasteEventType&&$el.on("input.inputmask",wrapEventRuler(inputFallBackEvent)),(android||androidfirefox||androidchrome||kindle)&&($el.off("input.inputmask"),$el.on("input.inputmask",wrapEventRuler(mobileInputEvent)))),$el.on("setvalue.inputmask",wrapEventRuler(setValueEvent)),""!==el.inputmask._valueGet()||opts.clearMaskOnLostFocus===!1){var initialValue=$.isFunction(opts.onBeforeMask)?opts.onBeforeMask.call(el,el.inputmask._valueGet(),opts)||el.inputmask._valueGet():el.inputmask._valueGet();checkVal(el,!0,!1,initialValue.split(""));var buffer=getBuffer().slice();undoValue=buffer.join(""),isComplete(buffer)===!1&&opts.clearIncomplete&&resetMaskSet(),opts.clearMaskOnLostFocus&&(buffer.join("")===getBufferTemplate().join("")?buffer=[]:clearOptionalTail(buffer)),writeBuffer(el,buffer),document.activeElement===el&&caret(el,seekNext(getLastValidPosition()))}}var undoValue,compositionData,el,$el,maxLength,valueBuffer,isRTL=!1,skipKeyPressEvent=!1,skipInputEvent=!1,ignorable=!1,mouseEnter=!0;if(void 0!==actionObj)switch(actionObj.action){case"isComplete":return el=actionObj.el,isComplete(getBuffer());case"unmaskedvalue":return el=actionObj.el,void 0!==el&&void 0!==el.inputmask?(maskset=el.inputmask.maskset,opts=el.inputmask.opts,isRTL=el.inputmask.isRTL,valueBuffer=isRTL?el.inputmask._valueGet().split("").reverse().join(""):el.inputmask._valueGet()):valueBuffer=actionObj.value,opts.numericInput&&(isRTL=!0),valueBuffer=($.isFunction(opts.onBeforeMask)?opts.onBeforeMask(valueBuffer,opts)||valueBuffer:valueBuffer).split(""),checkVal(void 0,!1,!1,isRTL?valueBuffer.reverse():valueBuffer),$.isFunction(opts.onBeforeWrite)&&opts.onBeforeWrite(void 0,getBuffer(),0,opts),unmaskedvalue(el);case"mask":el=actionObj.el,maskset=el.inputmask.maskset,opts=el.inputmask.opts,isRTL=el.inputmask.isRTL,undoValue=getBuffer().join(""),mask(el);break;case"format":return opts.numericInput&&(isRTL=!0),valueBuffer=($.isFunction(opts.onBeforeMask)?opts.onBeforeMask(actionObj.value,opts)||actionObj.value:actionObj.value).split(""),checkVal(void 0,!1,!1,isRTL?valueBuffer.reverse():valueBuffer),$.isFunction(opts.onBeforeWrite)&&opts.onBeforeWrite(void 0,getBuffer(),0,opts),actionObj.metadata?{value:isRTL?getBuffer().slice().reverse().join(""):getBuffer().join(""),metadata:maskScope({action:"getmetadata"},maskset,opts)}:isRTL?getBuffer().slice().reverse().join(""):getBuffer().join("");case"isValid":opts.numericInput&&(isRTL=!0),valueBuffer=actionObj.value.split(""),checkVal(void 0,!1,!0,isRTL?valueBuffer.reverse():valueBuffer);for(var buffer=getBuffer(),rl=determineLastRequiredPosition(),lmib=buffer.length-1;lmib>rl&&!isMask(lmib);lmib--);return buffer.splice(rl,lmib+1-rl),isComplete(buffer)&&actionObj.value===buffer.join("");case"getemptymask":return getBufferTemplate();case"remove":el=actionObj.el,$el=$(el),maskset=el.inputmask.maskset,opts=el.inputmask.opts,el.inputmask._valueSet(unmaskedvalue(el)),$el.off(".inputmask");var valueProperty;Object.getOwnPropertyDescriptor&&(valueProperty=Object.getOwnPropertyDescriptor(el,"value")),valueProperty&&valueProperty.get?el.inputmask.__valueGet&&Object.defineProperty(el,"value",{get:el.inputmask.__valueGet,set:el.inputmask.__valueSet}):document.__lookupGetter__&&el.__lookupGetter__("value")&&el.inputmask.__valueGet&&(el.__defineGetter__("value",el.inputmask.__valueGet),el.__defineSetter__("value",el.inputmask.__valueSet)),el.inputmask=void 0;break;case"getmetadata":if($.isArray(maskset.metadata)){for(var alternation,lvp=getLastValidPosition(),firstAlt=lvp;firstAlt>=0;firstAlt--)if(getMaskSet().validPositions[firstAlt]&&void 0!==getMaskSet().validPositions[firstAlt].alternation){alternation=getMaskSet().validPositions[firstAlt].alternation;break}return void 0!==alternation?maskset.metadata[getMaskSet().validPositions[lvp].locator[alternation]]:maskset.metadata[0]}return maskset.metadata}}Inputmask.prototype={defaults:{placeholder:"_",optionalmarker:{start:"[",end:"]"},quantifiermarker:{start:"{",end:"}"},groupmarker:{start:"(",end:")"},alternatormarker:"|",escapeChar:"\\",mask:null,oncomplete:$.noop,onincomplete:$.noop,oncleared:$.noop,repeat:0,greedy:!0,autoUnmask:!1,removeMaskOnSubmit:!1,clearMaskOnLostFocus:!0,insertMode:!0,clearIncomplete:!1,aliases:{},alias:null,onKeyDown:$.noop,onBeforeMask:null,onBeforePaste:function(pastedValue,opts){return $.isFunction(opts.onBeforeMask)?opts.onBeforeMask(pastedValue,opts):pastedValue},onBeforeWrite:null,onUnMask:null,showMaskOnFocus:!0,showMaskOnHover:!0,onKeyValidation:$.noop,skipOptionalPartCharacter:" ",showTooltip:!1,tooltip:void 0,numericInput:!1,rightAlign:!1,undoOnEscape:!0,radixPoint:"",groupSeparator:"",radixFocus:!1,nojumps:!1,nojumpsThreshold:0,keepStatic:null,positionCaretOnTab:!1,tabThrough:!1,supportsInputType:[],definitions:{9:{validator:"[0-9]",cardinality:1,definitionSymbol:"*"},a:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,definitionSymbol:"*"},"*":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",cardinality:1}},ignorables:[8,9,13,19,27,33,34,35,36,37,38,39,40,45,46,93,112,113,114,115,116,117,118,119,120,121,122,123],isComplete:null,canClearPosition:$.noop,postValidation:null},masksCache:{},mask:function(elems){var that=this;return"string"==typeof elems&&(elems=document.querySelectorAll(elems)),elems=elems.nodeName?[elems]:elems,$.each(elems,function(ndx,el){var scopedOpts=$.extend(!0,{},that.opts);importAttributeOptions(el,scopedOpts,$.extend(!0,{},that.userOptions));var maskset=generateMaskSet(scopedOpts,that.noMasksCache);void 0!==maskset&&(void 0!==el.inputmask&&el.inputmask.remove(),el.inputmask=new Inputmask,el.inputmask.opts=scopedOpts,el.inputmask.noMasksCache=that.noMasksCache,el.inputmask.userOptions=$.extend(!0,{},that.userOptions),el.inputmask.el=el,el.inputmask.maskset=maskset,el.inputmask.isRTL=!1,$.data(el,"_inputmask_opts",scopedOpts),maskScope({action:"mask",el:el}))}),elems?elems[0].inputmask||this:this},option:function(options){return"string"==typeof options?this.opts[options]:"object"==typeof options?($.extend(this.opts,options),$.extend(this.userOptions,options),this.el&&(void 0!==options.mask||void 0!==options.alias?this.mask(this.el):($.data(this.el,"_inputmask_opts",this.opts),maskScope({action:"mask",el:this.el}))),this):void 0},unmaskedvalue:function(value){return maskScope({action:"unmaskedvalue",el:this.el,value:value},this.el&&this.el.inputmask?this.el.inputmask.maskset:generateMaskSet(this.opts,this.noMasksCache),this.opts)},remove:function(){return this.el?(maskScope({action:"remove",el:this.el}),this.el.inputmask=void 0,this.el):void 0},getemptymask:function(){return maskScope({action:"getemptymask"},this.maskset||generateMaskSet(this.opts,this.noMasksCache),this.opts)},hasMaskedValue:function(){return!this.opts.autoUnmask},isComplete:function(){return maskScope({action:"isComplete",el:this.el},this.maskset||generateMaskSet(this.opts,this.noMasksCache),this.opts)},getmetadata:function(){return maskScope({action:"getmetadata"},this.maskset||generateMaskSet(this.opts,this.noMasksCache),this.opts)},isValid:function(value){return maskScope({action:"isValid",value:value},this.maskset||generateMaskSet(this.opts,this.noMasksCache),this.opts)},format:function(value,metadata){return maskScope({action:"format",value:value,metadata:metadata},this.maskset||generateMaskSet(this.opts,this.noMasksCache),this.opts)}},Inputmask.extendDefaults=function(options){$.extend(!0,Inputmask.prototype.defaults,options)},Inputmask.extendDefinitions=function(definition){$.extend(!0,Inputmask.prototype.defaults.definitions,definition)},Inputmask.extendAliases=function(alias){$.extend(!0,Inputmask.prototype.defaults.aliases,alias)},Inputmask.format=function(value,options,metadata){return Inputmask(options).format(value,metadata)},Inputmask.unmask=function(value,options){return Inputmask(options).unmaskedvalue(value)},Inputmask.isValid=function(value,options){return Inputmask(options).isValid(value)},Inputmask.remove=function(elems){$.each(elems,function(ndx,el){el.inputmask&&el.inputmask.remove()})},Inputmask.escapeRegex=function(str){var specials=["/",".","*","+","?","|","(",")","[","]","{","}","\\","$","^"];return str.replace(new RegExp("(\\"+specials.join("|\\")+")","gim"),"\\$1")},Inputmask.keyCode={ALT:18,BACKSPACE:8,CAPS_LOCK:20,COMMA:188,COMMAND:91,COMMAND_LEFT:91,COMMAND_RIGHT:93,CONTROL:17,DELETE:46,DOWN:40,END:35,ENTER:13,ESCAPE:27,HOME:36,INSERT:45,LEFT:37,MENU:93,NUMPAD_ADD:107,NUMPAD_DECIMAL:110,NUMPAD_DIVIDE:111,NUMPAD_ENTER:108,NUMPAD_MULTIPLY:106,NUMPAD_SUBTRACT:109,PAGE_DOWN:34,PAGE_UP:33,PERIOD:190,RIGHT:39,SHIFT:16,SPACE:32,TAB:9,UP:38,WINDOWS:91};var ua=navigator.userAgent,iphone=null!==ua.match(new RegExp("iphone","i")),android=null!==ua.match(new RegExp("android.*safari.*","i")),androidchrome=null!==ua.match(new RegExp("android.*chrome.*","i")),androidfirefox=null!==ua.match(new RegExp("android.*firefox.*","i")),kindle=/Kindle/i.test(ua)||/Silk/i.test(ua)||/KFTT/i.test(ua)||/KFOT/i.test(ua)||/KFJWA/i.test(ua)||/KFJWI/i.test(ua)||/KFSOWI/i.test(ua)||/KFTHWA/i.test(ua)||/KFTHWI/i.test(ua)||/KFAPWA/i.test(ua)||/KFAPWI/i.test(ua),PasteEventType=isInputEventSupported("paste")?"paste":isInputEventSupported("input")?"input":"propertychange";return window.Inputmask=Inputmask,Inputmask}(jQuery),function($,Inputmask){return void 0===$.fn.inputmask&&($.fn.inputmask=function(fn,options){var nptmask,input;if(options=options||{},"string"==typeof fn)switch(fn){case"mask":return nptmask=new Inputmask(options),this.each(function(){nptmask.mask(this)});case"unmaskedvalue":return input=this.jquery&&this.length>0?this[0]:this,input.inputmask?input.inputmask.unmaskedvalue():$(input).val();case"remove":return this.each(function(){this.inputmask&&this.inputmask.remove()});case"getemptymask":return input=this.jquery&&this.length>0?this[0]:this,input.inputmask?input.inputmask.getemptymask():"";case"hasMaskedValue":return input=this.jquery&&this.length>0?this[0]:this,input.inputmask?input.inputmask.hasMaskedValue():!1;case"isComplete":return input=this.jquery&&this.length>0?this[0]:this,input.inputmask?input.inputmask.isComplete():!0;case"getmetadata":return input=this.jquery&&this.length>0?this[0]:this,input.inputmask?input.inputmask.getmetadata():void 0;case"setvalue":input=this.jquery&&this.length>0?this[0]:this,$(input).val(options),void 0!==input.inputmask&&$(input).triggerHandler("setvalue.inputmask");break;case"option":if("string"!=typeof options)return this.each(function(){return void 0!==this.inputmask?this.inputmask.option(options):void 0});if(input=this.jquery&&this.length>0?this[0]:this,void 0!==input.inputmask)return input.inputmask.option(options);break;default:return options.alias=fn,nptmask=new Inputmask(options),this.each(function(){nptmask.mask(this)})}else{if("object"==typeof fn)return nptmask=new Inputmask(fn),this.each(void 0===fn.mask&&void 0===fn.alias?function(){return void 0!==this.inputmask?this.inputmask.option(fn):void nptmask.mask(this)}:function(){nptmask.mask(this)});if(void 0===fn)return this.each(function(){nptmask=new Inputmask(options),nptmask.mask(this)})}}),$.fn.inputmask}(jQuery,Inputmask),function($,Inputmask){return Inputmask.extendDefinitions({h:{validator:"[01][0-9]|2[0-3]",cardinality:2,prevalidator:[{validator:"[0-2]",cardinality:1}]},s:{validator:"[0-5][0-9]",cardinality:2,prevalidator:[{validator:"[0-5]",cardinality:1}]},d:{validator:"0[1-9]|[12][0-9]|3[01]",cardinality:2,prevalidator:[{validator:"[0-3]",cardinality:1}]},m:{validator:"0[1-9]|1[012]",cardinality:2,prevalidator:[{validator:"[01]",cardinality:1}]},y:{validator:"(19|20)\\d{2}",cardinality:4,prevalidator:[{validator:"[12]",cardinality:1},{validator:"(19|20)",cardinality:2},{validator:"(19|20)\\d",cardinality:3}]}}),Inputmask.extendAliases({"dd/mm/yyyy":{mask:"1/2/y",placeholder:"dd/mm/yyyy",regex:{val1pre:new RegExp("[0-3]"),val1:new RegExp("0[1-9]|[12][0-9]|3[01]"),val2pre:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|[12][0-9]|3[01])"+escapedSeparator+"[01])")},val2:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|[12][0-9])"+escapedSeparator+"(0[1-9]|1[012]))|(30"+escapedSeparator+"(0[13-9]|1[012]))|(31"+escapedSeparator+"(0[13578]|1[02]))")}},leapday:"29/02/",separator:"/",yearrange:{minyear:1900,maxyear:2099},isInYearRange:function(chrs,minyear,maxyear){if(isNaN(chrs))return!1;var enteredyear=parseInt(chrs.concat(minyear.toString().slice(chrs.length))),enteredyear2=parseInt(chrs.concat(maxyear.toString().slice(chrs.length)));return(isNaN(enteredyear)?!1:enteredyear>=minyear&&maxyear>=enteredyear)||(isNaN(enteredyear2)?!1:enteredyear2>=minyear&&maxyear>=enteredyear2)},determinebaseyear:function(minyear,maxyear,hint){var currentyear=(new Date).getFullYear();if(minyear>currentyear)return minyear;if(currentyear>maxyear){for(var maxYearPrefix=maxyear.toString().slice(0,2),maxYearPostfix=maxyear.toString().slice(2,4);maxYearPrefix+hint>maxyear;)maxYearPrefix--;var maxxYear=maxYearPrefix+maxYearPostfix;return minyear>maxxYear?minyear:maxxYear}return currentyear},onKeyDown:function(e,buffer,caretPos,opts){var $input=$(this);if(e.ctrlKey&&e.keyCode===Inputmask.keyCode.RIGHT){var today=new Date;$input.val(today.getDate().toString()+(today.getMonth()+1).toString()+today.getFullYear().toString()),$input.trigger("setvalue.inputmask")}},getFrontValue:function(mask,buffer,opts){for(var start=0,length=0,i=0;i<mask.length&&"2"!==mask.charAt(i);i++){var definition=opts.definitions[mask.charAt(i)];definition?(start+=length,length=definition.cardinality):length++}return buffer.join("").substr(start,length)},definitions:{1:{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.regex.val1.test(chrs);return strict||isValid||chrs.charAt(1)!==opts.separator&&-1==="-./".indexOf(chrs.charAt(1))||!(isValid=opts.regex.val1.test("0"+chrs.charAt(0)))?isValid:(maskset.buffer[pos-1]="0",{refreshFromBuffer:{start:pos-1,end:pos},pos:pos,c:chrs.charAt(0)})},cardinality:2,prevalidator:[{validator:function(chrs,maskset,pos,strict,opts){var pchrs=chrs;isNaN(maskset.buffer[pos+1])||(pchrs+=maskset.buffer[pos+1]);var isValid=1===pchrs.length?opts.regex.val1pre.test(pchrs):opts.regex.val1.test(pchrs);if(!strict&&!isValid){if(isValid=opts.regex.val1.test(chrs+"0"))return maskset.buffer[pos]=chrs,maskset.buffer[++pos]="0",{pos:pos,c:"0"};if(isValid=opts.regex.val1.test("0"+chrs))return maskset.buffer[pos]="0",pos++,{pos:pos}}return isValid},cardinality:1}]},2:{validator:function(chrs,maskset,pos,strict,opts){var frontValue=opts.getFrontValue(maskset.mask,maskset.buffer,opts);-1!==frontValue.indexOf(opts.placeholder[0])&&(frontValue="01"+opts.separator);var isValid=opts.regex.val2(opts.separator).test(frontValue+chrs);if(!strict&&!isValid&&(chrs.charAt(1)===opts.separator||-1!=="-./".indexOf(chrs.charAt(1)))&&(isValid=opts.regex.val2(opts.separator).test(frontValue+"0"+chrs.charAt(0))))return maskset.buffer[pos-1]="0",{refreshFromBuffer:{start:pos-1,end:pos},pos:pos,c:chrs.charAt(0)};if(opts.mask.indexOf("2")===opts.mask.length-1&&isValid){var dayMonthValue=maskset.buffer.join("").substr(4,4)+chrs;if(dayMonthValue!==opts.leapday)return!0;var year=parseInt(maskset.buffer.join("").substr(0,4),10);return year%4===0?year%100===0?year%400===0?!0:!1:!0:!1}return isValid},cardinality:2,prevalidator:[{validator:function(chrs,maskset,pos,strict,opts){isNaN(maskset.buffer[pos+1])||(chrs+=maskset.buffer[pos+1]);var frontValue=opts.getFrontValue(maskset.mask,maskset.buffer,opts);-1!==frontValue.indexOf(opts.placeholder[0])&&(frontValue="01"+opts.separator);var isValid=1===chrs.length?opts.regex.val2pre(opts.separator).test(frontValue+chrs):opts.regex.val2(opts.separator).test(frontValue+chrs);return strict||isValid||!(isValid=opts.regex.val2(opts.separator).test(frontValue+"0"+chrs))?isValid:(maskset.buffer[pos]="0",pos++,{pos:pos})},cardinality:1}]},y:{validator:function(chrs,maskset,pos,strict,opts){if(opts.isInYearRange(chrs,opts.yearrange.minyear,opts.yearrange.maxyear)){var dayMonthValue=maskset.buffer.join("").substr(0,6);if(dayMonthValue!==opts.leapday)return!0;var year=parseInt(chrs,10);return year%4===0?year%100===0?year%400===0?!0:!1:!0:!1}return!1},cardinality:4,prevalidator:[{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.isInYearRange(chrs,opts.yearrange.minyear,opts.yearrange.maxyear);if(!strict&&!isValid){var yearPrefix=opts.determinebaseyear(opts.yearrange.minyear,opts.yearrange.maxyear,chrs+"0").toString().slice(0,1);if(isValid=opts.isInYearRange(yearPrefix+chrs,opts.yearrange.minyear,opts.yearrange.maxyear))return maskset.buffer[pos++]=yearPrefix.charAt(0),{pos:pos};if(yearPrefix=opts.determinebaseyear(opts.yearrange.minyear,opts.yearrange.maxyear,chrs+"0").toString().slice(0,2),isValid=opts.isInYearRange(yearPrefix+chrs,opts.yearrange.minyear,opts.yearrange.maxyear))return maskset.buffer[pos++]=yearPrefix.charAt(0),maskset.buffer[pos++]=yearPrefix.charAt(1),{pos:pos}}return isValid},cardinality:1},{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.isInYearRange(chrs,opts.yearrange.minyear,opts.yearrange.maxyear);if(!strict&&!isValid){var yearPrefix=opts.determinebaseyear(opts.yearrange.minyear,opts.yearrange.maxyear,chrs).toString().slice(0,2);if(isValid=opts.isInYearRange(chrs[0]+yearPrefix[1]+chrs[1],opts.yearrange.minyear,opts.yearrange.maxyear))return maskset.buffer[pos++]=yearPrefix.charAt(1),{pos:pos};if(yearPrefix=opts.determinebaseyear(opts.yearrange.minyear,opts.yearrange.maxyear,chrs).toString().slice(0,2),opts.isInYearRange(yearPrefix+chrs,opts.yearrange.minyear,opts.yearrange.maxyear)){var dayMonthValue=maskset.buffer.join("").substr(0,6);if(dayMonthValue!==opts.leapday)isValid=!0;else{var year=parseInt(chrs,10);isValid=year%4===0?year%100===0?year%400===0?!0:!1:!0:!1}}else isValid=!1;if(isValid)return maskset.buffer[pos-1]=yearPrefix.charAt(0),maskset.buffer[pos++]=yearPrefix.charAt(1),maskset.buffer[pos++]=chrs.charAt(0),{refreshFromBuffer:{start:pos-3,end:pos},pos:pos}}return isValid},cardinality:2},{validator:function(chrs,maskset,pos,strict,opts){return opts.isInYearRange(chrs,opts.yearrange.minyear,opts.yearrange.maxyear)},cardinality:3}]}},insertMode:!1,autoUnmask:!1},"mm/dd/yyyy":{placeholder:"mm/dd/yyyy",alias:"dd/mm/yyyy",regex:{val2pre:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[13-9]|1[012])"+escapedSeparator+"[0-3])|(02"+escapedSeparator+"[0-2])")},val2:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|1[012])"+escapedSeparator+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+escapedSeparator+"30)|((0[13578]|1[02])"+escapedSeparator+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(e,buffer,caretPos,opts){var $input=$(this);if(e.ctrlKey&&e.keyCode===Inputmask.keyCode.RIGHT){var today=new Date;$input.val((today.getMonth()+1).toString()+today.getDate().toString()+today.getFullYear().toString()),$input.trigger("setvalue.inputmask")}}},"yyyy/mm/dd":{mask:"y/1/2",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",leapday:"/02/29",onKeyDown:function(e,buffer,caretPos,opts){var $input=$(this);if(e.ctrlKey&&e.keyCode===Inputmask.keyCode.RIGHT){var today=new Date;$input.val(today.getFullYear().toString()+(today.getMonth()+1).toString()+today.getDate().toString()),$input.trigger("setvalue.inputmask")}}},"dd.mm.yyyy":{mask:"1.2.y",placeholder:"dd.mm.yyyy",leapday:"29.02.",separator:".",alias:"dd/mm/yyyy"},"dd-mm-yyyy":{mask:"1-2-y",placeholder:"dd-mm-yyyy",leapday:"29-02-",separator:"-",alias:"dd/mm/yyyy"},"mm.dd.yyyy":{mask:"1.2.y",placeholder:"mm.dd.yyyy",leapday:"02.29.",separator:".",alias:"mm/dd/yyyy"},"mm-dd-yyyy":{mask:"1-2-y",placeholder:"mm-dd-yyyy",leapday:"02-29-",separator:"-",alias:"mm/dd/yyyy"},"yyyy.mm.dd":{mask:"y.1.2",placeholder:"yyyy.mm.dd",leapday:".02.29",separator:".",alias:"yyyy/mm/dd"},"yyyy-mm-dd":{mask:"y-1-2",placeholder:"yyyy-mm-dd",leapday:"-02-29",separator:"-",alias:"yyyy/mm/dd"},datetime:{mask:"1/2/y h:s",placeholder:"dd/mm/yyyy hh:mm",alias:"dd/mm/yyyy",regex:{hrspre:new RegExp("[012]"),hrs24:new RegExp("2[0-4]|1[3-9]"),hrs:new RegExp("[01][0-9]|2[0-4]"),ampm:new RegExp("^[a|p|A|P][m|M]"),mspre:new RegExp("[0-5]"),ms:new RegExp("[0-5][0-9]")},timeseparator:":",hourFormat:"24",definitions:{h:{validator:function(chrs,maskset,pos,strict,opts){if("24"===opts.hourFormat&&24===parseInt(chrs,10))return maskset.buffer[pos-1]="0",maskset.buffer[pos]="0",{refreshFromBuffer:{start:pos-1,end:pos},c:"0"};var isValid=opts.regex.hrs.test(chrs);if(!strict&&!isValid&&(chrs.charAt(1)===opts.timeseparator||-1!=="-.:".indexOf(chrs.charAt(1)))&&(isValid=opts.regex.hrs.test("0"+chrs.charAt(0))))return maskset.buffer[pos-1]="0",maskset.buffer[pos]=chrs.charAt(0),pos++,{refreshFromBuffer:{start:pos-2,end:pos},pos:pos,c:opts.timeseparator};if(isValid&&"24"!==opts.hourFormat&&opts.regex.hrs24.test(chrs)){var tmp=parseInt(chrs,10);return 24===tmp?(maskset.buffer[pos+5]="a",maskset.buffer[pos+6]="m"):(maskset.buffer[pos+5]="p",maskset.buffer[pos+6]="m"),tmp-=12,10>tmp?(maskset.buffer[pos]=tmp.toString(),maskset.buffer[pos-1]="0"):(maskset.buffer[pos]=tmp.toString().charAt(1),maskset.buffer[pos-1]=tmp.toString().charAt(0)),{refreshFromBuffer:{start:pos-1,end:pos+6},c:maskset.buffer[pos]}}return isValid},cardinality:2,prevalidator:[{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.regex.hrspre.test(chrs);return strict||isValid||!(isValid=opts.regex.hrs.test("0"+chrs))?isValid:(maskset.buffer[pos]="0",pos++,{pos:pos})},cardinality:1}]},s:{validator:"[0-5][0-9]",cardinality:2,prevalidator:[{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.regex.mspre.test(chrs);return strict||isValid||!(isValid=opts.regex.ms.test("0"+chrs))?isValid:(maskset.buffer[pos]="0",pos++,{pos:pos})},cardinality:1}]},t:{validator:function(chrs,maskset,pos,strict,opts){return opts.regex.ampm.test(chrs+"m")},casing:"lower",cardinality:1}},insertMode:!1,autoUnmask:!1},datetime12:{mask:"1/2/y h:s t\\m",placeholder:"dd/mm/yyyy hh:mm xm",alias:"datetime",hourFormat:"12"},"mm/dd/yyyy hh:mm xm":{mask:"1/2/y h:s t\\m",placeholder:"mm/dd/yyyy hh:mm xm",alias:"datetime12",regex:{val2pre:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[13-9]|1[012])"+escapedSeparator+"[0-3])|(02"+escapedSeparator+"[0-2])")},val2:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|1[012])"+escapedSeparator+"(0[1-9]|[12][0-9]))|((0[13-9]|1[012])"+escapedSeparator+"30)|((0[13578]|1[02])"+escapedSeparator+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},leapday:"02/29/",onKeyDown:function(e,buffer,caretPos,opts){var $input=$(this);if(e.ctrlKey&&e.keyCode===Inputmask.keyCode.RIGHT){var today=new Date;$input.val((today.getMonth()+1).toString()+today.getDate().toString()+today.getFullYear().toString()),$input.trigger("setvalue.inputmask")}}},"hh:mm t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"h:s t":{mask:"h:s t\\m",placeholder:"hh:mm xm",alias:"datetime",hourFormat:"12"},"hh:mm:ss":{mask:"h:s:s",placeholder:"hh:mm:ss",alias:"datetime",autoUnmask:!1},"hh:mm":{mask:"h:s",placeholder:"hh:mm",alias:"datetime",autoUnmask:!1},date:{alias:"dd/mm/yyyy"},"mm/yyyy":{mask:"1/y",placeholder:"mm/yyyy",leapday:"donotuse",separator:"/",alias:"mm/dd/yyyy"},shamsi:{regex:{val2pre:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|1[012])"+escapedSeparator+"[0-3])")},val2:function(separator){var escapedSeparator=Inputmask.escapeRegex.call(this,separator);return new RegExp("((0[1-9]|1[012])"+escapedSeparator+"(0[1-9]|[12][0-9]))|((0[1-9]|1[012])"+escapedSeparator+"30)|((0[1-6])"+escapedSeparator+"31)")},val1pre:new RegExp("[01]"),val1:new RegExp("0[1-9]|1[012]")},yearrange:{minyear:1300,maxyear:1499},mask:"y/1/2",leapday:"/12/30",placeholder:"yyyy/mm/dd",alias:"mm/dd/yyyy",clearIncomplete:!0}}),Inputmask}(jQuery,Inputmask),function($,Inputmask){return Inputmask.extendDefinitions({A:{validator:"[A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,casing:"upper"},"&":{validator:"[0-9A-Za-zА-яЁёÀ-ÿµ]",cardinality:1,casing:"upper"},"#":{validator:"[0-9A-Fa-f]",cardinality:1,casing:"upper"}}),Inputmask.extendAliases({url:{mask:"ir",placeholder:"",separator:"",defaultPrefix:"http://",regex:{urlpre1:new RegExp("[fh]"),urlpre2:new RegExp("(ft|ht)"),urlpre3:new RegExp("(ftp|htt)"),urlpre4:new RegExp("(ftp:|http|ftps)"),urlpre5:new RegExp("(ftp:/|ftps:|http:|https)"),urlpre6:new RegExp("(ftp://|ftps:/|http:/|https:)"),urlpre7:new RegExp("(ftp://|ftps://|http://|https:/)"),urlpre8:new RegExp("(ftp://|ftps://|http://|https://)")},definitions:{i:{validator:function(chrs,maskset,pos,strict,opts){return!0},cardinality:8,prevalidator:function(){for(var result=[],prefixLimit=8,i=0;prefixLimit>i;i++)result[i]=function(){var j=i;return{validator:function(chrs,maskset,pos,strict,opts){if(opts.regex["urlpre"+(j+1)]){var k,tmp=chrs;j+1-chrs.length>0&&(tmp=maskset.buffer.join("").substring(0,j+1-chrs.length)+""+tmp);var isValid=opts.regex["urlpre"+(j+1)].test(tmp);if(!strict&&!isValid){for(pos-=j,k=0;k<opts.defaultPrefix.length;k++)maskset.buffer[pos]=opts.defaultPrefix[k],pos++;for(k=0;k<tmp.length-1;k++)maskset.buffer[pos]=tmp[k],pos++;return{pos:pos}}return isValid}return!1},cardinality:j}}();return result}()},r:{validator:".",cardinality:50}},insertMode:!1,autoUnmask:!1},ip:{mask:"i[i[i]].i[i[i]].i[i[i]].i[i[i]]",definitions:{i:{validator:function(chrs,maskset,pos,strict,opts){return pos-1>-1&&"."!==maskset.buffer[pos-1]?(chrs=maskset.buffer[pos-1]+chrs,chrs=pos-2>-1&&"."!==maskset.buffer[pos-2]?maskset.buffer[pos-2]+chrs:"0"+chrs):chrs="00"+chrs,new RegExp("25[0-5]|2[0-4][0-9]|[01][0-9][0-9]").test(chrs)},cardinality:1}},onUnMask:function(maskedValue,unmaskedValue,opts){return maskedValue}},email:{mask:"*{1,64}[.*{1,64}][.*{1,64}][.*{1,64}]@*{1,64}[.*{2,64}][.*{2,6}][.*{1,2}]",greedy:!1,onBeforePaste:function(pastedValue,opts){return pastedValue=pastedValue.toLowerCase(),pastedValue.replace("mailto:","")},definitions:{"*":{validator:"[0-9A-Za-z!#$%&'*+/=?^_`{|}~-]",cardinality:1,casing:"lower"}},onUnMask:function(maskedValue,unmaskedValue,opts){return maskedValue}},mac:{mask:"##:##:##:##:##:##"}}),Inputmask}(jQuery,Inputmask),function($,Inputmask){return Inputmask.extendAliases({numeric:{mask:function(opts){function autoEscape(txt){for(var escapedTxt="",i=0;i<txt.length;i++)escapedTxt+=opts.definitions[txt.charAt(i)]?"\\"+txt.charAt(i):txt.charAt(i);return escapedTxt}if(0!==opts.repeat&&isNaN(opts.integerDigits)&&(opts.integerDigits=opts.repeat),opts.repeat=0,opts.groupSeparator===opts.radixPoint&&(opts.groupSeparator="."===opts.radixPoint?",":","===opts.radixPoint?".":"")," "===opts.groupSeparator&&(opts.skipOptionalPartCharacter=void 0),opts.autoGroup=opts.autoGroup&&""!==opts.groupSeparator,opts.autoGroup&&("string"==typeof opts.groupSize&&isFinite(opts.groupSize)&&(opts.groupSize=parseInt(opts.groupSize)),isFinite(opts.integerDigits))){var seps=Math.floor(opts.integerDigits/opts.groupSize),mod=opts.integerDigits%opts.groupSize;opts.integerDigits=parseInt(opts.integerDigits)+(0===mod?seps-1:seps),opts.integerDigits<1&&(opts.integerDigits="*")}opts.placeholder.length>1&&(opts.placeholder=opts.placeholder.charAt(0)),opts.radixFocus=opts.radixFocus&&""!==opts.placeholder&&opts.integerOptional===!0,opts.definitions[";"]=opts.definitions["~"],opts.definitions[";"].definitionSymbol="~",opts.numericInput===!0&&(opts.radixFocus=!1,opts.digitsOptional=!1,isNaN(opts.digits)&&(opts.digits=2),opts.decimalProtect=!1);var mask=autoEscape(opts.prefix);return mask+="[+]",mask+=opts.integerOptional===!0?"~{1,"+opts.integerDigits+"}":"~{"+opts.integerDigits+"}",void 0!==opts.digits&&(isNaN(opts.digits)||parseInt(opts.digits)>0)&&(mask+=opts.digitsOptional?"["+(opts.decimalProtect?":":opts.radixPoint)+";{1,"+opts.digits+"}]":(opts.decimalProtect?":":opts.radixPoint)+";{"+opts.digits+"}"),""!==opts.negationSymbol.back&&(mask+="[-]"),mask+=autoEscape(opts.suffix),opts.greedy=!1,mask},placeholder:"",greedy:!1,digits:"*",digitsOptional:!0,radixPoint:".",radixFocus:!0,groupSize:3,groupSeparator:"",autoGroup:!1,allowPlus:!0,allowMinus:!0,negationSymbol:{front:"-",back:""},integerDigits:"+",integerOptional:!0,prefix:"",suffix:"",rightAlign:!0,decimalProtect:!0,min:null,max:null,step:1,insertMode:!0,autoUnmask:!1,unmaskAsNumber:!1,postFormat:function(buffer,pos,reformatOnly,opts){opts.numericInput===!0&&(buffer=buffer.reverse(),isFinite(pos)&&(pos=buffer.join("").length-pos-1));var i,l,suffixStripped=!1;buffer.length>=opts.suffix.length&&buffer.join("").indexOf(opts.suffix)===buffer.length-opts.suffix.length&&(buffer.length=buffer.length-opts.suffix.length,suffixStripped=!0),pos=pos>=buffer.length?buffer.length-1:pos<opts.prefix.length?opts.prefix.length:pos;var needsRefresh=!1,charAtPos=buffer[pos];if(""===opts.groupSeparator||opts.numericInput!==!0&&-1!==$.inArray(opts.radixPoint,buffer)&&pos>$.inArray(opts.radixPoint,buffer)||new RegExp("["+Inputmask.escapeRegex(opts.negationSymbol.front)+"+]").test(charAtPos)){if(suffixStripped)for(i=0,l=opts.suffix.length;l>i;i++)buffer.push(opts.suffix.charAt(i));return{
pos:pos}}var cbuf=buffer.slice();charAtPos===opts.groupSeparator&&(cbuf.splice(pos--,1),charAtPos=cbuf[pos]),reformatOnly?charAtPos!==opts.radixPoint&&(cbuf[pos]="?"):cbuf.splice(pos,0,"?");var bufVal=cbuf.join(""),bufValOrigin=bufVal;if(bufVal.length>0&&opts.autoGroup||reformatOnly&&-1!==bufVal.indexOf(opts.groupSeparator)){var escapedGroupSeparator=Inputmask.escapeRegex(opts.groupSeparator);needsRefresh=0===bufVal.indexOf(opts.groupSeparator),bufVal=bufVal.replace(new RegExp(escapedGroupSeparator,"g"),"");var radixSplit=bufVal.split(opts.radixPoint);if(bufVal=""===opts.radixPoint?bufVal:radixSplit[0],bufVal!==opts.prefix+"?0"&&bufVal.length>=opts.groupSize+opts.prefix.length)for(var reg=new RegExp("([-+]?[\\d?]+)([\\d?]{"+opts.groupSize+"})");reg.test(bufVal);)bufVal=bufVal.replace(reg,"$1"+opts.groupSeparator+"$2"),bufVal=bufVal.replace(opts.groupSeparator+opts.groupSeparator,opts.groupSeparator);""!==opts.radixPoint&&radixSplit.length>1&&(bufVal+=opts.radixPoint+radixSplit[1])}for(needsRefresh=bufValOrigin!==bufVal,buffer.length=bufVal.length,i=0,l=bufVal.length;l>i;i++)buffer[i]=bufVal.charAt(i);var newPos=$.inArray("?",buffer);if(-1===newPos&&charAtPos===opts.radixPoint&&(newPos=$.inArray(opts.radixPoint,buffer)),reformatOnly?buffer[newPos]=charAtPos:buffer.splice(newPos,1),!needsRefresh&&suffixStripped)for(i=0,l=opts.suffix.length;l>i;i++)buffer.push(opts.suffix.charAt(i));return newPos=opts.numericInput&&isFinite(pos)?buffer.join("").length-newPos-1:newPos,opts.numericInput&&(buffer=buffer.reverse(),$.inArray(opts.radixPoint,buffer)<newPos&&buffer.join("").length-opts.suffix.length!==newPos&&(newPos-=1)),{pos:newPos,refreshFromBuffer:needsRefresh,buffer:buffer}},onBeforeWrite:function(e,buffer,caretPos,opts){if(e&&("blur"===e.type||"checkval"===e.type)){var maskedValue=buffer.join(""),processValue=maskedValue.replace(opts.prefix,"");if(processValue=processValue.replace(opts.suffix,""),processValue=processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),""),","===opts.radixPoint&&(processValue=processValue.replace(Inputmask.escapeRegex(opts.radixPoint),".")),isFinite(processValue)&&isFinite(opts.min)&&parseFloat(processValue)<parseFloat(opts.min))return $.extend(!0,{refreshFromBuffer:!0,buffer:(opts.prefix+opts.min).split("")},opts.postFormat((opts.prefix+opts.min).split(""),0,!0,opts));if(opts.numericInput!==!0){var tmpBufSplit=""!==opts.radixPoint?buffer.join("").split(opts.radixPoint):[buffer.join("")],matchRslt=tmpBufSplit[0].match(opts.regex.integerPart(opts)),matchRsltDigits=2===tmpBufSplit.length?tmpBufSplit[1].match(opts.regex.integerNPart(opts)):void 0;if(matchRslt){matchRslt[0]!==opts.negationSymbol.front+"0"&&matchRslt[0]!==opts.negationSymbol.front&&"+"!==matchRslt[0]||void 0!==matchRsltDigits&&!matchRsltDigits[0].match(/^0+$/)||buffer.splice(matchRslt.index,1);var radixPosition=$.inArray(opts.radixPoint,buffer);if(-1!==radixPosition){if(isFinite(opts.digits)&&!opts.digitsOptional){for(var i=1;i<=opts.digits;i++)(void 0===buffer[radixPosition+i]||buffer[radixPosition+i]===opts.placeholder.charAt(0))&&(buffer[radixPosition+i]="0");return{refreshFromBuffer:maskedValue!==buffer.join(""),buffer:buffer}}if(radixPosition===buffer.length-opts.suffix.length-1)return buffer.splice(radixPosition,1),{refreshFromBuffer:!0,buffer:buffer}}}}}if(opts.autoGroup){var rslt=opts.postFormat(buffer,opts.numericInput?caretPos:caretPos-1,!0,opts);return rslt.caret=caretPos<=opts.prefix.length?rslt.pos:rslt.pos+1,rslt}},regex:{integerPart:function(opts){return new RegExp("["+Inputmask.escapeRegex(opts.negationSymbol.front)+"+]?\\d+")},integerNPart:function(opts){return new RegExp("[\\d"+Inputmask.escapeRegex(opts.groupSeparator)+"]+")}},signHandler:function(chrs,maskset,pos,strict,opts){if(!strict&&opts.allowMinus&&"-"===chrs||opts.allowPlus&&"+"===chrs){var matchRslt=maskset.buffer.join("").match(opts.regex.integerPart(opts));if(matchRslt&&matchRslt[0].length>0)return maskset.buffer[matchRslt.index]===("-"===chrs?"+":opts.negationSymbol.front)?"-"===chrs?""!==opts.negationSymbol.back?{pos:matchRslt.index,c:opts.negationSymbol.front,remove:matchRslt.index,caret:pos,insert:{pos:maskset.buffer.length-opts.suffix.length-1,c:opts.negationSymbol.back}}:{pos:matchRslt.index,c:opts.negationSymbol.front,remove:matchRslt.index,caret:pos}:""!==opts.negationSymbol.back?{pos:matchRslt.index,c:"+",remove:[matchRslt.index,maskset.buffer.length-opts.suffix.length-1],caret:pos}:{pos:matchRslt.index,c:"+",remove:matchRslt.index,caret:pos}:maskset.buffer[matchRslt.index]===("-"===chrs?opts.negationSymbol.front:"+")?"-"===chrs&&""!==opts.negationSymbol.back?{remove:[matchRslt.index,maskset.buffer.length-opts.suffix.length-1],caret:pos-1}:{remove:matchRslt.index,caret:pos-1}:"-"===chrs?""!==opts.negationSymbol.back?{pos:matchRslt.index,c:opts.negationSymbol.front,caret:pos+1,insert:{pos:maskset.buffer.length-opts.suffix.length,c:opts.negationSymbol.back}}:{pos:matchRslt.index,c:opts.negationSymbol.front,caret:pos+1}:{pos:matchRslt.index,c:chrs,caret:pos+1}}return!1},radixHandler:function(chrs,maskset,pos,strict,opts){if(!strict&&(-1!==$.inArray(chrs,[",","."])&&(chrs=opts.radixPoint),chrs===opts.radixPoint&&void 0!==opts.digits&&(isNaN(opts.digits)||parseInt(opts.digits)>0))){var radixPos=$.inArray(opts.radixPoint,maskset.buffer),integerValue=maskset.buffer.join("").match(opts.regex.integerPart(opts));if(-1!==radixPos&&maskset.validPositions[radixPos])return maskset.validPositions[radixPos-1]?{caret:radixPos+1}:{pos:integerValue.index,c:integerValue[0],caret:radixPos+1};if(!integerValue||"0"===integerValue[0]&&integerValue.index+1!==pos)return maskset.buffer[integerValue?integerValue.index:pos]="0",{pos:(integerValue?integerValue.index:pos)+1,c:opts.radixPoint}}return!1},leadingZeroHandler:function(chrs,maskset,pos,strict,opts){if(opts.numericInput===!0){if("0"===maskset.buffer[maskset.buffer.length-opts.prefix.length-1])return{pos:pos,remove:maskset.buffer.length-opts.prefix.length-1}}else{var matchRslt=maskset.buffer.join("").match(opts.regex.integerNPart(opts)),radixPosition=$.inArray(opts.radixPoint,maskset.buffer);if(matchRslt&&!strict&&(-1===radixPosition||radixPosition>=pos))if(0===matchRslt[0].indexOf("0")){pos<opts.prefix.length&&(pos=matchRslt.index);var _radixPosition=$.inArray(opts.radixPoint,maskset._buffer),digitsMatch=maskset._buffer&&maskset.buffer.slice(radixPosition).join("")===maskset._buffer.slice(_radixPosition).join("")||0===parseInt(maskset.buffer.slice(radixPosition+1).join("")),integerMatch=maskset._buffer&&maskset.buffer.slice(matchRslt.index,radixPosition).join("")===maskset._buffer.slice(opts.prefix.length,_radixPosition).join("")||"0"===maskset.buffer.slice(matchRslt.index,radixPosition).join("");if(-1===radixPosition||digitsMatch&&integerMatch)return maskset.buffer.splice(matchRslt.index,1),pos=pos>matchRslt.index?pos-1:matchRslt.index,{pos:pos,remove:matchRslt.index};if(matchRslt.index+1===pos||"0"===chrs)return maskset.buffer.splice(matchRslt.index,1),pos=matchRslt.index,{pos:pos,remove:matchRslt.index}}else if("0"===chrs&&pos<=matchRslt.index&&matchRslt[0]!==opts.groupSeparator)return!1}return!0},postValidation:function(buffer,opts){var isValid=!0,maskedValue=buffer.join(""),processValue=maskedValue.replace(opts.prefix,"");return processValue=processValue.replace(opts.suffix,""),processValue=processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),""),","===opts.radixPoint&&(processValue=processValue.replace(Inputmask.escapeRegex(opts.radixPoint),".")),processValue=processValue.replace(new RegExp("^"+Inputmask.escapeRegex(opts.negationSymbol.front)),"-"),processValue=processValue.replace(new RegExp(Inputmask.escapeRegex(opts.negationSymbol.back)+"$"),""),processValue=processValue===opts.negationSymbol.front?processValue+"0":processValue,isFinite(processValue)&&(null!==opts.max&&isFinite(opts.max)&&(isValid=parseFloat(processValue)<=parseFloat(opts.max)),isValid&&null!==opts.min&&isFinite(opts.min)&&(0>=processValue||processValue.toString().length>=opts.min.toString().length)&&(isValid=parseFloat(processValue)>=parseFloat(opts.min),isValid||(isValid=$.extend(!0,{refreshFromBuffer:!0,buffer:(opts.prefix+opts.min).split("")},opts.postFormat((opts.prefix+opts.min).split(""),0,!0,opts)),isValid.refreshFromBuffer=!0))),isValid},definitions:{"~":{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.signHandler(chrs,maskset,pos,strict,opts);if(!isValid&&(isValid=opts.radixHandler(chrs,maskset,pos,strict,opts),!isValid&&(isValid=strict?new RegExp("[0-9"+Inputmask.escapeRegex(opts.groupSeparator)+"]").test(chrs):new RegExp("[0-9]").test(chrs),isValid===!0&&(isValid=opts.leadingZeroHandler(chrs,maskset,pos,strict,opts),isValid===!0)))){var radixPosition=$.inArray(opts.radixPoint,maskset.buffer);isValid=-1!==radixPosition&&opts.digitsOptional===!1&&opts.numericInput!==!0&&pos>radixPosition&&!strict?{pos:pos,remove:pos}:{pos:pos}}return isValid},cardinality:1,prevalidator:null},"+":{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.signHandler(chrs,maskset,pos,strict,opts);return!isValid&&(strict&&opts.allowMinus&&chrs===opts.negationSymbol.front||opts.allowMinus&&"-"===chrs||opts.allowPlus&&"+"===chrs)&&(isValid="-"===chrs?""!==opts.negationSymbol.back?{pos:pos,c:"-"===chrs?opts.negationSymbol.front:"+",caret:pos+1,insert:{pos:maskset.buffer.length,c:opts.negationSymbol.back}}:{pos:pos,c:"-"===chrs?opts.negationSymbol.front:"+",caret:pos+1}:!0),isValid},cardinality:1,prevalidator:null,placeholder:""},"-":{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.signHandler(chrs,maskset,pos,strict,opts);return!isValid&&strict&&opts.allowMinus&&chrs===opts.negationSymbol.back&&(isValid=!0),isValid},cardinality:1,prevalidator:null,placeholder:""},":":{validator:function(chrs,maskset,pos,strict,opts){var isValid=opts.signHandler(chrs,maskset,pos,strict,opts);if(!isValid){var radix="["+Inputmask.escapeRegex(opts.radixPoint)+",\\.]";isValid=new RegExp(radix).test(chrs),isValid&&maskset.validPositions[pos]&&maskset.validPositions[pos].match.placeholder===opts.radixPoint&&(isValid={caret:pos+1})}return isValid?{c:opts.radixPoint}:isValid},cardinality:1,prevalidator:null,placeholder:function(opts){return opts.radixPoint}}},onUnMask:function(maskedValue,unmaskedValue,opts){var processValue=maskedValue.replace(opts.prefix,"");return processValue=processValue.replace(opts.suffix,""),processValue=processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),""),opts.unmaskAsNumber?(""!==opts.radixPoint&&-1!==processValue.indexOf(opts.radixPoint)&&(processValue=processValue.replace(Inputmask.escapeRegex.call(this,opts.radixPoint),".")),Number(processValue)):processValue},isComplete:function(buffer,opts){var maskedValue=buffer.join(""),bufClone=buffer.slice();if(opts.postFormat(bufClone,0,!0,opts),bufClone.join("")!==maskedValue)return!1;var processValue=maskedValue.replace(opts.prefix,"");return processValue=processValue.replace(opts.suffix,""),processValue=processValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),""),","===opts.radixPoint&&(processValue=processValue.replace(Inputmask.escapeRegex(opts.radixPoint),".")),isFinite(processValue)},onBeforeMask:function(initialValue,opts){if(""!==opts.radixPoint&&isFinite(initialValue))initialValue=initialValue.toString().replace(".",opts.radixPoint);else{var kommaMatches=initialValue.match(/,/g),dotMatches=initialValue.match(/\./g);dotMatches&&kommaMatches?dotMatches.length>kommaMatches.length?(initialValue=initialValue.replace(/\./g,""),initialValue=initialValue.replace(",",opts.radixPoint)):kommaMatches.length>dotMatches.length?(initialValue=initialValue.replace(/,/g,""),initialValue=initialValue.replace(".",opts.radixPoint)):initialValue=initialValue.indexOf(".")<initialValue.indexOf(",")?initialValue.replace(/\./g,""):initialValue=initialValue.replace(/,/g,""):initialValue=initialValue.replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),"")}if(0===opts.digits&&(-1!==initialValue.indexOf(".")?initialValue=initialValue.substring(0,initialValue.indexOf(".")):-1!==initialValue.indexOf(",")&&(initialValue=initialValue.substring(0,initialValue.indexOf(",")))),""!==opts.radixPoint&&isFinite(opts.digits)&&-1!==initialValue.indexOf(opts.radixPoint)){var valueParts=initialValue.split(opts.radixPoint),decPart=valueParts[1].match(new RegExp("\\d*"))[0];if(parseInt(opts.digits)<decPart.toString().length){var digitsFactor=Math.pow(10,parseInt(opts.digits));initialValue=initialValue.replace(Inputmask.escapeRegex(opts.radixPoint),"."),initialValue=Math.round(parseFloat(initialValue)*digitsFactor)/digitsFactor,initialValue=initialValue.toString().replace(".",opts.radixPoint)}}return initialValue.toString()},canClearPosition:function(maskset,position,lvp,strict,opts){var positionInput=maskset.validPositions[position].input,canClear=positionInput!==opts.radixPoint||null!==maskset.validPositions[position].match.fn&&opts.decimalProtect===!1||isFinite(positionInput)||position===lvp||positionInput===opts.groupSeparator||positionInput===opts.negationSymbol.front||positionInput===opts.negationSymbol.back;if(canClear&&isFinite(positionInput)){var matchRslt,radixPos=$.inArray(opts.radixPoint,maskset.buffer),radixInjection=!1;if(void 0===maskset.validPositions[radixPos]&&(maskset.validPositions[radixPos]={input:opts.radixPoint},radixInjection=!0),!strict&&maskset.buffer){matchRslt=maskset.buffer.join("").substr(0,position).match(opts.regex.integerNPart(opts));var pos=position+1,isNull=null==matchRslt||0===parseInt(matchRslt[0].replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),""));if(isNull)for(;maskset.validPositions[pos]&&(maskset.validPositions[pos].input===opts.groupSeparator||"0"===maskset.validPositions[pos].input);)delete maskset.validPositions[pos],pos++}var buffer=[];for(var vp in maskset.validPositions)void 0!==maskset.validPositions[vp].input&&buffer.push(maskset.validPositions[vp].input);if(radixInjection&&delete maskset.validPositions[radixPos],radixPos>0){var bufVal=buffer.join("");if(matchRslt=bufVal.match(opts.regex.integerNPart(opts)))if(radixPos>=position)if(0===matchRslt[0].indexOf("0"))canClear=matchRslt.index!==position||"0"===opts.placeholder;else{var intPart=parseInt(matchRslt[0].replace(new RegExp(Inputmask.escapeRegex(opts.groupSeparator),"g"),"")),radixPart=parseInt(bufVal.split(opts.radixPoint)[1]);10>intPart&&maskset.validPositions[position]&&("0"!==opts.placeholder||radixPart>0)&&(maskset.validPositions[position].input="0",maskset.p=opts.prefix.length+1,canClear=!1)}else 0===matchRslt[0].indexOf("0")&&3===bufVal.length&&(maskset.validPositions={},canClear=!1)}}return canClear},onKeyDown:function(e,buffer,caretPos,opts){var $input=$(this);if(e.ctrlKey)switch(e.keyCode){case Inputmask.keyCode.UP:$input.val(parseFloat(this.inputmask.unmaskedvalue())+parseInt(opts.step)),$input.trigger("setvalue.inputmask");break;case Inputmask.keyCode.DOWN:$input.val(parseFloat(this.inputmask.unmaskedvalue())-parseInt(opts.step)),$input.trigger("setvalue.inputmask")}}},currency:{prefix:"$ ",groupSeparator:",",alias:"numeric",placeholder:"0",autoGroup:!0,digits:2,digitsOptional:!1,clearMaskOnLostFocus:!1},decimal:{alias:"numeric"},integer:{alias:"numeric",digits:0,radixPoint:""},percentage:{alias:"numeric",digits:2,radixPoint:".",placeholder:"0",autoGroup:!1,min:0,max:100,suffix:" %",allowPlus:!1,allowMinus:!1}}),Inputmask}(jQuery,Inputmask),function($,Inputmask){return Inputmask.extendAliases({phone:{url:"phone-codes/phone-codes.js",countrycode:"",mask:function(opts){opts.definitions["#"]=opts.definitions[9];var maskList=[];return $.ajax({url:opts.url,async:!1,dataType:"json",success:function(response){maskList=response},error:function(xhr,ajaxOptions,thrownError){alert(thrownError+" - "+opts.url)}}),maskList=maskList.sort(function(a,b){return(a.mask||a)<(b.mask||b)?-1:1})},keepStatic:!1,nojumps:!0,nojumpsThreshold:1,onBeforeMask:function(value,opts){var processedValue=value.replace(/^0/g,"");return(processedValue.indexOf(opts.countrycode)>1||-1===processedValue.indexOf(opts.countrycode))&&(processedValue="+"+opts.countrycode+processedValue),processedValue}},phonebe:{alias:"phone",url:"phone-codes/phone-be.js",countrycode:"32",nojumpsThreshold:4}}),Inputmask}(jQuery,Inputmask),function($,Inputmask){return Inputmask.extendAliases({Regex:{mask:"r",greedy:!1,repeat:"*",regex:null,regexTokens:null,tokenizer:/\[\^?]?(?:[^\\\]]+|\\[\S\s]?)*]?|\\(?:0(?:[0-3][0-7]{0,2}|[4-7][0-7]?)?|[1-9][0-9]*|x[0-9A-Fa-f]{2}|u[0-9A-Fa-f]{4}|c[A-Za-z]|[\S\s]?)|\((?:\?[:=!]?)?|(?:[?*+]|\{[0-9]+(?:,[0-9]*)?\})\??|[^.?*+^${[()|\\]+|./g,quantifierFilter:/[0-9]+[^,]/,isComplete:function(buffer,opts){return new RegExp(opts.regex).test(buffer.join(""))},definitions:{r:{validator:function(chrs,maskset,pos,strict,opts){function RegexToken(isGroup,isQuantifier){this.matches=[],this.isGroup=isGroup||!1,this.isQuantifier=isQuantifier||!1,this.quantifier={min:1,max:1},this.repeaterPart=void 0}function analyseRegex(){var match,m,currentToken=new RegexToken,opengroups=[];for(opts.regexTokens=[];match=opts.tokenizer.exec(opts.regex);)switch(m=match[0],m.charAt(0)){case"(":opengroups.push(new RegexToken(!0));break;case")":groupToken=opengroups.pop(),opengroups.length>0?opengroups[opengroups.length-1].matches.push(groupToken):currentToken.matches.push(groupToken);break;case"{":case"+":case"*":var quantifierToken=new RegexToken(!1,!0);m=m.replace(/[{}]/g,"");var mq=m.split(","),mq0=isNaN(mq[0])?mq[0]:parseInt(mq[0]),mq1=1===mq.length?mq0:isNaN(mq[1])?mq[1]:parseInt(mq[1]);if(quantifierToken.quantifier={min:mq0,max:mq1},opengroups.length>0){var matches=opengroups[opengroups.length-1].matches;match=matches.pop(),match.isGroup||(groupToken=new RegexToken(!0),groupToken.matches.push(match),match=groupToken),matches.push(match),matches.push(quantifierToken)}else match=currentToken.matches.pop(),match.isGroup||(groupToken=new RegexToken(!0),groupToken.matches.push(match),match=groupToken),currentToken.matches.push(match),currentToken.matches.push(quantifierToken);break;default:opengroups.length>0?opengroups[opengroups.length-1].matches.push(m):currentToken.matches.push(m)}currentToken.matches.length>0&&opts.regexTokens.push(currentToken)}function validateRegexToken(token,fromGroup){var isvalid=!1;fromGroup&&(regexPart+="(",openGroupCount++);for(var mndx=0;mndx<token.matches.length;mndx++){var matchToken=token.matches[mndx];if(matchToken.isGroup===!0)isvalid=validateRegexToken(matchToken,!0);else if(matchToken.isQuantifier===!0){var crrntndx=$.inArray(matchToken,token.matches),matchGroup=token.matches[crrntndx-1],regexPartBak=regexPart;if(isNaN(matchToken.quantifier.max)){for(;matchToken.repeaterPart&&matchToken.repeaterPart!==regexPart&&matchToken.repeaterPart.length>regexPart.length&&!(isvalid=validateRegexToken(matchGroup,!0)););isvalid=isvalid||validateRegexToken(matchGroup,!0),isvalid&&(matchToken.repeaterPart=regexPart),regexPart=regexPartBak+matchToken.quantifier.max}else{for(var i=0,qm=matchToken.quantifier.max-1;qm>i&&!(isvalid=validateRegexToken(matchGroup,!0));i++);regexPart=regexPartBak+"{"+matchToken.quantifier.min+","+matchToken.quantifier.max+"}"}}else if(void 0!==matchToken.matches)for(var k=0;k<matchToken.length&&!(isvalid=validateRegexToken(matchToken[k],fromGroup));k++);else{var testExp;if("["==matchToken.charAt(0)){testExp=regexPart,testExp+=matchToken;for(var j=0;openGroupCount>j;j++)testExp+=")";var exp=new RegExp("^("+testExp+")$");isvalid=exp.test(bufferStr)}else for(var l=0,tl=matchToken.length;tl>l;l++)if("\\"!==matchToken.charAt(l)){testExp=regexPart,testExp+=matchToken.substr(0,l+1),testExp=testExp.replace(/\|$/,"");for(var j=0;openGroupCount>j;j++)testExp+=")";var exp=new RegExp("^("+testExp+")$");if(isvalid=exp.test(bufferStr))break}regexPart+=matchToken}if(isvalid)break}return fromGroup&&(regexPart+=")",openGroupCount--),isvalid}var groupToken,cbuffer=maskset.buffer.slice(),regexPart="",isValid=!1,openGroupCount=0;null===opts.regexTokens&&analyseRegex(),cbuffer.splice(pos,0,chrs);for(var bufferStr=cbuffer.join(""),i=0;i<opts.regexTokens.length;i++){var regexToken=opts.regexTokens[i];if(isValid=validateRegexToken(regexToken,regexToken.isGroup))break}return isValid},cardinality:1}}}}),Inputmask}(jQuery,Inputmask),function(){"use strict";var app=angular.module("app",["ngResource","ui.router","ngCookies","ui.mask","ui.bootstrap","isteven-multi-select","ngInputModified","ui.validate","cgBusy","angular.filter","xeditable","checklist-model","ngFileUpload","STNResource","ui.bootstrap.datetimepicker","leaflet-directive","ngHandsontable","STNControllers","LogInOutController","ModalControllers","SettingsControllers","WiM.Services","WiM.Event","wim_angular","angularSpinners"]);app.constant("SERVER_URL","https://stn.wim.usgs.gov/STNServices"),app.run(["$rootScope","$uibModalStack","$cookies","$state",function($rootScope,$uibModalStack,$cookies,$state){$rootScope.$on("$stateChangeStart",function(event,toState,toParams,fromState,fromParams){void 0!==$cookies.get("STNCreds")&&""!==$cookies.get("STNCreds")||!toState.authenticate?($rootScope.stateIsLoading={showLoading:!0},$uibModalStack.dismissAll(),"/"==toState.url&&$("#userNameFocus").focus()):($rootScope.returnToState=toState.name,$rootScope.returnToStateParams=toParams.id,event.preventDefault(),$state.go("entry"))}),$rootScope.$on("$stateChangeSuccess",function(event,toState,toParams,fromState,fromParams,error){$rootScope.stateIsLoading.showLoading=!1}),$rootScope.$on("$stateChangeError",function(event,toState,toParams,fromState,fromParams,error){$rootScope.stateIsLoading.showLoading=!1,alert("Error occurred: Status"+error.status+", "+error.statusText+". The following request was unsuccessful: "+error.config.url+" Please refresh and try again.")})}]),app.config(["$stateProvider","$urlRouterProvider",function($stateProvider,$urlRouterProvider){$urlRouterProvider.otherwise("/"),$stateProvider.state("entry",{url:"/",templateUrl:"component/main/mainView.html",controller:"mainCtrl"}).state("map",{url:"/Map",views:{"":{controller:"MapController",templateUrl:"component/map/map.html"},"mapFilters@map":{templateUrl:"component/map/mapFilters.html",controller:"MapFiltersController",resolve:{s:"STATE",stateList:function(s){return s.getAll().$promise},sensT:"SENSOR_TYPE",sensorTypes:function(sensT){return sensT.getAll().$promise},netwN:"NETWORK_NAME",networkNames:function(netwN){return netwN.getAll().$promise}}},"mapSiteInfo@map":{templateUrl:"component/site/mapSiteInfoView.html",controller:"MapSiteInfoController"},"mapPeaksView@map":{templateUrl:"component/peak/mapPeaksView.html",controller:"MapPeaksController"},"mapSensorPropose@map":{templateUrl:"component/sensor/mapSensorPropose.html",resolve:{dt:"DEPLOYMENT_TYPE",allDeployTypes:function(dt){return dt.getAll().$promise},sd:"SENSOR_TYPE",allSensDeps:function(sd){return sd.getAll().$promise}},controller:"MapSensorProposeController"}}}).state("approval",{url:"/Approval",templateUrl:"component/approval/approval.html",controller:"approvalCtrl",authenticate:!0,resolve:{s:"STATE",stateList:function(s){return s.getAll().$promise},i:"INSTRUMENT",instrumentList:function(i){return i.getAll().$promise},st:"SENSOR_TYPE",allSensorTypes:function(st){return st.getAll().$promise},dt:"DEPLOYMENT_TYPE",allDepTypes:function(dt){return dt.getAll().$promise}}}).state("siteSearch",{url:"/SiteSearch",templateUrl:"component/siteSearch/siteSearch.html",controller:"siteSearchCtrl",authenticate:!0,resolve:{s:"STATE",stateList:function(s){return s.getAll().$promise},sensT:"SENSOR_TYPE",sensorTypes:function(sensT){return sensT.getAll().$promise},netwN:"NETWORK_NAME",networkNames:function(netwN){return netwN.getAll().$promise}}}).state("reporting",{url:"/Reporting","abstract":!0,templateUrl:"component/reporting/reporting.html",controller:"reportingCtrl",authenticate:!0,resolve:{e:"EVENT",allEvents:function(e){return e.getAll().$promise},state:"STATE",allStates:function(state){return state.getAll().$promise},r:"REPORT",allReports:function(r){return r.getAll().$promise},et:"EVENT_TYPE",allEventTypes:function(et){return et.getAll().$promise},es:"EVENT_STATUS",allEventStatus:function(es){return es.getAll().$promise},ag:"AGENCY",allAgencies:function(ag){return ag.getAll().$promise},memberReports:function(r,$cookies){var mID=$cookies.get("mID");return r.getMemberReports({memberId:mID}).$promise}}}).state("reporting.reportDash",{url:"/Dashboard",templateUrl:"component/reporting/reportingDashboard.html",controller:"reportingDashCtrl",authenticate:!0,resolve:{r:"REPORT",allReportsAgain:function(r){return r.getAll().$promise}}}).state("reporting.submitReport",{url:"/SubmitReport",templateUrl:"component/reporting/submitReport.html",controller:"submitReportCtrl",authenticate:!0}).state("reporting.generateReport",{url:"/GenerateReport",templateUrl:"component/reporting/generateReport.html",authenticate:!0}).state("settings",{url:"/Settings",templateUrl:"component/settings/settings.html",controller:"settingsCtrl",authenticate:!0}).state("members",{url:"/Members",params:{id:null},"abstract":!0,template:"<div ui-view></div>",controller:"memberCtrl",authenticate:!0,resolve:{r:"ROLE",allRoles:function(r){return r.getAll().$promise},a:"AGENCY",allAgencies:function(a){return a.getAll().$promise},userProfileId:function($stateParams){return void 0!==$stateParams.id?$stateParams.id:void 0}}}).state("members.MembersList",{url:"/MembersList",templateUrl:"component/member/membersList.html",authenticate:!0}).state("events",{url:"/Events","abstract":!0,template:"<div ui-view></div>",controller:"eventCtrl",authenticate:!0,resolve:{e:"EVENT",allEvents:function(e){return e.getAll().$promise},et:"EVENT_TYPE",allEventTypes:function(et){return et.getAll().$promise},es:"EVENT_STATUS",allEventStats:function(es){return es.getAll().$promise},m:"MEMBER",allCoordMembers:function(m,$http,$cookies){return $http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",m.getRoleMembers({roleId:1}).$promise}}}).state("events.EventsList",{url:"/EventsList",templateUrl:"component/event/eventsList.html",authenticate:!0}).state("events.EventInfo",{url:"/eventInfo/:id",templateUrl:"component/event/eventInfo.html",controller:"eventInfoCtrl",authenticate:!0,resolve:{e:"EVENT",thisEvent:function(e,$stateParams){var eventId=$stateParams.id;return eventId>0?e.query({id:eventId}).$promise:void 0}}}).state("resources",{url:"/Resources","abstract":!0,template:"<div ui-view></div>",controller:"resourcesCtrl",authenticate:!0,resolve:{state:"STATE",allStates:function(state){return state.getAll().$promise},ag:"AGENCY",allAgencies:function(ag){return ag.getAll().$promise},c:"CONTACT_TYPE",allContactTypes:function(c){return c.getAll().$promise},d:"DEPLOYMENT_PRIORITY",allDeployPriorities:function(d){return d.getAll().$promise},es:"EVENT_STATUS",allEventStats:function(es){return es.getAll().$promise},et:"EVENT_TYPE",allEventTypes:function(et){return et.getAll().$promise},ft:"FILE_TYPE",allFileTypes:function(ft){return ft.getAll().$promise},hcm:"HORIZONTAL_COLL_METHODS",allHorCollMethods:function(hcm){return hcm.getAll().$promise},hd:"HORIZONTAL_DATUM",allHorDatums:function(hd){return hd.getAll().$promise},ht:"HOUSING_TYPE",allHouseTypes:function(ht){return ht.getAll().$promise},hq:"HWM_QUALITY",allHWMqualities:function(hq){return hq.getAll().$promise},hwmT:"HWM_TYPE",allHWMtypes:function(hwmT){return hwmT.getAll().$promise},icc:"INST_COLL_CONDITION",allInstCollectConditions:function(icc){return icc.getAll().$promise},m:"MARKER",allMarkers:function(m){return m.getAll().$promise},nn:"NETWORK_NAME",allNetworkNames:function(nn){return nn.getAll().$promise},opq:"OP_QUALITY",allObjPtQualities:function(opq){return opq.getAll().$promise},opt:"OP_TYPE",allObjPtTypes:function(opt){return opt.getAll().$promise},sb:"SENSOR_BRAND",allSensorBrands:function(sb){return sb.getAll().$promise},dt:"DEPLOYMENT_TYPE",allDeploymentTypes:function(dt){return dt.getAll().$promise},sstat:"STATUS_TYPE",allStatusTypes:function(sstat){return sstat.getAll().$promise},st:"SENSOR_TYPE",allSensorTypes:function(st){return st.getAll().$promise},nt:"NETWORK_TYPE",allNetworkTypes:function(nt){return nt.getAll().$promise},vcm:"VERTICAL_COLL_METHOD",allVerticalCollMethods:function(vcm){return vcm.getAll().$promise},vd:"VERTICAL_DATUM",allVerticalDatums:function(vd){return vd.getAll().$promise}}}).state("resources.ResourcesList",{url:"/ResourcesList",templateUrl:"component/resources/resourcesList.html",authenticate:!0}).state("resources.ResourcesList.agency",{url:"/Agencies",templateUrl:"component/resources/agency.html",authenticate:!0}).state("resources.ResourcesList.ContactType",{url:"/ContactTypes",templateUrl:"component/resources/contactType.html",authenticate:!0}).state("resources.ResourcesList.DepPriority",{url:"/DeploymentPriorities",templateUrl:"component/resources/deploymentPriority.html",authenticate:!0}).state("resources.ResourcesList.EventStatus",{url:"/EventStatus",templateUrl:"component/resources/eventStatus.html",authenticate:!0}).state("resources.ResourcesList.EventType",{url:"/EventTypes",templateUrl:"component/resources/eventType.html",authenticate:!0}).state("resources.ResourcesList.FileType",{url:"/FileTypes",templateUrl:"component/resources/fileType.html",authenticate:!0}).state("resources.ResourcesList.HorCollMethd",{url:"/HorizontalCollMethods",templateUrl:"component/resources/horizontalCollectionMethod.html",authenticate:!0}).state("resources.ResourcesList.HorDatum",{url:"/HorizontalDatums",templateUrl:"component/resources/horizontalDatum.html",authenticate:!0}).state("resources.ResourcesList.HousingType",{url:"/HousingTypes",templateUrl:"component/resources/housingType.html",authenticate:!0}).state("resources.ResourcesList.HWMQual",{url:"/HWMQualities",templateUrl:"component/resources/hwmQuality.html",authenticate:!0}).state("resources.ResourcesList.HWMType",{url:"/HWMTypes",templateUrl:"component/resources/hwmType.html",authenticate:!0}).state("resources.ResourcesList.InstrCollCondition",{url:"/InstrCollConditions",templateUrl:"component/resources/instrumentCollectionCondition.html",authenticate:!0}).state("resources.ResourcesList.Marker",{url:"/Markers",templateUrl:"component/resources/marker.html",authenticate:!0}).state("resources.ResourcesList.NetworkNames",{url:"/NetworkNames",templateUrl:"component/resources/networkNames.html",authenticate:!0}).state("resources.ResourcesList.OPquality",{url:"/ObjPointQualities",templateUrl:"component/resources/objectivePointQuality.html",authenticate:!0}).state("resources.ResourcesList.OPType",{url:"/ObjPointType",templateUrl:"component/resources/objectivePointType.html",authenticate:!0}).state("resources.ResourcesList.SensorBrand",{url:"/SensorBrands",templateUrl:"component/resources/sensorBrand.html",authenticate:!0}).state("resources.ResourcesList.SenDepType",{url:"/SensorDeploymentTypes",templateUrl:"component/resources/deploymentType.html",authenticate:!0}).state("resources.ResourcesList.StatusType",{url:"/StatusTypes",templateUrl:"component/resources/statusType.html",authenticate:!0}).state("resources.ResourcesList.SensorType",{url:"/SensorTypes",templateUrl:"component/resources/sensorType.html",authenticate:!0}).state("resources.ResourcesList.NetworkType",{url:"/NetworkTypes",templateUrl:"component/resources/networkType.html",authenticate:!0}).state("resources.ResourcesList.VertCollMethod",{url:"/VerticalCollMethods",templateUrl:"component/resources/verticalCollectionMethod.html",authenticate:!0}).state("resources.ResourcesList.VertDatum",{url:"/VerticalDatums",templateUrl:"component/resources/verticalDatum.html",authenticate:!0}).state("historicHWMs",{url:"/Events/:id/HistoricHWMs",templateUrl:"component/hwm/historic.html",authenticate:!0,controller:"historicHWMCtrl",resolve:{e:"EVENT",thisEvent:function(e,$stateParams){return $stateParams.id>0?e.query({
id:$stateParams.id}).$promise:void 0},hd:"HORIZONTAL_DATUM",HDatums:function(hd){return hd.getAll().$promise},hc:"HORIZONTAL_COLL_METHODS",HCollectMeths:function(hc){return hc.getAll().$promise},s:"STATE",States:function(s){return s.getAll().$promise},c:"COUNTIES",Counties:function(c){return c.getAll().$promise},opt:"OP_TYPE",OPTypes:function(opt){return opt.getAll().$promise},vd:"VERTICAL_DATUM",VDatums:function(vd){return vd.getAll().$promise},ht:"HWM_TYPE",HTypes:function(ht){return ht.getAll().$promise},hqu:"HWM_QUALITY",HWMQuals:function(hqu){return hqu.getAll().$promise}}}).state("site",{url:"/Site/:id","abstract":!0,params:{id:null,latitude:{value:null,squash:!0},longitude:{value:null,squash:!0}},templateUrl:"component/site/site.html",authenticate:!0,controller:["$scope","$stateParams",function($scope,$stateParams){$scope.siteID=$stateParams.id}],resolve:{s:"SITE",thisSite:function(s,$stateParams){return $stateParams.id>0?s.query({id:$stateParams.id}).$promise:void 0},latlong:function($stateParams){if($stateParams.latitude){var latlongarray=[$stateParams.latitude,$stateParams.longitude];return latlongarray}},thisSiteNetworkNames:function(s,$stateParams){return $stateParams.id>0?s.getSiteNetworkNames({id:$stateParams.id}).$promise:void 0},thisSiteNetworkTypes:function(s,$stateParams){return $stateParams.id>0?s.getSiteNetworkTypes({id:$stateParams.id}).$promise:void 0},thisSiteHousings:function(s,$stateParams){return $stateParams.id>0?s.getSiteHousings({id:$stateParams.id}).$promise:void 0},thisSiteOPs:function(s,$stateParams){return $stateParams.id>0?s.getSiteOPs({id:$stateParams.id}).$promise:void 0},thisSiteSensors:function(s,$stateParams){return $stateParams.id>0?s.getSiteSensors({id:$stateParams.id}).$promise:void 0},thisSiteHWMs:function(s,$stateParams,$http,$cookies){return $stateParams.id>0?($http.defaults.headers.common.Authorization="Basic "+$cookies.get("STNCreds"),$http.defaults.headers.common.Accept="application/json",s.getSiteHWMs({id:$stateParams.id}).$promise):void 0},thisSiteFiles:function(s,$stateParams){return $stateParams.id>0?s.getSiteFiles({id:$stateParams.id}).$promise:void 0},thisSitePeaks:function(s,$stateParams){return $stateParams.id>0?s.getSitePeaks({id:$stateParams.id}).$promise:void 0},hd:"HORIZONTAL_DATUM",allHorDatums:function(hd){return hd.getAll().$promise},hcm:"HORIZONTAL_COLL_METHODS",allHorCollMethods:function(hcm){return hcm.getAll().$promise},st:"STATE",allStates:function(st){return st.getAll().$promise},c:"COUNTIES",allCounties:function(c){return c.getAll().$promise},ht:"HOUSING_TYPE",allHousingTypes:function(ht){return ht.getAll().$promise},nn:"NETWORK_NAME",allNetworkNames:function(nn){return nn.getAll().$promise},nt:"NETWORK_TYPE",allNetworkTypes:function(nt){return nt.getAll().$promise},dt:"DEPLOYMENT_TYPE",allDeployTypes:function(dt){return dt.getAll().$promise},dp:"DEPLOYMENT_PRIORITY",allDeployPriorities:function(dp){return dp.getAll().$promise},opt:"OP_TYPE",allOPTypes:function(opt){return opt.getAll().$promise},vertDats:"VERTICAL_DATUM",allVertDatums:function(vertDats){return vertDats.getAll().$promise},vertColMet:"VERTICAL_COLL_METHOD",allVertColMethods:function(vertColMet){return vertColMet.getAll().$promise},opQual:"OP_QUALITY",allOPQualities:function(opQual){return opQual.getAll().$promise},e:"EVENT",allEvents:function(e){return e.getAll().$promise},sent:"SENSOR_TYPE",allSensorTypes:function(sent){return sent.getAll().$promise},sb:"SENSOR_BRAND",allSensorBrands:function(sb){return sb.getAll().$promise},hwmt:"HWM_TYPE",allHWMTypes:function(hwmt){return hwmt.getAll().$promise},hq:"HWM_QUALITY",allHWMQualities:function(hq){return hq.getAll().$promise},m:"MARKER",allMarkers:function(m){return m.getAll().$promise},ft:"FILE_TYPE",allFileTypes:function(ft){return ft.getAll().$promise},a:"AGENCY",allAgencies:function(a){return a.getAll().$promise}}}).state("site.dashboard",{url:"/SiteDashboard",authenticate:!0,views:{siteNo:{controller:["$scope","$cookies","thisSite",function($scope,$cookies,thisSite){void 0!==thisSite&&($scope.SiteNo=thisSite.site_no),$scope.$watch(function(){return $cookies.get("SessionEventName")},function(newValue){$scope.sessionEvent=null!==$cookies.get("SessionEventName")&&void 0!==$cookies.get("SessionEventName")?$cookies.get("SessionEventName"):"All Events"})}],template:'<div><h2 style="margin-top:0">Site {{SiteNo}} - For {{sessionEvent}}</h2></div><hr />'},aMap:{controller:"siteMapCtrl",templateUrl:"component/site/siteMapView.html",resolve:{aSite:function(thisSite){return void 0!==thisSite?thisSite:void 0}}},aSite:{controller:"siteCtrl",templateUrl:"component/site/siteInfoView.html"},op:{controller:"objectivePointCtrl",templateUrl:"component/objectivePoint/objectivePointList.html"},sensor:{controller:"sensorCtrl",templateUrl:"component/sensor/sensorList.html"},hwm:{controller:"hwmCtrl",templateUrl:"component/hwm/hwmList.html"},file:{controller:"fileCtrl",templateUrl:"component/file/fileList.html"},peak:{controller:"peakCtrl",templateUrl:"component/peak/peakList.html"}}}).state("quickCreate",{url:"/QuickCreate/:id",templateUrl:"component/site/quickCreate.html",controller:"quickCreateCtrl",authenticate:!0,resolve:{whichQuick:function($stateParams){return $stateParams.id},hd:"HORIZONTAL_DATUM",allHorDatums:function(hd){return hd.getAll().$promise},hcm:"HORIZONTAL_COLL_METHODS",allHorCollMethods:function(hcm){return hcm.getAll().$promise},st:"STATE",allStates:function(st){return st.getAll().$promise},c:"COUNTIES",allCounties:function(c){return c.getAll().$promise},opt:"OP_TYPE",allOPTypes:function(opt){return opt.getAll().$promise},vertDats:"VERTICAL_DATUM",allVertDatums:function(vertDats){return vertDats.getAll().$promise},vertColMet:"VERTICAL_COLL_METHOD",allVertColMethods:function(vertColMet){return vertColMet.getAll().$promise},opQual:"OP_QUALITY",allOPQualities:function(opQual){return opQual.getAll().$promise},hwmt:"HWM_TYPE",allHWMTypes:function(hwmt,$stateParams){return"HWM"==$stateParams.id?hwmt.getAll().$promise:void 0},hq:"HWM_QUALITY",allHWMQualities:function(hq,$stateParams){return"HWM"==$stateParams.id?hq.getAll().$promise:void 0},m:"MARKER",allMarkers:function(m,$stateParams){return"HWM"==$stateParams.id?m.getAll().$promise:void 0},dt:"DEPLOYMENT_TYPE",allDeployTypes:function(dt){return dt.getAll().$promise},e:"EVENT",allEvents:function(e,$stateParams){return"Sensor"==$stateParams.id?e.getAll().$promise:void 0},sent:"SENSOR_TYPE",allSensorTypes:function(sent,$stateParams){return"Sensor"==$stateParams.id?sent.getAll().$promise:void 0},sb:"SENSOR_BRAND",allSensorBrands:function(sb,$stateParams){return"Sensor"==$stateParams.id?sb.getAll().$promise:void 0},ht:"HOUSING_TYPE",allHousingTypes:function(ht){return ht.getAll().$promise}}})}])}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXBvbmVudC9TVE5DdHJsLmpzIiwic2hhcmVkL2RpcmVjdGl2ZXMvU1RORGlyZWN0aXZlcy5qcyIsImNvbXBvbmVudC9zaXRlU2VhcmNoL3NpdGVTZWFyY2hDdHJsLmpzIiwiY29tcG9uZW50L3NldHRpbmdzL3NldHRpbmdzQ3RybC5qcyIsImNvbXBvbmVudC9zaXRlL3NpdGVNb2RhbEN0cmwuanMiLCJjb21wb25lbnQvc2l0ZS9zaXRlTWFwQ3RybC5qcyIsImNvbXBvbmVudC9zaXRlL3NpdGVDdHJsLmpzIiwiY29tcG9uZW50L3NpdGUvcXVpY2tDcmVhdGVDdHJsLmpzIiwiY29tcG9uZW50L3NlbnNvci9zZW5zb3JNb2RhbEN0cmwuanMiLCJjb21wb25lbnQvc2Vuc29yL3NlbnNvckN0cmwuanMiLCJjb21wb25lbnQvcmVzb3VyY2VzL3Jlc291cmNlc0N0cmwuanMiLCJjb21wb25lbnQvcmVwb3J0aW5nL3N1Ym1pdFJlcG9ydEN0cmwuanMiLCJjb21wb25lbnQvcmVwb3J0aW5nL3JlcG9ydE1vZGFsQ3RybC5qcyIsImNvbXBvbmVudC9yZXBvcnRpbmcvcmVwb3J0aW5nRGFzaGJvYXJkQ3RybC5qcyIsImNvbXBvbmVudC9yZXBvcnRpbmcvcmVwb3J0aW5nQ3RybC5qcyIsImNvbXBvbmVudC9yZXBvcnRpbmcvcHJvamVjdEFsZXJ0TW9kYWxDdHJsLmpzIiwiY29tcG9uZW50L3JlcG9ydGluZy9jb25maXJtUmVwb3J0TW9kYWxDdHJsLmpzIiwiY29tcG9uZW50L3BlYWsvcGVha01vZGFsQ3RybC5qcyIsImNvbXBvbmVudC9wZWFrL3BlYWtDdHJsLmpzIiwiY29tcG9uZW50L29iamVjdGl2ZVBvaW50L29iamVjdGl2ZVBvaW50TW9kYWxDdHJsLmpzIiwiY29tcG9uZW50L29iamVjdGl2ZVBvaW50L29iamVjdGl2ZVBvaW50Q3RybC5qcyIsImNvbXBvbmVudC9tZW1iZXIvbWVtYmVyTW9kYWxDdHJsLmpzIiwiY29tcG9uZW50L21lbWJlci9tZW1iZXJJbmZvQ3RybC5qcyIsImNvbXBvbmVudC9tZW1iZXIvbWVtYmVyQ3RybC5qcyIsImNvbXBvbmVudC9tYXAvTWFwU2l0ZUluZm9Db250cm9sbGVyLmpzIiwiY29tcG9uZW50L21hcC9NYXBTZW5zb3JQcm9wb3NlQ29udHJvbGxlci5qcyIsImNvbXBvbmVudC9tYXAvTWFwUGVha3NDb250cm9sbGVyLmpzIiwiY29tcG9uZW50L21hcC9NYXBGaWx0ZXJzQ29udHJvbGxlci5qcyIsImNvbXBvbmVudC9tYXAvbWFwQ3RybC5qcyIsImNvbXBvbmVudC9tYWluL21haW5DdHJsLmpzIiwiY29tcG9uZW50L2xvZ0luT3V0L2xvZ0luT3V0Q3RybC5qcyIsImNvbXBvbmVudC9od20vcXVpY2tIV01DdHJsLmpzIiwiY29tcG9uZW50L2h3bS9od21Nb2RhbEN0cmwuanMiLCJjb21wb25lbnQvaHdtL2h3bUN0cmwuanMiLCJjb21wb25lbnQvaHdtL2hpc3RvcmljSFdNQ3RybC5qcyIsImNvbXBvbmVudC9oZWxwL2hlbHBDdHJsLmpzIiwiY29tcG9uZW50L2ZpbGUvZmlsZU1vZGFsQ3RybC5qcyIsImNvbXBvbmVudC9maWxlL2ZpbGVDdHJsLmpzIiwiY29tcG9uZW50L2V2ZW50L2V2ZW50U2Vzc2lvbk1vZGFsQ3RybC5qcyIsImNvbXBvbmVudC9ldmVudC9ldmVudFNlc3Npb25DdHJsLmpzIiwiY29tcG9uZW50L2V2ZW50L2V2ZW50TW9kYWxDdHJsLmpzIiwiY29tcG9uZW50L2V2ZW50L2V2ZW50Q3RybC5qcyIsImNvbXBvbmVudC9hcHByb3ZhbC9hcHByb3ZhbEN0cmwuanMiLCJzZXJ2aWNlcy9TVE5SZXNvdXJjZS5qcyIsInNlcnZpY2VzL2J1c2luZXNzU2VydmljZXMuanMiLCJjb21wb25lbnQvTW9kYWxzQ3RybC5qcyIsImNvbXBvbmVudC9qcXVlcnkuaW5wdXRtYXNrLmJ1bmRsZS5qcyIsImFwcC5qcyJdLCJuYW1lcyI6WyJTVE5Db250cm9sbGVycyIsImFuZ3VsYXIiLCJtb2R1bGUiLCJjb25zdGFudCIsIlBBU1NXT1JEIiwiZGlyZWN0aXZlIiwiJHBhcnNlIiwiZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdCIsInJlc3RyaWN0IiwicmVwbGFjZSIsInNjb3BlIiwiZGF0YSIsImxpbmsiLCJlbGVtZW50IiwiYXR0cnMiLCJjaGFydCIsImVsZXZhdGlvbkRhdGEiLCJzcGxpdCIsImQzIiwic2VsZWN0IiwiYXBwZW5kIiwiYXR0ciIsInNlbGVjdEFsbCIsImVudGVyIiwidHJhbnNpdGlvbiIsImVhc2UiLCJzdHlsZSIsImQiLCJ0ZXh0IiwiJHdhdGNoIiwibmV3VmFsdWUiLCJvbGRWYWx1ZSIsIm1vZGVsIiwic2VhcmNoQnkiLCJzZWFyY2hUZXJtIiwidGVtcGxhdGUiLCJjb250cm9sbGVyIiwiJHNjb3BlIiwiJHN0YXRlIiwiJGh0dHAiLCJTSVRFIiwiJHVpYk1vZGFsIiwidmFsIiwicGxhY2Vob2xkZXIiLCJJbmRleFNlYXJjaFNpdGVzIiwiZGVmYXVsdHMiLCJoZWFkZXJzIiwiY29tbW9uIiwiQWNjZXB0IiwiZ2V0U2VhcmNoZWRTaXRlIiwiYnlTaXRlTm8iLCJyZXNwIiwic2l0ZVNlYXJjaFJlc3BvbnNlIiwiZXJyb3JSZXNwb25zZSIsImJ5U2l0ZUlkIiwiYnlTaXRlTmFtZSIsInMiLCJ1bmRlZmluZWQiLCJzdGF0dXMiLCJlcnJvck1vZGFsIiwib3BlbiIsIiR1aWJNb2RhbEluc3RhbmNlIiwib2siLCJjbG9zZSIsInNpemUiLCJyZXN1bHQiLCJ0aGVuIiwiZ28iLCJpZCIsInNpdGVfaWQiLCJiaW5kIiwiZXZlbnQiLCJ3aGljaCIsIiRhcHBseSIsIiRldmFsIiwibmdFbnRlciIsInByZXZlbnREZWZhdWx0IiwicmVxdWlyZSIsIm1vZGVsQ3RybCIsIiRwYXJzZXJzIiwicHVzaCIsImlucHV0VmFsdWUiLCJ0cmFuc2Zvcm1lZElucHV0IiwiJHNldFZpZXdWYWx1ZSIsIiRyZW5kZXIiLCIkZm9ybWF0dGVycyIsInNoaWZ0IiwiYXR0cmlidXRlcyIsImZvY3VzIiwiZ29CYWNrIiwiaGlzdG9yeSIsImJhY2siLCJyZWdleCIsImVsbSIsImN0cmwiLCJ1bmJpbmQiLCJ2aWV3VmFsdWUiLCJ0ZXN0IiwidGFyZ2V0IiwidmFsdWUiLCIkc2V0VmFsaWRpdHkiLCJzYW1lQXMiLCIkbW9kZWxWYWx1ZSIsImN1cnJlbnRWYWx1ZSIsIiR0aW1lb3V0IiwiaW5pdGlhbEhlaWdodCIsImhlaWdodCIsInJlc2l6ZSIsInNjcm9sbEhlaWdodCIsIm9uIiwiZWwiLCJpbnB1dG1hc2siLCJteUlucHV0TWFzayIsIm5nTW9kZWwiLCJmaWxlTW9kZWwiLCJtb2RlbFNldHRlciIsImFzc2lnbiIsImZpbGVzIiwiJGNvb2tpZXMiLCIkcm9vdFNjb3BlIiwiJGxvY2F0aW9uIiwic3RhdGVMaXN0Iiwic2Vuc29yVHlwZXMiLCJuZXR3b3JrTmFtZXMiLCJnZXQiLCJhdXRoIiwicGF0aCIsInRoaXNQYWdlIiwiYWN0aXZlTWVudSIsInNlc3Npb25FdmVudCIsInN0YXRlcyIsInNlblR5cGVzIiwibmV0TmFtZXMiLCJDaG9zZW4iLCJjaG9zZW5TdGF0ZXMiLCJzaXRlUmVzcG9uc2UiLCJjaGVja2JveE1vZGVsIiwiaHdtT25seSIsInNlbk9ubHkiLCJyZGdPbmx5Iiwib3BEZWZpbmVkIiwic29ydF9ieSIsIm5ld1NvcnRpbmdPcmRlciIsInNvcnRpbmdPcmRlciIsInJldmVyc2UiLCIkIiwiZWFjaCIsInRoaXMiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwic2VhcmNoUGFyYW1zIiwidGhpc1NlYXJjaCIsIk51bWJlciIsImkiLCJsZW5ndGgiLCJ5Iiwic3RhdGUiLCJzdGF0ZV9hYmJyZXYiLCJzZWxlY3RlZCIsInNlbnNvciIsIlNlbnNvclR5cGUiLCJuZXR3b3JrIiwiTmV0d29ya05hbWUiLCJzdXJ2ZXkiLCJIV01TdXJ2ZXllZCIsIkhXTU9ubHkiLCJTZW5zb3JPbmx5IiwiUkRHT25seSIsIk9QRGVmaW5lZCIsImdldEZpbHRlcmVkU2l0ZXMiLCJFdmVudCIsIlN0YXRlIiwiam9pbiIsInJlc3BvbnNlIiwic2l0ZUxpc3QiLCJzdGF0ZUlzTG9hZGluZyIsInNob3dMb2FkaW5nIiwiYWxlcnQiLCJzdGF0dXNUZXh0Iiwic2VhcmNoU2l0ZXMiLCJzdGF0ZVN0cmluZyIsImV2SUQiLCJzdGF0ZUNsaWNrIiwiaW5kIiwiaW5kZXhPZiIsInNwbGljZSIsImNsZWFyRmlsdGVycyIsImZvckVhY2giLCJzdCIsIlNldHRpbmdzQ29udHJvbGxlcnMiLCJzZXR0aW5ncyIsImNoYW5nZVZpZXciLCJ2aWV3IiwiTW9kYWxDb250cm9sbGVycyIsIiRxIiwiJHNjZSIsIiRmaWx0ZXIiLCJsZWFmbGV0TWFya2VyRXZlbnRzIiwiYWxsRHJvcERvd25QYXJ0cyIsImxhdGxvbmciLCJ0aGlzU2l0ZVN0dWZmIiwiU0lURV9IT1VTSU5HIiwiTUVNQkVSIiwiSU5TVFJVTUVOVCIsIklOU1RSVU1FTlRfU1RBVFVTIiwiTEFORE9XTkVSX0NPTlRBQ1QiLCJHRU9DT0RFIiwiSG9yaXpvbnRhbERhdHVtTGlzdCIsIkhvckNvbGxNZXRob2RMaXN0IiwiU3RhdGVMaXN0IiwiQWxsQ291bnR5TGlzdCIsInN0YXRlQ291bnR5TGlzdCIsIkRNUyIsImFsbEhvdXNpbmdUeXBlTGlzdCIsIkRlcFByaW9yaXR5TGlzdCIsIk5ldE5hbWVMaXN0IiwiTmV0VHlwZUxpc3QiLCJQcm9wb3NlZFNlbnMiLCJTZW5zb3JEZXBsb3ltZW50IiwidXNlclJvbGUiLCJjbG9zZVNpdGVzIiwic2hvd01hcCIsInNpdGVMYXQiLCJzaXRlTG9uZyIsImh0bWxEZXNjcmlwdGlvblRpcCIsInRydXN0QXNIdG1sIiwibWFwQ2VudGVyIiwibGF0IiwibG5nIiwiem9vbSIsImV2ZW50cyIsIm1hcE1hcmtlcnMiLCJlbmFibGUiLCJnZXRBdmFpbGFibGVFdmVudHMiLCJpY29ucyIsInN0biIsInR5cGUiLCJpY29uU2l6ZSIsImNsYXNzTmFtZSIsIm5ld1NUTiIsImljb25BbmNob3IiLCJhemltdXRoIiwiZGVnIiwibWluIiwic2VjIiwiYXppIiwidG9GaXhlZCIsInVwZGF0ZUFkZHJlc3NPbmx5IiwiTEFEZWciLCJhU2l0ZSIsImxhdGl0dWRlX2RkIiwiTEFNaW4iLCJMQVNlYyIsIkxPRGVnIiwibG9uZ2l0dWRlX2RkIiwiTE9NaW4iLCJMT1NlYyIsIkF1dGhvcml6YXRpb24iLCJnZXRBZGRyZXNzUGFydHMiLCJMb25naXR1ZGUiLCJMYXRpdHVkZSIsImdlb2dyYXBoaWVzIiwiQ291bnRpZXMiLCJzdGF0ZUZJUFMiLCJTVEFURSIsImNvdW50eU5hbWUiLCJOQU1FIiwidGhpc1N0YXRlSUQiLCJmaWx0ZXIiLCJjIiwic3RhdGVfZmlwIiwic3RhdGVfaWQiLCJ0aGlzU3RhdGUiLCJjb3VudHkiLCJ0b2FzdHIiLCJlcnJvciIsIiRvbiIsImFyZ3MiLCJkcmFnZW5kTG9jYXRpb24iLCJwYXJzZUZsb2F0IiwibGF0RE1TIiwiZGVnX3RvX2RtcyIsInRvU3RyaW5nIiwibGFkRE1TYXJyYXkiLCJsb25nRE1TIiwibG9uZ0RNU2FycmF5IiwiZ2V0QWRkcmVzcyIsImdldFByb3hpbWl0eVNpdGVzIiwiQnVmZmVyIiwiYSIsImxhdGl0dWRlIiwibG9uZ2l0dWRlIiwic2l0ZV9ubyIsImljb24iLCJtZXNzYWdlIiwiZHJhZ2dhYmxlIiwiJHByb21pc2UiLCJob3VzZURpcnR5IiwibmV0TmFtZURpcnR5IiwibmV0VHlwZURpcnR5Iiwic2l0ZUhvdXNlVHlwZXNUYWJsZSIsImhkYXR1bV9pZCIsImhjb2xsZWN0X21ldGhvZF9pZCIsImRlY0RlZ09SZG1zIiwib3JpZ2luYWxTaXRlSG91c2luZ3MiLCJjaGVja2VkIiwiY2hlY2tlZE5hbWUiLCJsYW5kb3duZXIiLCJhZGRMYW5kb3duZXIiLCJkaXNhYmxlU2Vuc29yUGFydHMiLCJzaG93U2l0ZUhvdXNlVGFibGUiLCJzaXRlSG91c2VzTW9kZWwiLCJzaXRlSG91c2VzVG9SZW1vdmUiLCJzaXRlTmV0d29ya05hbWVzIiwic2l0ZU5ldHdvcmtUeXBlcyIsIm9wZW5MYXRNb2RhbCIsInciLCJsYXRNb2RhbCIsImZpZWxkRm9jdXMiLCJvcGVuTG9uZ01vZGFsIiwibG9uZ01vZGFsIiwiY2hlY2tWYWx1ZSIsInN1YnN0cmluZyIsIk1hdGgiLCJmbG9vciIsIm1pbmZsb2F0IiwibSIsImxhdExvbmdDaGFuZ2UiLCJuZXRUeXBlQ2hnIiwid2hpY2hPbmUiLCJuIiwibmFtZSIsIm5uIiwiZGltQWN0aW9uIiwic2Vuc29yX25vdF9hcHByb3ByaWF0ZSIsIngiLCJpc19wZXJtYW5lbnRfaG91c2luZ19pbnN0YWxsZWQiLCJ1c2VTaXRlQWRkcmVzcyIsInVzZUFkZHJlc3Nmb3JMTyIsImFkZHJlc3MiLCJjaXR5IiwiemlwIiwic2F2ZSIsInZhbGlkIiwibGFuZG93bmVyY29udGFjdF9pZCIsInVwZGF0ZSIsInB1dFNpdGVBbmRQYXJ0cyIsImZuYW1lIiwibG5hbWUiLCJ0aXRsZSIsInByaW1hcnlwaG9uZSIsImxhbmRvd25lcmNvbnRhY3RpZCIsInVwZGF0ZVNpdGUiLCJjb3B5IiwiQ3JlYXRvciIsIkhvcml6b250YWxDb2xsZWN0TWV0aG9kIiwiSG9yaXpvbnRhbERhdHVtIiwiUHJpb3JpdHlOYW1lIiwiUmVtb3ZlUHJvbWlzZXMiLCJkZWZlciIsIkFkZFByb21pc2VzIiwic2hJRCIsImRlbFNIUHJvbSIsIm5uTCIsImRlbE5OUHJvbSIsImRlbGV0ZVNpdGVOZXR3b3JrTmFtZSIsInNpdGVJZCIsIm5ldHdvcmtOYW1lSWQiLCJuZXR3b3JrX25hbWVfaWQiLCJudEwiLCJkZWxOVFByb20iLCJuZXR3b3JrX3R5cGVfaWQiLCJuZXR3b3JrX3R5cGVfbmFtZSIsImRlbGV0ZVNpdGVOZXR3b3JrVHlwZSIsIm5ldHdvcmtUeXBlSWQiLCJodCIsImFkZEh0UHJvbSIsInNpdGVfaG91c2luZ19pZCIsIkFubkwiLCJhZGROTlByb20iLCJwb3N0U2l0ZU5ldHdvcmtOYW1lIiwiQW5UTCIsImFkZE5UUHJvbSIsInBvc3RTaXRlTmV0d29ya1R5cGUiLCJhbGwiLCJzZW5kQmFjayIsInN1Y2Nlc3MiLCJtc2ciLCJjb25zb2xlIiwiZmluaXNoUE9TVCIsInNJRCIsInBvc3RQcm9taXNlcyIsImh0eXBlIiwidHlwZV9uYW1lIiwiaFRQcm9taXNlIiwibk5hbWUiLCJuTlByb21pc2UiLCJuVHlwZSIsIm5UUHJvbWlzZSIsImRpc21pc3MiLCJjcmVhdGUiLCJwb3N0U2l0ZUFuZFBhcnRzIiwiY3JlYXRlZFNpdGVJRCIsInNlbGVjdGVkUHJvcG9zZWRTZW5zb3JzIiwicCIsInByb3BTZW5zIiwiaW5kZXgiLCJzZHQiLCJkZXBsb3ltZW50dHlwZXMiLCJkZXBsb3ltZW50X3R5cGVfaWQiLCJzZW5zb3JfdHlwZV9pZCIsInNlbnNvclR5cGVJRCIsImluc3QiLCJpbnNSZXNwb25zZSIsImluc3RTdGF0IiwiaW5zdHJ1bWVudF9pZCIsInN0YXR1c190eXBlX2lkIiwibWVtYmVyX2lkIiwidGltZV9zdGFtcCIsIkRhdGUiLCJ0aW1lX3pvbmUiLCJob3VzaW5nX3R5cGVfaWQiLCJlIiwibmkiLCJueSIsInF1ZXJ5IiwiYWNjZXNzX2dyYW50ZWQiLCJpc051bSIsImV2dCIsInRoZUV2ZW50Iiwid2luZG93Iiwia2V5Iiwia2V5Q29kZSIsInJldHVyblZhbHVlIiwiSG91c2VUeXBlQ2xpY2siLCJob3VzZVQiLCJtYXRlcmlhbCIsIm5vdGVzIiwiYW1vdW50Iiwic0hfSUQiLCJoIiwic2hvd0xhbmRPd25lclBhcnQiLCJ1cGRhdGVDb3VudHlMaXN0IiwiY2FuY2VsIiwiZGVsZXRlU2l0ZSIsInRoaXNTaXRlIiwiZFNpdGVNb2RhbCIsInNpdGVObyIsImRlbGV0ZUl0IiwibGVhZmxldERhdGEiLCJtYXBTdHVmZiIsInBhdGhzIiwibWFya2VycyIsInBhdGhzT2JqIiwiY2lyY2xlTWFya2VyIiwicmFkaXVzIiwid2VpZ2h0IiwiY29sb3IiLCJsYXRsbmdzIiwiYWRkU2hhcGUiLCJleHRlbmQiLCJtaW5ab29tIiwibWFya2Vyc0xhdExuZ0FycmF5IiwibGF5ZXJzIiwiYmFzZWxheWVycyIsInRvcG8iLCJsYXllciIsInZpc2libGUiLCJvdmVybGF5cyIsInN0blNpdGVzIiwidGhpc1NpdGVOZXR3b3JrTmFtZXMiLCJ0aGlzU2l0ZU5ldHdvcmtUeXBlcyIsInRoaXNTaXRlSG91c2luZ3MiLCJhbGxIb3JEYXR1bXMiLCJhbGxIb3JDb2xsTWV0aG9kcyIsImFsbFN0YXRlcyIsImFsbENvdW50aWVzIiwiYWxsRGVwbG95UHJpb3JpdGllcyIsImFsbEhvdXNpbmdUeXBlcyIsImFsbE5ldHdvcmtOYW1lcyIsImFsbE5ldHdvcmtUeXBlcyIsImFsbERlcGxveVR5cGVzIiwiYWxsU2Vuc29yVHlwZXMiLCJtYXBPcGVuIiwic2l0ZU9wZW4iLCJvcE9wZW4iLCJzZW5zb3JPcGVuIiwiaHdtT3BlbiIsImZpbGVzT3BlbiIsInBlYWtPcGVuIiwidGhpc1NpdGVIb3VzZVR5cGVNb2RlbCIsIm9wZW5TaXRlQ3JlYXRlIiwiZHJvcGRvd25QYXJ0cyIsIm1vZGFsSW5zdGFuY2UiLCJ0ZW1wbGF0ZVVybCIsImtleWJvYXJkIiwiYmFja2Ryb3AiLCJ3aW5kb3dDbGFzcyIsInJlc29sdmUiLCJvcmlnU2l0ZUhvdXNlcyIsInNIb3VzZVR5cGVNb2RlbCIsInNOZXROYW1lcyIsInNOZXRUeXBlcyIsImxvIiwic2l0ZVJlbGF0ZWRTdHVmZiIsInIiLCJoZCIsImRhdHVtX2lkIiwiZGF0dW1fbmFtZSIsImhjIiwiaGNvbGxlY3RfbWV0aG9kIiwicHJpb3JpdHlfaWQiLCJkcCIsInByaW9yaXR5X25hbWUiLCJ6IiwiaG91c2VUeXBlTmFtZSIsImIiLCJudCIsInNlbnNvck5vdEFwcHIiLCJnZXRTaXRlTGFuZE93bmVyIiwiYXBwbHkiLCJ3aGljaFF1aWNrIiwiYWxsT1BUeXBlcyIsImFsbFZlcnREYXR1bXMiLCJhbGxWZXJ0Q29sTWV0aG9kcyIsImFsbE9QUXVhbGl0aWVzIiwiYWxsSFdNVHlwZXMiLCJhbGxIV01RdWFsaXRpZXMiLCJhbGxNYXJrZXJzIiwiYWxsRXZlbnRzIiwiYWxsU2Vuc29yQnJhbmRzIiwiT0JKRUNUSVZFX1BPSU5UIiwiSFdNIiwiT1BfTUVBU1VSRSIsIk9QX0NPTlRST0xfSURFTlRJRklFUiIsIkNyZWF0ZVdoYXQiLCJsb2dnZWRJbk1lbWJlciIsInF1aWNrRm9ybSIsIm1ha2VBZGF0ZSIsImFEYXRlIiwieWVhciIsImdldEZ1bGxZZWFyIiwibW9udGgiLCJnZXRNb250aCIsImRheSIsImdldERhdGUiLCJzbGljZSIsIm1vbnRoTmFtZXMiLCJkYXRlV090aW1lIiwiRXZlbnROYW1lIiwiYU9QIiwiZGF0ZV9lc3RhYmxpc2hlZCIsInJlbW92ZU9QQ2FycmF5IiwiYWRkZWRJZGVudGlmaWVycyIsInNob3dDb250cm9sSURpbnB1dCIsImhvckRhdHVtTGlzdCIsImhvckNvbGxNZXRob2RMaXN0IiwiYWxsQ291bnR5TGlzdCIsIm9wVHlwZUxpc3QiLCJ2ZXJ0RGF0dW1MaXN0IiwidmVydENvbGxNZXRob2RMaXN0Iiwib3BRdWFsTGlzdCIsImFIV00iLCJod21fZW52aXJvbm1lbnQiLCJldmVudF9pZCIsImJhbmsiLCJmbGFnX2RhdGUiLCJzdGlsbHdhdGVyIiwiZmxhZ19tZW1iZXJfaWQiLCJod21UeXBlTGlzdCIsImh3bVF1YWxMaXN0IiwibWFya2VyTGlzdCIsImdldFRpbWVab25lU3RhbXAiLCJkc2VudCIsInNlbmRUaGlzIiwib2Zmc2V0Iiwiem9uZSIsInN1YnN0ciIsImRlcFR5cGVMaXN0IiwiaG91c2VUeXBlTGlzdCIsInRpbWVab25lTGlzdCIsImFTZW5zb3IiLCJhU2Vuc1N0YXR1cyIsImV2ZW50TGlzdCIsInNlbnNvclR5cGVMaXN0Iiwic2Vuc29yQnJhbmRMaXN0IiwiSW50ZXJ2YWxUeXBlIiwiRGVwdGltZVBhcnRzIiwiZ2V0RGVwVHlwZXMiLCJmaWx0ZXJlZERlcGxveW1lbnRUeXBlcyIsIm1hdGNoaW5nU2Vuc0RlcGxpc3QiLCJzZCIsIkZUb3JNRVRFUiIsIkZUb3JDTSIsImFkZE5ld0lkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwiaWRlbnRpZmllcl90eXBlIiwiZGVhbFdpdGhUaW1lU3RhbXBiNFNlbmQiLCJ1dGNEYXRlVGltZSIsInRvVVRDU3RyaW5nIiwiZGF0ZXBpY2tycyIsIiRldmVudCIsInN0b3BQcm9wYWdhdGlvbiIsImNob29zZVF1YWxpdHkiLCJod21fdW5jZXJ0YWludHkiLCJod21fcXVhbGl0eV9pZCIsIm1pbl9yYW5nZSIsIm1heF9yYW5nZSIsImNvbXBhcmVUb1VuY2VydGFpbnR5IiwibWF0Y2hpbmdRdWFsSWQiLCJpbmNvbmdydWVudE1vZGFsIiwic2Vzc2lvbkV2ZW50TmFtZSIsInNlc3Npb25FdmVudEV4aXN0cyIsIlVucXVhbnRDaGVja2VkIiwidW5xdWFudGlmaWVkIiwidW5jZXJ0YWludHkiLCJ0cmltT1AiLCJvcCIsIk9CSl9QVCIsIm9iamVjdGl2ZV9wb2ludF9pZCIsImRlc2NyaXB0aW9uIiwiZWxldl9mdCIsIm9wX2lzX2Rlc3Ryb3llZCIsIm9wX25vdGVzIiwidmRhdHVtX2lkIiwidmNvbGxlY3RfbWV0aG9kX2lkIiwib3BfdHlwZV9pZCIsImRhdGVfcmVjb3ZlcmVkIiwib3BfcXVhbGl0eV9pZCIsIlJlbW92ZUlEIiwib3BDb250cm9sIiwib3BfY29udHJvbF9pZGVudGlmaWVyX2lkIiwiZm9ybWF0RGVmYXVsdHMiLCJ0aGVPUCIsInRhcGVkb3duIiwiT3BlbiIsInNob3dOZWVkT1BmaXJzdE1vZGFsIiwibmVlZE9QTW9kYWwiLCJ0YXBlRG93blRhYmxlIiwicmVtb3ZlT1AiLCJyZW1vdmVPUE1lYXMiLCJ5ZXNPck5vIiwiT1BzRm9yVGFwZURvd24iLCJPUE1lYXN1cmUiLCJhZGRUYXBlZG93biIsInNlbnNvcl9lbGV2YXRpb24iLCJ3c19lbGV2YXRpb24iLCJnc19lbGV2YXRpb24iLCJzaG93VGFwZWRvd25QYXJ0Iiwib3BfbmFtZSIsImVsZXZhdGlvbiIsIlZkYXR1bSIsInZkIiwiZGF0dW1fYWJicmV2aWF0aW9uIiwic2l0ZUVycm9ycyIsIm9wRXJyb3JzIiwiaHdtRXJyb3JzIiwidGhlRm9ybSIsInF1aWNrIiwiJHZhbGlkIiwid2F0ZXJib2R5IiwiY3JlYXRlZE9QIiwiT1B0b1BPU1QiLCJvcGMiLCJ0aGlzT1BDb250cm9sSUQiLCJzdXJ2ZXlfZGF0ZSIsInN1cnZleV9tZW1iZXJfaWQiLCJjcmVhdGVkU2Vuc29yIiwiaW50ZXJ2YWwiLCJzdGF0UmVzcG9uc2UiLCJ0aGlzVGFwZSIsImluc3RydW1lbnRfc3RhdHVzX2lkIiwiJG5hbWUiLCJmaW5kIiwic2l0ZV9kZXNjcmlwdGlvbiIsIiRpbnZhbGlkIiwiJGludmFsaWR2IiwiZGUiLCJod21fdHlwZV9pZCIsImZkIiwiU0VSVkVSX1VSTCIsIkZJTEVfU1RBTVAiLCJhbGxEcm9wZG93bnMiLCJhZ2VuY3lMaXN0IiwiU2l0ZV9GaWxlcyIsImFsbERlcFR5cGVzIiwidGhpc1NlbnNvciIsIlNlbnNvclNpdGUiLCJzaXRlT1BzIiwiYWxsTWVtYmVycyIsIkRBVEFfRklMRSIsIkZJTEUiLCJTT1VSQ0UiLCJmaWxlVHlwZUxpc3QiLCJkZXBTZW5maWxlSXNVcGxvYWRpbmciLCJhbGxTRmlsZXMiLCJnZXRBbGxTaXRlRmlsZXMiLCJEZXBTZW5zb3JGaWxlcyIsInNmIiwiZGVwU2Vuc0ltYWdlRmlsZXMiLCJoZiIsImZpbGV0eXBlX2lkIiwic2hvd0ZpbGVGb3JtIiwic2hvd05XSVNGaWxlRm9ybSIsIk9Qc1ByZXNlbnQiLCJyZW1vdmVPUExpc3QiLCJzaG93RXZlbnRERCIsImFkbWluQ2hhbmdlZCIsIndoaWNoQnV0dG9uIiwic2VydmVyVVJMIiwibndpc0hlYWRlclRpcCIsIkRFUHZhbCIsIlJFVHZhbCIsInNlbnNvckRhdGFOV0lTIiwiZGVwT3BlbiIsInNGaWxlT3BlbiIsIk5XSVNGaWxlT3BlbiIsImdldERhdGVUaW1lUGFydHMiLCJ0aGVEYXRlIiwiaXNEYXRlIiwiT2JqZWN0IiwicHJvdG90eXBlIiwiY2FsbCIsImRhIiwibWkiLCJkYXRlT3B0aW9ucyIsInN0YXJ0aW5nRGF5Iiwic2hvd1dlZWtzIiwic3RhbXAiLCJnZXRTdGFtcCIsImZpbGVJdGVtRXhpc3RzIiwic2F2ZUZpbGVVcGxvYWQiLCJzRmlsZUlzVXBsb2FkaW5nIiwiZmlsZVBhcnRzIiwiRmlsZUVudGl0eSIsImZpbGVfaWQiLCJhRmlsZSIsInBob3RvX2RpcmVjdGlvbiIsImZpbGVfZGF0ZSIsImh3bV9pZCIsInNvdXJjZV9pZCIsImRhdGFfZmlsZV9pZCIsInBob3RvX2RhdGUiLCJpc19ud2lzIiwiRmlsZSIsIkZpbGUxIiwiRm9ybURhdGEiLCJKU09OIiwic3RyaW5naWZ5IiwidXBsb2FkRmlsZSIsImZyZXNwb25zZSIsInNyYyIsInNldFN0YW1wIiwiaXNQaG90byIsImZpbGVCZWxvbmdzVG8iLCJleGlzdElNR0ZpbGVJbmRleCIsImV4aXN0RmlsZUluZGV4IiwiYWxsU0ZpbGVJbmRleCIsInNldEFsbFNpdGVGaWxlcyIsInNob3dJbWFnZU1vZGFsIiwiaW1hZ2UiLCJpbWFnZUlkIiwic2V0U1JDIiwic2hvd0ZpbGUiLCJmaWxlIiwiZmlsZVR5cGVzIiwiYWdlbmNpZXMiLCJhU291cmNlIiwiZGF0YWZpbGUiLCJnZXRGaWxlSXRlbSIsIkxlbmd0aCIsImZpbGVUeXBlIiwiZnQiLCJmaWxldHlwZSIsImZJIiwibGFzdEluZGV4T2YiLCJmaWxlRXh0IiwibWF0Y2giLCJGVUxMbmFtZSIsInNvdXJjZV9uYW1lIiwiYWdlbmN5TmFtZUZvckNhcCIsImFnZW5jeV9pZCIsImFnZW5jeV9uYW1lIiwiZGYiLCJwcm9jZXNzb3IiLCJwcm9jZXNzb3JfaWQiLCJjb2xsZWN0X2RhdGUiLCJnb29kX3N0YXJ0IiwiZ29vZF9lbmQiLCJkdCIsInVwZGF0ZUFnZW5jeUZvckNhcHRpb24iLCJjcmVhdGVGaWxlIiwiZml4RGF0ZSIsInV0Y1N0YXJ0RGF0ZVRpbWUiLCJ1dGNFbmREYXRlVGltZSIsInNpIiwiZWkiLCJkZlJlc29uc2UiLCJ0aGlzU2Vuc29yU2l0ZSIsInRoZVNvdXJjZSIsInNhdmVGaWxlIiwiZmlsZVJlc3BvbnNlIiwiZGVsZXRlRmlsZSIsIkRlbGV0ZU1vZGFsSW5zdGFuY2UiLCJuYW1lVG9SZW1vdmUiLCJ3aGF0IiwiZmlsZVRvUmVtb3ZlIiwiY2FuY2VsRmlsZSIsInNob3dOV0lTRmlsZSIsImYiLCJzZW5zb3JOV0lTRmlsZXMiLCJOV0lTRmlsZSIsIkZpbGVUeXBlIiwiTldJU0RGIiwibndpc1Byb2Nlc3NvciIsInVzZ3Nfc2lkIiwicG9zdEFwcHJvdmFsRm9yTldJU2ZpbGUiLCJERmlkIiwiYXBwcm92ZU5XSVNERiIsImFwcHJvdmFsUmVzcG9uc2UiLCJhcHByb3ZhbF9pZCIsImNyZWF0ZU5XSVNGaWxlIiwiZGVwTldJU1NlbmZpbGVJc1VwbG9hZGluZyIsIk5kZlJlc3BvbnNlIiwiRnJlc3BvbnNlIiwic2F2ZU5XSVNGaWxlIiwiZGVsZXRlTldJU0ZpbGUiLCJjYW5jZWxOV0lTRmlsZSIsIk9QY2hvc2VuIiwib3BDaG9zZW4iLCJvcEkiLCJtYXAiLCJvIiwiZGVwVGFwZUNvcHkiLCJkZXBTdHVmZkNvcHkiLCJjcmVhdGVPckVkaXQiLCJ0YXBlRG93blRvUmVtb3ZlIiwidEluZCIsIm9wX21lYXN1cmVtZW50c19pZCIsInNob3dDaGFuZ2VFdmVudEREIiwiQ2hhbmdlRXZlbnQiLCJldmVudF9uYW1lIiwiTG9nZ2VkSW5NZW1iZXIiLCJzZW5zb3JPYmplY3RUb1NlbmRCYWNrIiwidXRjRGF0ZVRpbWVTIiwidXRjRGF0ZVRpbWVEIiwiRGkiLCJ1cGRhdGVkU2Vuc29yIiwidXBkYXRlZFNlblN0YXQiLCJkZXBsb3ltZW50VHlwZSIsIm1ldGhvZCIsImhvdXNpbmdUeXBlIiwic2Vuc29yQnJhbmQiLCJzZW5zb3JfYnJhbmRfaWQiLCJicmFuZF9uYW1lIiwic2Vuc29yVHlwZSIsInQiLCJydCIsImlkVG9SZW1vdmUiLCJhdCIsIkRFUHRoaXNUYXBlIiwidGFwZVJlc3BvbnNlIiwiaW5zdHJ1bWVudF9zdGF0dXNlc0hvbGRlciIsImluc3RydW1lbnRfc3RhdHVzIiwiZGVwbG95IiwiU2Vuc29yRm9ybSIsImRlcFNlblN0YXQiLCJwcmV2aW91c1N0YXRlU3RhdHVzIiwiZGVsZXRlUyIsInNlbnNvclRvUmVtb3ZlIiwibCIsImFpIiwidGltZVBhcnRzIiwiRGVwbG95ZXIiLCJnZXRJbnN0U3RhdE9QTWVhc3VyZXMiLCJpbnN0cnVtZW50U3RhdHVzSWQiLCJzZW5zTWVhc3VyZXMiLCJ3aGljaE9QIiwibXlEYXRhIiwid2FubmFFZGl0RGVwIiwiY2FuY2VsRGVwRWRpdCIsImFsbEV2ZW50TGlzdCIsImFsbFZEYXR1bUxpc3QiLCJhbGxTdGF0dXNUeXBlcyIsImFsbEluc3RDb2xsQ29uZCIsImRlcFNlbnNTdGF0dXMiLCJWRGF0dW0iLCJ2IiwiREVQdGFwZURvd25UYWJsZSIsInN0YXR1c1R5cGVMaXN0IiwiY29sbGVjdENvbmRMaXN0IiwiYVJldHJpZXZhbCIsImR0cGFydHMiLCJSZXRyaWV2ZXIiLCJhbSIsImRlcFRpbWVTdGFtcGI0U2VuZCIsInJldHVyblRoaXMiLCJyZXRyaWV2ZVMiLCJkZXBTZW5UUyIsInJldFNlblRTIiwidHJpZ2dlciIsImNyZWF0ZVJldFNlbnMiLCJpbnN0Q29sbGVjdGlvbiIsImluc3RfY29sbGVjdGlvbl9pZCIsImNvbmRpdGlvbiIsImFsbERlcERyb3Bkb3ducyIsImZ1bGxTZW5maWxlSXNVcGxvYWRpbmciLCJzZW5zb3JGaWxlcyIsInNlbnNJbWFnZUZpbGVzIiwiREVQT1BzRm9yVGFwZURvd24iLCJSRVRPUHNGb3JUYXBlRG93biIsIkRlcGxveWVkU2Vuc29yU3RhdCIsIkRFUHJlbW92ZU9QTGlzdCIsIkRFUE9QY2hvc2VuIiwiREVQb3BDaG9zZW4iLCJERVBPUE1lYXN1cmUiLCJERVByZW1vdmVPUE1lYXMiLCJERVBvayIsIkRFUGNhbmNlbCIsIkRFUHRhcGVEb3duVG9SZW1vdmUiLCJERVB0SW5kIiwiREVQcmVzcG9uc2UiLCJERVBzZW5zTWVhc3VyZXMiLCJSZXRyaWV2ZWRTZW5zb3JTdGF0IiwibW9zdFJlY2VudFN0YXR1cyIsInZkYXR1bU5hbWUiLCJSRVRyZW1vdmVPUExpc3QiLCJSRVR0YXBlRG93blRhYmxlIiwiUkVUT1BjaG9zZW4iLCJSRVRvcENob3NlbiIsIlJFVE9QTWVhc3VyZSIsInJldFRhcGVDb3B5IiwicmV0U3R1ZmZDb3B5IiwiUkVUcmVtb3ZlT1BNZWFzIiwiUkVUb2siLCJSRVRjYW5jZWwiLCJSRVR0YXBlRG93blRvUmVtb3ZlIiwiUkVUdEluZCIsIlJFVHJlc3BvbnNlIiwiUkVUc2Vuc01lYXN1cmVzIiwicmV0T3BlbiIsInNlbnNUeXBlIiwic2F2ZURlcGxveWVkIiwiREVQaWRUb1JlbW92ZSIsImFsbFN0YXR1c0hvbGRlciIsIndhbm5hRWRpdFJldCIsInNhdmVSZXRyaWV2ZWQiLCJ1cGRhdGVkUmV0U2Vuc29yIiwic3RhdHNIb2xkZXIiLCJSRVRpZFRvUmVtb3ZlIiwiUkVUdGhpc1RhcGUiLCJjYW5jZWxSZXRFZGl0IiwiQXBwcm92YWxJbmZvIiwiZ2V0REZBcHByb3ZhbCIsImFwcHJvdmFsRGF0ZSIsImFwcHJvdmFsX2RhdGUiLCJNZW1iZXIiLCJhbWVtIiwiYXBwcm92ZURGIiwidGhpc0RGIiwiYXBwcm92ZU1vZGFsIiwiYXBwcm92ZUl0IiwidW5BcHByb3ZlREYiLCJ1bmFwcHJvdmVNb2RhbCIsInVuQXBwcm92ZUl0IiwiTmRmUmVzb25zZSIsIkluc3RydW1lbnRfU2VydmljZSIsInRoaXNTaXRlU2Vuc29ycyIsImFsbEFnZW5jaWVzIiwiYWxsRmlsZVR5cGVzIiwiREVQTE9ZTUVOVF9UWVBFIiwiU1RBVFVTX1RZUEUiLCJJTlNUX0NPTExfQ09ORElUSU9OIiwic2Vuc29yQ291bnQiLCJ0b3RhbCIsImRlcGxveVR5cGVMaXN0IiwidGVtcERlcFR5cGVJRCIsInNlbnNEZXBUeXBlcyIsInNob3dQcm9wb3NlZCIsIlNpdGVTZW5zb3JzIiwic2V0QWxsU2l0ZVNlbnNvcnMiLCJTZW5zRmlsZVR5cGVzIiwic2Z0Iiwic2hvd0hpZGVQcm9wb3NlZCIsIkFkZFByb3Bvc2VkIiwiVGltZV9TVEFNUCIsInByb3Bvc2VkVG9BZGQiLCJwcm9wU3RhdFRvQWRkIiwiY3JlYXRlZFByb3BTZW5zb3IiLCJkdGwiLCJkZXAiLCJzaG93UmV0cmlldmVNb2RhbCIsInNlbnNvckNsaWNrZWQiLCJpbmRleENsaWNrZWQiLCJhbGxpbmRleCIsImdldFNpdGVPUHMiLCJnZXRBbGwiLCJyZXRyaWV2ZWRTZW5zb3IiLCJpbmRleENsaWNrZWQxIiwic2hvd1Byb3Bvc2VkU2Vuc29yIiwicHJvcG9zZWRTZW5zb3JDbGlja2VkIiwicHJvcEluZGV4IiwicHJvcE1vZGFsSW5zdGFuY2UiLCJwcm9wb3NlZFNlbnNvciIsInRoaXNQcm9wb3NlZFNlbnNvciIsImRlbGV0ZVByb3Bvc2VkIiwic2hvd1NlbnNvck1vZGFsIiwicGFzc0FsbExpc3RzIiwic2hvd0Z1bGxTZW5zb3JNb2RhbCIsImRlcGxveWVkU3R1ZmYiLCJBR0VOQ1kiLCJDT05UQUNUX1RZUEUiLCJERVBMT1lNRU5UX1BSSU9SSVRZIiwiRVZFTlRfU1RBVFVTIiwiRVZFTlRfVFlQRSIsIkZJTEVfVFlQRSIsIkhPUklaT05UQUxfQ09MTF9NRVRIT0RTIiwiSE9SSVpPTlRBTF9EQVRVTSIsIkhPVVNJTkdfVFlQRSIsIkhXTV9RVUFMSVRZIiwiSFdNX1RZUEUiLCJNQVJLRVIiLCJORVRXT1JLX05BTUUiLCJPUF9RVUFMSVRZIiwiT1BfVFlQRSIsIlNFTlNPUl9CUkFORCIsIlNFTlNPUl9UWVBFIiwiTkVUV09SS19UWVBFIiwiVkVSVElDQUxfQ09MTF9NRVRIT0QiLCJWRVJUSUNBTF9EQVRVTSIsImFsbENvbnRhY3RUeXBlcyIsImFsbEV2ZW50U3RhdHMiLCJhbGxFdmVudFR5cGVzIiwiYWxsSG91c2VUeXBlcyIsImFsbEhXTXF1YWxpdGllcyIsImFsbEhXTXR5cGVzIiwiYWxsSW5zdENvbGxlY3RDb25kaXRpb25zIiwiYWxsT2JqUHRRdWFsaXRpZXMiLCJhbGxPYmpQdFR5cGVzIiwiYWxsRGVwbG95bWVudFR5cGVzIiwiYWxsVmVydGljYWxDb2xsTWV0aG9kcyIsImFsbFZlcnRpY2FsRGF0dW1zIiwiYWNjb3VudFJvbGUiLCJsb29rdXBGb3JtIiwic2hvd0FkZEFnRm9ybSIsImFkZEFnQnV0dG9uU2hvd2luZyIsIm5ld0FnIiwic2hvd0FkZEFnQ2xpY2tlZCIsIk5ldmVyTWluZEFnIiwiQWRkQWdlbmN5Iiwic2F2ZUFnZW5jeSIsInJldHVyIiwiZGVsZXRlQWdlbmN5IiwiYWciLCJrZXlUb1JlbW92ZSIsInNob3dTdGF0ZUFiYnJldiIsImNvbnRhY3RUeXBlTGlzdCIsInNob3dBZGRDVEZvcm0iLCJhZGRDVEJ1dHRvblNob3dpbmciLCJuZXdDVCIsInNob3dBZGRDVENsaWNrZWQiLCJOZXZlck1pbmRDVCIsIkFkZENvbnRhY3RUeXBlIiwic2F2ZUNvbnRhY3RUeXBlIiwiZGVsZXRlQ29udGFjdFR5cGUiLCJjdCIsImNvbnRhY3RfdHlwZV9pZCIsImRlcGxveVByaW9yaXR5TGlzdCIsInNob3dBZGREUEZvcm0iLCJhZGREUEJ1dHRvblNob3dpbmciLCJuZXdEUCIsInNob3dBZGREUENsaWNrZWQiLCJOZXZlck1pbmREUCIsIkFkZERlcFByaW9yaXR5Iiwic2F2ZURlcFByaW9yaXR5IiwiZGVsZXRlRGVwUHJpb3JpdHkiLCJldmVudFN0YXRMaXN0Iiwic2hvd0FkZEVTRm9ybSIsImFkZEVTQnV0dG9uU2hvd2luZyIsIm5ld0VTIiwic2hvd0FkZEVTQ2xpY2tlZCIsIk5ldmVyTWluZEVTIiwiQWRkRXZlbnRTdGF0Iiwic2F2ZUV2ZW50U3RhdCIsImRlbGV0ZUV2ZW50U3RhdCIsImVzIiwiZXZlbnRfc3RhdHVzX2lkIiwiZXZlbnRUeXBlTGlzdCIsInNob3dBZGRFVEZvcm0iLCJhZGRFVEJ1dHRvblNob3dpbmciLCJuZXdFVCIsInNob3dBZGRFVENsaWNrZWQiLCJOZXZlck1pbmRFVCIsIkFkZEV2ZW50VHlwZSIsInNhdmVFdmVudFR5cGUiLCJkZWxldGVFdmVudFR5cGUiLCJldCIsImV2ZW50X3R5cGVfaWQiLCJzaG93QWRkRlRGb3JtIiwiYWRkRlRCdXR0b25TaG93aW5nIiwibmV3RlQiLCJzaG93QWRkRlRDbGlja2VkIiwiTmV2ZXJNaW5kRlQiLCJBZGRGaWxlVHlwZSIsInNhdmVGaWxlVHlwZSIsImRlbGV0ZUZpbGVUeXBlIiwiaG9yQ29sTWV0aExpc3QiLCJzaG93QWRkSENNRm9ybSIsImFkZEhDTUJ1dHRvblNob3dpbmciLCJuZXdIQ00iLCJzaG93QWRkSENNQ2xpY2tlZCIsIk5ldmVyTWluZEhDTSIsIkFkZEhvckNvbGxNZXRob2QiLCJzYXZlSG9yQ29sbE1ldGhvZCIsImRlbGV0ZUhvckNvbGxNZXRob2QiLCJoY20iLCJob3JEYXRMaXN0Iiwic2hvd0FkZEhERm9ybSIsImFkZEhEQnV0dG9uU2hvd2luZyIsIm5ld0hEIiwic2hvd0FkZEhEQ2xpY2tlZCIsIk5ldmVyTWluZEhEIiwiQWRkSG9yRGF0dW0iLCJzYXZlSG9yRGF0dW0iLCJkZWxldGVIb3JEYXR1bSIsInNob3dBZGRIVEZvcm0iLCJhZGRIVEJ1dHRvblNob3dpbmciLCJuZXdIVCIsInNob3dBZGRIVENsaWNrZWQiLCJOZXZlck1pbmRIVCIsIkFkZEhvdXNlVHlwZSIsInNhdmVIb3VzZVR5cGUiLCJkZWxldGVIb3VzZVR5cGUiLCJzaG93QWRkSFdNUUZvcm0iLCJhZGRIV01RQnV0dG9uU2hvd2luZyIsIm5ld0hXTVEiLCJzaG93QWRkSFdNUUNsaWNrZWQiLCJOZXZlck1pbmRIV01RIiwiQWRkSHdtUXVhbGl0eSIsInNhdmVId21RdWFsaXR5IiwiZGVsZXRlSHdtUXVhbGl0eSIsImh3bXEiLCJzaG93QWRkSFdNVEZvcm0iLCJhZGRIV01UQnV0dG9uU2hvd2luZyIsIm5ld0hXTVQiLCJzaG93QWRkSFdNVENsaWNrZWQiLCJOZXZlck1pbmRIV01UIiwiQWRkSHdtVHlwZSIsInNhdmVId21UeXBlIiwiZGVsZXRlSHdtVHlwZSIsImh3bXQiLCJpbnN0Q29sQ29uZExpc3QiLCJzaG93QWRkSUNDRm9ybSIsImFkZElDQ0J1dHRvblNob3dpbmciLCJuZXdJQ0MiLCJzaG93QWRkSUNDQ2xpY2tlZCIsIk5ldmVyTWluZElDQyIsIkFkZEluc3RDb2xDb25kIiwic2F2ZUluc3RDb2xDb25kIiwiZGVsZXRlSW5zdENvbENvbmQiLCJpY2MiLCJtYXJrTGlzdCIsInNob3dBZGRNRm9ybSIsImFkZE1CdXR0b25TaG93aW5nIiwibmV3TSIsInNob3dBZGRNQ2xpY2tlZCIsIk5ldmVyTWluZE0iLCJBZGRNYXJrZXIiLCJzYXZlTWFya2VyIiwiZGVsZXRlTWFya2VyIiwibWFya2VyX2lkIiwibmV0TmFtZUxpc3QiLCJzaG93QWRkTk5Gb3JtIiwiYWRkTk5CdXR0b25TaG93aW5nIiwibmV3Tk4iLCJzaG93QWRkTk5DbGlja2VkIiwiTmV2ZXJNaW5kTk4iLCJBZGROZXR3b3JrTmFtZSIsInNhdmVOZXR3b3JrTmFtZSIsImRlbGV0ZU5ldHdvcmtOYW1lIiwic2hvd0FkZE9QUUZvcm0iLCJhZGRPUFFCdXR0b25TaG93aW5nIiwibmV3T1BRIiwic2hvd0FkZE9QUUNsaWNrZWQiLCJOZXZlck1pbmRPUFEiLCJBZGRPUFF1YWxpdHkiLCJzYXZlT1BRdWFsaXR5IiwiZGVsZXRlT1BRdWFsaXR5Iiwib3BxIiwic2hvd0FkZE9QVEZvcm0iLCJhZGRPUFRCdXR0b25TaG93aW5nIiwibmV3T1BUIiwic2hvd0FkZE9QVENsaWNrZWQiLCJOZXZlck1pbmRPUFQiLCJBZGRPUFR5cGUiLCJzYXZlT1BUeXBlIiwiZGVsZXRlT1BUeXBlIiwib3B0Iiwib2JqZWN0aXZlX3BvaW50X3R5cGVfaWQiLCJzZW5zQnJhbmRMaXN0Iiwic2hvd0FkZFNCRm9ybSIsImFkZFNCQnV0dG9uU2hvd2luZyIsIm5ld1NCIiwic2hvd0FkZFNCQ2xpY2tlZCIsIk5ldmVyTWluZFNCIiwiQWRkU2Vuc29yQnJhbmQiLCJzYXZlU2Vuc29yQnJhbmQiLCJkZWxldGVTZW5zb3JCcmFuZCIsInNiIiwic2hvd0FkZERURm9ybSIsImFkZERUQnV0dG9uU2hvd2luZyIsIm5ld0RUIiwic2hvd0FkZERUQ2xpY2tlZCIsIk5ldmVyTWluZERUIiwiQWRkRGVwVHlwZSIsInNhdmVEZXBUeXBlIiwiZGVsZXRlRGVwVHlwZSIsInN0YXRUeXBlTGlzdCIsInNob3dBZGRTdGF0VEZvcm0iLCJhZGRTdGF0VEJ1dHRvblNob3dpbmciLCJuZXdTdGF0VCIsInNob3dBZGRTdGF0VENsaWNrZWQiLCJOZXZlck1pbmRTdGF0VCIsIkFkZFN0YXR1c1R5cGUiLCJuZXdTdGF0VFQiLCJzYXZlU3RhdHVzVHlwZSIsImRlbGV0ZVN0YXR1c1R5cGUiLCJzdGF0VCIsInNlbnNUeXBlTGlzdCIsIm5ld0RlcFR5cGVSZWxhdGluZyIsImNvbW1hU2VwRGVwTUVUSE9EUyIsImZvcm1hdHRlZFNlbnNUeXBlTGlzdCIsImdldFNlbnNvckRlcGxveW1lbnRUeXBlcyIsImRlcHMiLCJEZXBUeXBlcyIsIkRlcE1TdHJpbmdzIiwiRGVwTUVUSE9EU3RyaW5ncyIsInNob3dEZXBUeXBlcyIsIlNlblQiLCJyZW1vdmVUaGVzZURlcFR5cGVzIiwiY2hlY2tMaXN0Q2hlY2siLCJvcmlnaW5hbENoZWNrZWQiLCJub3dDaGVja2VkIiwib2MiLCJkZWxldGVEZXAiLCJzaG93QWRkU2VuVEZvcm0iLCJhZGRTZW5UQnV0dG9uU2hvd2luZyIsIm5ld1NlblQiLCJzaG93QWRkU2VuVENsaWNrZWQiLCJOZXZlck1pbmRTZW5UIiwiYWRkRGVwVHlwZVRvTmV3U2VuVCIsIkFkZFNlbnNvclR5cGUiLCJuZXdTZW5zb3IiLCJyZWxhdGVkRGVwcyIsIm5kdCIsImFkZFNlbnNvckRlcGxveW1lbnRUeXBlIiwic2Vuc29yVHlwZUlkIiwiZGVwbG95bWVudFR5cGVJZCIsInJlc3BvbnNlMSIsInNhdmVTZW5zb3JUeXBlIiwiRFRzIiwidGhpc0RUIiwiZXJyb3JSZXNwb25zZTEiLCJyZHQiLCJyZW1vdmVTZW5zb3JEZXBsb3ltZW50VHlwZSIsIkRlcGxveW1lbnRUeXBlSWQiLCJyZXNwb25zZTIiLCJkZWxldGVTZW5zb3JUeXBlIiwic2VuVCIsIlNUIiwibmV0VHlwZUxpc3QiLCJzaG93QWRkTlRGb3JtIiwiYWRkTlRCdXR0b25TaG93aW5nIiwibmV3TlQiLCJzaG93QWRkTlRDbGlja2VkIiwiTmV2ZXJNaW5kTlQiLCJBZGROZXRUeXBlIiwic2F2ZU5ldFR5cGUiLCJkZWxldGVOZXRUeXBlIiwidmVydENvbE1ldGhMaXN0Iiwic2hvd0FkZFZDTUZvcm0iLCJhZGRWQ01CdXR0b25TaG93aW5nIiwibmV3VkNNIiwic2hvd0FkZFZDTUNsaWNrZWQiLCJOZXZlck1pbmRWQ00iLCJBZGRWZXJ0Q29sTWV0aCIsInNhdmVWZXJ0Q29sTWV0aCIsImRlbGV0ZVZlcnRDb2xNZXRoIiwidmNtIiwidmVydERhdExpc3QiLCJzaG93QWRkVkRGb3JtIiwiYWRkVkRCdXR0b25TaG93aW5nIiwibmV3VkQiLCJzaG93QWRkVkRDbGlja2VkIiwiTmV2ZXJNaW5kVkQiLCJBZGRWZXJ0RGF0dW0iLCJzYXZlVmVydERhdHVtIiwiZGVsZXRlVmVydERhdHVtIiwiQ09OVEFDVCIsIlJFUE9SVCIsIiRwYXJlbnQiLCJuZWVkVG9Db21wbGV0ZSIsIm5ld1JlcG9ydCIsInJlcG9ydF9kYXRlIiwieXIiLCJtbyIsIkRlcGxveVN0YWZmIiwiR2VuU3RhZmYiLCJJbmxhbmRTdGFmZiIsIkNvYXN0U3RhZmYiLCJXYXRlclN0YWZmIiwib3BlbkNvbnRhY3RzIiwib3BlbkNvdW50cyIsIm9wZW5QZXJzb25uZWwiLCJyZXBvcnRpbmdfbWV0cmljc19pZCIsImRpc2FibGVkIiwiZ2V0RXZlbnROYW1lIiwidGhpc0V2ZW50IiwiZ2V0UmVwb3J0Q29udGFjdHMiLCJyZXBvcnRJRCIsImdldENvbnRhY3RNb2RlbCIsIlJlcG9ydE1ldHJpYyIsImNvbnRhY3RUeXBlIiwicG9zdFJlcG9ydENvbnRhY3RzIiwiZXF1YWxzIiwiYWRkUmVwb3J0Q29udGFjdCIsInJlcG9ydElkIiwiY29udGFjdFR5cGVJZCIsImVycm9yUmVzcG9uc2UyIiwicmVzcG9uc2UzIiwiZXJyb3JSZXNwb25zZTMiLCJyZXNwb25zZTQiLCJlcnJvclJlc3BvbnNlNCIsInJlc3BvbnNlNSIsImVycm9yUmVzcG9uc2U1IiwicmVtb3ZlSW5jb21wbGV0ZSIsIm1lbWJlckluY29tcGxldGVzIiwiUG9zdFB1dFJlcG9ydEFuZFJlcG9ydENvbnRhY3RzIiwidG9EYXRlU3RyaW5nIiwiY29tcGxldGUiLCJpc0NvbXBsZXRlZCIsImZ1bGxSZXBvcnRGb3JtIiwic3VibWl0IiwiJHNldFByaXN0aW5lIiwiJHZpZXdWYWx1ZSIsInJlcG9ydHMiLCJwb3B1bGF0ZVllc3RUb3RzIiwiZm9ybWF0RGF0ZSIsInNldEhvdXJzIiwidG9JU09TdHJpbmciLCJteURhdGUiLCJ0aGVTdGF0ZSIsImVJRCIsInByZXZpb3VzRGF5IiwieWVzdGVyZGF5UnB0IiwicmVwRGF0ZSIsInllc3RfZmllbGRwZXJzIiwidG9kX2ZpZWxkcGVycyIsInllc3Rfb2ZmaWNlcGVycyIsInRvZF9vZmZpY2VwZXJzIiwiZ2V0RGFpbHlSZXBvcnRUb3RzIiwicmVzcG9uc2U2IiwiZGVwX3JhcGRlcGxfZ2FnZSIsInJlY19yYXBkZXBsX2dhZ2UiLCJsb3N0X3JhcGRlcGxfZ2FnZSIsImRlcF93dHJsZXZfc2Vuc29yIiwicmVjX3d0cmxldl9zZW5zb3IiLCJsb3N0X3d0cmxldl9zZW5zb3IiLCJkZXBfd3Zfc2VucyIsInJlY193dl9zZW5zIiwibG9zdF93dl9zZW5zIiwiZGVwX2Jhcm9tZXRyaWMiLCJyZWNfYmFyb21ldHJpYyIsImxvc3RfYmFyb21ldHJpYyIsImRlcF9tZXRlb3JvbG9naWNhbCIsInJlY19tZXRlb3JvbG9naWNhbCIsImxvc3RfbWV0ZW9yb2xvZ2ljYWwiLCJod21fZmxhZ2dlZCIsImh3bV9jb2xsZWN0ZWQiLCJlcnJvclJlc3BvbnNlNiIsInNhdmVSZXBvcnQiLCJNZW1iZXJMb2dnZWRJbiIsInBvcHVsYXRlRGVwbG95ZXIiLCJnZXRJbmNvbXBsZXRlUmVwb3J0IiwiaXIiLCIkc2V0RGlydHkiLCJyZXBvcnQiLCJzdWJtaXRQZXJzb24iLCJjb250YWN0cyIsIlJlcG9ydFZpZXciLCJSZXBvcnQiLCJzdWJtaXR0ZXIiLCJkZXBsb3lTdGFmZiIsImdlbmVyYWxTdGFmZiIsImlubGFuZFN0YWZmIiwiY29hc3RTdGFmZiIsIndhdGVyU3RhZmYiLCJwcmludCIsImFsbFJlcG9ydHNBZ2FpbiIsInJlcG9ydHNUb0RhdGUiLCJ0b2RheVJwdHMiLCJ5ZXN0ZXJkYXlScHRzIiwicGlja0RhdGVScHRzIiwicGlja0FkYXRlUmVwb3J0cyIsInRvZGF5IiwieWVzdGVyZGF5Iiwic2V0RGF0ZSIsIlRISVNfREFURSIsIlZpZXdSZXBvcnQiLCJtZW1iZXIiLCJtZW0iLCJtZW1iZXJBZ2VuY3kiLCJhZ2VuY3lfYWRkcmVzcyIsImZvcm1hdFJlcG9ydCIsInJlcExpc3QiLCJyZXR1cm5MaXN0IiwicmVwIiwidG9kYXlSZXBvcnRzIiwidG9kYXlyZXAiLCJyZXBvcnREYXRlIiwieWVzdGVyZGF5UmVwb3J0cyIsInllc3RyZXAiLCJnZXRSZXBvcnRzQnlEYXRlIiwiZGF0ZSIsInRoaXNEYXRlUmVwb3J0cyIsInRkYXRlIiwiQ29tcGxldGVUaGlzUmVwb3J0IiwiZ2V0UHJvamVjdEFsZXJ0VGV4dCIsIlByb2plY3RBbGVydFBhcnRzIiwidG90WWVzdEZpZWxkUGVycyIsInRvdFllc3RPZmZpY1BlcnMiLCJtZWFzdXJlQ3RzIiwidG90X2Rpc2NoYXJnZV9tZWFzIiwiZXZlbnRSZXBvcnRzIiwic3RhdGVDb3VudCIsImVyIiwiUHJvakFsZXJ0IiwibWVtYmVyUmVwb3J0cyIsImFsbFJlcG9ydHMiLCJhbGxFdmVudFN0YXR1cyIsInRvU3RhdGUiLCJ0b1BhcmFtcyIsImZyb21TdGF0ZSIsImZyb21QYXJhbXMiLCJmb3JtSXNQb3B1bGF0ZWQiLCJ1cmwiLCIkZGlydHkiLCJsb2ciLCJjb25maXJtIiwiY3VycmVudER0IiwibW0iLCJkZCIsInl5eXkiLCJtZW1iZXJzIiwiZXZlbnRUeXBlcyIsImV2ZW50U3RhdHMiLCJTdGF0ZW1vZGVsIiwiZ2VuU3VtbWFyeSIsImZpbHRlcmVkUmVwb3J0cyIsImdlblJlcENoYW5nZSIsIm5hbWVzIiwiYWJicmV2cyIsInN0YXRlX25hbWUiLCJTdGF0ZU5hbWVzIiwiU3RhdGVBYmJyZXZzIiwiTWV0cmljRGlzcGxheU1vZGVsIiwiZGlzcGxheU1ldHJpY1N1bSIsIkdlblJlcEV2ZW50TW9kZWwiLCJ0b3RhbFJvdyIsIm5vdEFjY3RGb3JFbXBzIiwiY3VtUEZpZWxkIiwieWVzUEZpZWxkIiwidG9kUEZpZWxkIiwidG9tUEZpZWxkIiwiY3VtUE9mZmljZSIsInllc1BPZmZpY2UiLCJ0b2RQT2ZmaWNlIiwidG9tUE9mZmljZSIsInRydWNrIiwiYm9hdCIsIm90aGVyIiwiZ2FnZVZpc2l0cyIsImdhZ2VzRG93biIsImRpc0N0b0RhdGUiLCJkaXNDUGxhbm5lZCIsIkNoZWNrTWVhc1RvRGF0ZSIsIkNoZWNrTWVhc1BsYW5uZWQiLCJpbmRNZWFzIiwicmF0RXh0IiwicGVha3NPZlJlYyIsIlFXR2FnZVZpcyIsImNvbnRRV0dhZ2VWaXMiLCJjb250UVdHYWdlRG93biIsImRpc1FXU2FtcGxlcyIsInNlZFNhbXBsZXMiLCJyZGdQbGFuIiwicmRnRGVwIiwicmRnUmVjIiwicmRnTG9zdCIsIndhdGVyUGxhbiIsIndhdGVyRGVwIiwid2F0ZXJSZWMiLCJ3YXRlckxvc3QiLCJ3YXZlUGxhbiIsIndhdmVEZXAiLCJ3YXZlUmVjIiwid2F2ZUxvc3QiLCJiYXJvUGxhbiIsImJhcm9EZXAiLCJiYXJvUmVjIiwiYmFyb0xvc3QiLCJtZXRQbGFuIiwibWV0RGVwIiwibWV0UmVjIiwibWV0TG9zdCIsImh3bUZsYWciLCJod21Db2wiLCJhYmJyZXZTdHJpbmciLCJ0aGlzRGF0ZSIsInN1bV9kYXRlIiwiZ2V0RmlsdGVyZWRSZXBvcnRzIiwiU3RhdGVzIiwidGhpc1JQTW9kZWwiLCJzd19maWVsZHBlcnNfbm90YWNjdCIsIndxX2ZpZWxkcGVyc19ub3RhY2N0IiwidG13X2ZpZWxkcGVycyIsInRtd19vZmZpY2VwZXJzIiwiZ2FnZV92aXNpdCIsImdhZ2VfZG93biIsInBsYW5fZGlzY2hhcmdlX21lYXMiLCJwbGFuX2luZGlyZWN0X21lYXMiLCJyYXRpbmdfZXh0ZW5zIiwiZ2FnZV9wZWFrX3JlY29yZCIsInF3X2Rpc2NyX3NhbXBsZXMiLCJjb2xsX3NlZHNhbXBsZXMiLCJwbGFuX3JhcGRlcGxfZ2FnZSIsInBsYW5fd3RybGV2X3NlbnNvciIsInBsYW5fd3Zfc2VucyIsInBsYW5fYmFyb21ldHJpYyIsInBsYW5fbWV0ZW9yb2xvZ2ljYWwiLCJFdmVudFR5cGUiLCJFdmVudFN0YXQiLCJDb29yZGluYXRvciIsImV2ZW50X2Nvb3JkaW5hdG9yIiwiQ29vcmRBZ2VuY3kiLCJ0aGlzUmVwb3J0IiwidGhlVG90YWxSb3ciLCJ0b3RhbHMiLCJkaXNwbGF5Q29udGFjdHNTdW0iLCJyZXBvcnRNb2RlbCIsImdldFJlcG9ydHdpdGhDb250YWN0cyIsInJlcElEIiwic3VibWl0dGVyQWdlbmN5Iiwic3ViIiwiZW1haWwiLCJwaG9uZSIsImFnZW5jeW5hbWUiLCJhZ2VuY3lhZGQiLCJkZXBDIiwiUmVwb3J0Q29udGFjdHMiLCJnZW5DIiwiaW5sQyIsImNvYXN0QyIsIndhdGVyQyIsInNldFRpbWVvdXQiLCJzaG93TW9kYWwiLCJ0aGVzZVJlcG9ydHMiLCJSZXBvcnRzIiwiZ2V0Q1NWZmlsZSIsImdldFJlcG9ydHNDU1YiLCJhbmNob3IiLCJqb2luZWRSZXNwb25zZSIsIkJsb2IiLCJmaWxlVVJMIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwiaHJlZiIsImRvd25sb2FkIiwiY2xpY2siLCJQcm9qQWxlcnRQYXJ0cyIsImFsbENvbGxlY3RDb25kaXRpb25zIiwidGhpc1BlYWsiLCJwZWFrU2l0ZSIsImFsbEV2ZW50SFdNcyIsImFsbFNpdGVTZW5zb3JzIiwiYWxsU2l0ZUZpbGVzIiwidGhpc1BlYWtERnMiLCJQRUFLIiwiVkRhdHVtc0xpc3QiLCJtZW1iZXJMaXN0IiwibG9nZ2VkSW5Sb2xlIiwiZGV0ZXJtaW5lREZQcmVzZW50IiwiZXZlbnRTaXRlSFdNcyIsImVzaCIsImV2ZW50U2l0ZVNlbnNvcnMiLCJlc3MiLCJDb2xsZWN0Q29uZGl0aW9uIiwiY2MiLCJpc1JldHJpZXZlZCIsIk5lZWRERiIsImNob3NlbkhXTUxpc3QiLCJyZW1vdmVkQ2hvc2VuSFdNTGlzdCIsImNob3NlbkRGTGlzdCIsInJlbW92ZWRDaG9zZW5ERkxpc3QiLCJod21EZXRhaWwiLCJIV01Cb3giLCJzZW5zb3JEZXRhaWwiLCJTZW5zb3JCb3giLCJkYXRhRmlsZURldGFpbCIsIkRGQm94IiwiYVBlYWsiLCJwZWFrX2RhdGUiLCJ0aW1lIiwiUGVha0NyZWF0b3IiLCJwZWFrX3N1bW1hcnlfaWQiLCJlc3NJIiwiaXNUaGVyZSIsInBkZiIsImZvcm1hdFNlbGVjdGVkSFdNIiwiZmh3bSIsImhlaWdodF9hYm92ZV9nbmQiLCJod21fbG9jYXRpb25kZXNjcmlwdGlvbiIsImh3bV9ub3RlcyIsImFkZEhXTSIsImRhdGFGaWxlIiwiaHdtIiwic2hvd0hXTURldGFpbHMiLCJwcmltYXJ5SFdNIiwic2V0UHJpbUhXTSIsIlNldEl0Iiwic2V0SXQiLCJwZWFrX3N0YWdlIiwiaEluZGV4IiwiY2xvc2VEZXRhaWwiLCJhZGREYXRhRmlsZSIsInNob3dTZW5zb3JEZXRhaWxzIiwic2hvd0RhdGFGaWxlRGV0YWlscyIsImZpbGVQYXRoIiwiZmlsZUlEIiwiZmlsZURlc2MiLCJwcm9jZXNzZWRCeSIsIm53aXNGaWxlIiwicHJpbWFyeURhdGFGaWxlIiwic2V0UHJpbWVERiIsInNlbnMiLCJzSW5kZXgiLCJmSW5kZXgiLCJzYXZlUGVhayIsInVwZGF0ZWRQZWFrIiwiZGF0ZXRpbWUiLCJnZXRIb3VycyIsImdldE1pbnV0ZXMiLCJnZXRTZWNvbmRzIiwicmVtZCIsInJlbWgiLCJhZGRoIiwiYWRkZCIsInVwZGF0ZURGd29QZWFrSUQiLCJkZl9pZCIsInJlcyIsImRlbGV0ZVBlYWsiLCJkZWxldGVQZWFrTWRsIiwiT2siLCJ0aGlzUyIsInRoaXNGIiwidGhpc0giLCJ1cGRhdGVUaGlzSFdNIiwiY3JlYXRlUGVhayIsImlzSHdtQ2hlY2tlZCIsImlzREZDaGVja2VkIiwic2h3bSIsInNzZW4iLCJjcmVhdGVkUGVhayIsInNob3dJbmNvbXBsZXRlREZJbmZvIiwic2hvd0luY29tcGxldGVIV01JbmZvIiwic2hvd1JldHJpZXZlSW5mbyIsInRoaXNTaXRlUGVha3MiLCJwZWFrQ291bnQiLCJTaXRlUGVha3MiLCJzaG93UGVha01vZGFsIiwicGVha0NsaWNrZWQiLCJnZXRQZWFrU3VtbWFyeURGcyIsImdldEZpbHRlcmVkSFdNcyIsIkV2ZW50U3RhdHVzIiwiZ2V0U2l0ZVNlbnNvcnMiLCJ0aGlzT1AiLCJ0aGlzT1BDb250cm9scyIsIm9wU2l0ZSIsIk9QdmFsIiwiZmlsZUlzVXBsb2FkaW5nIiwiZGwiLCJkbE9wZW4iLCJkbEZpbGVPcGVuIiwiT1BUeXBlTGlzdCIsIkhETGlzdCIsIkhDb2xsZWN0TWV0aG9kTGlzdCIsIlZEYXR1bUxpc3QiLCJWQ29sbGVjdE1ldGhvZExpc3QiLCJPUFF1YWxpdHlMaXN0IiwiSFdNZmlsZUlzVXBsb2FkaW5nIiwiT1AiLCJ0aGlzT1BzaXRlIiwiT1BGaWxlcyIsIm9wSW1hZ2VGaWxlcyIsIm9wZiIsIm9wTW9kYWxIZWFkZXIiLCJjcmVhdGVPUmVkaXRPUCIsIm9wVHlwZSIsIm9wX3R5cGUiLCJxdWFsaXR5IiwicSIsImhkYXR1bSIsImhDb2xsZWN0TWV0aG9kIiwidkRhdHVtIiwidkNvbGxlY3RNZXRob2QiLCJ2YyIsInZjb2xsZWN0X21ldGhvZCIsImFkZGVkSWRlbnRpZmllcnNDb3B5Iiwib3BDb3B5IiwiY3JlYXRlX2xhdERNUyIsImNyZWF0ZV9sYWRETVNhcnJheSIsImNyZWF0ZV9sb25nRE1TIiwiY3JlYXRlX2xvbmdETVNhcnJheSIsIk9QRm9ybSIsInRoaXNPbmUiLCJjaSIsImV4aXN0SW5kZXgiLCJkZUluZGV4IiwicmkiLCJkZWxldGVPUCIsImdldERhdHVtTG9jYXRpb25PUE1lYXN1cmVzIiwib2JqZWN0aXZlUG9pbnRJZCIsIm9wVG9SZW1vdmUiLCJ3YW5uYUVkaXRPUCIsImNhbmNlbE9QRWRpdCIsInRoaXNTaXRlT1BzIiwib3BDb3VudCIsIlNpdGVPYmplY3RpdmVQb2ludHMiLCJzaG93T1BNb2RhbCIsIk9QY2xpY2tlZCIsIm9wRmlsZVR5cGVzIiwib2Z0IiwiZ2V0T1BDb250cm9scyIsImlDbGlja2VkIiwicm9sZUxpc3QiLCJ0aGlzTWVtYmVyIiwiYU1lbWJlciIsIm1hdGNoaW5nVXNlcnMiLCJ1c2VybmFtZVRvb2x0aXAiLCJwYXNzIiwibmV3UCIsImNvbmZpcm1QIiwibmV3UGFzcyIsImxvZ2dlZEluVXNlciIsIk5hbWUiLCJJRCIsIlJvbGUiLCJyb2xlX2lkIiwicm9sZV9uYW1lIiwiY2hhbmdlUGFzcyIsImNoYW5nZU15UGFzc0J0biIsIkRvbnRDaGFuZ2VQYXNzIiwicGFzc3dvcmQiLCJidG9hIiwiY3JlYXRlZE1lbWJlciIsInJvIiwiQWdlbmN5IiwidXBkYXRlZE1lbWJlciIsImZvcm1hdHRlZE1lbWJlciIsImVuYyIsInVzZXJuYW1lIiwiY29uY2F0IiwiZXhwaXJlRGF0ZSIsImFkZEhvdXJzIiwicHV0IiwiZXhwaXJlcyIsInVzZXJzTkFNRSIsIkRlbGV0ZU1lbWJlciIsIm1lbVRvUmVtb3ZlIiwiZGVsZXRlTWVtYmVyIiwiJHN0YXRlUGFyYW1zIiwiYWxsUm9sZXMiLCJkZWxNZW0iLCJTYXZlT25CbHVyIiwiQ2hhbmdlUGFzc3dvcmQiLCJjaGFuZ2VQVyIsInJvbGVOYW1lIiwiYWRkTWVtYmVyIiwibm0iLCJ1c2VyUHJvZmlsZUlkIiwic2hvd01lbWJlck1vZGFsIiwibWVtYmVyQ2xpY2tlZCIsImVhY2hNIiwibGVhZmxldEJvdW5kc0hlbHBlcnMiLCJzcGlubmVyU2VydmljZSIsInNpdGVQYXJ0cyIsImhpZGUiLCJnb1RvU2l0ZURhc2hib2FyZCIsImFsbFNlbnNEZXBzIiwiUHJvcG9zZWRTZW5zb3JzNFNpdGUiLCJnZXRQcm9wb3NlZFNlbnNvcnMiLCJzUmVzcG9uc2UiLCJzcyIsImNhbmNlbFByb3Bvc2luZyIsInNpdGVQZWFrcyIsImFsbFNpdGVQZWFrcyIsInNob3dQZWFrcyIsIkVWRU5UIiwiTWFwX0ZpbHRlciIsInN1cnZleU9wdGlvbnMiLCJldmVudFNpdGVzT25seSIsInNob3ciLCJzZXRGaWx0ZXJlZFNpdGVzIiwic3AiLCJvcHRpb25zIiwicG9zaXRpb25DbGFzcyIsIndhcm5pbmciLCJzaXRlc1Byb21pc2UiLCJnZXRFdmVudFNpdGVzIiwiTWFwX1NpdGUiLCJmaWx0ZXJlZFNpdGVzQXJyYXkiLCJzZWxlY3RlZE1hcmtlck51bSIsInNob3dFdmVudFNpdGVzIiwic3RuR3JheSIsIm5ld1NpdGUiLCJud2lzIiwiTCIsImRpdkljb24iLCJhY3Rpb24iLCJpY29uVXJsIiwicG9wdXBBbmNob3IiLCJsb3dfdGhyZXNob2xkIiwibWFqb3IiLCJtaW5vciIsIm1vZGVyYXRlIiwibm9fZmxvb2RpbmciLCJub3RfZGVmaW5lZCIsIm9ic19ub3RfY3VycmVudCIsIm91dF9vZl9zZXJ2aWNlIiwic2l0ZXNBcnJheSIsInNpdGVzIiwiZ2V0RGlyZWN0aXZlQ29udHJvbHMiLCJjb250cm9scyIsInRhYmxlIiwiTExCb3VuZHMiLCJMYXRMbmdCb3VuZHMiLCJib3VuZHMiLCJjcmVhdGVCb3VuZHNGcm9tQXJyYXkiLCJfbm9ydGhFYXN0IiwiX3NvdXRoV2VzdCIsImxhYmVsIiwic2l0ZUlEIiwic2V0TWFwU2l0ZVBhcnRzIiwicGFyc2VJbnQiLCJtb2RlbE5hbWUiLCJub0hpZGUiLCJ0aW1lT3V0IiwiY2xvc2VCdXR0b24iLCJjcmVhdGVTaXRlTW9kZUFjdGl2ZSIsInJlbW92ZVVzZXJDcmVhdGVkU2l0ZSIsImxlYWZFdmVudCIsImxlYWZsZXRFdmVudCIsInVzZXJDcmVhdGVkU2l0ZSIsImxhdGxuZyIsImNyZWF0ZWRTaXRlSW5kZXgiLCJvYmoiLCJjcmVhdGVTaXRlQnV0dG9uVGV4dCIsIm1hcFN0eWxlIiwiY3Vyc29yIiwiY3JlYXRlU2l0ZUZyb21NYXAiLCJnZXRNYXAiLCJnZW9TZWFyY2hDb250cm9sIiwiQ29udHJvbCIsIkdlb1NlYXJjaCIsInByb3ZpZGVyIiwiUHJvdmlkZXIiLCJFc3JpIiwicG9zaXRpb24iLCJ6b29tTGV2ZWwiLCJhZGRUbyIsIm1hcmtlcnNXYXRjaE9wdGlvbnMiLCJkb1dhdGNoIiwiaXNEZWVwIiwiaW5kaXZpZHVhbCIsImdyYXkiLCJzdHJlZXRzIiwibmF0aW9uYWwiLCJvY2VhbnMiLCJkYXJrZ3JheSIsImltYWdlcnkiLCJzaGFkZWRyZWxpZWYiLCJ0ZXJyYWluIiwic3RuU2l0ZXNBbGwiLCJsYXllclBhcmFtcyIsInNob3dPblNlbGVjdG9yIiwibGF5ZXJPcHRpb25zIiwicG9pbnRUb0xheWVyIiwiZ2VvanNvbiIsIm1hcmtlciIsIm9uRWFjaEZlYXR1cmUiLCJmZWF0dXJlIiwiYmluZFBvcHVwIiwicHJvcGVydGllcyIsIlBvcHVwSW5mbyIsImFocHMiLCJvcGFjaXR5IiwiZ3JhcGhVUkwiLCJnYXVnZWxpZCIsInRvTG93ZXJDYXNlIiwicmFkYXIiLCJ3YXRjaFdhcm4iLCJsbXdhIiwiZmxvb2RCb3VuZHMiLCJmbG9vZFpvbmVzIiwiJGRvY3VtZW50IiwiaXNBdXRoIiwiZG9jdW1lbnRNb2RlIiwidXNlcnNOYW1lIiwidXNlcklEIiwiTG9nSW5PdXRDb250cm9sbGVyIiwiTG9naW4iLCJrZXlwcmVzcyIsIiRwYXNzd29yZCIsInRvb2x0aXBWaXNpYmxlIiwiaXMiLCJTdHJpbmciLCJmcm9tQ2hhckNvZGUiLCJ0b1VwcGVyQ2FzZSIsInNoaWZ0S2V5IiwidG9vbHRpcCIsImJsdXIiLCJ1cCIsImxvZ2luIiwidXNlciIsInJldHVyblRvU3RhdGUiLCJyZXR1cm5Ub1N0YXRlUGFyYW1zIiwibG9nb3V0IiwicmVtb3ZlIiwiYXBwcm92YWxTZWFyY2giLCJxaHdtRm9ybSIsIk1FTUJFUl9JRCIsIkRBVEVfRVNUQUJMSVNIRUQiLCJIV01fRU5WSVJPTk1FTlQiLCJCQU5LIiwiRkxBR19EQVRFIiwiU1RJTExXQVRFUiIsIk9CSkVDVElWRV9QT0lOVF9JRCIsIklERU5USUZJRVIiLCJJREVOVElGSUVSX1RZUEUiLCJMQVRJVFVERV9ERCIsIkxPTkdJVFVERV9ERCIsIkFERFJFU1MiLCJDSVRZIiwiWklQIiwiZ2VvY29kZXIiLCJnb29nbGUiLCJtYXBzIiwiR2VvY29kZXIiLCJMYXRMbmciLCJnZW9jb2RlIiwibGF0TG5nIiwicmVzdWx0cyIsIkdlb2NvZGVyU3RhdHVzIiwiT0siLCJhZGRyZXNzX2NvbXBvbmVudHMiLCJjb21wb25lbnRzIiwiayIsInYxIiwidHlwZXMiLCJrMiIsInYyIiwibG9uZ19uYW1lIiwic3RyZWV0X251bWJlciIsInJvdXRlIiwibG9jYWxpdHkiLCJTVEFURV9OQU1FIiwiYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8xIiwiU1RBVEVfQUJCUkVWIiwiU1RBVEVfSUQiLCJDT1VOVFkiLCJhZG1pbmlzdHJhdGl2ZV9hcmVhX2xldmVsXzIiLCJwb3N0YWxfY29kZSIsIlVOUVVBTlRJRklFRCIsIlVOQ0VSVEFJTlRZIiwiREVTQ1JJUFRJT04iLCJFTEVWX0ZUIiwiT1BfSVNfREVTVFJPWUVEIiwiT1BfTk9URVMiLCJTSVRFX0lEIiwiVkRBVFVNX0lEIiwiSERBVFVNX0lEIiwiSENPTExFQ1RfTUVUSE9EX0lEIiwiVkNPTExFQ1RfTUVUSE9EX0lEIiwiT1BfVFlQRV9JRCIsIkRBVEVfUkVDT1ZFUkVEIiwiT1BfUVVBTElUWV9JRCIsInF1aWNrSFdNIiwiV0FURVJCT0RZIiwiRkxBR19URUFNX0lEIiwiRVZFTlRfSUQiLCJjcmVhdGVPUENvbnRyb2xJRCIsIlNVUlZFWV9EQVRFIiwiU1VSVkVZX1RFQU1fSUQiLCJTSVRFX0RFU0NSSVBUSU9OIiwiSFdNX1RZUEVfSUQiLCJIV01fUVVBTElUWV9JRCIsInRoaXNIV00iLCJod21BcHByb3ZhbCIsImh3bVNpdGUiLCJIV012YWwiLCJoT3BlbiIsImhGaWxlT3BlbiIsIkhEYXR1bXNMaXN0IiwiaENvbGxNTGlzdCIsInZDb2xsTUxpc3QiLCJIV01GaWxlcyIsImh3bUltYWdlRmlsZXMiLCJGbGFnTWVtYmVyIiwidGhpc0hXTXNpdGUiLCJjcmVhdGVPUmVkaXRIV00iLCJod21Db3B5IiwiaHdtX3R5cGUiLCJUcmFucXVpbCIsIk1hcmtlciIsIm1hcmtlcjEiLCJRdWFsaXR5IiwiaHEiLCJod21fcXVhbGl0eSIsImdldEhXTUFwcHJvdmFsIiwiaHdtTW9kYWxIZWFkZXIiLCJTdXJ2ZXlNZW1iZXIiLCJjcmVhdGVkSFdNIiwiYXBwcm92ZUhXTSIsInVuQXBwcm92ZUhXTSIsImZvcm1hdEhXTSIsImZvcm1hdHRlZEhXTSIsImNsZWFuSFdNIiwiZGVsZXRlSFdNIiwiaHdtVG9SZW1vdmUiLCJ3YW5uYUVkaXRIV00iLCJjYW5jZWxIV01FZGl0IiwidGhpc1NpdGVIV01zIiwiSFdNX1NlcnZpY2UiLCJod21Db3VudCIsIlNpdGVIV01zIiwic2V0QWxsU2l0ZUhXTXMiLCJzaG93SFdNTW9kYWwiLCJIV01jbGlja2VkIiwiaHdtRmlsZVR5cGVzIiwiaGZ0IiwiSERhdHVtcyIsIkhDb2xsZWN0TWV0aHMiLCJPUFR5cGVzIiwiVkRhdHVtcyIsIkhUeXBlcyIsIkhXTVF1YWxzIiwiZHluYW1pYyIsIm1heCIsImhvdEluc3RhbmNlIiwiY29sdW1uV2lkdGhzIiwiQ2hhbmdlcyIsImludmFsaWRzIiwiaERhdHVtTGlzdCIsImhEYXR1bUFycmF5IiwiaENvbGxlY3RMaXN0IiwiaGNvbGxlY3RBcnJheSIsInN0YXRlQXJyYXkiLCJjb3VudHlMaXN0IiwiY291bnR5QXJyYXkiLCJvcFR5cGVBcnJheSIsInZEYXR1bUxpc3QiLCJ2RGF0dW1BcnJheSIsImh3bVR5cGVBcnJheSIsImh3bUVudmlyTGlzdCIsImh3bVF1YWxpdHlMaXN0IiwiaHdtUXVhbGl0eUFycmF5IiwiaGlzdG9yaWNIV01zIiwiY291bnR5X25hbWUiLCJnZXRTdGF0ZUNvIiwicm93VmFsdWVzIiwiZ2V0RGF0YUF0Um93Iiwic2V0RGF0YUF0Q2VsbCIsInNldENlbGxNZXRhIiwiVXBkYXRlQ291bnRpZXMiLCJ0aGVDaGFuZ2UiLCJyZXF1aXJlZE1vZGFsIiwibGF0VmFsaWRhdG9yIiwiY2FsbGJhY2siLCJpc05hTiIsImxvbmdWYWxpZGF0b3IiLCJjb2xvclJlbmRlcmVyIiwiaW5zdGFuY2UiLCJ0ZCIsInJvdyIsImNvbCIsInByb3AiLCJjZWxsUHJvcGVydGllcyIsIiRidXR0b24iLCJodG1sIiwiZW1wdHkiLCJyZXF1aXJlZFZhbGlkYXRvciIsInJlc2V0IiwicmVzZXRNb2RhbCIsInRhYmxlU2V0dGluZ3MiLCJjb2xIZWFkZXJzIiwicm93SGVhZGVycyIsImNvbnRleHRNZW51IiwibWluU3BhcmVSb3dzIiwiYWZ0ZXJJbml0IiwibWFudWFsQ29sdW1uUmVzaXplIiwibWFudWFsUm93UmVzaXplIiwid29yZFdyYXAiLCJ2aWV3cG9ydENvbHVtblJlbmRlcmluZ09mZnNldE51bWJlciIsImNvbFdpZHRocyIsImNlbGxzIiwiY2VsbHByb3BzIiwicmVuZGVyZXIiLCJvbkJlZm9yZUNoYW5nZSIsIm9uQWZ0ZXJDaGFuZ2UiLCJjaGFuZ2UiLCJzb3VyY2UiLCJhZnRlck9uQ2VsbE1vdXNlRG93biIsImNvb3JkcyIsIm9uQWZ0ZXJWYWxpZGF0ZSIsImlzVmFsaWQiLCJzb3VjZSIsInZJbmRleCIsInZJIiwicm93SGVpZ2h0cyIsImhlbHBJbmZvIiwiZmFjdCIsInRoaXNGaWxlIiwiZmlsZUV4aXN0cyIsImZpbGVTb3VyY2UiLCJmaWxlU2l0ZSIsIkZJTEV2YWwiLCJ0aGVTaXRlIiwiY3JlYXRlT1JlZGl0RmlsZSIsImZpbGVDb3B5Iiwic291cmNlQ29weSIsIndob3NlRmlsZSIsImFnZW5jeU5hbWUiLCJhUHJvY2Vzc29yIiwiY2hhbmdlZEZpbGVUeXBlIiwiZGZDb3B5Iiwid2hhdGtpbmQiLCJkZlJlc3BvbnNlIiwid2FubmFFZGl0RklMRSIsImNhbmNlbEZJTEVFZGl0IiwidGhpc1NpdGVGaWxlcyIsInNpdGVIV01zIiwic2l0ZVNlbnNvcnMiLCJ3aGF0S2luZGFGaWxlIiwidGhpc0lucyIsInR5cGVOYW1lIiwic2VyaWFsX251bWJlciIsIlNpdGVGaWxlcyIsInNpdGVJbWFnZUZpbGVzIiwiZXh0SSIsImV4dFN0cmluZyIsInNpdGVmaWxlcyIsImdldEFsbFNpdGVIV01zIiwiZ2V0QWxsU2l0ZVNlbnNvcnMiLCJod21GaWxlcyIsInNmaWxlcyIsInNlbnNGaWxlcyIsInNmaSIsInNob3dGaWxlTW9kYWwiLCJGaWxlQ2xpY2tlZCIsIlNpbmRleENsaWNrZWQiLCJzaXRlRmlsZVR5cGVzIiwic2Vuc29yRmlsZVR5cGVzIiwiY3JlYXRlZEZpbGUiLCJFdmVudExpc3QiLCJFdmVudFR5cGVMaXN0IiwiY2hvc2VuRXYiLCJFdmVudENob3NlbiIsImZpbHRlckV2ZW50cyIsIkRBVEUiLCJnZXRGaWx0ZXJlZEV2ZW50cyIsIlR5cGUiLCJzZXRFdmVudCIsImV2ZW50TmFtZSIsImNsZWFyRXZlbnQiLCJvcGVuRXZlbnRNb2RhbCIsImV2ZW50U3RhdHVzTGlzdCIsImFkbWluTGlzdCIsImFuRXZlbnQiLCJldmVudFN0YXR1c2VzIiwiYWRtaW5NZW1iZXJzIiwiZXZlbnRfc3RhcnRfZGF0ZSIsImV2ZW50X2VuZF9kYXRlIiwiY29tcGFyZURhdGVzIiwiZWQiLCJjcmVhdGVkRXZlbnQiLCJTdGF0dXMiLCJjb29yZCIsIlN0YXJ0RGF0ZSIsIkVuZERhdGUiLCJDb29yZCIsInVwZGF0ZWRFdmVudCIsIkRlbGV0ZUV2ZW50IiwiZXYiLCJldmVudFRvUmVtb3ZlIiwiYWxsQ29vcmRNZW1iZXJzIiwiaXNBZG1pbiIsImV2ZW50Q29vcmRMaXN0IiwiRSIsInNob3dFdmVudE1vZGFsIiwiZXZlbnRDbGlja2VkIiwiaW5zdHJ1bWVudExpc3QiLCJhbGxJbnN0cnVtZW50cyIsIkNob3NlbkV2ZW50IiwiQ2hvc2VuU3RhdGUiLCJDaG9zZW5NZW1iZXIiLCJ1bkFwcHJvdmVkSFdNcyIsInNob3dIV01ib3giLCJ1bkFwcHJvdmVkREZzIiwic2hvd0RGYm94IiwiZXZlbnRJRCIsInN0YXRlSUQiLCJtZW1iZXJJRCIsImdldFVuYXBwcm92ZWRIV01zIiwiSXNBcHByb3ZlZCIsImdldFVuYXBwcm92ZWRERnMiLCJQcm9jZXNzb3IiLCJERnMiLCJ0aGlzZGZJbnN0IiwiZm9ybWF0dGVkREYiLCJTaXRlSWQiLCJzZW5UeXBlIiwiZGVwVHlwZSIsIkluc3RySUQiLCJTaXRlTm8iLCJzZWFyY2giLCJtSUQiLCJzcmVzcG9uc2UiLCJTVE5SZXNvdXJjZSIsInJvb3RVUkwiLCJmYWN0b3J5IiwiJHJlc291cmNlIiwicGFyYW1zIiwiaXNBcnJheSIsImNhY2hlIiwiZGVsZXRlIiwiZ2V0RGVwU2Vuc1R5cGUiLCJDb250ZW50LVR5cGUiLCJ0cmFuc2Zvcm1SZXF1ZXN0IiwiaWRlbnRpdHkiLCJnZXRUaW1lIiwiJGJyb2FkY2FzdCIsImFsbFNpdGVIV01zIiwic2giLCJnZXRzdGF0dXNJbnN0cnVtZW50cyIsImdldEZ1bGxJbnN0cnVtZW50IiwiZ2V0SW5zdHJ1bWVudFN0YXR1cyIsIk1hcFNpdGVQYXJ0cyIsImdldE1hcFNpdGVQYXJ0cyIsImdldFNpdGVQZWFrcyIsInBSZXNwb25zZSIsImZpbHRlcmVkU2l0ZXMiLCJnZXRSb2xlTWVtYmVycyIsImdldEV2ZW50UGVvcGxlIiwiZ2V0T1BGaWxlcyIsImdldFJlcG9ydEJ5RXZTdCIsImdldE1lbWJlclJlcG9ydHMiLCJSZXBvcnRJZCIsIkNvbnRhY3RUeXBlSWQiLCJnZXRTaXRlTmV0d29ya1R5cGVzIiwiTmV0d29ya1R5cGVJZCIsImdldFNpdGVOZXR3b3JrTmFtZXMiLCJOZXR3b3JrTmFtZUlkIiwiZ2V0U2l0ZUhvdXNpbmdzIiwiZ2V0U2l0ZUhXTXMiLCJnZXRTaXRlRmlsZXMiLCJTVE5CdXNpbmVzc1NlcnZpY2VzIiwidW4iLCJwdyIsInVzZXJOYW1lIiwidG9rZW4iLCJTVE5DcmVkcyIsIlNUTlVzZXJuYW1lIiwidXNlcnNSb2xlIiwiZXZJZCIsImV2TmFtZSIsIlNlc3Npb25FdmVudElEIiwiU2Vzc2lvbkV2ZW50TmFtZSIsInRJZCIsInROYW1lIiwiU2Vzc2lvblRlYUlEIiwiU2Vzc2lvblRlYW1OYW1lIiwibG9nZ2VkSW4iLCJpc0xvZ2dlZEluIiwiY2hhbmdlTG9nZ2VkSW4iLCJZZXNPck5vIiwicmV0dXJuVmFsIiwidXNlc05hbWUiLCJuYW1lVG9SbXYiLCJJbnB1dG1hc2siLCJhbGlhcyIsIm9wdHMiLCJub01hc2tzQ2FjaGUiLCJkZWZpbml0aW9ucyIsInVzZXJPcHRpb25zIiwicmVzb2x2ZUFsaWFzIiwiaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaXNTdXBwb3J0ZWQiLCJzZXRBdHRyaWJ1dGUiLCJpc0lucHV0VHlwZVN1cHBvcnRlZCIsImlucHV0VHlwZSIsImFsaWFzU3RyIiwiYWxpYXNEZWZpbml0aW9uIiwiYWxpYXNlcyIsIm1hc2siLCJpbXBvcnRBdHRyaWJ1dGVPcHRpb25zIiwibnB0IiwiaW1wb3J0T3B0aW9uIiwib3B0aW9uIiwib3B0aW9uRGF0YSIsImdldEF0dHJpYnV0ZSIsImRhdGFvcHRpb25zIiwiYXR0ck9wdGlvbnMiLCJSZWdFeHAiLCJwYXJzZSIsImdlbmVyYXRlTWFza1NldCIsIm5vY2FjaGUiLCJhbmFseXNlTWFzayIsIk1hc2tUb2tlbiIsImlzR3JvdXAiLCJpc09wdGlvbmFsIiwiaXNRdWFudGlmaWVyIiwiaXNBbHRlcm5hdG9yIiwibWF0Y2hlcyIsInF1YW50aWZpZXIiLCJpbnNlcnRUZXN0RGVmaW5pdGlvbiIsIm10b2tlbiIsIm1hc2tkZWYiLCJwcmV2TWF0Y2giLCJlc2NhcGVkIiwiaXNGdW5jdGlvbiIsInByZXZhbGlkYXRvcnMiLCJwcmV2YWxpZGF0b3IiLCJwcmV2YWxpZGF0b3JzTCIsImNhcmRpbmFsaXR5IiwidmFsaWRhdG9yIiwiZm4iLCJvcHRpb25hbGl0eSIsIm5ld0Jsb2NrTWFya2VyIiwiZGVmIiwiZGVmaW5pdGlvblN5bWJvbCIsImNhc2luZyIsInZlcmlmeUdyb3VwTWFya2VyIiwibGFzdE1hdGNoIiwiaXNPcGVuR3JvdXAiLCJncm91cG1hcmtlciIsInN0YXJ0IiwiZW5kIiwibWFza0N1cnJlbnRUb2tlbiIsImN1cnJlbnRUb2tlbiIsImV4dHJhQ29uZGl0aW9uIiwiZGVmYXVsdENhc2UiLCJvcGVuZW5pbmdzIiwiY3VycmVudE9wZW5pbmdUb2tlbiIsImFsdGVybmF0b3IiLCJwb3AiLCJtbmR4IiwicmV2ZXJzZVRva2VucyIsIm1hc2tUb2tlbiIsInJldmVyc2VTdGF0aWMiLCJvcHRpb25hbG1hcmtlciIsImludE1hdGNoIiwicXQiLCJvcGVuaW5nVG9rZW4iLCJncm91cFRva2VuIiwidG9rZW5pemVyIiwibWFza1Rva2VucyIsImV4ZWMiLCJjaGFyQXQiLCJlc2NhcGVDaGFyIiwicXVhbnRpZmllcm1hcmtlciIsIm1xIiwibXEwIiwibXExIiwiYWx0ZXJuYXRvcm1hcmtlciIsIm51bWVyaWNJbnB1dCIsImdlbmVyYXRlTWFzayIsIm1ldGFkYXRhIiwiZ3JlZWR5IiwicmVwZWF0IiwicmVwZWF0U3RhcnQiLCJtYXNrc2V0RGVmaW5pdGlvbiIsIm1hc2tzQ2FjaGUiLCJ2YWxpZFBvc2l0aW9ucyIsIl9idWZmZXIiLCJidWZmZXIiLCJ0ZXN0cyIsInByZVByb2Nlc3NNYXNrIiwibXMiLCJrZWVwU3RhdGljIiwiYWx0TWFzayIsIm5keCIsIm1zayIsIm1hc2tTY29wZSIsImFjdGlvbk9iaiIsIm1hc2tzZXQiLCJnZXRNYXNrVGVtcGxhdGUiLCJiYXNlT25JbnB1dCIsIm1pbmltYWxQb3MiLCJpbmNsdWRlSW5wdXQiLCJuZHhJbnRsenIiLCJ0ZXN0UG9zIiwibWFza1RlbXBsYXRlIiwicG9zIiwiZ2V0TWFza1NldCIsInZhbGlkUG9zIiwibG9jYXRvciIsImlucHV0IiwiZ2V0UGxhY2Vob2xkZXIiLCJnZXRUZXN0VGVtcGxhdGUiLCJtYXhMZW5ndGgiLCJyZXNldE1hc2tTZXQiLCJzb2Z0IiwiZ2V0TGFzdFZhbGlkUG9zaXRpb24iLCJjbG9zZXN0VG8iLCJzdHJpY3QiLCJsYXN0VmFsaWRQb3NpdGlvbiIsInZhbGlkcyIsImJlZm9yZSIsImFmdGVyIiwicG9zTmR4IiwicHNOZHgiLCJzZXRWYWxpZFBvc2l0aW9uIiwidmFsaWRUZXN0IiwiZnJvbVNldFZhbGlkIiwiaW5zZXJ0TW9kZSIsInBvc2l0aW9uc0Nsb25lIiwibHZwIiwiaiIsInZwcyIsInBvc01hdGNoIiwicHJldlBvc01hdGNoIiwiZ2V0TWFza0xlbmd0aCIsIm9wdGlvbmFsUXVhbnRpZmllciIsImdldFRlc3RzIiwiYWx0ZXJuYXRpb24iLCJzZWVrTmV4dCIsInBvc2l0aW9uQ2FuTWF0Y2hEZWZpbml0aW9uIiwic3RyaXBWYWxpZFBvc2l0aW9ucyIsIm5vY2hlY2siLCJzdGFydFBvcyIsImNhbkNsZWFyUG9zaXRpb24iLCJpc01hc2siLCJtbCIsInJhZGl4UG9pbnQiLCJ0c3RQcyIsInRlc3RQb3NpdGlvbnMiLCJsdlRlc3QiLCJsdlRlc3RBbHRBcnIiLCJjaGVja0FsdGVybmF0aW9uTWF0Y2giLCJnZXRUZXN0IiwidG5keCIsImNhY2hlYWJsZSIsInJlc29sdmVUZXN0RnJvbVRva2VuIiwibmR4SW5pdGlhbGl6ZXIiLCJsb29wTmR4IiwicXVhbnRpZmllclJlY3Vyc2UiLCJoYW5kbGVNYXRjaCIsImluQXJyYXkiLCJvcHRpb25hbFRva2VuIiwibGF0ZXN0TWF0Y2giLCJpc0ZpcnN0TWF0Y2giLCJpbnNlcnRTdG9wIiwibWFsdE1hdGNoZXMiLCJhbHRlcm5hdGVUb2tlbiIsIm1hbHRlcm5hdGVNYXRjaGVzIiwiY3VycmVudE1hdGNoZXMiLCJsb29wTmR4Q250IiwiYWx0SW5kZXgiLCJjdXJyZW50UG9zIiwibmR4SW5pdGlhbGl6ZXJDbG9uZSIsImFsdEluZGV4QXJyIiwiYW1uZHgiLCJudG5keCIsImxtbnQiLCJuZHgxIiwiYWx0TWF0Y2giLCJuZHgyIiwiYWx0TWF0Y2gyIiwiaXNGaW5pdGUiLCJtYW1hdGNoIiwiYWx0TG9jQXJyIiwiYWxuZHgiLCJxbmR4IiwidG9rZW5Hcm91cCIsInByZXZpb3VzUG9zIiwibXRuZHgiLCJnZXRCdWZmZXJUZW1wbGF0ZSIsImdldEJ1ZmZlciIsIm5vQ2FjaGUiLCJyZWZyZXNoRnJvbUJ1ZmZlciIsInNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIiLCJlbGVtIiwiYWx0QXJyMSIsImFsdEFycjIiLCJhbHRBcnJDIiwiaXNNYXRjaCIsIl9pc1ZhbGlkIiwicnNsdCIsInRzdCIsImxvb3BlbmQiLCJjaHJzIiwiZ2V0QnVmZmVyRWxlbWVudCIsInZhbGlkYXRlZFBvcyIsInBvc3NpYmxlTW9kaWZpZWRCdWZmZXIiLCJzb3J0IiwiaW5zZXJ0IiwicmVmcmVzaCIsImFsdGVybmF0ZSIsImxhc3RBbHQiLCJpc1ZhbGlkUnNsdCIsImFsdFBvcyIsInZhbGlkUHNDbG9uZSIsImxBbHQiLCJkZWNpc2lvblBvcyIsImFsdE5keHMiLCJkZWNpc2lvblRha2VyIiwicG9zc2liaWxpdHlQb3MiLCJwb3NzaWJpbGl0aWVzIiwidmFsaWRJbnB1dHMiLCJzdGF0aWNJbnB1dHNCZWZvcmVQb3MiLCJ0YXJnZXRMdnAiLCJzdGF0aWNJbnB1dHNCZWZvcmVQb3NBbHRlcm5hdGUiLCJ0cmFja2JhY2tBbHRlcm5hdGlvbnMiLCJvcmlnaW5hbFBvcyIsIm5ld1BvcyIsInZwIiwidGFyZ2V0TG9jYXRvciIsInRsbCIsInBzIiwiYmVzdE1hdGNoIiwiZXF1YWxpdHkiLCJwbmR4IiwibWFza1BvcyIsImN1cnJlbnRQb3NWYWxpZCIsIm5Qb3MiLCJzblBvcyIsImNhcmV0IiwiaXNDb21wbGV0ZSIsInBvc3RWYWxpZGF0aW9uIiwicG9zdFZhbGlkUmVzdWx0Iiwic3RhdGljQWx0ZXJuYXRpb25zIiwibWFza0xlbmd0aCIsImxhc3RUZXN0IiwibmV3QmxvY2siLCJtYXNrTCIsIm5vanVtcHMiLCJub2p1bXBzVGhyZXNob2xkIiwic2Vla1ByZXZpb3VzIiwid3JpdGVCdWZmZXIiLCJjYXJldFBvcyIsInRyaWdnZXJJbnB1dEV2ZW50Iiwib25CZWZvcmVXcml0ZSIsIl92YWx1ZVNldCIsInNraXBJbnB1dEV2ZW50IiwicHJldlRlc3QiLCJoYXNBbHRlcm5hdGlvbnMiLCJjaGVja1ZhbCIsIndyaXRlT3V0IiwibnB0dmwiLCJpc1RlbXBsYXRlTWF0Y2giLCJjaGFyQ29kZU5keCIsImluaXRpYWxOZHgiLCJjaGFyQ29kZXMiLCJidWZmZXJUZW1wbGF0ZUFyciIsImF1dG9Vbm1hc2siLCJzdGF0aWNJbnB1dCIsImVzY2FwZVJlZ2V4IiwiY2hhckNvZGUiLCJjaGFyQ29kZUF0IiwibmV4dFRlc3QiLCJrZXlwcmVzc0V2ZW50IiwiYWN0aXZlRWxlbWVudCIsInVubWFza2VkdmFsdWUiLCJ1bVZhbHVlIiwidW5tYXNrZWRWYWx1ZSIsImlzUlRMIiwiYnVmZmVyVmFsdWUiLCJvblVuTWFzayIsImJlZ2luIiwidHJhbnNsYXRlUG9zaXRpb24iLCJiZmZyTGdodCIsInJhbmdlIiwic2V0U2VsZWN0aW9uUmFuZ2UiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImdldFNlbGVjdGlvbiIsImdldFJhbmdlQXQiLCJjb21tb25BbmNlc3RvckNvbnRhaW5lciIsInBhcmVudE5vZGUiLCJzdGFydE9mZnNldCIsImVuZE9mZnNldCIsInNlbGVjdGlvbiIsImNyZWF0ZVJhbmdlIiwiZHVwbGljYXRlIiwibW92ZVN0YXJ0Iiwic2Nyb2xsQ2FsYyIsIm93bmVyRG9jdW1lbnQiLCJkZWZhdWx0VmlldyIsImdldENvbXB1dGVkU3R5bGUiLCJjdXJyZW50U3R5bGUiLCJmb250U2l6ZSIsInNjcm9sbExlZnQiLCJzY3JvbGxXaWR0aCIsImFuZHJvaWRjaHJvbWUiLCJmaXJzdENoaWxkIiwidGV4dE5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsImFwcGVuZENoaWxkIiwic2V0U3RhcnQiLCJfdmFsdWVHZXQiLCJzZXRFbmQiLCJjb2xsYXBzZSIsInNlbCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwiY3JlYXRlVGV4dFJhbmdlIiwibW92ZUVuZCIsImRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uIiwicmV0dXJuRGVmaW5pdGlvbiIsImJsIiwicG9zaXRpb25zIiwibHZUZXN0QWx0IiwiY2xlYXJPcHRpb25hbFRhaWwiLCJybCIsImxtaWIiLCJscnAiLCJhbWwiLCJpc1NlbGVjdGlvbiIsIndyYXBFdmVudFJ1bGVyIiwiZXZlbnRIYW5kbGVyIiwiaW5Db21wb3NpdGlvbiIsImtleWRvd25QcmVzc2VkIiwiaW1PcHRzIiwib2ZmIiwicmVhZE9ubHkiLCJjdHJsS2V5IiwidGFiVGhyb3VnaCIsIlRBQiIsInNraXBLZXlQcmVzc0V2ZW50IiwiYXJndW1lbnRzIiwicGF0Y2hWYWx1ZVByb3BlcnR5IiwicGF0Y2hWYWxob29rIiwidmFsSG9va3MiLCJpbnB1dG1hc2twYXRjaCIsInZhbGhvb2tHZXQiLCJ2YWxob29rU2V0Iiwic2V0IiwiYnVmZmVyVGVtcGxhdGUiLCIkZWxlbSIsImdldHRlciIsInZhbHVlR2V0IiwiY2xlYXJNYXNrT25Mb3N0Rm9jdXMiLCJzZXR0ZXIiLCJ2YWx1ZVNldCIsImluc3RhbGxOYXRpdmVWYWx1ZVNldEZhbGxiYWNrIiwiJGlucHV0IiwiX192YWx1ZUdldCIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInRleHRDb250ZW50IiwiZGVmaW5lUHJvcGVydHkiLCJfX2xvb2t1cEdldHRlcl9fIiwiX19sb29rdXBTZXR0ZXJfXyIsIl9fZGVmaW5lR2V0dGVyX18iLCJfX2RlZmluZVNldHRlcl9fIiwib3ZlcnJ1bGVSVEwiLCJfX3ZhbHVlU2V0IiwiaGFuZGxlUmVtb3ZlIiwiZ2VuZXJhbGl6ZSIsIkJBQ0tTUEFDRSIsIkRFTEVURSIsInBlbmQiLCJncm91cFNlcGFyYXRvciIsImtleWRvd25FdmVudCIsImlwaG9uZSIsInVuZG9WYWx1ZSIsInNob3dUb29sdGlwIiwiRU5EIiwiUEFHRV9ET1dOIiwiSE9NRSIsIlBBR0VfVVAiLCJ1bmRvT25Fc2NhcGUiLCJFU0NBUEUiLCJhbHRLZXkiLCJJTlNFUlQiLCJSSUdIVCIsIkxFRlQiLCJvbktleURvd24iLCJpZ25vcmFibGUiLCJpZ25vcmFibGVzIiwiY2hlY2t2YWwiLCJtZXRhS2V5IiwiRU5URVIiLCJmb3J3YXJkUG9zaXRpb24iLCJpc1NsY3RuIiwidW5kb1Bvc2l0aW9ucyIsIm11bHRpIiwid3JpdGVPdXRCdWZmZXIiLCJ2YWxSZXN1bHQiLCJzZWxmIiwib25LZXlWYWxpZGF0aW9uIiwicGFzdGVFdmVudCIsIm9yaWdpbmFsRXZlbnQiLCJ2YWx1ZUJlZm9yZUNhcmV0IiwidmFsdWVBZnRlckNhcmV0IiwiY2xpcGJvYXJkRGF0YSIsImdldERhdGEiLCJwYXN0ZVZhbHVlIiwib25CZWZvcmVQYXN0ZSIsImlucHV0RmFsbEJhY2tFdmVudCIsIm1vYmlsZUlucHV0RXZlbnQiLCJjb21wb3NpdGlvblN0YXJ0RXZlbnQiLCJjb21wb3NpdGlvbkRhdGEiLCJjb21wb3NpdGlvblVwZGF0ZUV2ZW50IiwibmV3RGF0YSIsImNvbXBvc2l0aW9uRW5kRXZlbnQiLCJzZXRWYWx1ZUV2ZW50Iiwib25CZWZvcmVNYXNrIiwiY2xlYXJJbmNvbXBsZXRlIiwiZm9jdXNFdmVudCIsIm5wdFZhbHVlIiwic2hvd01hc2tPbkZvY3VzIiwic2hvd01hc2tPbkhvdmVyIiwibW91c2VFbnRlciIsInBvc2l0aW9uQ2FyZXRPblRhYiIsIm1vdXNlbGVhdmVFdmVudCIsImNsaWNrRXZlbnQiLCJkb1JhZGl4Rm9jdXMiLCJjbGlja1BvcyIsInJhZGl4Rm9jdXMiLCJyYWRpeFBvcyIsInNlbGVjdGVkQ2FyZXQiLCJjbGlja1Bvc2l0aW9uIiwibHZjbGlja1Bvc2l0aW9uIiwibGFzdFBvc2l0aW9uIiwiZGJsY2xpY2tFdmVudCIsImN1dEV2ZW50IiwiY2xpcERhdGEiLCJzZXREYXRhIiwiZXhlY0NvbW1hbmQiLCJibHVyRXZlbnQiLCJtb3VzZWVudGVyRXZlbnQiLCIkZWwiLCJkaXIiLCJyaWdodEFsaWduIiwidGV4dEFsaWduIiwicmVtb3ZlQXR0cmlidXRlIiwidGFnTmFtZSIsImlzQ29udGVudEVkaXRhYmxlIiwiZm9ybSIsInJlbW92ZU1hc2tPblN1Ym1pdCIsIlBhc3RlRXZlbnRUeXBlIiwib25jb21wbGV0ZSIsIm9uaW5jb21wbGV0ZSIsIm9uY2xlYXJlZCIsImFuZHJvaWRmaXJlZm94IiwiYW5kcm9pZCIsImtpbmRsZSIsImluaXRpYWxWYWx1ZSIsInZhbHVlQnVmZmVyIiwidmFsdWVQcm9wZXJ0eSIsImZpcnN0QWx0Iiwibm9vcCIsInBhc3RlZFZhbHVlIiwic3VwcG9ydHNJbnB1dFR5cGUiLCI5IiwiKiIsImVsZW1zIiwidGhhdCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJub2RlTmFtZSIsInNjb3BlZE9wdHMiLCJnZXRlbXB0eW1hc2siLCJoYXNNYXNrZWRWYWx1ZSIsImdldG1ldGFkYXRhIiwiZm9ybWF0IiwiZXh0ZW5kRGVmYXVsdHMiLCJleHRlbmREZWZpbml0aW9ucyIsImRlZmluaXRpb24iLCJleHRlbmRBbGlhc2VzIiwidW5tYXNrIiwic3RyIiwic3BlY2lhbHMiLCJBTFQiLCJDQVBTX0xPQ0siLCJDT01NQSIsIkNPTU1BTkQiLCJDT01NQU5EX0xFRlQiLCJDT01NQU5EX1JJR0hUIiwiQ09OVFJPTCIsIkRPV04iLCJNRU5VIiwiTlVNUEFEX0FERCIsIk5VTVBBRF9ERUNJTUFMIiwiTlVNUEFEX0RJVklERSIsIk5VTVBBRF9FTlRFUiIsIk5VTVBBRF9NVUxUSVBMWSIsIk5VTVBBRF9TVUJUUkFDVCIsIlBFUklPRCIsIlNISUZUIiwiU1BBQ0UiLCJVUCIsIldJTkRPV1MiLCJ1YSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsImpRdWVyeSIsIm5wdG1hc2siLCJqcXVlcnkiLCJ0cmlnZ2VySGFuZGxlciIsImRkL21tL3l5eXkiLCJ2YWwxcHJlIiwidmFsMSIsInZhbDJwcmUiLCJzZXBhcmF0b3IiLCJlc2NhcGVkU2VwYXJhdG9yIiwidmFsMiIsImxlYXBkYXkiLCJ5ZWFycmFuZ2UiLCJtaW55ZWFyIiwibWF4eWVhciIsImlzSW5ZZWFyUmFuZ2UiLCJlbnRlcmVkeWVhciIsImVudGVyZWR5ZWFyMiIsImRldGVybWluZWJhc2V5ZWFyIiwiaGludCIsImN1cnJlbnR5ZWFyIiwibWF4WWVhclByZWZpeCIsIm1heFllYXJQb3N0Zml4IiwibWF4eFllYXIiLCJnZXRGcm9udFZhbHVlIiwiMSIsInBjaHJzIiwiMiIsImZyb250VmFsdWUiLCJkYXlNb250aFZhbHVlIiwieWVhclByZWZpeCIsIm1tL2RkL3l5eXkiLCJ5eXl5L21tL2RkIiwiZGQubW0ueXl5eSIsImRkLW1tLXl5eXkiLCJtbS5kZC55eXl5IiwibW0tZGQteXl5eSIsInl5eXkubW0uZGQiLCJ5eXl5LW1tLWRkIiwiaHJzcHJlIiwiaHJzMjQiLCJocnMiLCJhbXBtIiwibXNwcmUiLCJ0aW1lc2VwYXJhdG9yIiwiaG91ckZvcm1hdCIsInRtcCIsImRhdGV0aW1lMTIiLCJtbS9kZC95eXl5IGhoOm1tIHhtIiwiaGg6bW0gdCIsImg6cyB0IiwiaGg6bW06c3MiLCJoaDptbSIsIm1tL3l5eXkiLCJzaGFtc2kiLCJBIiwiJiIsIiMiLCJkZWZhdWx0UHJlZml4IiwidXJscHJlMSIsInVybHByZTIiLCJ1cmxwcmUzIiwidXJscHJlNCIsInVybHByZTUiLCJ1cmxwcmU2IiwidXJscHJlNyIsInVybHByZTgiLCJwcmVmaXhMaW1pdCIsImlwIiwibWFza2VkVmFsdWUiLCJtYWMiLCJudW1lcmljIiwiYXV0b0VzY2FwZSIsInR4dCIsImVzY2FwZWRUeHQiLCJpbnRlZ2VyRGlnaXRzIiwiYXV0b0dyb3VwIiwiZ3JvdXBTaXplIiwic2VwcyIsIm1vZCIsImludGVnZXJPcHRpb25hbCIsImRpZ2l0c09wdGlvbmFsIiwiZGlnaXRzIiwiZGVjaW1hbFByb3RlY3QiLCJwcmVmaXgiLCJuZWdhdGlvblN5bWJvbCIsInN1ZmZpeCIsImFsbG93UGx1cyIsImFsbG93TWludXMiLCJmcm9udCIsInN0ZXAiLCJ1bm1hc2tBc051bWJlciIsInBvc3RGb3JtYXQiLCJyZWZvcm1hdE9ubHkiLCJzdWZmaXhTdHJpcHBlZCIsIm5lZWRzUmVmcmVzaCIsImNoYXJBdFBvcyIsImNidWYiLCJidWZWYWwiLCJidWZWYWxPcmlnaW4iLCJlc2NhcGVkR3JvdXBTZXBhcmF0b3IiLCJyYWRpeFNwbGl0IiwicmVnIiwicHJvY2Vzc1ZhbHVlIiwidG1wQnVmU3BsaXQiLCJtYXRjaFJzbHQiLCJpbnRlZ2VyUGFydCIsIm1hdGNoUnNsdERpZ2l0cyIsImludGVnZXJOUGFydCIsInJhZGl4UG9zaXRpb24iLCJzaWduSGFuZGxlciIsInJhZGl4SGFuZGxlciIsImludGVnZXJWYWx1ZSIsImxlYWRpbmdaZXJvSGFuZGxlciIsIl9yYWRpeFBvc2l0aW9uIiwiZGlnaXRzTWF0Y2giLCJpbnRlZ2VyTWF0Y2giLCJ+IiwiKyIsIi0iLCI6IiwicmFkaXgiLCJidWZDbG9uZSIsImtvbW1hTWF0Y2hlcyIsImRvdE1hdGNoZXMiLCJ2YWx1ZVBhcnRzIiwiZGVjUGFydCIsImRpZ2l0c0ZhY3RvciIsInBvdyIsInJvdW5kIiwicG9zaXRpb25JbnB1dCIsImNhbkNsZWFyIiwicmFkaXhJbmplY3Rpb24iLCJpc051bGwiLCJpbnRQYXJ0IiwicmFkaXhQYXJ0IiwiY3VycmVuY3kiLCJkZWNpbWFsIiwiaW50ZWdlciIsInBlcmNlbnRhZ2UiLCJjb3VudHJ5Y29kZSIsIm1hc2tMaXN0IiwiYWpheCIsImFzeW5jIiwiZGF0YVR5cGUiLCJ4aHIiLCJhamF4T3B0aW9ucyIsInRocm93bkVycm9yIiwicHJvY2Vzc2VkVmFsdWUiLCJwaG9uZWJlIiwiUmVnZXgiLCJyZWdleFRva2VucyIsInF1YW50aWZpZXJGaWx0ZXIiLCJSZWdleFRva2VuIiwicmVwZWF0ZXJQYXJ0IiwiYW5hbHlzZVJlZ2V4Iiwib3Blbmdyb3VwcyIsInF1YW50aWZpZXJUb2tlbiIsInZhbGlkYXRlUmVnZXhUb2tlbiIsImZyb21Hcm91cCIsImlzdmFsaWQiLCJyZWdleFBhcnQiLCJvcGVuR3JvdXBDb3VudCIsIm1hdGNoVG9rZW4iLCJjcnJudG5keCIsIm1hdGNoR3JvdXAiLCJyZWdleFBhcnRCYWsiLCJxbSIsInRlc3RFeHAiLCJleHAiLCJidWZmZXJTdHIiLCJ0bCIsImNidWZmZXIiLCJyZWdleFRva2VuIiwiYXBwIiwicnVuIiwiJHVpYk1vZGFsU3RhY2siLCJhdXRoZW50aWNhdGUiLCJkaXNtaXNzQWxsIiwiY29uZmlnIiwiJHN0YXRlUHJvdmlkZXIiLCIkdXJsUm91dGVyUHJvdmlkZXIiLCJvdGhlcndpc2UiLCJ2aWV3cyIsIm1hcEZpbHRlcnNAbWFwIiwic2Vuc1QiLCJuZXR3TiIsIm1hcFNpdGVJbmZvQG1hcCIsIm1hcFBlYWtzVmlld0BtYXAiLCJtYXBTZW5zb3JQcm9wb3NlQG1hcCIsImFic3RyYWN0IiwibWVtYmVySWQiLCJyb2xlSWQiLCJldmVudElkIiwiaHdtVCIsInNzdGF0IiwiaHF1Iiwic3F1YXNoIiwibGF0bG9uZ2FycmF5IiwidmVydERhdHMiLCJ2ZXJ0Q29sTWV0Iiwib3BRdWFsIiwic2VudCIsImFNYXAiLCJwZWFrIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUVBLFlBRUEsRUFBQSxHQUdBQSxpQkFIQUMsUUFBQUMsT0FBQSx1QkFD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QWhuQixZQUFBLFNBQUFnbkIsS0FBQXNuQixjQUNBLE1BQUEsT0FBQUEsYUFBQWhyRCxHQUFBMGpDLEtBQUExSixTQUFBNXJCLFNBQUEsUUFFQWtzRCxHQUFBLGNBQ0EzOUMsZ0JBQUEsU0FBQTI5QyxHQUFBdFAsY0FDQSxNQUFBLE9BQUFBLGFBQUFockQsR0FBQXM2RCxHQUFBdGdDLFNBQUE1ckIsU0FBQSxRQUVBOEIsRUFBQSxTQUNBME0sV0FBQSxTQUFBMU0sRUFBQTg2QyxjQUNBLE1BQUEsT0FBQUEsYUFBQWhyRCxHQUFBa1EsRUFBQThwQixTQUFBNXJCLFNBQUEsUUFJQTZlLEdBQUEsa0JBQ0FwVCxlQUFBLFNBQUFvVCxJQUNBLE1BQUFBLElBQUErTSxTQUFBNXJCLFVBRUE4SCxFQUFBLFFBQ0EyRyxVQUFBLFNBQUEzRyxFQUFBODBDLGNBQ0EsTUFBQSxVQUFBQSxhQUFBaHJELEdBQUFrVyxFQUFBOGpCLFNBQUE1ckIsU0FBQSxRQUVBbXFGLEtBQUEsY0FDQXorRSxlQUFBLFNBQUF5K0UsS0FBQXZ0QyxjQUNBLE1BQUEsVUFBQUEsYUFBQWhyRCxHQUFBdTRGLEtBQUF2K0QsU0FBQTVyQixTQUFBLFFBRUFnNUIsR0FBQSxlQUNBdHFCLGdCQUFBLFNBQUFzcUIsR0FBQTRqQixjQUNBLE1BQUEsVUFBQUEsYUFBQWhyRCxHQUFBb25DLEdBQUFwTixTQUFBNXJCLFNBQUEsUUFNQStFLEdBQUEsZUFDQXVHLGdCQUFBLFNBQUF2RyxJQUNBLE1BQUFBLElBQUE2bUIsU0FBQTVyQiIsImZpbGUiOiJhcHAubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qIGNvbnRyb2xsZXJzLmpzLCAnbGVhZmxldC1kaXJlY3RpdmUnJ3VpLnVuaXF1ZScsJ25nVGFnc0lucHV0JywqL1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBTZXR0aW5nc0NvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NldHRpbmdzQ29udHJvbGxlcnMnLFxyXG4gICAgICBbJ25nSW5wdXRNb2RpZmllZCcsICd1aS52YWxpZGF0ZScsICdhbmd1bGFyLmZpbHRlcicsICd4ZWRpdGFibGUnLCAnY2hlY2tsaXN0LW1vZGVsJywgJ25nRmlsZVVwbG9hZCddKTtcclxuXHJcbiAgICB2YXIgU1ROQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQ29udHJvbGxlcnMnLCBbXSk7XHJcbiAgICB2YXIgTW9kYWxDb250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdNb2RhbENvbnRyb2xsZXJzJywgW10pO1xyXG5cclxuICAgIC8vI3JlZ2lvbiAkY2Nva2llcyB2YXJpYWJsZXNcclxuICAgIC8qXHJcbiAgICAqIFNUTkNyZWRzLCBTVE5Vc2VybmFtZSwgdXNlcnNOYW1lLCBtSUQsIHVzZXJzUm9sZSwgU2Vzc2lvbkV2ZW50SUQsIFNlc3Npb25FdmVudE5hbWVcclxuICAgICovXHJcbiAgICAvLyNlbmRyZWdpb24gJGNvb2tpZXMgdmFyaWFibGVzXHJcblxyXG4gICAgLy8jcmVnaW9uIENPTlNUQU5UUyAgICBcclxuICAgIC8vcmVndWxhciBleHByZXNzaW9uIGZvciBhIHBhc3N3b3JkIHJlcXVpcmVtZW50IG9mIGF0IGxlYXN0IDggY2hhcmFjdGVycyBsb25nIGFuZCBhdCBsZWFzdCAzIG9mIDQgY2hhcmFjdGVyIGNhdGVnb3JpZXMgdXNlZCAodXBwZXIsIGxvd2VyLCBkaWdpdCwgc3BlY2lhbFxyXG4gICAgU1ROQ29udHJvbGxlcnMuY29uc3RhbnQoJ1JlZ0V4cCcsIHtcclxuICAgICAgICBQQVNTV09SRDogL14oKCg/PS4qW2Etel0pKD89LipbQS1aXSkoPz0uKlswLTldKSl8KCg/PS4qW2Etel0pKD89LipbQS1aXSkoPz0uKlshQEA/IyQlXiZfOjstXSkpfCgoPz0uKlthLXpdKSg/PS4qWzAtOV0pKD89LipbIUBAPyMkJV4mXzo7LV0pKXwoKD89LipbQS1aXSkoPz0uKlswLTldKSg/PS4qWyFAQD8jJCVeJl86Oy1dKSkpLns4LH0kL1xyXG4gICAgfSk7XHJcbiAgICAvLyNlbmRyZWdpb24gQ09OU1RBTlRTXHJcblxyXG4gICAgXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qIGNvbnRyb2xsZXJzLmpzLCAnbGVhZmxldC1kaXJlY3RpdmUnJ3VpLnVuaXF1ZScsJ25nVGFnc0lucHV0JywqL1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgdmFyIFNUTkNvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NUTkNvbnRyb2xsZXJzJyk7XHJcbiAgICAvLyNyZWdpb24gRElSRUNUSVZFU1xyXG4gICAgXHJcbiAgICAvL3RyeSB0aGlzIG9uZSBNb25kYXk6OjpcclxuICAgIC8vaHR0cDovL3d3dy5uZy1uZXdzbGV0dGVyLmNvbS9wb3N0cy9kMy1vbi1hbmd1bGFyLmh0bWxcclxuICAgIFNUTkNvbnRyb2xsZXJzLmRpcmVjdGl2ZSgnYmFyc0NoYXJ0JyxbJyRwYXJzZScsIGZ1bmN0aW9uICgkcGFyc2UpIHtcclxuICAgICAgICB2YXIgZGlyZWN0aXZlRGVmaW5pdGlvbk9iamVjdCA9IHtcclxuICAgICAgICAgICAgLy9XZSByZXN0cmljdCBpdHMgdXNlIHRvIGFuIGVsZW1lbnQgYXMgdXN1YWxseSAgPGJhcnMtY2hhcnQ+IGlzIHNlbWFudGljYWxseSBtb3JlIHVuZGVyc3RhbmRhYmxlXHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgICAgIC8vdGhpcyBpcyBpbXBvcnRhbnQsIHdlIGRvbid0IHdhbnQgdG8gb3ZlcndyaXRlIG91ciBkaXJlY3RpdmUgZGVjbGFyYXRpb24gaW4gdGhlIEhUTUwgbWFyay11cFxyXG4gICAgICAgICAgICByZXBsYWNlOiBmYWxzZSxcclxuICAgICAgICAgICAgc2NvcGU6IHtcclxuICAgICAgICAgICAgICAgIGRhdGE6ICc9ZWxldmF0aW9uRGF0YSdcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICAgICAgICAgICAgLy9jb252ZXJ0aW5nIGFsbCBkYXRhIHBhc3NlZCB0aHJ1IGludG8gYW4gYXJyYXlcclxuICAgICAgICAgICAgICAgIHZhciBkYXRhID0gYXR0cnMuZWxldmF0aW9uRGF0YS5zcGxpdCgnLCcpO1xyXG4gICAgICAgICAgICAgICAgLy9pbiBEMywgYW55IHNlbGVjdGlvblswXSBjb250YWlucyB0aGUgZ3JvdXAgc2VsZWN0aW9uWzBdWzBdIGlzIHRoZSBET00gbm9kZSBidXQgd2Ugd29uJ3QgbmVlZCB0aGF0IHRoaXMgdGltZVxyXG4gICAgICAgICAgICAgICAgdmFyIGNoYXJ0ID0gZDMuc2VsZWN0KGVsZW1lbnRbMF0pO1xyXG4gICAgICAgICAgICAgICAgLy90byBvdXIgb3JpZ2luYWwgZGlyZWN0aXZlIG1hcmt1cCBiYXJzLWNoYXJ0IHdlIGFkZCBhIGRpdiB3aXRoIG91dCBjaGFydCBzdGxpbmcgYW5kIGJpbmQgZWFjaCBkYXRhIGVudHJ5IHRvIHRoZSBjaGFydFxyXG4gICAgICAgICAgICAgICAgY2hhcnQuYXBwZW5kKFwiZGl2XCIpLmF0dHIoXCJjbGFzc1wiLCBcImNoYXJ0XCIpXHJcbiAgICAgICAgICAgICAgICAgLnNlbGVjdEFsbCgnZGl2JylcclxuICAgICAgICAgICAgICAgICAuZGF0YShzY29wZS5kYXRhKS5lbnRlcigpLmFwcGVuZChcImRpdlwiKVxyXG4gICAgICAgICAgICAgICAgIC50cmFuc2l0aW9uKCkuZWFzZShcImVsYXN0aWNcIilcclxuICAgICAgICAgICAgICAgICAuc3R5bGUoXCJ3aWR0aFwiLCBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZCArIFwiJVwiOyB9KVxyXG4gICAgICAgICAgICAgICAgIC50ZXh0KGZ1bmN0aW9uIChkKSB7IHJldHVybiBkICsgXCIlXCI7IH0pO1xyXG4gICAgICAgICAgICAgICAgLy9hIGxpdHRsZSBvZiBtYWdpYzogc2V0dGluZyBpdCdzIHdpZHRoIGJhc2VkIG9uIHRoZSBkYXRhIHZhbHVlIChkKSBhbmQgdGV4dCBhbGwgd2l0aCBhIHNtb290aCB0cmFuc2l0aW9uXHJcbiAgICAgICAgICAgICAgICBzY29wZS4kd2F0Y2goJ2RhdGEnLCBmdW5jdGlvbiAobmV3VmFsdWUsIG9sZFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuZGF0YSA9IG5ld1ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgIHJldHVybiBkaXJlY3RpdmVEZWZpbml0aW9uT2JqZWN0O1xyXG4gICAgfV0pO1xyXG4gICAgU1ROQ29udHJvbGxlcnMuZGlyZWN0aXZlKCdzaXRlU2VhcmNoJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnRScsXHJcbiAgICAgICAgICAgIHNjb3BlOiB7XHJcbiAgICAgICAgICAgICAgICBtb2RlbDogJz1uZ01vZGVsJyxcclxuICAgICAgICAgICAgICAgIHNlYXJjaEJ5OiAnPScsIC8vcmVxdWlyZWRcclxuICAgICAgICAgICAgICAgIHNlYXJjaFRlcm06ICc9J1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByZXBsYWNlOiB0cnVlLFxyXG4gICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJzZWFyY2huYXZcIj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlYXJjaGJ5XCI+PGI+U2VhcmNoIEJ5OjwvYj4nK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlYXJjaGJ5b3B0aW9uXCI+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJTZWFyY2hCeVwiIG5nLW1vZGVsPVwic2VhcmNoQnkudmFsXCIgdmFsdWU9XCJieVNpdGVJZFwiIC8+SUQ8L2Rpdj4nK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cInNlYXJjaGJ5b3B0aW9uXCI+PGlucHV0IHR5cGU9XCJyYWRpb1wiIG5hbWU9XCJTZWFyY2hCeVwiIG5nLW1vZGVsPVwic2VhcmNoQnkudmFsXCIgdmFsdWU9XCJieVNpdGVOb1wiIC8+TnVtYmVyPC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwic2VhcmNoYnlvcHRpb25cIj48aW5wdXQgdHlwZT1cInJhZGlvXCIgbmFtZT1cIlNlYXJjaEJ5XCIgbmctbW9kZWw9XCJzZWFyY2hCeS52YWxcIiB2YWx1ZT1cImJ5U2l0ZU5hbWVcIiAvPk5hbWU8L2Rpdj48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJzZWFyY2gtaW5wdXRcIj48aW5wdXQgbmctZm9jdXM9XCJnb1NlYXJjaFwiIHR5cGU9XCJ0ZXh0XCIgbmctbW9kZWw9XCJzZWFyY2hUZXJtXCIgbmctZW50ZXI9XCJJbmRleFNlYXJjaFNpdGVzKClcIiBwbGFjZWhvbGRlcj1cIlNlYXJjaCBTaXRlcy4uLlwiIC8+JytcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYm9yZGVyTGVzc1wiIG5nLWNsaWNrPVwiSW5kZXhTZWFyY2hTaXRlcygpXCI+U2VhcmNoIDxpIGNsYXNzPVwiaW9uLXNlYXJjaFwiPjwvaT48L2J1dHRvbj48L2Rpdj48L2Rpdj4nLFxyXG5cclxuICAgICAgICAgICAgY29udHJvbGxlcjogW1xyXG4gICAgICAgICAgICAgICAgJyRzY29wZScsICckc3RhdGUnLCAnJGh0dHAnLCAnU0lURScsICckdWliTW9kYWwnLFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHN0YXRlLCAkaHR0cCwgU0lURSwgJHVpYk1vZGFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFRlcm0gPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoQnkgPSB7IHZhbDogJ2J5U2l0ZU5vJyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5wbGFjZWhvbGRlciA9ICcuLi4nO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5JbmRleFNlYXJjaFNpdGVzID0gZnVuY3Rpb24gKCkgeyAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuc2VhcmNoVGVybSAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICgkc2NvcGUuc2VhcmNoQnkudmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYnlTaXRlTm8nOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTSVRFLmdldFNlYXJjaGVkU2l0ZSh7IGJ5U2l0ZU5vOiAkc2NvcGUuc2VhcmNoVGVybSB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3ApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVTZWFyY2hSZXNwb25zZShyZXNwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZVNlYXJjaFJlc3BvbnNlKGVycm9yUmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYnlTaXRlSWQnOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTSVRFLmdldFNlYXJjaGVkU2l0ZSh7IGJ5U2l0ZUlkOiAkc2NvcGUuc2VhcmNoVGVybSB9LCBmdW5jdGlvbiAocmVzcCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZVNlYXJjaFJlc3BvbnNlKHJlc3ApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZVNlYXJjaFJlc3BvbnNlKGVycm9yUmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnYnlTaXRlTmFtZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNJVEUuZ2V0U2VhcmNoZWRTaXRlKHsgYnlTaXRlTmFtZTogJHNjb3BlLnNlYXJjaFRlcm0gfSwgZnVuY3Rpb24gKHJlc3ApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVTZWFyY2hSZXNwb25zZShyZXNwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVTZWFyY2hSZXNwb25zZShlcnJvclJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2l0ZVNlYXJjaFJlc3BvbnNlID0gZnVuY3Rpb24gKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHMuc3RhdHVzICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZXJyb3JzdGF0dXMgc2hvdyBtb2RhbCB3aXRoIGVycm9yIG1lc3NhZ2UgJ25vIHNpdGUgZm91bmQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3JNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+Tm8gc2l0ZSBmb3VuZC4gRm9yIG1vcmUgc2l0ZSBzZWFyY2ggb3B0aW9ucywgZ28gdG8gdGhlIFNpdGVzIG5hdmlnYXRpb24gdGFiIHRvIHNlYXJjaCBmb3Igc2l0ZXMuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlcnJvck1vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoVGVybSA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWFyY2hCeSA9IHsgdmFsOiAnYnlTaXRlTm8nIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3Jlc2V0IHNlYXJjaCBhbmQgZ28gdG8gdGhlIHNpdGUgZGFzaFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFRlcm0gPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZWFyY2hCeSA9IHsgdmFsOiAnYnlTaXRlTm8nIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ3NpdGUuZGFzaGJvYXJkJywgeyBpZDogcy5zaXRlX2lkIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXVxyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuXHJcbiAgICAvL1RoaXMgZGlyZWN0aXZlIGFsbG93cyB1cyB0byBwYXNzIGEgZnVuY3Rpb24gaW4gb24gYW4gZW50ZXIga2V5IHRvIGRvIHdoYXQgd2Ugd2FudC5cclxuICAgIFNUTkNvbnRyb2xsZXJzLmRpcmVjdGl2ZSgnbmdFbnRlcicsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycykge1xyXG4gICAgICAgICAgICBlbGVtZW50LmJpbmQoXCJrZXlkb3duIGtleXByZXNzXCIsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKGV2ZW50LndoaWNoID09PSAxMykge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjb3BlLiRldmFsKGF0dHJzLm5nRW50ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuXHJcbiAgICAvL2ZvY3VzIG9uIHRoZSBmaXJzdCBlbGVtZW50IG9mIHRoZSBwYWdlXHJcbiAgICBTVE5Db250cm9sbGVycy5kaXJlY3RpdmUoJ251bWVyaWNPbmx5JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbW9kZWxDdHJsKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgbW9kZWxDdHJsLiRwYXJzZXJzLnB1c2goZnVuY3Rpb24gKGlucHV0VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdHJhbnNmb3JtZWRJbnB1dCA9IGlucHV0VmFsdWUgPyBpbnB1dFZhbHVlLnJlcGxhY2UoL1teXFxkLi1dL2csICcnKSA6IG51bGw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0cmFuc2Zvcm1lZElucHV0ICE9IGlucHV0VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kZWxDdHJsLiRzZXRWaWV3VmFsdWUodHJhbnNmb3JtZWRJbnB1dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1vZGVsQ3RybC4kcmVuZGVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJhbnNmb3JtZWRJbnB1dDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH0pO1xyXG5cclxuICAgIC8vIGZvcm1hdCB0aGUgbmctbW9kZWwgZGF0ZSBhcyBkYXRlIG9uIGluaXRpYWwgbG9hZFxyXG4gICAgU1ROQ29udHJvbGxlcnMuZGlyZWN0aXZlKCdkYXRlcGlja2VyUG9wdXAnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdFQUMnLFxyXG4gICAgICAgICAgICByZXF1aXJlOiAnbmdNb2RlbCcsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0ciwgY29udHJvbGxlcikge1xyXG4gICAgICAgICAgICAgICAgLy9yZW1vdmUgdGhlIGRlZmF1bHQgZm9ybWF0dGVyIGZyb20gdGhlIGlucHV0IGRpcmVjdGl2ZSB0byBwcmV2ZW50IGNvbmZsaWN0XHJcbiAgICAgICAgICAgICAgICBjb250cm9sbGVyLiRmb3JtYXR0ZXJzLnNoaWZ0KCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfSk7XHJcblxyXG4gICAgU1ROQ29udHJvbGxlcnMuZGlyZWN0aXZlKCdmb2N1cycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRyaWJ1dGVzKSB7XHJcbiAgICAgICAgICAgIGVsZW1lbnRbMF0uZm9jdXMoKTtcclxuICAgICAgICB9O1xyXG4gICAgfSk7XHJcblxyXG4gICAgU1ROQ29udHJvbGxlcnMuZGlyZWN0aXZlKCdiYWNrQnV0dG9uJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQuYmluZCgnY2xpY2snLCBnb0JhY2spO1xyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGdvQmFjaygpIHtcclxuICAgICAgICAgICAgICAgICAgICBoaXN0b3J5LmJhY2soKTtcclxuICAgICAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuXHJcbiAgICAvL3ZhbGlkYXRlIHBhc3N3b3JkXHJcbiAgICBTVE5Db250cm9sbGVycy5kaXJlY3RpdmUoJ3Bhc3N3b3JkVmFsaWRhdGUnLCBbJ1JlZ0V4cCcsIGZ1bmN0aW9uIChyZWdleCkge1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcclxuICAgICAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbG0sIGF0dHJzLCBjdHJsKSB7XHJcbiAgICAgICAgICAgICAgICBlbG0udW5iaW5kKCdrZXlkb3duJykudW5iaW5kKCdjaGFuZ2UnKTtcclxuICAgICAgICAgICAgICAgIGVsbS5iaW5kKCdibHVyJywgZnVuY3Rpb24gKHZpZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgocmVnZXguUEFTU1dPUkQpLnRlc3Qodmlld1ZhbHVlLnRhcmdldC52YWx1ZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaXQgaXMgdmFsaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KFwicGFzc3dvcmRWYWxpZGF0ZVwiLCB0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2aWV3VmFsdWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2l0IGlzIGludmFsaWQsIHJldHVybiB1bmRlZmluZWQgLSBubyBtb2RlbCB1cGRhdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0cmwuJHNldFZhbGlkaXR5KFwicGFzc3dvcmRWYWxpZGF0ZVwiLCBmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XHJcblxyXG4gICAgU1ROQ29udHJvbGxlcnMuZGlyZWN0aXZlKCdzYW1lQXMnLCBbJyRwYXJzZScsIGZ1bmN0aW9uICgkcGFyc2UpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXF1aXJlOiAnbmdNb2RlbCcsXHJcbiAgICAgICAgICAgIHJlc3RyaWN0OiAnQScsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxtLCBhdHRycywgY3RybCkge1xyXG4gICAgICAgICAgICAgICAgZWxtLnVuYmluZCgna2V5ZG93bicpLnVuYmluZCgnY2hhbmdlJyk7XHJcbiAgICAgICAgICAgICAgICBlbG0uYmluZCgnYmx1cicsIGZ1bmN0aW9uICh2aWV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHBhcnNlKGF0dHJzLnNhbWVBcykoc2NvcGUpID09PSBjdHJsLiRtb2RlbFZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChjdXJyZW50VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3RybC4kc2V0VmFsaWRpdHkoJ3Bhc3N3b3JkTWlzbWF0Y2gnLCBjdXJyZW50VmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xyXG5cclxuICAgIC8vbWFrZSB0ZXh0YXJlYSBoZWlnaHQgZXF1YWwgdG8gY29udGVudCBpbnNpZGUgaXQgKG5vIHNjcm9sbGJhcnMpIGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTc3NzIyNjAvdGV4dGFyZWEtYXV0by1oZWlnaHRcclxuICAgIFNUTkNvbnRyb2xsZXJzLmRpcmVjdGl2ZSgnZWxhc3RpYycsIFsnJHRpbWVvdXQnLCBmdW5jdGlvbiAoJHRpbWVvdXQpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoJHNjb3BlLCBlbGVtZW50KSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaW5pdGlhbEhlaWdodCA9ICRzY29wZS5pbml0aWFsSGVpZ2h0IHx8IGVsZW1lbnRbMF0uc3R5bGUuaGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50WzBdLnN0eWxlLmhlaWdodCA9ICRzY29wZS5pbml0aWFsSGVpZ2h0O1xyXG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnRbMF0uc3R5bGUuaGVpZ2h0ID0gXCJcIiArIGVsZW1lbnRbMF0uc2Nyb2xsSGVpZ2h0ICsgXCJweFwiO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGVsZW1lbnQub24oXCJpbnB1dCBjaGFuZ2VcIiwgcmVzaXplKTtcclxuICAgICAgICAgICAgICAgICR0aW1lb3V0KHJlc2l6ZSwgMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xyXG5cclxuICAgIFNUTkNvbnRyb2xsZXJzLmRpcmVjdGl2ZSgnbXlJbnB1dE1hc2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgcmVzdHJpY3Q6ICdBQycsXHJcbiAgICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWwsIGF0dHJzKSB7XHJcbiAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2soc2NvcGUuJGV2YWwoYXR0cnMubXlJbnB1dE1hc2spKTtcclxuICAgICAgICAgICAgICAgIGVsLm9uKCdjaGFuZ2UnLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUuJGV2YWwoYXR0cnMubmdNb2RlbCArIFwiPSdcIiArIGVsLnZhbCgpICsgXCInXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIG9yIHNjb3BlW2F0dHJzLm5nTW9kZWxdID0gZWwudmFsKCkgaWYgeW91ciBleHByZXNzaW9uIGRvZXNuJ3QgY29udGFpbiBkb3QuXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9KTtcclxuXHJcbiAgICAvL2JpbmQgZmlsZSB1cGxvYWQgZmlsZSB0byBhIG1vZGVsIHNjb3BlIHZhclxyXG4gICAgU1ROQ29udHJvbGxlcnMuZGlyZWN0aXZlKCdmaWxlTW9kZWwnLCBbJyRwYXJzZScsIGZ1bmN0aW9uICgkcGFyc2UpIHtcclxuICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICByZXN0cmljdDogJ0EnLFxyXG4gICAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW9kZWwgPSAkcGFyc2UoYXR0cnMuZmlsZU1vZGVsKTtcclxuICAgICAgICAgICAgICAgIHZhciBtb2RlbFNldHRlciA9IG1vZGVsLmFzc2lnbjtcclxuXHJcbiAgICAgICAgICAgICAgICBlbGVtZW50LmJpbmQoJ2NoYW5nZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtb2RlbFNldHRlcihzY29wZSwgZWxlbWVudFswXS5maWxlc1swXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XHJcblxyXG4gICAgLy9TVE5Db250cm9sbGVycy5kaXJlY3RpdmUoJ2RhdGV0aW1leicsIGZ1bmN0aW9uICgpIHtcclxuICAgIC8vICAgIC8vaHR0cDovL3RhcnJ1ZGEuZ2l0aHViLmlvL2Jvb3RzdHJhcC1kYXRldGltZXBpY2tlci8jYXBpICAtLSBjYW4ndCBnZXQgaXQgd29ya2luZyByaWdodCBub3dcclxuICAgIC8vICAgIHJldHVybiB7XHJcbiAgICAvLyAgICAgICAgcmVzdHJpY3Q6ICdBJyxcclxuICAgIC8vICAgICAgICByZXF1aXJlOiAnbmdNb2RlbCcsXHJcbiAgICAvLyAgICAgICAgbGluazogZnVuY3Rpb24gKHNjb3BlLCBlbGVtZW50LCBhdHRycywgbmdNb2RlbEN0cmwpIHtcclxuICAgIC8vICAgICAgICAgICAgZWxlbWVudC5kYXRldGltZXBpY2tlcih7XHJcbiAgICAvLyAgICAgICAgICAgICAgICBkYXRlRm9ybWF0OiAnZGQvTU0veXl5eSBoaDptbTpzcycsXHJcbiAgICAvLyAgICAgICAgICAgICAgICBsYW5ndWFnZTogJ3B0LUJSJ1xyXG4gICAgLy8gICAgICAgICAgICB9KS5vbignY2hhbmdlRGF0ZScsIGZ1bmN0aW9uIChlKSB7XHJcbiAgICAvLyAgICAgICAgICAgICAgICBuZ01vZGVsQ3RybC4kc2V0Vmlld1ZhbHVlKGUuZGF0ZSk7XHJcbiAgICAvLyAgICAgICAgICAgICAgICBzY29wZS4kYXBwbHkoKTtcclxuICAgIC8vICAgICAgICAgICAgfSk7XHJcbiAgICAvLyAgICAgICAgfVxyXG4gICAgLy8gICAgfTtcclxuICAgIC8vfSk7XHJcbiAgICAvLyNlbmRyZWdpb24gRElSRUNUSVZFU1xyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBTVE5Db250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTVE5Db250cm9sbGVycycpO1xyXG5cclxuICAgIFNUTkNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ3NpdGVTZWFyY2hDdHJsJywgWyckc2NvcGUnLCAnJGNvb2tpZXMnLCAnJHJvb3RTY29wZScsICckbG9jYXRpb24nLCAnc3RhdGVMaXN0JywgJ3NlbnNvclR5cGVzJywgJ25ldHdvcmtOYW1lcycsICdTSVRFJywgXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJGNvb2tpZXMsICRyb290U2NvcGUsICRsb2NhdGlvbiwgc3RhdGVMaXN0LCBzZW5zb3JUeXBlcywgbmV0d29ya05hbWVzLCBTSVRFKSB7XHJcbiAgICAgICAgICAgIGlmICgkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IHVuZGVmaW5lZCB8fCAkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hdXRoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnRoaXNQYWdlID0gXCJTaXRlIFNlYXJjaFwiO1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5hY3RpdmVNZW51ID0gXCJzaXRlc1wiOyAvLyByZXBvcnQsIHNldHRpbmdzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyB3YXRjaCBmb3IgdGhlIHNlc3Npb24gZXZlbnQgdG8gY2hhbmdlIGFuZCB1cGRhdGVcclxuICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJyk7IH0sIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXNzaW9uRXZlbnQgPSAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudE5hbWUnKSAhPT0gbnVsbCAmJiAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudE5hbWUnKSAhPT0gdW5kZWZpbmVkID8gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJykgOiBcIkFsbCBFdmVudHNcIjtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRlcyA9IHN0YXRlTGlzdDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZW5UeXBlcyA9IHNlbnNvclR5cGVzO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ldE5hbWVzID0gbmV0d29ya05hbWVzO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkNob3NlbiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNob3NlblN0YXRlcyA9IFtdOyAvL3VzZWQgdG8gam9pbiBlYWNoIGFiYnJldiB0byBwYXNzIHRvIGNhbGxcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaXRlUmVzcG9uc2UgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jaGVja2JveE1vZGVsID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGh3bU9ubHk6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgc2VuT25seTogMCxcclxuICAgICAgICAgICAgICAgICAgICByZGdPbmx5OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wRGVmaW5lZDogMFxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBjaGFuZ2Ugc29ydGluZyBvcmRlclxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNvcnRfYnkgPSBmdW5jdGlvbiAobmV3U29ydGluZ09yZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5zb3J0aW5nT3JkZXIgPT0gbmV3U29ydGluZ09yZGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXZlcnNlID0gISRzY29wZS5yZXZlcnNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc29ydGluZ09yZGVyID0gbmV3U29ydGluZ09yZGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGljb24gc2V0dXBcclxuICAgICAgICAgICAgICAgICAgICAkKCd0aCBpJykuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGljb24gcmVzZXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCh0aGlzKS5yZW1vdmVDbGFzcygpLmFkZENsYXNzKCdnbHlwaGljb24gZ2x5cGhpY29uLXNvcnQnKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnJldmVyc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgndGguJyArIG5ld1NvcnRpbmdPcmRlciArICcgaScpLnJlbW92ZUNsYXNzKCkuYWRkQ2xhc3MoJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi11cCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJ3RoLicgKyBuZXdTb3J0aW5nT3JkZXIgKyAnIGknKS5yZW1vdmVDbGFzcygpLmFkZENsYXNzKCdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tZG93bicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy9pZiB0aGV5IGFyZSBjb21pbmcgYmFjayBoZXJlLCBzZWUgaWYgYSBzZWFyY2ggaGFzIGJlZW4gc3RvcmVkIGxhc3QgdGltZS5cclxuICAgICAgICAgICAgICAgIGlmICgkcm9vdFNjb3BlLnNlYXJjaFBhcmFtcyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNTZWFyY2ggPSAkcm9vdFNjb3BlLnNlYXJjaFBhcmFtcztcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vzc2lvbkV2ZW50ID0gTnVtYmVyKHRoaXNTZWFyY2guZXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZm9yIGVhY2ggc3RhdGUsIHNlbGVjdGVkPXRydWVcclxuICAgICAgICAgICAgICAgICAgICAvL2dvIHRocm91Z2ggc3RhdGVzIGFuZCBhZGQgc2VsZWN0ZWQgUHJvcGVydHkuXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAkc2NvcGUuc3RhdGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZm9yIGVhY2ggb25lLCBpZiByZXNwb25zZSBoYXMgdGhpcyBpZCwgYWRkICdzZWxlY3RlZDp0cnVlJyBlbHNlIGFkZCAnc2VsZWN0ZWQ6ZmFsc2UnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgdGhpc1NlYXJjaC5zdGF0ZS5sZW5ndGg7IHkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTZWFyY2guc3RhdGVbeV0gPT0gJHNjb3BlLnN0YXRlc1tpXS5zdGF0ZV9hYmJyZXYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVzW2ldLnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gdGhpc1NlYXJjaC5zdGF0ZS5sZW5ndGg7IC8vZW5zdXJlcyBpdCBkb2Vzbid0IHNldCBpdCBhcyBmYWxzZSBhZnRlciBzZXR0aW5nIGl0IGFzIHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZXNbaV0uc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1NlYXJjaC5zdGF0ZS5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVzW2ldLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jaG9zZW5TdGF0ZXMgPSB0aGlzU2VhcmNoLnN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5DaG9zZW4uc2Vuc29yID0gdGhpc1NlYXJjaC5TZW5zb3JUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5DaG9zZW4ubmV0d29yayA9IHRoaXNTZWFyY2guTmV0d29ya05hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkNob3Nlbi5zdXJ2ZXkgPSB0aGlzU2VhcmNoLkhXTVN1cnZleWVkO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jaGVja2JveE1vZGVsLmh3bU9ubHkgPSB0aGlzU2VhcmNoLkhXTU9ubHk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNoZWNrYm94TW9kZWwuc2VuT25seSA9IHRoaXNTZWFyY2guU2Vuc29yT25seTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2hlY2tib3hNb2RlbC5yZGdPbmx5ID0gdGhpc1NlYXJjaC5SREdPbmx5O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jaGVja2JveE1vZGVsLm9wRGVmaW5lZCA9IHRoaXNTZWFyY2guT1BEZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgIFNJVEUuZ2V0RmlsdGVyZWRTaXRlcyh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50OiAkc2NvcGUuc2Vzc2lvbkV2ZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTdGF0ZTogJHNjb3BlLmNob3NlblN0YXRlcy5qb2luKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNlbnNvclR5cGU6ICRzY29wZS5DaG9zZW4uc2Vuc29yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBOZXR3b3JrTmFtZTogJHNjb3BlLkNob3Nlbi5uZXR3b3JrLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBIV01Pbmx5OiAkc2NvcGUuY2hlY2tib3hNb2RlbC5od21Pbmx5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBIV01TdXJ2ZXllZDogJHNjb3BlLkNob3Nlbi5zdXJ2ZXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNlbnNvck9ubHk6ICRzY29wZS5jaGVja2JveE1vZGVsLnNlbk9ubHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJER09ubHk6ICRzY29wZS5jaGVja2JveE1vZGVsLnJkZ09ubHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9QRGVmaW5lZDogJHNjb3BlLmNoZWNrYm94TW9kZWwub3BEZWZpbmVkXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlTGlzdCA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZVJlc3BvbnNlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsgLy8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vZmlsdGVyIG9wdGlvbnMgY2hvc2VuLCBnbyBnZXQgdGhlc2Ugc2l0ZXMgdG8gc2hvdyBpbiBhIHRhYmxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2VhcmNoU2l0ZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IHRydWU7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vc3RvcmUgc2VhcmNoIGluIGNhc2UgdGhleSBsZWF2ZSBhbmQgY2xpY2sgYmFja1xyXG4gICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlU3RyaW5nID0gJHNjb3BlLmNob3NlblN0YXRlcy5qb2luKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVSZXNwb25zZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBldklEID0gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnRJRCcpICE9PSBudWxsICYmICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSAhPT0gdW5kZWZpbmVkID8gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnRJRCcpIDogMDtcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnNlYXJjaFBhcmFtcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2SUQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiAkc2NvcGUuY2hvc2VuU3RhdGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZW5zb3JUeXBlOiAkc2NvcGUuQ2hvc2VuLnNlbnNvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgTmV0d29ya05hbWU6ICRzY29wZS5DaG9zZW4ubmV0d29yayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgSFdNT25seTogJHNjb3BlLmNoZWNrYm94TW9kZWwuaHdtT25seSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgSFdNU3VydmV5ZWQ6ICRzY29wZS5DaG9zZW4uc3VydmV5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZW5zb3JPbmx5OiAkc2NvcGUuY2hlY2tib3hNb2RlbC5zZW5Pbmx5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSREdPbmx5OiAkc2NvcGUuY2hlY2tib3hNb2RlbC5yZGdPbmx5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBPUERlZmluZWQ6ICRzY29wZS5jaGVja2JveE1vZGVsLm9wRGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgU0lURS5nZXRGaWx0ZXJlZFNpdGVzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRXZlbnQ6IGV2SUQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRlOiBzdGF0ZVN0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2Vuc29yVHlwZTogJHNjb3BlLkNob3Nlbi5zZW5zb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE5ldHdvcmtOYW1lOiAkc2NvcGUuQ2hvc2VuLm5ldHdvcmssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEhXTU9ubHk6ICRzY29wZS5jaGVja2JveE1vZGVsLmh3bU9ubHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEhXTVN1cnZleWVkOiAkc2NvcGUuQ2hvc2VuLnN1cnZleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2Vuc29yT25seTogJHNjb3BlLmNoZWNrYm94TW9kZWwuc2VuT25seSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgUkRHT25seTogJHNjb3BlLmNoZWNrYm94TW9kZWwucmRnT25seSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgT1BEZWZpbmVkOiAkc2NvcGUuY2hlY2tib3hNb2RlbC5vcERlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVMaXN0ID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlUmVzcG9uc2UgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTsvL2VuZCBzZWFyY2hTaXRlcyBjbGljayBhY3Rpb25cclxuXHJcbiAgICAgICAgICAgICAgICAvL2FkZCBlYWNoIHN0YXRlIHRvIGFuIGFycmF5IHRvIGJlIGpvaW5lZCBpbiB0aGUgR0VUXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVDbGljayA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc2VsZWN0ZWQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNob3NlblN0YXRlcy5wdXNoKGRhdGEuc3RhdGVfYWJicmV2KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuc2VsZWN0ZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmQgPSAkc2NvcGUuY2hvc2VuU3RhdGVzLmluZGV4T2YoZGF0YS5zdGF0ZV9hYmJyZXYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaW5kID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jaG9zZW5TdGF0ZXMuc3BsaWNlKGluZCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vY2xlYXIgdGhlIGZpbHRlciBjaG9pY2VzIChzdGFydCBvdmVyKVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNsZWFyRmlsdGVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2hlY2tib3hNb2RlbCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHdtT25seTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuT25seTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmRnT25seTogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BEZWZpbmVkOiAwXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQ2hvc2VuID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNob3NlblN0YXRlcyA9IFtdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLnN0YXRlcywgZnVuY3Rpb24gKHN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0LnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfV0pO1xyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFNldHRpbmdzQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU2V0dGluZ3NDb250cm9sbGVycycpO1xyXG5cclxuICAgIFNldHRpbmdzQ29udHJvbGxlcnMuY29udHJvbGxlcignc2V0dGluZ3NDdHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckbG9jYXRpb24nLCAnJHN0YXRlJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkY29va2llcywgJGxvY2F0aW9uLCAkc3RhdGUpIHtcclxuICAgICAgICAgICAgaWYgKCRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gdW5kZWZpbmVkIHx8ICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmF1dGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbG9naW4nKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUudGhpc1BhZ2UgPSBcIlNldHRpbmdzXCI7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmFjdGl2ZU1lbnUgPSBcInNldHRpbmdzXCI7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2V0dGluZ3MgPSBcIldlbGNvbWUgdG8gdGhlIG5ldyBTVE4gU2V0dGluZ3MgUGFnZSEhXCI7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY2hhbmdlVmlldyA9IGZ1bmN0aW9uICh2aWV3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKHZpZXcpO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgfV0pO1xyXG5cclxufSgpKTtcclxuIiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgTW9kYWxDb250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdNb2RhbENvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgTW9kYWxDb250cm9sbGVycy5jb250cm9sbGVyKCdzaXRlTW9kYWxDdHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckcScsICckbG9jYXRpb24nLCAnJHN0YXRlJywgJyRodHRwJywgJyRzY2UnLCAnJHRpbWVvdXQnLCAnJHVpYk1vZGFsJywgJyR1aWJNb2RhbEluc3RhbmNlJywgJyRmaWx0ZXInLCAnbGVhZmxldE1hcmtlckV2ZW50cycsICdhbGxEcm9wRG93blBhcnRzJywgJ2xhdGxvbmcnLCAndGhpc1NpdGVTdHVmZicsIFxyXG4gICAgICAgICdTSVRFJywgJ1NJVEVfSE9VU0lORycsICdNRU1CRVInLCAnSU5TVFJVTUVOVCcsICdJTlNUUlVNRU5UX1NUQVRVUycsICdMQU5ET1dORVJfQ09OVEFDVCcsICdHRU9DT0RFJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkY29va2llcywgJHEsICRsb2NhdGlvbiwgJHN0YXRlLCAkaHR0cCwgJHNjZSwgJHRpbWVvdXQsICR1aWJNb2RhbCwgJHVpYk1vZGFsSW5zdGFuY2UsICRmaWx0ZXIsIGxlYWZsZXRNYXJrZXJFdmVudHMsIGFsbERyb3BEb3duUGFydHMsIGxhdGxvbmcsIHRoaXNTaXRlU3R1ZmYsIFNJVEUsIFNJVEVfSE9VU0lORywgXHJcbiAgICAgICAgICAgIE1FTUJFUiwgSU5TVFJVTUVOVCwgSU5TVFJVTUVOVF9TVEFUVVMsIExBTkRPV05FUl9DT05UQUNULCBHRU9DT0RFKSB7XHJcbiAgICAgICAgICAgIC8vZHJvcGRvd25zIFxyXG4gICAgICAgICAgICAkc2NvcGUuSG9yaXpvbnRhbERhdHVtTGlzdCA9IGFsbERyb3BEb3duUGFydHNbMF07XHJcbiAgICAgICAgICAgICRzY29wZS5Ib3JDb2xsTWV0aG9kTGlzdCA9IGFsbERyb3BEb3duUGFydHNbMV07XHJcbiAgICAgICAgICAgICRzY29wZS5TdGF0ZUxpc3QgPSBhbGxEcm9wRG93blBhcnRzWzJdO1xyXG4gICAgICAgICAgICAkc2NvcGUuQWxsQ291bnR5TGlzdCA9IGFsbERyb3BEb3duUGFydHNbM107XHJcbiAgICAgICAgICAgICRzY29wZS5zdGF0ZUNvdW50eUxpc3QgPSBbXTtcclxuICAgICAgICAgICAgJHNjb3BlLkRNUyA9IHt9OyAvL2hvbGRlciBvZiBkZWcgbWluIHNlYyB2YWx1ZXNcclxuICAgICAgICAgICAgJHNjb3BlLmFsbEhvdXNpbmdUeXBlTGlzdCA9IGFsbERyb3BEb3duUGFydHNbNF07XHJcbiAgICAgICAgICAgICRzY29wZS5EZXBQcmlvcml0eUxpc3QgPSBhbGxEcm9wRG93blBhcnRzWzVdO1xyXG4gICAgICAgICAgICAkc2NvcGUuTmV0TmFtZUxpc3QgPSBhbGxEcm9wRG93blBhcnRzWzZdO1xyXG4gICAgICAgICAgICAkc2NvcGUuTmV0VHlwZUxpc3QgPSBhbGxEcm9wRG93blBhcnRzWzddO1xyXG4gICAgICAgICAgICAkc2NvcGUuUHJvcG9zZWRTZW5zID0gYWxsRHJvcERvd25QYXJ0c1s4XTtcclxuICAgICAgICAgICAgJHNjb3BlLlNlbnNvckRlcGxveW1lbnQgPSBhbGxEcm9wRG93blBhcnRzWzldO1xyXG4gICAgICAgICAgICAkc2NvcGUudXNlclJvbGUgPSAkY29va2llcy5nZXQoJ3VzZXJzUm9sZScpO1xyXG4gICAgICAgICAgICAkc2NvcGUuY2xvc2VTaXRlcyA9IDA7XHJcbiAgICAgICAgICAgICRzY29wZS5zaG93TWFwID0gZmFsc2U7XHJcbiAgICAgICAgICAgICRzY29wZS5zaXRlTGF0ID0gMDtcclxuICAgICAgICAgICAgJHNjb3BlLnNpdGVMb25nID0gMDtcclxuICAgICAgICAgICAgJHNjb3BlLmh0bWxEZXNjcmlwdGlvblRpcCA9ICRzY2UudHJ1c3RBc0h0bWwoJ1JlcXVpcmVkIGJ5IE5XSVMuIENhbiBiZSBsaXN0ZWQgYXMgPGVtPlxcJ3Vua25vd25cXCc8L2VtPiBvciA8ZW0+XFwnQXRsYW50aWMgT2NlYW5cXCc8L2VtPicpO1xyXG4gICAgICAgICAgICAkc2NvcGUubWFwQ2VudGVyID0ge1xyXG4gICAgICAgICAgICAgICAgbGF0OiAkc2NvcGUuc2l0ZUxhdCxcclxuICAgICAgICAgICAgICAgIGxuZzogJHNjb3BlLnNpdGVMb25nLFxyXG4gICAgICAgICAgICAgICAgem9vbTogMTdcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5ldmVudHMgPSB7XHJcbiAgICAgICAgICAgICAgICBtYXBNYXJrZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZW5hYmxlOiBsZWFmbGV0TWFya2VyRXZlbnRzLmdldEF2YWlsYWJsZUV2ZW50cygpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRzY29wZS5tYXBNYXJrZXJzID0gW107XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB2YXIgaWNvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICBzdG46IHtcclxuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGl2JyxcclxuICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogWzEwLCAxMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnc3RuU2l0ZUljb24nXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbmV3U1ROOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAgaWNvblNpemU6IFsxMCwgMTBdLFxyXG4gICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ25ld1NpdGVJY29uJyxcclxuICAgICAgICAgICAgICAgICAgICBpY29uQW5jaG9yOiBbNSwgNV1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9jb252ZXJ0IGRlZyBtaW4gc2VjIHRvIGRlYyBkZWdyZWVzXHJcbiAgICAgICAgICAgIHZhciBhemltdXRoID0gZnVuY3Rpb24gKGRlZywgbWluLCBzZWMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhemkgPSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRlZyA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBhemkgPSAtMS4wICogZGVnICsgMS4wICogbWluIC8gNjAuMCArIDEuMCAqIHNlYyAvIDM2MDAuMDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKC0xLjAgKiBhemkpLnRvRml4ZWQoNSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhemkgPSAxLjAgKiBkZWcgKyAxLjAgKiBtaW4gLyA2MC4wICsgMS4wICogc2VjIC8gMzYwMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoYXppKS50b0ZpeGVkKDUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLnVwZGF0ZUFkZHJlc3NPbmx5ID0gZnVuY3Rpb24gKCkgeyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxBRGVnICE9PSB1bmRlZmluZWQpICRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MQURlZywgJHNjb3BlLkRNUy5MQU1pbiwgJHNjb3BlLkRNUy5MQVNlYyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MT0RlZyAhPT0gdW5kZWZpbmVkKSAkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxPRGVnLCAkc2NvcGUuRE1TLkxPTWluLCAkc2NvcGUuRE1TLkxPU2VjKTtcclxuICAgICAgICAgICAgICAgIGRlbGV0ZSAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uO1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgR0VPQ09ERS5nZXRBZGRyZXNzUGFydHMoeyBMb25naXR1ZGU6ICRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQsIExhdGl0dWRlOiAkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQgfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5yZXN1bHQuZ2VvZ3JhcGhpZXMuQ291bnRpZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGVGSVBTID0gcmVzcG9uc2UucmVzdWx0Lmdlb2dyYXBoaWVzLkNvdW50aWVzWzBdLlNUQVRFO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY291bnR5TmFtZSA9IHJlc3BvbnNlLnJlc3VsdC5nZW9ncmFwaGllcy5Db3VudGllc1swXS5OQU1FO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc1N0YXRlSUQgPSAkc2NvcGUuQWxsQ291bnR5TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuc3RhdGVfZmlwID09IHN0YXRlRklQUzsgfSlbMF0uc3RhdGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzU3RhdGUgPSAkc2NvcGUuU3RhdGVMaXN0LmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcy5zdGF0ZV9pZCA9PSB0aGlzU3RhdGVJRDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzU3RhdGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLnN0YXRlID0gdGhpc1N0YXRlLnN0YXRlX2FiYnJldjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZUNvdW50eUxpc3QgPSAkc2NvcGUuQWxsQ291bnR5TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuc3RhdGVfaWQgPT0gdGhpc1N0YXRlLnN0YXRlX2lkOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5jb3VudHkgPSBjb3VudHlOYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiVGhlIExhdGl0dWRlL0xvbmdpdHVkZSBkaWQgbm90IHJldHVybiBhIHJlY29nbml6ZWQgc3RhdGUuIFBsZWFzZSBjaG9vc2Ugb25lIGZyb20gdGhlIGRyb3Bkb3duLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiTm8gbG9jYXRpb24gaW5mb3JtYXRpb24gY2FtZSBiYWNrIGZyb20gdGhhdCBsYXQvbG9uZ1wiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvciAoZXJyb3JSZXNwb25zZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3IgZ2V0dGluZyBsb2NhdGlvbiBpbmZvcm1hdGlvbi5cIik7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8vdXBkYXRlIG5ld1NpdGUgbGF0L2xuZyBhZnRlciBkcmFnZW5kXHJcbiAgICAgICAgICAgICRzY29wZS4kb24oXCJsZWFmbGV0RGlyZWN0aXZlTWFya2VyLmRyYWdlbmRcIiwgZnVuY3Rpb24gKGV2ZW50LCBhcmdzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZHJhZ2VuZExvY2F0aW9uID0gYXJncy5tb2RlbDtcclxuICAgICAgICAgICAgICAgIC8vdXBkYXRlIGxhdC9sb25nXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQgPSBwYXJzZUZsb2F0KGRyYWdlbmRMb2NhdGlvbi5sYXQudG9GaXhlZCg2KSk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkID0gcGFyc2VGbG9hdChkcmFnZW5kTG9jYXRpb24ubG5nLnRvRml4ZWQoNikpO1xyXG4gICAgICAgICAgICAgICAgLy91cGRhdGUgZG1zIGFsc28gaW4gY2FzZSB0aGV5IGhhdmUgdGhhdCBzaG93aW5nXHJcbiAgICAgICAgICAgICAgICB2YXIgbGF0RE1TID0gKGRlZ190b19kbXMoJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkKSkudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgIHZhciBsYWRETVNhcnJheSA9IGxhdERNUy5zcGxpdCgnOicpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MQURlZyA9IGxhZERNU2FycmF5WzBdO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MQU1pbiA9IGxhZERNU2FycmF5WzFdO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MQVNlYyA9IGxhZERNU2FycmF5WzJdO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBsb25nRE1TID0gZGVnX3RvX2Rtcygkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkKTtcclxuICAgICAgICAgICAgICAgIHZhciBsb25nRE1TYXJyYXkgPSBsb25nRE1TLnNwbGl0KCc6Jyk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPRGVnID0gbG9uZ0RNU2FycmF5WzBdICogLTE7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPTWluID0gbG9uZ0RNU2FycmF5WzFdO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MT1NlYyA9IGxvbmdETVNhcnJheVsyXTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudXBkYXRlQWRkcmVzc09ubHkoKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvL2dldCBhZGRyZXNzIHBhcnRzIGFuZCBleGlzdGluZyBzaXRlcyBcclxuICAgICAgICAgICAgJHNjb3BlLmdldEFkZHJlc3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MQURlZyAhPT0gdW5kZWZpbmVkKSAkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTEFEZWcsICRzY29wZS5ETVMuTEFNaW4sICRzY29wZS5ETVMuTEFTZWMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ETVMuTE9EZWcgIT09IHVuZGVmaW5lZCkgJHNjb3BlLmFTaXRlLmxvbmdpdHVkZV9kZCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MT0RlZywgJHNjb3BlLkRNUy5MT01pbiwgJHNjb3BlLkRNUy5MT1NlYyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLmFTaXRlLmxvbmdpdHVkZV9kZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcENlbnRlciA9IHsgbGF0OiBwYXJzZUZsb2F0KCRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCksIGxuZzogcGFyc2VGbG9hdCgkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkKSwgem9vbTogMTggfTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFwTWFya2VycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSB0cnVlOyAvL2xvYWRpbmcuLi5cclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgR0VPQ09ERS5nZXRBZGRyZXNzUGFydHMoeyBMb25naXR1ZGU6ICRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQsIExhdGl0dWRlOiAkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQgfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UucmVzdWx0Lmdlb2dyYXBoaWVzLkNvdW50aWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZUZJUFMgPSByZXNwb25zZS5yZXN1bHQuZ2VvZ3JhcGhpZXMuQ291bnRpZXNbMF0uU1RBVEU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY291bnR5TmFtZSA9IHJlc3BvbnNlLnJlc3VsdC5nZW9ncmFwaGllcy5Db3VudGllc1swXS5OQU1FO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNTdGF0ZUlEID0gJHNjb3BlLkFsbENvdW50eUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnN0YXRlX2ZpcCA9PSBzdGF0ZUZJUFM7IH0pWzBdLnN0YXRlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNTdGF0ZSA9ICRzY29wZS5TdGF0ZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnN0YXRlX2lkID09IHRoaXNTdGF0ZUlEOyB9KVswXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1N0YXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuc3RhdGUgPSB0aGlzU3RhdGUuc3RhdGVfYWJicmV2O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZUNvdW50eUxpc3QgPSAkc2NvcGUuQWxsQ291bnR5TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuc3RhdGVfaWQgPT0gdGhpc1N0YXRlLnN0YXRlX2lkOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuY291bnR5ID0gY291bnR5TmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3NlZSBpZiB0aGVyZSBhcmUgYW55IHNpdGVzIHdpdGhpbiBhIDAuMDAwNSBidWZmZXIgb2YgaGVyZSBmb3IgdGhlbSB0byB1c2UgaW5zdGVhZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNJVEUuZ2V0UHJveGltaXR5U2l0ZXMoeyBMYXRpdHVkZTogJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkLCBMb25naXR1ZGU6ICRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQsIEJ1ZmZlcjogMC4wMDA1IH0sIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNsb3NlU2l0ZXMgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jbG9zZVNpdGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLmNsb3NlU2l0ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYSA9ICRzY29wZS5jbG9zZVNpdGVzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXBNYXJrZXJzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXQ6IGEubGF0aXR1ZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogYS5sb25naXR1ZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6IGEuc2l0ZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9ubzogYS5zaXRlX25vLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpY29ucy5zdG4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6IGEuc2l0ZV9ubyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9jdXM6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcE1hcmtlcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXQ6IHBhcnNlRmxvYXQoJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxuZzogcGFyc2VGbG9hdCgkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IGljb25zLm5ld1NUTixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdOZXcgZHJhZ2dhYmxlIFNUTiBzaXRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dNYXAgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJUaGUgTGF0aXR1ZGUvTG9uZ2l0dWRlIGRpZCBub3QgcmV0dXJuIGEgcmVjb2duaXplZCBzdGF0ZS4gUGxlYXNlIGNob29zZSBvbmUgZnJvbSB0aGUgZHJvcGRvd24uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3IgZ2V0dGluZyBhZGRyZXNzIGxvY2F0aW9uLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdGhleSBkaWQgbm90IHR5cGUgYSBsYXQvbG9uZyBmaXJzdC4uLlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlbXB0eUxhdExvbmdNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5QbGVhc2UgcHJvdmlkZSBhIExhdGl0dWRlIGFuZCBMb25naXR1ZGUgYmVmb3JlIGNsaWNraW5nIFZlcmlmeSBMb2NhdGlvbjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vZ2xvYmFscyBcclxuICAgICAgICAgICAgJHNjb3BlLmhvdXNlRGlydHkgPSBmYWxzZTsgJHNjb3BlLm5ldE5hbWVEaXJ0eSA9IGZhbHNlOyAkc2NvcGUubmV0VHlwZURpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICRzY29wZS5zaXRlSG91c2VUeXBlc1RhYmxlID0gW107XHJcbiAgICAgICAgICAgICRzY29wZS5hU2l0ZSA9IHt9O1xyXG5cclxuICAgICAgICAgICAgLy9pZiBsYXRsb25nLCB0aGVuIGl0J3MgY29taW5nIGZyb20gdGhlIG1hcCB0YWIuIHBvcHVsYXRlIGxhdCxsb25nLGhkYXR1bSBhbmQgZG8gZ2Vvc2VhcmNoXHJcbiAgICAgICAgICAgIGlmIChsYXRsb25nICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCA9IHBhcnNlRmxvYXQobGF0bG9uZ1swXS50b0ZpeGVkKDYpKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQgPSBwYXJzZUZsb2F0KGxhdGxvbmdbMV0udG9GaXhlZCg2KSk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuaGRhdHVtX2lkID0gNDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5oY29sbGVjdF9tZXRob2RfaWQgPSA0O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmdldEFkZHJlc3MoKTsgLy9nZXQgdGhlIGFkZHJlc3MgdXNpbmcgcGFzc2VkIGluIGxhdC9sb25nIGFuZCBjaGVjayBmb3IgbmVhcmJ5IHNpdGVzXHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRzY29wZS5hU2l0ZS5kZWNEZWdPUmRtcyA9ICdkZCc7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAkc2NvcGUub3JpZ2luYWxTaXRlSG91c2luZ3MgPSBbXTtcclxuICAgICAgICAgICAgJHNjb3BlLmNoZWNrZWQgPSBcIlwiOyAkc2NvcGUuY2hlY2tlZE5hbWUgPSBcIk5vdCBEZWZpbmVkXCI7IC8vY29tcGFyZXJzIGZvciBkaXNhYmxpbmcgbmV0d29yayBuYW1lcyBpZiAnTm90IERlZmluZWQnIGNoZWNrZWRcclxuICAgICAgICAgICAgJHNjb3BlLmxhbmRvd25lciA9IHt9O1xyXG4gICAgICAgICAgICAkc2NvcGUuYWRkTGFuZG93bmVyID0gZmFsc2U7IC8vaGlkZSBsYW5kb3duZXIgZmllbGRzXHJcbiAgICAgICAgICAgICRzY29wZS5kaXNhYmxlU2Vuc29yUGFydHMgPSBmYWxzZTsgLy90b2dnbGUgdG8gZGlzYWJsZS9lbmFibGUgc2Vuc29yIGhvdXNpbmcgaW5zdGFsbGVkIGFuZCBhZGQgcHJvcG9zZWQgc2Vuc29yXHJcbiAgICAgICAgICAgICRzY29wZS5zaG93U2l0ZUhvdXNlVGFibGUgPSBmYWxzZTtcclxuICAgICAgICAgICAgJHNjb3BlLnNpdGVIb3VzZVR5cGVzVGFibGUgPSBbXTsgLy9ob2xkZXIgZm9yIHdoZW4gYWRkaW5nIGhvdXNpbmcgdHlwZSB0byBwYWdlIGZyb20gbXVsdGlzZWxlY3RcclxuICAgICAgICAgICAgJHNjb3BlLnNpdGVIb3VzZXNNb2RlbCA9IHt9O1xyXG4gICAgICAgICAgICAkc2NvcGUuc2l0ZUhvdXNlc1RvUmVtb3ZlID0gW107IC8vaG9sZGVyIGZvciBlZGl0aW5nIHNpdGUgdG8gYWRkIHJlbW92aW5nIGhvdXNlIHR5cGVzIHRvIGZvciBQVVRcclxuICAgICAgICAgICAgJHNjb3BlLnNpdGVOZXR3b3JrTmFtZXMgPSBbXTsgLy9ob2xkcyB0aGUgTmV0d29ya05hbWUgKGxpc3Qgb2Ygc3RyaW5ncykgdG8gcGFzcyBiYWNrO1xyXG4gICAgICAgICAgICAkc2NvcGUuc2l0ZU5ldHdvcmtUeXBlcyA9IFtdOyAvL2hvbGRzIHRoZSBOZXR3b3JrVHlwZSAobGlzdCBvZiBzdHJpbmdzKSB0byBwYXNzIGJhY2s7XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vbGF0IG1vZGFsIFxyXG4gICAgICAgICAgICB2YXIgb3BlbkxhdE1vZGFsID0gZnVuY3Rpb24gKHcpIHtcclxuICAgICAgICAgICAgICAgIHZhciBsYXRNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+VGhlIExhdGl0dWRlIG11c3QgYmUgYmV0d2VlbiAwIGFuZCA3My4wPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGxhdE1vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChmaWVsZEZvY3VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHcgPT0gJ2xhdGxvbmcnKSAkKFwiI2xhdGl0dWRlX2RkXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSAkKFwiI0xhRGVnXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vbG9uZyBtb2RhbFxyXG4gICAgICAgICAgICB2YXIgb3BlbkxvbmdNb2RhbCA9IGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbG9uZ01vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGUgTG9uZ2l0dWRlIG11c3QgYmUgYmV0d2VlbiAtMTc1LjAgYW5kIC02MC4wPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGxvbmdNb2RhbC5yZXN1bHQudGhlbihmdW5jdGlvbiAoZmllbGRGb2N1cykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh3ID09ICdsYXRsb25nJykgJChcIiNsb25naXR1ZGVfZGRcIikuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICBlbHNlICQoXCIjTG9EZWdcIikuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9tYWtlIHN1cmUgbGF0L2xvbmcgYXJlIHJpZ2h0IG51bWJlciByYW5nZVxyXG4gICAgICAgICAgICAkc2NvcGUuY2hlY2tWYWx1ZSA9IGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZCA9PSAnZG1zJykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgdGhlIGRlZ3JlZSB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxBRGVnIDwgMCB8fCAkc2NvcGUuRE1TLkxBRGVnID4gNzMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkxhdE1vZGFsKCdkbXMnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ETVMuTE9EZWcgPCAtMTc1IHx8ICRzY29wZS5ETVMuTE9EZWcgPiAtNjApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkxvbmdNb2RhbCgnZG1zJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIHRoZSBsYXRpdHVkZS9sb25naXR1ZGVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkIDwgMCB8fCAkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQgPiA3Mykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuTGF0TW9kYWwoJ2xhdGxvbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQgPCAtMTc1IHx8ICRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQgPiAtNjApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkxvbmdNb2RhbCgnbGF0bG9uZycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vY29udmVydCBkZWMgZGVncmVlcyB0byBkbXNcclxuICAgICAgICAgICAgdmFyIGRlZ190b19kbXMgPSBmdW5jdGlvbiAoZGVnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVnIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZyA9IGRlZy50b1N0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2xvbmdpdHVkZSwgcmVtb3ZlIHRoZSAtIHNpZ25cclxuICAgICAgICAgICAgICAgICAgICBkZWcgPSBkZWcuc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGQgPSBNYXRoLmZsb29yKGRlZyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWluZmxvYXQgPSAoZGVnIC0gZCkgKiA2MDtcclxuICAgICAgICAgICAgICAgIHZhciBtID0gTWF0aC5mbG9vcihtaW5mbG9hdCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcyA9ICgobWluZmxvYXQgLSBtKSAqIDYwKS50b0ZpeGVkKDMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiAoXCJcIiArIGQgKyBcIjpcIiArIG0gKyBcIjpcIiArIHMpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy90aGV5IGNoYW5nZWQgcmFkaW8gYnV0dG9uIGZvciBkbXMgZGVjIGRlZ1xyXG4gICAgICAgICAgICAkc2NvcGUubGF0TG9uZ0NoYW5nZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNpdGUuZGVjRGVnT1JkbXMgPT0gXCJkZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy90aGV5IGNsaWNrZWQgRGVjIERlZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ETVMuTEFEZWcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnZlcnQgd2hhdCdzIGhlcmUgZm9yIGVhY2ggbGF0IGFuZCBsb25nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MQURlZywgJHNjb3BlLkRNUy5MQU1pbiwgJHNjb3BlLkRNUy5MQVNlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTE9EZWcsICRzY29wZS5ETVMuTE9NaW4sICRzY29wZS5ETVMuTE9TZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdGhleSBjbGlja2VkIGRtcyAoY29udmVydCBsYXQvbG9uZyB0byBkbXMpXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYXRETVMgPSAoZGVnX3RvX2Rtcygkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQpKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFkRE1TYXJyYXkgPSBsYXRETVMuc3BsaXQoJzonKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MQURlZyA9IGxhZERNU2FycmF5WzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxBTWluID0gbGFkRE1TYXJyYXlbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTEFTZWMgPSBsYWRETVNhcnJheVsyXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb25nRE1TID0gZGVnX3RvX2Rtcygkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvbmdETVNhcnJheSA9IGxvbmdETVMuc3BsaXQoJzonKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MT0RlZyA9IGxvbmdETVNhcnJheVswXSAqIC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPTWluID0gbG9uZ0RNU2FycmF5WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPU2VjID0gbG9uZ0RNU2FycmF5WzJdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vbmV0d29ya1R5cGUgY2hlY2sgZXZlbnQgLS10cmlnZ2VyIGRpcnR5XHJcbiAgICAgICAgICAgICRzY29wZS5uZXRUeXBlQ2hnID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ldFR5cGVEaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL25ldHdvcmtOYW1lIGNoZWNrIGV2ZW50Li4gaWYgXCJOb3QgRGVmaW5lZFwiIGNob3NlbiwgZGlzYWJsZSB0aGUgb3RoZXIgMiBjaGVja2JveGVzXHJcbiAgICAgICAgICAgICRzY29wZS53aGljaE9uZSA9IGZ1bmN0aW9uIChuKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV0TmFtZURpcnR5ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIGlmIChuLm5hbWUgPT0gXCJOb3QgRGVmaW5lZFwiICYmIG4uc2VsZWN0ZWQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3RoZXkgY2hlY2tlZCBcIm5vdCBkZWZpbmVkXCJcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBubiA9IDA7IG5uIDwgJHNjb3BlLk5ldE5hbWVMaXN0Lmxlbmd0aDsgbm4rKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3Vuc2VsZWN0IGFsbCBidXQgbm90IGRlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5OZXROYW1lTGlzdFtubl0ubmFtZSAhPSBcIk5vdCBEZWZpbmVkXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTmV0TmFtZUxpc3Rbbm5dLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vbWFrZSB0aGVzZSBtYXRjaCBzbyByZXN0IGdldCBkaXNhYmxlZFxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jaGVja2VkID0gXCJOb3QgRGVmaW5lZFwiO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy90aGV5IHRoZXkgdW5jaGVja2VkIG5vdCBkZWZpbmUsIHVubWF0Y2ggdmFycyBzbyB0aGUgb3RoZXIgYmVjb21lIGVuYWJsZWRcclxuICAgICAgICAgICAgICAgIGlmIChuLm5hbWUgPT0gXCJOb3QgRGVmaW5lZFwiICYmIG4uc2VsZWN0ZWQgPT09IGZhbHNlKVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jaGVja2VkID0gXCJcIjtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vdG9nZ2xlIGRpbSBvbiBkaXYgZm9yIHNlbnNvciBub3QgYXBwcm9wcmlhdGUgY2xpY2tcclxuICAgICAgICAgICAgJHNjb3BlLmRpbUFjdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNpdGUuc2Vuc29yX25vdF9hcHByb3ByaWF0ZSA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRpc2FibGVTZW5zb3JQYXJ0cyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jbGVhciByYWRpbyBhbmQgY2hlY2tib3hlcyBpZiBkaXNhYmxpbmdcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8ICRzY29wZS5Qcm9wb3NlZFNlbnMubGVuZ3RoOyB4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlByb3Bvc2VkU2Vuc1t4XS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuaXNfcGVybWFuZW50X2hvdXNpbmdfaW5zdGFsbGVkID0gXCJOb1wiO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzYWJsZVNlbnNvclBhcnRzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUudXNlU2l0ZUFkZHJlc3M7XHJcbiAgICAgICAgICAgICRzY29wZS51c2VBZGRyZXNzZm9yTE8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnVzZVNpdGVBZGRyZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxhbmRvd25lci5hZGRyZXNzID0gJHNjb3BlLmFTaXRlLmFkZHJlc3M7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxhbmRvd25lci5jaXR5ID0gJHNjb3BlLmFTaXRlLmNpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxhbmRvd25lci5zdGF0ZSA9ICRzY29wZS5hU2l0ZS5zdGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGFuZG93bmVyLnppcCA9ICRzY29wZS5hU2l0ZS56aXA7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sYW5kb3duZXIuYWRkcmVzcyA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxhbmRvd25lci5jaXR5ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGFuZG93bmVyLnN0YXRlID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGFuZG93bmVyLnppcCA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vc2l0ZSBQVVRcclxuICAgICAgICAgICAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSB0cnVlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZSB0aGUgc2l0ZVxyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9kaWQgdGhleSBhZGQgb3IgZWRpdCB0aGUgbGFuZG93bmVyXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hZGRMYW5kb3duZXIgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGVyZSdzIGEgbGFuZG93bmVyLi4gZWRpdCBvciBhZGQ/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNpdGUubGFuZG93bmVyY29udGFjdF9pZCAhPT0gbnVsbCAmJiAkc2NvcGUuYVNpdGUubGFuZG93bmVyY29udGFjdF9pZCAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5hU2l0ZS5sYW5kb3duZXJjb250YWN0X2lkID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9kaWQgdGhleSBjaGFuZ2UgYW55dGhpbmcgdG8gd2FycmVudCBhIHB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTEFORE9XTkVSX0NPTlRBQ1QudXBkYXRlKHsgaWQ6ICRzY29wZS5hU2l0ZS5sYW5kb3duZXJjb250YWN0X2lkIH0sICRzY29wZS5sYW5kb3duZXIpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1dFNpdGVBbmRQYXJ0cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoJHNjb3BlLmxhbmRvd25lci5mbmFtZSAhPT0gdW5kZWZpbmVkIHx8ICRzY29wZS5sYW5kb3duZXIubG5hbWUgIT09IHVuZGVmaW5lZCB8fCAkc2NvcGUubGFuZG93bmVyLnRpdGxlICE9PSB1bmRlZmluZWQgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubGFuZG93bmVyLmFkZHJlc3MgIT09IHVuZGVmaW5lZCB8fCAkc2NvcGUubGFuZG93bmVyLmNpdHkgIT09IHVuZGVmaW5lZCB8fCAkc2NvcGUubGFuZG93bmVyLnByaW1hcnlwaG9uZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RoZXkgYWRkZWQgc29tZXRoaW5nLi4gUE9TVCAocmF0aGVyIHRoYW4ganVzdCBjbGlja2luZyBidXR0b24gYW5kIG5vdClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIExBTkRPV05FUl9DT05UQUNULnNhdmUoJHNjb3BlLmxhbmRvd25lciwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5sYW5kb3duZXJjb250YWN0X2lkID0gcmVzcG9uc2UubGFuZG93bmVyY29udGFjdGlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHB1dFNpdGVBbmRQYXJ0cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkgeyB0b2FzdHIuZXJyb3IoXCJFcnJvciBhZGRpbmcgTGFuZG93bmVyOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgcHV0U2l0ZUFuZFBhcnRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHB1dFNpdGVBbmRQYXJ0cygpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9Oy8vZW5kIHNhdmVcclxuICAgICAgICAgICAgdmFyIHB1dFNpdGVBbmRQYXJ0cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxBRGVnICE9PSB1bmRlZmluZWQpICRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MQURlZywgJHNjb3BlLkRNUy5MQU1pbiwgJHNjb3BlLkRNUy5MQVNlYyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MT0RlZyAhPT0gdW5kZWZpbmVkKSAkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxPRGVnLCAkc2NvcGUuRE1TLkxPTWluLCAkc2NvcGUuRE1TLkxPU2VjKTtcclxuICAgICAgICAgICAgICAgIHZhciB1cGRhdGVTaXRlID0gYW5ndWxhci5jb3B5KCRzY29wZS5hU2l0ZSk7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdXBkYXRlU2l0ZS5DcmVhdG9yOyBkZWxldGUgdXBkYXRlU2l0ZS5Ib3Jpem9udGFsQ29sbGVjdE1ldGhvZDsgZGVsZXRlIHVwZGF0ZVNpdGUuSG9yaXpvbnRhbERhdHVtOyBkZWxldGUgdXBkYXRlU2l0ZS5Qcmlvcml0eU5hbWU7XHJcbiAgICAgICAgICAgICAgICBkZWxldGUgdXBkYXRlU2l0ZS5kZWNEZWdPUmRtczsgXHJcbiAgICAgICAgICAgICAgICBTSVRFLnVwZGF0ZSh7IGlkOiAkc2NvcGUuYVNpdGUuc2l0ZV9pZCB9LCB1cGRhdGVTaXRlLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy91cGRhdGUgc2l0ZSBob3VzaW5nc1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZWZlciA9ICRxLmRlZmVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIFJlbW92ZVByb21pc2VzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIEFkZFByb21pc2VzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgLy9SZW1vdmUgc2l0ZUhvdXNpbmdzICh0aGVzZSBhcmUganVzdCBzaXRlX2hvdXNpbmdfaWQgJ3NcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLnNpdGVIb3VzZXNUb1JlbW92ZSwgZnVuY3Rpb24gKHNoSUQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbFNIUHJvbSA9IFNJVEVfSE9VU0lORy5kZWxldGUoeyBpZDogc2hJRCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUmVtb3ZlUHJvbWlzZXMucHVzaChkZWxTSFByb20pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL1JlbW92ZSBOZXROYW1lc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubmV0TmFtZURpcnR5ID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuTmV0TmFtZUxpc3QsIGZ1bmN0aW9uIChubkwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChubkwuc2VsZWN0ZWQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9kZWxldGUgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vblsnWC1IVFRQLU1ldGhvZC1PdmVycmlkZSddID0gJ0RFTEVURSc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbE5OUHJvbSA9IFNJVEUuZGVsZXRlU2l0ZU5ldHdvcmtOYW1lKHsgc2l0ZUlkOiAkc2NvcGUuYVNpdGUuc2l0ZV9pZCwgbmV0d29ya05hbWVJZDogbm5MLm5ldHdvcmtfbmFtZV9pZCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZW1vdmVQcm9taXNlcy5wdXNoKGRlbE5OUHJvbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUhUVFAtTWV0aG9kLU92ZXJyaWRlJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0vL2VuZCBuZXROYW1lIGRpcnR5XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vUmVtb3ZlIE5ldFR5cGVzXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5uZXRUeXBlRGlydHkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5OZXRUeXBlTGlzdCwgZnVuY3Rpb24gKG50TCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG50TC5zZWxlY3RlZCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2RlbGV0ZSBpdCBpZiB0aGV5IGFyZSByZW1vdmluZyBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUhUVFAtTWV0aG9kLU92ZXJyaWRlJ10gPSAnREVMRVRFJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgTlR0b0RlbGV0ZSA9IHsgbmV0d29ya190eXBlX2lkOiBudEwubmV0d29ya190eXBlX2lkLCBuZXR3b3JrX3R5cGVfbmFtZTogbnRMLm5ldHdvcmtfdHlwZV9uYW1lIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlbE5UUHJvbSA9IFNJVEUuZGVsZXRlU2l0ZU5ldHdvcmtUeXBlKHsgc2l0ZUlkOiAkc2NvcGUuYVNpdGUuc2l0ZV9pZCwgbmV0d29ya1R5cGVJZDogbnRMLm5ldHdvcmtfdHlwZV9pZCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZW1vdmVQcm9taXNlcy5wdXNoKGRlbE5UUHJvbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUhUVFAtTWV0aG9kLU92ZXJyaWRlJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0vL2VuZCBuZXRUeXBlIGRpcnR5XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vQWRkIHNpdGVIb3VzaW5nc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuaG91c2VEaXJ0eSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLnNpdGVIb3VzZVR5cGVzVGFibGUsIGZ1bmN0aW9uIChodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFkZEh0UHJvbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChodC5zaXRlX2hvdXNpbmdfaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vUFVUIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkSHRQcm9tID0gU0lURV9IT1VTSU5HLnVwZGF0ZSh7IGlkOiBodC5zaXRlX2hvdXNpbmdfaWQgfSwgaHQpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL1BPU1QgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBodC5zaXRlX2lkID0gJHNjb3BlLmFTaXRlLnNpdGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWRkSHRQcm9tID0gU0lURV9IT1VTSU5HLnNhdmUoaHQpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQWRkUHJvbWlzZXMucHVzaChhZGRIdFByb20pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgdGhleSB0b3VjaGVkIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgLy9BZGQgTmV0TmFtZXNcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLk5ldE5hbWVMaXN0LCBmdW5jdGlvbiAoQW5uTCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQW5uTC5zZWxlY3RlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVOZXR3b3JrTmFtZXMucHVzaChBbm5MLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wb3N0IGl0IChpZiBpdCdzIHRoZXJlIGFscmVhZHksIGl0IHdvbid0IGRvIGFueXRoaW5nKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFkZE5OUHJvbSA9IFNJVEUucG9zdFNpdGVOZXR3b3JrTmFtZSh7IHNpdGVJZDogJHNjb3BlLmFTaXRlLnNpdGVfaWQsIG5ldHdvcmtOYW1lSWQ6IEFubkwubmV0d29ya19uYW1lX2lkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQWRkUHJvbWlzZXMucHVzaChhZGROTlByb20pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9BZGQgTmV0VHlwZXNcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLk5ldFR5cGVMaXN0LCBmdW5jdGlvbiAoQW5UTCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoQW5UTC5zZWxlY3RlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVOZXR3b3JrVHlwZXMucHVzaChBblRMLm5ldHdvcmtfdHlwZV9uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgcG9zdCBpdCAoaWYgaXQncyB0aGVyZSBhbHJlYWR5LCBpdCB3b24ndCBkbyBhbnl0aGluZylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhZGROVFByb20gPSBTSVRFLnBvc3RTaXRlTmV0d29ya1R5cGUoeyBzaXRlSWQ6ICRzY29wZS5hU2l0ZS5zaXRlX2lkLCBuZXR3b3JrVHlwZUlkOiBBblRMLm5ldHdvcmtfdHlwZV9pZCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEFkZFByb21pc2VzLnB1c2goYWRkTlRQcm9tKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL29rIG5vdyBydW4gdGhlIHJlbW92ZXMsIHRoZW4gdGhlIGFkZHMgYW5kIHRoZW4gcGFzcyB0aGUgc3R1ZmYgYmFjayBvdXQgb2YgaGVyZS5cclxuICAgICAgICAgICAgICAgICAgICAkcS5hbGwoUmVtb3ZlUHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcS5hbGwoQWRkUHJvbWlzZXMpLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VuZEJhY2sgPSBbJHNjb3BlLmFTaXRlLCAkc2NvcGUuc2l0ZU5ldHdvcmtOYW1lcywgJHNjb3BlLnNpdGVOZXR3b3JrVHlwZXNdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uoc2VuZEJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiU2l0ZSB1cGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8kbG9jYXRpb24ucGF0aCgnL1NpdGUvJyArICRzY29wZS5hU2l0ZS5zaXRlX2lkICsgJy9TaXRlRGFzaGJvYXJkJykucmVwbGFjZSgpOy8vLm5vdGlmeShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5hcHBseTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gZXJyb3IobXNnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIGVycm9yKG1zZykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKG1zZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7IC8vYWxsIGFkZGVkXHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciB1cGRhdGluZyBTaXRlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9KTsvL2VuZCBTSVRFLnNhdmUoLi4uXHJcbiAgICAgICAgICAgIH07IC8vIGVuZCBQVVRzaXRlKClcclxuXHJcbiAgICAgICAgICAgIC8vY3JlYXRlIHRoaXMgc2l0ZSBjbGlja2VkICgzIHNlcGFyYXRlIGZ1bmN0aW9ucy4uIDE6IGxhbmRvd25lciwgMjogdGhlIHNpdGUgYW5kIHByb3Bvc2VkIGluc3RydW1lbnRzLCAzOiBuZXR3b3JrIG5hbWVzICYgdHlwZXMsIGhvdXNpbmcgdHlwZXNcclxuICAgICAgICAgICAgdmFyIGZpbmlzaFBPU1QgPSBmdW5jdGlvbiAoc0lEKSB7XHJcbiAgICAgICAgICAgICAgICAvL2RvIGFsbCB0aGUgcmVzdC4uLi5cclxuICAgICAgICAgICAgICAgIHZhciBkZWZlciA9ICRxLmRlZmVyKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcG9zdFByb21pc2VzID0gW107XHJcbiAgICAgICAgICAgICAgICAvL3NpdGVfaG91c2luZ1R5cGVzIChpZiBhbnkpXHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLnNpdGVIb3VzZVR5cGVzVGFibGUsIGZ1bmN0aW9uIChodHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGh0eXBlLnNpdGVfaWQgPSBzSUQ7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGh0eXBlLnR5cGVfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaFRQcm9taXNlID0gU0lURV9IT1VTSU5HLnNhdmUoaHR5cGUpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHBvc3RQcm9taXNlcy5wdXNoKGhUUHJvbWlzZSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vc2l0ZV9OZXR3b3JrTmFtZXNcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuTmV0TmFtZUxpc3QsIGZ1bmN0aW9uIChuTmFtZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuTmFtZS5zZWxlY3RlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbk5Qcm9taXNlID0gU0lURS5wb3N0U2l0ZU5ldHdvcmtOYW1lKHsgc2l0ZUlkOiBzSUQsIG5ldHdvcmtOYW1lSWQ6IG5OYW1lLm5ldHdvcmtfbmFtZV9pZCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdFByb21pc2VzLnB1c2gobk5Qcm9taXNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vc2l0ZV9OZXR3b3JrVHlwZXNcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuTmV0VHlwZUxpc3QsIGZ1bmN0aW9uIChuVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuVHlwZS5zZWxlY3RlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgblRQcm9taXNlID0gU0lURS5wb3N0U2l0ZU5ldHdvcmtUeXBlKHsgc2l0ZUlkOiBzSUQsIG5ldHdvcmtUeXBlSWQ6IG5UeXBlLm5ldHdvcmtfdHlwZV9pZCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdFByb21pc2VzLnB1c2goblRQcm9taXNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vd2hlbiBhbGwgdGhlIHByb21pc2VzIGFyZSBkb25lXHJcbiAgICAgICAgICAgICAgICAkcS5hbGwocG9zdFByb21pc2VzKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsgLy8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbnl0aGluZyB5b3Ugd2FudCBjYW4gZ28gaGVyZSBhbmQgd2lsbCBzYWZlbHkgYmUgcnVuIG9uIHRoZSBuZXh0IGRpZ2VzdC4gICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnc2l0ZS5kYXNoYm9hcmQnLCB7IGlkOiBzSUQgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTsvL2VuZCAkcVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkc2NvcGUuY3JlYXRlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gdHJ1ZTsgLy8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgLy9QT1NUIGxhbmRvd25lciwgaWYgdGhleSBhZGRlZCBvbmVcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSAkc2NvcGUuYVNpdGUuQ3JlYXRvcjsgZGVsZXRlICRzY29wZS5hU2l0ZS5kZWNEZWdPUmRtcztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFkZExhbmRvd25lciA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmxhbmRvd25lci5mbmFtZSAhPT0gdW5kZWZpbmVkIHx8ICRzY29wZS5sYW5kb3duZXIubG5hbWUgIT09IHVuZGVmaW5lZCB8fCAkc2NvcGUubGFuZG93bmVyLnRpdGxlICE9PSB1bmRlZmluZWQgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmxhbmRvd25lci5hZGRyZXNzICE9PSB1bmRlZmluZWQgfHwgJHNjb3BlLmxhbmRvd25lci5jaXR5ICE9PSB1bmRlZmluZWQgfHwgJHNjb3BlLmxhbmRvd25lci5wcmltYXJ5cGhvbmUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTEFORE9XTkVSX0NPTlRBQ1Quc2F2ZSgkc2NvcGUubGFuZG93bmVyLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLmxhbmRvd25lcmNvbnRhY3RfaWQgPSByZXNwb25zZS5sYW5kb3duZXJjb250YWN0aWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3cgcG9zdCB0aGUgc2l0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RTaXRlQW5kUGFydHMoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBwb3N0aW5nIGxhbmRvd25lcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3N0U2l0ZUFuZFBhcnRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3N0U2l0ZUFuZFBhcnRzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2YXIgcG9zdFNpdGVBbmRQYXJ0cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlIGxvbmdpdHVkZSBpcyA8IDAsIG90aGVyd2lzZSAqICgtMSksXHJcbiAgICAgICAgICAgICAgICB2YXIgY3JlYXRlZFNpdGVJRCA9IDA7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MQURlZyAhPT0gdW5kZWZpbmVkKSAkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTEFEZWcsICRzY29wZS5ETVMuTEFNaW4sICRzY29wZS5ETVMuTEFTZWMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ETVMuTE9EZWcgIT09IHVuZGVmaW5lZCkgJHNjb3BlLmFTaXRlLmxvbmdpdHVkZV9kZCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MT0RlZywgJHNjb3BlLkRNUy5MT01pbiwgJHNjb3BlLkRNUy5MT1NlYyk7XHJcbiAgICAgICAgICAgICAgICAvL1BPU1Qgc2l0ZVxyXG4gICAgICAgICAgICAgICAgU0lURS5zYXZlKCRzY29wZS5hU2l0ZSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRTaXRlSUQgPSByZXNwb25zZS5zaXRlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZG8gcHJvcG9zZWQgc2Vuc29ycyBmaXJzdCBzaW5jZSBpdCdzIDIgcGFydHMgdG8gaXQuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5kaXNhYmxlU2Vuc29yUGFydHMgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbm90IGRpc2FibGVkLi5jb3VsZCBiZSBzZWxlY3RlZCBwcm9wb3NlZCBzZW5zb3JzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZFByb3Bvc2VkU2Vuc29ycyA9ICRzY29wZS5Qcm9wb3NlZFNlbnMuZmlsdGVyKGZ1bmN0aW9uIChwKSB7IHJldHVybiBwLnNlbGVjdGVkID09PSB0cnVlOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlbGVjdGVkUHJvcG9zZWRTZW5zb3JzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChzZWxlY3RlZFByb3Bvc2VkU2Vuc29ycywgZnVuY3Rpb24gKHByb3BTZW5zLCBpbmRleCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vUE9TVCBlYWNoIHNlbnNvciBhbmQgc3RhdHVzIHR5cGUgKGFmdGVyIGdvaW5nIHRocnUgdGhlIHNlbnNEZXBzIHRvIGdldCB0aGUgbWF0Y2hpbmcgZGVwbG95bWVudHR5cGVpZCBmcm9tIGVhY2ggc2Vuc29yJ3MgaW5uZXIgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzSUQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuU2Vuc29yRGVwbG95bWVudCwgZnVuY3Rpb24gKHNkdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHNkdC5kZXBsb3ltZW50dHlwZXMubGVuZ3RoOyB4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZHQuZGVwbG95bWVudHR5cGVzW3hdLmRlcGxveW1lbnRfdHlwZV9pZCA9PSBwcm9wU2Vucy5kZXBsb3ltZW50X3R5cGVfaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc0lEID0gc2R0LnNlbnNvcl90eXBlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW5zb3JUeXBlSUQgPSBzSUQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluc3QgPSB7IGRlcGxveW1lbnRfdHlwZV9pZDogcHJvcFNlbnMuZGVwbG95bWVudF90eXBlX2lkLCBzaXRlX2lkOiBjcmVhdGVkU2l0ZUlELCBzZW5zb3JfdHlwZV9pZDogc2Vuc29yVHlwZUlEIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSU5TVFJVTUVOVC5zYXZlKGluc3QpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGluc1Jlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbnN0U3RhdCA9IHsgaW5zdHJ1bWVudF9pZDogaW5zUmVzcG9uc2UuaW5zdHJ1bWVudF9pZCwgc3RhdHVzX3R5cGVfaWQ6IDQsIG1lbWJlcl9pZDogJHNjb3BlLmFTaXRlLm1lbWJlcl9pZCwgdGltZV9zdGFtcDogbmV3IERhdGUoKSwgdGltZV96b25lOiAnVVRDJyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJTlNUUlVNRU5UX1NUQVRVUy5zYXZlKGluc3RTdGF0KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vd2hlbiBkb25lIGxvb3BpbmcsIGdvIHRvIGxhc3Qgc3RlcCBpbiB0aGlzIHBvc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpbmRleCA9PSBzZWxlY3RlZFByb3Bvc2VkU2Vuc29ycy5sZW5ndGggLSAxKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbmlzaFBPU1QoY3JlYXRlZFNpdGVJRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIGFkZGluZyBwcm9wb3NlZCBTZW5zb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgc3RhdHVzIHBvc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3IgYWRkaW5nIHByb3Bvc2VkIFNlbnNvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIHNlbnNvciBwb3N0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBhbmd1bGFyLmZvcmVhY2ggb24gcHJvcG9zZWQgc2Vuc29yc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgZmluaXNoUE9TVChjcmVhdGVkU2l0ZUlEKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaW5pc2hQT1NUKGNyZWF0ZWRTaXRlSUQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOyAvLyBsb2FkaW5nLi4gXHJcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3IgY3JlYXRpbmcgc2l0ZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07Ly9lbmQgcG9zdFNpdGVhbmQgUGFydHNcclxuICAgICAgICBcclxuICAgICAgICAgICAgaWYgKHRoaXNTaXRlU3R1ZmYgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIGV4aXN0aW5nIHNpdGUgXHJcbiAgICAgICAgICAgICAgICAvLyRzY29wZS5hU2l0ZVswXSwgJHNjb3BlLm9yaWdpbmFsU2l0ZUhvdXNpbmdzWzFdLCAkc2NvcGUuZXhpc3RpbmdTaXRlSG91c2VUeXBlc1RhYmxlWzJdLCB0aGlzU2l0ZU5ldHdvcmtOYW1lc1szXSwgc2l0ZU5ldHdvcmtUeXBlc1s0XSwgJHNjb3BlLmxhbmRvd25lcls1XVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlID0gYW5ndWxhci5jb3B5KHRoaXNTaXRlU3R1ZmZbMF0pO1xyXG4gICAgICAgICAgICAgICAgLy9mb3Igc29tZSByZWFzb24gdGhlcmUgYXJlIHRvbnMgb2Ygc2l0ZXMgd2l0aCBoY29sbGVjdF9tZXRob2RfaWQgc2V0IHRvIDAgd2hlbiBpdCdzIHJlcXVpcmVkLi5tYWtlIGl0IG51bGwgc28gdmFsaWRhdGlvbiBwaWNrcyB1cCBvbiByZXF1aXJlZCBmaWVsZFxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU2l0ZS5oY29sbGVjdF9tZXRob2RfaWQgPD0gMCkgJHNjb3BlLmFTaXRlLmhjb2xsZWN0X21ldGhvZF9pZCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAvL2lmIHRoaXMgc2l0ZSBpcyBub3QgYXBwcm9wcmlhdGUgZm9yIHNlbnNvciwgZGltIG5leHQgMiBmaWVsZHNcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNpdGUuc2Vuc29yX25vdF9hcHByb3ByaWF0ZSA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzYWJsZVNlbnNvclBhcnRzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAvL2NsZWFyIHJhZGlvIGFuZCBjaGVja2JveGVzIGlmIGRpc2FibGluZ1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgJHNjb3BlLlByb3Bvc2VkU2Vucy5sZW5ndGg7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUHJvcG9zZWRTZW5zW3hdLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5pc19wZXJtYW5lbnRfaG91c2luZ19pbnN0YWxsZWQgPSBcIk5vXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy91cGRhdGUgY291bnRpZXNMaXN0IHdpdGggdGhpcyBzdGF0ZSdzIGNvdW50aWVzXHJcbiAgICAgICAgICAgICAgICB2YXIgdGhpc1N0YXRlID0gJHNjb3BlLlN0YXRlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc3RhdGVfYWJicmV2ID09ICRzY29wZS5hU2l0ZS5zdGF0ZTsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVDb3VudHlMaXN0ID0gJHNjb3BlLkFsbENvdW50eUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnN0YXRlX2lkID09IHRoaXNTdGF0ZS5zdGF0ZV9pZDsgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9hcHBseSBhbnkgc2l0ZSBob3VzaW5ncyBmb3IgRURJVFxyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXNTaXRlU3R1ZmZbMV0ubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5vcmlnaW5hbFNpdGVIb3VzaW5ncyA9IHRoaXNTaXRlU3R1ZmZbMV07IC8vZm9yIG11bHRpc2VsZWN0IC5zZWxlY3RlZCA9IHRydWUvZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1NpdGVIb3VzZVRhYmxlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZUhvdXNlVHlwZXNUYWJsZSA9IHRoaXNTaXRlU3R1ZmZbMl07IC8vZm9yIHRhYmxlIHRvIHNob3cgYWxsIGluZm8gb24gaG91c2UgdHlwZVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sYW5kb3duZXIgPSB0aGlzU2l0ZVN0dWZmWzVdO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRMYW5kb3duZXIgPSAkc2NvcGUubGFuZG93bmVyLmZuYW1lICE9PSB1bmRlZmluZWQgfHwgJHNjb3BlLmxhbmRvd25lci5sbmFtZSAhPT0gdW5kZWZpbmVkIHx8ICRzY29wZS5sYW5kb3duZXIuYWRkcmVzcyAhPT0gdW5kZWZpbmVkIHx8ICRzY29wZS5sYW5kb3duZXIucHJpbWFyeXBob25lICE9PSB1bmRlZmluZWQgPyB0cnVlIDogZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vZ28gdGhyb3VnaCBhbGxIb3VzaW5nVHlwZUxpc3QgYW5kIGFkZCBzZWxlY3RlZCBQcm9wZXJ0eS5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBodCA9IDA7IGh0IDwgJHNjb3BlLmFsbEhvdXNpbmdUeXBlTGlzdC5sZW5ndGg7IGh0KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9mb3IgZWFjaCBvbmUsIGlmIHRoaXNTaXRlSG91c2luZ3MgaGFzIHRoaXMgaWQsIGFkZCAnc2VsZWN0ZWQ6dHJ1ZScgZWxzZSBhZGQgJ3NlbGVjdGVkOmZhbHNlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8ICRzY29wZS5vcmlnaW5hbFNpdGVIb3VzaW5ncy5sZW5ndGg7IHkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5vcmlnaW5hbFNpdGVIb3VzaW5nc1t5XS5ob3VzaW5nX3R5cGVfaWQgPT0gJHNjb3BlLmFsbEhvdXNpbmdUeXBlTGlzdFtodF0uaG91c2luZ190eXBlX2lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbEhvdXNpbmdUeXBlTGlzdFtodF0uc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSAkc2NvcGUub3JpZ2luYWxTaXRlSG91c2luZ3MubGVuZ3RoOyAvL2Vuc3VyZXMgaXQgZG9lc24ndCBzZXQgaXQgYXMgZmFsc2UgYWZ0ZXIgc2V0dGluZyBpdCBhcyB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsSG91c2luZ1R5cGVMaXN0W2h0XS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUub3JpZ2luYWxTaXRlSG91c2luZ3MubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbEhvdXNpbmdUeXBlTGlzdFtodF0uc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIGlmIHRoaXNTaXRlSG91c2luZ3MgIT0gdW5kZWZpbmVkXHJcblxyXG4gICAgICAgICAgICAgICAgLy9hcHBseSBhbnkgc2l0ZSBuZXR3b3JrIG5hbWVzIG9yIHR5cGVzXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpc1NpdGVTdHVmZlszXS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9mb3IgZWFjaCAkc2NvcGUuTmV0TmFtZUxpc3QgLi4gYWRkIC5zZWxlY3RlZCBwcm9wZXJ0eSA9IHRydWUvZmFsc2UgaWYgdGhpc3NpdGVuZXR3b3JrbmFtZXMgPT1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhID0gMDsgYSA8ICRzY29wZS5OZXROYW1lTGlzdC5sZW5ndGg7IGErKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBlID0gMDsgZSA8IHRoaXNTaXRlU3R1ZmZbM10ubGVuZ3RoOyBlKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzU2l0ZVN0dWZmWzNdW2VdLm5ldHdvcmtfbmFtZV9pZCA9PSAkc2NvcGUuTmV0TmFtZUxpc3RbYV0ubmV0d29ya19uYW1lX2lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5ldE5hbWVMaXN0W2FdLnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlID0gdGhpc1NpdGVTdHVmZlszXS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OZXROYW1lTGlzdFthXS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTaXRlU3R1ZmZbM10ubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OZXROYW1lTGlzdFthXS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuTmV0TmFtZUxpc3RbMF0uc2VsZWN0ZWQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHRoZXNlIG1hdGNoIHNvIHJlc3QgZ2V0IGRpc2FibGVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jaGVja2VkID0gXCJOb3QgRGVmaW5lZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0vL2VuZCBpZiB0aGlzU2l0ZU5ldHdvcmtOYW1lcyAhPSB1bmRlZmluZWRcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpc1NpdGVTdHVmZls0XS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9mb3IgZWFjaCAkc2NvcGUuTmV0VHlwZUxpc3QgLi4gYWRkIC5zZWxlY3RlZCBwcm9wZXJ0eSA9IHRydWUvZmFsc2UgaWYgdGhpc3NpdGVuZXR3b3JrdHlwZXMgPT1cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuaSA9IDA7IG5pIDwgJHNjb3BlLk5ldFR5cGVMaXN0Lmxlbmd0aDsgbmkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBueSA9IDA7IG55IDwgdGhpc1NpdGVTdHVmZls0XS5sZW5ndGg7IG55KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzU2l0ZVN0dWZmWzRdW255XS5uZXR3b3JrX3R5cGVfaWQgPT0gJHNjb3BlLk5ldFR5cGVMaXN0W25pXS5uZXR3b3JrX3R5cGVfaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTmV0VHlwZUxpc3RbbmldLnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBueSA9IHRoaXNTaXRlU3R1ZmZbNF0ubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTmV0VHlwZUxpc3RbbmldLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1NpdGVTdHVmZls0XS5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5ldFR5cGVMaXN0W25pXS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIGlmIHRoaXNTaXRlTmV0d29ya05hbWVzICE9IHVuZGVmaW5lZCAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIGV4aXN0aW5nIHNpdGUgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gdGhpcyBpcyBhIE5FVyBTSVRFIENSRUFURSAoc2l0ZSA9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAvL2dldCBsb2dnZWQgaW4gbWVtYmVyIHRvIG1ha2UgdGhlbSBjcmVhdG9yXHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICBNRU1CRVIucXVlcnkoeyBpZDogJGNvb2tpZXMuZ2V0KCdtSUQnKSB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLkNyZWF0b3IgPSByZXNwb25zZS5mbmFtZSArIFwiIFwiICsgcmVzcG9uc2UubG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLm1lbWJlcl9pZCA9IHJlc3BvbnNlLm1lbWJlcl9pZDtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuaXNfcGVybWFuZW50X2hvdXNpbmdfaW5zdGFsbGVkID0gXCJOb1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5hY2Nlc3NfZ3JhbnRlZCA9IFwiTm90IE5lZWRlZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vVE9ETzogZ2V0IG1lbWJlcidzIGlkIGluIHRoZXJlIHRvb1xyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIGdldHRpbmcgTWVtYmVyIGluZm86IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHRoaXMgaXMgYSBORVcgU0lURSBDUkVBVEUgKHNpdGUgPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICB9Ly9lbmQgbmV3IHNpdGVcclxuXHJcbiAgICAgICAgICAgIC8vICBsYXQvbG9uZyA9aXMgbnVtYmVyXHJcbiAgICAgICAgICAgICRzY29wZS5pc051bSA9IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0aGVFdmVudCA9IGV2dCB8fCB3aW5kb3cuZXZlbnQ7XHJcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gdGhlRXZlbnQua2V5Q29kZSB8fCB0aGVFdmVudC53aGljaDtcclxuICAgICAgICAgICAgICAgIGlmIChrZXkgIT0gNDYgJiYga2V5ICE9IDQ1ICYmIGtleSA+IDMxICYmIChrZXkgPCA0OCB8fCBrZXkgPiA1NykpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGVFdmVudC5yZXR1cm5WYWx1ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGVFdmVudC5wcmV2ZW50RGVmYXVsdCkgdGhlRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vbXVsdGlzZWxlY3Qgb25lIGNoZWNrZWQuLlxyXG4gICAgICAgICAgICAkc2NvcGUuSG91c2VUeXBlQ2xpY2sgPSBmdW5jdGlvbiAoaHQpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5ob3VzZURpcnR5ID0gdHJ1ZTsgLy90aGV5IGNsaWNrZWQgaXQuLnVzZWQgd2hlbiBwb3N0L3B1dFxyXG4gICAgICAgICAgICAgICAgLy9hZGQvcmVtb3ZlIGhvdXNlIHR5cGUgYW5kIGlucHV0cyB0byB0YWJsZSByb3cgLS0gZm9yZWFjaCBvbiBwb3N0IG9yIHB1dCB3aWxsIGhhbmRsZSB0aGUgcmVzdFxyXG4gICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy9uZXcgc2l0ZSBiZWluZyBjcmVhdGVkXHJcbiAgICAgICAgICAgICAgICBpZiAoaHQuc2VsZWN0ZWQgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaG91c2VUID0geyB0eXBlX25hbWU6IGh0LnR5cGVfbmFtZSwgaG91c2luZ190eXBlX2lkOiBodC5ob3VzaW5nX3R5cGVfaWQsIGxlbmd0aDogaHQubGVuZ3RoLCBtYXRlcmlhbDogaHQubWF0ZXJpYWwsIG5vdGVzOiBodC5ub3RlcywgYW1vdW50OiAxIH07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVIb3VzZVR5cGVzVGFibGUucHVzaChob3VzZVQpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93U2l0ZUhvdXNlVGFibGUgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKGh0LnNlbGVjdGVkID09PSBmYWxzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNpdGUuc2l0ZV9pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzSF9JRCA9ICRzY29wZS5zaXRlSG91c2VUeXBlc1RhYmxlLmZpbHRlcihmdW5jdGlvbiAoaCkgeyByZXR1cm4gaC50eXBlX25hbWUgPT0gaHQudHlwZV9uYW1lOyB9KVswXS5zaXRlX2hvdXNpbmdfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlSG91c2VzVG9SZW1vdmUucHVzaChzSF9JRCk7IC8vZWRpdCBwYWdlLCBhZGQgc2l0ZV9ob3VzaW5nX2lkIHRvIHJlbW92ZSBsaXN0IGZvciBQVVRcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAkc2NvcGUuc2l0ZUhvdXNlVHlwZXNUYWJsZS5pbmRleE9mKCRzY29wZS5zaXRlSG91c2VUeXBlc1RhYmxlLmZpbHRlcihmdW5jdGlvbiAoaCkgeyByZXR1cm4gaC50eXBlX25hbWUgPT0gaHQudHlwZV9uYW1lOyB9KVswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVIb3VzZVR5cGVzVGFibGUuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuc2l0ZUhvdXNlVHlwZXNUYWJsZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dTaXRlSG91c2VUYWJsZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyB3YW50IHRvIGFkZCBhIGxhbmRvd25lciBjb250YWN0XHJcbiAgICAgICAgICAgICRzY29wZS5zaG93TGFuZE93bmVyUGFydCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGRMYW5kb3duZXIgPSB0cnVlO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy93aGVuIHN0YXRlIGNoYW5nZXMsIHVwZGF0ZSBjb3VudHkgbGlzdFxyXG4gICAgICAgICAgICAkc2NvcGUudXBkYXRlQ291bnR5TGlzdCA9IGZ1bmN0aW9uIChzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGhpc1N0YXRlID0gJHNjb3BlLlN0YXRlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHN0KSB7IHJldHVybiBzdC5zdGF0ZV9hYmJyZXYgPT0gczsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVDb3VudHlMaXN0ID0gJHNjb3BlLkFsbENvdW50eUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnN0YXRlX2lkID09IHRoaXNTdGF0ZS5zdGF0ZV9pZDsgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2NhbmNlbCBtb2RhbFxyXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9kZWxldGUgdGhpcyBTaXRlXHJcbiAgICAgICAgICAgICRzY29wZS5kZWxldGVTaXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRoaXNTaXRlID0gJHNjb3BlLmFTaXRlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRTaXRlTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5EZWxldGUgU2l0ZTwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBkZWxldGUgc2l0ZSB7e3NpdGVOb319PzwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBidG4tZGFuZ2VyXCIgbmctY2xpY2s9XCJkZWxldGVJdCgpXCI+RGVsZXRlPC9idXR0b24+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cIm9rKClcIj5DYW5jZWw8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVObyA9IHRoaXNTaXRlLnNpdGVfbm87XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVsZXRlSXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2RlbGV0ZSB0aGUgc2l0ZSBhbmQgYWxsIHRoaW5ncyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHRoaXNTaXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGRTaXRlTW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgU0lURS5kZWxldGUoeyBpZDogcy5zaXRlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlNpdGUgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbmRCYWNrID0gXCJEZWxldGVkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHNlbmRCYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+e3ttZXNzYWdlfX08L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJvaygpXCI+Q2FuY2VsPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVzc2FnZSA9IGVycm9yUmVzcG9uc2UuaGVhZGVycyhcInVzZ3N3aW0tbWVzc2FnZXNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgIH0pOy8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgfV0pO1xyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAvKiBjb250cm9sbGVycy5qcywgJ2xlYWZsZXQtZGlyZWN0aXZlJyd1aS51bmlxdWUnLCduZ1RhZ3NJbnB1dCcsKi9cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU1ROQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQ29udHJvbGxlcnMnKTtcclxuXHJcbiAgICBTVE5Db250cm9sbGVycy5jb250cm9sbGVyKCdzaXRlTWFwQ3RybCcsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGNvb2tpZXMnLCAnJGxvY2F0aW9uJywgJyRzdGF0ZScsICdTSVRFJywgJ2xlYWZsZXREYXRhJywgJ2FTaXRlJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkY29va2llcywgJGxvY2F0aW9uLCAkc3RhdGUsIFNJVEUsIGxlYWZsZXREYXRhLCBhU2l0ZSkge1xyXG4gICAgICAgICAgICBpZiAoYVNpdGUgIT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubWFwU3R1ZmYgPSBcImhlcmUncyB0aGUgbWFwIGFjY29yZGlvbiBjb250ZW50XCI7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudGhpc1NpdGUgPSBhU2l0ZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5wYXRocyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgaWNvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RuOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogWzEwLCAxMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3N0blNpdGVJY29uJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25TaXplOiBbMTIsIDEyXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnc2VsZWN0ZWRJY29uJ1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucGF0aHNPYmogPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2lyY2xlTWFya2VyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiY2lyY2xlTWFya2VyXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhZGl1czogMjAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdlaWdodDogMyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDAwMDk5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGF0bG5nczoge31cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdmFyIGFkZFNoYXBlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5wYXRocyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5wYXRoc09iai5jaXJjbGVNYXJrZXIubGF0bG5ncyA9IHsgbGF0OiAkc2NvcGUudGhpc1NpdGUubGF0aXR1ZGVfZGQsIGxuZzogJHNjb3BlLnRoaXNTaXRlLmxvbmdpdHVkZV9kZCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5wYXRoc1snY2lyY2xlTWFya2VyJ10gPSAkc2NvcGUucGF0aHNPYmpbJ2NpcmNsZU1hcmtlciddO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIGFkZFNoYXBlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgbGF0OiAkc2NvcGUudGhpc1NpdGUubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgbG5nOiAkc2NvcGUudGhpc1NpdGUubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgIGljb246IGljb25zLnNlbGVjdGVkXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBTSVRFLmdldFByb3hpbWl0eVNpdGVzKHsgTGF0aXR1ZGU6ICRzY29wZS50aGlzU2l0ZS5sYXRpdHVkZV9kZCwgTG9uZ2l0dWRlOiAkc2NvcGUudGhpc1NpdGUubG9uZ2l0dWRlX2RkLCBCdWZmZXI6IDAuMDUgfSxcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jbG9zZVNpdGVzID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY2xvc2VTaXRlcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRzY29wZS5jbG9zZVNpdGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSAkc2NvcGUuY2xvc2VTaXRlc1tpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFya2Vycy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiBhLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbmc6IGEubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpY29ucy5zdG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5leHRlbmQoJHNjb3BlLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFwQ2VudGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhdDogJHNjb3BlLnRoaXNTaXRlLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsbmc6ICRzY29wZS50aGlzU2l0ZS5sb25naXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHpvb206IDE2LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW5ab29tOiAxNlxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyczogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgbWFya2Vyc0xhdExuZ0FycmF5OiBbXSxcclxuICAgICAgICAgICAgICAgICAgICBsYXllcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFzZWxheWVyczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wbzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiV29ybGQgVG9wb2dyYXBoaWNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFnc0Jhc2VcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogXCJUb3BvZ3JhcGhpY1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG92ZXJsYXlzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG5TaXRlczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdncm91cCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ1NUTiBTaXRlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7Ly9lbmQgYW5ndWxhciAkc2NvcGUuZXh0ZW5kIHN0YXRlbWVudFxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy90aGlzIGlzIGEgY3JlYXRlIHNpdGUgYWN0aW9uLCB0aGVyZSBpcyBubyBzaXRlIGhlcmUgeWV0LlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfV0pOy8vZW5kIGNvbnRyb2xsZXJcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBTVE5Db250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTVE5Db250cm9sbGVycycpO1xyXG5cclxuICAgIFNUTkNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ3NpdGVDdHJsJywgWyckc2NvcGUnLCAnJHN0YXRlJywgJyRyb290U2NvcGUnLCAnJGNvb2tpZXMnLCAnJGxvY2F0aW9uJywgJyRodHRwJywgJyR1aWJNb2RhbCcsICckZmlsdGVyJywgJ3RoaXNTaXRlJywgJ2xhdGxvbmcnLCAndGhpc1NpdGVOZXR3b3JrTmFtZXMnLCAndGhpc1NpdGVOZXR3b3JrVHlwZXMnLCAndGhpc1NpdGVIb3VzaW5ncycsXHJcbiAgICAgICAgJ1NJVEUnLCAnTUVNQkVSJywgJ2FsbEhvckRhdHVtcycsICdhbGxIb3JDb2xsTWV0aG9kcycsICdhbGxTdGF0ZXMnLCAnYWxsQ291bnRpZXMnLCAnYWxsRGVwbG95UHJpb3JpdGllcycsICdhbGxIb3VzaW5nVHlwZXMnLCAnYWxsTmV0d29ya05hbWVzJywgJ2FsbE5ldHdvcmtUeXBlcycsICdhbGxEZXBsb3lUeXBlcycsICdhbGxTZW5zb3JUeXBlcycsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHN0YXRlLCAkcm9vdFNjb3BlLCAkY29va2llcywgJGxvY2F0aW9uLCAkaHR0cCwgJHVpYk1vZGFsLCAkZmlsdGVyLCB0aGlzU2l0ZSwgbGF0bG9uZywgdGhpc1NpdGVOZXR3b3JrTmFtZXMsIHRoaXNTaXRlTmV0d29ya1R5cGVzLCB0aGlzU2l0ZUhvdXNpbmdzLCBTSVRFLCBNRU1CRVIsIGFsbEhvckRhdHVtcyxcclxuICAgICAgICAgICAgYWxsSG9yQ29sbE1ldGhvZHMsIGFsbFN0YXRlcywgYWxsQ291bnRpZXMsIGFsbERlcGxveVByaW9yaXRpZXMsIGFsbEhvdXNpbmdUeXBlcywgYWxsTmV0d29ya05hbWVzLCBhbGxOZXR3b3JrVHlwZXMsIGFsbERlcGxveVR5cGVzLCBhbGxTZW5zb3JUeXBlcykge1xyXG4gICAgICAgICAgICBpZiAoJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSB1bmRlZmluZWQgfHwgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYXV0aCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS50aGlzUGFnZSA9IFwiU2l0ZSBEYXNoYm9hcmRcIjtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIG1hcE9wZW46IGZhbHNlLCBzaXRlT3BlbjogdHJ1ZSwgb3BPcGVuOiBmYWxzZSwgc2Vuc29yT3BlbjogZmFsc2UsIGh3bU9wZW46IGZhbHNlLCBmaWxlc09wZW46IGZhbHNlLCBwZWFrT3BlbjogZmFsc2VcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudGhpc1NpdGVIb3VzZVR5cGVNb2RlbCA9IFtdOyAvL2hvbGRlciBmb3Igd2hlbiBhZGRpbmcgaG91c2luZyB0eXBlIHRvIHBhZ2UgZnJvbSBtdWx0aXNlbGVjdFxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vb3BlbiBtb2RhbCB0byBlZGl0IG9yIGNyZWF0ZSBhIHNpdGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5vcGVuU2l0ZUNyZWF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gdHJ1ZTsgLy8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRyb3Bkb3duUGFydHMgPVthbGxIb3JEYXR1bXMsIGFsbEhvckNvbGxNZXRob2RzLCBhbGxTdGF0ZXMsIGFsbENvdW50aWVzLCBhbGxIb3VzaW5nVHlwZXMsIGFsbERlcGxveVByaW9yaXRpZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbE5ldHdvcmtOYW1lcywgYWxsTmV0d29ya1R5cGVzLCBhbGxEZXBsb3lUeXBlcywgYWxsU2Vuc29yVHlwZXNdO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnU0lURW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NpdGVNb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ2xnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd0NsYXNzOiAncmVwLWRpYWxvZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsRHJvcERvd25QYXJ0czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZHJvcGRvd25QYXJ0cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNTaXRlU3R1ZmY6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU2l0ZS5zaXRlX2lkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBvcmlnU2l0ZUhvdXNlcyA9ICRzY29wZS5vcmlnaW5hbFNpdGVIb3VzaW5ncyAhPT0gdW5kZWZpbmVkID8gJHNjb3BlLm9yaWdpbmFsU2l0ZUhvdXNpbmdzIDogW107IC8vbmVlZGVkIGZvciBtdWx0aSBzZWxlY3QgdG8gc2V0IHByb3Agc2VsZWN0ZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzSG91c2VUeXBlTW9kZWwgPSAkc2NvcGUudGhpc1NpdGVIb3VzZVR5cGVNb2RlbC5sZW5ndGggPiAwID8gJHNjb3BlLnRoaXNTaXRlSG91c2VUeXBlTW9kZWwgOiBbXTsgLy9oZXJlJ3Mgd2hhdCB0aGUgc2l0ZSBhbHJlYWR5IGhhc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNOZXROYW1lcyA9IHRoaXNTaXRlTmV0d29ya05hbWVzICE9PSB1bmRlZmluZWQgPyB0aGlzU2l0ZU5ldHdvcmtOYW1lcyA6IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNOZXRUeXBlcyA9IHRoaXNTaXRlTmV0d29ya1R5cGVzICE9PSB1bmRlZmluZWQgPyB0aGlzU2l0ZU5ldHdvcmtUeXBlcyA6IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvID0gJHNjb3BlLmxhbmRvd25lciAhPT0gdW5kZWZpbmVkID8gJHNjb3BlLmxhbmRvd25lciA6IHsgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaXRlUmVsYXRlZFN0dWZmID0gWyRzY29wZS5hU2l0ZSwgb3JpZ1NpdGVIb3VzZXMsIHNIb3VzZVR5cGVNb2RlbCwgc05ldE5hbWVzLCBzTmV0VHlwZXMsIGxvXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNpdGVSZWxhdGVkU3R1ZmY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGxvbmc6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxhdGxvbmcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhdGxvbmc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyICE9PSAnRGVsZXRlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZSA9IHJbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuSG9yaXpvbnRhbERhdHVtID0gJHNjb3BlLmFTaXRlLmhkYXR1bV9pZCA+IDAgPyBhbGxIb3JEYXR1bXMuZmlsdGVyKGZ1bmN0aW9uIChoZCkgeyByZXR1cm4gaGQuZGF0dW1faWQgPT0gJHNjb3BlLmFTaXRlLmhkYXR1bV9pZDsgfSlbMF0uZGF0dW1fbmFtZSA6IFwiLS0tXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuSG9yaXpvbnRhbENvbGxlY3RNZXRob2QgPSAkc2NvcGUuYVNpdGUuaGNvbGxlY3RfbWV0aG9kX2lkICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLmFTaXRlLmhjb2xsZWN0X21ldGhvZF9pZCA+IDAgPyBhbGxIb3JDb2xsTWV0aG9kcy5maWx0ZXIoZnVuY3Rpb24gKGhjKSB7IHJldHVybiBoYy5oY29sbGVjdF9tZXRob2RfaWQgPT0gJHNjb3BlLmFTaXRlLmhjb2xsZWN0X21ldGhvZF9pZDsgfSlbMF0uaGNvbGxlY3RfbWV0aG9kIDogXCItLS1cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5Qcmlvcml0eU5hbWUgPSAkc2NvcGUuYVNpdGUucHJpb3JpdHlfaWQgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuYVNpdGUucHJpb3JpdHlfaWQgPiAwID8gYWxsRGVwbG95UHJpb3JpdGllcy5maWx0ZXIoZnVuY3Rpb24gKGRwKSB7IHJldHVybiBkcC5wcmlvcml0eV9pZCA9PSAkc2NvcGUuYVNpdGUucHJpb3JpdHlfaWQ7IH0pWzBdLnByaW9yaXR5X25hbWUgOiBcIi0tLVwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlTmV0d29ya05hbWVzID0gclsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlTmV0d29ya1R5cGVzID0gclsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdtYXAnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBpcyB0aGlzIGNyZWF0ZSBuZXcgc2l0ZSBvciB2aWV3IGV4aXN0aW5nPz8gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmICh0aGlzU2l0ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8jcmVnaW9uIGV4aXN0aW5nU2l0ZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzU2l0ZS5zaXRlX2lkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlID0gdGhpc1NpdGU7ICAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuZGVjRGVnT1JkbXMgPSAnZGQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuSG9yaXpvbnRhbERhdHVtID0gJHNjb3BlLmFTaXRlLmhkYXR1bV9pZCA+IDAgPyBhbGxIb3JEYXR1bXMuZmlsdGVyKGZ1bmN0aW9uIChoZCkgeyByZXR1cm4gaGQuZGF0dW1faWQgPT0gJHNjb3BlLmFTaXRlLmhkYXR1bV9pZDsgfSlbMF0uZGF0dW1fbmFtZSA6IFwiLS0tXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5Ib3Jpem9udGFsQ29sbGVjdE1ldGhvZCA9ICRzY29wZS5hU2l0ZS5oY29sbGVjdF9tZXRob2RfaWQgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuYVNpdGUuaGNvbGxlY3RfbWV0aG9kX2lkID4gMCA/IGFsbEhvckNvbGxNZXRob2RzLmZpbHRlcihmdW5jdGlvbiAoaGMpIHsgcmV0dXJuIGhjLmhjb2xsZWN0X21ldGhvZF9pZCA9PSAkc2NvcGUuYVNpdGUuaGNvbGxlY3RfbWV0aG9kX2lkOyB9KVswXS5oY29sbGVjdF9tZXRob2QgOiBcIi0tLVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuUHJpb3JpdHlOYW1lID0gJHNjb3BlLmFTaXRlLnByaW9yaXR5X2lkICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLmFTaXRlLnByaW9yaXR5X2lkID4gMCA/IGFsbERlcGxveVByaW9yaXRpZXMuZmlsdGVyKGZ1bmN0aW9uIChkcCkgeyByZXR1cm4gZHAucHJpb3JpdHlfaWQgPT0gJHNjb3BlLmFTaXRlLnByaW9yaXR5X2lkOyB9KVswXS5wcmlvcml0eV9uYW1lOiBcIi0tLVwiO1xyXG4gICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYXBwbHkgYW55IHNpdGUgaG91c2luZ3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTaXRlSG91c2luZ3MubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9yaWdpbmFsU2l0ZUhvdXNpbmdzID0gYW5ndWxhci5jb3B5KHRoaXNTaXRlSG91c2luZ3MpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dTaXRlSG91c2VUYWJsZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2Zvcm1hdCBmb3IgdGFibGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHogPSAwOyB6IDwgJHNjb3BlLm9yaWdpbmFsU2l0ZUhvdXNpbmdzLmxlbmd0aDsgeisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZm9yIGVhY2ggaG91c2luZ3R5cGVsaXN0Li5tYWtlIHNlbGVjdGVkID0gdHJ1ZSBmb3IgdGhlc2UgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBob3VzZVR5cGVOYW1lID0gYWxsSG91c2luZ1R5cGVzLmZpbHRlcihmdW5jdGlvbiAoaCkgeyByZXR1cm4gaC5ob3VzaW5nX3R5cGVfaWQgPT0gJHNjb3BlLm9yaWdpbmFsU2l0ZUhvdXNpbmdzW3pdLmhvdXNpbmdfdHlwZV9pZDsgfSlbMF0udHlwZV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBob3VzZVQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGVfbmFtZTogaG91c2VUeXBlTmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaG91c2luZ190eXBlX2lkIDogJHNjb3BlLm9yaWdpbmFsU2l0ZUhvdXNpbmdzW3pdLmhvdXNpbmdfdHlwZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9ob3VzaW5nX2lkOiAkc2NvcGUub3JpZ2luYWxTaXRlSG91c2luZ3Nbel0uc2l0ZV9ob3VzaW5nX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZW5ndGg6ICRzY29wZS5vcmlnaW5hbFNpdGVIb3VzaW5nc1t6XS5sZW5ndGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsOiAkc2NvcGUub3JpZ2luYWxTaXRlSG91c2luZ3Nbel0ubWF0ZXJpYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vdGVzOiAkc2NvcGUub3JpZ2luYWxTaXRlSG91c2luZ3Nbel0ubm90ZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFtb3VudDogJHNjb3BlLm9yaWdpbmFsU2l0ZUhvdXNpbmdzW3pdLmFtb3VudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRoaXNTaXRlSG91c2VUeXBlTW9kZWwucHVzaChob3VzZVQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgaWYgdGhpc1NpdGVIb3VzaW5ncyAhPSB1bmRlZmluZWRcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYXBwbHkgYW55IHNpdGUgbmV0d29yayBuYW1lcyBvciB0eXBlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZU5ldHdvcmtOYW1lcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1NpdGVOZXR3b3JrTmFtZXMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgYSA9IDA7IGEgPCB0aGlzU2l0ZU5ldHdvcmtOYW1lcy5sZW5ndGg7IGErKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBubiA9IGFsbE5ldHdvcmtOYW1lcy5maWx0ZXIoZnVuY3Rpb24gKG4pIHsgcmV0dXJuIG4ubmV0d29ya19uYW1lX2lkID09IHRoaXNTaXRlTmV0d29ya05hbWVzW2FdLm5ldHdvcmtfbmFtZV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVOZXR3b3JrTmFtZXMucHVzaChubi5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2FwcGx5IGFueSBzaXRlIG5ldHdvcmsgbmFtZXMgb3IgdHlwZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVOZXR3b3JrVHlwZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTaXRlTmV0d29ya1R5cGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGIgPSAwOyBiIDwgdGhpc1NpdGVOZXR3b3JrVHlwZXMubGVuZ3RoOyBiKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbnQgPSBhbGxOZXR3b3JrVHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChudCkgeyByZXR1cm4gbnQubmV0d29ya190eXBlX2lkID09IHRoaXNTaXRlTmV0d29ya1R5cGVzW2JdLm5ldHdvcmtfdHlwZV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVOZXR3b3JrVHlwZXMucHVzaChudC5uZXR3b3JrX3R5cGVfbmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU2l0ZS5zZW5zb3Jfbm90X2FwcHJvcHJpYXRlICE9PSB1bmRlZmluZWQgfHwgJHNjb3BlLmFTaXRlLnNlbnNvcl9ub3RfYXBwcm9wcmlhdGUgPiAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvck5vdEFwcHIgPSBcIlllc1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yTm90QXBwciA9IFwiTm9cIjtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2dldCBtZW1iZXIgbmFtZSBmb3IgZGlzcGxheVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFTaXRlLm1lbWJlcl9pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBNRU1CRVIucXVlcnkoeyBpZDogJHNjb3BlLmFTaXRlLm1lbWJlcl9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5DcmVhdG9yID0gcmVzcG9uc2UuZm5hbWUgKyBcIiBcIiArIHJlc3BvbnNlLmxuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLkNyZWF0b3IgPSBcIk5vdCByZWNvcmRlZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZ2V0IHRoZSBsYW5kb3duZXJDT250YWN0IHdpdGggZ2V0Q3JlZHNcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU2l0ZS5sYW5kb3duZXJjb250YWN0X2lkICE9PSBudWxsICYmICRzY29wZS5hU2l0ZS5sYW5kb3duZXJjb250YWN0X2lkICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLmFTaXRlLmxhbmRvd25lcmNvbnRhY3RfaWQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTSVRFLmdldFNpdGVMYW5kT3duZXIoeyBpZDogJHNjb3BlLmFTaXRlLnNpdGVfaWQgfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5sYW5kb3duZXIgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkTGFuZG93bmVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBnZXR0aW5nIExhbmRvd25lciBJbmZvcm1hdGlvbjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0vL2VuZCBpZiBzaXRlIGhhcyBsYW5kb3duZXJjb250YWN0IGlkXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2l0ZSAhPSB1bmRlZmluZWQgYnV0IHRoZSBzaXRlLnNpdGVfaWQgaXMgPT0gdGhpcyBzaXRlIGRvZXNuJ3QgZXhpc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiVGhpcyBzaXRlIGRvZXMgbm90IGV4aXN0XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL0hvbWUnKS5yZXBsYWNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHBseTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBleGlzdGluZ1NpdGVcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9vcGVuIG1vZGFsIGlmIG5ldyBzaXRlIGZvciBjcmVhdGVcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3BlblNpdGVDcmVhdGUoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfS8vZW5kIGVsc2UgY2hlY2tDcmVkcyBpcyBnb29kXHJcbiAgICAgICAgfV0pOyAgICBcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgLyogY29udHJvbGxlcnMuanMsICdsZWFmbGV0LWRpcmVjdGl2ZScndWkudW5pcXVlJywnbmdUYWdzSW5wdXQnLCovXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFNUTkNvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NUTkNvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgU1ROQ29udHJvbGxlcnMuY29udHJvbGxlcigncXVpY2tDcmVhdGVDdHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckbG9jYXRpb24nLCAnJHN0YXRlJywgJyRodHRwJywgJyR1aWJNb2RhbCcsICckZmlsdGVyJywgJyRzY2UnLCAnd2hpY2hRdWljaycsICdhbGxIb3JEYXR1bXMnLFxyXG4gICAgICAgICdhbGxIb3JDb2xsTWV0aG9kcycsICdhbGxTdGF0ZXMnLCAnYWxsQ291bnRpZXMnLCAnYWxsT1BUeXBlcycsICdhbGxWZXJ0RGF0dW1zJywgJ2FsbFZlcnRDb2xNZXRob2RzJywgJ2FsbE9QUXVhbGl0aWVzJywgJ2FsbEhXTVR5cGVzJywgJ2FsbEhXTVF1YWxpdGllcycsICdhbGxNYXJrZXJzJyxcclxuICAgICAgICAnYWxsRXZlbnRzJywgJ2FsbFNlbnNvclR5cGVzJywgJ2FsbFNlbnNvckJyYW5kcycsICdhbGxEZXBsb3lUeXBlcycsICdhbGxIb3VzaW5nVHlwZXMnLCAnU0lURScsICdPQkpFQ1RJVkVfUE9JTlQnLCAnSFdNJywgJ01FTUJFUicsICdJTlNUUlVNRU5UJywgJ0lOU1RSVU1FTlRfU1RBVFVTJywgJ09QX01FQVNVUkUnLCAnT1BfQ09OVFJPTF9JREVOVElGSUVSJywgJ0dFT0NPREUnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRjb29raWVzLCAkbG9jYXRpb24sICRzdGF0ZSwgJGh0dHAsICR1aWJNb2RhbCwgJGZpbHRlciwgJHNjZSwgd2hpY2hRdWljaywgYWxsSG9yRGF0dW1zLCBhbGxIb3JDb2xsTWV0aG9kcywgYWxsU3RhdGVzLCBhbGxDb3VudGllcywgYWxsT1BUeXBlcyxcclxuICAgICAgICAgICAgYWxsVmVydERhdHVtcywgYWxsVmVydENvbE1ldGhvZHMsIGFsbE9QUXVhbGl0aWVzLCBhbGxIV01UeXBlcywgYWxsSFdNUXVhbGl0aWVzLCBhbGxNYXJrZXJzLCBhbGxFdmVudHMsIGFsbFNlbnNvclR5cGVzLCBhbGxTZW5zb3JCcmFuZHMsIGFsbERlcGxveVR5cGVzLCBhbGxIb3VzaW5nVHlwZXMsIFxyXG4gICAgICAgICAgICBTSVRFLCBPQkpFQ1RJVkVfUE9JTlQsIEhXTSwgTUVNQkVSLCBJTlNUUlVNRU5ULCBJTlNUUlVNRU5UX1NUQVRVUywgT1BfTUVBU1VSRSwgT1BfQ09OVFJPTF9JREVOVElGSUVSLCBHRU9DT0RFKSB7XHJcbiAgICAgICAgICAgIGlmICgkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IHVuZGVmaW5lZCB8fCAkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hdXRoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvL2dsb2JhbCB2YXJzXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQ3JlYXRlV2hhdCA9IHdoaWNoUXVpY2s7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaHRtbERlc2NyaXB0aW9uVGlwID0gJHNjZS50cnVzdEFzSHRtbCgnUmVxdWlyZWQgYnkgTldJUy4gQ2FuIGJlIGxpc3RlZCBhcyA8ZW0+XFwndW5rbm93blxcJzwvZW0+IG9yIDxlbT5cXCdBdGxhbnRpYyBPY2VhblxcJzwvZW0+Jyk7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICBNRU1CRVIucXVlcnkoeyBpZDogJGNvb2tpZXMuZ2V0KCdtSUQnKSB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5sb2dnZWRJbk1lbWJlciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnRoaXNQYWdlID0gXCJRdWlja1wiICsgd2hpY2hRdWljaztcclxuICAgICAgICAgICAgICAgICRzY29wZS5xdWlja0Zvcm0gPSB7fTsgLy9mb3JtcyB3aXRoaW4gdGhlIGFjY29yZGlvbiAuU2l0ZSwgLk9QLCAuSFdNXHJcbiAgICAgICAgICAgICAgICAvL2NhbGxlZCBhIGZldyB0aW1lcyB0byBmb3JtYXQganVzdCB0aGUgZGF0ZSAobm8gdGltZSlcclxuICAgICAgICAgICAgICAgIHZhciBtYWtlQWRhdGUgPSBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBhRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGQgIT09IFwiXCIgJiYgZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcHJvdmlkZWQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhRGF0ZSA9IG5ldyBEYXRlKGQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHllYXIgPSBhRGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb250aCA9IGFEYXRlLmdldE1vbnRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRheSA9ICgnMCcgKyBhRGF0ZS5nZXREYXRlKCkpLnNsaWNlKC0yKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9udGhOYW1lcyA9IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZVdPdGltZSA9IG5ldyBEYXRlKG1vbnRoTmFtZXNbbW9udGhdICsgXCIgXCIgKyBkYXkgKyBcIiwgXCIgKyB5ZWFyKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZVdPdGltZTtcclxuICAgICAgICAgICAgICAgIH07Ly9lbmQgbWFrZUFkYXRlKClcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWNEZWdPUmRtcyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkV2ZW50TmFtZSA9ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50TmFtZScpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlID0geyBtZW1iZXJfaWQ6ICRjb29raWVzLmdldCgnbUlEJykgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hT1AgPSB7ZGF0ZV9lc3RhYmxpc2hlZDogbWFrZUFkYXRlKFwiXCIpfTtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHsgc2l0ZU9wZW46IHRydWUsIG9wT3BlbjogZmFsc2UsIGh3bU9wZW46IGZhbHNlIH07IC8vYWNjb3JkaW9uIGZvciBwYXJ0c1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlbW92ZU9QQ2FycmF5ID0gW107IC8vaG9sZGVyIGlmIHRoZXkgcmVtb3ZlIGFueSBPUCBjb250cm9sc1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZGVkSWRlbnRpZmllcnMgPSBbXTsgLy9ob2xkZXIgZm9yIGFkZGVkIElkZW50aWZpZXJzXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0NvbnRyb2xJRGlucHV0ID0gZmFsc2U7IC8vaW5pdGlhbGx5IGhpZGUgdGhlIGFyZWEgY29udGFpbmluZyBhZGRlZCBjb250cm9sIElkZW50aWZpZXJzXHJcblxyXG4gICAgICAgICAgICAgICAgLy9kcm9wZG93bnNcclxuICAgICAgICAgICAgICAgICRzY29wZS5ob3JEYXR1bUxpc3QgPSBhbGxIb3JEYXR1bXM7ICRzY29wZS5ob3JDb2xsTWV0aG9kTGlzdCA9IGFsbEhvckNvbGxNZXRob2RzO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRlTGlzdCA9IGFsbFN0YXRlczsgJHNjb3BlLmFsbENvdW50eUxpc3QgPSBhbGxDb3VudGllczsgJHNjb3BlLnN0YXRlQ291bnR5TGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm9wVHlwZUxpc3QgPSBhbGxPUFR5cGVzOyAkc2NvcGUudmVydERhdHVtTGlzdCA9IGFsbFZlcnREYXR1bXM7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudmVydENvbGxNZXRob2RMaXN0ID0gYWxsVmVydENvbE1ldGhvZHM7ICRzY29wZS5vcFF1YWxMaXN0ID0gYWxsT1BRdWFsaXRpZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9od20gZHJvcGRvd25zXHJcbiAgICAgICAgICAgICAgICBpZiAod2hpY2hRdWljayA9PSAnSFdNJykge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNID0geyBod21fZW52aXJvbm1lbnQ6ICdSaXZlcmluZScsIGV2ZW50X2lkOiAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudElEJyksIGJhbms6ICdOL0EnLCBmbGFnX2RhdGU6IG1ha2VBZGF0ZShcIlwiKSwgc3RpbGx3YXRlcjogMCwgZmxhZ19tZW1iZXJfaWQ6ICRjb29raWVzLmdldCgnbUlEJykgfTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtVHlwZUxpc3QgPSBhbGxIV01UeXBlczsgJHNjb3BlLmh3bVF1YWxMaXN0ID0gYWxsSFdNUXVhbGl0aWVzOyAkc2NvcGUubWFya2VyTGlzdCA9IGFsbE1hcmtlcnM7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL3NlbnNvciBkcm9wZG93bnNcclxuICAgICAgICAgICAgICAgIGlmICh3aGljaFF1aWNrID09ICdTZW5zb3InKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGdldFRpbWVab25lU3RhbXAgPSBmdW5jdGlvbiAoZHNlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbmRUaGlzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRzZW50ICE9PSB1bmRlZmluZWQpIGQgPSBuZXcgRGF0ZShkc2VudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgZCA9IG5ldyBEYXRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb2Zmc2V0ID0gKGQudG9TdHJpbmcoKSkuc3Vic3RyaW5nKDM1KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHpvbmUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKG9mZnNldC5zdWJzdHIoMCwgMykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJDZW5cIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b25lID0gJ0NTVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiRWFzXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgem9uZSA9ICdFU1QnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIk1vdVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHpvbmUgPSAnTVNUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJQYWNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB6b25lID0gJ1BTVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgc2VuZFRoaXMgPSBbZCwgem9uZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZW5kVGhpcztcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBUeXBlTGlzdCA9IGFsbERlcGxveVR5cGVzOyAvL2dldCBmcmVzaCB2ZXJzaW9uIHNvIG5vdCBtZXNzZWQgdXAgd2l0aCB0aGUgVGVtcGVyYXR1cmUgdHdpY2VcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaG91c2VUeXBlTGlzdCA9IGFsbEhvdXNpbmdUeXBlcztcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUudGltZVpvbmVMaXN0ID0gWydVVEMnLCAnUFNUJywgJ01TVCcsICdDU1QnLCAnRVNUJ107XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zb3IgPSB7IGV2ZW50X2lkOiAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudElEJyksICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc1N0YXR1cyA9IHsgc3RhdHVzX3R5cGVfaWQ6IDEsIG1lbWJlcl9pZDogJGNvb2tpZXMuZ2V0KCdtSUQnKSB9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ldmVudExpc3QgPSBhbGxFdmVudHM7ICRzY29wZS5zZW5zb3JUeXBlTGlzdCA9IGFsbFNlbnNvclR5cGVzOyAkc2NvcGUuc2Vuc29yQnJhbmRMaXN0ID0gYWxsU2Vuc29yQnJhbmRzO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5JbnRlcnZhbFR5cGUgPSB7IHR5cGU6ICdTZWNvbmRzJyB9OyAvL2RlZmF1bHRcclxuICAgICAgICAgICAgICAgICAgICAvL2Rpc3BsYXlpbmcgZGF0ZSAvIHRpbWUgaXQgdXNlcidzIHRpbWV6b25lXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIERlcHRpbWVQYXJ0cyA9IGdldFRpbWVab25lU3RhbXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMudGltZV9zdGFtcCA9IERlcHRpbWVQYXJ0c1swXTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMudGltZV96b25lID0gRGVwdGltZVBhcnRzWzFdOyAvL3dpbGwgYmUgY29udmVydGVkIHRvIHV0YyBvbiBwb3N0L3B1dFxyXG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLkRlcGxveWVyID0gJHNjb3BlLmxvZ2dlZEluTWVtYmVyO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2dldCBkZXBsb3ltZW50IHR5cGVzIGZvciBzZW5zb3IgdHlwZSBjaG9zZW5cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0RGVwVHlwZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5maWx0ZXJlZERlcGxveW1lbnRUeXBlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hpbmdTZW5zRGVwbGlzdCA9IGFsbFNlbnNvclR5cGVzLmZpbHRlcihmdW5jdGlvbiAoc2QpIHsgcmV0dXJuIHNkLnNlbnNvcl90eXBlX2lkID09ICRzY29wZS5hU2Vuc29yLnNlbnNvcl90eXBlX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGlzIGlzIDEgc2Vuc29yVHlwZSB3aXRoIGlubmVyIGxpc3Qgb2YgIC5kZXBsb3ltZW50dHlwZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbHRlcmVkRGVwbG95bWVudFR5cGVzID0gbWF0Y2hpbmdTZW5zRGVwbGlzdC5kZXBsb3ltZW50dHlwZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZmlsdGVyZWREZXBsb3ltZW50VHlwZXMubGVuZ3RoID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNvci5kZXBsb3ltZW50X3R5cGVfaWQgPSAkc2NvcGUuZmlsdGVyZWREZXBsb3ltZW50VHlwZXNbMF0uZGVwbG95bWVudF90eXBlX2lkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vZGVmYXVsdCByYWRpb3NcclxuICAgICAgICAgICAgICAgICRzY29wZS5GVG9yTUVURVIgPSAnZnQnO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkZUb3JDTSA9ICdmdCc7XHJcblxyXG4gICAgICAgICAgICAgICAgLy93YW50IHRvIGFkZCBPUCBpZGVudGlmaWVyXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkTmV3SWRlbnRpZmllciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkZWRJZGVudGlmaWVycy5wdXNoKHsgaWRlbnRpZmllcjogXCJcIiwgaWRlbnRpZmllcl90eXBlOiBcIlwiIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93Q29udHJvbElEaW5wdXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfTsvL2VuZCBhZGROZXdJZGVudGlmaWVyIGZvciBPUFxyXG5cclxuICAgICAgICAgICAgICAgIC8vaXMgaXQgVVRDIG9yIGxvY2FsIHRpbWUuLm1ha2Ugc3VyZSBpdCBzdGF5cyBVVENcclxuICAgICAgICAgICAgICAgIHZhciBkZWFsV2l0aFRpbWVTdGFtcGI0U2VuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2NoZWNrIGFuZCBzZWUgaWYgdGhleSBhcmUgbm90IHVzaW5nIFVUQ1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNlbnNTdGF0dXMudGltZV96b25lICE9IFwiVVRDXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jb252ZXJ0IGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1dGNEYXRlVGltZSA9IG5ldyBEYXRlKCRzY29wZS5hU2Vuc1N0YXR1cy50aW1lX3N0YW1wKS50b1VUQ1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMudGltZV9zdGFtcCA9IHV0Y0RhdGVUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMudGltZV96b25lID0gJ1VUQyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgJ0dNVCcgaXMgdGFja2VkIG9uIHNvIGl0IGRvZXNuJ3QgdHJ5IHRvIGFkZCBocnMgdG8gbWFrZSB0aGUgYWxyZWFkeSB1dGMgYSB1dGMgaW4gZGJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAkc2NvcGUuYVNlbnNTdGF0dXMudGltZV9zdGFtcC50b1N0cmluZygpLmluZGV4T2YoJ0dNVCcpICsgMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zU3RhdHVzLnRpbWVfc3RhbXAgPSAkc2NvcGUuYVNlbnNTdGF0dXMudGltZV9zdGFtcC50b1N0cmluZygpLnN1YnN0cmluZygwLCBpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBEYXRlcGlja2VyXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tycyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm9wZW4gPSBmdW5jdGlvbiAoJGV2ZW50LCB3aGljaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGVwaWNrcnNbd2hpY2hdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gbGF0L2xvbmcgc3R1ZmZcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVjRGVnT1JkbXMudmFsID0gJ2RkJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5ETVMgPSB7fTsgLy9ob2xkZXIgb2YgZGVnIG1pbiBzZWMgdmFsdWVzXHJcblxyXG4gICAgICAgICAgICAgICAgLy9jb252ZXJ0IGRlZyBtaW4gc2VjIHRvIGRlYyBkZWdyZWVzXHJcbiAgICAgICAgICAgICAgICB2YXIgYXppbXV0aCA9IGZ1bmN0aW9uIChkZWcsIG1pbiwgc2VjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF6aSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlZyA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXppID0gLTEuMCAqIGRlZyArIDEuMCAqIG1pbiAvIDYwLjAgKyAxLjAgKiBzZWMgLyAzNjAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoLTEuMCAqIGF6aSkudG9GaXhlZCg1KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF6aSA9IDEuMCAqIGRlZyArIDEuMCAqIG1pbiAvIDYwLjAgKyAxLjAgKiBzZWMgLyAzNjAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoYXppKS50b0ZpeGVkKDUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy9jb252ZXJ0IGRlYyBkZWdyZWVzIHRvIGRtc1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlZ190b19kbXMgPSBmdW5jdGlvbiAoZGVnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlZyA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVnID0gZGVnLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvbmdpdHVkZSwgcmVtb3ZlIHRoZSAtIHNpZ25cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVnID0gZGVnLnN1YnN0cmluZygxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBNYXRoLmZsb29yKGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pbmZsb2F0ID0gKGRlZyAtIGQpICogNjA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSBNYXRoLmZsb29yKG1pbmZsb2F0KTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9ICgobWluZmxvYXQgLSBtKSAqIDYwKS50b0ZpeGVkKDMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFwiXCIgKyBkICsgXCI6XCIgKyBtICsgXCI6XCIgKyBzKTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy90aGV5IGNoYW5nZWQgcmFkaW8gYnV0dG9uIGZvciBkbXMgZGVjIGRlZ1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmxhdExvbmdDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5kZWNEZWdPUmRtcy52YWwgPT0gXCJkZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhleSBjbGlja2VkIERlYyBEZWcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MQURlZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnZlcnQgd2hhdCdzIGhlcmUgZm9yIGVhY2ggbGF0IGFuZCBsb25nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTEFEZWcsICRzY29wZS5ETVMuTEFNaW4sICRzY29wZS5ETVMuTEFTZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLmxvbmdpdHVkZV9kZCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MT0RlZywgJHNjb3BlLkRNUy5MT01pbiwgJHNjb3BlLkRNUy5MT1NlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhleSBjbGlja2VkIGRtcyAoY29udmVydCBsYXQvbG9uZyB0byBkbXMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhdERNUyA9IChkZWdfdG9fZG1zKCRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCkpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFkRE1TYXJyYXkgPSBsYXRETVMuc3BsaXQoJzonKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTEFEZWcgPSBsYWRETVNhcnJheVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTEFNaW4gPSBsYWRETVNhcnJheVsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTEFTZWMgPSBsYWRETVNhcnJheVsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvbmdETVMgPSBkZWdfdG9fZG1zKCRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvbmdETVNhcnJheSA9IGxvbmdETVMuc3BsaXQoJzonKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTE9EZWcgPSBsb25nRE1TYXJyYXlbMF0gKiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTE9NaW4gPSBsb25nRE1TYXJyYXlbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPU2VjID0gbG9uZ0RNU2FycmF5WzJdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2xhdCBtb2RhbCBcclxuICAgICAgICAgICAgICAgIHZhciBvcGVuTGF0TW9kYWwgPSBmdW5jdGlvbiAodykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBsYXRNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGUgTGF0aXR1ZGUgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDczLjA8L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBsYXRNb2RhbC5yZXN1bHQudGhlbihmdW5jdGlvbiAoZmllbGRGb2N1cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodyA9PSAnbGF0bG9uZycpICQoXCIjU0lURV9sYXRpdHVkZV9kZFwiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlICQoXCIjTGFEZWdcIikuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy9sb25nIG1vZGFsXHJcbiAgICAgICAgICAgICAgICB2YXIgb3BlbkxvbmdNb2RhbCA9IGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxvbmdNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGUgTG9uZ2l0dWRlIG11c3QgYmUgYmV0d2VlbiAtMTc1LjAgYW5kIC02MC4wPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9uZ01vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChmaWVsZEZvY3VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh3ID09ICdsYXRsb25nJykgJChcIiNTSVRFX2xvbmdpdHVkZV9kZFwiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlICQoXCIjTG9EZWdcIikuZm9jdXMoKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgbGF0L2xvbmcgYXJlIHJpZ2h0IG51bWJlciByYW5nZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNoZWNrVmFsdWUgPSBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkID09ICdkbXMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgdGhlIGRlZ3JlZSB2YWx1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MQURlZyA8IDAgfHwgJHNjb3BlLkRNUy5MQURlZyA+IDczKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuTGF0TW9kYWwoJ2RtcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxPRGVnIDwgLTE3NSB8fCAkc2NvcGUuRE1TLkxPRGVnID4gLTYwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGVuTG9uZ01vZGFsKCdkbXMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgdGhlIGxhdGl0dWRlL2xvbmdpdHVkZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkIDwgMCB8fCAkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQgPiA3Mykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkxhdE1vZGFsKCdsYXRsb25nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQgPCAtMTc1IHx8ICRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQgPiAtNjApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5Mb25nTW9kYWwoJ2xhdGxvbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gIGxhdC9sb25nID1pcyBudW1iZXJcclxuICAgICAgICAgICAgICAgICRzY29wZS5pc051bSA9IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGhlRXZlbnQgPSBldnQgfHwgd2luZG93LmV2ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSB0aGVFdmVudC5rZXlDb2RlIHx8IHRoZUV2ZW50LndoaWNoO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChrZXkgIT0gNDYgJiYga2V5ICE9IDQ1ICYmIGtleSA+IDMxICYmIChrZXkgPCA0OCB8fCBrZXkgPiA1NykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhlRXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoZUV2ZW50LnByZXZlbnREZWZhdWx0KSB0aGVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy9nZXQgYWRkcmVzcyBwYXJ0cyBhbmQgZXhpc3Rpbmcgc2l0ZXMgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZ2V0QWRkcmVzcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2NsZWFyIHRoZW0gYWxsIGZpcnN0XHJcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlICRzY29wZS5hU2l0ZS5hZGRyZXNzOyBkZWxldGUgJHNjb3BlLmFTaXRlLmNpdHk7IGRlbGV0ZSAkc2NvcGUuYVNpdGUuc3RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRlQ291bnR5TGlzdCA9IFtdOyBkZWxldGUgJHNjb3BlLmFTaXRlLnppcDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MQURlZyAhPT0gdW5kZWZpbmVkKSAkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTEFEZWcsICRzY29wZS5ETVMuTEFNaW4sICRzY29wZS5ETVMuTEFTZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxPRGVnICE9PSB1bmRlZmluZWQpICRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTE9EZWcsICRzY29wZS5ETVMuTE9NaW4sICRzY29wZS5ETVMuTE9TZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuYVNpdGUubG9uZ2l0dWRlX2RkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IHRydWU7IC8vbG9hZGluZy4uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBHRU9DT0RFLmdldEFkZHJlc3NQYXJ0cyh7IExvbmdpdHVkZTogJHNjb3BlLmFTaXRlLmxvbmdpdHVkZV9kZCwgTGF0aXR1ZGU6ICRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2UucmVzdWx0Lmdlb2dyYXBoaWVzLkNvdW50aWVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGVGSVBTID0gcmVzcG9uc2UucmVzdWx0Lmdlb2dyYXBoaWVzLkNvdW50aWVzWzBdLlNUQVRFO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb3VudHlOYW1lID0gcmVzcG9uc2UucmVzdWx0Lmdlb2dyYXBoaWVzLkNvdW50aWVzWzBdLk5BTUU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNTdGF0ZUlEID0gJHNjb3BlLmFsbENvdW50eUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnN0YXRlX2ZpcCA9PSBzdGF0ZUZJUFM7IH0pWzBdLnN0YXRlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzU3RhdGUgPSAkc2NvcGUuc3RhdGVMaXN0LmZpbHRlcihmdW5jdGlvbihzKXtyZXR1cm4gcy5zdGF0ZV9pZCA9PSB0aGlzU3RhdGVJRDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTdGF0ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5zdGF0ZSA9IHRoaXNTdGF0ZS5zdGF0ZV9hYmJyZXY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZUNvdW50eUxpc3QgPSAkc2NvcGUuYWxsQ291bnR5TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuc3RhdGVfaWQgPT0gdGhpc1N0YXRlLnN0YXRlX2lkOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLmNvdW50eSA9IGNvdW50eU5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiVGhlIExhdGl0dWRlL0xvbmdpdHVkZSBkaWQgbm90IHJldHVybiBhIHJlY29nbml6ZWQgc3RhdGUuIFBsZWFzZSBjaG9vc2Ugb25lIGZyb20gdGhlIGRyb3Bkb3duLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJObyBsb2NhdGlvbiBpbmZvcm1hdGlvbiBjYW1lIGJhY2sgZnJvbSB0aGF0IGxhdC9sb25nXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBnZXR0aW5nIGFkZHJlc3M6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGV5IGRpZCBub3QgdHlwZSBhIGxhdC9sb25nIGZpcnN0Li4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVtcHR5TGF0TG9uZ01vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+UGxlYXNlIHByb3ZpZGUgYSBMYXRpdHVkZSBhbmQgTG9uZ2l0dWRlIGJlZm9yZSBjbGlja2luZyBWZXJpZnkgTG9jYXRpb248L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07Ly9lbmQgZ2V0QWRkcmVzcygpXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIGxhdC9sb25nIHN0dWZmXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy9od21fdW5jZXJ0YWludHkgdHlwZWQgaW4sIGNob29zZSBjb29yZXNwb25kaW5nIGh3bV9lbnZpcm9ubWVudFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNob29zZVF1YWxpdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hSFdNLmh3bV91bmNlcnRhaW50eSAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgeCA9IE51bWJlcigkc2NvcGUuYUhXTS5od21fdW5jZXJ0YWludHkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgRXhjZWxsZW50ICAgICstMC4wNSAgICAgICAwICAgICAgLSAgMC4wNTBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgIEdvb2QgICAgICAgICArLTAuMTAgICAgICAgMC4wNTEgIC0gIDAuMTAwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICBGYWlyICAgICAgICAgKy0wLjIwICAgICAgIDAuMTAxICAtICAwLjIwMFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgUG9vciAgICAgICAgICstMC40MCAgICAgICAwLjIwMSAgLSAgMC40MDBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgIFYgUG9vciAgICAgICA+IDAuNDAgICAgICAgMC40MDEgIC0gIGluZmluaXR5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLmh3bV9xdWFsaXR5X2lkID0gJHNjb3BlLmh3bVF1YWxMaXN0LmZpbHRlcihmdW5jdGlvbiAoaCkgeyByZXR1cm4gaC5taW5fcmFuZ2UgPD0geCAmJiBoLm1heF9yYW5nZSA+PSB4OyB9KVswXS5od21fcXVhbGl0eV9pZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy9od20gcXVhbGl0eSBjaG9zZW4gKG9yIGl0IGNoYW5nZWQgZnJvbSBhYm92ZSksIGNoZWNrIHRvIG1ha2Ugc3VyZSBpdCBpcyBjb25ncnVlbnQgd2l0aCBpbnB1dCBhYm92ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvbXBhcmVUb1VuY2VydGFpbnR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUhXTS5od21fdW5jZXJ0YWludHkgIT09IFwiXCIgJiYgJHNjb3BlLmFIV00uaHdtX3VuY2VydGFpbnR5ICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBOdW1iZXIoJHNjb3BlLmFIV00uaHdtX3VuY2VydGFpbnR5KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoaW5nUXVhbElkID0gJHNjb3BlLmh3bVF1YWxMaXN0LmZpbHRlcihmdW5jdGlvbiAoaCkgeyByZXR1cm4gaC5taW5fcmFuZ2UgPD0geCAmJiBoLm1heF9yYW5nZSA+PSB4OyB9KVswXS5od21fcXVhbGl0eV9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hSFdNLmh3bV9xdWFsaXR5X2lkICE9PSBtYXRjaGluZ1F1YWxJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9zaG93IHdhcm5pbmcgbW9kYWwgYW5kIGZvY3VzIGluIHVuY2VydGFpbnR5XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5jb25ncnVlbnRNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPldhcm5pbmc8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGVyZSBpcyBhIG1pc21hdGNoIGJldHdlZW4gdGhlIGh3bSBxdWFsaXR5IGNob3NlbiBhbmQgdGhlIGh3bSB1bmNlcnRhaW50eSBhYm92ZS4gUGxlYXNlIGNvcnJlY3QgeW91ciBod20gdW5jZXJ0YWludHkuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5jb25ncnVlbnRNb2RhbC5yZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KFwiW25hbWU9J2h3bV91bmNlcnRhaW50eSddXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gd2F0Y2ggZm9yIHRoZSBzZXNzaW9uIGV2ZW50IHRvIGNoYW5nZSBhbmQgdXBkYXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50TmFtZScpOyB9LCBmdW5jdGlvbiAobmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vzc2lvbkV2ZW50TmFtZSA9IG5ld1ZhbHVlICE9PSB1bmRlZmluZWQgPyBuZXdWYWx1ZSA6IFwiQWxsIEV2ZW50c1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXNzaW9uRXZlbnRFeGlzdHMgPSAkc2NvcGUuc2Vzc2lvbkV2ZW50TmFtZSAhPSBcIkFsbCBFdmVudHNcIiA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vd2hlbiBTSVRFLnN0YXRlIGNoYW5nZXMsIHVwZGF0ZSBjb3VudHkgbGlzdFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnVwZGF0ZUNvdW50eUxpc3QgPSBmdW5jdGlvbiAocykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGlzU3RhdGUgPSAkc2NvcGUuc3RhdGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoc3QpIHsgcmV0dXJuIHN0LnN0YXRlX2FiYnJldiA9PSBzOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVDb3VudHlMaXN0ID0gJHNjb3BlLmFsbENvdW50eUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnN0YXRlX2lkID09IHRoaXNTdGF0ZS5zdGF0ZV9pZDsgfSk7XHJcbiAgICAgICAgICAgICAgICB9Oy8vZW5kIHVwZGF0ZUNvdW50eUxpc3QoKSBmb3IgU2l0ZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vbWFrZSB1bmNlcnRhaW50eSBjbGVhcmVkIGFuZCBkaXNhYmxlZCB3aGVuICd1bnF1YW50aWZpZWQnIGlzIGNoZWNrZWRcclxuICAgICAgICAgICAgICAgICRzY29wZS5VbnF1YW50Q2hlY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFPUC51bnF1YW50aWZpZWQgPT0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFPUC51bmNlcnRhaW50eSA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICB9Oy8vZW5kIHVucXVhbnRDaGVja2VkKCkgZm9yIG9wXHJcblxyXG4gICAgICAgICAgICAgICAgLy9qdXN0IG5lZWQgYW4gT0JKRUNUSVZFX1BPSU5UIG9iamVjdCB0byBwb3N0L3B1dFxyXG4gICAgICAgICAgICAgICAgdmFyIHRyaW1PUCA9IGZ1bmN0aW9uIChvcCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBPQkpfUFQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdGl2ZV9wb2ludF9pZDogb3Aub2JqZWN0aXZlX3BvaW50X2lkICE9PSB1bmRlZmluZWQgPyBvcC5vYmplY3RpdmVfcG9pbnRfaWQgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBvcC5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogb3AuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsZXZfZnQ6IG9wLmVsZXZfZnQgIT09IHVuZGVmaW5lZCA/IG9wLmVsZXZfZnQgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlX2VzdGFibGlzaGVkOiBvcC5kYXRlX2VzdGFibGlzaGVkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcF9pc19kZXN0cm95ZWQ6IG9wLm9wX2lzX2Rlc3Ryb3llZCAhPT0gdW5kZWZpbmVkID8gb3Aub3BfaXNfZGVzdHJveWVkIDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3Bfbm90ZXM6IG9wLm9wX25vdGVzICE9PSB1bmRlZmluZWQgPyBvcC5vcF9ub3RlcyA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6IG9wLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZkYXR1bV9pZDogb3AudmRhdHVtX2lkICE9PSB1bmRlZmluZWQgPyBvcC52ZGF0dW1faWQgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZV9kZDogb3AubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZV9kZDogb3AubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBoZGF0dW1faWQ6IG9wLmhkYXR1bV9pZCAhPT0gdW5kZWZpbmVkID8gb3AuaGRhdHVtX2lkIDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGNvbGxlY3RfbWV0aG9kX2lkOiBvcC5oY29sbGVjdF9tZXRob2RfaWQgIT09IHVuZGVmaW5lZCA/IG9wLmhjb2xsZWN0X21ldGhvZF9pZCA6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZjb2xsZWN0X21ldGhvZF9pZDogb3AudmNvbGxlY3RfbWV0aG9kX2lkICE9PSB1bmRlZmluZWQgPyBvcC52Y29sbGVjdF9tZXRob2RfaWQgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcF90eXBlX2lkOiBvcC5vcF90eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRlX3JlY292ZXJlZDogb3AuZGF0ZV9yZWNvdmVyZWQgIT09IHVuZGVmaW5lZCA/IG9wLmRhdGVfcmVjb3ZlcmVkIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdW5jZXJ0YWludHk6IG9wLnVuY2VydGFpbnR5ICE9PSB1bmRlZmluZWQgPyBvcC51bmNlcnRhaW50eSA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVucXVhbnRpZmllZDogb3AudW5xdWFudGlmaWVkICE9PSB1bmRlZmluZWQgPyBvcC51bnF1YW50aWZpZWQgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcF9xdWFsaXR5X2lkOiBvcC5vcF9xdWFsaXR5X2lkICE9PSB1bmRlZmluZWQgPyBvcC5vcF9xdWFsaXR5X2lkIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBPQkpfUFQ7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vWCB3YXMgY2xpY2tlZCBuZXh0IHRvIGV4aXN0aW5nIENvbnRyb2wgSWRlbnRpZmllciB0byBoYXZlIGl0IHJlbW92ZWQsIHN0b3JlIGluIHJlbW92ZSBhcnJheSBmb3IgU2F2ZSgpXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuUmVtb3ZlSUQgPSBmdW5jdGlvbiAob3BDb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9vbmx5IGFkZCB0byByZW1vdmUgbGlzdCBpZiBpdCdzIGFuIGV4aXN0aW5nIG9uZSB0byBERUxFVEVcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaSA9ICRzY29wZS5hZGRlZElkZW50aWZpZXJzLmluZGV4T2Yob3BDb250cm9sKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BDb250cm9sLm9wX2NvbnRyb2xfaWRlbnRpZmllcl9pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZW1vdmVPUENhcnJheS5wdXNoKG9wQ29udHJvbCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRlZElkZW50aWZpZXJzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkZWRJZGVudGlmaWVycy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2ZpeCBkZWZhdWx0IHJhZGlvcyBhbmQgbGF0L2xvbmdcclxuICAgICAgICAgICAgICAgIHZhciBmb3JtYXREZWZhdWx0cyA9IGZ1bmN0aW9uICh0aGVPUCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLk9QLkZUb3JNRVRFUiBuZWVkcyB0byBiZSAnZnQnLiBpZiAnbWV0ZXInID09Y29udmVydCB2YWx1ZSB0byBmdCBcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhlT1AuRlRvck1FVEVSID09IFwibWV0ZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYU9QLkZUb3JNRVRFUiA9ICdmdCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hT1AuZWxldl9mdCA9ICRzY29wZS5hT1AuZWxldl9mdCAqIDMuMjgwODtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUuT1AuRlRvckNNIG5lZWRzIHRvIGJlICdmdCcuIGlmICdjbScgPT1jb252ZXJ0IHZhbHVlIHRvIGZ0IFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGVPUC5GVG9yQ00gPT0gXCJjbVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hT1AuRlRvckNNID0gJ2Z0JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFPUC51bmNlcnRhaW50eSA9ICRzY29wZS5hT1AudW5jZXJ0YWludHkgLyAzMC40ODtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnRhcGVkb3duID0geyBPcGVuOiBmYWxzZSB9O1xyXG4gICAgICAgICAgICAgICAgLy9zZW5zb3Igc2VjdGlvbiwgY2xpY2tlZCBTaG93L0hpZGUgVGFwZSBkb3duIGluZm9ybWF0aW9uXHJcbiAgICAgICAgICAgICAgICB2YXIgc2hvd05lZWRPUGZpcnN0TW9kYWwgPSBmdW5jdGlvbiAoKSB7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbmVlZE9QTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+Tm8gRGF0dW0gTG9jYXRpb248L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+SW4gb3JkZXIgdG8gYWRkIHRhcGUgZG93biBpbmZvcm1hdGlvbiwgcGxlYXNlIHBvcHVsYXRlIHRoZSBEYXR1bSBMb2NhdGlvbiBzZWN0aW9uIGFib3ZlIGZpcnN0LjwvcD4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8cD5UaGUgZm9sbG93aW5nIGZpZWxkcyBhcmUgcmVxdWlyZWQgZm9yIHRoZSB0YXBlIGRvd24gc2VjdGlvbjogPGI+TmFtZTwvYj4sIDxiPkVsZXZhdGlvbjwvYj4gYW5kIDxiPlZlcnRpY2FsIERhdHVtPC9iPi48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBuZWVkT1BNb2RhbC5yZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50YXBlZG93bi5PcGVuID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnRhcGVEb3duVGFibGUgPSBbXTsgLy9ob2xkZXIgZm9yIHRoZSBvcCBpZiB0aGV5IGNob29zZSBpdCBmcm9tIHRoZSBkcm9wZG93biBmb3IgdGFwZSBkb3duXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucmVtb3ZlT1AgPSBmdW5jdGlvbiAoKSB7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvL3RoZXkgdW5jaGVja2VkIHRoZSBvcCB0byByZW1vdmVcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlT1BNZWFzID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5SZW1vdmUgT1AgTWVhc3VyZTwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5BcmUgeW91IHN1cmUgeW91IGRvblxcJ3Qgd2FudCB0byBhZGQgdGhpcyBPUCBNZWFzdXJlbWVudCB0byB0aGlzIHF1aWNrIHNlbnNvcj88L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5ZZXM8L2J1dHRvbj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJjYW5jZWwoKVwiPkNhbmNlbDwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgncmVtb3ZlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgnY2FuY2VsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZU9QTWVhcy5yZXN1bHQudGhlbihmdW5jdGlvbiAoeWVzT3JObykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeWVzT3JObyA9PSAncmVtb3ZlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRhcGVkb3duLk9wZW4gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudGFwZURvd25UYWJsZS5zcGxpY2UoMCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BzRm9yVGFwZURvd24gPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PUE1lYXN1cmUgPSB7fTsgJHNjb3BlLmFkZFRhcGVkb3duID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMuc2Vuc29yX2VsZXZhdGlvbiA9ICcnOyAkc2NvcGUuYVNlbnNTdGF0dXMud3NfZWxldmF0aW9uID0gJyc7ICRzY29wZS5hU2Vuc1N0YXR1cy5nc19lbGV2YXRpb24gPSAnJzsgJHNjb3BlLmFTZW5zU3RhdHVzLnZkYXR1bV9pZCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZFRhcGVkb3duID0gZmFsc2U7IC8vdG9nZ2xlIHRhcGVkb3duIHNlY3Rpb24gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuT1BzRm9yVGFwZURvd24gPSBbXTsgLy93aWxsIGhvbGQgT1AgdGhleSBhZGQgaW4gb3AgYWNjb3JkaW9uLi4gZ2V0IHRoaXMgd2hlbiB0aGV5IGNsaWNrIHRoZSBidXR0b24gYW5kIHNob3cgbW9kYWwgaWYgdGhleSBoYXZlbid0IHBvcHVsYXRlZCBpdCB5ZXQuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1RhcGVkb3duUGFydCA9IGZ1bmN0aW9uICgpIHsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUudGFwZURvd25UYWJsZS5sZW5ndGggPCAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhleSBhcmUgb3BlbmluZyB0byBhZGQgdGFwZSBkb3duIGluZm9ybWF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYU9QLm5hbWUgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuYU9QLmVsZXZfZnQgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuYU9QLnZkYXR1bV9pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BNZWFzdXJlID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BNZWFzdXJlLm9wX25hbWUgPSAkc2NvcGUuYU9QLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BNZWFzdXJlLmVsZXZhdGlvbiA9ICRzY29wZS5hT1AuZWxldl9mdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PUE1lYXN1cmUuVmRhdHVtID0gJHNjb3BlLnZlcnREYXR1bUxpc3QuZmlsdGVyKGZ1bmN0aW9uICh2ZCkgeyByZXR1cm4gdmQuZGF0dW1faWQgPT0gJHNjb3BlLmFPUC52ZGF0dW1faWQ7IH0pWzBdLmRhdHVtX2FiYnJldmlhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50YXBlRG93blRhYmxlLnB1c2goJHNjb3BlLk9QTWVhc3VyZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9Qc0ZvclRhcGVEb3duLnB1c2goJHNjb3BlLmFPUCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkVGFwZWRvd24gPSB0cnVlOyAkc2NvcGUudGFwZWRvd24uT3BlbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMudmRhdHVtX2lkID0gJHNjb3BlLmFPUC52ZGF0dW1faWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaG93TmVlZE9QZmlyc3RNb2RhbCgpOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRUYXBlZG93biA9IHRydWU7ICRzY29wZS50YXBlZG93bi5PcGVuID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVFcnJvcnMgPSBmYWxzZTsgJHNjb3BlLm9wRXJyb3JzID0gZmFsc2U7ICRzY29wZS5od21FcnJvcnMgPSBmYWxzZTsgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY3JlYXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSB0cnVlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGVGb3JtID0gJHNjb3BlLnF1aWNrRm9ybS5xdWljazsgJHNjb3BlLnNpdGVFcnJvcnMgPSBmYWxzZTsgJHNjb3BlLm9wRXJyb3JzID0gZmFsc2U7ICRzY29wZS5od21FcnJvcnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhlRm9ybS4kdmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zaXRlIFBPU1RcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQgPT09IHVuZGVmaW5lZCkgJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxBRGVnLCAkc2NvcGUuRE1TLkxBTWluLCAkc2NvcGUuRE1TLkxBU2VjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQgPT09IHVuZGVmaW5lZCkgJHNjb3BlLmFTaXRlLmxvbmdpdHVkZV9kZCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MT0RlZywgJHNjb3BlLkRNUy5MT01pbiwgJHNjb3BlLkRNUy5MT1NlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjcmVhdGVkU2l0ZUlEID0gMDsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9QT1NUIHNpdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgU0lURS5zYXZlKCRzY29wZS5hU2l0ZSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFNpdGVJRCA9IHJlc3BvbnNlLnNpdGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYU9QLnNpdGVfaWQgPSBjcmVhdGVkU2l0ZUlEOyAkc2NvcGUuYU9QLmxhdGl0dWRlX2RkID0gcmVzcG9uc2UubGF0aXR1ZGVfZGQ7ICRzY29wZS5hT1AubG9uZ2l0dWRlX2RkID0gcmVzcG9uc2UubG9uZ2l0dWRlX2RkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFPUC5oZGF0dW1faWQgPSByZXNwb25zZS5oZGF0dW1faWQ7ICRzY29wZS5hT1AuaGNvbGxlY3RfbWV0aG9kX2lkID0gcmVzcG9uc2UuaGNvbGxlY3RfbWV0aG9kX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5DcmVhdGVXaGF0ID09ICdIV00nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uc2l0ZV9pZCA9IGNyZWF0ZWRTaXRlSUQ7ICRzY29wZS5hSFdNLndhdGVyYm9keSA9IHJlc3BvbnNlLndhdGVyYm9keTsgJHNjb3BlLmFIV00ubGF0aXR1ZGVfZGQgPSByZXNwb25zZS5sYXRpdHVkZV9kZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5sb25naXR1ZGVfZGQgPSByZXNwb25zZS5sb25naXR1ZGVfZGQ7ICRzY29wZS5hSFdNLmhjb2xsZWN0X21ldGhvZF9pZCA9IHJlc3BvbnNlLmhjb2xsZWN0X21ldGhvZF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5oZGF0dW1faWQgPSByZXNwb25zZS5oZGF0dW1faWQ7ICRzY29wZS5hSFdNLmZsYWdfbWVtYmVyX2lkID0gcmVzcG9uc2UubWVtYmVyX2lkOyAkc2NvcGUuYUhXTS5ldmVudF9pZCA9ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vT1Agc3R1ZmYgUE9TVFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNyZWF0ZWRPUCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wb3N0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXREZWZhdWx0cygkc2NvcGUuYU9QKTsgLy8kc2NvcGUuT1AuRlRvck1FVEVSLCBGVG9yQ00sIGRlY0RlZ09SZG1zICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIE9QdG9QT1NUID0gdHJpbU9QKCRzY29wZS5hT1ApOyAvL21ha2UgaXQgYW4gT0JKRUNUSVZFX1BPSU5UIGZvciBzYXZpbmdcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPQkpFQ1RJVkVfUE9JTlQuc2F2ZShPUHRvUE9TVCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRPUCA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYWRkZWRJZGVudGlmaWVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcG9zdCBlYWNoIG9uZSBUSElTIFdJTEwgQ0hBTkdFIFNPT04gVE8gSEFWRSBvYmplY3RpdmVfcG9pbnRfaWQgYWxyZWFkeSBhZGRlZCBhbmQgbm90IHNlbnQgYWxvbmcgd2l0aCBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBvcGMgPSAwOyBvcGMgPCAkc2NvcGUuYWRkZWRJZGVudGlmaWVycy5sZW5ndGg7IG9wYysrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc09QQ29udHJvbElEID0gJHNjb3BlLmFkZGVkSWRlbnRpZmllcnNbb3BjXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNPUENvbnRyb2xJRC5vYmplY3RpdmVfcG9pbnRfaWQgPSByZXNwb25zZS5vYmplY3RpdmVfcG9pbnRfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUF9DT05UUk9MX0lERU5USUZJRVIuc2F2ZSh0aGlzT1BDb250cm9sSUQpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vSFdNIHN0dWZmIFBPU1QgaWYgSFdNXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5DcmVhdGVXaGF0ID09ICdIV00nKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjcmVhdGVkSFdNID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgdGhleSBlbnRlcmVkIGEgc3VydmV5IGRhdGUgb3IgZWxldmF0aW9uLCB0aGVuIHNldCBzdXJ2ZXkgbWVtYmVyIGFzIHRoZSBmbGFnIG1lbWJlciAoZmxhZ2dpbmcgYW5kIHN1cnZleWluZyBhdCBzYW1lIHRpbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hSFdNLnN1cnZleV9kYXRlICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5zdXJ2ZXlfbWVtYmVyX2lkID0gJHNjb3BlLmFIV00uZmxhZ19tZW1iZXJfaWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFIV00uZWxldl9mdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSB0aGV5IGFkZGVkIHRoZSBzdXJ2ZXkgZGF0ZSBpZiB0aGV5IGFkZGVkIGFuIGVsZXZhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hSFdNLnN1cnZleV9kYXRlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uc3VydmV5X2RhdGUgPSBtYWtlQWRhdGUoXCJcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uc3VydmV5X21lbWJlcl9pZCA9ICRzY29wZS5hSFdNLmZsYWdfbWVtYmVyX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhXTS5zYXZlKCRzY29wZS5hSFdNKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJRdWljayBIV00gY3JlYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvU2l0ZS8nICsgY3JlYXRlZFNpdGVJRCArICcvU2l0ZURhc2hib2FyZCcpLnJlcGxhY2UoKTsvLy5ub3RpZnkoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFwcGx5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBIV00uc2F2ZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfS8vZW5kIEhXTSBjcmVhdGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuQ3JlYXRlV2hhdCA9PSAnU2Vuc29yJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlZFNlbnNvciA9IHt9OyB2YXIgZGVwU2VuU3RhdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkludGVydmFsVHlwZS50eXBlID09IFwiTWludXRlc1wiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zb3IuaW50ZXJ2YWwgPSAkc2NvcGUuYVNlbnNvci5pbnRlcnZhbCAqIDYwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zb3Iuc2l0ZV9pZCA9IGNyZWF0ZWRTaXRlSUQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlYWxXaXRoVGltZVN0YW1wYjRTZW5kKCk7IC8vVVRDIG9yIGxvY2FsP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSU5TVFJVTUVOVC5zYXZlKCRzY29wZS5hU2Vuc29yKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jcmVhdGUgaW5zdHJ1bWVudHN0YXR1cyB0b28gXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkU2Vuc29yID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMuaW5zdHJ1bWVudF9pZCA9IHJlc3BvbnNlLmluc3RydW1lbnRfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBJTlNUUlVNRU5UX1NUQVRVUy5zYXZlKCRzY29wZS5hU2Vuc1N0YXR1cykuJHByb21pc2UudGhlbihmdW5jdGlvbiAoc3RhdFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hZGRlZCB0YXBlIGRvd25zP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUudGFwZURvd25UYWJsZS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzVGFwZSA9ICRzY29wZS50YXBlRG93blRhYmxlWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzVGFwZS5pbnN0cnVtZW50X3N0YXR1c19pZCA9IHN0YXRSZXNwb25zZS5pbnN0cnVtZW50X3N0YXR1c19pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1RhcGUub2JqZWN0aXZlX3BvaW50X2lkID0gY3JlYXRlZE9QLm9iamVjdGl2ZV9wb2ludF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vUE9TVCBJVC8vL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUF9NRUFTVVJFLnNhdmUodGhpc1RhcGUpLiRwcm9taXNlOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlF1aWNrIFNlbnNvciBjcmVhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL1NpdGUvJyArIGNyZWF0ZWRTaXRlSUQgKyAnL1NpdGVEYXNoYm9hcmQnKS5yZXBsYWNlKCk7Ly8ubm90aWZ5KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXBwbHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBJbnN0cnVtZW50IFN0YXR1cyBzYXZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIGluc3RydW1lbnRTYXZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfS8vZW5kIGlmIHNlbnNvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgT1Auc2F2ZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIFNJVEUuc2F2ZSgpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cy5zaXRlT3BlbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMub3BPcGVuID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cy5od21PcGVuID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChcIltuYW1lPSdcIiArIHRoZUZvcm0uJG5hbWUgKyBcIiddXCIpLmZpbmQoJy5uZy1pbnZhbGlkOnZpc2libGU6Zmlyc3QnKS5mb2N1cygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoZUZvcm0uc2l0ZV9kZXNjcmlwdGlvbi4kaW52YWxpZCB8fCB0aGVGb3JtLmxhdGl0dWRlX2RkLiRpbnZhbGlkIHx8IHRoZUZvcm0ubG9uZ2l0dWRlX2RkLiRpbnZhbGlkIHx8IHRoZUZvcm0uaGRhdHVtX2lkLiRpbnZhbGlkIHx8IHRoZUZvcm0uaGNvbGxlY3RfbWV0aG9kX2lkLiRpbnZhbGlkIHx8IHRoZUZvcm0ud2F0ZXJib2R5LiRpbnZhbGlkIHx8IHRoZUZvcm0uc3RhdGUuJGludmFsaWR2IHx8IHRoZUZvcm0uY291bnR5LiRpbnZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZUVycm9ycyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoZUZvcm0ub3BfdHlwZV9pZC4kaW52YWxpZCB8fCB0aGVGb3JtLm5hbWUuJGludmFsaWQgfHwgdGhlRm9ybS5kZXNjcmlwdGlvbi4kaW52YWxpZCB8fCB0aGVGb3JtLmRlLiRpbnZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3BFcnJvcnMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGVGb3JtLmh3bV90eXBlX2lkLiRpbnZhbGlkIHx8IHRoZUZvcm0uaHdtX2Vudmlyb25tZW50LiRpbnZhbGlkIHx8IHRoZUZvcm0uaHdtX3F1YWxpdHlfaWQuJGludmFsaWQgfHwgdGhlRm9ybS5mZC4kaW52YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bUVycm9ycyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiUXVpY2sgSFdNIG5vdCBjcmVhdGVkLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9Ly9lbmQgZWxzZSAobG9nZ2VkIGluKVxyXG4gICAgICAgIH1dKTtcclxuICBcclxufSkoKTsiLCIvLy8gPHJlZmVyZW5jZSBwYXRoPVwic2Vuc29yTW9kYWxDdHJsLmpzXCIgLz5cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgTW9kYWxDb250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdNb2RhbENvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgLy9kZXBsb3kgbmV3IG9yIHByb3Bvc2VkIHNlbnNvciwgZWRpdCBkZXBsb3llZCBtb2RhbFxyXG4gICAgTW9kYWxDb250cm9sbGVycy5jb250cm9sbGVyKCdzZW5zb3JNb2RhbEN0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyR0aW1lb3V0JywgJyRjb29raWVzJywgJyRodHRwJywgJyRzY2UnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCAnJHVpYk1vZGFsJywgJ1NFUlZFUl9VUkwnLCdGSUxFX1NUQU1QJywgJ2FsbERyb3Bkb3ducycsICdhZ2VuY3lMaXN0JywgJ1NpdGVfRmlsZXMnLCAnYWxsRGVwVHlwZXMnLCAndGhpc1NlbnNvcicsICdTZW5zb3JTaXRlJywgJ3NpdGVPUHMnLCAnYWxsTWVtYmVycycsICdJTlNUUlVNRU5UJywgJ0lOU1RSVU1FTlRfU1RBVFVTJywgJ0RBVEFfRklMRScsICdGSUxFJywgJ1NPVVJDRScsJ09QX01FQVNVUkUnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICR0aW1lb3V0LCAkY29va2llcywgJGh0dHAsICRzY2UsICR1aWJNb2RhbEluc3RhbmNlLCAkdWliTW9kYWwsIFNFUlZFUl9VUkwsIEZJTEVfU1RBTVAsIGFsbERyb3Bkb3ducywgYWdlbmN5TGlzdCwgU2l0ZV9GaWxlcywgYWxsRGVwVHlwZXMsIHRoaXNTZW5zb3IsIFNlbnNvclNpdGUsIHNpdGVPUHMsIGFsbE1lbWJlcnMsIElOU1RSVU1FTlQsIElOU1RSVU1FTlRfU1RBVFVTLCBEQVRBX0ZJTEUsIEZJTEUsIFNPVVJDRSwgT1BfTUVBU1VSRSkge1xyXG4gICAgICAgICAgIC8vZHJvcGRvd25zIFswXWFsbFNlbnNvclR5cGVzLCBbMV1hbGxTZW5zb3JCcmFuZHMsIFsyXWFsbEhvdXNpbmdUeXBlcywgWzNdYWxsU2Vuc0RlcHMsIFs0XWFsbEV2ZW50cyAgICAgIFxyXG4gICAgICAgICAgICRzY29wZS5zZW5zb3JUeXBlTGlzdCA9IGFsbERyb3Bkb3duc1swXTtcclxuICAgICAgICAgICAkc2NvcGUuc2Vuc29yQnJhbmRMaXN0ID0gYWxsRHJvcGRvd25zWzFdO1xyXG4gICAgICAgICAgICRzY29wZS5ob3VzZVR5cGVMaXN0ID0gYWxsRHJvcGRvd25zWzJdO1xyXG4gICAgICAgICAgLy8gJHNjb3BlLnNlbnNvckRlcGxveUxpc3QgPSBhbGxEcm9wZG93bnNbM107XHJcbiAgICAgICAgICAgJHNjb3BlLmV2ZW50TGlzdCA9IGFsbERyb3Bkb3duc1szXTtcclxuICAgICAgICAgICAkc2NvcGUuZmlsZVR5cGVMaXN0ID0gYWxsRHJvcGRvd25zWzRdOyAvL3VzZWQgaWYgY3JlYXRpbmcvZWRpdGluZyBkZXBTZW5zIGZpbGVcclxuICAgICAgICAgICAkc2NvcGUudmVydERhdHVtTGlzdCA9IGFsbERyb3Bkb3duc1s1XTtcclxuICAgICAgICAgICAkc2NvcGUuZGVwU2VuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7IC8vTG9hZGluZy4uLlxyXG4gICAgICAgICAgICRzY29wZS5hbGxTRmlsZXMgPSBTaXRlX0ZpbGVzLmdldEFsbFNpdGVGaWxlcygpO1xyXG4gICAgICAgICAgICRzY29wZS5EZXBTZW5zb3JGaWxlcyA9IHRoaXNTZW5zb3IgIT09IFwiZW1wdHlcIiA/ICRzY29wZS5hbGxTRmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChzZikgeyByZXR1cm4gc2YuaW5zdHJ1bWVudF9pZCA9PSB0aGlzU2Vuc29yLmluc3RydW1lbnRfaWQ7IH0pIDogW107Ly8gaG9sZGVyIGZvciBod20gZmlsZXMgYWRkZWRcclxuICAgICAgICAgICAkc2NvcGUuZGVwU2Vuc0ltYWdlRmlsZXMgPSAkc2NvcGUuRGVwU2Vuc29yRmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChoZikgeyByZXR1cm4gaGYuZmlsZXR5cGVfaWQgPT09IDE7IH0pOyAvL2ltYWdlIGZpbGVzIGZvciBjYXJvdXNlbFxyXG4gICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgLy9oaWRkZW4gZm9ybSB0byBhZGQgZmlsZSB0byBod21cclxuICAgICAgICAgICAkc2NvcGUuc2hvd05XSVNGaWxlRm9ybSA9IGZhbHNlOyAvL2hpZGRlbiBmb3JtIHRvIGFkZCBud2lzIGZpbGUgdG8gc2Vuc29yXHJcbiAgICAgICAgICAgJHNjb3BlLk9Qc1ByZXNlbnQgPSBzaXRlT1BzLmxlbmd0aCA+IDAgPyB0cnVlIDogZmFsc2U7ICAgICAgICAgICBcclxuICAgICAgICAgICAkc2NvcGUuT1BzRm9yVGFwZURvd24gPSBzaXRlT1BzO1xyXG4gICAgICAgICAgICRzY29wZS5yZW1vdmVPUExpc3QgPSBbXTtcclxuICAgICAgICAgICAkc2NvcGUudGFwZURvd25UYWJsZSA9IFtdOyAvL2hvbGRlciBvZiB0YXBlZG93biBPUF9NRUFTVVJFTUVOVFNcclxuICAgICAgICAgICAkc2NvcGUuZGVwVHlwZUxpc3QgPSBhbGxEZXBUeXBlczsgLy9nZXQgZnJlc2ggdmVyc2lvbiBzbyBub3QgbWVzc2VkIHVwIHdpdGggdGhlIFRlbXBlcmF0dXJlIHR3aWNlXHJcbiAgICAgICAgICAgJHNjb3BlLmZpbHRlcmVkRGVwbG95bWVudFR5cGVzID0gW107XHJcbiAgICAgICAgICAgJHNjb3BlLnRpbWVab25lTGlzdCA9IFsnVVRDJywgJ1BTVCcsICdNU1QnLCAnQ1NUJywgJ0VTVCddO1xyXG4gICAgICAgICAgICRzY29wZS51c2VyUm9sZSA9ICRjb29raWVzLmdldCgndXNlcnNSb2xlJyk7XHJcbiAgICAgICAgICAgJHNjb3BlLnNob3dFdmVudEREID0gZmFsc2U7IC8vdG9nZ2xlIHRvIHNob3cvaGlkZSBldmVudCBkZCAoYWRtaW4gb25seSlcclxuICAgICAgICAgICAkc2NvcGUuYWRtaW5DaGFuZ2VkID0ge307IC8vd2lsbCBob2xkIGV2ZW50X2lkIGlmIGFkbWluIGNoYW5nZXMgaXQuIGFwcGx5IHdoZW4gUFVUdGluZ1xyXG4gICAgICAgICAgICRzY29wZS5JbnRlcnZhbFR5cGUgPSB7fTsgLy9ob2xkZXIgZm9yIG1pbnV0ZS9zZWNvbmQgcmFkaW8gYnV0dG9uc1xyXG4gICAgICAgICAgICRzY29wZS53aGljaEJ1dHRvbiA9IFwiXCI7IC8vaG9sZGVyIGZvciBzYXZlL2RlcGxveSBidXR0b24gYXQgZW5kIC4uICdkZXBsb3knIGlmIHByb3Bvc2VkLT5kZXBsb3llZCwgYW5kIGZvciBkZXBsb3lpbmcgbmV3IG9yIHNhdmUgaWYgZWRpdGluZyBleGlzdGluZ1xyXG4gICAgICAgICAgICRzY29wZS5zZXJ2ZXJVUkwgPSBTRVJWRVJfVVJMO1xyXG4gICAgICAgICAgICRzY29wZS5ud2lzSGVhZGVyVGlwID0gJHNjZS50cnVzdEFzSHRtbCgnQ29ubmVjdCB5b3VyIHRyYW5zbWl0dGluZyBzZW5zb3Igd2l0aCBOV0lTIHZpYSA8ZW0+U3RhdGlvbiBJRCBmb3IgVVNHUyBnYWdlPC9lbT4gZnJvbSB0aGUgU2l0ZSBkZXRhaWxzLicpO1xyXG4gICAgICAgICAgICRzY29wZS52aWV3ID0geyBERVB2YWw6ICdkZXRhaWwnLCBSRVR2YWw6ICdkZXRhaWwnIH07XHJcbiAgICAgICAgICAgJHNjb3BlLnNlbnNvckRhdGFOV0lTID0gZmFsc2U7IC8vaXMgdGhpcyBhIHJhaW4gZ2FnZSwgbWV0IHN0YXRpb24sIG9yIHJkZyBzZW5zb3IgLS0gaWYgc28sIGRhdGEgZmlsZSBtdXN0IGJlIGNyZWF0ZWQgcG9pbnRpbmcgdG8gbndpcyAod2UgZG9uJ3Qgc3RvcmUgYWN0dWFsIGZpbGUsIGp1c3QgbWV0YWRhdGEgd2l0aCBsaW5rKVxyXG4gICAgICAgICAgICRzY29wZS5zID0geyBkZXBPcGVuOiB0cnVlLCBzRmlsZU9wZW46IGZhbHNlLCBOV0lTRmlsZU9wZW46IGZhbHNlfTtcclxuICAgICAgICAgICAvL2Zvcm1hdHRpbmcgZGF0ZSBhbmQgdGltZSBwcm9wZXJseSBmb3IgY2hyb21lIGFuZCBmZlxyXG4gICAgICAgICAgIHZhciBnZXREYXRlVGltZVBhcnRzID0gZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgICAgdmFyIHRoZURhdGU7XHJcbiAgICAgICAgICAgICAgIHZhciBpc0RhdGUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoZCkgPT09ICdbb2JqZWN0IERhdGVdJztcclxuICAgICAgICAgICAgICAgaWYgKGlzRGF0ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgIHZhciB5ID0gZC5zdWJzdHIoMCwgNCk7XHJcbiAgICAgICAgICAgICAgICAgICB2YXIgbSA9IGQuc3Vic3RyKDUsIDIpIC0gMTsgLy9zdWJ0cmFjdCAxIGZvciBpbmRleCB2YWx1ZSAoSmFudWFyeSBpcyAwKVxyXG4gICAgICAgICAgICAgICAgICAgdmFyIGRhID0gZC5zdWJzdHIoOCwgMik7XHJcbiAgICAgICAgICAgICAgICAgICB2YXIgaCA9IGQuc3Vic3RyKDExLCAyKTtcclxuICAgICAgICAgICAgICAgICAgIHZhciBtaSA9IGQuc3Vic3RyKDE0LCAyKTtcclxuICAgICAgICAgICAgICAgICAgIHZhciBzZWMgPSBkLnN1YnN0cigxNywgMik7XHJcbiAgICAgICAgICAgICAgICAgICB0aGVEYXRlID0gbmV3IERhdGUoeSwgbSwgZGEsIGgsIG1pLCBzZWMpO1xyXG4gICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgdGhlRGF0ZSA9IGQ7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgcmV0dXJuIHRoZURhdGU7XHJcbiAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vbmV3IGRhdGV0aW1lcGlja2VyIGh0dHBzOi8vZ2l0aHViLmNvbS96aGFiZXIvYW5ndWxhci1qcy1ib290c3RyYXAtZGF0ZXRpbWVwaWNrZXJcclxuICAgICAgICAgICAkc2NvcGUuZGF0ZU9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgIHN0YXJ0aW5nRGF5OiAxLFxyXG4gICAgICAgICAgICAgICBzaG93V2Vla3M6IGZhbHNlXHJcbiAgICAgICAgICAgfTtcclxuICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tycyA9IHt9O1xyXG4gICAgICAgICAgICRzY29wZS5vcGVuID0gZnVuY3Rpb24gKCRldmVudCwgd2hpY2gpIHtcclxuICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICRzY29wZS5kYXRlcGlja3JzW3doaWNoXSA9IHRydWU7XHJcbiAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vI3JlZ2lvbiBmaWxlIFVwbG9hZFxyXG4gICAgICAgICAgICRzY29wZS5zdGFtcCA9IEZJTEVfU1RBTVAuZ2V0U3RhbXAoKTsgJHNjb3BlLmZpbGVJdGVtRXhpc3RzID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy9uZWVkIHRvIHJldXBsb2FkIGZpbGVJdGVtIHRvIHRoaXMgZXhpc3RpbmcgZmlsZSBPUiBDaGFuZ2Ugb3V0IGV4aXN0aW5nIGZpbGVJdGVtIGZvciBuZXcgb25lXHJcbiAgICAgICAgICAgJHNjb3BlLnNhdmVGaWxlVXBsb2FkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgJHNjb3BlLnNGaWxlSXNVcGxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICB2YXIgZmlsZVBhcnRzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgRmlsZUVudGl0eToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGZpbGVfaWQ6ICRzY29wZS5hRmlsZS5maWxlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICRzY29wZS5hRmlsZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAkc2NvcGUuYUZpbGUuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9fZGlyZWN0aW9uOiAkc2NvcGUuYUZpbGUucGhvdG9fZGlyZWN0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlX2RkOiAkc2NvcGUuYUZpbGUubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlX2RkOiAkc2NvcGUuYUZpbGUubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIGZpbGVfZGF0ZTogJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICBod21faWQ6ICRzY29wZS5hRmlsZS5od21faWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogJHNjb3BlLmFGaWxlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgZmlsZXR5cGVfaWQ6ICRzY29wZS5hRmlsZS5maWxldHlwZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VfaWQ6ICRzY29wZS5hRmlsZS5zb3VyY2VfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogJHNjb3BlLmFGaWxlLnBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgZGF0YV9maWxlX2lkOiAkc2NvcGUuYUZpbGUuZGF0YV9maWxlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnRfaWQ6ICRzY29wZS5hRmlsZS5pbnN0cnVtZW50X2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RhdGU6ICRzY29wZS5hRmlsZS5waG90b19kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIGlzX253aXM6ICRzY29wZS5hRmlsZS5pc19ud2lzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgIG9iamVjdGl2ZV9wb2ludF9pZDogJHNjb3BlLmFGaWxlLm9iamVjdGl2ZV9wb2ludF9pZFxyXG4gICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgIEZpbGU6ICRzY29wZS5hRmlsZS5GaWxlMSAhPT0gdW5kZWZpbmVkID8gJHNjb3BlLmFGaWxlLkZpbGUxIDogJHNjb3BlLmFGaWxlLkZpbGVcclxuICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgLy9uZWVkIHRvIHB1dCB0aGUgZmlsZVBhcnRzIGludG8gY29ycmVjdCBmb3JtYXQgZm9yIHBvc3RcclxuICAgICAgICAgICAgICAgdmFyIGZkID0gbmV3IEZvcm1EYXRhKCk7XHJcbiAgICAgICAgICAgICAgIGZkLmFwcGVuZChcIkZpbGVFbnRpdHlcIiwgSlNPTi5zdHJpbmdpZnkoZmlsZVBhcnRzLkZpbGVFbnRpdHkpKTtcclxuICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZVwiLCBmaWxlUGFydHMuRmlsZSk7XHJcbiAgICAgICAgICAgICAgIC8vbm93IFBPU1QgaXQgKGZpbGVwYXJ0cylcclxuICAgICAgICAgICAgICAgRklMRS51cGxvYWRGaWxlKGZkKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChmcmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGxvYWRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5zcmMgPSAkc2NvcGUuc2VydmVyVVJMICsgJy9GaWxlcy8nICsgJHNjb3BlLmFGaWxlLmZpbGVfaWQgKyAnL0l0ZW0nICsgRklMRV9TVEFNUC5nZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgRklMRV9TVEFNUC5zZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YW1wID0gRklMRV9TVEFNUC5nZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5GaWxlMS50eXBlLmluZGV4T2YoXCJpbWFnZVwiKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzUGhvdG8gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgfSBlbHNlICRzY29wZS5pc1Bob3RvID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUubmFtZSA9IGZyZXNwb25zZS5uYW1lOyAkc2NvcGUuYUZpbGUucGF0aCA9IGZyZXNwb25zZS5wYXRoO1xyXG4gICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5GaWxlMSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLkZpbGUgPSAkc2NvcGUuYUZpbGUuRmlsZTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLkZpbGUxID0gdW5kZWZpbmVkOyAvL3B1dCBpdCBhcyBmaWxlIGFuZCByZW1vdmUgaXQgZnJvbSAxXHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICBmcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9ICRzY29wZS5hRmlsZS5maWxldHlwZV9pZCA9PSAyID8gXCJEYXRhRmlsZSBGaWxlXCIgOiBcIlNlbnNvciBGaWxlXCI7ICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgaWYgKGZyZXNwb25zZS5maWxldHlwZV9pZCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBTZW5zSW1hZ2VGaWxlcy5zcGxpY2UoJHNjb3BlLmV4aXN0SU1HRmlsZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU2Vuc0ltYWdlRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLkRlcFNlbnNvckZpbGVzWyRzY29wZS5leGlzdEZpbGVJbmRleF0gPSBmcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzWyRzY29wZS5hbGxTRmlsZUluZGV4XSA9IGZyZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLnNGaWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlSXRlbUV4aXN0cyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGZpbGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vc2hvdyBhIG1vZGFsIHdpdGggdGhlIGxhcmdlciBpbWFnZSBhcyBhIHByZXZpZXcgb24gdGhlIHBob3RvIGZpbGUgZm9yIHRoaXMgb3BcclxuICAgICAgICAgICAkc2NvcGUuc2hvd0ltYWdlTW9kYWwgPSBmdW5jdGlvbiAoaW1hZ2UpIHtcclxuICAgICAgICAgICAgICAgdmFyIGltYWdlTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkltYWdlIEZpbGUgUHJldmlldzwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PGltZyBuZy1zcmM9XCJ7e3NldFNSQ319XCIgLz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmltYWdlSWQgPSBpbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2V0U1JDID0gU0VSVkVSX1VSTCArICcvRmlsZXMvJyArICRzY29wZS5pbWFnZUlkICsgJy9JdGVtJztcclxuICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgc2l6ZTogJ21kJ1xyXG4gICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy93YW50IHRvIGFkZCBvciBlZGl0IGZpbGVcclxuICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGUgPSBmdW5jdGlvbiAoZmlsZSkge1xyXG4gICAgICAgICAgICAgICAkc2NvcGUuZmlsZVR5cGVzID0gJHNjb3BlLmZpbGVUeXBlTGlzdDtcclxuICAgICAgICAgICAgICAgJHNjb3BlLmFnZW5jaWVzID0gYWdlbmN5TGlzdDtcclxuICAgICAgICAgICAgICAgJHNjb3BlLmV4aXN0RmlsZUluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICRzY29wZS5leGlzdElNR0ZpbGVJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVJbmRleCA9IC0xOyAvL2luZGV4ZXMgZm9yIHNwbGljZS9jaGFuZ2VcclxuICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlID0ge307IC8vaG9sZGVyIGZvciBmaWxlXHJcbiAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlID0ge307IC8vaG9sZGVyIGZvciBmaWxlIHNvdXJjZVxyXG4gICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUgPSB7fTsgLy9ob2xkZXIgZm9yIGZpbGUgZGF0YWZpbGVcclxuICAgICAgICAgICAgICAgaWYgKGZpbGUgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgIC8vZWRpdCBvcCBmaWxlXHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhpc3RGaWxlSW5kZXggPSAkc2NvcGUuRGVwU2Vuc29yRmlsZXMuaW5kZXhPZihmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZUluZGV4ID0gJHNjb3BlLmFsbFNGaWxlcy5pbmRleE9mKGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4aXN0SU1HRmlsZUluZGV4ID0gJHNjb3BlLmRlcFNlbnNJbWFnZUZpbGVzLmxlbmd0aCA+IDAgPyAkc2NvcGUuZGVwU2Vuc0ltYWdlRmlsZXMuaW5kZXhPZihmaWxlKSA6IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlID0gYW5ndWxhci5jb3B5KGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgRklMRS5nZXRGaWxlSXRlbSh7IGlkOiAkc2NvcGUuYUZpbGUuZmlsZV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlSXRlbUV4aXN0cyA9IHJlc3BvbnNlLkxlbmd0aCA+IDAgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5maWxlVHlwZSA9ICRzY29wZS5maWxlVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChmdCkgeyByZXR1cm4gZnQuZmlsZXR5cGVfaWQgPT0gJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkOyB9KVswXS5maWxldHlwZTtcclxuICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUubmFtZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZJID0gJHNjb3BlLmFGaWxlLm5hbWUubGFzdEluZGV4T2YoXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlRXh0ID0gJHNjb3BlLmFGaWxlLm5hbWUuc3Vic3RyaW5nKGZJICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVFeHQubWF0Y2goLyhqcGd8SlBHfGpwZWd8SlBFR3xwbmd8UE5HfGdpZnxHSUYpJC8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1Bob3RvID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgJHNjb3BlLmlzUGhvdG8gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5zcmMgPSAkc2NvcGUuc2VydmVyVVJMICsgJy9GaWxlcy8nICsgJHNjb3BlLmFGaWxlLmZpbGVfaWQgKyAnL0l0ZW0nICsgRklMRV9TVEFNUC5nZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5hRmlsZS5maWxlX2RhdGUpOyAvL2RhdGUgZm9yIHZhbGlkaXR5IG9mIGZvcm0gb24gUFVUXHJcbiAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUgIT09IHVuZGVmaW5lZCkgJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUgPSBuZXcgRGF0ZSgkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSk7IC8vZGF0ZSBmb3IgdmFsaWRpdHkgb2YgZm9ybSBvbiBQVVRcclxuICAgICAgICAgICAgICAgICAgIGlmIChmaWxlLnNvdXJjZV9pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgU09VUkNFLnF1ZXJ5KHsgaWQ6IGZpbGUuc291cmNlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UgPSBzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZS5GVUxMbmFtZSA9ICRzY29wZS5hU291cmNlLnNvdXJjZV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FkZCBhZ2VuY3kgbmFtZSB0byBwaG90byBjYXB0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQgPT0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY3lOYW1lRm9yQ2FwID0gJHNjb3BlLmFnZW5jaWVzLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gJHNjb3BlLmFTb3VyY2UuYWdlbmN5X2lkOyB9KVswXS5hZ2VuY3lfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgIH0vL2VuZCBpZiBzb3VyY2VcclxuICAgICAgICAgICAgICAgICAgIGlmIChmaWxlLmRhdGFfZmlsZV9pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgREFUQV9GSUxFLnF1ZXJ5KHsgaWQ6IGZpbGUuZGF0YV9maWxlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZSA9IGRmO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc29yID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRzY29wZS5kYXRhZmlsZS5wcm9jZXNzb3JfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUuY29sbGVjdF9kYXRlID0gbmV3IERhdGUoJHNjb3BlLmRhdGFmaWxlLmNvbGxlY3RfZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0ID0gZ2V0RGF0ZVRpbWVQYXJ0cygkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCA9IGdldERhdGVUaW1lUGFydHMoJHNjb3BlLmRhdGFmaWxlLmdvb2RfZW5kKTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfS8vZW5kIGV4aXN0aW5nIGZpbGVcclxuICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAvL2NyZWF0aW5nIGEgZmlsZVxyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSA9IG5ldyBEYXRlKCk7ICRzY29wZS5hRmlsZS5waG90b19kYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRjb29raWVzLmdldCgnbUlEJyk7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UuRlVMTG5hbWUgPSAkc2NvcGUuYVNvdXJjZS5mbmFtZSArIFwiIFwiICsgJHNjb3BlLmFTb3VyY2UubG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJvY2Vzc29yID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRjb29raWVzLmdldCgnbUlEJyk7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgdmFyIGR0ID0gZ2V0VGltZVpvbmVTdGFtcCgpOyAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmNvbGxlY3RfZGF0ZSA9IGR0WzBdO1xyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLnRpbWVfem9uZSA9IGR0WzFdOyAvL3dpbGwgYmUgY29udmVydGVkIHRvIHV0YyBvbiBwb3N0L3B1dCBcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0ID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgIH0gLy9lbmQgbmV3IGZpbGVcclxuICAgICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAkc2NvcGUudXBkYXRlQWdlbmN5Rm9yQ2FwdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQgPT0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWdlbmN5TmFtZUZvckNhcCA9ICRzY29wZS5hZ2VuY2llcy5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuYWdlbmN5X2lkID09ICRzY29wZS5hU291cmNlLmFnZW5jeV9pZDsgfSlbMF0uYWdlbmN5X25hbWU7XHJcbiAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9jcmVhdGUgdGhpcyBuZXcgZmlsZVxyXG4gICAgICAgICAgICRzY29wZS5jcmVhdGVGaWxlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQgPT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgZW5kIGRhdGUgaXMgYWZ0ZXIgc3RhcnQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgdmFyIHMgPSAkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydDsvL25lZWQgdG8gZ2V0IGRlcCBzdGF0dXMgZGF0ZSBpbiBzYW1lIGZvcm1hdCBhcyByZXRyaWV2ZWQgdG8gY29tcGFyZVxyXG4gICAgICAgICAgICAgICAgICAgdmFyIGUgPSAkc2NvcGUuZGF0YWZpbGUuZ29vZF9lbmQ7IC8vc3R1cGlkIGNvbW1hIGluIHRoZXJlIG1ha2luZyBpdCBub3QgdGhlIHNhbWVcclxuICAgICAgICAgICAgICAgICAgIGlmIChuZXcgRGF0ZShlKSA8IG5ldyBEYXRlKHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICB2YXIgZml4RGF0ZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGUgZ29vZCBlbmQgZGF0ZSBtdXN0IGJlIGFmdGVyIHRoZSBnb29kIHN0YXJ0IGRhdGUuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgZml4RGF0ZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU2VuZmlsZUlzVXBsb2FkaW5nID0gdHJ1ZTsgLy9Mb2FkaW5nLi4uXHJcbiAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAvL3Bvc3Qgc291cmNlIG9yIGRhdGFmaWxlIGZpcnN0IHRvIGdldCBzb3VyY2VfaWQgb3IgZGF0YV9maWxlX2lkXHJcbiAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkID09IDIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgIC8vZGV0ZXJtaW5lIHRpbWV6b25lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5kYXRhZmlsZS50aW1lX3pvbmUgIT0gXCJVVENcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnZlcnQgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHV0Y1N0YXJ0RGF0ZVRpbWUgPSBuZXcgRGF0ZSgkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHV0Y0VuZERhdGVUaW1lID0gbmV3IERhdGUoJHNjb3BlLmRhdGFmaWxlLmdvb2RfZW5kKS50b1VUQ1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydCA9IHV0Y1N0YXJ0RGF0ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCA9IHV0Y0VuZERhdGVUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUudGltZV96b25lID0gJ1VUQyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgJ0dNVCcgaXMgdGFja2VkIG9uIHNvIGl0IGRvZXNuJ3QgdHJ5IHRvIGFkZCBocnMgdG8gbWFrZSB0aGUgYWxyZWFkeSB1dGMgYSB1dGMgaW4gZGJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNpID0gJHNjb3BlLmRhdGFmaWxlLmdvb2Rfc3RhcnQudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArIDM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlaSA9ICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZC50b1N0cmluZygpLmluZGV4T2YoJ0dNVCcpICsgMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmdvb2Rfc3RhcnQgPSAkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydC50b1N0cmluZygpLnN1YnN0cmluZygwLCBzaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCA9ICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZC50b1N0cmluZygpLnN1YnN0cmluZygwLCBlaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5pbnN0cnVtZW50X2lkID0gdGhpc1NlbnNvci5pbnN0cnVtZW50X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5wcm9jZXNzb3JfaWQgPSAkY29va2llcy5nZXQoJ21JRCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIERBVEFfRklMRS5zYXZlKCRzY29wZS5kYXRhZmlsZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoZGZSZXNvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhlbiBQT1NUIGZpbGVQYXJ0cyAoU2VydmljZXMgcG9wdWxhdGUgUEFUSClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVQYXJ0cyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGVFbnRpdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxldHlwZV9pZDogJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICRzY29wZS5hRmlsZS5GaWxlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9kYXRlOiAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAkc2NvcGUuYUZpbGUuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogJHNjb3BlLnRoaXNTZW5zb3JTaXRlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YV9maWxlX2lkOiBkZlJlc29uc2UuZGF0YV9maWxlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RpcmVjdGlvbjogJHNjb3BlLmFGaWxlLnBob3RvX2RpcmVjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZV9kZDogJHNjb3BlLmFGaWxlLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZV9kZDogJHNjb3BlLmFGaWxlLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVtZW50X2lkOiB0aGlzU2Vuc29yLmluc3RydW1lbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlOiAkc2NvcGUuYUZpbGUuRmlsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAvL25lZWQgdG8gcHV0IHRoZSBmaWxlUGFydHMgaW50byBjb3JyZWN0IGZvcm1hdCBmb3IgcG9zdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZUVudGl0eVwiLCBKU09OLnN0cmluZ2lmeShmaWxlUGFydHMuRmlsZUVudGl0eSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBmZC5hcHBlbmQoXCJGaWxlXCIsIGZpbGVQYXJ0cy5GaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3cgUE9TVCBpdCAoZmlsZXBhcnRzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBGSUxFLnVwbG9hZEZpbGUoZmQpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIFVwbG9hZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJlc3BvbnNlLmZpbGVCZWxvbmdzVG8gPSBcIkRhdGFGaWxlIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5EZXBTZW5zb3JGaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZyZXNwb25zZS5maWxldHlwZV9pZCA9PT0gMSkgJHNjb3BlLmRlcFNlbnNJbWFnZUZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgJHNjb3BlLmRlcFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGZpbGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgU291cmNlIGluZm86IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBkYXRhZmlsZS5zYXZlKClcclxuICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgLy9pdCdzIG5vdCBhIGRhdGEgZmlsZSwgc28gZG8gdGhlIHNvdXJjZVxyXG4gICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGVTb3VyY2UgPSB7IHNvdXJjZV9uYW1lOiAkc2NvcGUuYVNvdXJjZS5GVUxMbmFtZSwgYWdlbmN5X2lkOiAkc2NvcGUuYVNvdXJjZS5hZ2VuY3lfaWR9Oy8vLCBTT1VSQ0VfREFURTogJHNjb3BlLmFTb3VyY2UuU09VUkNFX0RBVEUgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICBTT1VSQ0Uuc2F2ZSh0aGVTb3VyY2UpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQgIT09IDgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhlbiBQT1NUIGZpbGVQYXJ0cyAoU2VydmljZXMgcG9wdWxhdGUgUEFUSClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlUGFydHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZUVudGl0eToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxldHlwZV9pZDogJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAkc2NvcGUuYUZpbGUuRmlsZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2RhdGU6ICRzY29wZS5hRmlsZS5maWxlX2RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RhdGU6ICRzY29wZS5hRmlsZS5waG90b19kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJHNjb3BlLmFGaWxlLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXRlX2lkOiAkc2NvcGUudGhpc1NlbnNvclNpdGUuc2l0ZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlX2lkOiByZXNwb25zZS5zb3VyY2VfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RpcmVjdGlvbjogJHNjb3BlLmFGaWxlLnBob3RvX2RpcmVjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGVfZGQ6ICRzY29wZS5hRmlsZS5sYXRpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlX2RkOiAkc2NvcGUuYUZpbGUubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVtZW50X2lkOiB0aGlzU2Vuc29yLmluc3RydW1lbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGU6ICRzY29wZS5hRmlsZS5GaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9uZWVkIHRvIHB1dCB0aGUgZmlsZVBhcnRzIGludG8gY29ycmVjdCBmb3JtYXQgZm9yIHBvc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZUVudGl0eVwiLCBKU09OLnN0cmluZ2lmeShmaWxlUGFydHMuRmlsZUVudGl0eSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZVwiLCBmaWxlUGFydHMuRmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBQT1NUIGl0IChmaWxlcGFydHMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGSUxFLnVwbG9hZEZpbGUoZmQpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGxvYWRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiU2Vuc29yIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRGVwU2Vuc29yRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmcmVzcG9uc2UuZmlsZXR5cGVfaWQgPT09IDEpICRzY29wZS5kZXBTZW5zSW1hZ2VGaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IGZhbHNlOyAkc2NvcGUuZGVwU2VuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBTZW5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RoaXMgaXMgYSBsaW5rIGZpbGUsIG5vIGZpbGVJdGVtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuc291cmNlX2lkID0gcmVzcG9uc2Uuc291cmNlX2lkOyAkc2NvcGUuYUZpbGUuc2l0ZV9pZCA9ICRzY29wZS50aGlzU2Vuc29yU2l0ZS5zaXRlX2lkOyAkc2NvcGUuYUZpbGUuaW5zdHJ1bWVudF9pZCA9IHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZJTEUuc2F2ZSgkc2NvcGUuYUZpbGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGxvYWRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiU2Vuc29yIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRGVwU2Vuc29yRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgJHNjb3BlLmRlcFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU2VuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGZpbGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9IC8vZW5kIGVsc2UgKGl0J3MgYSBMaW5rIGZpbGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgU291cmNlIGluZm86IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBzb3VyY2Uuc2F2ZSgpXHJcbiAgICAgICAgICAgICAgICAgICB9Ly9lbmQgaWYgc291cmNlXHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgdmFsaWQgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgfTsvL2VuZCBjcmVhdGUoKVxyXG5cclxuICAgICAgICAgICAkc2NvcGUuc2F2ZUZpbGUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5maWxldHlwZV9pZCA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSBlbmQgZGF0ZSBpcyBhZnRlciBzdGFydCBkYXRlXHJcbiAgICAgICAgICAgICAgICAgICB2YXIgcyA9ICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0Oy8vbmVlZCB0byBnZXQgZGVwIHN0YXR1cyBkYXRlIGluIHNhbWUgZm9ybWF0IGFzIHJldHJpZXZlZCB0byBjb21wYXJlXHJcbiAgICAgICAgICAgICAgICAgICB2YXIgZSA9ICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZDsgLy9zdHVwaWQgY29tbWEgaW4gdGhlcmUgbWFraW5nIGl0IG5vdCB0aGUgc2FtZVxyXG4gICAgICAgICAgICAgICAgICAgaWYgKG5ldyBEYXRlKGUpIDwgbmV3IERhdGUocykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHZhciBmaXhEYXRlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBnb29kIGVuZCBkYXRlIG11c3QgYmUgYWZ0ZXIgdGhlIGdvb2Qgc3RhcnQgZGF0ZS48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICBmaXhEYXRlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBTZW5maWxlSXNVcGxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgLy9wdXQgc291cmNlIG9yIGRhdGFmaWxlLCBwdXQgZmlsZVxyXG4gICAgICAgICAgICAgICAgICAgdmFyIHdoYXRraW5kID0gJHNjb3BlLmFGaWxlLmZpbGVCZWxvbmdzVG87XHJcbiAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmRhdGFmaWxlLmRhdGFfZmlsZV9pZCAhPT0gdW5kZWZpbmVkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAvL2hhcyBEQVRBX0ZJTEVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jaGVjayB0aW1lem9uZSBhbmQgbWFrZSBzdXJlIGRhdGUgc3RheXMgdXRjXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZGF0YWZpbGUudGltZV96b25lICE9IFwiVVRDXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29udmVydCBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHV0Y1N0YXJ0RGF0ZVRpbWUgPSBuZXcgRGF0ZSgkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1dGNFbmREYXRlVGltZSA9IG5ldyBEYXRlKCRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0ID0gdXRjU3RhcnREYXRlVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCA9IHV0Y0VuZERhdGVUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLnRpbWVfem9uZSA9ICdVVEMnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgJ0dNVCcgaXMgdGFja2VkIG9uIHNvIGl0IGRvZXNuJ3QgdHJ5IHRvIGFkZCBocnMgdG8gbWFrZSB0aGUgYWxyZWFkeSB1dGMgYSB1dGMgaW4gZGJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaSA9ICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0LnRvU3RyaW5nKCkuaW5kZXhPZignR01UJykgKyAzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVpID0gJHNjb3BlLmRhdGFmaWxlLmdvb2RfZW5kLnRvU3RyaW5nKCkuaW5kZXhPZignR01UJykgKyAzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmdvb2Rfc3RhcnQgPSAkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydC50b1N0cmluZygpLnN1YnN0cmluZygwLCBzaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUuZ29vZF9lbmQgPSAkc2NvcGUuZGF0YWZpbGUuZ29vZF9lbmQudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgZWkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIERBVEFfRklMRS51cGRhdGUoeyBpZDogJHNjb3BlLmRhdGFmaWxlLmRhdGFfZmlsZV9pZCB9LCAkc2NvcGUuZGF0YWZpbGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRklMRS51cGRhdGUoeyBpZDogJHNjb3BlLmFGaWxlLmZpbGVfaWQgfSwgJHNjb3BlLmFGaWxlKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChmaWxlUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlUmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiRGF0YUZpbGUgRmlsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5EZXBTZW5zb3JGaWxlc1skc2NvcGUuZXhpc3RGaWxlSW5kZXhdID0gZmlsZVJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZXNbJHNjb3BlLmFsbFNGaWxlSW5kZXhdID0gZmlsZVJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgJHNjb3BlLmRlcFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBTZW5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTsgLy9Mb2FkaW5nLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGRhdGEgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIC8vaGFzIFNPVVJDRVxyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlLnNvdXJjZV9uYW1lID0gJHNjb3BlLmFTb3VyY2UuRlVMTG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgU09VUkNFLnVwZGF0ZSh7IGlkOiAkc2NvcGUuYVNvdXJjZS5zb3VyY2VfaWQgfSwgJHNjb3BlLmFTb3VyY2UpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBGSUxFLnVwZGF0ZSh7IGlkOiAkc2NvcGUuYUZpbGUuZmlsZV9pZCB9LCAkc2NvcGUuYUZpbGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZpbGVSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlUmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiU2Vuc29yIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5EZXBTZW5zb3JGaWxlc1skc2NvcGUuZXhpc3RGaWxlSW5kZXhdID0gZmlsZVJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlc1skc2NvcGUuYWxsU0ZpbGVJbmRleF0gPSBmaWxlUmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuYWxsU0ZpbGVzKTsgLy91cGRhdGVzIHRoZSBmaWxlIGxpc3Qgb24gdGhlIHNpdGVkYXNoYm9hcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgJHNjb3BlLmRlcFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU2VuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGZpbGU6IFwiICtlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU2VuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7IC8vTG9hZGluZy4uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIHNvdXJjZTogXCIgK2Vycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICB9Ly9lbmQgdmFsaWRcclxuICAgICAgICAgICB9Oy8vZW5kIHNhdmUoKVxyXG5cclxuICAgICAgICAgICAkc2NvcGUuZGVsZXRlRmlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgdmFyIERlbGV0ZU1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5hRmlsZTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiRmlsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICBEZWxldGVNb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChmaWxlVG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgIEZJTEUuZGVsZXRlKHsgaWQ6IGZpbGVUb1JlbW92ZS5maWxlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBSZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5EZXBTZW5zb3JGaWxlcy5zcGxpY2UoJHNjb3BlLmV4aXN0RmlsZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzLnNwbGljZSgkc2NvcGUuYWxsU0ZpbGVJbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFNlbnNJbWFnZUZpbGVzLnNwbGljZSgkc2NvcGUuZXhpc3RJTUdGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgIH0pOy8vZW5kIERlbGV0ZU1vZGFsLnJlc3VsdC50aGVuXHJcbiAgICAgICAgICAgfTsvL2VuZCBkZWxldGUoKVxyXG5cclxuICAgICAgICAgICAkc2NvcGUuY2FuY2VsRmlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlID0ge307XHJcbiAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlID0ge307XHJcbiAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVGb3JtID0gZmFsc2U7XHJcbiAgICAgICAgICAgfTsgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyNlbmRyZWdpb24gZmlsZSBVcGxvYWRcclxuXHJcbiAgICAgICAgICAgIC8vI3JlZ2lvbiBOV0lTIENvbm5lY3Rpb25cclxuICAgICAgICAgICAgJHNjb3BlLnNob3dOV0lTRmlsZSA9IGZ1bmN0aW9uIChmKSB7XHJcbiAgICAgICAgICAgICAgICAvL3dhbnQgdG8gYWRkIG9yIGVkaXQgZmlsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmV4aXN0RmlsZUluZGV4ID0gLTE7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVJbmRleCA9IC0xOyAvL2luZGV4ZXMgZm9yIHNwbGljZS9jaGFuZ2VcclxuICAgICAgICAgICAgICAgIGlmIChmICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9lZGl0IE5XSVMgZmlsZVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5leGlzdEZpbGVJbmRleCA9ICRzY29wZS5zZW5zb3JOV0lTRmlsZXMuaW5kZXhPZihmKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVJbmRleCA9ICRzY29wZS5hbGxTRmlsZXMuaW5kZXhPZihmKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0ZpbGUgPSBhbmd1bGFyLmNvcHkoZik7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNGaWxlLmZpbGVfZGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5OV0lTRmlsZS5maWxlX2RhdGUpOyAvL2RhdGUgZm9yIHZhbGlkaXR5IG9mIGZvcm0gb24gUFVUXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNGaWxlLkZpbGVUeXBlID0gXCJEYXRhXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgREFUQV9GSUxFLnF1ZXJ5KHsgaWQ6IGYuZGF0YV9maWxlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYgPSBkZjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm53aXNQcm9jZXNzb3IgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT0gJHNjb3BlLk5XSVNERi5wcm9jZXNzb3JfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0RGLmNvbGxlY3RfZGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5OV0lTREYuY29sbGVjdF9kYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERi5nb29kX3N0YXJ0ID0gZ2V0RGF0ZVRpbWVQYXJ0cygkc2NvcGUuTldJU0RGLmdvb2Rfc3RhcnQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0RGLmdvb2RfZW5kID0gZ2V0RGF0ZVRpbWVQYXJ0cygkc2NvcGUuTldJU0RGLmdvb2RfZW5kKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAvL2VuZCBleGlzdGluZyBmaWxlXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY3JlYXRpbmcgYSBud2lzIGZpbGVcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0ZpbGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICdodHRwOi8vd2F0ZXJkYXRhLnVzZ3MuZ292L253aXMvdXY/c2l0ZV9ubz0nICsgJHNjb3BlLnRoaXNTZW5zb3JTaXRlLnVzZ3Nfc2lkLCAgLy8gaWYgW2ZpbGwgaW4gaWYgbm90IGhlcmUuLiBUT0RPLi4uJmJlZ2luX2RhdGU9MjAxNjA0MTMmZW5kX2RhdGU9MjAxNjA0MTkgKGV2ZW50IHN0YXJ0L2VuZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogJzxsaW5rPicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVfZGF0ZTogbmV3IERhdGUoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXR5cGVfaWQ6IDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEZpbGVUeXBlOiAnRGF0YScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6ICRzY29wZS5hU2Vuc29yLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFfZmlsZV9pZDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1bWVudF9pZDogJHNjb3BlLmFTZW5zb3IuaW5zdHJ1bWVudF9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNfbndpczogMVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc29yX2lkOiAkY29va2llcy5nZXQoXCJtSURcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnRfaWQ6ICRzY29wZS5hU2Vuc29yLmluc3RydW1lbnRfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbGxlY3RfZGF0ZTogZHRbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVfem9uZTogZHRbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdvb2Rfc3RhcnQ6IG5ldyBEYXRlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGdvb2RfZW5kOiBuZXcgRGF0ZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubndpc1Byb2Nlc3NvciA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1lbWJlcl9pZCA9PSAkY29va2llcy5nZXQoJ21JRCcpOyB9KVswXTtcclxuICAgICAgICAgICAgICAgIH0gLy9lbmQgbmV3IGZpbGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93TldJU0ZpbGVGb3JtID0gdHJ1ZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgdmFyIHBvc3RBcHByb3ZhbEZvck5XSVNmaWxlID0gZnVuY3Rpb24gKERGaWQpIHtcclxuICAgICAgICAgICAgICAgIERBVEFfRklMRS5hcHByb3ZlTldJU0RGKHsgaWQ6IERGaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoYXBwcm92YWxSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuYXBwcm92YWxfaWQgPSBhcHByb3ZhbFJlc3BvbnNlLmFwcHJvdmFsX2lkO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRzY29wZS5jcmVhdGVOV0lTRmlsZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgZW5kIGRhdGUgaXMgYWZ0ZXIgc3RhcnQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgdmFyIHMgPSAkc2NvcGUuTldJU0RGLmdvb2Rfc3RhcnQ7Ly9uZWVkIHRvIGdldCBkZXAgc3RhdHVzIGRhdGUgaW4gc2FtZSBmb3JtYXQgYXMgcmV0cmlldmVkIHRvIGNvbXBhcmVcclxuICAgICAgICAgICAgICAgIHZhciBlID0gJHNjb3BlLk5XSVNERi5nb29kX2VuZDsgLy9zdHVwaWQgY29tbWEgaW4gdGhlcmUgbWFraW5nIGl0IG5vdCB0aGUgc2FtZVxyXG4gICAgICAgICAgICAgICAgaWYgKG5ldyBEYXRlKGUpIDwgbmV3IERhdGUocykpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaXhEYXRlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBnb29kIGVuZCBkYXRlIG11c3QgYmUgYWZ0ZXIgdGhlIGdvb2Qgc3RhcnQgZGF0ZS48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBmaXhEYXRlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBOV0lTU2VuZmlsZUlzVXBsb2FkaW5nID0gdHJ1ZTsgLy9Mb2FkaW5nLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICskY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcG9zdCBkYXRhZmlsZSBmaXJzdCB0byBnZXQgb3IgZGF0YV9maWxlX2lkXHJcbiAgICAgICAgICAgICAgICAgICAgLy9kZXRlcm1pbmUgdGltZXpvbmVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLk5XSVNERi50aW1lX3pvbmUgIT0gXCJVVENcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnZlcnQgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHV0Y1N0YXJ0RGF0ZVRpbWUgPSBuZXcgRGF0ZSgkc2NvcGUuTldJU0RGLmdvb2Rfc3RhcnQpLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1dGNFbmREYXRlVGltZSA9IG5ldyBEYXRlKCRzY29wZS5OV0lTREYuZ29vZF9lbmQpLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuZ29vZF9zdGFydCA9IHV0Y1N0YXJ0RGF0ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuZ29vZF9lbmQgPSB1dGNFbmREYXRlVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERi50aW1lX3pvbmUgPSAnVVRDJztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSAnR01UJyBpcyB0YWNrZWQgb24gc28gaXQgZG9lc24ndCB0cnkgdG8gYWRkIGhycyB0byBtYWtlIHRoZSBhbHJlYWR5IHV0YyBhIHV0YyBpbiBkYlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2kgPSAkc2NvcGUuTldJU0RGLmdvb2Rfc3RhcnQudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArIDM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlaSA9ICRzY29wZS5OV0lTREYuZ29vZF9lbmQudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArIDM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuZ29vZF9zdGFydCA9ICRzY29wZS5OV0lTREYuZ29vZF9zdGFydC50b1N0cmluZygpLnN1YnN0cmluZygwLCBzaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuZ29vZF9lbmQgPSAkc2NvcGUuTldJU0RGLmdvb2RfZW5kLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIGVpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUuc2F2ZSgkc2NvcGUuTldJU0RGKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChOZGZSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBjcmVhdGUgYW4gYXBwcm92YWwgd2l0aCB0aGUgZXZlbnQncyBjb29yZGluYXRvciBhbmQgYWRkIHRoZSBhcHByb3ZhbF9pZCwgcHV0IGl0LCB0aGVuIHBvc3QgdGhlIGZpbGUgVE9ETyA6OjogTkVXIEVORFBPSU5UIEZPUiBUSElTXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhlbiBQT1NUIGZpbGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERi5kYXRhX2ZpbGVfaWQgPSBOZGZSZXNwb25zZS5kYXRhX2ZpbGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RBcHByb3ZhbEZvck5XSVNmaWxlKE5kZlJlc3BvbnNlLmRhdGFfZmlsZV9pZCk7IC8vcHJvY2VzcyBhcHByb3ZhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBQT1NUIEZpbGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNGaWxlLmRhdGFfZmlsZV9pZCA9IE5kZlJlc3BvbnNlLmRhdGFfZmlsZV9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNGaWxlLnBhdGggPSAnPGxpbms+JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlICRzY29wZS5OV0lTRmlsZS5GaWxlVHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRklMRS5zYXZlKCRzY29wZS5OV0lTRmlsZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoRnJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgRGF0YSBzYXZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZyZXNwb25zZS5maWxlQmVsb25nc1RvID0gXCJEYXRhRmlsZSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yTldJU0ZpbGVzLnB1c2goRnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZXMucHVzaChGcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU2l0ZV9GaWxlcy5zZXRBbGxTaXRlRmlsZXMoJHNjb3BlLmFsbFNGaWxlcyk7IC8vdXBkYXRlcyB0aGUgZmlsZSBsaXN0IG9uIHRoZSBzaXRlZGFzaGJvYXJkICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93TldJU0ZpbGVGb3JtID0gZmFsc2U7ICRzY29wZS5kZXBOV0lTU2VuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7IC8vTG9hZGluZy4uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcE5XSVNTZW5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTsgLy9Mb2FkaW5nLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwTldJU1NlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlOyAvL0xvYWRpbmcuLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGRhdGEgZmlsZSBpbmZvOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgc291cmNlLnNhdmUoKVxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIHZhbGlkXHJcbiAgICAgICAgICAgIH07Ly8gZW5kIGNyZWF0ZSBOV0lTIGZpbGVcclxuICAgICAgICAgICAgLy91cGRhdGUgdGhpcyBOV0lTIGZpbGVcclxuICAgICAgICAgICAgJHNjb3BlLnNhdmVOV0lTRmlsZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgZW5kIGRhdGUgaXMgYWZ0ZXIgc3RhcnQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgdmFyIHMgPSAkc2NvcGUuTldJU0RGLmdvb2Rfc3RhcnQ7Ly9uZWVkIHRvIGdldCBkZXAgc3RhdHVzIGRhdGUgaW4gc2FtZSBmb3JtYXQgYXMgcmV0cmlldmVkIHRvIGNvbXBhcmVcclxuICAgICAgICAgICAgICAgIHZhciBlID0gJHNjb3BlLk5XSVNERi5nb29kX2VuZDsgLy9zdHVwaWQgY29tbWEgaW4gdGhlcmUgbWFraW5nIGl0IG5vdCB0aGUgc2FtZVxyXG4gICAgICAgICAgICAgICAgaWYgKG5ldyBEYXRlKGUpIDwgbmV3IERhdGUocykpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaXhEYXRlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBnb29kIGVuZCBkYXRlIG11c3QgYmUgYWZ0ZXIgdGhlIGdvb2Qgc3RhcnQgZGF0ZS48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBmaXhEYXRlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcHV0IHNvdXJjZSBvciBkYXRhZmlsZSwgcHV0IGZpbGVcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgdGltZXpvbmUgYW5kIG1ha2Ugc3VyZSBkYXRlIHN0YXlzIHV0Y1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuTldJU0RGLnRpbWVfem9uZSAhPSBcIlVUQ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29udmVydCBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXRjU3RhcnREYXRlVGltZSA9IG5ldyBEYXRlKCRzY29wZS5OV0lTREYuZ29vZF9zdGFydCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHV0Y0VuZERhdGVUaW1lID0gbmV3IERhdGUoJHNjb3BlLk5XSVNERi5nb29kX2VuZCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERi5nb29kX3N0YXJ0ID0gdXRjU3RhcnREYXRlVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERi5nb29kX2VuZCA9IHV0Y0VuZERhdGVUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0RGLnRpbWVfem9uZSA9ICdVVEMnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlICdHTVQnIGlzIHRhY2tlZCBvbiBzbyBpdCBkb2Vzbid0IHRyeSB0byBhZGQgaHJzIHRvIG1ha2UgdGhlIGFscmVhZHkgdXRjIGEgdXRjIGluIGRiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaSA9ICRzY29wZS5OV0lTREYuZ29vZF9zdGFydC50b1N0cmluZygpLmluZGV4T2YoJ0dNVCcpICsgMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVpID0gJHNjb3BlLk5XSVNERi5nb29kX2VuZC50b1N0cmluZygpLmluZGV4T2YoJ0dNVCcpICsgMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERi5nb29kX3N0YXJ0ID0gJHNjb3BlLk5XSVNERi5nb29kX3N0YXJ0LnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIHNpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERi5nb29kX2VuZCA9ICRzY29wZS5OV0lTREYuZ29vZF9lbmQudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgZWkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUudXBkYXRlKHsgaWQ6ICRzY29wZS5OV0lTREYuZGF0YV9maWxlX2lkIH0sICRzY29wZS5OV0lTREYpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBGSUxFLnVwZGF0ZSh7IGlkOiAkc2NvcGUuTldJU0ZpbGUuZmlsZV9pZCB9LCAkc2NvcGUuTldJU0ZpbGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZpbGVSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIERhdGEgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVSZXNwb25zZS5maWxlQmVsb25nc1RvID0gXCJEYXRhRmlsZSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yTldJU0ZpbGVzWyRzY29wZS5leGlzdEZpbGVJbmRleF0gPSBmaWxlUmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzWyRzY29wZS5hbGxTRmlsZUluZGV4XSA9IGZpbGVSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dOV0lTRmlsZUZvcm0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBmaWxlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBkYXRhOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgdmFsaWRcclxuICAgICAgICAgICAgfTsvL2VuZCBzYXZlKClcclxuICAgICAgICAgICAgLy9kZWxldGUgdGhpcyBmaWxlXHJcbiAgICAgICAgICAgICRzY29wZS5kZWxldGVOV0lTRmlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBEZWxldGVNb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5OV0lTRmlsZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiRmlsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgRGVsZXRlTW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoZmlsZVRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICskY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgRklMRS5kZWxldGUoeyBpZDogZmlsZVRvUmVtb3ZlLmZpbGVfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBSZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yTldJU0ZpbGVzLnNwbGljZSgkc2NvcGUuZXhpc3RGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzLnNwbGljZSgkc2NvcGUuYWxsU0ZpbGVJbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd05XSVNGaWxlRm9ybSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pOy8vZW5kIERlbGV0ZU1vZGFsLnJlc3VsdC50aGVuXHJcbiAgICAgICAgICAgIH07Ly9lbmQgZGVsZXRlKClcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWxOV0lTRmlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OV0lTRmlsZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dOV0lTRmlsZUZvcm0gPSBmYWxzZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgICAgICAgICAvLyNyZWdpb24gdGFwZSBkb3duIHNlY3Rpb24gICAgICAgICAgIFxyXG4gICAgICAgICAgICAkc2NvcGUuT1BjaG9zZW4gPSBmdW5jdGlvbiAob3BDaG9zZW4pIHtcclxuICAgICAgICAgICAgICAgdmFyIG9wSSA9ICRzY29wZS5PUHNGb3JUYXBlRG93bi5tYXAoZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8ub2JqZWN0aXZlX3BvaW50X2lkOyB9KS5pbmRleE9mKG9wQ2hvc2VuLm9iamVjdGl2ZV9wb2ludF9pZCk7ICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgIGlmIChvcENob3Nlbi5zZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgLy90aGV5IHBpY2tlZCBhbiBPUCB0byB1c2UgZm9yIHRhcGVkb3duXHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BNZWFzdXJlID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BNZWFzdXJlLm9wX25hbWUgPSBvcENob3Nlbi5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QTWVhc3VyZS5lbGV2YXRpb24gPSBvcENob3Nlbi5lbGV2X2Z0O1xyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QTWVhc3VyZS5WZGF0dW0gPSAkc2NvcGUudmVydERhdHVtTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHZkKSB7IHJldHVybiB2ZC5kYXR1bV9pZCA9PSBvcENob3Nlbi52ZGF0dW1faWQ7IH0pWzBdLmRhdHVtX2FiYnJldmlhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5PUE1lYXN1cmUub2JqZWN0aXZlX3BvaW50X2lkID0gb3BDaG9zZW4ub2JqZWN0aXZlX3BvaW50X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgLy9hcmUgd2UgbG9va2luZyBhdCBjcmVhdGUgZGVwbG95bWVudCBvciBlZGl0IGRlcGxveW1lbnQ7XHJcbiAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFTZW5zb3IuaW5zdHJ1bWVudF9pZCAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5hU2Vuc1N0YXR1cy5zdGF0dXNfdHlwZV9pZCAhPT0gNCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBUYXBlQ29weS5wdXNoKCRzY29wZS5PUE1lYXN1cmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBTdHVmZkNvcHlbMV0udmRhdHVtX2lkID0gb3BDaG9zZW4udmRhdHVtX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudGFwZURvd25UYWJsZS5wdXNoKCRzY29wZS5PUE1lYXN1cmUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc1N0YXR1cy52ZGF0dW1faWQgPSBvcENob3Nlbi52ZGF0dW1faWQ7XHJcbiAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgLy90aGV5IHVuY2hlY2tlZCB0aGUgb3AgdG8gcmVtb3ZlXHJcbiAgICAgICAgICAgICAgICAgICAvL2FzayB0aGVtIGFyZSB0aGV5IHN1cmU/XHJcbiAgICAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlT1BNZWFzID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5SZW1vdmUgT1AgTWVhc3VyZTwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byByZW1vdmUgdGhpcyBPUCBNZWFzdXJlbWVudCBmcm9tIHRoaXMgc2Vuc29yPzwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJjYW5jZWwoKVwiPkNhbmNlbDwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgncmVtb3ZlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgnY2FuY2VsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICByZW1vdmVPUE1lYXMucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHllc09yTm8pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICBpZiAoeWVzT3JObyA9PSAncmVtb3ZlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FkZCB0byByZW1vdmUgaXQgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlT3JFZGl0ID0gJHNjb3BlLmFTZW5zb3IuaW5zdHJ1bWVudF9pZCAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5hU2Vuc1N0YXR1cy5zdGF0dXNfdHlwZV9pZCAhPT0gNCA/IFwiZWRpdFwiIDogXCJjcmVhdGVcIjsgLy8gZWRpdCBkZXBsb3ltZW50IG9yIGNyZWF0aW5nIGEgZGVwbG95bWVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGFwZURvd25Ub1JlbW92ZSA9IGNyZWF0ZU9yRWRpdCA9PSAnZWRpdCcgPyAkc2NvcGUuZGVwVGFwZUNvcHkuZmlsdGVyKGZ1bmN0aW9uKGEpIHsgcmV0dXJuIGEub2JqZWN0aXZlX3BvaW50X2lkID09IG9wQ2hvc2VuLm9iamVjdGl2ZV9wb2ludF9pZDsgfSlbMF0gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRhcGVEb3duVGFibGUuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLm9iamVjdGl2ZV9wb2ludF9pZCA9PSBvcENob3Nlbi5vYmplY3RpdmVfcG9pbnRfaWQ7IH0pWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRJbmQgPSBjcmVhdGVPckVkaXQgPT0gJ2VkaXQnID8gJHNjb3BlLmRlcFRhcGVDb3B5Lm1hcChmdW5jdGlvbihvKSB7IHJldHVybiBvLm9iamVjdGl2ZV9wb2ludF9pZDsgfSkuaW5kZXhPZih0YXBlRG93blRvUmVtb3ZlLm9iamVjdGl2ZV9wb2ludF9pZCkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50YXBlRG93blRhYmxlLm1hcChmdW5jdGlvbiAobykgeyByZXR1cm4gby5vYmplY3RpdmVfcG9pbnRfaWQ7IH0pLmluZGV4T2YodGFwZURvd25Ub1JlbW92ZS5vYmplY3RpdmVfcG9pbnRfaWQpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRhcGVEb3duVG9SZW1vdmUub3BfbWVhc3VyZW1lbnRzX2lkICE9PSB1bmRlZmluZWQpICRzY29wZS5yZW1vdmVPUExpc3QucHVzaCh0YXBlRG93blRvUmVtb3ZlLm9wX21lYXN1cmVtZW50c19pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZU9yRWRpdCA9PSAnZWRpdCcgPyAkc2NvcGUuZGVwVGFwZUNvcHkuc3BsaWNlKHRJbmQsIDEpIDogJHNjb3BlLnRhcGVEb3duVGFibGUuc3BsaWNlKHRJbmQsIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9pZiB0aGlzIGVtcHRpZXMgdGhlIHRhYmxlLCBjbGVhciB0aGUgc2Vuc1N0YXR1cyBmaWVsZHMgcmVsYXRlZCB0byB0YXBlZG93bnNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZU9yRWRpdCA9PSAnZWRpdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZGVwVGFwZUNvcHkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFN0dWZmQ29weVsxXS52ZGF0dW1faWQgPSAwOyAkc2NvcGUuZGVwU3R1ZmZDb3B5WzFdLmdzX2VsZXZhdGlvbiA9ICcnOyAkc2NvcGUuZGVwU3R1ZmZDb3B5WzFdLndzX2VsZXZhdGlvbiA9ICcnOyAkc2NvcGUuZGVwU3R1ZmZDb3B5WzFdLnNlbnNvcl9lbGV2YXRpb24gPSAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUudGFwZURvd25UYWJsZS5sZW5ndGggPT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMudmRhdHVtX2lkID0gMDsgJHNjb3BlLmFTZW5zU3RhdHVzLmdzX2VsZXZhdGlvbiA9ICcnOyAkc2NvcGUuYVNlbnNTdGF0dXMud3NfZWxldmF0aW9uID0gJyc7ICRzY29wZS5hU2Vuc1N0YXR1cy5zZW5zb3JfZWxldmF0aW9uID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAvL25ldmVyIG1pbmQsIG1ha2UgaXQgc2VsZWN0ZWQgYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9Qc0ZvclRhcGVEb3duW29wSV0uc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH0gICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyNlbmRyZWdpb24gdGFwZSBkb3duIHNlY3Rpb24gXHJcblxyXG4gICAgICAgICAgIC8vZ2V0IHRpbWV6b25lIGFuZCB0aW1lc3RhbXAgZm9yIHRoZWlyIHRpbWV6b25lIGZvciBzaG93aW5nLi4gcG9zdC9wdXQgd2lsbCBjb252ZXJ0IGl0IHRvIHV0Y1xyXG4gICAgICAgICAgIHZhciBnZXRUaW1lWm9uZVN0YW1wID0gZnVuY3Rpb24gKGRzZW50KSB7XHJcbiAgICAgICAgICAgICAgIHZhciBzZW5kVGhpcyA9IFtdO1xyXG4gICAgICAgICAgICAgICB2YXIgZDtcclxuXHJcbiAgICAgICAgICAgICAgIGlmIChkc2VudCAhPT0gdW5kZWZpbmVkKSBkID0gbmV3IERhdGUoZHNlbnQpO1xyXG4gICAgICAgICAgICAgICBlbHNlIGQgPSBuZXcgRGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IChkLnRvU3RyaW5nKCkpLnN1YnN0cmluZygzNSk7XHJcbiAgICAgICAgICAgICAgIHZhciB6b25lID0gXCJcIjtcclxuICAgICAgICAgICAgICAgc3dpdGNoIChvZmZzZXQuc3Vic3RyKDAsIDMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICBjYXNlIFwiQ2VuXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgem9uZSA9ICdDU1QnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgY2FzZSBcIkVhc1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgIHpvbmUgPSAnRVNUJztcclxuICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgIGNhc2UgXCJNb3VcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICB6b25lID0gJ01TVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICBjYXNlIFwiUGFjXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgem9uZSA9ICdQU1QnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIHNlbmRUaGlzID0gW2QsIHpvbmVdO1xyXG4gICAgICAgICAgICAgICByZXR1cm4gc2VuZFRoaXM7XHJcbiAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgLy9idXR0b24gY2xpY2sgdG8gc2hvdyBldmVudCBkcm9wZG93biB0byBjaGFuZ2UgaXQgb24gZXhpc3RpbmcgaHdtIChhZG1pbiBvbmx5KVxyXG4gICAgICAgICAgICRzY29wZS5zaG93Q2hhbmdlRXZlbnRERCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgJHNjb3BlLnNob3dFdmVudEREID0gISRzY29wZS5zaG93RXZlbnRERDtcclxuICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAvL2NoYW5nZSBldmVudCA9IGFwcGx5IGl0IHRvIHRoZSAkc2NvcGUuRXZlbnROYW1lXHJcbiAgICAgICAgICAgJHNjb3BlLkNoYW5nZUV2ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAkc2NvcGUuRXZlbnROYW1lID0gJHNjb3BlLmV2ZW50TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7IHJldHVybiBlbC5ldmVudF9pZCA9PSAkc2NvcGUuYWRtaW5DaGFuZ2VkLmV2ZW50X2lkOyB9KVswXS5ldmVudF9uYW1lO1xyXG4gICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgIC8vZ2V0IGRlcGxveW1lbnQgdHlwZXMgZm9yIHNlbnNvciB0eXBlIGNob3NlblxyXG4gICAgICAgICAgICRzY29wZS5nZXREZXBUeXBlcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgJHNjb3BlLmZpbHRlcmVkRGVwbG95bWVudFR5cGVzID0gW107XHJcbiAgICAgICAgICAgICAgIHZhciBtYXRjaGluZ1NlbnNEZXBsaXN0ID0gJHNjb3BlLnNlbnNvclR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoc2QpIHsgcmV0dXJuIHNkLnNlbnNvcl90eXBlX2lkID09ICRzY29wZS5hU2Vuc29yLnNlbnNvcl90eXBlX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgLy90aGlzIGlzIDEgc2Vuc29yVHlwZSB3aXRoIGlubmVyIGxpc3Qgb2YgIC5kZXBsb3ltZW50dHlwZXNcclxuICAgICAgICAgICAgICAgJHNjb3BlLmZpbHRlcmVkRGVwbG95bWVudFR5cGVzID0gbWF0Y2hpbmdTZW5zRGVwbGlzdC5kZXBsb3ltZW50dHlwZXM7XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICBpZiAoJHNjb3BlLmZpbHRlcmVkRGVwbG95bWVudFR5cGVzLmxlbmd0aCA9PSAxKSBcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc29yLmRlcGxveW1lbnRfdHlwZV9pZCA9ICRzY29wZS5maWx0ZXJlZERlcGxveW1lbnRUeXBlc1swXS5kZXBsb3ltZW50X3R5cGVfaWQ7XHJcbiAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgIC8vICRzY29wZS5zZXNzaW9uRXZlbnQgPSAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudE5hbWUnKTtcclxuICAgICAgICAgICAkc2NvcGUuTG9nZ2VkSW5NZW1iZXIgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT0gJGNvb2tpZXMuZ2V0KCdtSUQnKTsgfSlbMF07XHJcblxyXG4gICAgICAgICAgICRzY29wZS5hU2Vuc29yID0ge307XHJcbiAgICAgICAgICAgJHNjb3BlLmFTZW5zU3RhdHVzID0ge307XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgJHNjb3BlLnRoaXNTZW5zb3JTaXRlID0gU2Vuc29yU2l0ZTtcclxuXHJcbiAgICAgICAgICAgLy9jYW5jZWxcclxuICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLiBcclxuICAgICAgICAgICAgICAgdmFyIHNlbnNvck9iamVjdFRvU2VuZEJhY2sgPSB0aGlzU2Vuc29yO1xyXG4gICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAvLyBhbnl0aGluZyB5b3Ugd2FudCBjYW4gZ28gaGVyZSBhbmQgd2lsbCBzYWZlbHkgYmUgcnVuIG9uIHRoZSBuZXh0IGRpZ2VzdC4gICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICB2YXIgc2VuZEJhY2sgPSBbc2Vuc29yT2JqZWN0VG9TZW5kQmFja107XHJcbiAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZW5kQmFjayk7XHJcbiAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgIC8vIGlzIGludGVydmFsIGlzIG51bWJlclxyXG4gICAgICAgICAgICRzY29wZS5pc051bSA9IGZ1bmN0aW9uIChldnQpIHtcclxuICAgICAgICAgICAgICAgdmFyIHRoZUV2ZW50ID0gZXZ0IHx8IHdpbmRvdy5ldmVudDtcclxuICAgICAgICAgICAgICAgdmFyIGtleSA9IHRoZUV2ZW50LmtleUNvZGUgfHwgdGhlRXZlbnQud2hpY2g7XHJcbiAgICAgICAgICAgICAgIGlmIChrZXkgIT0gNDYgJiYga2V5ICE9IDQ1ICYmIGtleSA+IDMxICYmIChrZXkgPCA0OCB8fCBrZXkgPiA1NykpIHtcclxuICAgICAgICAgICAgICAgICAgIHRoZUV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICBpZiAodGhlRXZlbnQucHJldmVudERlZmF1bHQpIHRoZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAvL2lzIGl0IFVUQyBvciBsb2NhbCB0aW1lLi5tYWtlIHN1cmUgaXQgc3RheXMgVVRDXHJcbiAgICAgICAgICAgdmFyIGRlYWxXaXRoVGltZVN0YW1wYjRTZW5kID0gZnVuY3Rpb24gKHcpIHtcclxuICAgICAgICAgICAgICAgLy9jaGVjayBhbmQgc2VlIGlmIHRoZXkgYXJlIG5vdCB1c2luZyBVVENcclxuICAgICAgICAgICAgICAgaWYgKHcgPT0gJ3NhdmluZycpe1xyXG4gICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5kZXBTdHVmZkNvcHlbMV0udGltZV96b25lICE9IFwiVVRDXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnZlcnQgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXRjRGF0ZVRpbWVTID0gbmV3IERhdGUoJHNjb3BlLmRlcFN0dWZmQ29weVsxXS50aW1lX3N0YW1wKS50b1VUQ1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBTdHVmZkNvcHlbMV0udGltZV9zdGFtcCA9IHV0Y0RhdGVUaW1lUztcclxuICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU3R1ZmZDb3B5WzFdLnRpbWVfem9uZSA9ICdVVEMnO1xyXG4gICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSAnR01UJyBpcyB0YWNrZWQgb24gc28gaXQgZG9lc24ndCB0cnkgdG8gYWRkIGhycyB0byBtYWtlIHRoZSBhbHJlYWR5IHV0YyBhIHV0YyBpbiBkYlxyXG4gICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gJHNjb3BlLmRlcFN0dWZmQ29weVsxXS50aW1lX3N0YW1wLnRvU3RyaW5nKCkuaW5kZXhPZignR01UJykgKzM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFN0dWZmQ29weVsxXS50aW1lX3N0YW1wID0gJHNjb3BlLmRlcFN0dWZmQ29weVsxXS50aW1lX3N0YW1wLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU2Vuc1N0YXR1cy50aW1lX3pvbmUgIT0gXCJVVENcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIC8vY29udmVydCBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgIHZhciB1dGNEYXRlVGltZUQgPSBuZXcgRGF0ZSgkc2NvcGUuYVNlbnNTdGF0dXMudGltZV9zdGFtcCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMudGltZV9zdGFtcCA9IHV0Y0RhdGVUaW1lRDtcclxuICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMudGltZV96b25lID0gJ1VUQyc7XHJcbiAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlICdHTVQnIGlzIHRhY2tlZCBvbiBzbyBpdCBkb2Vzbid0IHRyeSB0byBhZGQgaHJzIHRvIG1ha2UgdGhlIGFscmVhZHkgdXRjIGEgdXRjIGluIGRiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgdmFyIERpID0gJHNjb3BlLmFTZW5zU3RhdHVzLnRpbWVfc3RhbXAudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArIDM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zU3RhdHVzLnRpbWVfc3RhbXAgPSAkc2NvcGUuYVNlbnNTdGF0dXMudGltZV9zdGFtcC50b1N0cmluZygpLnN1YnN0cmluZygwLCBEaSk7XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9zYXZlIGFTZW5zb3JcclxuICAgICAgICAgICAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZWRTZW5zb3IgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZFNlblN0YXQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAvL2FkbWluIGNoYW5nZWQgdGhlIGV2ZW50IGZvciB0aGlzIHNlbnNvci4uXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hZG1pbkNoYW5nZWQuZXZlbnRfaWQgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFN0dWZmQ29weVswXS5ldmVudF9pZCA9ICRzY29wZS5hZG1pbkNoYW5nZWQuZXZlbnRfaWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vc2VlIGlmIHRoZXkgdXNlZCBNaW51dGVzIG9yIHNlY29uZHMgZm9yIGludGVydmFsLiBuZWVkIHRvIHN0b3JlIGluIHNlY29uZHNcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkludGVydmFsVHlwZS50eXBlID09IFwiTWludXRlc1wiKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU3R1ZmZDb3B5WzBdLmludGVydmFsID0gJHNjb3BlLmRlcFN0dWZmQ29weVswXS5pbnRlcnZhbCAqIDYwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBkZWFsV2l0aFRpbWVTdGFtcGI0U2VuZCgnc2F2aW5nJyk7IC8vVVRDIG9yIGxvY2FsP1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgSU5TVFJVTUVOVC51cGRhdGUoeyBpZDogJHNjb3BlLmRlcFN0dWZmQ29weVswXS5pbnN0cnVtZW50X2lkIH0sICRzY29wZS5kZXBTdHVmZkNvcHlbMF0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRTZW5zb3IgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFNlbnNvci5kZXBsb3ltZW50VHlwZSA9ICRzY29wZS5kZXBTdHVmZkNvcHlbMF0uZGVwbG95bWVudF90eXBlX2lkID4gMCA/ICRzY29wZS5kZXBUeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuZGVwbG95bWVudF90eXBlX2lkID09ICRzY29wZS5kZXBTdHVmZkNvcHlbMF0uZGVwbG95bWVudF90eXBlX2lkOyB9KVswXS5tZXRob2QgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFNlbnNvci5ob3VzaW5nVHlwZSA9ICRzY29wZS5kZXBTdHVmZkNvcHlbMF0uaG91c2luZ190eXBlX2lkID4gMCA/ICRzY29wZS5ob3VzZVR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoaCkgeyByZXR1cm4gaC5ob3VzaW5nX3R5cGVfaWQgPT0gJHNjb3BlLmRlcFN0dWZmQ29weVswXS5ob3VzaW5nX3R5cGVfaWQ7IH0pWzBdLnR5cGVfbmFtZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkU2Vuc29yLnNlbnNvckJyYW5kID0gJHNjb3BlLnNlbnNvckJyYW5kTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc2Vuc29yX2JyYW5kX2lkID09ICRzY29wZS5kZXBTdHVmZkNvcHlbMF0uc2Vuc29yX2JyYW5kX2lkOyB9KVswXS5icmFuZF9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkU2Vuc29yLnNlbnNvclR5cGUgPSAkc2NvcGUuc2Vuc29yVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uICh0KSB7IHJldHVybiB0LnNlbnNvcl90eXBlX2lkID09ICRzY29wZS5kZXBTdHVmZkNvcHlbMF0uc2Vuc29yX3R5cGVfaWQ7IH0pWzBdLnNlbnNvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgSU5TVFJVTUVOVF9TVEFUVVMudXBkYXRlKHsgaWQ6ICRzY29wZS5kZXBTdHVmZkNvcHlbMV0uaW5zdHJ1bWVudF9zdGF0dXNfaWQgfSwgJHNjb3BlLmRlcFN0dWZmQ29weVsxXSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoc3RhdFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZGVhbCB3aXRoIHRhcGVkb3ducy4gcmVtb3ZlL2FkZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcnQgPSAwOyBydCA8ICRzY29wZS5yZW1vdmVPUExpc3QubGVuZ3RoOyBydCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlkVG9SZW1vdmUgPSAkc2NvcGUucmVtb3ZlT1BMaXN0W3J0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUF9NRUFTVVJFLmRlbGV0ZSh7IGlkOiBpZFRvUmVtb3ZlIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRhcGVEb3duVGFibGUgPSAkc2NvcGUuZGVwVGFwZUNvcHkubGVuZ3RoID4gMCA/IFtdIDogJHNjb3BlLnRhcGVEb3duVGFibGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhdCA9IDA7IGF0IDwgJHNjb3BlLmRlcFRhcGVDb3B5Lmxlbmd0aDsgYXQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBERVB0aGlzVGFwZSA9ICRzY29wZS5kZXBUYXBlQ29weVthdF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKERFUHRoaXNUYXBlLm9wX21lYXN1cmVtZW50c19pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZXhpc3RpbmcsIHB1dCBpbiBjYXNlIHRoZXkgY2hhbmdlZCBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUF9NRUFTVVJFLnVwZGF0ZSh7IGlkOiBERVB0aGlzVGFwZS5vcF9tZWFzdXJlbWVudHNfaWQgfSwgREVQdGhpc1RhcGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHRhcGVSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFwZVJlc3BvbnNlLm9wX25hbWUgPSBERVB0aGlzVGFwZS5vcF9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFwZVJlc3BvbnNlLlZkYXR1bSA9IERFUHRoaXNUYXBlLlZkYXR1bTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50YXBlRG93blRhYmxlLnB1c2godGFwZVJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9uZXcgb25lIGFkZGVkLCBwb3N0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERFUHRoaXNUYXBlLmluc3RydW1lbnRfc3RhdHVzX2lkID0gc3RhdFJlc3BvbnNlLmluc3RydW1lbnRfc3RhdHVzX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUF9NRUFTVVJFLnNhdmUoREVQdGhpc1RhcGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHRhcGVSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFwZVJlc3BvbnNlLm9wX25hbWUgPSBERVB0aGlzVGFwZS5vcF9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFwZVJlc3BvbnNlLlZkYXR1bSA9IERFUHRoaXNUYXBlLlZkYXR1bTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50YXBlRG93blRhYmxlLnB1c2godGFwZVJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3cgYWRkIGluc3RydW1lbnQgYW5kIGluc3RydW1lbnQgc3RhdHVzIHRvIHNlbmQgYmFja1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFNlblN0YXQgPSBzdGF0UmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkU2VuU3RhdC5zdGF0dXMgPSAnRGVwbG95ZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluc3RydW1lbnRfc3RhdHVzZXNIb2xkZXIgPSAkc2NvcGUuYVNlbnNvci5pbnN0cnVtZW50X3N0YXR1czsgLy9wdXQgdGhlbSBoZXJlIHNvIHRoZXkgY2FuIGJlIHVwZGF0ZWQgYW5kIHJlYWRkZWQgKGFsbCB2ZXJzaW9ucylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc29yID0gdXBkYXRlZFNlbnNvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNTZW5zb3IgPSB1cGRhdGVkU2Vuc29yOyB0aGlzU2Vuc29yLmluc3RydW1lbnRfc3RhdHVzID0gaW5zdHJ1bWVudF9zdGF0dXNlc0hvbGRlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc1N0YXR1cyA9IHVwZGF0ZWRTZW5TdGF0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zU3RhdHVzLnRpbWVfc3RhbXAgPSBnZXREYXRlVGltZVBhcnRzKCRzY29wZS5hU2Vuc1N0YXR1cy50aW1lX3N0YW1wKTsvL3RoaXMga2VlcHMgaXQgYXMgdXRjIGluIGRpc3BsYXlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmQgPSB0aGlzU2Vuc29yLmluc3RydW1lbnRfc3RhdHVzLm1hcChmdW5jdGlvbiAoaSkgeyByZXR1cm4gaS5zdGF0dXNfdHlwZV9pZDsgfSkuaW5kZXhPZigxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9zdGF0dXNbaW5kXSA9ICRzY29wZS5hU2Vuc1N0YXR1cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBTdHVmZkNvcHkgPSBbXTsgJHNjb3BlLkludGVydmFsVHlwZSA9IHsgdHlwZTogJ1NlY29uZHMnIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudmlldy5ERVB2YWwgPSAnZGV0YWlsJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiU2Vuc29yIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJlcnJvciBzYXZpbmcgc2Vuc29yIHN0YXR1czogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJlcnJvciBzYXZpbmcgc2Vuc29yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICB9Oy8vZW5kIHNhdmUoKVxyXG5cclxuICAgICAgICAgICAvL2NyZWF0ZSAoUE9TVCkgYSBkZXBsb3llZCBzZW5zb3IgY2xpY2tcclxuICAgICAgICAgICAkc2NvcGUuZGVwbG95ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICBpZiAodGhpcy5TZW5zb3JGb3JtLiR2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgLy9zZWUgaWYgdGhleSB1c2VkIE1pbnV0ZXMgb3Igc2Vjb25kcyBmb3IgaW50ZXJ2YWwuIG5lZWQgdG8gc3RvcmUgaW4gc2Vjb25kc1xyXG4gICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5JbnRlcnZhbFR5cGUudHlwZSA9PSBcIk1pbnV0ZXNcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNvci5pbnRlcnZhbCA9ICRzY29wZS5hU2Vuc29yLmludGVydmFsICogNjA7XHJcbiAgICAgICAgICAgICAgICAgICAvL3NldCBldmVudF9pZFxyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zb3IuZXZlbnRfaWQgPSAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudElEJyk7XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNvci5zaXRlX2lkID0gU2Vuc29yU2l0ZS5zaXRlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgZGVhbFdpdGhUaW1lU3RhbXBiNFNlbmQoJ2RlcGxveScpOyAvL1VUQyBvciBsb2NhbD9cclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc1N0YXR1cy5zdGF0dXNfdHlwZV9pZCA9IDE7IC8vZGVwbG95ZWQgc3RhdHVzXHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMubWVtYmVyX2lkID0gJGNvb2tpZXMuZ2V0KCdtSUQnKTsgLy91c2VyIHRoYXQgbG9nZ2VkIGluIGlzIGRlcGxveWVyXHJcbiAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlZFNlbnNvciA9IHt9OyB2YXIgZGVwU2VuU3RhdCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgIC8vREVQTE9ZIFBST1BPU0VEIG9yIENSRUFURSBORVcgZGVwbG95bWVudD9cclxuICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNlbnNvci5pbnN0cnVtZW50X2lkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAvL3B1dCBpbnN0cnVtZW50LCBwb3N0IHN0YXR1cyBmb3IgZGVwbG95aW5nIFBST1BPU0VEIHNlbnNvclxyXG4gICAgICAgICAgICAgICAgICAgICAgIElOU1RSVU1FTlQudXBkYXRlKHsgaWQ6ICRzY29wZS5hU2Vuc29yLmluc3RydW1lbnRfaWQgfSwgJHNjb3BlLmFTZW5zb3IpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY3JlYXRlIGluc3RydW1lbnRzdGF0dXMgdG9vIG5lZWQ6IHN0YXR1c190eXBlX2lkIGFuZCBpbnN0cnVtZW50X2lkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRTZW5zb3IgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFNlbnNvci5kZXBsb3ltZW50VHlwZSA9ICRzY29wZS5hU2Vuc29yLmRlcGxveW1lbnRUeXBlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkU2Vuc29yLmhvdXNpbmdUeXBlID0gcmVzcG9uc2UuaG91c2luZ190eXBlX2lkID4gMCA/ICRzY29wZS5ob3VzZVR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoaCkgeyByZXR1cm4gaC5ob3VzaW5nX3R5cGVfaWQgPT0gcmVzcG9uc2UuaG91c2luZ190eXBlX2lkOyB9KVswXS50eXBlX25hbWUgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFNlbnNvci5zZW5zb3JCcmFuZCA9ICRzY29wZS5zZW5zb3JCcmFuZExpc3QuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnNlbnNvcl9icmFuZF9pZCA9PSByZXNwb25zZS5zZW5zb3JfYnJhbmRfaWQ7IH0pWzBdLmJyYW5kX25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRTZW5zb3Iuc2Vuc29yVHlwZSA9ICRzY29wZS5zZW5zb3JUeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQuc2Vuc29yX3R5cGVfaWQgPT0gcmVzcG9uc2Uuc2Vuc29yX3R5cGVfaWQ7IH0pWzBdLnNlbnNvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zU3RhdHVzLmluc3RydW1lbnRfaWQgPSByZXNwb25zZS5pbnN0cnVtZW50X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBJTlNUUlVNRU5UX1NUQVRVUy5zYXZlKCRzY29wZS5hU2Vuc1N0YXR1cykuJHByb21pc2UudGhlbihmdW5jdGlvbiAoc3RhdFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FueSB0YXBlIGRvd25zP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS50YXBlRG93blRhYmxlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB0ID0gMDsgdCA8ICRzY29wZS50YXBlRG93blRhYmxlLmxlbmd0aDsgdCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzVGFwZSA9ICRzY29wZS50YXBlRG93blRhYmxlW3RdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzVGFwZS5pbnN0cnVtZW50X3N0YXR1c19pZCA9IHN0YXRSZXNwb25zZS5pbnN0cnVtZW50X3N0YXR1c19pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8vUE9TVCBJVC8vL1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUF9NRUFTVVJFLnNhdmUodGhpc1RhcGUpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYnVpbGQgdGhlIGNyZWF0ZWRTZW5zb3IgdG8gc2VuZCBiYWNrIGFuZCBhZGQgdG8gdGhlIGxpc3QgcGFnZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwU2VuU3RhdCA9IHN0YXRSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYWRkIFN0YXR1c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwU2VuU3RhdC5zdGF0dXMgPSAnRGVwbG95ZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFNlbnNvci5pbnN0cnVtZW50X3N0YXR1cyA9IFtkZXBTZW5TdGF0LCAkc2NvcGUucHJldmlvdXNTdGF0ZVN0YXR1c107ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFueXRoaW5nIHlvdSB3YW50IGNhbiBnbyBoZXJlIGFuZCB3aWxsIHNhZmVseSBiZSBydW4gb24gdGhlIG5leHQgZGlnZXN0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiU2Vuc29yIGRlcGxveWVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9ICRzY29wZS53aGljaEJ1dHRvbiA9PSAnZGVwbG95UCcgPyAncHJvcG9zZWREZXBsb3llZCcgOiAnbmV3RGVwbG95ZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW5kQmFjayA9IFtjcmVhdGVkU2Vuc29yLCBzdGF0ZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uoc2VuZEJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAvL3Bvc3QgaW5zdHJ1bWVudCBhbmQgc3RhdHVzIGZvciBkZXBsb3lpbmcgTkVXIHNlbnNvclxyXG4gICAgICAgICAgICAgICAgICAgICAgIElOU1RSVU1FTlQuc2F2ZSgkc2NvcGUuYVNlbnNvcikuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jcmVhdGUgaW5zdHJ1bWVudHN0YXR1cyB0b28gbmVlZDogc3RhdHVzX3R5cGVfaWQgYW5kIGluc3RydW1lbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFNlbnNvciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkU2Vuc29yLmRlcGxveW1lbnRUeXBlID0gcmVzcG9uc2UuZGVwbG95bWVudF90eXBlX2lkICE9PSBudWxsICYmIHJlc3BvbnNlLmRlcGxveW1lbnRfdHlwZV9pZCAhPT0gdW5kZWZpbmVkID8gJHNjb3BlLmRlcFR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5kZXBsb3ltZW50X3R5cGVfaWQgPT0gcmVzcG9uc2UuZGVwbG95bWVudF90eXBlX2lkOyB9KVswXS5tZXRob2QgOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkU2Vuc29yLmhvdXNpbmdUeXBlID0gcmVzcG9uc2UuaG91c2luZ190eXBlX2lkICE9PSBudWxsICYmIHJlc3BvbnNlLmhvdXNpbmdfdHlwZV9pZCAhPT0gdW5kZWZpbmVkID8gJHNjb3BlLmhvdXNlVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChoKSB7IHJldHVybiBoLmhvdXNpbmdfdHlwZV9pZCA9PSByZXNwb25zZS5ob3VzaW5nX3R5cGVfaWQ7IH0pWzBdLnR5cGVfbmFtZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkU2Vuc29yLnNlbnNvckJyYW5kID0gJHNjb3BlLnNlbnNvckJyYW5kTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc2Vuc29yX2JyYW5kX2lkID09IHJlc3BvbnNlLnNlbnNvcl9icmFuZF9pZDsgfSlbMF0uYnJhbmRfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFNlbnNvci5zZW5zb3JUeXBlID0gJHNjb3BlLnNlbnNvclR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5zZW5zb3JfdHlwZV9pZCA9PSByZXNwb25zZS5zZW5zb3JfdHlwZV9pZDsgfSlbMF0uc2Vuc29yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMuaW5zdHJ1bWVudF9pZCA9IHJlc3BvbnNlLmluc3RydW1lbnRfaWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBJTlNUUlVNRU5UX1NUQVRVUy5zYXZlKCRzY29wZS5hU2Vuc1N0YXR1cykuJHByb21pc2UudGhlbihmdW5jdGlvbiAoc3RhdFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FueSB0YXBlIGRvd25zP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS50YXBlRG93blRhYmxlLmxlbmd0aCA+IDApe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHQgPSAwOyB0IDwgJHNjb3BlLnRhcGVEb3duVGFibGUubGVuZ3RoOyB0Kyspe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc1RhcGUgPSAkc2NvcGUudGFwZURvd25UYWJsZVt0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1RhcGUuaW5zdHJ1bWVudF9zdGF0dXNfaWQgPSBzdGF0UmVzcG9uc2UuaW5zdHJ1bWVudF9zdGF0dXNfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vL1BPU1QgSVQvLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT1BfTUVBU1VSRS5zYXZlKHRoaXNUYXBlKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9idWlsZCB0aGUgY3JlYXRlZFNlbnNvciB0byBzZW5kIGJhY2sgYW5kIGFkZCB0byB0aGUgbGlzdCBwYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBTZW5TdGF0ID0gc3RhdFJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwU2VuU3RhdC5zdGF0dXMgPSAnRGVwbG95ZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFNlbnNvci5pbnN0cnVtZW50X3N0YXR1cyA9IFtkZXBTZW5TdGF0XTsgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlNlbnNvciBkZXBsb3llZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9ICRzY29wZS53aGljaEJ1dHRvbiA9PSAnZGVwbG95UCcgPyAncHJvcG9zZWREZXBsb3llZCcgOiAnbmV3RGVwbG95ZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbmRCYWNrID0gW2NyZWF0ZWRTZW5zb3IsIHN0YXRlXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHNlbmRCYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfTsvL2VuZCBkZXBsb3koKVxyXG5cclxuICAgICAgICAgICAvL2RlbGV0ZSBhU2Vuc29yIGFuZCBzZW5zb3Igc3RhdHVzZXNcclxuICAgICAgICAgICAkc2NvcGUuZGVsZXRlUyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgLy9UT0RPOjogRGVsZXRlIHRoZSBmaWxlcyBmb3IgdGhpcyBzZW5zb3IgdG9vIG9yIHJlYXNzaWduIHRvIHRoZSBTaXRlPz8gU2VydmljZXMgb3IgY2xpZW50IGhhbmRsaW5nP1xyXG4gICAgICAgICAgICAgICB2YXIgRGVsZXRlTW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLmFTZW5zb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlNlbnNvclwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICBEZWxldGVNb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChzZW5zb3JUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgLy90aGlzIHdpbGwgZGVsZXRlIHRoZSBpbnN0cnVtZW50IGFuZCBhbGwgaXQncyBzdGF0dXNlc1xyXG4gICAgICAgICAgICAgICAgICAgSU5TVFJVTUVOVC5kZWxldGUoeyBpZDogc2Vuc29yVG9SZW1vdmUuaW5zdHJ1bWVudF9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRGVwU2Vuc29yRmlsZXMgPSBbXTsgLy9jbGVhciBvdXQgc2Vuc29yRmlsZXMgZm9yIHRoaXMgc2Vuc29yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFNlbnNJbWFnZUZpbGVzID0gW107IC8vY2xlYXIgb3V0IGltYWdlIGZpbGVzIGZvciB0aGlzIHNlbnNvclxyXG4gICAgICAgICAgICAgICAgICAgICAgIC8vbm93IHJlbW92ZSBhbGwgdGhlc2UgZmlsZXMgZnJvbSBTaXRlRmlsZXNcclxuICAgICAgICAgICAgICAgICAgICAgICB2YXIgbCA9ICRzY29wZS5hbGxTRmlsZXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChsLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hbGxTRmlsZXNbbF0uaW5zdHJ1bWVudF9pZCA9PSBzZW5zb3JUb1JlbW92ZS5pbnN0cnVtZW50X2lkKSAkc2NvcGUuYWxsU0ZpbGVzLnNwbGljZShsLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgLy91cGRhdGVzIHRoZSBmaWxlIGxpc3Qgb24gdGhlIHNpdGVkYXNoYm9hcmRcclxuICAgICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuYWxsU0ZpbGVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlNlbnNvciBSZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW5kQmFjayA9IFtcImRlXCIsICdkZWxldGVkJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uoc2VuZEJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgIH0pOy8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgaWYgKHRoaXNTZW5zb3IgIT0gXCJlbXB0eVwiKSB7XHJcbiAgICAgICAgICAgICAgIC8vYWN0aW9uczogJ2RlcFByb3AnLCAnZWRpdERlcCcsICdyZXRyaWV2ZScsICdlZGl0UmV0J1xyXG4gICAgICAgICAgICAgICAvLyNyZWdpb24gZXhpc3RpbmcgZGVwbG95ZWQgU2Vuc29yIC4uIGJyZWFrIGFwYXJ0IHRoZSAndGhpc1NlbnNvcicgaW50byAnYVNlbnNvcicgYW5kICdhU2Vuc1N0YXR1cydcclxuICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zb3IgPSBhbmd1bGFyLmNvcHkodGhpc1NlbnNvcik7XHJcbiAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc1N0YXR1cyA9IGFuZ3VsYXIuY29weSh0aGlzU2Vuc29yLmluc3RydW1lbnRfc3RhdHVzWzBdKTtcclxuICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvckRhdGFOV0lTID0gKCgkc2NvcGUuYVNlbnNvci5zZW5zb3JfdHlwZV9pZCA9PSAyIHx8ICRzY29wZS5hU2Vuc29yLnNlbnNvcl90eXBlX2lkID09IDUpIHx8ICRzY29wZS5hU2Vuc29yLnNlbnNvcl90eXBlX2lkID09IDYpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAkc2NvcGUuZ2V0RGVwVHlwZXMoKTsvL3BvcHVsYXRlICRzY29wZS5maWx0ZXJlZERlcGxveW1lbnRUeXBlcyBmb3IgZHJvcGRvd24gb3B0aW9uc1xyXG4gICAgICAgICAgICAgICAkc2NvcGUuSW50ZXJ2YWxUeXBlLnR5cGUgPSAnU2Vjb25kcyc7IC8vZGVmYXVsdFxyXG4gICAgICAgICAgICAgICBpZiAoJHNjb3BlLnNlbnNvckRhdGFOV0lTKSB7XHJcbiAgICAgICAgICAgICAgICAgICAvL0ZJTEUuVkFMSURBVEVEIGJlaW5nIHVzZWQgdG8gc3RvcmUgMSBpZiB0aGlzIGlzIGFuIG53aXMgZmlsZSBtZXRhZGF0YSBsaW5rXHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yTldJU0ZpbGVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhaSA9ICRzY29wZS5EZXBTZW5zb3JGaWxlcy5sZW5ndGggLSAxOyBhaSA+PSAwOyBhaS0tKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5EZXBTZW5zb3JGaWxlc1thaV0uaXNfbndpcyA9PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZW5zb3JOV0lTRmlsZXMucHVzaCgkc2NvcGUuRGVwU2Vuc29yRmlsZXNbYWldKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRlcFNlbnNvckZpbGVzLnNwbGljZShhaSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgdmFyIGR0ID0gZ2V0VGltZVpvbmVTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNGaWxlID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0RGID0ge307XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgIC8vYXJlIHdlIGRlcGxveWluZyBhIHByb3Bvc2VkIHNlbnNvciBvciBlZGl0aW5nIGEgZGVwbG95ZWQgc2Vuc29yPz9cclxuICAgICAgICAgICAgICAgaWYgKHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9zdGF0dXNbMF0uc3RhdHVzID09IFwiUHJvcG9zZWRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgLy9kZXBsb3lpbmcgcHJvcG9zZWRcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5wcmV2aW91c1N0YXRlU3RhdHVzID0gYW5ndWxhci5jb3B5KHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9zdGF0dXNbMF0pOyAvL2hvbGQgdGhlIHByb3Bvc2VkIHN0YXRlIChwcm9wb3NlZCB0byBkZXBsb3llZClcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS53aGljaEJ1dHRvbiA9ICdkZXBsb3lQJztcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc29yLmludGVydmFsID0gJHNjb3BlLmFTZW5zb3IuaW50ZXJ2YWwgPT09IDAgPyBudWxsIDogJHNjb3BlLmFTZW5zb3IuaW50ZXJ2YWw7IC8vY2xlYXIgb3V0IHRoZSAnMCcgdmFsdWUgaGVyZSAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAvL2Rpc3BsYXlpbmcgZGF0ZSAvIHRpbWUgaXQgdXNlcidzIHRpbWV6b25lXHJcbiAgICAgICAgICAgICAgICAgICB2YXIgdGltZVBhcnRzID0gZ2V0VGltZVpvbmVTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zU3RhdHVzLnRpbWVfc3RhbXAgPSB0aW1lUGFydHNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMudGltZV96b25lID0gdGltZVBhcnRzWzFdOyAvL3dpbGwgYmUgY29udmVydGVkIHRvIHV0YyBvbiBwb3N0L3B1dFxyXG4gICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zU3RhdHVzLm1lbWJlcl9pZCA9ICRjb29raWVzLmdldCgnbUlEJyk7IC8vIG1lbWJlciBsb2dnZWQgaW4gaXMgZGVwbG95aW5nIGl0XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuRXZlbnROYW1lID0gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJyk7XHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuRGVwbG95ZXIgPSAkc2NvcGUuTG9nZ2VkSW5NZW1iZXI7XHJcbiAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAvL2VkaXRpbmcgZGVwbG95ZWRcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS53aGljaEJ1dHRvbiA9ICdlZGl0JztcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc29yLmludGVydmFsID0gJHNjb3BlLmFTZW5zb3IuaW50ZXJ2YWwgPT09IDAgPyBudWxsIDogJHNjb3BlLmFTZW5zb3IuaW50ZXJ2YWw7IC8vY2xlYXIgb3V0IHRoZSAnMCcgdmFsdWUgaGVyZSAgIFxyXG4gICAgICAgICAgICAgICAgICAgLy9nZXQgdGhpcyBkZXBsb3llZCBzZW5zb3IncyBldmVudCBuYW1lXHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuRXZlbnROYW1lID0gJHNjb3BlLmV2ZW50TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUuZXZlbnRfaWQgPT0gJHNjb3BlLmFTZW5zb3IuZXZlbnRfaWQ7IH0pWzBdLmV2ZW50X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAvL2RhdGUgZm9ybWF0dGluZy4gdGhpcyBrZWVwcyBpdCBpbiB1dGMgZm9yIGRpc3BsYXlcclxuICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc1N0YXR1cy50aW1lX3N0YW1wID0gZ2V0RGF0ZVRpbWVQYXJ0cygkc2NvcGUuYVNlbnNTdGF0dXMudGltZV9zdGFtcCk7XHJcbiAgICAgICAgICAgICAgICAgICAvL2dldCBjb2xsZWN0aW9uIG1lbWJlcidzIG5hbWUgXHJcbiAgICAgICAgICAgICAgICAgICAkc2NvcGUuRGVwbG95ZXIgPSAkc2NvcGUuYVNlbnNTdGF0dXMubWVtYmVyX2lkICE9PSBudWxsIHx8ICRzY29wZS5hU2Vuc1N0YXR1cy5tZW1iZXJfaWQgIT09IHVuZGVmaW5lZCA/IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1lbWJlcl9pZCA9PSAkc2NvcGUuYVNlbnNTdGF0dXMubWVtYmVyX2lkOyB9KVswXSA6IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgT1BfTUVBU1VSRS5nZXRJbnN0U3RhdE9QTWVhc3VyZXMoe2luc3RydW1lbnRTdGF0dXNJZDogJHNjb3BlLmFTZW5zU3RhdHVzLmluc3RydW1lbnRfc3RhdHVzX2lkfSkuJHByb21pc2UudGhlbihmdW5jdGlvbihyZXNwb25zZSl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgciA9IDA7IHIgPCByZXNwb25zZS5sZW5ndGg7IHIrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Vuc01lYXN1cmVzID0gcmVzcG9uc2Vbcl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3aGljaE9QID0gc2l0ZU9Qcy5maWx0ZXIoZnVuY3Rpb24gKG9wKSB7IHJldHVybiBvcC5vYmplY3RpdmVfcG9pbnRfaWQgPT0gcmVzcG9uc2Vbcl0ub2JqZWN0aXZlX3BvaW50X2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vuc01lYXN1cmVzLmVsZXZhdGlvbiA9IHdoaWNoT1AuZWxldl9mdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vuc01lYXN1cmVzLlZkYXR1bSA9ICRzY29wZS52ZXJ0RGF0dW1MaXN0LmZpbHRlcihmdW5jdGlvbiAodmQpIHsgcmV0dXJuIHZkLmRhdHVtX2lkID09IHdoaWNoT1AudmRhdHVtX2lkOyB9KVswXS5kYXR1bV9hYmJyZXZpYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbnNNZWFzdXJlcy5vcF9uYW1lID0gd2hpY2hPUC5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudGFwZURvd25UYWJsZS5wdXNoKHNlbnNNZWFzdXJlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2dvIHRocm91Z2ggT1BzRm9yVGFwZURvd24gYW5kIGFkZCBzZWxlY3RlZCBQcm9wZXJ0eS5cclxuICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRzY29wZS5PUHNGb3JUYXBlRG93bi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAvL2ZvciBlYWNoIG9uZSwgaWYgcmVzcG9uc2UgaGFzIHRoaXMgaWQsIGFkZCAnc2VsZWN0ZWQ6dHJ1ZScgZWxzZSBhZGQgJ3NlbGVjdGVkOmZhbHNlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IHJlc3BvbnNlLmxlbmd0aDsgeSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzcG9uc2VbeV0ub2JqZWN0aXZlX3BvaW50X2lkID09ICRzY29wZS5PUHNGb3JUYXBlRG93bltpXS5vYmplY3RpdmVfcG9pbnRfaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BzRm9yVGFwZURvd25baV0uc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSByZXNwb25zZS5sZW5ndGg7IC8vZW5zdXJlcyBpdCBkb2Vzbid0IHNldCBpdCBhcyBmYWxzZSBhZnRlciBzZXR0aW5nIGl0IGFzIHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PUHNGb3JUYXBlRG93bltpXS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BzRm9yVGFwZURvd25baV0uc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAvL2VuZCBpZiB0aGlzU2l0ZUhvdXNpbmdzICE9IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gZXhpc3RpbmcgU2Vuc29yXHJcbiAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgLy8jcmVnaW9uIERlcGxveWluZyBuZXcgU2Vuc29yXHJcbiAgICAgICAgICAgICAgICRzY29wZS53aGljaEJ1dHRvbiA9ICdkZXBsb3knO1xyXG4gICAgICAgICAgICAgICAkc2NvcGUuSW50ZXJ2YWxUeXBlLnR5cGUgPSAnU2Vjb25kcyc7IC8vZGVmYXVsdFxyXG4gICAgICAgICAgICAgICAvL2Rpc3BsYXlpbmcgZGF0ZSAvIHRpbWUgaXQgdXNlcidzIHRpbWV6b25lXHJcbiAgICAgICAgICAgICAgIHZhciBEZXB0aW1lUGFydHMgPSBnZXRUaW1lWm9uZVN0YW1wKCk7XHJcbiAgICAgICAgICAgICAgICRzY29wZS5hU2Vuc1N0YXR1cy50aW1lX3N0YW1wID0gRGVwdGltZVBhcnRzWzBdO1xyXG4gICAgICAgICAgICAgICAkc2NvcGUuYVNlbnNTdGF0dXMudGltZV96b25lID0gRGVwdGltZVBhcnRzWzFdOyAvL3dpbGwgYmUgY29udmVydGVkIHRvIHV0YyBvbiBwb3N0L3B1dCAgICAgICAgICBcclxuICAgICAgICAgICAgICAgJHNjb3BlLmFTZW5zU3RhdHVzLm1lbWJlcl9pZCA9ICRjb29raWVzLmdldCgnbUlEJyk7IC8vIG1lbWJlciBsb2dnZWQgaW4gaXMgZGVwbG95aW5nIGl0XHJcbiAgICAgICAgICAgICAgICRzY29wZS5FdmVudE5hbWUgPSAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudE5hbWUnKTtcclxuICAgICAgICAgICAgICAgJHNjb3BlLkRlcGxveWVyID0gJHNjb3BlLkxvZ2dlZEluTWVtYmVyO1xyXG4gICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBuZXcgU2Vuc29yXHJcbiAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAkc2NvcGUubXlEYXRhID0gWyRzY29wZS5hU2Vuc1N0YXR1cy5zZW5zb3JfZWxldmF0aW9uLCAkc2NvcGUuYVNlbnNTdGF0dXMud3NfZWxldmF0aW9uLCAkc2NvcGUuYVNlbnNTdGF0dXMuZ3NfZWxldmF0aW9uXTtcclxuICAgICAgICAgICAgLy9lZGl0IGJ1dHRvbiBjbGlja2VkLiBtYWtlIGNvcHkgb2YgZGVwbG95ZWQgaW5mbyBcclxuICAgICAgICAgICAkc2NvcGUud2FubmFFZGl0RGVwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAkc2NvcGUudmlldy5ERVB2YWwgPSAnZWRpdCc7XHJcbiAgICAgICAgICAgICAgICRzY29wZS5kZXBTdHVmZkNvcHkgPSBbYW5ndWxhci5jb3B5KCRzY29wZS5hU2Vuc29yKSwgYW5ndWxhci5jb3B5KCRzY29wZS5hU2Vuc1N0YXR1cyldO1xyXG4gICAgICAgICAgICAgICAkc2NvcGUuZGVwVGFwZUNvcHkgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLnRhcGVEb3duVGFibGUpO1xyXG4gICAgICAgICAgIH07XHJcbiAgICAgICAgICAgJHNjb3BlLmNhbmNlbERlcEVkaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICRzY29wZS52aWV3LkRFUHZhbCA9ICdkZXRhaWwnO1xyXG4gICAgICAgICAgICAgICAkc2NvcGUuZGVwU3R1ZmZDb3B5ID0gW107XHJcbiAgICAgICAgICAgICAgICRzY29wZS5kZXBUYXBlQ29weSA9IFtdO1xyXG4gICAgICAgICAgICAgICAvL01BS0UgU1VSRSBBTEwgU0VMRUNURUQgT1AnUyBTVEFZIFNFTEVDVEVEXHJcbiAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLk9Qc0ZvclRhcGVEb3duLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAvL2ZvciBlYWNoIG9uZSwgaWYgcmVzcG9uc2UgaGFzIHRoaXMgaWQsIGFkZCAnc2VsZWN0ZWQ6dHJ1ZScgZWxzZSBhZGQgJ3NlbGVjdGVkOmZhbHNlJ1xyXG4gICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCAkc2NvcGUudGFwZURvd25UYWJsZS5sZW5ndGg7IHkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUudGFwZURvd25UYWJsZVt5XS5vYmplY3RpdmVfcG9pbnRfaWQgPT0gJHNjb3BlLk9Qc0ZvclRhcGVEb3duW2ldLm9iamVjdGl2ZV9wb2ludF9pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BzRm9yVGFwZURvd25baV0uc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gJHNjb3BlLnRhcGVEb3duVGFibGUubGVuZ3RoOyAvL2Vuc3VyZXMgaXQgZG9lc24ndCBzZXQgaXQgYXMgZmFsc2UgYWZ0ZXIgc2V0dGluZyBpdCBhcyB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BzRm9yVGFwZURvd25baV0uc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnRhcGVEb3duVGFibGUubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PUHNGb3JUYXBlRG93bltpXS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgfV0pOyAvL2VuZCBTRU5TT1JcclxuXHJcbiAgICAvLyBSZXRyaWV2ZSBhIFNlbnNvciBtb2RhbFxyXG4gICAgTW9kYWxDb250cm9sbGVycy5jb250cm9sbGVyKCdzZW5zb3JSZXRyaWV2YWxNb2RhbEN0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyR0aW1lb3V0JywgJyRjb29raWVzJywgJyRodHRwJywgJyR1aWJNb2RhbEluc3RhbmNlJywgJyR1aWJNb2RhbCcsICd0aGlzU2Vuc29yJywgJ1NlbnNvclNpdGUnLCAnc2l0ZU9QcycsICdhbGxFdmVudExpc3QnLCAnYWxsVkRhdHVtTGlzdCcsICdhbGxNZW1iZXJzJywgJ2FsbFN0YXR1c1R5cGVzJywgJ2FsbEluc3RDb2xsQ29uZCcsICdJTlNUUlVNRU5UJywgJ0lOU1RSVU1FTlRfU1RBVFVTJywgJ09QX01FQVNVUkUnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICR0aW1lb3V0LCAkY29va2llcywgJGh0dHAsICR1aWJNb2RhbEluc3RhbmNlLCAkdWliTW9kYWwsIHRoaXNTZW5zb3IsIFNlbnNvclNpdGUsIHNpdGVPUHMsIGFsbEV2ZW50TGlzdCwgYWxsVkRhdHVtTGlzdCwgYWxsTWVtYmVycywgYWxsU3RhdHVzVHlwZXMsIGFsbEluc3RDb2xsQ29uZCwgSU5TVFJVTUVOVCwgSU5TVFJVTUVOVF9TVEFUVVMsIE9QX01FQVNVUkUpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmFTZW5zb3IgPSB0aGlzU2Vuc29yO1xyXG4gICAgICAgICAgICAkc2NvcGUuRXZlbnROYW1lID0gYWxsRXZlbnRMaXN0LmZpbHRlcihmdW5jdGlvbiAocikge3JldHVybiByLmV2ZW50X2lkID09ICRzY29wZS5hU2Vuc29yLmV2ZW50X2lkO30pWzBdLmV2ZW50X25hbWU7ICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICRzY29wZS5kZXBTZW5zU3RhdHVzID0gYW5ndWxhci5jb3B5KHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9zdGF0dXNbMF0pO1xyXG4gICAgICAgICAgICB2YXIgaXNEYXRlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKCRzY29wZS5kZXBTZW5zU3RhdHVzLnRpbWVfc3RhbXApID09PSAnW29iamVjdCBEYXRlXSc7XHJcbiAgICAgICAgICAgIGlmIChpc0RhdGUgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgeSA9ICRzY29wZS5kZXBTZW5zU3RhdHVzLnRpbWVfc3RhbXAuc3Vic3RyKDAsIDQpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG0gPSAkc2NvcGUuZGVwU2Vuc1N0YXR1cy50aW1lX3N0YW1wLnN1YnN0cig1LCAyKSAtIDE7IC8vc3VidHJhY3QgMSBmb3IgaW5kZXggdmFsdWUgKEphbnVhcnkgaXMgMClcclxuICAgICAgICAgICAgICAgIHZhciBkID0gJHNjb3BlLmRlcFNlbnNTdGF0dXMudGltZV9zdGFtcC5zdWJzdHIoOCwgMik7XHJcbiAgICAgICAgICAgICAgICB2YXIgaCA9ICRzY29wZS5kZXBTZW5zU3RhdHVzLnRpbWVfc3RhbXAuc3Vic3RyKDExLCAyKTtcclxuICAgICAgICAgICAgICAgIHZhciBtaSA9ICRzY29wZS5kZXBTZW5zU3RhdHVzLnRpbWVfc3RhbXAuc3Vic3RyKDE0LCAyKTtcclxuICAgICAgICAgICAgICAgIHZhciBzZWMgPSAkc2NvcGUuZGVwU2Vuc1N0YXR1cy50aW1lX3N0YW1wLnN1YnN0cigxNywgMik7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU2Vuc1N0YXR1cy50aW1lX3N0YW1wID0gbmV3IERhdGUoeSwgbSwgZCwgaCwgbWksIHNlYyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCRzY29wZS5kZXBTZW5zU3RhdHVzLnZkYXR1bV9pZCAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5kZXBTZW5zU3RhdHVzLnZkYXR1bV9pZCA+IDApXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU2Vuc1N0YXR1cy5WRGF0dW0gPSBhbGxWRGF0dW1MaXN0LmZpbHRlcihmdW5jdGlvbiAodikgeyByZXR1cm4gdi5kYXR1bV9pZCA9PSAkc2NvcGUuZGVwU2Vuc1N0YXR1cy52ZGF0dW1faWQ7IH0pWzBdLmRhdHVtX2FiYnJldmlhdGlvbjtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5PUHNGb3JUYXBlRG93biA9IHNpdGVPUHM7XHJcbiAgICAgICAgICAgICRzY29wZS5PUHNQcmVzZW50ID0gc2l0ZU9Qcy5sZW5ndGggPiAwID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAkc2NvcGUudmVydERhdHVtTGlzdCA9IGFsbFZEYXR1bUxpc3Q7XHJcbiAgICAgICAgICAgICRzY29wZS5yZW1vdmVPUExpc3QgPSBbXTtcclxuICAgICAgICAgICAgJHNjb3BlLnRhcGVEb3duVGFibGUgPSBbXTsgLy9ob2xkZXIgb2YgdGFwZWRvd24gT1BfTUVBU1VSRU1FTlRTXHJcbiAgICAgICAgICAgICRzY29wZS5ERVB0YXBlRG93blRhYmxlID0gW107IC8vaG9sZHMgYW55IGRlcGxveWVkIHRhcGVkb3duc1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLkRlcGxveWVyID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRzY29wZS5kZXBTZW5zU3RhdHVzLm1lbWJlcl9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICRzY29wZS53aGljaEJ1dHRvbiA9ICdSZXRyaWV2ZSc7XHJcbiAgICAgICAgICAgICRzY29wZS5zdGF0dXNUeXBlTGlzdCA9IGFsbFN0YXR1c1R5cGVzLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcy5zdGF0dXMgPT0gXCJSZXRyaWV2ZWRcIiB8fCBzLnN0YXR1cyA9PSBcIkxvc3RcIjsgfSk7XHJcbiAgICAgICAgICAgICRzY29wZS5jb2xsZWN0Q29uZExpc3QgPSBhbGxJbnN0Q29sbENvbmQ7XHJcbiAgICAgICAgICAgICRzY29wZS50aW1lWm9uZUxpc3QgPSBbJ1VUQycsICdQU1QnLCAnTVNUJywgJ0NTVCcsICdFU1QnXTtcclxuICAgICAgICAgICAgJHNjb3BlLnVzZXJSb2xlID0gJGNvb2tpZXMuZ2V0KCd1c2Vyc1JvbGUnKTtcclxuICAgICAgICAgICAgLy9mb3JtYXR0ZXIgZm9yIGRhdGUvdGltZSBhbmQgY2hvc2VuIHpvbmUgYmFzZWQgb24gdGhlaXIgbG9jYXRpb25cclxuICAgICAgICAgICAgdmFyIGdldFRpbWVab25lU3RhbXAgPSBmdW5jdGlvbiAoZHNlbnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzZW5kVGhpcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGQ7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRzZW50ICE9PSB1bmRlZmluZWQpIGQgPSBuZXcgRGF0ZShkc2VudCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGQgPSBuZXcgRGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSAoZC50b1N0cmluZygpKS5zdWJzdHJpbmcoMzUpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHpvbmUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChvZmZzZXQuc3Vic3RyKDAsIDMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkNlblwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB6b25lID0gJ0NTVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJFYXNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgem9uZSA9ICdFU1QnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiTW91XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHpvbmUgPSAnTVNUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlBhY1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB6b25lID0gJ1BTVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2VuZFRoaXMgPSBbZCwgem9uZV07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VuZFRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvLyNyZWdpb24gdGFwZSBkb3duIHNlY3Rpb24gICAgICAgICAgICBcclxuICAgICAgICAgICAgJHNjb3BlLk9QY2hvc2VuID0gZnVuY3Rpb24gKG9wQ2hvc2VuKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgb3BJID0gJHNjb3BlLk9Qc0ZvclRhcGVEb3duLm1hcChmdW5jdGlvbiAobykgeyByZXR1cm4gby5vYmplY3RpdmVfcG9pbnRfaWQ7IH0pLmluZGV4T2Yob3BDaG9zZW4ub2JqZWN0aXZlX3BvaW50X2lkKTtcclxuICAgICAgICAgICAgICAgIGlmIChvcENob3Nlbi5zZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdGhleSBwaWNrZWQgYW4gT1AgdG8gdXNlIGZvciB0YXBlZG93blxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5PUE1lYXN1cmUgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BNZWFzdXJlLm9wX25hbWUgPSBvcENob3Nlbi5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5PUE1lYXN1cmUuZWxldmF0aW9uID0gb3BDaG9zZW4uZWxldl9mdDtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BNZWFzdXJlLlZkYXR1bSA9ICRzY29wZS52ZXJ0RGF0dW1MaXN0LmZpbHRlcihmdW5jdGlvbiAodmQpIHsgcmV0dXJuIHZkLmRhdHVtX2lkID09IG9wQ2hvc2VuLnZkYXR1bV9pZDsgfSlbMF0uZGF0dW1fYWJicmV2aWF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5PUE1lYXN1cmUub2JqZWN0aXZlX3BvaW50X2lkID0gb3BDaG9zZW4ub2JqZWN0aXZlX3BvaW50X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLk9QTWVhc3VyZS5vcF9uYW1lID0gb3BOYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50YXBlRG93blRhYmxlLnB1c2goJHNjb3BlLk9QTWVhc3VyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFSZXRyaWV2YWwudmRhdHVtX2lkID0gb3BDaG9zZW4udmRhdHVtX2lkO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3RoZXkgdW5jaGVja2VkIHRoZSBvcCB0byByZW1vdmVcclxuICAgICAgICAgICAgICAgICAgICAvL2FzayB0aGVtIGFyZSB0aGV5IHN1cmU/XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlbW92ZU9QTWVhcyA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+UmVtb3ZlIE9QIE1lYXN1cmU8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+QXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlbW92ZSB0aGlzIE9QIE1lYXN1cmVtZW50IGZyb20gdGhpcyBzZW5zb3I/PC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJjYW5jZWwoKVwiPkNhbmNlbDwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgncmVtb3ZlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgnY2FuY2VsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlbW92ZU9QTWVhcy5yZXN1bHQudGhlbihmdW5jdGlvbiAoeWVzT3JObykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeWVzT3JObyA9PSAncmVtb3ZlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hZGQgdG8gcmVtb3ZlIGl0IGxpc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0YXBlRG93blRvUmVtb3ZlID0gJHNjb3BlLnRhcGVEb3duVGFibGUuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLm9iamVjdGl2ZV9wb2ludF9pZCA9PSBvcENob3Nlbi5vYmplY3RpdmVfcG9pbnRfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRJbmQgPSAkc2NvcGUudGFwZURvd25UYWJsZS5tYXAoZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8ub2JqZWN0aXZlX3BvaW50X2lkOyB9KS5pbmRleE9mKHRhcGVEb3duVG9SZW1vdmUub2JqZWN0aXZlX3BvaW50X2lkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YXBlRG93blRvUmVtb3ZlLm9wX21lYXN1cmVtZW50c19pZCAhPT0gdW5kZWZpbmVkKSAkc2NvcGUucmVtb3ZlT1BMaXN0LnB1c2godGFwZURvd25Ub1JlbW92ZS5vcF9tZWFzdXJlbWVudHNfaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRhcGVEb3duVGFibGUuc3BsaWNlKHRJbmQsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS50YXBlRG93blRhYmxlLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hUmV0cmlldmFsLnZkYXR1bV9pZCA9IDA7ICRzY29wZS5hUmV0cmlldmFsLmdzX2VsZXZhdGlvbiA9ICcnOyAkc2NvcGUuYVJldHJpZXZhbC53c19lbGV2YXRpb24gPSAnJzsgJHNjb3BlLmFSZXRyaWV2YWwuc2Vuc29yX2VsZXZhdGlvbiA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9uZXZlciBtaW5kLCBtYWtlIGl0IHNlbGVjdGVkIGFnYWluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BzRm9yVGFwZURvd25bb3BJXS5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9nZXQgZGVwbG95IHN0YXR1cyB0YXBlZG93bnMgdG8gYWRkIHRvIHRvcCBmb3IgZGlzcGxheVxyXG4gICAgICAgICAgICBPUF9NRUFTVVJFLmdldEluc3RTdGF0T1BNZWFzdXJlcyh7IGluc3RydW1lbnRTdGF0dXNJZDogJHNjb3BlLmRlcFNlbnNTdGF0dXMuaW5zdHJ1bWVudF9zdGF0dXNfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgcmVzcG9uc2UubGVuZ3RoOyByKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2Vuc01lYXN1cmVzID0gcmVzcG9uc2Vbcl07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdoaWNoT1AgPSBzaXRlT1BzLmZpbHRlcihmdW5jdGlvbiAob3ApIHsgcmV0dXJuIG9wLm9iamVjdGl2ZV9wb2ludF9pZCA9PSByZXNwb25zZVtyXS5vYmplY3RpdmVfcG9pbnRfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHNlbnNNZWFzdXJlcy5lbGV2YXRpb24gPSB3aGljaE9QLmVsZXZfZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgc2Vuc01lYXN1cmVzLlZkYXR1bSA9ICRzY29wZS52ZXJ0RGF0dW1MaXN0LmZpbHRlcihmdW5jdGlvbiAodmQpIHsgcmV0dXJuIHZkLmRhdHVtX2lkID09IHdoaWNoT1AudmRhdHVtX2lkOyB9KVswXS5kYXR1bV9hYmJyZXZpYXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgc2Vuc01lYXN1cmVzLm9wX25hbWUgPSB3aGljaE9QLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRFUHRhcGVEb3duVGFibGUucHVzaChzZW5zTWVhc3VyZXMpO1xyXG4gICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyNlbmRyZWdpb24gdGFwZSBkb3duIHNlY3Rpb24gXHJcblxyXG4gICAgICAgICAgICAvL2RlZmF1bHQgZm9ybWF0dGluZyBmb3IgcmV0cmlldmFsXHJcbiAgICAgICAgICAgIHZhciBkdHBhcnRzID0gZ2V0VGltZVpvbmVTdGFtcCgpO1xyXG4gICAgICAgICAgICAkc2NvcGUuYVJldHJpZXZhbCA9IHsgdGltZV9zdGFtcDogZHRwYXJ0c1swXSwgdGltZV96b25lOiBkdHBhcnRzWzFdLCBpbnN0cnVtZW50X2lkOiAkc2NvcGUuYVNlbnNvci5pbnN0cnVtZW50X2lkLCBtZW1iZXJfaWQ6ICRjb29raWVzLmdldCgnbUlEJykgfTtcclxuICAgICAgICAgICAgJHNjb3BlLlJldHJpZXZlciA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChhbSkgeyByZXR1cm4gYW0ubWVtYmVyX2lkID09ICRjb29raWVzLmdldCgnbUlEJyk7IH0pWzBdO1xyXG5cclxuICAgICAgICAgICAgLy9pcyBpdCBVVEMgb3IgbG9jYWwgdGltZS4ubWFrZSBzdXJlIGl0IHN0YXlzIFVUQ1xyXG4gICAgICAgICAgICB2YXIgZGVhbFdpdGhUaW1lU3RhbXBiNFNlbmQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvL2NoZWNrIGFuZCBzZWUgaWYgdGhleSBhcmUgbm90IHVzaW5nIFVUQ1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hUmV0cmlldmFsLnRpbWVfem9uZSAhPSBcIlVUQ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb252ZXJ0IGl0XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHV0Y0RhdGVUaW1lID0gbmV3IERhdGUoJHNjb3BlLmFSZXRyaWV2YWwudGltZV9zdGFtcCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVJldHJpZXZhbC50aW1lX3N0YW1wID0gdXRjRGF0ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFSZXRyaWV2YWwudGltZV96b25lID0gJ1VUQyc7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlICdHTVQnIGlzIHRhY2tlZCBvbiBzbyBpdCBkb2Vzbid0IHRyeSB0byBhZGQgaHJzIHRvIG1ha2UgdGhlIGFscmVhZHkgdXRjIGEgdXRjIGluIGRiXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAkc2NvcGUuYVJldHJpZXZhbC50aW1lX3N0YW1wLnRvU3RyaW5nKCkuaW5kZXhPZignR01UJykgKyAzO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hUmV0cmlldmFsLnRpbWVfc3RhbXAgPSAkc2NvcGUuYVJldHJpZXZhbC50aW1lX3N0YW1wLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIGkpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9jYW5jZWxcclxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2YXIgZGVwVGltZVN0YW1wYjRTZW5kID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy9jaGVjayBhbmQgc2VlIGlmIHRoZXkgYXJlIG5vdCB1c2luZyBVVENcclxuICAgICAgICAgICAgICAgIHZhciByZXR1cm5UaGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlICdHTVQnIGlzIHRhY2tlZCBvbiBzbyBpdCBkb2Vzbid0IHRyeSB0byBhZGQgaHJzIHRvIG1ha2UgdGhlIGFscmVhZHkgdXRjIGEgdXRjIGluIGRiXHJcbiAgICAgICAgICAgICAgICB2YXIgaSA9ICRzY29wZS5kZXBTZW5zU3RhdHVzLnRpbWVfc3RhbXAudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArIDM7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5UaGlzID0gJHNjb3BlLmRlcFNlbnNTdGF0dXMudGltZV9zdGFtcC50b1N0cmluZygpLnN1YnN0cmluZygwLCBpKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXR1cm5UaGlzO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9jYW5jZWxcclxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9yZXRyaWV2ZSB0aGUgc2Vuc29yXHJcbiAgICAgICAgICAgICRzY29wZS5yZXRyaWV2ZVMgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlYWxXaXRoVGltZVN0YW1wYjRTZW5kKCk7IC8vZm9yIHJldHJpZXZhbCBmb3IgcG9zdCBhbmQgZm9yIGNvbXBhcmlzb24gdG8gZGVwbG95ZWQgKGVuc3VyZSBpdCdzIGFmdGVyKVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkZXBTZW5UUyA9IGRlcFRpbWVTdGFtcGI0U2VuZCgpOy8vbmVlZCB0byBnZXQgZGVwIHN0YXR1cyBkYXRlIGluIHNhbWUgZm9ybWF0IGFzIHJldHJpZXZlZCB0byBjb21wYXJlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldFNlblRTID0gYW5ndWxhci5jb3B5KCRzY29wZS5hUmV0cmlldmFsLnRpbWVfc3RhbXAucmVwbGFjZSgvXFwsL2csIFwiXCIpKTsgLy9zdHVwaWQgY29tbWEgaW4gdGhlcmUgbWFraW5nIGl0IG5vdCB0aGUgc2FtZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXcgRGF0ZShyZXRTZW5UUykgPCBuZXcgRGF0ZShkZXBTZW5UUykpIHsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpeERhdGUgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGUgcmV0cmlldmFsIGRhdGUgbXVzdCBiZSBhZnRlciB0aGUgZGVwbG95ZWQgZGF0ZS48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXhEYXRlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVzZXQgdG8gbm93XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVJldHJpZXZhbC50aW1lX3N0YW1wID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVJldHJpZXZhbC50aW1lX3N0YW1wID0gZ2V0VGltZVpvbmVTdGFtcCgpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFSZXRyaWV2YWwudGltZV96b25lID0gZ2V0VGltZVpvbmVTdGFtcCgpWzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KCcjcmV0cmlldmFsRGF0ZScpLnRyaWdnZXIoJ2ZvY3VzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZFNlbnNvciA9IHt9OyB2YXIgY3JlYXRlUmV0U2VucyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBJTlNUUlVNRU5ULnVwZGF0ZSh7IGlkOiAkc2NvcGUuYVNlbnNvci5pbnN0cnVtZW50X2lkIH0sICRzY29wZS5hU2Vuc29yKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jcmVhdGUgaW5zdHJ1bWVudHN0YXR1cyB0b28gbmVlZDogc3RhdHVzX3R5cGVfaWQgYW5kIGluc3RydW1lbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRTZW5zb3IgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRTZW5zb3IuZGVwbG95bWVudFR5cGUgPSAkc2NvcGUuYVNlbnNvci5kZXBsb3ltZW50VHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRTZW5zb3IuaG91c2luZ1R5cGUgPSAkc2NvcGUuYVNlbnNvci5ob3VzaW5nVHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRTZW5zb3Iuc2Vuc29yQnJhbmQgPSAkc2NvcGUuYVNlbnNvci5zZW5zb3JCcmFuZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRTZW5zb3Iuc2Vuc29yVHlwZSA9ICRzY29wZS5hU2Vuc29yLnNlbnNvclR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkU2Vuc29yLmluc3RDb2xsZWN0aW9uID0gJHNjb3BlLmNvbGxlY3RDb25kTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGkuaWQgPT09ICRzY29wZS5hU2Vuc29yLmluc3RfY29sbGVjdGlvbl9pZDsgfSlbMF0uY29uZGl0aW9uO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIElOU1RSVU1FTlRfU1RBVFVTLnNhdmUoJHNjb3BlLmFSZXRyaWV2YWwpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHN0YXRSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYW55IHRhcGUgZG93bnM/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS50YXBlRG93blRhYmxlLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdCA9IDA7IHQgPCAkc2NvcGUudGFwZURvd25UYWJsZS5sZW5ndGg7IHQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNUYXBlID0gJHNjb3BlLnRhcGVEb3duVGFibGVbdF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzVGFwZS5pbnN0cnVtZW50X3N0YXR1c19pZCA9IHN0YXRSZXNwb25zZS5pbnN0cnVtZW50X3N0YXR1c19pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vL1BPU1QgSVQvLy9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9QX01FQVNVUkUuc2F2ZSh0aGlzVGFwZSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9idWlsZCB0aGUgY3JlYXRlZFNlbnNvciB0byBzZW5kIGJhY2sgYW5kIGFkZCB0byB0aGUgbGlzdCBwYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlUmV0U2VucyA9IHN0YXRSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVSZXRTZW5zLnN0YXR1cyA9IHN0YXRSZXNwb25zZS5zdGF0dXNfdHlwZV9pZCA9PSAyID8gJ1JldHJpZXZlZCcgOiAnTG9zdCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFNlbnNvci5pbnN0cnVtZW50X3N0YXR1cyA9IFtjcmVhdGVSZXRTZW5zLCB0aGlzU2Vuc29yLmluc3RydW1lbnRfc3RhdHVzWzBdXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFueXRoaW5nIHlvdSB3YW50IGNhbiBnbyBoZXJlIGFuZCB3aWxsIHNhZmVseSBiZSBydW4gb24gdGhlIG5leHQgZGlnZXN0LlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlNlbnNvciByZXRyaWV2ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZSA9ICdyZXRyaWV2ZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VuZEJhY2sgPSBbdXBkYXRlZFNlbnNvciwgc3RhdGVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZW5kQmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSAvL2VuZCByZXRyIGRhdGUgaXMgY29ycmVjdFxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIGlmIHZhbGlkXHJcbiAgICAgICAgICAgIH07Ly9lbmQgcmV0cmlldmVTXHJcbiAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICB9XSk7Ly9lbmQgc2Vuc29yUmV0cmlldmFsTW9kYWxDdHJsXHJcblxyXG4gICAgLy8gdmlldy9lZGl0IHJldHJpZXZlZCBzZW5zb3IgKGRlcGxveWVkIGluY2x1ZGVkIGhlcmUpIG1vZGFsXHJcbiAgICBNb2RhbENvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ2Z1bGxTZW5zb3JNb2RhbEN0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRmaWx0ZXInLCAnJHRpbWVvdXQnLCAnJGNvb2tpZXMnLCAnJGh0dHAnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCAnJHVpYk1vZGFsJywgJ1NFUlZFUl9VUkwnLCAnRklMRV9TVEFNUCcsICdhbGxEZXBEcm9wZG93bnMnLCAnYWdlbmN5TGlzdCcsICdTaXRlX0ZpbGVzJywgJ2FsbFN0YXR1c1R5cGVzJywgJ2FsbEluc3RDb2xsQ29uZCcsICdhbGxFdmVudHMnLCAnYWxsRGVwVHlwZXMnLCAndGhpc1NlbnNvcicsICdTZW5zb3JTaXRlJywgJ3NpdGVPUHMnLCAnYWxsTWVtYmVycycsICdJTlNUUlVNRU5UJywgJ0lOU1RSVU1FTlRfU1RBVFVTJywgJ0RBVEFfRklMRScsICdGSUxFJywgJ1NPVVJDRScsICdPUF9NRUFTVVJFJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkZmlsdGVyLCAkdGltZW91dCwgJGNvb2tpZXMsICRodHRwLCAkdWliTW9kYWxJbnN0YW5jZSwgJHVpYk1vZGFsLCBTRVJWRVJfVVJMLEZJTEVfU1RBTVAsIGFsbERlcERyb3Bkb3ducywgYWdlbmN5TGlzdCwgU2l0ZV9GaWxlcywgYWxsU3RhdHVzVHlwZXMsIGFsbEluc3RDb2xsQ29uZCwgYWxsRXZlbnRzLCBhbGxEZXBUeXBlcywgdGhpc1NlbnNvciwgU2Vuc29yU2l0ZSwgc2l0ZU9QcywgYWxsTWVtYmVycywgSU5TVFJVTUVOVCwgSU5TVFJVTUVOVF9TVEFUVVMsIERBVEFfRklMRSwgRklMRSwgU09VUkNFLCBPUF9NRUFTVVJFKSB7XHJcbiAgICAgICAgICAgIC8qYWxsU2Vuc29yVHlwZXMsIGFsbFNlbnNvckJyYW5kcywgYWxsSG91c2luZ1R5cGVzLCBhbGxTZW5zRGVwcyovXHJcbiAgICAgICAgICAgICRzY29wZS5zZXJ2ZXJVUkwgPSBTRVJWRVJfVVJMO1xyXG4gICAgICAgICAgICAkc2NvcGUuZnVsbFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlOyAvL0xvYWRpbmcuLi4gICBcclxuICAgICAgICAgICAgJHNjb3BlLnNlbnNvclR5cGVMaXN0ID0gYWxsRGVwRHJvcGRvd25zWzBdO1xyXG4gICAgICAgICAgICAkc2NvcGUuc2Vuc29yQnJhbmRMaXN0ID0gYWxsRGVwRHJvcGRvd25zWzFdO1xyXG4gICAgICAgICAgICAkc2NvcGUuaG91c2VUeXBlTGlzdCA9IGFsbERlcERyb3Bkb3duc1syXTtcclxuICAgICAgICAgICAgJHNjb3BlLmZpbGVUeXBlTGlzdCA9IGFsbERlcERyb3Bkb3duc1szXTsgLy91c2VkIGlmIGNyZWF0aW5nL2VkaXRpbmcgZGVwU2VucyBmaWxlXHJcbiAgICAgICAgICAgICRzY29wZS52ZXJ0RGF0dW1MaXN0ID0gYWxsRGVwRHJvcGRvd25zWzRdO1xyXG4gICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzID0gU2l0ZV9GaWxlcy5nZXRBbGxTaXRlRmlsZXMoKTtcclxuICAgICAgICAgICAgJHNjb3BlLnNlbnNvckZpbGVzID0gdGhpc1NlbnNvciAhPT0gXCJlbXB0eVwiID8gJHNjb3BlLmFsbFNGaWxlcy5maWx0ZXIoZnVuY3Rpb24gKHNmKSB7IHJldHVybiBzZi5pbnN0cnVtZW50X2lkID09IHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9pZDsgfSkgOiBbXTsvLyBob2xkZXIgZm9yIGh3bSBmaWxlcyBhZGRlZFxyXG4gICAgICAgICAgICAkc2NvcGUuc2Vuc0ltYWdlRmlsZXMgPSAkc2NvcGUuc2Vuc29yRmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChoZikgeyByZXR1cm4gaGYuZmlsZXR5cGVfaWQgPT09IDE7IH0pOyAvL2ltYWdlIGZpbGVzIGZvciBjYXJvdXNlbFxyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVGb3JtID0gZmFsc2U7IC8vaGlkZGVuIGZvcm0gdG8gYWRkIGZpbGUgdG8gc2Vuc29yXHJcbiAgICAgICAgICAgICRzY29wZS5zaG93TldJU0ZpbGVGb3JtID0gZmFsc2U7IC8vaGlkZGVuIGZvcm0gdG8gYWRkIG53aXMgZmlsZSB0byBzZW5zb3JcclxuICAgICAgICAgICAgJHNjb3BlLnNlbnNvckRhdGFOV0lTID0gZmFsc2U7IC8vaXMgdGhpcyBhIHJhaW4gZ2FnZSwgbWV0IHN0YXRpb24sIG9yIHJkZyBzZW5zb3IgLS0gaWYgc28sIGRhdGEgZmlsZSBtdXN0IGJlIGNyZWF0ZWQgcG9pbnRpbmcgdG8gbndpcyAod2UgZG9uJ3Qgc3RvcmUgYWN0dWFsIGZpbGUsIGp1c3QgbWV0YWRhdGEgd2l0aCBsaW5rKVxyXG4gICAgICAgICAgICAkc2NvcGUuY29sbGVjdENvbmRMaXN0ID0gYWxsSW5zdENvbGxDb25kO1xyXG4gICAgICAgICAgICAkc2NvcGUuT1BzUHJlc2VudCA9IHNpdGVPUHMubGVuZ3RoID4gMCA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgJHNjb3BlLkRFUE9Qc0ZvclRhcGVEb3duID0gYW5ndWxhci5jb3B5KHNpdGVPUHMpO1xyXG4gICAgICAgICAgICAkc2NvcGUuUkVUT1BzRm9yVGFwZURvd24gPSBhbmd1bGFyLmNvcHkoc2l0ZU9Qcyk7XHJcbiAgICAgICAgICAgICRzY29wZS5kZXBUeXBlTGlzdCA9IGFsbERlcFR5cGVzOyAvL2dldCBmcmVzaCB2ZXJzaW9uIHNvIG5vdCBtZXNzZWQgdXAgd2l0aCB0aGUgVGVtcGVyYXR1cmUgdHdpY2VcclxuICAgICAgICAgICAgJHNjb3BlLmZpbHRlcmVkRGVwbG95bWVudFR5cGVzID0gW107IC8vd2lsbCBiZSBwb3B1bGF0ZWQgYmFzZWQgb24gdGhlIHNlbnNvciB0eXBlIGNob3NlblxyXG4gICAgICAgICAgICAkc2NvcGUudGltZVpvbmVMaXN0ID0gWydVVEMnLCAnUFNUJywgJ01TVCcsICdDU1QnLCAnRVNUJ107XHJcbiAgICAgICAgICAgICRzY29wZS5zdGF0dXNUeXBlTGlzdCA9IGFsbFN0YXR1c1R5cGVzLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcy5zdGF0dXMgPT0gJ1JldHJpZXZlZCcgfHwgcy5zdGF0dXMgPT0gJ0xvc3QnOyB9KTtcclxuICAgICAgICAgICAgLy9kZWZhdWx0IHNldHRpbmcgZm9yIGludGVydmFsXHJcbiAgICAgICAgICAgICRzY29wZS5JbnRlcnZhbFR5cGUgPSB7IHR5cGU6ICdTZWNvbmRzJyB9O1xyXG4gICAgICAgICAgICAvL25nLXNob3cgZGV0ZXJtaW5lcyB3aGV0aGVyIHRoZXkgYXJlIGVkaXRpbmcgb3Igdmlld2luZyBkZXRhaWxzXHJcbiAgICAgICAgICAgICRzY29wZS52aWV3ID0geyBERVB2YWw6ICdkZXRhaWwnLCBSRVR2YWw6ICdkZXRhaWwnIH07XHJcbiAgICAgICAgICAgIC8vZ2V0IHRpbWV6b25lIGFuZCB0aW1lc3RhbXAgZm9yIHRoZWlyIHRpbWV6b25lIGZvciBzaG93aW5nLi4gcG9zdC9wdXQgd2lsbCBjb252ZXJ0IGl0IHRvIHV0Y1xyXG4gICAgICAgICAgICB2YXIgZ2V0VGltZVpvbmVTdGFtcCA9IGZ1bmN0aW9uIChkc2VudCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlbmRUaGlzID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgZDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZHNlbnQgIT09IHVuZGVmaW5lZCkgZCA9IG5ldyBEYXRlKGRzZW50KTtcclxuICAgICAgICAgICAgICAgIGVsc2UgZCA9IG5ldyBEYXRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIG9mZnNldCA9IChkLnRvU3RyaW5nKCkpLnN1YnN0cmluZygzNSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgem9uZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICBzd2l0Y2ggKG9mZnNldC5zdWJzdHIoMCwgMykpIHtcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiQ2VuXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHpvbmUgPSAnQ1NUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkVhc1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB6b25lID0gJ0VTVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJNb3VcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgem9uZSA9ICdNU1QnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiUGFjXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHpvbmUgPSAnUFNUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBzZW5kVGhpcyA9IFtkLCB6b25lXTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBzZW5kVGhpcztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vZm9ybWF0dGluZyBkYXRlIGFuZCB0aW1lIHByb3Blcmx5IGZvciBjaHJvbWUgYW5kIGZmXHJcbiAgICAgICAgICAgIHZhciBnZXREYXRlVGltZVBhcnRzID0gZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB0aGVEYXRlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzRGF0ZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzRGF0ZSA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgeSA9IGQuc3Vic3RyKDAsIDQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtID0gZC5zdWJzdHIoNSwgMikgLSAxOyAvL3N1YnRyYWN0IDEgZm9yIGluZGV4IHZhbHVlIChKYW51YXJ5IGlzIDApXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhID0gZC5zdWJzdHIoOCwgMik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGggPSBkLnN1YnN0cigxMSwgMik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pID0gZC5zdWJzdHIoMTQsIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWMgPSBkLnN1YnN0cigxNywgMik7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhlRGF0ZSA9IG5ldyBEYXRlKHksIG0sIGRhLCBoLCBtaSwgc2VjKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy90aGlzIGlzIGFscmVhZHkgYSBkYXRlLCByZXR1cm4gaXQgYmFja1xyXG4gICAgICAgICAgICAgICAgICAgIHRoZURhdGUgPSBkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoZURhdGU7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUudGhpc1NlbnNvclNpdGUgPSBTZW5zb3JTaXRlOyAkc2NvcGUudXNlclJvbGUgPSAkY29va2llcy5nZXQoJ3VzZXJzUm9sZScpO1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLnNlbnNvciA9IGFuZ3VsYXIuY29weSh0aGlzU2Vuc29yKTtcclxuICAgICAgICAgICAgJHNjb3BlLnNlbnNvckRhdGFOV0lTID0gKCgkc2NvcGUuc2Vuc29yLnNlbnNvcl90eXBlX2lkID09IDIgfHwgJHNjb3BlLnNlbnNvci5zZW5zb3JfdHlwZV9pZCA9PSA1KSB8fCAkc2NvcGUuc2Vuc29yLnNlbnNvcl90eXBlX2lkID09IDYpID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy9kZXBsb3kgcGFydCAvLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgJHNjb3BlLkRlcGxveWVkU2Vuc29yU3RhdCA9IGFuZ3VsYXIuY29weSh0aGlzU2Vuc29yLmluc3RydW1lbnRfc3RhdHVzLmZpbHRlcihmdW5jdGlvbiAoaW5zdCkgeyByZXR1cm4gaW5zdC5zdGF0dXMgPT09IFwiRGVwbG95ZWRcIjsgfSlbMF0pO1xyXG4gICAgICAgICAgICAkc2NvcGUuRGVwbG95ZWRTZW5zb3JTdGF0LnRpbWVfc3RhbXAgPSBnZXREYXRlVGltZVBhcnRzKCRzY29wZS5EZXBsb3llZFNlbnNvclN0YXQudGltZV9zdGFtcCk7IC8vdGhpcyBrZWVwcyBpdCBhcyB1dGMgaW4gZGlzcGxheVxyXG4gICAgICAgICAgICAvL2lmICgkc2NvcGUuRGVwbG95ZWRTZW5zb3JTdGF0LnZkYXR1bV9pZCAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAvLyAgICAkc2NvcGUuRGVwbG95ZWRTZW5zb3JTdGF0LnZkYXR1bU5hbWUgPSAkc2NvcGUudmVydERhdHVtTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHZkKSB7IHJldHVybiB2ZC5kYXR1bV9pZCA9PSAkc2NvcGUuRGVwbG95ZWRTZW5zb3JTdGF0LnZkYXR1bV9pZDsgfSlbMF0uZGF0dW1fYWJicmV2aWF0aW9uO1xyXG4gICAgICAgICAgICAkc2NvcGUuRGVwbG95ZXIgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT09ICRzY29wZS5EZXBsb3llZFNlbnNvclN0YXQubWVtYmVyX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgJHNjb3BlLkRFUHJlbW92ZU9QTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAkc2NvcGUuREVQdGFwZURvd25UYWJsZSA9IFtdOyAvL2hvbGRlciBvZiB0YXBlZG93biBPUF9NRUFTVVJFTUVOVFNcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5ERVBPUGNob3NlbiA9IGZ1bmN0aW9uIChERVBvcENob3Nlbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9wSSA9ICRzY29wZS5ERVBPUHNGb3JUYXBlRG93bi5tYXAoZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8ub2JqZWN0aXZlX3BvaW50X2lkOyB9KS5pbmRleE9mKERFUG9wQ2hvc2VuLm9iamVjdGl2ZV9wb2ludF9pZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoREVQb3BDaG9zZW4uc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3RoZXkgcGlja2VkIGFuIE9QIHRvIHVzZSBmb3IgdGFwZWRvd25cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuREVQT1BNZWFzdXJlID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRFUE9QTWVhc3VyZS5vcF9uYW1lID0gREVQb3BDaG9zZW4ubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuREVQT1BNZWFzdXJlLmVsZXZhdGlvbiA9IERFUG9wQ2hvc2VuLmVsZXZfZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRFUE9QTWVhc3VyZS5WZGF0dW0gPSAkc2NvcGUudmVydERhdHVtTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHZkKSB7IHJldHVybiB2ZC5kYXR1bV9pZCA9PSBERVBvcENob3Nlbi52ZGF0dW1faWQ7IH0pWzBdLmRhdHVtX2FiYnJldmlhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuREVQT1BNZWFzdXJlLm9iamVjdGl2ZV9wb2ludF9pZCA9IERFUG9wQ2hvc2VuLm9iamVjdGl2ZV9wb2ludF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS5ERVB0YXBlRG93blRhYmxlLnB1c2goJHNjb3BlLkRFUE9QTWVhc3VyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFRhcGVDb3B5LnB1c2goJHNjb3BlLkRFUE9QTWVhc3VyZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFN0dWZmQ29weVsxXS52ZGF0dW1faWQgPSBERVBvcENob3Nlbi52ZGF0dW1faWQ7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdGhleSB1bmNoZWNrZWQgdGhlIG9wIHRvIHJlbW92ZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vYXNrIHRoZW0gYXJlIHRoZXkgc3VyZT9cclxuICAgICAgICAgICAgICAgICAgICB2YXIgREVQcmVtb3ZlT1BNZWFzID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5SZW1vdmUgT1AgTWVhc3VyZTwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5BcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gcmVtb3ZlIHRoaXMgT1AgTWVhc3VyZW1lbnQgZnJvbSB0aGlzIGRlcGxveWVkIHNlbnNvcj88L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cIkRFUG9rKClcIj5PSzwvYnV0dG9uPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cIkRFUGNhbmNlbCgpXCI+Q2FuY2VsPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRFUG9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCdyZW1vdmUnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuREVQY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCdjYW5jZWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgREVQcmVtb3ZlT1BNZWFzLnJlc3VsdC50aGVuKGZ1bmN0aW9uICh5ZXNPck5vKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh5ZXNPck5vID09ICdyZW1vdmUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FkZCB0byByZW1vdmUgaXQgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIERFUHRhcGVEb3duVG9SZW1vdmUgPSAkc2NvcGUuZGVwVGFwZUNvcHkuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLm9iamVjdGl2ZV9wb2ludF9pZCA9PSBERVBvcENob3Nlbi5vYmplY3RpdmVfcG9pbnRfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIERFUHRJbmQgPSAkc2NvcGUuZGVwVGFwZUNvcHkubWFwKGZ1bmN0aW9uIChvKSB7IHJldHVybiBvLm9iamVjdGl2ZV9wb2ludF9pZDsgfSkuaW5kZXhPZihERVB0YXBlRG93blRvUmVtb3ZlLm9iamVjdGl2ZV9wb2ludF9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoREVQdGFwZURvd25Ub1JlbW92ZS5vcF9tZWFzdXJlbWVudHNfaWQgIT09IHVuZGVmaW5lZCkgJHNjb3BlLkRFUHJlbW92ZU9QTGlzdC5wdXNoKERFUHRhcGVEb3duVG9SZW1vdmUub3BfbWVhc3VyZW1lbnRzX2lkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBUYXBlQ29weS5zcGxpY2UoREVQdEluZCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmRlcFRhcGVDb3B5Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBTdHVmZkNvcHlbMV0udmRhdHVtX2lkID0gMDsgJHNjb3BlLmRlcFN0dWZmQ29weVsxXS5nc19lbGV2YXRpb24gPSAnJzsgJHNjb3BlLmRlcFN0dWZmQ29weVsxXS53c19lbGV2YXRpb24gPSAnJzsgJHNjb3BlLmRlcFN0dWZmQ29weVsxXS5zZW5zb3JfZWxldmF0aW9uID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25ldmVyIG1pbmQsIG1ha2UgaXQgc2VsZWN0ZWQgYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ERVBPUHNGb3JUYXBlRG93bltvcEldLnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvL29ubHkgY2hlY2sgZm9yIGluc3RydW1lbnQgb3BNZWFzdXJlcyBpZiB0aGVyZSBhcmUgYW55IG9wcyBvbiB0aGlzIHNpdGUgdG8gYmVnaW4gd2l0aC5cclxuICAgICAgICAgICAgaWYgKCRzY29wZS5PUHNQcmVzZW50KSB7XHJcbiAgICAgICAgICAgICAgICBPUF9NRUFTVVJFLmdldEluc3RTdGF0T1BNZWFzdXJlcyh7IGluc3RydW1lbnRTdGF0dXNJZDogJHNjb3BlLkRlcGxveWVkU2Vuc29yU3RhdC5pbnN0cnVtZW50X3N0YXR1c19pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChERVByZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHIgPSAwOyByIDwgREVQcmVzcG9uc2UubGVuZ3RoOyByKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIERFUHNlbnNNZWFzdXJlcyA9IERFUHJlc3BvbnNlW3JdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgd2hpY2hPUCA9IHNpdGVPUHMuZmlsdGVyKGZ1bmN0aW9uIChvcCkgeyByZXR1cm4gb3Aub2JqZWN0aXZlX3BvaW50X2lkID09IERFUHJlc3BvbnNlW3JdLm9iamVjdGl2ZV9wb2ludF9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERFUHNlbnNNZWFzdXJlcy5lbGV2YXRpb24gPSB3aGljaE9QLmVsZXZfZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERFUHNlbnNNZWFzdXJlcy5WZGF0dW0gPSAkc2NvcGUudmVydERhdHVtTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHZkKSB7IHJldHVybiB2ZC5kYXR1bV9pZCA9PSB3aGljaE9QLnZkYXR1bV9pZDsgfSlbMF0uZGF0dW1fYWJicmV2aWF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBERVBzZW5zTWVhc3VyZXMub3BfbmFtZSA9ICRzY29wZS5ERVBPUHNGb3JUYXBlRG93bi5maWx0ZXIoZnVuY3Rpb24gKG9wKSB7IHJldHVybiBvcC5vYmplY3RpdmVfcG9pbnRfaWQgPT0gREVQcmVzcG9uc2Vbcl0ub2JqZWN0aXZlX3BvaW50X2lkOyB9KVswXS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuREVQdGFwZURvd25UYWJsZS5wdXNoKERFUHNlbnNNZWFzdXJlcyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vZ28gdGhyb3VnaCBPUHNGb3JUYXBlRG93biBhbmQgYWRkIHNlbGVjdGVkIFByb3BlcnR5LlxyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLkRFUE9Qc0ZvclRhcGVEb3duLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZm9yIGVhY2ggb25lLCBpZiByZXNwb25zZSBoYXMgdGhpcyBpZCwgYWRkICdzZWxlY3RlZDp0cnVlJyBlbHNlIGFkZCAnc2VsZWN0ZWQ6ZmFsc2UnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgREVQcmVzcG9uc2UubGVuZ3RoOyB5KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChERVByZXNwb25zZVt5XS5vYmplY3RpdmVfcG9pbnRfaWQgPT0gJHNjb3BlLkRFUE9Qc0ZvclRhcGVEb3duW2ldLm9iamVjdGl2ZV9wb2ludF9pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ERVBPUHNGb3JUYXBlRG93bltpXS5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9IERFUHJlc3BvbnNlLmxlbmd0aDsgLy9lbnN1cmVzIGl0IGRvZXNuJ3Qgc2V0IGl0IGFzIGZhbHNlIGFmdGVyIHNldHRpbmcgaXQgYXMgdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRFUE9Qc0ZvclRhcGVEb3duW2ldLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKERFUHJlc3BvbnNlLmxlbmd0aCA9PT0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ERVBPUHNGb3JUYXBlRG93bltpXS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvL2VuZCBpZiB0aGlzU2l0ZUhvdXNpbmdzICE9IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy9yZXRyaWV2ZSBwYXJ0IC8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgICAgICAkc2NvcGUuUmV0cmlldmVkU2Vuc29yU3RhdCA9IGFuZ3VsYXIuY29weSh0aGlzU2Vuc29yLmluc3RydW1lbnRfc3RhdHVzLmZpbHRlcihmdW5jdGlvbiAoaW5zdCkgeyByZXR1cm4gaW5zdC5zdGF0dXMgPT09IFwiUmV0cmlldmVkXCI7IH0pWzBdKTtcclxuICAgICAgICAgICAgLy9pZiB0aGVyZSBpc24ndCBvbmUgLi4gdGhlbiB0aGlzIGlzIGEgbG9zdCBzdGF0dXNcclxuICAgICAgICAgICAgaWYgKCRzY29wZS5SZXRyaWV2ZWRTZW5zb3JTdGF0ID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5SZXRyaWV2ZWRTZW5zb3JTdGF0ID0gYW5ndWxhci5jb3B5KHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9zdGF0dXMuZmlsdGVyKGZ1bmN0aW9uIChpbnN0KSB7IHJldHVybiBpbnN0LnN0YXR1cyA9PT0gXCJMb3N0XCI7IH0pWzBdKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5tb3N0UmVjZW50U3RhdHVzID0gXCJMb3N0XCI7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubW9zdFJlY2VudFN0YXR1cyA9IFwiUmV0cmlldmVkXCI7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCRzY29wZS5SZXRyaWV2ZWRTZW5zb3JTdGF0LnZkYXR1bV9pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuUmV0cmlldmVkU2Vuc29yU3RhdC52ZGF0dW1OYW1lID0gJHNjb3BlLnZlcnREYXR1bUxpc3QuZmlsdGVyKGZ1bmN0aW9uICh2ZCkgeyByZXR1cm4gdmQuZGF0dW1faWQgPT0gJHNjb3BlLlJldHJpZXZlZFNlbnNvclN0YXQudmRhdHVtX2lkOyB9KVswXS5kYXR1bV9hYmJyZXZpYXRpb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJHNjb3BlLlJldHJpZXZlZFNlbnNvclN0YXQudGltZV9zdGFtcCA9IGdldERhdGVUaW1lUGFydHMoJHNjb3BlLlJldHJpZXZlZFNlbnNvclN0YXQudGltZV9zdGFtcCk7IC8vdGhpcyBrZWVwcyBpdCBhcyB1dGMgaW4gZGlzcGxheVxyXG4gICAgICAgICAgICAkc2NvcGUuUmV0cmlldmVyID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09PSAkc2NvcGUuUmV0cmlldmVkU2Vuc29yU3RhdC5tZW1iZXJfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAkc2NvcGUuUkVUcmVtb3ZlT1BMaXN0ID1bXTtcclxuICAgICAgICAgICAgJHNjb3BlLlJFVHRhcGVEb3duVGFibGUgPVtdOyAvL2hvbGRlciBvZiB0YXBlZG93biBPUF9NRUFTVVJFTUVOVFNcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5SRVRPUGNob3NlbiA9IGZ1bmN0aW9uIChSRVRvcENob3Nlbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIG9wSSA9ICRzY29wZS5SRVRPUHNGb3JUYXBlRG93bi5tYXAoZnVuY3Rpb24gKG8pIHsgcmV0dXJuIG8ub2JqZWN0aXZlX3BvaW50X2lkOyB9KS5pbmRleE9mKFJFVG9wQ2hvc2VuLm9iamVjdGl2ZV9wb2ludF9pZCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoUkVUb3BDaG9zZW4uc2VsZWN0ZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3RoZXkgcGlja2VkIGFuIE9QIHRvIHVzZSBmb3IgdGFwZWRvd25cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUkVUT1BNZWFzdXJlID0geyB9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5SRVRPUE1lYXN1cmUub3BfbmFtZSA9IFJFVG9wQ2hvc2VuLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJFVE9QTWVhc3VyZS5lbGV2YXRpb24gPSBSRVRvcENob3Nlbi5lbGV2X2Z0O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5SRVRPUE1lYXN1cmUuVmRhdHVtID0gJHNjb3BlLnZlcnREYXR1bUxpc3QuZmlsdGVyKGZ1bmN0aW9uICh2ZCkgeyByZXR1cm4gdmQuZGF0dW1faWQgPT0gUkVUb3BDaG9zZW4udmRhdHVtX2lkO30pWzBdLmRhdHVtX2FiYnJldmlhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUkVUT1BNZWFzdXJlLm9iamVjdGl2ZV9wb2ludF9pZCA9IFJFVG9wQ2hvc2VuLm9iamVjdGl2ZV9wb2ludF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmV0VGFwZUNvcHkucHVzaCgkc2NvcGUuUkVUT1BNZWFzdXJlKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmV0U3R1ZmZDb3B5WzFdLnZkYXR1bV9pZCA9IFJFVG9wQ2hvc2VuLnZkYXR1bV9pZDtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy90aGV5IHVuY2hlY2tlZCB0aGUgb3AgdG8gcmVtb3ZlXHJcbiAgICAgICAgICAgICAgICAgICAgLy9hc2sgdGhlbSBhcmUgdGhleSBzdXJlP1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBSRVRyZW1vdmVPUE1lYXMgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPlJlbW92ZSBPUCBNZWFzdXJlPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+QXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHJlbW92ZSB0aGlzIE9QIE1lYXN1cmVtZW50IGZyb20gdGhpcyByZXRyaWV2ZWQgc2Vuc29yPzwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJSRVRvaygpXCI+T0s8L2J1dHRvbj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJSRVRjYW5jZWwoKVwiPkNhbmNlbDwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5SRVRvayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgncmVtb3ZlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJFVGNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgnY2FuY2VsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIFJFVHJlbW92ZU9QTWVhcy5yZXN1bHQudGhlbihmdW5jdGlvbiAoeWVzT3JObykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoeWVzT3JObyA9PSAncmVtb3ZlJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hZGQgdG8gcmVtb3ZlIGl0IGxpc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBSRVR0YXBlRG93blRvUmVtb3ZlID0gJHNjb3BlLnJldFRhcGVDb3B5LmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5vYmplY3RpdmVfcG9pbnRfaWQgPT0gUkVUb3BDaG9zZW4ub2JqZWN0aXZlX3BvaW50X2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBSRVR0SW5kID0gJHNjb3BlLnJldFRhcGVDb3B5Lm1hcChmdW5jdGlvbiAobykgeyByZXR1cm4gby5vYmplY3RpdmVfcG9pbnRfaWQ7IH0pLmluZGV4T2YoUkVUdGFwZURvd25Ub1JlbW92ZS5vYmplY3RpdmVfcG9pbnRfaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJFVHJlbW92ZU9QTGlzdC5wdXNoKFJFVHRhcGVEb3duVG9SZW1vdmUub3BfbWVhc3VyZW1lbnRzX2lkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXRUYXBlQ29weS5zcGxpY2UoUkVUdEluZCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnJldFRhcGVDb3B5Lmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXRTdHVmZkNvcHlbMV0udmRhdHVtX2lkID0gMDsgJHNjb3BlLnJldFN0dWZmQ29weVsxXS5nc19lbGV2YXRpb24gPSAnJzsgJHNjb3BlLnJldFN0dWZmQ29weVsxXS53c19lbGV2YXRpb24gPSAnJzsgJHNjb3BlLnJldFN0dWZmQ29weVsxXS5zZW5zb3JfZWxldmF0aW9uID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25ldmVyIG1pbmQsIG1ha2UgaXQgc2VsZWN0ZWQgYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5SRVRPUHNGb3JUYXBlRG93bltvcEldLnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy9vbmx5IGNhcmUgYWJvdXQgb3AgTWVhc3VyZXMgaWYgdGhlcmUgYXJlIG9wcyBvbiB0aGlzIHNpdGVcclxuICAgICAgICAgICAgaWYgKCRzY29wZS5PUHNQcmVzZW50KSB7XHJcbiAgICAgICAgICAgICAgICBPUF9NRUFTVVJFLmdldEluc3RTdGF0T1BNZWFzdXJlcyh7IGluc3RydW1lbnRTdGF0dXNJZDogJHNjb3BlLlJldHJpZXZlZFNlbnNvclN0YXQuaW5zdHJ1bWVudF9zdGF0dXNfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoUkVUcmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gMDsgciA8IFJFVHJlc3BvbnNlLmxlbmd0aDsgcisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBSRVRzZW5zTWVhc3VyZXMgPSBSRVRyZXNwb25zZVtyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdoaWNoT1AgPSBzaXRlT1BzLmZpbHRlcihmdW5jdGlvbiAob3ApIHsgcmV0dXJuIG9wLm9iamVjdGl2ZV9wb2ludF9pZCA9PSBSRVRyZXNwb25zZVtyXS5vYmplY3RpdmVfcG9pbnRfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBSRVRzZW5zTWVhc3VyZXMuZWxldmF0aW9uID0gd2hpY2hPUC5lbGV2X2Z0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBSRVRzZW5zTWVhc3VyZXMuVmRhdHVtID0gJHNjb3BlLnZlcnREYXR1bUxpc3QuZmlsdGVyKGZ1bmN0aW9uICh2ZCkgeyByZXR1cm4gdmQuZGF0dW1faWQgPT0gd2hpY2hPUC52ZGF0dW1faWQ7IH0pWzBdLmRhdHVtX2FiYnJldmlhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUkVUc2Vuc01lYXN1cmVzLm9wX25hbWUgPSAkc2NvcGUuUkVUT1BzRm9yVGFwZURvd24uZmlsdGVyKGZ1bmN0aW9uIChvcCkgeyByZXR1cm4gb3Aub2JqZWN0aXZlX3BvaW50X2lkID09IFJFVHJlc3BvbnNlW3JdLm9iamVjdGl2ZV9wb2ludF9pZDsgfSlbMF0ubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJFVHRhcGVEb3duVGFibGUucHVzaChSRVRzZW5zTWVhc3VyZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvL2dvIHRocm91Z2ggT1BzRm9yVGFwZURvd24gYW5kIGFkZCBzZWxlY3RlZCBQcm9wZXJ0eS5cclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRzY29wZS5SRVRPUHNGb3JUYXBlRG93bi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2ZvciBlYWNoIG9uZSwgaWYgcmVzcG9uc2UgaGFzIHRoaXMgaWQsIGFkZCAnc2VsZWN0ZWQ6dHJ1ZScgZWxzZSBhZGQgJ3NlbGVjdGVkOmZhbHNlJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB5ID0gMDsgeSA8IFJFVHJlc3BvbnNlLmxlbmd0aDsgeSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoUkVUcmVzcG9uc2VbeV0ub2JqZWN0aXZlX3BvaW50X2lkID09ICRzY29wZS5SRVRPUHNGb3JUYXBlRG93bltpXS5vYmplY3RpdmVfcG9pbnRfaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUkVUT1BzRm9yVGFwZURvd25baV0uc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHkgPSBSRVRyZXNwb25zZS5sZW5ndGg7IC8vZW5zdXJlcyBpdCBkb2Vzbid0IHNldCBpdCBhcyBmYWxzZSBhZnRlciBzZXR0aW5nIGl0IGFzIHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5SRVRPUHNGb3JUYXBlRG93bltpXS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChSRVRyZXNwb25zZS5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUkVUT1BzRm9yVGFwZURvd25baV0uc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJHNjb3BlLkV2ZW50TmFtZSA9IGFsbEV2ZW50cy5maWx0ZXIoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUuZXZlbnRfaWQgPT09ICRzY29wZS5zZW5zb3IuZXZlbnRfaWQ7IH0pWzBdLmV2ZW50X25hbWU7XHJcblxyXG4gICAgICAgICAgICAvL2FjY29yZGlvbiBvcGVuL2Nsb3NlIGdseXBoc1xyXG4gICAgICAgICAgICAkc2NvcGUucyA9IHsgZGVwT3BlbjogZmFsc2UsIHJldE9wZW46IHRydWUsIHNGaWxlT3BlbjogZmFsc2UsIE5XSVNGaWxlT3BlbjogZmFsc2UgfTtcclxuXHJcbiAgICAgICAgICAgIC8vI3JlZ2lvbiBkYXRldGltZXBpY2tlclxyXG4gICAgICAgICAgICAkc2NvcGUuZGF0ZU9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydGluZ0RheTogMSxcclxuICAgICAgICAgICAgICAgIHNob3dXZWVrczogZmFsc2VcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgJHNjb3BlLmRhdGVwaWNrcnMgPSB7IH07XHJcbiAgICAgICAgICAgICRzY29wZS5vcGVuID0gZnVuY3Rpb24gKCRldmVudCwgd2hpY2gpIHtcclxuICAgICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRhdGVwaWNrcnNbd2hpY2hdPSB0cnVlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICAgICAgICAgIC8vIGlzIGludGVydmFsIGlzIG51bWJlclxyXG4gICAgICAgICAgICAkc2NvcGUuaXNOdW0gPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGhlRXZlbnQgPSBldnQgfHwgd2luZG93LmV2ZW50O1xyXG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IHRoZUV2ZW50LmtleUNvZGUgfHwgdGhlRXZlbnQud2hpY2g7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9IDQ2ICYmIGtleSAhPSA0NSAmJiBrZXkgPiAzMSAmJiAoa2V5IDwgNDggfHwga2V5ID4gNTcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhlRXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhlRXZlbnQucHJldmVudERlZmF1bHQpIHRoZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2dldCBkZXBsb3ltZW50IHR5cGVzIGZvciBzZW5zb3IgdHlwZSBjaG9zZW5cclxuICAgICAgICAgICAgJHNjb3BlLmdldERlcFR5cGVzID0gZnVuY3Rpb24gKHNlbnNUeXBlKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsdGVyZWREZXBsb3ltZW50VHlwZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIHZhciBtYXRjaGluZ1NlbnNEZXBsaXN0ID0gJHNjb3BlLnNlbnNvclR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoc2QpIHsgcmV0dXJuIHNkLnNlbnNvcl90eXBlX2lkID09IHNlbnNUeXBlLnNlbnNvcl90eXBlX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgIC8vdGhpcyBpcyAxIHNlbnNvclR5cGUgd2l0aCBpbm5lciBsaXN0IG9mICAuZGVwbG95bWVudHR5cGVzXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsdGVyZWREZXBsb3ltZW50VHlwZXMgPSBtYXRjaGluZ1NlbnNEZXBsaXN0LmRlcGxveW1lbnR0eXBlcztcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5nZXREZXBUeXBlcygkc2NvcGUuc2Vuc29yKTsgLy9jYWxsIGl0IGZpcnN0IHRpbWUgdGhyb3VnaFxyXG5cclxuICAgICAgICAgICAgLy9jYW5jZWxcclxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gYW55dGhpbmcgeW91IHdhbnQgY2FuIGdvIGhlcmUgYW5kIHdpbGwgc2FmZWx5IGJlIHJ1biBvbiB0aGUgbmV4dCBkaWdlc3QuICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZW5kQmFjayA9IFt0aGlzU2Vuc29yXTtcclxuICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZW5kQmFjayk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vRG9uZSBkdXJpbmcgZWRpdCBQVVQgdG8gZW5zdXJlIHRpbWV6b25lIGRvZXNuJ3QgYWZmZWN0IGRiIHRpbWUgdmFsdWUgKGlzIGl0IFVUQyBvciBsb2NhbCB0aW1lLi5tYWtlIHN1cmUgaXQgc3RheXMgVVRDKVxyXG4gICAgICAgICAgICB2YXIgZGVhbFdpdGhUaW1lU3RhbXBiNFNlbmQgPSBmdW5jdGlvbiAodykge1xyXG4gICAgICAgICAgICAgICAgLy9kZXBsb3llZCBvciByZXRyaWV2ZWQ/PyAgICAgIFxyXG4gICAgICAgICAgICAgICAgdmFyIHV0Y0RhdGVUaW1lOyB2YXIgaTtcclxuICAgICAgICAgICAgICAgIGlmICh3ID09PSAnZGVwbG95ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jaGVjayBhbmQgc2VlIGlmIHRoZXkgYXJlIG5vdCB1c2luZyBVVENcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmRlcFN0dWZmQ29weVsxXS50aW1lX3pvbmUgIT0gXCJVVENcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnZlcnQgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRjRGF0ZVRpbWUgPSBuZXcgRGF0ZSgkc2NvcGUuZGVwU3R1ZmZDb3B5WzFdLnRpbWVfc3RhbXApLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBTdHVmZkNvcHlbMV0udGltZV9zdGFtcCA9IHV0Y0RhdGVUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwU3R1ZmZDb3B5WzFdLnRpbWVfem9uZSA9ICdVVEMnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlICdHTVQnIGlzIHRhY2tlZCBvbiBzbyBpdCBkb2Vzbid0IHRyeSB0byBhZGQgaHJzIHRvIG1ha2UgdGhlIGFscmVhZHkgdXRjIGEgdXRjIGluIGRiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAkc2NvcGUuZGVwU3R1ZmZDb3B5WzFdLnRpbWVfc3RhbXAudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFN0dWZmQ29weVsxXS50aW1lX3N0YW1wID0gJHNjb3BlLmRlcFN0dWZmQ29weVsxXS50aW1lX3N0YW1wLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jaGVjayBhbmQgc2VlIGlmIHRoZXkgYXJlIG5vdCB1c2luZyBVVENcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnJldFN0dWZmQ29weVsxXS50aW1lX3pvbmUgIT0gXCJVVENcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnZlcnQgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXRjRGF0ZVRpbWUgPSBuZXcgRGF0ZSgkc2NvcGUucmV0U3R1ZmZDb3B5WzFdLnRpbWVfc3RhbXApLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZXRTdHVmZkNvcHlbMV0udGltZV9zdGFtcCA9IHV0Y0RhdGVUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmV0U3R1ZmZDb3B5WzFdLnRpbWVfem9uZSA9ICdVVEMnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlICdHTVQnIGlzIHRhY2tlZCBvbiBzbyBpdCBkb2Vzbid0IHRyeSB0byBhZGQgaHJzIHRvIG1ha2UgdGhlIGFscmVhZHkgdXRjIGEgdXRjIGluIGRiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGkgPSAkc2NvcGUucmV0U3R1ZmZDb3B5WzFdLnRpbWVfc3RhbXAudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJldFN0dWZmQ29weVsxXS50aW1lX3N0YW1wID0gJHNjb3BlLnJldFN0dWZmQ29weVsxXS50aW1lX3N0YW1wLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIGkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vI3JlZ2lvbiBkZXBsb3kgZWRpdFxyXG4gICAgICAgICAgICAvL2VkaXQgYnV0dG9uIGNsaWNrZWQuIG1ha2UgY29weSBvZiBkZXBsb3llZCBpbmZvIFxyXG4gICAgICAgICAgICAkc2NvcGUud2FubmFFZGl0RGVwID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZpZXcuREVQdmFsID0gJ2VkaXQnO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlcFN0dWZmQ29weSA9W2FuZ3VsYXIuY29weSgkc2NvcGUuc2Vuc29yKSwgYW5ndWxhci5jb3B5KCRzY29wZS5EZXBsb3llZFNlbnNvclN0YXQpXTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZXBUYXBlQ29weSA9IGFuZ3VsYXIuY29weSgkc2NvcGUuREVQdGFwZURvd25UYWJsZSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAgICAgLy9zYXZlIERlcGxveWVkIHNlbnNvciBpbmZvXHJcbiAgICAgICAgICAgICRzY29wZS5zYXZlRGVwbG95ZWQgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVkU2Vuc29yID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZWRTZW5TdGF0ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgLy9zZWUgaWYgdGhleSB1c2VkIE1pbnV0ZXMgb3Igc2Vjb25kcyBmb3IgaW50ZXJ2YWwuIG5lZWQgdG8gc3RvcmUgaW4gc2Vjb25kc1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuSW50ZXJ2YWxUeXBlLnR5cGUgPT0gXCJNaW51dGVzXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBTdHVmZkNvcHlbMF0uaW50ZXJ2YWwgPSAkc2NvcGUuZGVwU3R1ZmZDb3B5WzBdLmludGVydmFsICogNjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYWxXaXRoVGltZVN0YW1wYjRTZW5kKCdkZXBsb3llZCcpOyAvL1VUQyBvciBsb2NhbD8gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBJTlNUUlVNRU5ULnVwZGF0ZSh7IGlkOiAkc2NvcGUuZGVwU3R1ZmZDb3B5WzBdLmluc3RydW1lbnRfaWQgfSwgJHNjb3BlLmRlcFN0dWZmQ29weVswXSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRTZW5zb3IgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRTZW5zb3IuZGVwbG95bWVudFR5cGUgPSAkc2NvcGUuZGVwU3R1ZmZDb3B5WzBdLmRlcGxveW1lbnRfdHlwZV9pZCA+IDAgPyAkc2NvcGUuZGVwVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmRlcGxveW1lbnRfdHlwZV9pZCA9PT0gJHNjb3BlLmRlcFN0dWZmQ29weVswXS5kZXBsb3ltZW50X3R5cGVfaWQ7IH0pWzBdLm1ldGhvZCA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFNlbnNvci5ob3VzaW5nVHlwZSA9ICRzY29wZS5kZXBTdHVmZkNvcHlbMF0uaG91c2luZ190eXBlX2lkID4gMCA/ICRzY29wZS5ob3VzZVR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoaCkgeyByZXR1cm4gaC5ob3VzaW5nX3R5cGVfaWQgPT09ICRzY29wZS5kZXBTdHVmZkNvcHlbMF0uaG91c2luZ190eXBlX2lkOyB9KVswXS50eXBlX25hbWUgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRTZW5zb3Iuc2Vuc29yQnJhbmQgPSAkc2NvcGUuc2Vuc29yQnJhbmRMaXN0LmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcy5zZW5zb3JfYnJhbmRfaWQgPT09ICRzY29wZS5kZXBTdHVmZkNvcHlbMF0uc2Vuc29yX2JyYW5kX2lkOyB9KVswXS5icmFuZF9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFNlbnNvci5zZW5zb3JUeXBlID0gJHNjb3BlLnNlbnNvclR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5zZW5zb3JfdHlwZV9pZCA9PT0gJHNjb3BlLmRlcFN0dWZmQ29weVswXS5zZW5zb3JfdHlwZV9pZDsgfSlbMF0uc2Vuc29yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFNlbnNvci5pbnN0Q29sbGVjdGlvbiA9ICRzY29wZS5jb2xsZWN0Q29uZExpc3QuZmlsdGVyKGZ1bmN0aW9uIChpKSB7IHJldHVybiBpLmlkID09PSAkc2NvcGUuZGVwU3R1ZmZDb3B5WzBdLmluc3RfY29sbGVjdGlvbl9pZDsgfSlbMF0uY29uZGl0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSU5TVFJVTUVOVF9TVEFUVVMudXBkYXRlKHsgaWQ6ICRzY29wZS5kZXBTdHVmZkNvcHlbMV0uaW5zdHJ1bWVudF9zdGF0dXNfaWQgfSwgJHNjb3BlLmRlcFN0dWZmQ29weVsxXSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoc3RhdFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9kZWFsIHdpdGggdGFwZWRvd25zLiByZW1vdmUvYWRkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcnQgPSAwOyBydCA8ICRzY29wZS5ERVByZW1vdmVPUExpc3QubGVuZ3RoOyBydCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBERVBpZFRvUmVtb3ZlID0gJHNjb3BlLkRFUHJlbW92ZU9QTGlzdFtydF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9QX01FQVNVUkUuZGVsZXRlKHsgaWQ6IERFUGlkVG9SZW1vdmUgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ERVB0YXBlRG93blRhYmxlID0gJHNjb3BlLmRlcFRhcGVDb3B5Lmxlbmd0aCA+IDAgPyBbXSA6ICRzY29wZS5ERVB0YXBlRG93blRhYmxlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGF0ID0gMDsgYXQgPCAkc2NvcGUuZGVwVGFwZUNvcHkubGVuZ3RoOyBhdCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBERVB0aGlzVGFwZSA9ICRzY29wZS5kZXBUYXBlQ29weVthdF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChERVB0aGlzVGFwZS5vcF9tZWFzdXJlbWVudHNfaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9leGlzdGluZywgcHV0IGluIGNhc2UgdGhleSBjaGFuZ2VkIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUF9NRUFTVVJFLnVwZGF0ZSh7IGlkOiBERVB0aGlzVGFwZS5vcF9tZWFzdXJlbWVudHNfaWQgfSwgREVQdGhpc1RhcGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHRhcGVSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcGVSZXNwb25zZS5vcF9uYW1lID0gREVQdGhpc1RhcGUub3BfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0YXBlUmVzcG9uc2UuVmRhdHVtID0gREVQdGhpc1RhcGUuVmRhdHVtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ERVB0YXBlRG93blRhYmxlLnB1c2godGFwZVJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9uZXcgb25lIGFkZGVkLCBwb3N0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBERVB0aGlzVGFwZS5pbnN0cnVtZW50X3N0YXR1c19pZCA9IHN0YXRSZXNwb25zZS5pbnN0cnVtZW50X3N0YXR1c19pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9QX01FQVNVUkUuc2F2ZShERVB0aGlzVGFwZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAodGFwZVJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFwZVJlc3BvbnNlLm9wX25hbWUgPSBERVB0aGlzVGFwZS5vcF9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRhcGVSZXNwb25zZS5WZGF0dW0gPSBERVB0aGlzVGFwZS5WZGF0dW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRFUHRhcGVEb3duVGFibGUucHVzaCh0YXBlUmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFNlblN0YXQgPSBzdGF0UmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFNlblN0YXQuc3RhdHVzID0gXCJEZXBsb3llZFwiOyAvL2Nhbid0IGNoYW5nZSBzdGF0dXMgb24gYSBkZXBsb3llZCBlZGl0Li5zdGlsbCBkZXBsb3llZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZW5zb3IgPSB1cGRhdGVkU2Vuc29yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbGxTdGF0dXNIb2xkZXIgPSB0aGlzU2Vuc29yLmluc3RydW1lbnRfc3RhdHVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNTZW5zb3IgPSB1cGRhdGVkU2Vuc29yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5EZXBsb3llZFNlbnNvclN0YXQgPSB1cGRhdGVkU2VuU3RhdDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRlcGxveWVkU2Vuc29yU3RhdC50aW1lX3N0YW1wID0gZ2V0RGF0ZVRpbWVQYXJ0cygkc2NvcGUuRGVwbG95ZWRTZW5zb3JTdGF0LnRpbWVfc3RhbXApOy8vdGhpcyBrZWVwcyBpdCBhcyB1dGMgaW4gZGlzcGxheVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9zdGF0dXMgPSBhbGxTdGF0dXNIb2xkZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZCA9IHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9zdGF0dXMubWFwKGZ1bmN0aW9uIChpKSB7IHJldHVybiBpLnN0YXR1c190eXBlX2lkOyB9KS5pbmRleE9mKDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9zdGF0dXNbaW5kXSA9ICRzY29wZS5EZXBsb3llZFNlbnNvclN0YXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvci5pbnN0cnVtZW50X3N0YXR1cyA9IHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9zdGF0dXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcFN0dWZmQ29weSA9IFtdOyAkc2NvcGUuZGVwVGFwZUNvcHkgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSW50ZXJ2YWxUeXBlID0geyB0eXBlOiAnU2Vjb25kcycgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudmlldy5ERVB2YWwgPSAnZGV0YWlsJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlNlbnNvciBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJlcnJvciBzYXZpbmcgc2Vuc29yIHN0YXR1czogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJlcnJvciBzYXZpbmcgc2Vuc29yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfS8vZW5kIGlmIHZhbGlkXHJcbiAgICAgICAgICAgIH07Ly9lbmQgc2F2ZURlcGxveWVkKClcclxuXHJcbiAgICAgICAgICAgIC8vbmV2ZXIgbWluZCwgZG9uJ3Qgd2FudCB0byBlZGl0IGRlcGxveWVkIHNlbnNvclxyXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsRGVwRWRpdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS52aWV3LkRFUHZhbCA9ICdkZXRhaWwnO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlcFN0dWZmQ29weSA9W107XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVwVGFwZUNvcHkgPVtdO1xyXG4gICAgICAgICAgICAgICAgLy9NQUtFIFNVUkUgQUxMIFNFTEVDVEVEIE9QJ1MgU1RBWSBTRUxFQ1RFRFxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAkc2NvcGUuREVQT1BzRm9yVGFwZURvd24ubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2ZvciBlYWNoIG9uZSwgaWYgcmVzcG9uc2UgaGFzIHRoaXMgaWQsIGFkZCAnc2VsZWN0ZWQ6dHJ1ZScgZWxzZSBhZGQgJ3NlbGVjdGVkOmZhbHNlJ1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHkgPSAwOyB5IDwgJHNjb3BlLkRFUHRhcGVEb3duVGFibGUubGVuZ3RoOyB5KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ERVB0YXBlRG93blRhYmxlW3ldLm9iamVjdGl2ZV9wb2ludF9pZCA9PSAkc2NvcGUuREVQT1BzRm9yVGFwZURvd25baV0ub2JqZWN0aXZlX3BvaW50X2lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuREVQT1BzRm9yVGFwZURvd25baV0uc2VsZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgeSA9ICRzY29wZS5ERVB0YXBlRG93blRhYmxlLmxlbmd0aDsgLy9lbnN1cmVzIGl0IGRvZXNuJ3Qgc2V0IGl0IGFzIGZhbHNlIGFmdGVyIHNldHRpbmcgaXQgYXMgdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ERVBPUHNGb3JUYXBlRG93bltpXS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRFUHRhcGVEb3duVGFibGUubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuREVQT1BzRm9yVGFwZURvd25baV0uc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gICAgICAgICAgICBcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8jZW5kcmVnaW9uIGRlcGxveSBlZGl0XHJcblxyXG4gICAgICAgICAgICAvLyNyZWdpb24gUmV0cmlldmUgZWRpdFxyXG4gICAgICAgICAgICAvL2VkaXQgYnV0dG9uIGNsaWNrZWQuIG1ha2UgY29weSBvZiBkZXBsb3llZCBpbmZvIFxyXG4gICAgICAgICAgICAkc2NvcGUud2FubmFFZGl0UmV0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZpZXcuUkVUdmFsID0gJ2VkaXQnO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnJldFN0dWZmQ29weSA9W2FuZ3VsYXIuY29weSgkc2NvcGUuc2Vuc29yKSwgYW5ndWxhci5jb3B5KCRzY29wZS5SZXRyaWV2ZWRTZW5zb3JTdGF0KV07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucmV0VGFwZUNvcHkgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLlJFVHRhcGVEb3duVGFibGUpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9zYXZlIFJldHJpZXZlZCBzZW5zb3IgaW5mb1xyXG4gICAgICAgICAgICAkc2NvcGUuc2F2ZVJldHJpZXZlZCA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZWRSZXRTZW5zb3IgPSB7fTsgdmFyIHVwZGF0ZWRSZXRTZW5TdGF0ID0geyB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGRlYWxXaXRoVGltZVN0YW1wYjRTZW5kKCdyZXRyaWV2ZWQnKTsgLy9VVEMgb3IgbG9jYWw/XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gJHNjb3BlLnJldFN0dWZmQ29weVsxXS50aW1lX3N0YW1wID0gbmV3IERhdGUoJHNjb3BlLnJldFN0dWZmQ29weVsxXS50aW1lX3N0YW1wKTsvL2RhdGV0aW1lIGlzIGFubm95aW5nXHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICskY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIElOU1RSVU1FTlQudXBkYXRlKHsgaWQ6ICRzY29wZS5yZXRTdHVmZkNvcHlbMF0uaW5zdHJ1bWVudF9pZCB9LCAkc2NvcGUucmV0U3R1ZmZDb3B5WzBdKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkUmV0U2Vuc29yID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRSZXRTZW5zb3IuZGVwbG95bWVudFR5cGUgPSAkc2NvcGUucmV0U3R1ZmZDb3B5WzBdLmRlcGxveW1lbnRfdHlwZV9pZCA+IDAgPyAkc2NvcGUuZGVwVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmRlcGxveW1lbnRfdHlwZV9pZCA9PT0gJHNjb3BlLnJldFN0dWZmQ29weVswXS5kZXBsb3ltZW50X3R5cGVfaWQ7IH0pWzBdLm1ldGhvZCA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkUmV0U2Vuc29yLmhvdXNpbmdUeXBlID0gJHNjb3BlLnJldFN0dWZmQ29weVswXS5ob3VzaW5nX3R5cGVfaWQgPiAwID8gJHNjb3BlLmhvdXNlVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChoKSB7IHJldHVybiBoLmhvdXNpbmdfdHlwZV9pZCA9PT0gJHNjb3BlLnJldFN0dWZmQ29weVswXS5ob3VzaW5nX3R5cGVfaWQ7IH0pWzBdLnR5cGVfbmFtZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkUmV0U2Vuc29yLnNlbnNvckJyYW5kID0gJHNjb3BlLnNlbnNvckJyYW5kTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc2Vuc29yX2JyYW5kX2lkID09PSAkc2NvcGUucmV0U3R1ZmZDb3B5WzBdLnNlbnNvcl9icmFuZF9pZDsgfSlbMF0uYnJhbmRfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZFJldFNlbnNvci5zZW5zb3JUeXBlID0gJHNjb3BlLnNlbnNvclR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAodCkgeyByZXR1cm4gdC5zZW5zb3JfdHlwZV9pZCA9PT0gJHNjb3BlLnJldFN0dWZmQ29weVswXS5zZW5zb3JfdHlwZV9pZDsgfSlbMF0uc2Vuc29yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkUmV0U2Vuc29yLmluc3RDb2xsZWN0aW9uID0gJHNjb3BlLmNvbGxlY3RDb25kTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGkuaWQgPT09ICRzY29wZS5yZXRTdHVmZkNvcHlbMF0uaW5zdF9jb2xsZWN0aW9uX2lkOyB9KVswXS5jb25kaXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdXBkYXRlIGNvcGllZCByZWZlcmVuY2VzIGZvciBwYXNzaW5nIGJhY2sgdG8gbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yID0gdXBkYXRlZFJldFNlbnNvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRzSG9sZGVyID0gdGhpc1NlbnNvci5pbnN0cnVtZW50X3N0YXR1cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1NlbnNvciA9IHVwZGF0ZWRSZXRTZW5zb3I7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNTZW5zb3IuaW5zdHJ1bWVudF9zdGF0dXMgPSBzdGF0c0hvbGRlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgSU5TVFJVTUVOVF9TVEFUVVMudXBkYXRlKHsgaWQ6ICRzY29wZS5yZXRTdHVmZkNvcHlbMV0uaW5zdHJ1bWVudF9zdGF0dXNfaWQgfSwgJHNjb3BlLnJldFN0dWZmQ29weVsxXSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoc3RhdFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubW9zdFJlY2VudFN0YXR1cyA9IHN0YXRSZXNwb25zZS5zdGF0dXNfdHlwZV9pZCA9PSAyID8gXCJSZXRyaWV2ZWRcIiA6IFwiTG9zdFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJldHJpZXZlZFNlbnNvclN0YXQgPSBzdGF0UmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUmV0cmlldmVkU2Vuc29yU3RhdC5zdGF0dXMgPSBzdGF0UmVzcG9uc2Uuc3RhdHVzX3R5cGVfaWQgPT0gMiA/IFwiUmV0cmlldmVkXCIgOiBcIkxvc3RcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5SZXRyaWV2ZWRTZW5zb3JTdGF0LnRpbWVfc3RhbXAgPSBnZXREYXRlVGltZVBhcnRzKCRzY29wZS5SZXRyaWV2ZWRTZW5zb3JTdGF0LnRpbWVfc3RhbXApOy8vdGhpcyBrZWVwcyBpdCBhcyB1dGMgaW4gZGlzcGxheVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1NlbnNvci5pbnN0cnVtZW50X3N0YXR1c1swXSA9ICRzY29wZS5SZXRyaWV2ZWRTZW5zb3JTdGF0O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZGVhbCB3aXRoIHRhcGVkb3ducy4gcmVtb3ZlL2FkZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcnQgPSAwOyBydCA8ICRzY29wZS5SRVRyZW1vdmVPUExpc3QubGVuZ3RoOyBydCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFJFVGlkVG9SZW1vdmUgPSAkc2NvcGUuUkVUcmVtb3ZlT1BMaXN0W3J0XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUF9NRUFTVVJFLmRlbGV0ZSh7IGlkOiBSRVRpZFRvUmVtb3ZlIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJFVHRhcGVEb3duVGFibGUgPSAkc2NvcGUucmV0VGFwZUNvcHkubGVuZ3RoID4gMCA/IFtdIDogJHNjb3BlLlJFVHRhcGVEb3duVGFibGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhdCA9IDA7IGF0IDwgJHNjb3BlLnJldFRhcGVDb3B5Lmxlbmd0aDsgYXQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBSRVR0aGlzVGFwZSA9ICRzY29wZS5yZXRUYXBlQ29weVthdF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFJFVHRoaXNUYXBlLm9wX21lYXN1cmVtZW50c19pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZXhpc3RpbmcsIHB1dCBpbiBjYXNlIHRoZXkgY2hhbmdlZCBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUF9NRUFTVVJFLnVwZGF0ZSh7IGlkOiBSRVR0aGlzVGFwZS5vcF9tZWFzdXJlbWVudHNfaWQgfSwgUkVUdGhpc1RhcGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHRhcGVSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFwZVJlc3BvbnNlLm9wX25hbWUgPSBSRVR0aGlzVGFwZS5vcF9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFwZVJlc3BvbnNlLlZkYXR1bSA9IFJFVHRoaXNUYXBlLlZkYXR1bTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5SRVR0YXBlRG93blRhYmxlLnB1c2godGFwZVJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9uZXcgb25lIGFkZGVkLCBwb3N0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFJFVHRoaXNUYXBlLmluc3RydW1lbnRfc3RhdHVzX2lkID0gc3RhdFJlc3BvbnNlLmluc3RydW1lbnRfc3RhdHVzX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUF9NRUFTVVJFLnNhdmUoUkVUdGhpc1RhcGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHRhcGVSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFwZVJlc3BvbnNlLm9wX25hbWUgPSBSRVR0aGlzVGFwZS5vcF9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGFwZVJlc3BvbnNlLlZkYXR1bSA9IFJFVHRoaXNUYXBlLlZkYXR1bTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5SRVR0YXBlRG93blRhYmxlLnB1c2godGFwZVJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJldFN0dWZmQ29weSA9IFtdOyAkc2NvcGUucmV0VGFwZUNvcHkgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS52aWV3LlJFVHZhbCA9ICdkZXRhaWwnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJTZW5zb3IgdXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcImVycm9yIHNhdmluZyBzZW5zb3Igc3RhdHVzOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcImVycm9yIHNhdmluZyBzZW5zb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0vL2VuZCBpZiB2YWxpZFxyXG4gICAgICAgIH07Ly9lbmQgc2F2ZVJldHJpZXZlZCgpICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAvL25ldmVyIG1pbmQsIGRvbid0IHdhbnQgdG8gZWRpdCByZXRyaWV2ZWQgc2Vuc29yXHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWxSZXRFZGl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZpZXcuUkVUdmFsID0gJ2RldGFpbCc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucmV0U3R1ZmZDb3B5ID1bXTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5yZXRUYXBlQ29weSA9W107XHJcbiAgICAgICAgICAgICAgICAvL01BS0UgU1VSRSBBTEwgU0VMRUNURUQgT1AnUyBTVEFZIFNFTEVDVEVEXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8ICRzY29wZS5SRVRPUHNGb3JUYXBlRG93bi5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZm9yIGVhY2ggb25lLCBpZiByZXNwb25zZSBoYXMgdGhpcyBpZCwgYWRkICdzZWxlY3RlZDp0cnVlJyBlbHNlIGFkZCAnc2VsZWN0ZWQ6ZmFsc2UnXHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeSA9IDA7IHkgPCAkc2NvcGUuUkVUdGFwZURvd25UYWJsZS5sZW5ndGg7IHkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLlJFVHRhcGVEb3duVGFibGVbeV0ub2JqZWN0aXZlX3BvaW50X2lkID09ICRzY29wZS5SRVRPUHNGb3JUYXBlRG93bltpXS5vYmplY3RpdmVfcG9pbnRfaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5SRVRPUHNGb3JUYXBlRG93bltpXS5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB5ID0gJHNjb3BlLlJFVHRhcGVEb3duVGFibGUubGVuZ3RoOyAvL2Vuc3VyZXMgaXQgZG9lc24ndCBzZXQgaXQgYXMgZmFsc2UgYWZ0ZXIgc2V0dGluZyBpdCBhcyB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlJFVE9Qc0ZvclRhcGVEb3duW2ldLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuUkVUdGFwZURvd25UYWJsZS5sZW5ndGggPT09IDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5SRVRPUHNGb3JUYXBlRG93bltpXS5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyNlbmRyZWdpb24gUmV0cmlldmUgZWRpdFxyXG4gICAgICBcclxuICAgICAgICAgICAgLy9kZWxldGUgYVNlbnNvciBhbmQgc2Vuc29yIHN0YXR1c2VzXHJcbiAgICAgICAgICAgICRzY29wZS5kZWxldGVTID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy9UT0RPOjogRGVsZXRlIHRoZSBmaWxlcyBmb3IgdGhpcyBzZW5zb3IgdG9vIG9yIHJlYXNzaWduIHRvIHRoZSBTaXRlPz8gU2VydmljZXMgb3IgY2xpZW50IGhhbmRsaW5nP1xyXG4gICAgICAgICAgICAgICAgdmFyIERlbGV0ZU1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLnNlbnNvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiU2Vuc29yXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBEZWxldGVNb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChzZW5zb3JUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdGhpcyB3aWxsIGRlbGV0ZSB0aGUgaW5zdHJ1bWVudCBhbmQgYWxsIGl0J3Mgc3RhdHVzZXNcclxuICAgICAgICAgICAgICAgICAgICBJTlNUUlVNRU5ULmRlbGV0ZSh7IGlkOiBzZW5zb3JUb1JlbW92ZS5pbnN0cnVtZW50X2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yRmlsZXMgPVtdOyAvL2NsZWFyIG91dCBzZW5zb3JGaWxlcyBmb3IgdGhpcyBzZW5zb3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNJbWFnZUZpbGVzID1bXTsgLy9jbGVhciBvdXQgaW1hZ2UgZmlsZXMgZm9yIHRoaXMgc2Vuc29yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbm93IHJlbW92ZSBhbGwgdGhlc2UgZmlsZXMgZnJvbSBTaXRlRmlsZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGwgPSAkc2NvcGUuYWxsU0ZpbGVzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGwtLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hbGxTRmlsZXNbbF0uaW5zdHJ1bWVudF9pZCA9PSBzZW5zb3JUb1JlbW92ZS5pbnN0cnVtZW50X2lkKSAkc2NvcGUuYWxsU0ZpbGVzLnNwbGljZShsLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuYWxsU0ZpbGVzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJTZW5zb3IgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbmRCYWNrID1bXCJkZVwiLCAnZGVsZXRlZCddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZW5kQmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgK2Vycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgIH0pOy8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyNyZWdpb24gRklMRSBTVFVGRlxyXG4gICAgICAgICAgICAkc2NvcGUuc3RhbXAgPSBGSUxFX1NUQU1QLmdldFN0YW1wKCk7ICRzY29wZS5maWxlSXRlbUV4aXN0cyA9IHRydWU7XHJcbiAgICAgICAgICAgIC8vbmVlZCB0byByZXVwbG9hZCBmaWxlSXRlbSB0byB0aGlzIGV4aXN0aW5nIGZpbGUgT1IgQ2hhbmdlIG91dCBleGlzdGluZyBmaWxlSXRlbSBmb3IgbmV3IG9uZVxyXG4gICAgICAgICAgICAkc2NvcGUuc2F2ZUZpbGVVcGxvYWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmlsZVBhcnRzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIEZpbGVFbnRpdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9pZDogJHNjb3BlLmFGaWxlLmZpbGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICRzY29wZS5hRmlsZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJHNjb3BlLmFGaWxlLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwaG90b19kaXJlY3Rpb246ICRzY29wZS5hRmlsZS5waG90b19kaXJlY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlX2RkOiAkc2NvcGUuYUZpbGUubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZV9kZDogJHNjb3BlLmFGaWxlLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9kYXRlOiAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBod21faWQ6ICRzY29wZS5hRmlsZS5od21faWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6ICRzY29wZS5hRmlsZS5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxldHlwZV9pZDogJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VfaWQ6ICRzY29wZS5hRmlsZS5zb3VyY2VfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6ICRzY29wZS5hRmlsZS5wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhX2ZpbGVfaWQ6ICRzY29wZS5hRmlsZS5kYXRhX2ZpbGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnRfaWQ6ICRzY29wZS5hRmlsZS5pbnN0cnVtZW50X2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwaG90b19kYXRlOiAkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNfbndpczogJHNjb3BlLmFGaWxlLmlzX253aXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdGl2ZV9wb2ludF9pZDogJHNjb3BlLmFGaWxlLm9iamVjdGl2ZV9wb2ludF9pZFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgRmlsZTogJHNjb3BlLmFGaWxlLkZpbGUxICE9PSB1bmRlZmluZWQgPyAkc2NvcGUuYUZpbGUuRmlsZTEgOiAkc2NvcGUuYUZpbGUuRmlsZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vbmVlZCB0byBwdXQgdGhlIGZpbGVQYXJ0cyBpbnRvIGNvcnJlY3QgZm9ybWF0IGZvciBwb3N0XHJcbiAgICAgICAgICAgICAgICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICAgICAgICAgIGZkLmFwcGVuZChcIkZpbGVFbnRpdHlcIiwgSlNPTi5zdHJpbmdpZnkoZmlsZVBhcnRzLkZpbGVFbnRpdHkpKTtcclxuICAgICAgICAgICAgICAgIGZkLmFwcGVuZChcIkZpbGVcIiwgZmlsZVBhcnRzLkZpbGUpO1xyXG4gICAgICAgICAgICAgICAgLy9ub3cgUE9TVCBpdCAoZmlsZXBhcnRzKVxyXG4gICAgICAgICAgICAgICAgRklMRS51cGxvYWRGaWxlKGZkKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChmcmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgVXBsb2FkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNyYyA9ICRzY29wZS5zZXJ2ZXJVUkwgKyAnL0ZpbGVzLycgKyAkc2NvcGUuYUZpbGUuZmlsZV9pZCArICcvSXRlbScgKyBGSUxFX1NUQU1QLmdldFN0YW1wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgRklMRV9TVEFNUC5zZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGFtcCA9IEZJTEVfU1RBTVAuZ2V0U3RhbXAoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLkZpbGUxLnR5cGUuaW5kZXhPZihcImltYWdlXCIpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzUGhvdG8gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSAkc2NvcGUuaXNQaG90byA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5uYW1lID0gZnJlc3BvbnNlLm5hbWU7ICRzY29wZS5hRmlsZS5wYXRoID0gZnJlc3BvbnNlLnBhdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5GaWxlMSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5GaWxlID0gJHNjb3BlLmFGaWxlLkZpbGUxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuRmlsZTEgPSB1bmRlZmluZWQ7IC8vcHV0IGl0IGFzIGZpbGUgYW5kIHJlbW92ZSBpdCBmcm9tIDFcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZnJlc3BvbnNlLmZpbGVCZWxvbmdzVG8gPSAkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQgPT0gMiA/IFwiRGF0YUZpbGUgRmlsZVwiIDogXCJTZW5zb3IgRmlsZVwiOyAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZnJlc3BvbnNlLmZpbGV0eXBlX2lkID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZW5zSW1hZ2VGaWxlcy5zcGxpY2UoJHNjb3BlLmV4aXN0SU1HRmlsZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNJbWFnZUZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvckZpbGVzWyRzY29wZS5leGlzdEZpbGVJbmRleF0gPSBmcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlc1skc2NvcGUuYWxsU0ZpbGVJbmRleF0gPSBmcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgU2l0ZV9GaWxlcy5zZXRBbGxTaXRlRmlsZXMoJHNjb3BlLmFsbFNGaWxlcyk7IC8vdXBkYXRlcyB0aGUgZmlsZSBsaXN0IG9uIHRoZSBzaXRlZGFzaGJvYXJkXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNGaWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZUl0ZW1FeGlzdHMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBmaWxlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9zaG93IGEgbW9kYWwgd2l0aCB0aGUgbGFyZ2VyIGltYWdlIGFzIGEgcHJldmlldyBvbiB0aGUgcGhvdG8gZmlsZSBmb3IgdGhpcyBvcFxyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd0ltYWdlTW9kYWwgPSBmdW5jdGlvbiAoaW1hZ2UpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbWFnZU1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+SW1hZ2UgRmlsZSBQcmV2aWV3PC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PGltZyBuZy1zcmM9XCJ7e3NldFNSQ319XCIgLz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmltYWdlSWQgPSBpbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNldFNSQyA9IFNFUlZFUl9VUkwgKyAnL0ZpbGVzLycgKyRzY29wZS5pbWFnZUlkICsgJy9JdGVtJztcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnbWQnXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vd2FudCB0byBhZGQgb3IgZWRpdCBmaWxlXHJcbiAgICAgICAgICAgICRzY29wZS5zaG93RmlsZSA9IGZ1bmN0aW9uIChmaWxlKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZVR5cGVzID0gJHNjb3BlLmZpbGVUeXBlTGlzdDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY2llcyA9IGFnZW5jeUxpc3Q7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXhpc3RGaWxlSW5kZXggPSAtMTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5leGlzdElNR0ZpbGVJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlSW5kZXggPSAtMTsgLy9pbmRleGVzIGZvciBzcGxpY2UvY2hhbmdlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUgPSB7fTsgLy9ob2xkZXIgZm9yIGZpbGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlID0ge307IC8vaG9sZGVyIGZvciBmaWxlIHNvdXJjZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlID0ge307IC8vaG9sZGVyIGZvciBmaWxlIGRhdGFmaWxlXHJcbiAgICAgICAgICAgICAgICBpZiAoZmlsZSAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZWRpdCBvcCBmaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4aXN0RmlsZUluZGV4ID0gJHNjb3BlLnNlbnNvckZpbGVzLmluZGV4T2YoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlSW5kZXggPSAkc2NvcGUuYWxsU0ZpbGVzLmluZGV4T2YoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4aXN0SU1HRmlsZUluZGV4ID0gJHNjb3BlLnNlbnNJbWFnZUZpbGVzLmxlbmd0aCA+IDAgPyAkc2NvcGUuc2Vuc0ltYWdlRmlsZXMuaW5kZXhPZihmaWxlKTogLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlID0gYW5ndWxhci5jb3B5KGZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIEZJTEUuZ2V0RmlsZUl0ZW0oeyBpZDogJHNjb3BlLmFGaWxlLmZpbGVfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbGVJdGVtRXhpc3RzID0gcmVzcG9uc2UuTGVuZ3RoID4gMCA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuZmlsZVR5cGUgPSAkc2NvcGUuZmlsZVR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoZnQpIHsgcmV0dXJuIGZ0LmZpbGV0eXBlX2lkID09ICRzY29wZS5hRmlsZS5maWxldHlwZV9pZDsgfSlbMF0uZmlsZXR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9kZXRlcm1pbmUgaWYgZXhpc3RpbmcgZmlsZSBpcyBhIHBob3RvIChldmVuIGlmIHR5cGUgaXMgbm90IClcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLm5hbWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZkkgPSAkc2NvcGUuYUZpbGUubmFtZS5sYXN0SW5kZXhPZihcIi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmaWxlRXh0ID0gJHNjb3BlLmFGaWxlLm5hbWUuc3Vic3RyaW5nKGZJICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlRXh0Lm1hdGNoKC8oanBnfEpQR3xqcGVnfEpQRUd8cG5nfFBOR3xnaWZ8R0lGKSQvKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmlzUGhvdG8gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgJHNjb3BlLmlzUGhvdG8gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNyYyA9ICRzY29wZS5zZXJ2ZXJVUkwgKyAnL0ZpbGVzLycgKyAkc2NvcGUuYUZpbGUuZmlsZV9pZCArICcvSXRlbScgKyBGSUxFX1NUQU1QLmdldFN0YW1wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5hRmlsZS5maWxlX2RhdGUpOyAvL2RhdGUgZm9yIHZhbGlkaXR5IG9mIGZvcm0gb24gUFVUXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5waG90b19kYXRlICE9PSB1bmRlZmluZWQpICRzY29wZS5hRmlsZS5waG90b19kYXRlID0gbmV3IERhdGUoJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUpOyAvL2RhdGUgZm9yIHZhbGlkaXR5IG9mIGZvcm0gb24gUFVUXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGUuc291cmNlX2lkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU09VUkNFLnF1ZXJ5KHsgaWQ6IGZpbGUuc291cmNlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlID0gcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlLkZVTExuYW1lID0gJHNjb3BlLmFTb3VyY2Uuc291cmNlX25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FkZCBhZ2VuY3kgbmFtZSB0byBwaG90byBjYXB0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFnZW5jeU5hbWVGb3JDYXAgPSAkc2NvcGUuYWdlbmNpZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLmFnZW5jeV9pZCA9PSAkc2NvcGUuYVNvdXJjZS5hZ2VuY3lfaWQ7IH0pWzBdLmFnZW5jeV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgaWYgc291cmNlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGUuZGF0YV9maWxlX2lkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkFwcHJvdmFsSW5mbyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUucXVlcnkoeyBpZDogZmlsZS5kYXRhX2ZpbGVfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoZGYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZSA9IGRmO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NvciA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1lbWJlcl9pZCA9PSAkc2NvcGUuZGF0YWZpbGUucHJvY2Vzc29yX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5jb2xsZWN0X2RhdGUgPSBuZXcgRGF0ZSgkc2NvcGUuZGF0YWZpbGUuY29sbGVjdF9kYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0ID0gZ2V0RGF0ZVRpbWVQYXJ0cygkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUuZ29vZF9lbmQgPSBnZXREYXRlVGltZVBhcnRzKCRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZGYuYXBwcm92YWxfaWQgIT09IHVuZGVmaW5lZCAmJiBkZi5hcHByb3ZhbF9pZCAhPT0gbnVsbCAmJiBkZi5hcHByb3ZhbF9pZCA+PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgREFUQV9GSUxFLmdldERGQXBwcm92YWwoeyBpZDogZGYuZGF0YV9maWxlX2lkIH0sIGZ1bmN0aW9uIHN1Y2Nlc3MoYXBwcm92YWxSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQXBwcm92YWxJbmZvLmFwcHJvdmFsRGF0ZSA9IG5ldyBEYXRlKGFwcHJvdmFsUmVzcG9uc2UuYXBwcm92YWxfZGF0ZSk7IC8vaW5jbHVkZSBub3RlIHRoYXQgaXQncyBkaXNwbGF5ZWQgaW4gdGhlaXIgbG9jYWwgdGltZSBidXQgc3RvcmVkIGluIFVUQ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQXBwcm92YWxJbmZvLk1lbWJlciA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChhbWVtKSB7IHJldHVybiBhbWVtLm1lbWJlcl9pZCA9PSBhcHByb3ZhbFJlc3BvbnNlLm1lbWJlcl9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBnZXR0aW5nIGRhdGEgZmlsZSBhcHByb3ZhbCBpbmZvcm1hdGlvblwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIGV4aXN0aW5nIGZpbGVcclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY3JlYXRpbmcgYSBmaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSA9IG5ldyBEYXRlKCk7ICRzY29wZS5hRmlsZS5waG90b19kYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZSA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1lbWJlcl9pZCA9PSAkY29va2llcy5nZXQoJ21JRCcpOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZS5GVUxMbmFtZSA9ICRzY29wZS5hU291cmNlLmZuYW1lICsgXCIgXCIgKyRzY29wZS5hU291cmNlLmxuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzb3IgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT0gJGNvb2tpZXMuZ2V0KCdtSUQnKTsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGR0ID0gZ2V0VGltZVpvbmVTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5jb2xsZWN0X2RhdGUgPSBkdFswXTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUudGltZV96b25lID0gZHRbMV07IC8vd2lsbCBiZSBjb252ZXJ0ZWQgdG8gdXRjIG9uIHBvc3QvcHV0IFxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0ID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUuZ29vZF9lbmQgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSAvL2VuZCBuZXcgZmlsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudXBkYXRlQWdlbmN5Rm9yQ2FwdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY3lOYW1lRm9yQ2FwID0gJHNjb3BlLmFnZW5jaWVzLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gJHNjb3BlLmFTb3VyY2UuYWdlbmN5X2lkOyB9KVswXS5hZ2VuY3lfbmFtZTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2NyZWF0ZSB0aGlzIG5ldyBmaWxlXHJcbiAgICAgICAgICAgICRzY29wZS5jcmVhdGVGaWxlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkID09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSBlbmQgZGF0ZSBpcyBhZnRlciBzdGFydCBkYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHMgPSAkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydDsvL25lZWQgdG8gZ2V0IGRlcCBzdGF0dXMgZGF0ZSBpbiBzYW1lIGZvcm1hdCBhcyByZXRyaWV2ZWQgdG8gY29tcGFyZVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlID0gJHNjb3BlLmRhdGFmaWxlLmdvb2RfZW5kOyAvL3N0dXBpZCBjb21tYSBpbiB0aGVyZSBtYWtpbmcgaXQgbm90IHRoZSBzYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ldyBEYXRlKGUpIDwgbmV3IERhdGUocykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpeERhdGUgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGUgZ29vZCBlbmQgZGF0ZSBtdXN0IGJlIGFmdGVyIHRoZSBnb29kIHN0YXJ0IGRhdGUuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZml4RGF0ZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZnVsbFNlbmZpbGVJc1VwbG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICskY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgLy9wb3N0IHNvdXJjZSBvciBkYXRhZmlsZSBmaXJzdCB0byBnZXQgc291cmNlX2lkIG9yIGRhdGFfZmlsZV9pZFxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5maWxldHlwZV9pZCA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9kZXRlcm1pbmUgdGltZXpvbmVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmRhdGFmaWxlLnRpbWVfem9uZSAhPSBcIlVUQ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY29udmVydCBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXRjU3RhcnREYXRlVGltZSA9IG5ldyBEYXRlKCRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0KS50b1VUQ1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXRjRW5kRGF0ZVRpbWUgPSBuZXcgRGF0ZSgkc2NvcGUuZGF0YWZpbGUuZ29vZF9lbmQpLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0ID0gdXRjU3RhcnREYXRlVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmdvb2RfZW5kID0gdXRjRW5kRGF0ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS50aW1lX3pvbmUgPSAnVVRDJztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSAnR01UJyBpcyB0YWNrZWQgb24gc28gaXQgZG9lc24ndCB0cnkgdG8gYWRkIGhycyB0byBtYWtlIHRoZSBhbHJlYWR5IHV0YyBhIHV0YyBpbiBkYlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2kgPSAkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydC50b1N0cmluZygpLmluZGV4T2YoJ0dNVCcpICszO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZWkgPSAkc2NvcGUuZGF0YWZpbGUuZ29vZF9lbmQudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmdvb2Rfc3RhcnQgPSAkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydC50b1N0cmluZygpLnN1YnN0cmluZygwLCBzaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCA9ICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZC50b1N0cmluZygpLnN1YnN0cmluZygwLCBlaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5pbnN0cnVtZW50X2lkID0gdGhpc1NlbnNvci5pbnN0cnVtZW50X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5wcm9jZXNzb3JfaWQgPSAkY29va2llcy5nZXQoJ21JRCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIERBVEFfRklMRS5zYXZlKCRzY29wZS5kYXRhZmlsZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoZGZSZXNvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhlbiBQT1NUIGZpbGVQYXJ0cyAoU2VydmljZXMgcG9wdWxhdGUgUEFUSClcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVQYXJ0cyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGVFbnRpdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxldHlwZV9pZDogJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICRzY29wZS5hRmlsZS5GaWxlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9kYXRlOiAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAkc2NvcGUuYUZpbGUuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogJHNjb3BlLnRoaXNTZW5zb3JTaXRlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YV9maWxlX2lkOiBkZlJlc29uc2UuZGF0YV9maWxlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RpcmVjdGlvbjogJHNjb3BlLmFGaWxlLnBob3RvX2RpcmVjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZV9kZDogJHNjb3BlLmFGaWxlLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZV9kZDogJHNjb3BlLmFGaWxlLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbnN0cnVtZW50X2lkOiB0aGlzU2Vuc29yLmluc3RydW1lbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlOiAkc2NvcGUuYUZpbGUuRmlsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25lZWQgdG8gcHV0IHRoZSBmaWxlUGFydHMgaW50byBjb3JyZWN0IGZvcm1hdCBmb3IgcG9zdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZUVudGl0eVwiLCBKU09OLnN0cmluZ2lmeShmaWxlUGFydHMuRmlsZUVudGl0eSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmZC5hcHBlbmQoXCJGaWxlXCIsIGZpbGVQYXJ0cy5GaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3cgUE9TVCBpdCAoZmlsZXBhcnRzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBGSUxFLnVwbG9hZEZpbGUoZmQpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIFVwbG9hZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJlc3BvbnNlLmZpbGVCZWxvbmdzVG8gPSBcIkRhdGFGaWxlIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZW5zb3JGaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZyZXNwb25zZS5maWxldHlwZV9pZCA9PT0gMSkgJHNjb3BlLnNlbnNJbWFnZUZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgJHNjb3BlLmZ1bGxTZW5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5mdWxsU2VuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgK2Vycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5mdWxsU2VuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBkYXRhIGZpbGU6IFwiICtlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIGRhdGFmaWxlLnNhdmUoKVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2l0J3Mgbm90IGEgZGF0YSBmaWxlLCBzbyBkbyB0aGUgc291cmNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGVTb3VyY2UgPSB7IHNvdXJjZV9uYW1lOiAkc2NvcGUuYVNvdXJjZS5GVUxMbmFtZSwgYWdlbmN5X2lkOiAkc2NvcGUuYVNvdXJjZS5hZ2VuY3lfaWR9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTT1VSQ0Uuc2F2ZSh0aGVTb3VyY2UpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RoZW4gUE9TVCBmaWxlUGFydHMgKFNlcnZpY2VzIHBvcHVsYXRlIFBBVEgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZVBhcnRzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGVFbnRpdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXR5cGVfaWQ6ICRzY29wZS5hRmlsZS5maWxldHlwZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJHNjb3BlLmFGaWxlLkZpbGUubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9kYXRlOiAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaG90b19kYXRlOiAkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICRzY29wZS5hRmlsZS5kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogJHNjb3BlLnRoaXNTZW5zb3JTaXRlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZV9pZDogcmVzcG9uc2Uuc291cmNlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaG90b19kaXJlY3Rpb246ICRzY29wZS5hRmlsZS5waG90b19kaXJlY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlX2RkOiAkc2NvcGUuYUZpbGUubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZV9kZDogJHNjb3BlLmFGaWxlLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1bWVudF9pZDogdGhpc1NlbnNvci5pbnN0cnVtZW50X2lkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlOiAkc2NvcGUuYUZpbGUuRmlsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbmVlZCB0byBwdXQgdGhlIGZpbGVQYXJ0cyBpbnRvIGNvcnJlY3QgZm9ybWF0IGZvciBwb3N0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZkLmFwcGVuZChcIkZpbGVFbnRpdHlcIiwgSlNPTi5zdHJpbmdpZnkoZmlsZVBhcnRzLkZpbGVFbnRpdHkpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZkLmFwcGVuZChcIkZpbGVcIiwgZmlsZVBhcnRzLkZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3cgUE9TVCBpdCAoZmlsZXBhcnRzKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRklMRS51cGxvYWRGaWxlKGZkKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChmcmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgVXBsb2FkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJlc3BvbnNlLmZpbGVCZWxvbmdzVG8gPSBcIlNlbnNvciBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvckZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuYWxsU0ZpbGVzKTsgLy91cGRhdGVzIHRoZSBmaWxlIGxpc3Qgb24gdGhlIHNpdGVkYXNoYm9hcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnJlc3BvbnNlLmZpbGV0eXBlX2lkID09PSAxKSAkc2NvcGUuc2Vuc0ltYWdlRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgJHNjb3BlLmZ1bGxTZW5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZ1bGxTZW5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgK2Vycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5mdWxsU2VuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgc291cmNlIGluZm86IFwiICtlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBzb3VyY2Uuc2F2ZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfS8vZW5kIGlmIHNvdXJjZVxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIHZhbGlkXHJcbiAgICAgICAgICAgIH07Ly9lbmQgY3JlYXRlKClcclxuXHJcbiAgICAgICAgICAgIC8vdXBkYXRlIHRoaXMgZmlsZVxyXG4gICAgICAgICAgICAkc2NvcGUuc2F2ZUZpbGUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQgPT0gMikge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlIGVuZCBkYXRlIGlzIGFmdGVyIHN0YXJ0IGRhdGVcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9ICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0Oy8vbmVlZCB0byBnZXQgZGVwIHN0YXR1cyBkYXRlIGluIHNhbWUgZm9ybWF0IGFzIHJldHJpZXZlZCB0byBjb21wYXJlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSAkc2NvcGUuZGF0YWZpbGUuZ29vZF9lbmQ7IC8vc3R1cGlkIGNvbW1hIGluIHRoZXJlIG1ha2luZyBpdCBub3QgdGhlIHNhbWVcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3IERhdGUoZSkgPCBuZXcgRGF0ZShzKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZml4RGF0ZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBnb29kIGVuZCBkYXRlIG11c3QgYmUgYWZ0ZXIgdGhlIGdvb2Qgc3RhcnQgZGF0ZS48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaXhEYXRlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5mdWxsU2VuZmlsZUlzVXBsb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAvL3B1dCBzb3VyY2Ugb3IgZGF0YWZpbGUsIHB1dCBmaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdoYXRraW5kID0gJHNjb3BlLmFGaWxlLmZpbGVCZWxvbmdzVG87XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICskY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZGF0YWZpbGUuZGF0YV9maWxlX2lkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9oYXMgREFUQV9GSUxFXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgdGltZXpvbmUgYW5kIG1ha2Ugc3VyZSBkYXRlIHN0YXlzIHV0Y1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmRhdGFmaWxlLnRpbWVfem9uZSAhPSBcIlVUQ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnZlcnQgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1dGNTdGFydERhdGVUaW1lID0gbmV3IERhdGUoJHNjb3BlLmRhdGFmaWxlLmdvb2Rfc3RhcnQpLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXRjRW5kRGF0ZVRpbWUgPSBuZXcgRGF0ZSgkc2NvcGUuZGF0YWZpbGUuZ29vZF9lbmQpLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydCA9IHV0Y1N0YXJ0RGF0ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUuZ29vZF9lbmQgPSB1dGNFbmREYXRlVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS50aW1lX3pvbmUgPSAnVVRDJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlICdHTVQnIGlzIHRhY2tlZCBvbiBzbyBpdCBkb2Vzbid0IHRyeSB0byBhZGQgaHJzIHRvIG1ha2UgdGhlIGFscmVhZHkgdXRjIGEgdXRjIGluIGRiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2kgPSAkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydC50b1N0cmluZygpLmluZGV4T2YoJ0dNVCcpICszO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVpID0gJHNjb3BlLmRhdGFmaWxlLmdvb2RfZW5kLnRvU3RyaW5nKCkuaW5kZXhPZignR01UJykgKzM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YWZpbGUuZ29vZF9zdGFydCA9ICRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0LnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIHNpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCA9ICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZC50b1N0cmluZygpLnN1YnN0cmluZygwLCBlaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgREFUQV9GSUxFLnVwZGF0ZSh7IGlkOiAkc2NvcGUuZGF0YWZpbGUuZGF0YV9maWxlX2lkIH0sICRzY29wZS5kYXRhZmlsZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGSUxFLnVwZGF0ZSh7IGlkOiAkc2NvcGUuYUZpbGUuZmlsZV9pZCB9LCAkc2NvcGUuYUZpbGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZpbGVSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVSZXNwb25zZS5maWxlQmVsb25nc1RvID0gXCJEYXRhRmlsZSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvckZpbGVzWyRzY29wZS5leGlzdEZpbGVJbmRleF09IGZpbGVSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzWyRzY29wZS5hbGxTRmlsZUluZGV4XT0gZmlsZVJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgJHNjb3BlLmZ1bGxTZW5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZ1bGxTZW5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZnVsbFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlOyAvL0xvYWRpbmcuLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBkYXRhIGZpbGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9oYXMgU09VUkNFXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2Uuc291cmNlX25hbWUgPSAkc2NvcGUuYVNvdXJjZS5GVUxMbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBTT1VSQ0UudXBkYXRlKHsgaWQ6ICRzY29wZS5hU291cmNlLnNvdXJjZV9pZCB9LCAkc2NvcGUuYVNvdXJjZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEZJTEUudXBkYXRlKHsgaWQ6ICRzY29wZS5hRmlsZS5maWxlX2lkIH0sICRzY29wZS5hRmlsZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoZmlsZVJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVSZXNwb25zZS5maWxlQmVsb25nc1RvID0gXCJTZW5zb3IgRmlsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvckZpbGVzWyRzY29wZS5leGlzdEZpbGVJbmRleF09IGZpbGVSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZXNbJHNjb3BlLmFsbFNGaWxlSW5kZXhdPSBmaWxlUmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuYWxsU0ZpbGVzKTsgLy91cGRhdGVzIHRoZSBmaWxlIGxpc3Qgb24gdGhlIHNpdGVkYXNoYm9hcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgJHNjb3BlLmZ1bGxTZW5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5mdWxsU2VuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZnVsbFNlbmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlOyAvL0xvYWRpbmcuLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIHNvdXJjZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9Ly9lbmQgdmFsaWRcclxuICAgICAgICB9Oy8vZW5kIHNhdmUoKVxyXG5cclxuICAgICAgICAgICAgLy9kZWxldGUgdGhpcyBmaWxlXHJcbiAgICAgICAgICAgICRzY29wZS5kZWxldGVGaWxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIERlbGV0ZU1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLmFGaWxlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBEZWxldGVNb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChmaWxlVG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICBGSUxFLmRlbGV0ZSh7IGlkOiBmaWxlVG9SZW1vdmUuZmlsZV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZW5zb3JGaWxlcy5zcGxpY2UoJHNjb3BlLmV4aXN0RmlsZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlcy5zcGxpY2UoJHNjb3BlLmFsbFNGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc0ltYWdlRmlsZXMuc3BsaWNlKCRzY29wZS5leGlzdElNR0ZpbGVJbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVGb3JtID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7Ly9lbmQgRGVsZXRlTW9kYWwucmVzdWx0LnRoZW5cclxuICAgICAgICAgICAgfTsvL2VuZCBkZWxldGUoKVxyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmNhbmNlbEZpbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUgPSB7IH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZSA9IHsgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZSA9IHsgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vYXBwcm92ZSB0aGlzIGRhdGFmaWxlIChpZiBhZG1pbiBvciBtYW5hZ2VyKVxyXG4gICAgICAgICAgICAkc2NvcGUuYXBwcm92ZURGID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy90aGlzIGlzIHZhbGlkLCBzaG93IG1vZGFsIHRvIGNvbmZpcm0gdGhleSB3YW50IHRvIGFwcHJvdmUgaXRcclxuICAgICAgICAgICAgICAgIHZhciB0aGlzREYgPSAkc2NvcGUuZGF0YWZpbGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXBwcm92ZU1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxkaXYgY2xhc3M9J21vZGFsLWhlYWRlcic+PGgzIGNsYXNzPSdtb2RhbC10aXRsZSc+QXBwcm92ZSBEYXRhIEZpbGU8L2gzPjwvZGl2PlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdtb2RhbC1ib2R5Jz48cD5BcmUgeW91IHJlYWR5IHRvIGFwcHJvdmUgdGhpcyBEYXRhIEZpbGU/PC9wPjwvZGl2PlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdtb2RhbC1mb290ZXInPjxidXR0b24gY2xhc3M9J2J0biBidG4tcHJpbWFyeScgbmctY2xpY2s9J2FwcHJvdmVJdCgpJz5BcHByb3ZlPC9idXR0b24+PGJ1dHRvbiBjbGFzcz0nYnRuIGJ0bi13YXJuaW5nJyBuZy1jbGljaz0nY2FuY2VsKCknPkNhbmNlbDwvYnV0dG9uPjwvZGl2PlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXBwcm92ZUl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9kZWxldGUgdGhlIHNpdGUgYW5kIGFsbCB0aGluZ3MgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSh0aGlzREYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYXBwcm92ZU1vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChkZikge1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUuYXBwcm92ZURGKHsgaWQ6IGRmLmRhdGFfZmlsZV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChhcHByb3ZhbFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRmLmFwcHJvdmFsX2lkID0gYXBwcm92YWxSZXNwb25zZS5hcHByb3ZhbF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlID0gZGY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRGF0YSBGaWxlIEFwcHJvdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQXBwcm92YWxJbmZvLmFwcHJvdmFsRGF0ZSA9IG5ldyBEYXRlKGFwcHJvdmFsUmVzcG9uc2UuYXBwcm92YWxfZGF0ZSk7IC8vaW5jbHVkZSBub3RlIHRoYXQgaXQncyBkaXNwbGF5ZWQgaW4gdGhlaXIgbG9jYWwgdGltZSBidXQgc3RvcmVkIGluIFVUQ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQXBwcm92YWxJbmZvLk1lbWJlciA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChhbWVtKSB7IHJldHVybiBhbWVtLm1lbWJlcl9pZCA9PSBhcHByb3ZhbFJlc3BvbnNlLm1lbWJlcl9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbG9naWMgZm9yIGNhbmNlbFxyXG4gICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vYXBwcm92ZSB0aGlzIGh3bSAoaWYgYWRtaW4gb3IgbWFuYWdlcilcclxuICAgICAgICAgICAgJHNjb3BlLnVuQXBwcm92ZURGID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy90aGlzIGlzIHZhbGlkLCBzaG93IG1vZGFsIHRvIGNvbmZpcm0gdGhleSB3YW50IHRvIGFwcHJvdmUgaXRcclxuICAgICAgICAgICAgICAgIHZhciB0aGlzREYgPSAkc2NvcGUuZGF0YWZpbGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgdW5hcHByb3ZlTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwiPGRpdiBjbGFzcz0nbW9kYWwtaGVhZGVyJz48aDMgY2xhc3M9J21vZGFsLXRpdGxlJz5SZW1vdmUgQXBwcm92YWw8L2gzPjwvZGl2PlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdtb2RhbC1ib2R5Jz48cD5BcmUgeW91IHN1cmUgeW91IHdhbiB0byB1bmFwcHJvdmUgdGhpcyBEYXRhIEZpbGU/PC9wPjwvZGl2PlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdtb2RhbC1mb290ZXInPjxidXR0b24gY2xhc3M9J2J0biBidG4tcHJpbWFyeScgbmctY2xpY2s9J3VuQXBwcm92ZUl0KCknPlVuYXBwcm92ZTwvYnV0dG9uPjxidXR0b24gY2xhc3M9J2J0biBidG4td2FybmluZycgbmctY2xpY2s9J2NhbmNlbCgpJz5DYW5jZWw8L2J1dHRvbj48L2Rpdj5cIixcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVuQXBwcm92ZUl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9kZWxldGUgdGhlIHNpdGUgYW5kIGFsbCB0aGluZ3MgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSh0aGlzREYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdW5hcHByb3ZlTW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGRmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgIERBVEFfRklMRS51bkFwcHJvdmVERih7IGlkOiBkZi5kYXRhX2ZpbGVfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRmLmFwcHJvdmFsX2lkID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlID0gZGY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRGF0YSBGaWxlIFVuYXBwcm92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5BcHByb3ZhbEluZm8gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyNlbmRyZWdpb24gRklMRSBTVFVGRlxyXG5cclxuICAgICAgICAgICAgLy8jcmVnaW9uIE5XSVMgREFUQV9GSUxFXHJcbiAgICAgICAgICAgIGlmICgkc2NvcGUuc2Vuc29yRGF0YU5XSVMpIHtcclxuICAgICAgICAgICAgICAgIC8vRklMRS5WQUxJREFURUQgYmVpbmcgdXNlZCB0byBzdG9yZSAxIGlmIHRoaXMgaXMgYW4gbndpcyBmaWxlIG1ldGFkYXRhIGxpbmtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZW5zb3JOV0lTRmlsZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGFpID0gJHNjb3BlLnNlbnNvckZpbGVzLmxlbmd0aCAtIDE7IGFpID49IDA7IGFpLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnNlbnNvckZpbGVzW2FpXS5pc19ud2lzID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvck5XSVNGaWxlcy5wdXNoKCRzY29wZS5zZW5zb3JGaWxlc1thaV0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yRmlsZXMuc3BsaWNlKGFpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgZHQgPSBnZXRUaW1lWm9uZVN0YW1wKCk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0ZpbGUgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYgPSB7fTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd05XSVNGaWxlID0gZnVuY3Rpb24gKGYpIHtcclxuICAgICAgICAgICAgICAgIC8vd2FudCB0byBhZGQgb3IgZWRpdCBmaWxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXhpc3RGaWxlSW5kZXggPSAtMTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZUluZGV4ID0gLTE7IC8vaW5kZXhlcyBmb3Igc3BsaWNlL2NoYW5nZVxyXG4gICAgICAgICAgICAgICAgaWYgKGYgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2VkaXQgTldJUyBmaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV4aXN0RmlsZUluZGV4ID0gJHNjb3BlLnNlbnNvck5XSVNGaWxlcy5pbmRleE9mKGYpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZUluZGV4ID0gJHNjb3BlLmFsbFNGaWxlcy5pbmRleE9mKGYpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTRmlsZSA9IGFuZ3VsYXIuY29weShmKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0ZpbGUuZmlsZV9kYXRlID0gbmV3IERhdGUoJHNjb3BlLk5XSVNGaWxlLmZpbGVfZGF0ZSk7IC8vZGF0ZSBmb3IgdmFsaWRpdHkgb2YgZm9ybSBvbiBQVVRcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0ZpbGUuRmlsZVR5cGUgPSBcIkRhdGFcIjtcclxuICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUucXVlcnkoeyBpZDogZi5kYXRhX2ZpbGVfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoZGYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERiA9IGRmO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubndpc1Byb2Nlc3NvciA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1lbWJlcl9pZCA9PSAkc2NvcGUuTldJU0RGLnByb2Nlc3Nvcl9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuY29sbGVjdF9kYXRlID0gbmV3IERhdGUoJHNjb3BlLk5XSVNERi5jb2xsZWN0X2RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0RGLmdvb2Rfc3RhcnQgPSBnZXREYXRlVGltZVBhcnRzKCRzY29wZS5OV0lTREYuZ29vZF9zdGFydCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuZ29vZF9lbmQgPSBnZXREYXRlVGltZVBhcnRzKCRzY29wZS5OV0lTREYuZ29vZF9lbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZW5kIGV4aXN0aW5nIGZpbGVcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jcmVhdGluZyBhIG53aXMgZmlsZVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTRmlsZSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9kYXRlOiBuZXcgRGF0ZSgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxldHlwZV9pZDogMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJ2h0dHA6Ly93YXRlcmRhdGEudXNncy5nb3Yvbndpcy91dj9zaXRlX25vPScgKyAkc2NvcGUudGhpc1NlbnNvclNpdGUudXNnc19zaWQsICAvLyBpZiBbZmlsbCBpbiBpZiBub3QgaGVyZS4uIFRPRE8uLi4mYmVnaW5fZGF0ZT0yMDE2MDQxMyZlbmRfZGF0ZT0yMDE2MDQxOSAoZXZlbnQgc3RhcnQvZW5kKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXRoOiAnPGxpbms+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgRmlsZVR5cGU6ICdEYXRhJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogJHNjb3BlLnNlbnNvci5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhX2ZpbGVfaWQ6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnRfaWQ6ICRzY29wZS5zZW5zb3IuaW5zdHJ1bWVudF9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNfbndpczogMVxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERiA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvY2Vzc29yX2lkOiAkY29va2llcy5nZXQoXCJtSURcIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnRfaWQ6ICRzY29wZS5zZW5zb3IuaW5zdHJ1bWVudF9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sbGVjdF9kYXRlOiBkdFswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGltZV96b25lOiBkdFsxXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ29vZF9zdGFydDogbmV3IERhdGUoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ29vZF9lbmQ6IG5ldyBEYXRlKClcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ud2lzUHJvY2Vzc29yID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRjb29raWVzLmdldCgnbUlEJyk7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgfSAvL2VuZCBuZXcgZmlsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dOV0lTRmlsZUZvcm0gPSB0cnVlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB2YXIgcG9zdEFwcHJvdmFsRm9yTldJU2ZpbGUgPSBmdW5jdGlvbiAoREZpZCkge1xyXG4gICAgICAgICAgICAgICAgREFUQV9GSUxFLmFwcHJvdmVOV0lTREYoeyBpZDogREZpZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChhcHByb3ZhbFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNGaWxlLmFwcHJvdmFsX2lkID0gYXBwcm92YWxSZXNwb25zZS5hcHByb3ZhbF9pZDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkc2NvcGUuY3JlYXRlTldJU0ZpbGUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlIGVuZCBkYXRlIGlzIGFmdGVyIHN0YXJ0IGRhdGVcclxuICAgICAgICAgICAgICAgIHZhciBzID0gJHNjb3BlLk5XSVNERi5nb29kX3N0YXJ0Oy8vbmVlZCB0byBnZXQgZGVwIHN0YXR1cyBkYXRlIGluIHNhbWUgZm9ybWF0IGFzIHJldHJpZXZlZCB0byBjb21wYXJlXHJcbiAgICAgICAgICAgICAgICB2YXIgZSA9ICRzY29wZS5OV0lTREYuZ29vZF9lbmQ7IC8vc3R1cGlkIGNvbW1hIGluIHRoZXJlIG1ha2luZyBpdCBub3QgdGhlIHNhbWVcclxuICAgICAgICAgICAgICAgIGlmIChuZXcgRGF0ZShlKSA8IG5ldyBEYXRlKHMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZml4RGF0ZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGUgZ29vZCBlbmQgZGF0ZSBtdXN0IGJlIGFmdGVyIHRoZSBnb29kIHN0YXJ0IGRhdGUuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZml4RGF0ZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICskY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcG9zdCBkYXRhZmlsZSBmaXJzdCB0byBnZXQgb3IgZGF0YV9maWxlX2lkXHJcbiAgICAgICAgICAgICAgICAgICAgLy9kZXRlcm1pbmUgdGltZXpvbmVcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLk5XSVNERi50aW1lX3pvbmUgIT0gXCJVVENcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnZlcnQgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHV0Y1N0YXJ0RGF0ZVRpbWUgPSBuZXcgRGF0ZSgkc2NvcGUuTldJU0RGLmdvb2Rfc3RhcnQpLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1dGNFbmREYXRlVGltZSA9IG5ldyBEYXRlKCRzY29wZS5OV0lTREYuZ29vZF9lbmQpLnRvVVRDU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuZ29vZF9zdGFydCA9IHV0Y1N0YXJ0RGF0ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuZ29vZF9lbmQgPSB1dGNFbmREYXRlVGltZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERi50aW1lX3pvbmUgPSAnVVRDJztcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSAnR01UJyBpcyB0YWNrZWQgb24gc28gaXQgZG9lc24ndCB0cnkgdG8gYWRkIGhycyB0byBtYWtlIHRoZSBhbHJlYWR5IHV0YyBhIHV0YyBpbiBkYlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2kgPSAkc2NvcGUuTldJU0RGLmdvb2Rfc3RhcnQudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArIDM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlaSA9ICRzY29wZS5OV0lTREYuZ29vZF9lbmQudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArIDM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuZ29vZF9zdGFydCA9ICRzY29wZS5OV0lTREYuZ29vZF9zdGFydC50b1N0cmluZygpLnN1YnN0cmluZygwLCBzaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYuZ29vZF9lbmQgPSAkc2NvcGUuTldJU0RGLmdvb2RfZW5kLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIGVpKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgREFUQV9GSUxFLnNhdmUoJHNjb3BlLk5XSVNERikuJHByb21pc2UudGhlbihmdW5jdGlvbiAoTmRmUmVzb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RoZW4gUE9TVCBmaWxlUGFydHMgKFNlcnZpY2VzIHBvcHVsYXRlIFBBVEgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTRmlsZS5kYXRhX2ZpbGVfaWQgPSBOZGZSZXNvbnNlLmRhdGFfZmlsZV9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdEFwcHJvdmFsRm9yTldJU2ZpbGUoTmRmUmVzb25zZS5kYXRhX2ZpbGVfaWQpOyAvL3Byb2Nlc3MgYXBwcm92YWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3cgUE9TVCBGaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEZJTEUuc2F2ZSgkc2NvcGUuTldJU0ZpbGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKEZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIERhdGEgc2F2ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiRGF0YUZpbGUgRmlsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUuc2Vuc29yRmlsZXMucHVzaChGcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvck5XSVNGaWxlcy5wdXNoKEZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzLnB1c2goRnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZCAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93TldJU0ZpbGVGb3JtID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfS8vZW5kIHZhbGlkXHJcbiAgICAgICAgICAgIH07Ly8gZW5kIGNyZWF0ZSBOV0lTIGZpbGVcclxuICAgICAgICAgICAgLy91cGRhdGUgdGhpcyBOV0lTIGZpbGVcclxuICAgICAgICAgICAgJHNjb3BlLnNhdmVOV0lTRmlsZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgZW5kIGRhdGUgaXMgYWZ0ZXIgc3RhcnQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgdmFyIHMgPSAkc2NvcGUuTldJU0RGLmdvb2Rfc3RhcnQ7Ly9uZWVkIHRvIGdldCBkZXAgc3RhdHVzIGRhdGUgaW4gc2FtZSBmb3JtYXQgYXMgcmV0cmlldmVkIHRvIGNvbXBhcmVcclxuICAgICAgICAgICAgICAgIHZhciBlID0gJHNjb3BlLk5XSVNERi5nb29kX2VuZDsgLy9zdHVwaWQgY29tbWEgaW4gdGhlcmUgbWFraW5nIGl0IG5vdCB0aGUgc2FtZVxyXG4gICAgICAgICAgICAgICAgaWYgKG5ldyBEYXRlKGUpIDwgbmV3IERhdGUocykpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaXhEYXRlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBnb29kIGVuZCBkYXRlIG11c3QgYmUgYWZ0ZXIgdGhlIGdvb2Qgc3RhcnQgZGF0ZS48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBmaXhEYXRlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcHV0IHNvdXJjZSBvciBkYXRhZmlsZSwgcHV0IGZpbGVcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jaGVjayB0aW1lem9uZSBhbmQgbWFrZSBzdXJlIGRhdGUgc3RheXMgdXRjXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5OV0lTREYudGltZV96b25lICE9IFwiVVRDXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jb252ZXJ0IGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1dGNTdGFydERhdGVUaW1lID0gbmV3IERhdGUoJHNjb3BlLk5XSVNERi5nb29kX3N0YXJ0KS50b1VUQ1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXRjRW5kRGF0ZVRpbWUgPSBuZXcgRGF0ZSgkc2NvcGUuTldJU0RGLmdvb2RfZW5kKS50b1VUQ1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0RGLmdvb2Rfc3RhcnQgPSB1dGNTdGFydERhdGVUaW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0RGLmdvb2RfZW5kID0gdXRjRW5kRGF0ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYudGltZV96b25lID0gJ1VUQyc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgJ0dNVCcgaXMgdGFja2VkIG9uIHNvIGl0IGRvZXNuJ3QgdHJ5IHRvIGFkZCBocnMgdG8gbWFrZSB0aGUgYWxyZWFkeSB1dGMgYSB1dGMgaW4gZGJcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNpID0gJHNjb3BlLk5XSVNERi5nb29kX3N0YXJ0LnRvU3RyaW5nKCkuaW5kZXhPZignR01UJykgKzM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlaSA9ICRzY29wZS5OV0lTREYuZ29vZF9lbmQudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERi5nb29kX3N0YXJ0ID0gJHNjb3BlLk5XSVNERi5nb29kX3N0YXJ0LnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIHNpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk5XSVNERi5nb29kX2VuZCA9ICRzY29wZS5OV0lTREYuZ29vZF9lbmQudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgZWkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUudXBkYXRlKHsgaWQ6ICRzY29wZS5OV0lTREYuZGF0YV9maWxlX2lkIH0sICRzY29wZS5OV0lTREYpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBGSUxFLnVwZGF0ZSh7IGlkOiAkc2NvcGUuTldJU0ZpbGUuZmlsZV9pZCB9LCAkc2NvcGUuTldJU0ZpbGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZpbGVSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIERhdGEgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVSZXNwb25zZS5maWxlQmVsb25nc1RvID0gXCJEYXRhRmlsZSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yTldJU0ZpbGVzWyRzY29wZS5leGlzdEZpbGVJbmRleF0gPSBmaWxlUmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzWyRzY29wZS5hbGxTRmlsZUluZGV4XSA9IGZpbGVSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dOV0lTRmlsZUZvcm0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgdmFsaWRcclxuICAgICAgICAgICAgfTsvL2VuZCBzYXZlKClcclxuXHJcbiAgICAgICAgICAgIC8vZGVsZXRlIHRoaXMgZmlsZVxyXG4gICAgICAgICAgICAkc2NvcGUuZGVsZXRlTldJU0ZpbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgRGVsZXRlTW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkc2NvcGUuTldJU0ZpbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIERlbGV0ZU1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGZpbGVUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgIEZJTEUuZGVsZXRlKHsgaWQ6IGZpbGVUb1JlbW92ZS5maWxlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvck5XSVNGaWxlcy5zcGxpY2UoJHNjb3BlLmV4aXN0RmlsZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlcy5zcGxpY2UoJHNjb3BlLmFsbFNGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuYWxsU0ZpbGVzKTsgLy91cGRhdGVzIHRoZSBmaWxlIGxpc3Qgb24gdGhlIHNpdGVkYXNoYm9hcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dOV0lTRmlsZUZvcm0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTsvL2VuZCBEZWxldGVNb2RhbC5yZXN1bHQudGhlblxyXG4gICAgICAgICAgICB9Oy8vZW5kIGRlbGV0ZSgpXHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsTldJU0ZpbGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuTldJU0ZpbGUgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OV0lTREYgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93TldJU0ZpbGVGb3JtID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vI2VuZHJlZ2lvblxyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgfV0pOy8vZW5kIGZ1bGxTZW5zb3JNb2RhbEN0cmxcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBTVE5Db250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTVE5Db250cm9sbGVycycpO1xyXG5cclxuICAgIFNUTkNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ3NlbnNvckN0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRxJywgJyRjb29raWVzJywgJyRsb2NhdGlvbicsICckc3RhdGUnLCAnJGh0dHAnLCAnJHVpYk1vZGFsJywgJyRmaWx0ZXInLCAnJHRpbWVvdXQnLCAndGhpc1NpdGUnLCAnSW5zdHJ1bWVudF9TZXJ2aWNlJywgJ3RoaXNTaXRlU2Vuc29ycycsICdhbGxTZW5zb3JCcmFuZHMnLCAnYWxsQWdlbmNpZXMnLCAnYWxsVmVydERhdHVtcycsICdhbGxEZXBsb3lUeXBlcycsICdhbGxTZW5zb3JUeXBlcycsICdhbGxIb3VzaW5nVHlwZXMnLCAnYWxsRXZlbnRzJywgJ2FsbEZpbGVUeXBlcycsICdJTlNUUlVNRU5UJywgJ0lOU1RSVU1FTlRfU1RBVFVTJywgJ1NJVEUnLCAnTUVNQkVSJywgJ0RFUExPWU1FTlRfVFlQRScsICdTVEFUVVNfVFlQRScsICdJTlNUX0NPTExfQ09ORElUSU9OJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkcSwgJGNvb2tpZXMsICRsb2NhdGlvbiwgJHN0YXRlLCAkaHR0cCwgJHVpYk1vZGFsLCAkZmlsdGVyLCAkdGltZW91dCwgdGhpc1NpdGUsIEluc3RydW1lbnRfU2VydmljZSwgdGhpc1NpdGVTZW5zb3JzLCBhbGxTZW5zb3JCcmFuZHMsIGFsbEFnZW5jaWVzLCBhbGxWZXJ0RGF0dW1zLCBhbGxEZXBsb3lUeXBlcywgYWxsU2Vuc29yVHlwZXMsIGFsbEhvdXNpbmdUeXBlcywgYWxsRXZlbnRzLCBhbGxGaWxlVHlwZXMsIElOU1RSVU1FTlQsIElOU1RSVU1FTlRfU1RBVFVTLCBTSVRFLCBNRU1CRVIsIERFUExPWU1FTlRfVFlQRSwgU1RBVFVTX1RZUEUsIElOU1RfQ09MTF9DT05ESVRJT04pIHtcclxuICAgICAgICAgICAgaWYgKCRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gdW5kZWZpbmVkIHx8ICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmF1dGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbG9naW4nKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vZ2xvYmFsIHZhcnNcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZW5zb3JDb3VudCA9IHsgdG90YWw6IHRoaXNTaXRlU2Vuc29ycy5sZW5ndGggfTsgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVwbG95VHlwZUxpc3QgPSBhbmd1bGFyLmNvcHkoYWxsRGVwbG95VHlwZXMpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRlbXBEZXBUeXBlSUQgPSAwO1xyXG4gICAgICAgICAgICAgICAgLy9maXggZGVwbG95bWVudCB0eXBlcyBzbyB0aGF0IFwiVGVtcGVyYXR1cmVcIiBiZWNvbWVzIDIgOiBUZW1wZXJhdHVyZSAoTWV0IHNlbnNvciktU2Vuc29yVHlwZToyIGFuZCBUZW1wZXJhdHVyZSAocHJlc3N1cmUgdHJhbnNkdWNlciktU2Vuc29yVHlwZToxIC0tIGp1c3QgZm9yIHByb3Bvc2VkXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBkID0gMDsgZCA8ICRzY29wZS5kZXBsb3lUeXBlTGlzdC5sZW5ndGg7IGQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZGVwbG95VHlwZUxpc3RbZF0ubWV0aG9kID09PSBcIlRlbXBlcmF0dXJlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcERlcFR5cGVJRCA9ICRzY29wZS5kZXBsb3lUeXBlTGlzdFtkXS5kZXBsb3ltZW50X3R5cGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBsb3lUeXBlTGlzdFtkXS5tZXRob2QgPSBcIlRlbXBlcmF0dXJlIChNZXQgc2Vuc29yKVwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICRzY29wZS5kZXBsb3lUeXBlTGlzdC5wdXNoKHsgZGVwbG95bWVudF90eXBlX2lkOiB0ZW1wRGVwVHlwZUlELCBtZXRob2Q6IFwiVGVtcGVyYXR1cmUgKFByZXNzdXJlIFRyYW5zZHVjZXIpXCIgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNEZXBUeXBlcyA9IGFsbFNlbnNvclR5cGVzOy8vIGFsbFNlbnNEZXBzO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dQcm9wb3NlZCA9IGZhbHNlOyAvL3RoZXkgd2FudCB0byBhZGQgYSBwcm9wb3NlZCBzZW5zb3IsIG9wZW4gb3B0aW9uc1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVTZW5zb3JzID0gdGhpc1NpdGVTZW5zb3JzO1xyXG4gICAgICAgICAgICAgICAgSW5zdHJ1bWVudF9TZXJ2aWNlLnNldEFsbFNpdGVTZW5zb3JzKCRzY29wZS5TaXRlU2Vuc29ycyk7XHJcbiAgICAgICAgICAgICAgICAvL3RvIHBhc3MgdG8gdGhlIHNlbnNvciBtb2RhbHMgZm9yIHNlbnNvciBmaWxlc1xyXG4gICAgICAgICAgICAgICAgdmFyIFNlbnNGaWxlVHlwZXMgPSBhbGxGaWxlVHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChzZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL1Bob3RvICgxKSwgRGF0YSAoMiksIEhpc3RvcmljICgzKSwgRmllbGQgU2hlZXRzICg0KSwgTGV2ZWwgTm90ZXMgKDUpLCBPdGhlciAoNyksIExpbmsgKDgpLCBTa2V0Y2ggKDEwKVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzZnQuZmlsZXR5cGUgPT09ICdQaG90bycgfHwgc2Z0LmZpbGV0eXBlID09PSAnRGF0YScgfHwgc2Z0LmZpbGV0eXBlID09PSAnSGlzdG9yaWMgQ2l0YXRpb24nIHx8IHNmdC5maWxldHlwZSA9PT0gJ0ZpZWxkIFNoZWV0cycgfHwgc2Z0LmZpbGV0eXBlID09PSAnTGV2ZWwgTm90ZXMnIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgc2Z0LmZpbGV0eXBlID09PSAnT3RoZXInIHx8IHNmdC5maWxldHlwZSA9PT0gJ0xpbmsnIHx8IHNmdC5maWxldHlwZSA9PT0gJ1NrZXRjaCc7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vc2hvdy9oaWRlIHByb3Bvc2VkIHNlbnNvcnMgdG8gYWRkXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0hpZGVQcm9wb3NlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1Byb3Bvc2VkID0gISRzY29wZS5zaG93UHJvcG9zZWQ7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy9hZGQgdGhlc2UgY2hlY2tlZCBQcm9wb3NlZCBzZW5zb3JzIHRvIHRoaXMgc2l0ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkFkZFByb3Bvc2VkID0gZnVuY3Rpb24gKCkgeyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIFRpbWVfU1RBTVAgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGR0ID0gMDsgZHQgPCAkc2NvcGUuZGVwbG95VHlwZUxpc3QubGVuZ3RoOyBkdCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZGVwbG95VHlwZUxpc3RbZHRdLnNlbGVjdGVkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcG9zZWRUb0FkZCA9IHt9OyB2YXIgcHJvcFN0YXRUb0FkZCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5kZXBsb3lUeXBlTGlzdFtkdF0ubWV0aG9kLnN1YnN0cmluZygwLCA0KSA9PSBcIlRlbXBcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdGVtcGVyYXR1cmUgcHJvcG9zZWQgc2Vuc29yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zZWRUb0FkZCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwbG95bWVudF90eXBlX2lkOiAkc2NvcGUuZGVwbG95VHlwZUxpc3RbZHRdLmRlcGxveW1lbnRfdHlwZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogdGhpc1NpdGUuc2l0ZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vuc29yX3R5cGVfaWQ6ICRzY29wZS5kZXBsb3lUeXBlTGlzdFtkdF0ubWV0aG9kID09IFwiVGVtcGVyYXR1cmUgKFByZXNzdXJlIFRyYW5zZHVjZXIpXCIgPyAxIDogMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2dvIHRocm91Z2ggdGhlIG5ldyBmdWxsSW5zdHJ1bWVudCBhbmQgc2VlIGlmIGFueSBvZiB0aGUgc2Vuc29yJ3MgZGVwbG95bWVudHR5cGVzIGFyZSB0aGlzIGRlcGxveW1lbnQgdHlwZSB0byBzZXQgdGhlIHNlbnNvcl90eXBlX2lkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNJRCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5zZW5zRGVwVHlwZXMsIGZ1bmN0aW9uIChzZHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBzZHQuZGVwbG95bWVudHR5cGVzLmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2R0LmRlcGxveW1lbnR0eXBlc1t4XS5kZXBsb3ltZW50X3R5cGVfaWQgPT0gJHNjb3BlLmRlcGxveVR5cGVMaXN0W2R0XS5kZXBsb3ltZW50X3R5cGVfaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc0lEID0gc2R0LnNlbnNvcl90eXBlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9hbnkgb3RoZXIgdHlwZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2VkVG9BZGQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcGxveW1lbnRfdHlwZV9pZDogJHNjb3BlLmRlcGxveVR5cGVMaXN0W2R0XS5kZXBsb3ltZW50X3R5cGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6IHRoaXNTaXRlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbnNvcl90eXBlX2lkOiBzSUQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbm93IHBvc3QgaXQgKEluc3RydW1lbnQgZmlyc3QsIHRoZW4gSW5zdHJ1bWVudCBTdGF0dXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJTlNUUlVNRU5ULnNhdmUocHJvcG9zZWRUb0FkZCkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlZFByb3BTZW5zb3IgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcGxveW1lbnRfdHlwZV9pZDogcmVzcG9uc2UuZGVwbG95bWVudF90eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXRlX2lkOiByZXNwb25zZS5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5zb3JfdHlwZV9pZDogcmVzcG9uc2Uuc2Vuc29yX3R5cGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnRfaWQ6IHJlc3BvbnNlLmluc3RydW1lbnRfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcGxveW1lbnRUeXBlOiAkc2NvcGUuZGVwbG95VHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChkdGwpIHsgcmV0dXJuIGR0bC5kZXBsb3ltZW50X3R5cGVfaWQgPT0gcmVzcG9uc2UuZGVwbG95bWVudF90eXBlX2lkOyB9KVswXS5tZXRob2QsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbnNvclR5cGU6ICRzY29wZS5zZW5zRGVwVHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnNlbnNvcl90eXBlX2lkID09IHJlc3BvbnNlLnNlbnNvcl90eXBlX2lkO30pWzBdLnNlbnNvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcFN0YXRUb0FkZCA9IHsgaW5zdHJ1bWVudF9pZDogcmVzcG9uc2UuaW5zdHJ1bWVudF9pZCwgc3RhdHVzX3R5cGVfaWQ6IDQsIG1lbWJlcl9pZDogJGNvb2tpZXMuZ2V0KCdtSUQnKSwgdGltZV9zdGFtcDogVGltZV9TVEFNUCwgdGltZV96b25lOiAnVVRDJywgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSU5TVFJVTUVOVF9TVEFUVVMuc2F2ZShwcm9wU3RhdFRvQWRkKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChzdGF0UmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcFN0YXRUb0FkZC5zdGF0dXMgPSAnUHJvcG9zZWQnOyBwcm9wU3RhdFRvQWRkLmluc3RydW1lbnRfc3RhdHVzX2lkID0gc3RhdFJlc3BvbnNlLmluc3RydW1lbnRfc3RhdHVzX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkUHJvcFNlbnNvci5pbnN0cnVtZW50X3N0YXR1cyA9IFtwcm9wU3RhdFRvQWRkXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlU2Vuc29ycy5wdXNoKGNyZWF0ZWRQcm9wU2Vuc29yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvckNvdW50ID0geyB0b3RhbDogJHNjb3BlLlNpdGVTZW5zb3JzLmxlbmd0aCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NsZWFuIHVwIC4uLmFsbCB1bmNoZWNrZWQgYW5kIHRoZW4gaGlkZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBkZXAgPSAwOyBkZXAgPCAkc2NvcGUuZGVwbG95VHlwZUxpc3QubGVuZ3RoOyBkZXArKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcGxveVR5cGVMaXN0W2RlcF0uc2VsZWN0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBhbnl0aGluZyB5b3Ugd2FudCBjYW4gZ28gaGVyZSBhbmQgd2lsbCBzYWZlbHkgYmUgcnVuIG9uIHRoZSBuZXh0IGRpZ2VzdC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93UHJvcG9zZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiUHJvcG9zZWQgc2Vuc29yIGNyZWF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgU2Vuc29yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgSU5TVFJVTUVOVF9TVEFUVVMuc2F2ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgU2Vuc29yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgLy9lbmQgSU5TVFJVTUVOVC5zYXZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0vL2VuZCBpZiBzZWxlY3RlZCA9PSB0cnVlXHJcbiAgICAgICAgICAgICAgICAgICAgfS8vZW5kIGZvcmVhY2ggZGVwbG95VHlwZUxpc3RcclxuICAgICAgICAgICAgICAgIH07Ly9lbmQgQWRkUHJvcG9zZWQoKVxyXG5cclxuICAgICAgICAgICAgICAgIC8vd2FudCB0byByZXRyaWV2ZSB0aGlzIGRlcGxveWVkIHNlbnNvclxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dSZXRyaWV2ZU1vZGFsID0gZnVuY3Rpb24gKHNlbnNvckNsaWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL25lZWQgc3RhdHVzVHlwZXMsIENvbGxlY3RDb25kaXRpb25zICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4Q2xpY2tlZCA9ICRzY29wZS5TaXRlU2Vuc29ycy5pbmRleE9mKHNlbnNvckNsaWNrZWQpOyB2YXIgYWxsaW5kZXggPSB0aGlzU2l0ZVNlbnNvcnMuaW5kZXhPZihzZW5zb3JDbGlja2VkKTtcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gdHJ1ZTsvLyBsb2FkaW5nLi4vLyQoXCIucGFnZS1sb2FkaW5nXCIpLnJlbW92ZUNsYXNzKFwiaGlkZGVuXCIpOyAvL2xvYWRpbmcuLi5cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnU2Vuc29yUmV0cmlldmFsTW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdzZW5zb3JSZXRyaWV2YWxNb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnbGcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd0NsYXNzOiAncmVwLWRpYWxvZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHsgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNTZW5zb3I6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2Vuc29yQ2xpY2tlZCAhPT0gMCA/IHNlbnNvckNsaWNrZWQgOiBcImVtcHR5XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU2Vuc29yU2l0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzU2l0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxFdmVudExpc3Q6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWxsRXZlbnRzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVPUHM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU0lURS5nZXRTaXRlT1BzKHsgaWQ6IHRoaXNTaXRlLnNpdGVfaWQgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsTWVtYmVyczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1FTUJFUi5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxTdGF0dXNUeXBlczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTVEFUVVNfVFlQRS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxJbnN0Q29sbENvbmQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5TVF9DT0xMX0NPTkRJVElPTi5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxWRGF0dW1MaXN0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFsbFZlcnREYXR1bXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChyZXRyaWV2ZWRTZW5zb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldHJpZXZlZFNlbnNvclsxXSA9PSAncmV0cmlldmVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVTZW5zb3JzW2luZGV4Q2xpY2tlZF0gPSByZXRyaWV2ZWRTZW5zb3JbMF07IHRoaXNTaXRlU2Vuc29yc1thbGxpbmRleF0gPSByZXRyaWV2ZWRTZW5zb3JbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJldHJpZXZlZFNlbnNvclsxXSA9PSAnZGVsZXRlZFInKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXhDbGlja2VkMSA9ICRzY29wZS5TaXRlU2Vuc29ycy5pbmRleE9mKHNlbnNvckNsaWNrZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVTZW5zb3JzLnNwbGljZShpbmRleENsaWNrZWQxLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZW5zb3JDb3VudC50b3RhbCA9ICRzY29wZS5TaXRlU2Vuc29ycy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07Ly9lbmQgc2hvd1JldHJpZXZlTW9kYWxcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1Byb3Bvc2VkU2Vuc29yID0gZnVuY3Rpb24gKHByb3Bvc2VkU2Vuc29yQ2xpY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9wSW5kZXggPSAkc2NvcGUuU2l0ZVNlbnNvcnMuaW5kZXhPZihwcm9wb3NlZFNlbnNvckNsaWNrZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcm9wTW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdQcm9wb3NlZFNlbnNvci5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCAncHJvcG9zZWRTZW5zb3InLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSwgcHJvcG9zZWRTZW5zb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50aGlzUHJvcG9zZWRTZW5zb3IgPSBwcm9wb3NlZFNlbnNvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZWxldGVQcm9wb3NlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgnZGVsZXRlJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd0NsYXNzOiAncmVwLWRpYWxvZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3Bvc2VkU2Vuc29yOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHByb3Bvc2VkU2Vuc29yQ2xpY2tlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHByb3BNb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkID09ICdkZWxldGUnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJTlNUUlVNRU5ULmRlbGV0ZSh7IGlkOiBwcm9wb3NlZFNlbnNvckNsaWNrZWQuaW5zdHJ1bWVudF9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzU2l0ZVNlbnNvcnMuc3BsaWNlKHByb3BJbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVTZW5zb3JzID0gdGhpc1NpdGVTZW5zb3JzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEluc3RydW1lbnRfU2VydmljZS5zZXRBbGxTaXRlU2Vuc29ycygkc2NvcGUuU2l0ZVNlbnNvcnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiUHJvcG9zZWQgc2Vuc29yIGRlbGV0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIGRlbGV0aW5nIHByb3Bvc2VkIHNlbnNvci4gUmVmcmVzaCBhbmQgdHJ5IGFnYWluLiBFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvL3dhbnQgdG8gZGVwbG95IGEgcHJvcG9zZWQgc2Vuc29yLCBlZGl0IGEgZGVwbG95ZWQgc2Vuc29yIG9yIGNyZWF0ZSBhIG5ldyBkZXBsb3llZCBzZW5zb3JcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93U2Vuc29yTW9kYWwgPSBmdW5jdGlvbiAoc2Vuc29yQ2xpY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXNzQWxsTGlzdHMgPSBbYWxsU2Vuc29yVHlwZXMsIGFsbFNlbnNvckJyYW5kcywgYWxsSG91c2luZ1R5cGVzLCBhbGxFdmVudHMsIFNlbnNGaWxlVHlwZXMsIGFsbFZlcnREYXR1bXNdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleENsaWNrZWQgPSAkc2NvcGUuU2l0ZVNlbnNvcnMuaW5kZXhPZihzZW5zb3JDbGlja2VkKTtcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gdHJ1ZTsvLyBsb2FkaW5nLi4vLyAkKFwiLnBhZ2UtbG9hZGluZ1wiKS5yZW1vdmVDbGFzcyhcImhpZGRlblwiKTsgLy9sb2FkaW5nLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiB0aGlzIGlzIGEgY3JlYXRlLCBzaG93IHRoZSBzZW5zb3Jtb2RhbC5odG1sLCBpZiBsb29raW5nIGF0IGRlcGxveWVkIHNlbnNvciwgZ28gdG8gdGhlIGRlcHNlbnNvcm1vZGFsLmh0bWxcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IHNlbnNvckNsaWNrZWQgPT09IDAgfHwgc2Vuc29yQ2xpY2tlZC5pbnN0cnVtZW50X3N0YXR1c1swXS5zdGF0dXNfdHlwZV9pZCA9PT0gNCA/ICdTZW5zb3Jtb2RhbC5odG1sJyA6ICdEZXBTZW5zb3Jtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NlbnNvck1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdsZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ3JlcC1kaWFsb2cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxEcm9wZG93bnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcGFzc0FsbExpc3RzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbERlcFR5cGVzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERFUExPWU1FTlRfVFlQRS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzU2Vuc29yOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbnNvckNsaWNrZWQgIT09IDAgPyBzZW5zb3JDbGlja2VkIDogXCJlbXB0eVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlbnNvclNpdGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1NpdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZU9QczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTSVRFLmdldFNpdGVPUHMoeyBpZDogdGhpc1NpdGUuc2l0ZV9pZCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZ2VuY3lMaXN0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFsbEFnZW5jaWVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbE1lbWJlcnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNRU1CRVIuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChjcmVhdGVkU2Vuc29yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpID0gJHNjb3BlLlNpdGVTZW5zb3JzLmluZGV4T2Yoc2Vuc29yQ2xpY2tlZCk7IHZhciBzaSA9IHRoaXNTaXRlU2Vuc29ycy5pbmRleE9mKHNlbnNvckNsaWNrZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLydkZXBsb3lQJyAtPiBjcmVhdGVkU2Vuc29yWzFdIHdpbGwgYmU6ICdwcm9wb3NlZERlcGxveWVkJyBkZXBsb3kgbmV3IC0+IGNyZWF0ZWRTZW5zb3JbMV0gd2lsbCBiZTogJ25ld0RlcGxveWVkJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZWRTZW5zb3JbMV0gPT0gJ3Byb3Bvc2VkRGVwbG95ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZVNlbnNvcnNbaV0gPSBjcmVhdGVkU2Vuc29yWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1NpdGVTZW5zb3JzW3NpXSA9IGNyZWF0ZWRTZW5zb3JbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnN0cnVtZW50X1NlcnZpY2Uuc2V0QWxsU2l0ZVNlbnNvcnMoJHNjb3BlLlNpdGVTZW5zb3JzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXRlZFNlbnNvclsxXSA9PSAnbmV3RGVwbG95ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZVNlbnNvcnMucHVzaChjcmVhdGVkU2Vuc29yWzBdKTsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vuc29yQ291bnQudG90YWwgPSAkc2NvcGUuU2l0ZVNlbnNvcnMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSW5zdHJ1bWVudF9TZXJ2aWNlLnNldEFsbFNpdGVTZW5zb3JzKCRzY29wZS5TaXRlU2Vuc29ycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZWRTZW5zb3JbMV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90aGlzIGlzIGZyb20gZWRpdCAtLSByZWZyZXNoIHBhZ2U/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZSB0aGUgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVTZW5zb3JzW2luZGV4Q2xpY2tlZF0gPSBjcmVhdGVkU2Vuc29yWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcmVhdGVkU2Vuc29yWzFdID09ICdkZWxldGVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVTZW5zb3JzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZW5zb3JDb3VudC50b3RhbCA9ICRzY29wZS5TaXRlU2Vuc29ycy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBJbnN0cnVtZW50X1NlcnZpY2Uuc2V0QWxsU2l0ZVNlbnNvcnMoJHNjb3BlLlNpdGVTZW5zb3JzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vd2FudCB0byBzZWUgdGhlIHJldHJpZXZlZCBzZW5zb3IgKGNhbiBlZGl0IGRlcGxveWVkIHBhcnQgYW5kIHJldHJpZXZlZCBwYXJ0IG9uIGhlcmUpXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0Z1bGxTZW5zb3JNb2RhbCA9IGZ1bmN0aW9uIChzZW5zb3JDbGlja2VkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9zZW5kIGFsbCBkZXBsb3llZCBzdHVmZiBhbmQgcmV0cmlldmVkIHN0dWZmIHRvIG1vZGFsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlcGxveWVkU3R1ZmYgPSBbYWxsU2Vuc29yVHlwZXMsIGFsbFNlbnNvckJyYW5kcywgYWxsSG91c2luZ1R5cGVzLCBTZW5zRmlsZVR5cGVzLCBhbGxWZXJ0RGF0dW1zXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0cmlldmVkU3R1ZmYgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXhDbGlja2VkID0gJHNjb3BlLlNpdGVTZW5zb3JzLmluZGV4T2Yoc2Vuc29yQ2xpY2tlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IHRydWU7Ly8gbG9hZGluZy4uLy8gJChcIi5wYWdlLWxvYWRpbmdcIikucmVtb3ZlQ2xhc3MoXCJoaWRkZW5cIik7IC8vbG9hZGluZy4uLlxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdmdWxsU2Vuc29ybW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdmdWxsU2Vuc29yTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ2xnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd0NsYXNzOiAncmVwLWRpYWxvZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbERlcERyb3Bkb3duczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkZXBsb3llZFN0dWZmO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFN0YXR1c1R5cGVzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNUQVRVU19UWVBFLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbEluc3RDb2xsQ29uZDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBJTlNUX0NPTExfQ09ORElUSU9OLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhbGxFdmVudHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsRGVwVHlwZXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gREVQTE9ZTUVOVF9UWVBFLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNTZW5zb3I6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2Vuc29yQ2xpY2tlZCAhPT0gMCA/IHNlbnNvckNsaWNrZWQgOiBcImVtcHR5XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU2Vuc29yU2l0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzU2l0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXRlT1BzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNJVEUuZ2V0U2l0ZU9Qcyh7IGlkOiB0aGlzU2l0ZS5zaXRlX2lkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnZW5jeUxpc3Q6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWxsQWdlbmNpZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsTWVtYmVyczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE1FTUJFUi5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGNyZWF0ZWRTZW5zb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy91cGRhdGUgdGhlIGxpc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVTZW5zb3JzW2luZGV4Q2xpY2tlZF0gPSBjcmVhdGVkU2Vuc29yWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyB3YXRjaCBmb3IgdGhlIHNlc3Npb24gZXZlbnQgdG8gY2hhbmdlIGFuZCB1cGRhdGVcclxuICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJyk7IH0sIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXNzaW9uRXZlbnROYW1lID0gbmV3VmFsdWUgIT09IHVuZGVmaW5lZCA/IG5ld1ZhbHVlIDogXCJBbGwgRXZlbnRzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlc3Npb25FdmVudEV4aXN0cyA9ICRzY29wZS5zZXNzaW9uRXZlbnROYW1lICE9IFwiQWxsIEV2ZW50c1wiID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlU2Vuc29ycyA9IHRoaXNTaXRlU2Vuc29ycy5maWx0ZXIoZnVuY3Rpb24gKGgpIHsgcmV0dXJuIChoLmV2ZW50X2lkID09ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSkgfHwgaC5pbnN0cnVtZW50X3N0YXR1c1swXS5zdGF0dXNfdHlwZV9pZCA9PSA0OyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvckNvdW50ID0geyB0b3RhbDogJHNjb3BlLlNpdGVTZW5zb3JzLmxlbmd0aCB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlU2Vuc29ycyA9IHRoaXNTaXRlU2Vuc29ycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvckNvdW50ID0geyB0b3RhbDogJHNjb3BlLlNpdGVTZW5zb3JzLmxlbmd0aCB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9IC8vZW5kIGVsc2Ugbm90IGF1dGhcclxuICAgICAgICB9XSk7XHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU2V0dGluZ3NDb250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTZXR0aW5nc0NvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgU2V0dGluZ3NDb250cm9sbGVycy5jb250cm9sbGVyKCdyZXNvdXJjZXNDdHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckbG9jYXRpb24nLCAnJHN0YXRlJywgJyRodHRwJywgJyRmaWx0ZXInLCAnJHVpYk1vZGFsJywgJ0FHRU5DWScsICdDT05UQUNUX1RZUEUnLCAnREVQTE9ZTUVOVF9QUklPUklUWScsICdFVkVOVF9TVEFUVVMnLFxyXG4gICAgICAgICdFVkVOVF9UWVBFJywgJ0ZJTEVfVFlQRScsICdIT1JJWk9OVEFMX0NPTExfTUVUSE9EUycsICdIT1JJWk9OVEFMX0RBVFVNJywgJ0hPVVNJTkdfVFlQRScsICdIV01fUVVBTElUWScsICdIV01fVFlQRScsICdJTlNUX0NPTExfQ09ORElUSU9OJywgJ01BUktFUicsICdORVRXT1JLX05BTUUnLCAnT1BfUVVBTElUWScsXHJcbiAgICAgICAgJ09QX1RZUEUnLCAnU0VOU09SX0JSQU5EJywgJ0RFUExPWU1FTlRfVFlQRScsICdTRU5TT1JfVFlQRScsICdORVRXT1JLX1RZUEUnLCAnU1RBVFVTX1RZUEUnLCAnVkVSVElDQUxfQ09MTF9NRVRIT0QnLCAnVkVSVElDQUxfREFUVU0nLCAnYWxsU3RhdGVzJywgJ2FsbEFnZW5jaWVzJywgJ2FsbENvbnRhY3RUeXBlcycsICdhbGxEZXBsb3lQcmlvcml0aWVzJywgJ2FsbEV2ZW50U3RhdHMnLCAnYWxsRXZlbnRUeXBlcycsXHJcbiAgICAgICAgJ2FsbEZpbGVUeXBlcycsICdhbGxIb3JDb2xsTWV0aG9kcycsICdhbGxIb3JEYXR1bXMnLCAnYWxsSG91c2VUeXBlcycsICdhbGxIV01xdWFsaXRpZXMnLCAnYWxsSFdNdHlwZXMnLCAnYWxsSW5zdENvbGxlY3RDb25kaXRpb25zJywgJ2FsbE1hcmtlcnMnLCAnYWxsTmV0d29ya05hbWVzJywgJ2FsbE9ialB0UXVhbGl0aWVzJyxcclxuICAgICAgICAnYWxsT2JqUHRUeXBlcycsICdhbGxTZW5zb3JCcmFuZHMnLCAnYWxsRGVwbG95bWVudFR5cGVzJywgJ2FsbFN0YXR1c1R5cGVzJywgJ2FsbFNlbnNvclR5cGVzJywgJ2FsbE5ldHdvcmtUeXBlcycsICdhbGxWZXJ0aWNhbENvbGxNZXRob2RzJywgJ2FsbFZlcnRpY2FsRGF0dW1zJywgXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICRsb2NhdGlvbiwgJHN0YXRlLCAkaHR0cCwgJGZpbHRlciwgJHVpYk1vZGFsLCBBR0VOQ1ksIENPTlRBQ1RfVFlQRSwgREVQTE9ZTUVOVF9QUklPUklUWSwgRVZFTlRfU1RBVFVTLCBFVkVOVF9UWVBFLCBGSUxFX1RZUEUsIFxyXG4gICAgICAgICAgICBIT1JJWk9OVEFMX0NPTExfTUVUSE9EUywgSE9SSVpPTlRBTF9EQVRVTSwgSE9VU0lOR19UWVBFLCBIV01fUVVBTElUWSwgSFdNX1RZUEUsIElOU1RfQ09MTF9DT05ESVRJT04sIE1BUktFUiwgTkVUV09SS19OQU1FLCBPUF9RVUFMSVRZLCBPUF9UWVBFLCBTRU5TT1JfQlJBTkQsIERFUExPWU1FTlRfVFlQRSwgXHJcbiAgICAgICAgICAgIFNFTlNPUl9UWVBFLCBORVRXT1JLX1RZUEUsIFNUQVRVU19UWVBFLCBWRVJUSUNBTF9DT0xMX01FVEhPRCwgVkVSVElDQUxfREFUVU0sIGFsbFN0YXRlcywgYWxsQWdlbmNpZXMsIGFsbENvbnRhY3RUeXBlcywgYWxsRGVwbG95UHJpb3JpdGllcywgYWxsRXZlbnRTdGF0cywgYWxsRXZlbnRUeXBlcywgYWxsRmlsZVR5cGVzLFxyXG4gICAgICAgICAgICBhbGxIb3JDb2xsTWV0aG9kcywgYWxsSG9yRGF0dW1zLCBhbGxIb3VzZVR5cGVzLCBhbGxIV01xdWFsaXRpZXMsIGFsbEhXTXR5cGVzLCBhbGxJbnN0Q29sbGVjdENvbmRpdGlvbnMsIGFsbE1hcmtlcnMsIGFsbE5ldHdvcmtOYW1lcywgYWxsT2JqUHRRdWFsaXRpZXMsIGFsbE9ialB0VHlwZXMsXHJcbiAgICAgICAgICAgIGFsbFNlbnNvckJyYW5kcywgYWxsRGVwbG95bWVudFR5cGVzLCBhbGxTdGF0dXNUeXBlcywgYWxsU2Vuc29yVHlwZXMsIGFsbE5ldHdvcmtUeXBlcywgYWxsVmVydGljYWxDb2xsTWV0aG9kcywgYWxsVmVydGljYWxEYXR1bXMpIHtcclxuICAgICAgICAgICAgaWYgKCRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gdW5kZWZpbmVkIHx8ICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmF1dGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbG9naW4nKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUudGhpc1BhZ2UgPSBcIlNldHRpbmdzL1Jlc291cmNlc1wiO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFjY291bnRSb2xlID0gJGNvb2tpZXMuZ2V0KCd1c2Vyc1JvbGUnKTtcclxuICAgICAgICAgICAgICAgIC8vIGNoYW5nZSBzb3J0aW5nIG9yZGVyXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc29ydF9ieSA9IGZ1bmN0aW9uIChuZXdTb3J0aW5nT3JkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnNvcnRpbmdPcmRlciA9PSBuZXdTb3J0aW5nT3JkZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJldmVyc2UgPSAhJHNjb3BlLnJldmVyc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zb3J0aW5nT3JkZXIgPSBuZXdTb3J0aW5nT3JkZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gaWNvbiBzZXR1cFxyXG4gICAgICAgICAgICAgICAgICAgICQoJ3RoIGknKS5lYWNoKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWNvbiByZXNldFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKHRoaXMpLnJlbW92ZUNsYXNzKCkuYWRkQ2xhc3MoJ2dseXBoaWNvbiBnbHlwaGljb24tc29ydCcpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucmV2ZXJzZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCd0aC4nICsgbmV3U29ydGluZ09yZGVyICsgJyBpJykucmVtb3ZlQ2xhc3MoKS5hZGRDbGFzcygnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLXVwJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJCgndGguJyArIG5ld1NvcnRpbmdPcmRlciArICcgaScpLnJlbW92ZUNsYXNzKCkuYWRkQ2xhc3MoJ2dseXBoaWNvbiBnbHlwaGljb24tY2hldnJvbi1kb3duJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5sb29rdXBGb3JtID0ge307XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEFnRm9ybSA9IGZhbHNlOyAvL2FkZCBzb21ldGhpbmcgbmV3IHRvIGEgbG9va3VwIGNsaWNrZWQgKHdpbGwgdW5oaWRlIGZvcm0gYmVsb3cgaXQpIEZhbHNlLT4gZm9ybTogaGlkZGVuLCBUcnVlLT4gZm9ybTogdmlzaWJsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZEFnQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc3RhcnQgaXQgYXQgdHJ1ZS4ud2hlbiBjbGlja2VkLCBzaG93IGZvcm0sIGhpZGUgYnV0dG9uXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWN0aXZlTWVudSA9ICcnOyAvL3Njb3BlIGZvciBhY3RpdmUgc2lkZWJhciBpdGVtIGNsaWNrXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVMaXN0ID0gYWxsU3RhdGVzO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBBTEwgTE9PS1VQUyAoYWRkL3VwZGF0ZS9kZWxldGUpXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gQWdlbmN5IEFkZC9VcGRhdGUvRGVsZXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWdlbmN5TGlzdCA9IGFsbEFnZW5jaWVzOyAvL0FnXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEFnRm9ybSA9IGZhbHNlOyAvL2FkZCBzb21ldGhpbmcgbmV3IHRvIGEgbG9va3VwIGNsaWNrZWQgKHdpbGwgdW5oaWRlIGZvcm0gYmVsb3cgaXQpIEZhbHNlLT4gZm9ybTogaGlkZGVuLCBUcnVlLT4gZm9ybTogdmlzaWJsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZEFnQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc3RhcnQgaXQgYXQgdHJ1ZS4ud2hlbiBjbGlja2VkLCBzaG93IGZvcm0sIGhpZGUgYnV0dG9uXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV3QWcgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3Nob3cgQWRkIE5ldyAuLi4uIGNsaWNrZWQsIGhpZGUgdGhlIGJ1dHRvbiBhbmQgc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRBZ0NsaWNrZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRBZ0Zvcm0gPSB0cnVlOyAvL3Nob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkQWdCdXR0b25TaG93aW5nID0gZmFsc2U7IC8vaGlkZSBidXR0b24gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk5ldmVyTWluZEFnID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdBZyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkQWdGb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRBZ0J1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgYnV0dG9uICAgXHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQWRkQWdlbmN5ID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBBR0VOQ1kuc2F2ZSgkc2NvcGUubmV3QWcsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY3lMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0FnID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEFnRm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRBZ0J1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJBZ2VuY3kgQWRkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZUFnZW5jeSA9IGZ1bmN0aW9uIChkYXRhLCBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgQUdFTkNZLnVwZGF0ZSh7IGlkOiBpZCB9LCBkYXRhLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiQWdlbmN5IFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cjtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVsZXRlQWdlbmN5ID0gZnVuY3Rpb24gKGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9tb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhZztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiQWdlbmN5XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChrZXlUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3llcywgcmVtb3ZlIHRoaXMga2V5d29yZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuYWdlbmN5TGlzdC5pbmRleE9mKGFnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ERUxFVEUgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBBR0VOQ1kuZGVsZXRlKHsgaWQ6IGFnLmFnZW5jeV9pZCB9LCBhZywgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFnZW5jeUxpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiQWdlbmN5IFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1N0YXRlQWJicmV2ID0gZnVuY3Rpb24gKGEpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWQgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYS5zdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxlY3RlZCA9ICRmaWx0ZXIoJ2ZpbHRlcicpKCRzY29wZS5zdGF0ZUxpc3QsIHsgc3RhdGVfYWJicmV2OiBhLnN0YXRlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWQubGVuZ3RoID8gc2VsZWN0ZWRbMF0uc3RhdGVfYWJicmV2IDogJyc7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIEFnZW5jeSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBDb250YWN0VHlwZSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvbnRhY3RUeXBlTGlzdCA9IGFsbENvbnRhY3RUeXBlczsgLy9jdFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRDVEZvcm0gPSBmYWxzZTsgLy9hZGQgc29tZXRoaW5nIG5ldyB0byBhIGxvb2t1cCBjbGlja2VkICh3aWxsIHVuaGlkZSBmb3JtIGJlbG93IGl0KSBGYWxzZS0+IGZvcm06IGhpZGRlbiwgVHJ1ZS0+IGZvcm06IHZpc2libGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGRDVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3N0YXJ0IGl0IGF0IHRydWUuLndoZW4gY2xpY2tlZCwgc2hvdyBmb3JtLCBoaWRlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld0NUID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zaG93IEFkZCBOZXcgLi4uLiBjbGlja2VkLCBoaWRlIHRoZSBidXR0b24gYW5kIHNob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkQ1RDbGlja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkQ1RGb3JtID0gdHJ1ZTsgLy9zaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZENUQnV0dG9uU2hvd2luZyA9IGZhbHNlOyAvL2hpZGUgYnV0dG9uICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OZXZlck1pbmRDVCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3Q1QgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZENURm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkQ1RCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IGJ1dHRvbiAgIFxyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkFkZENvbnRhY3RUeXBlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBDT05UQUNUX1RZUEUuc2F2ZSgkc2NvcGUubmV3Q1QsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jb250YWN0VHlwZUxpc3QucHVzaChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3Q1QgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkQ1RGb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZENUQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyB0aGUgYnV0dG9uIGFnYWluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkNvbnRhY3QgVHlwZSBBZGRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZUNvbnRhY3RUeXBlID0gZnVuY3Rpb24gKGRhdGEsIGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBDT05UQUNUX1RZUEUudXBkYXRlKHsgaWQ6IGlkIH0sIGRhdGEsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJDb250YWN0IFR5cGUgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVsZXRlQ29udGFjdFR5cGUgPSBmdW5jdGlvbiAoY3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL21vZGFsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJDb250YWN0IFR5cGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGtleVRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8veWVzLCByZW1vdmUgdGhpcyBrZXl3b3JkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICRzY29wZS5jb250YWN0VHlwZUxpc3QuaW5kZXhPZihjdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vREVMRVRFIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgQ09OVEFDVF9UWVBFLmRlbGV0ZSh7IGlkOiBjdC5jb250YWN0X3R5cGVfaWQgfSwgY3QsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jb250YWN0VHlwZUxpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiQ29udGFjdCBUeXBlIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gQ29udGFjdFR5cGUgQWRkL1VwZGF0ZS9EZWxldGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gZGVwbG95bWVudFByaW9yaXR5IEFkZC9VcGRhdGUvRGVsZXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVwbG95UHJpb3JpdHlMaXN0ID0gYWxsRGVwbG95UHJpb3JpdGllczsgLy9kcFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGREUEZvcm0gPSBmYWxzZTsgLy9hZGQgc29tZXRoaW5nIG5ldyB0byBhIGxvb2t1cCBjbGlja2VkICh3aWxsIHVuaGlkZSBmb3JtIGJlbG93IGl0KSBGYWxzZS0+IGZvcm06IGhpZGRlbiwgVHJ1ZS0+IGZvcm06IHZpc2libGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGREUEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3N0YXJ0IGl0IGF0IHRydWUuLndoZW4gY2xpY2tlZCwgc2hvdyBmb3JtLCBoaWRlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld0RQID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zaG93IEFkZCBOZXcgLi4uLiBjbGlja2VkLCBoaWRlIHRoZSBidXR0b24gYW5kIHNob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkRFBDbGlja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkRFBGb3JtID0gdHJ1ZTsgLy9zaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZERQQnV0dG9uU2hvd2luZyA9IGZhbHNlOyAvL2hpZGUgYnV0dG9uICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OZXZlck1pbmREUCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3RFAgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZERQRm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkRFBCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IGJ1dHRvbiAgIFxyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQWRkRGVwUHJpb3JpdHkgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERFUExPWU1FTlRfUFJJT1JJVFkuc2F2ZSgkc2NvcGUubmV3RFAsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBsb3lQcmlvcml0eUxpc3QucHVzaChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3RFAgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkRFBGb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZERQQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyB0aGUgYnV0dG9uIGFnYWluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkRlcGxveW1lbnQgUHJpb3JpdHkgQWRkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZURlcFByaW9yaXR5ID0gZnVuY3Rpb24gKGRhdGEsIGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBERVBMT1lNRU5UX1BSSU9SSVRZLnVwZGF0ZSh7IGlkOiBpZCB9LCBkYXRhLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRGVwbG95bWVudCBQcmlvcml0eSBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZURlcFByaW9yaXR5ID0gZnVuY3Rpb24gKGRwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJEZXBsb3ltZW50IFByaW9yaXR5XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChrZXlUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuZGVwbG95UHJpb3JpdHlMaXN0LmluZGV4T2YoZHApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERFUExPWU1FTlRfUFJJT1JJVFkuZGVsZXRlKHsgaWQ6IGRwLnByaW9yaXR5X2lkIH0sIGRwLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwbG95UHJpb3JpdHlMaXN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkRlcGxveW1lbnQgUHJpb3JpdHkgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBkZXBsb3ltZW50UHJpb3JpdHkgQWRkL1VwZGF0ZS9EZWxldGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gZXZlbnRTdGF0dXMgQWRkL1VwZGF0ZS9EZWxldGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFN0YXRMaXN0ID0gYWxsRXZlbnRTdGF0czsgLy9lc1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRFU0Zvcm0gPSBmYWxzZTsgLy9hZGQgc29tZXRoaW5nIG5ldyB0byBhIGxvb2t1cCBjbGlja2VkICh3aWxsIHVuaGlkZSBmb3JtIGJlbG93IGl0KSBGYWxzZS0+IGZvcm06IGhpZGRlbiwgVHJ1ZS0+IGZvcm06IHZpc2libGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGRFU0J1dHRvblNob3dpbmcgPSB0cnVlOyAvL3N0YXJ0IGl0IGF0IHRydWUuLndoZW4gY2xpY2tlZCwgc2hvdyBmb3JtLCBoaWRlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld0VTID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zaG93IEFkZCBOZXcgLi4uLiBjbGlja2VkLCBoaWRlIHRoZSBidXR0b24gYW5kIHNob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkRVNDbGlja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkRVNGb3JtID0gdHJ1ZTsgLy9zaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZEVTQnV0dG9uU2hvd2luZyA9IGZhbHNlOyAvL2hpZGUgYnV0dG9uICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OZXZlck1pbmRFUyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3RVMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEVTRm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkRVNCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IGJ1dHRvbiAgIFxyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQWRkRXZlbnRTdGF0ID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBFVkVOVF9TVEFUVVMuc2F2ZSgkc2NvcGUubmV3RVMsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFN0YXRMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0VTID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEVTRm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRFU0J1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJFdmVudCBTdGF0dXMgQWRkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZUV2ZW50U3RhdCA9IGZ1bmN0aW9uIChkYXRhLCBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgRVZFTlRfU1RBVFVTLnVwZGF0ZSh7IGlkOiBpZCB9LCBkYXRhLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRXZlbnQgU3RhdHVzIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cjtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVsZXRlRXZlbnRTdGF0ID0gZnVuY3Rpb24gKGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJFdmVudCBTdGF0dXNcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGtleVRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICRzY29wZS5ldmVudFN0YXRMaXN0LmluZGV4T2YoZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEVWRU5UX1NUQVRVUy5kZWxldGUoeyBpZDogZXMuZXZlbnRfc3RhdHVzX2lkIH0sIGVzLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXZlbnRTdGF0TGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJFdmVudCBTdGF0dXMgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBldmVudFN0YXR1cyBBZGQvVXBkYXRlL0RlbGV0ZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBFdmVudFR5cGUgQWRkL1VwZGF0ZS9EZWxldGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFR5cGVMaXN0ID0gYWxsRXZlbnRUeXBlczsgLy9ldFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRFVEZvcm0gPSBmYWxzZTsgLy9hZGQgc29tZXRoaW5nIG5ldyB0byBhIGxvb2t1cCBjbGlja2VkICh3aWxsIHVuaGlkZSBmb3JtIGJlbG93IGl0KSBGYWxzZS0+IGZvcm06IGhpZGRlbiwgVHJ1ZS0+IGZvcm06IHZpc2libGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGRFVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3N0YXJ0IGl0IGF0IHRydWUuLndoZW4gY2xpY2tlZCwgc2hvdyBmb3JtLCBoaWRlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld0VUID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zaG93IEFkZCBOZXcgLi4uLiBjbGlja2VkLCBoaWRlIHRoZSBidXR0b24gYW5kIHNob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkRVRDbGlja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkRVRGb3JtID0gdHJ1ZTsgLy9zaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZEVUQnV0dG9uU2hvd2luZyA9IGZhbHNlOyAvL2hpZGUgYnV0dG9uICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OZXZlck1pbmRFVCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3RVQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEVURm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkRVRCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IGJ1dHRvbiAgIFxyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkFkZEV2ZW50VHlwZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgRVZFTlRfVFlQRS5zYXZlKCRzY29wZS5uZXdFVCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV2ZW50VHlwZUxpc3QucHVzaChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3RVQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkRVRGb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZEVUQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyB0aGUgYnV0dG9uIGFnYWluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkV2ZW50IFR5cGUgQWRkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhdmVFdmVudFR5cGUgPSBmdW5jdGlvbiAoZGF0YSwgaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIEVWRU5UX1RZUEUudXBkYXRlKHsgaWQ6IGlkIH0sIGRhdGEsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJFdmVudCBUeXBlIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cjtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZUV2ZW50VHlwZSA9IGZ1bmN0aW9uIChldCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkV2ZW50IFR5cGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGtleVRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8veWVzLCByZW1vdmUgdGhpcyBrZXl3b3JkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICRzY29wZS5ldmVudFR5cGVMaXN0LmluZGV4T2YoZXQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL0RFTEVURSBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEVWRU5UX1RZUEUuZGVsZXRlKHsgaWQ6IGV0LmV2ZW50X3R5cGVfaWQgfSwgZXQsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFR5cGVMaXN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkV2ZW50IFR5cGUgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBFdmVudFR5cGUgQWRkL1VwZGF0ZS9EZWxldGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gZmlsZVR5cGUgQWRkL1VwZGF0ZS9EZWxldGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5maWxlVHlwZUxpc3QgPSBhbGxGaWxlVHlwZXM7IC8vZnRcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkRlRGb3JtID0gZmFsc2U7IC8vYWRkIHNvbWV0aGluZyBuZXcgdG8gYSBsb29rdXAgY2xpY2tlZCAod2lsbCB1bmhpZGUgZm9ybSBiZWxvdyBpdCkgRmFsc2UtPiBmb3JtOiBoaWRkZW4sIFRydWUtPiBmb3JtOiB2aXNpYmxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkRlRCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zdGFydCBpdCBhdCB0cnVlLi53aGVuIGNsaWNrZWQsIHNob3cgZm9ybSwgaGlkZSBidXR0b25cclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdGVCA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vc2hvdyBBZGQgTmV3IC4uLi4gY2xpY2tlZCwgaGlkZSB0aGUgYnV0dG9uIGFuZCBzaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEZUQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEZURm9ybSA9IHRydWU7IC8vc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRGVEJ1dHRvblNob3dpbmcgPSBmYWxzZTsgLy9oaWRlIGJ1dHRvbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuTmV2ZXJNaW5kRlQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0ZUID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRGVEZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZEZUQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyBidXR0b24gICBcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkFkZEZpbGVUeXBlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBGSUxFX1RZUEUuc2F2ZSgkc2NvcGUubmV3RlQsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlVHlwZUxpc3QucHVzaChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3RlQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkRlRGb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZEZUQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyB0aGUgYnV0dG9uIGFnYWluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgVHlwZSBBZGRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zYXZlRmlsZVR5cGUgPSBmdW5jdGlvbiAoZGF0YSwgaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIEZJTEVfVFlQRS51cGRhdGUoeyBpZDogaWQgfSwgZGF0YSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgVHlwZSBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZUZpbGVUeXBlID0gZnVuY3Rpb24gKGZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJGaWxlIFR5cGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGtleVRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICRzY29wZS5maWxlVHlwZUxpc3QuaW5kZXhPZihmdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgRklMRV9UWVBFLmRlbGV0ZSh7IGlkOiBmdC5maWxldHlwZV9pZCB9LCBmdCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbGVUeXBlTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIFR5cGUgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBmaWxlVHlwZSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBIb3JDb2xsTWV0aG9kcyBBZGQvVXBkYXRlL0RlbGV0ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmhvckNvbE1ldGhMaXN0ID0gYWxsSG9yQ29sbE1ldGhvZHM7IC8vaGNtXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEhDTUZvcm0gPSBmYWxzZTsgLy9hZGQgc29tZXRoaW5nIG5ldyB0byBhIGxvb2t1cCBjbGlja2VkICh3aWxsIHVuaGlkZSBmb3JtIGJlbG93IGl0KSBGYWxzZS0+IGZvcm06IGhpZGRlbiwgVHJ1ZS0+IGZvcm06IHZpc2libGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGRIQ01CdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zdGFydCBpdCBhdCB0cnVlLi53aGVuIGNsaWNrZWQsIHNob3cgZm9ybSwgaGlkZSBidXR0b25cclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdIQ00gPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3Nob3cgQWRkIE5ldyAuLi4uIGNsaWNrZWQsIGhpZGUgdGhlIGJ1dHRvbiBhbmQgc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRIQ01DbGlja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkSENNRm9ybSA9IHRydWU7IC8vc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRIQ01CdXR0b25TaG93aW5nID0gZmFsc2U7IC8vaGlkZSBidXR0b24gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk5ldmVyTWluZEhDTSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3SENNID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRIQ01Gb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRIQ01CdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IGJ1dHRvbiAgIFxyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQWRkSG9yQ29sbE1ldGhvZCA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgSE9SSVpPTlRBTF9DT0xMX01FVEhPRFMuc2F2ZSgkc2NvcGUubmV3SENNLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaG9yQ29sTWV0aExpc3QucHVzaChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3SENNID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEhDTUZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSENNQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyB0aGUgYnV0dG9uIGFnYWluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkhvcml6b250YWwgQ29sbGVjdGlvbiBNZXRob2QgQWRkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZUhvckNvbGxNZXRob2QgPSBmdW5jdGlvbiAoZGF0YSwgaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIEhPUklaT05UQUxfQ09MTF9NRVRIT0RTLnVwZGF0ZSh7IGlkOiBpZCB9LCBkYXRhLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiSG9yaXpvbnRhbCBDb2xsZWN0aW9uIE1ldGhvZCBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZUhvckNvbGxNZXRob2QgPSBmdW5jdGlvbiAoaGNtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhjbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiSG9yaXpvbnRhbCBDb2xsZWN0aW9uIE1ldGhvZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoa2V5VG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJHNjb3BlLmhvckNvbE1ldGhMaXN0LmluZGV4T2YoaGNtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBIT1JJWk9OVEFMX0NPTExfTUVUSE9EUy5kZWxldGUoeyBpZDogaGNtLmhjb2xsZWN0X21ldGhvZF9pZCB9LCBoY20sIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ob3JDb2xNZXRoTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJIb3Jpem9udGFsIENvbGxlY3Rpb24gTWV0aG9kIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gSG9yQ29sbE1ldGhvZHMgQWRkL1VwZGF0ZS9EZWxldGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gSG9yRGF0dW0gQWRkL1VwZGF0ZS9EZWxldGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5ob3JEYXRMaXN0ID0gYWxsSG9yRGF0dW1zOyAvL2hkXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEhERm9ybSA9IGZhbHNlOyAvL2FkZCBzb21ldGhpbmcgbmV3IHRvIGEgbG9va3VwIGNsaWNrZWQgKHdpbGwgdW5oaWRlIGZvcm0gYmVsb3cgaXQpIEZhbHNlLT4gZm9ybTogaGlkZGVuLCBUcnVlLT4gZm9ybTogdmlzaWJsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZEhEQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc3RhcnQgaXQgYXQgdHJ1ZS4ud2hlbiBjbGlja2VkLCBzaG93IGZvcm0sIGhpZGUgYnV0dG9uXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV3SEQgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3Nob3cgQWRkIE5ldyAuLi4uIGNsaWNrZWQsIGhpZGUgdGhlIGJ1dHRvbiBhbmQgc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRIRENsaWNrZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRIREZvcm0gPSB0cnVlOyAvL3Nob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSERCdXR0b25TaG93aW5nID0gZmFsc2U7IC8vaGlkZSBidXR0b24gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk5ldmVyTWluZEhEID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdIRCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkSERGb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRIREJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgYnV0dG9uICAgXHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQWRkSG9yRGF0dW0gPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEhPUklaT05UQUxfREFUVU0uc2F2ZSgkc2NvcGUubmV3SEQsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ob3JEYXRMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0hEID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEhERm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRIREJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJIb3Jpem9udGFsIERhdHVtIEFkZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5zYXZlSG9yRGF0dW0gPSBmdW5jdGlvbiAoZGF0YSwgaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIEhPUklaT05UQUxfREFUVU0udXBkYXRlKHsgaWQ6IGlkIH0sIGRhdGEsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJIb3Jpem9udGFsIERhdHVtIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cjtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZUhvckRhdHVtID0gZnVuY3Rpb24gKGhkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9tb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiSG9yaXpvbnRhbCBEYXR1bVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoa2V5VG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy95ZXMsIHJlbW92ZSB0aGlzIGtleXdvcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJHNjb3BlLmhvckRhdExpc3QuaW5kZXhPZihoZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vREVMRVRFIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgSE9SSVpPTlRBTF9EQVRVTS5kZWxldGUoeyBpZDogaGQuZGF0dW1faWQgfSwgaGQsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ob3JEYXRMaXN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkhvcml6b250YWwgRGF0dW0gUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBIb3JEYXR1bSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBob3VzZVR5cGUgQWRkL1VwZGF0ZS9EZWxldGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5ob3VzZVR5cGVMaXN0ID0gYWxsSG91c2VUeXBlczsgLy9odFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRIVEZvcm0gPSBmYWxzZTsgLy9hZGQgc29tZXRoaW5nIG5ldyB0byBhIGxvb2t1cCBjbGlja2VkICh3aWxsIHVuaGlkZSBmb3JtIGJlbG93IGl0KSBGYWxzZS0+IGZvcm06IGhpZGRlbiwgVHJ1ZS0+IGZvcm06IHZpc2libGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGRIVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3N0YXJ0IGl0IGF0IHRydWUuLndoZW4gY2xpY2tlZCwgc2hvdyBmb3JtLCBoaWRlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld0hUID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zaG93IEFkZCBOZXcgLi4uLiBjbGlja2VkLCBoaWRlIHRoZSBidXR0b24gYW5kIHNob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkSFRDbGlja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkSFRGb3JtID0gdHJ1ZTsgLy9zaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZEhUQnV0dG9uU2hvd2luZyA9IGZhbHNlOyAvL2hpZGUgYnV0dG9uICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OZXZlck1pbmRIVCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3SFQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEhURm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSFRCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IGJ1dHRvbiAgIFxyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQWRkSG91c2VUeXBlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBIT1VTSU5HX1RZUEUuc2F2ZSgkc2NvcGUubmV3SFQsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ob3VzZVR5cGVMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0hUID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEhURm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRIVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJIb3VzaW5nIFR5cGUgQWRkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZUhvdXNlVHlwZSA9IGZ1bmN0aW9uIChkYXRhLCBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgSE9VU0lOR19UWVBFLnVwZGF0ZSh7IGlkOiBpZCB9LCBkYXRhLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiSG91c2luZyBUeXBlIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cjtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVsZXRlSG91c2VUeXBlID0gZnVuY3Rpb24gKGh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJIb3VzaW5nIFR5cGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGtleVRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICRzY29wZS5ob3VzZVR5cGVMaXN0LmluZGV4T2YoaHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEhPVVNJTkdfVFlQRS5kZWxldGUoeyBpZDogaHQuaG91c2luZ190eXBlX2lkIH0sIGh0LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaG91c2VUeXBlTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJIb3VzaW5nIFR5cGUgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBob3VzaW5nVHlwZSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBod21RdWFsaXR5IEFkZC9VcGRhdGUvRGVsZXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaHdtUXVhbExpc3QgPSBhbGxIV01xdWFsaXRpZXM7IC8vaHdtcVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRIV01RRm9ybSA9IGZhbHNlOyAvL2FkZCBzb21ldGhpbmcgbmV3IHRvIGEgbG9va3VwIGNsaWNrZWQgKHdpbGwgdW5oaWRlIGZvcm0gYmVsb3cgaXQpIEZhbHNlLT4gZm9ybTogaGlkZGVuLCBUcnVlLT4gZm9ybTogdmlzaWJsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZEhXTVFCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zdGFydCBpdCBhdCB0cnVlLi53aGVuIGNsaWNrZWQsIHNob3cgZm9ybSwgaGlkZSBidXR0b25cclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdIV01RID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zaG93IEFkZCBOZXcgLi4uLiBjbGlja2VkLCBoaWRlIHRoZSBidXR0b24gYW5kIHNob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkSFdNUUNsaWNrZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRIV01RRm9ybSA9IHRydWU7IC8vc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRIV01RQnV0dG9uU2hvd2luZyA9IGZhbHNlOyAvL2hpZGUgYnV0dG9uICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OZXZlck1pbmRIV01RID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdIV01RID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRIV01RRm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSFdNUUJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgYnV0dG9uICAgXHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5BZGRId21RdWFsaXR5ID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBIV01fUVVBTElUWS5zYXZlKCRzY29wZS5uZXdIV01RLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtUXVhbExpc3QucHVzaChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3SFdNUSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRIV01RRm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRIV01RQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyB0aGUgYnV0dG9uIGFnYWluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkhXTSBRdWFsaXR5IEFkZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNhdmVId21RdWFsaXR5ID0gZnVuY3Rpb24gKGRhdGEsIGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBIV01fUVVBTElUWS51cGRhdGUoeyBpZDogaWQgfSwgZGF0YSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkhXTSBRdWFsaXR5IFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cjtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVsZXRlSHdtUXVhbGl0eSA9IGZ1bmN0aW9uIChod21xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGh3bXE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkhXTSBRdWFsaXR5XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChrZXlUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuaHdtUXVhbExpc3QuaW5kZXhPZihod21xKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBIV01fUVVBTElUWS5kZWxldGUoeyBpZDogaHdtcS5od21fcXVhbGl0eV9pZCB9LCBod21xLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtUXVhbExpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiSFdNIFF1YWxpdHkgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBldmVudFN0YXR1cyBBZGQvVXBkYXRlL0RlbGV0ZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBId21UeXBlIEFkZC9VcGRhdGUvRGVsZXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaHdtVHlwZUxpc3QgPSBhbGxIV010eXBlczsgLy9od210XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEhXTVRGb3JtID0gZmFsc2U7IC8vYWRkIHNvbWV0aGluZyBuZXcgdG8gYSBsb29rdXAgY2xpY2tlZCAod2lsbCB1bmhpZGUgZm9ybSBiZWxvdyBpdCkgRmFsc2UtPiBmb3JtOiBoaWRkZW4sIFRydWUtPiBmb3JtOiB2aXNpYmxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSFdNVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3N0YXJ0IGl0IGF0IHRydWUuLndoZW4gY2xpY2tlZCwgc2hvdyBmb3JtLCBoaWRlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld0hXTVQgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3Nob3cgQWRkIE5ldyAuLi4uIGNsaWNrZWQsIGhpZGUgdGhlIGJ1dHRvbiBhbmQgc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRIV01UQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEhXTVRGb3JtID0gdHJ1ZTsgLy9zaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZEhXTVRCdXR0b25TaG93aW5nID0gZmFsc2U7IC8vaGlkZSBidXR0b24gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk5ldmVyTWluZEhXTVQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0hXTVQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZEhXTVRGb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRIV01UQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyBidXR0b24gICBcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5BZGRId21UeXBlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBIV01fVFlQRS5zYXZlKCRzY29wZS5uZXdIV01ULCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtVHlwZUxpc3QucHVzaChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3SFdNVCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRIV01URm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRIV01UQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyB0aGUgYnV0dG9uIGFnYWluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkhXTSBUeXBlIEFkZGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5zYXZlSHdtVHlwZSA9IGZ1bmN0aW9uIChkYXRhLCBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgSFdNX1RZUEUudXBkYXRlKHsgaWQ6IGlkIH0sIGRhdGEsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJIV00gVHlwZSBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWxldGVId21UeXBlID0gZnVuY3Rpb24gKGh3bXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL21vZGFsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGh3bXQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkhXTSBUeXBlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChrZXlUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3llcywgcmVtb3ZlIHRoaXMga2V5d29yZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuaHdtVHlwZUxpc3QuaW5kZXhPZihod210KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ERUxFVEUgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBIV01fVFlQRS5kZWxldGUoeyBpZDogaHdtdC5od21fdHlwZV9pZCB9LCBod210LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtVHlwZUxpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiSFdNIFR5cGUgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBId21UeXBlIEFkZC9VcGRhdGUvRGVsZXRlXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIEluc3RDb2xDb25kIEFkZC9VcGRhdGUvRGVsZXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaW5zdENvbENvbmRMaXN0ID0gYWxsSW5zdENvbGxlY3RDb25kaXRpb25zOyAvL2ljY1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRJQ0NGb3JtID0gZmFsc2U7IC8vYWRkIHNvbWV0aGluZyBuZXcgdG8gYSBsb29rdXAgY2xpY2tlZCAod2lsbCB1bmhpZGUgZm9ybSBiZWxvdyBpdCkgRmFsc2UtPiBmb3JtOiBoaWRkZW4sIFRydWUtPiBmb3JtOiB2aXNpYmxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSUNDQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc3RhcnQgaXQgYXQgdHJ1ZS4ud2hlbiBjbGlja2VkLCBzaG93IGZvcm0sIGhpZGUgYnV0dG9uXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV3SUNDID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zaG93IEFkZCBOZXcgLi4uLiBjbGlja2VkLCBoaWRlIHRoZSBidXR0b24gYW5kIHNob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkSUNDQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZElDQ0Zvcm0gPSB0cnVlOyAvL3Nob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSUNDQnV0dG9uU2hvd2luZyA9IGZhbHNlOyAvL2hpZGUgYnV0dG9uICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OZXZlck1pbmRJQ0MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0lDQyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkSUNDRm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkSUNDQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyBidXR0b24gICBcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkFkZEluc3RDb2xDb25kID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBJTlNUX0NPTExfQ09ORElUSU9OLnNhdmUoJHNjb3BlLm5ld0lDQywgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmluc3RDb2xDb25kTGlzdC5wdXNoKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdJQ0MgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkSUNDRm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRJQ0NCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IHRoZSBidXR0b24gYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiSW5zdHJ1bWVudCBDb2xsZWN0aW9uIENvbmRpdGlvbiBBZGRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zYXZlSW5zdENvbENvbmQgPSBmdW5jdGlvbiAoZGF0YSwgaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIElOU1RfQ09MTF9DT05ESVRJT04udXBkYXRlKHsgaWQ6IGlkIH0sIGRhdGEsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJJbnN0cnVtZW50IENvbGxlY3Rpb24gQ29uZGl0aW9uIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cjtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVsZXRlSW5zdENvbENvbmQgPSBmdW5jdGlvbiAoaWNjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGljYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiSW5zdHJ1bWVudCBDb2xsZWN0aW9uIENvbmRpdGlvblwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoa2V5VG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJHNjb3BlLmluc3RDb2xDb25kTGlzdC5pbmRleE9mKGljYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgSU5TVF9DT0xMX0NPTkRJVElPTi5kZWxldGUoeyBpZDogaWNjLmlkIH0sIGljYywgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmluc3RDb2xDb25kTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJJbnN0cnVtZW50IENvbGxlY3Rpb24gQ29uZGl0aW9uIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gSW5zdENvbENvbmQgQWRkL1VwZGF0ZS9EZWxldGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gTWFya2VyIEFkZC9VcGRhdGUvRGVsZXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubWFya0xpc3QgPSBhbGxNYXJrZXJzOyAvL21cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkTUZvcm0gPSBmYWxzZTsgLy9hZGQgc29tZXRoaW5nIG5ldyB0byBhIGxvb2t1cCBjbGlja2VkICh3aWxsIHVuaGlkZSBmb3JtIGJlbG93IGl0KSBGYWxzZS0+IGZvcm06IGhpZGRlbiwgVHJ1ZS0+IGZvcm06IHZpc2libGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGRNQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc3RhcnQgaXQgYXQgdHJ1ZS4ud2hlbiBjbGlja2VkLCBzaG93IGZvcm0sIGhpZGUgYnV0dG9uXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV3TSA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vc2hvdyBBZGQgTmV3IC4uLi4gY2xpY2tlZCwgaGlkZSB0aGUgYnV0dG9uIGFuZCBzaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZE1DbGlja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkTUZvcm0gPSB0cnVlOyAvL3Nob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkTUJ1dHRvblNob3dpbmcgPSBmYWxzZTsgLy9oaWRlIGJ1dHRvbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuTmV2ZXJNaW5kTSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3TSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkTUZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZE1CdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IGJ1dHRvbiAgIFxyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQWRkTWFya2VyID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBNQVJLRVIuc2F2ZSgkc2NvcGUubmV3TSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld00gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkTUZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkTUJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJNYXJrZXIgQWRkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZU1hcmtlciA9IGZ1bmN0aW9uIChkYXRhLCBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgTUFSS0VSLnVwZGF0ZSh7IGlkOiBpZCB9LCBkYXRhLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiTWFya2VyIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cjtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVsZXRlTWFya2VyID0gZnVuY3Rpb24gKG0pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTWFya2VyXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChrZXlUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUubWFya0xpc3QuaW5kZXhPZihtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBNQVJLRVIuZGVsZXRlKHsgaWQ6IG0ubWFya2VyX2lkIH0sIG0sIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXJrTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJNYXJrZXIgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBNYXJrZXIgQWRkL1VwZGF0ZS9EZWxldGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gTmV0d29ya05hbWUgQWRkL1VwZGF0ZS9EZWxldGUgbm5cclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXROYW1lTGlzdCA9IGFsbE5ldHdvcmtOYW1lczsgLy9ublxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGROTkZvcm0gPSBmYWxzZTsgLy9hZGQgc29tZXRoaW5nIG5ldyB0byBhIGxvb2t1cCBjbGlja2VkICh3aWxsIHVuaGlkZSBmb3JtIGJlbG93IGl0KSBGYWxzZS0+IGZvcm06IGhpZGRlbiwgVHJ1ZS0+IGZvcm06IHZpc2libGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGROTkJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3N0YXJ0IGl0IGF0IHRydWUuLndoZW4gY2xpY2tlZCwgc2hvdyBmb3JtLCBoaWRlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld05OID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zaG93IEFkZCBOZXcgLi4uLiBjbGlja2VkLCBoaWRlIHRoZSBidXR0b24gYW5kIHNob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkTk5DbGlja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkTk5Gb3JtID0gdHJ1ZTsgLy9zaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZE5OQnV0dG9uU2hvd2luZyA9IGZhbHNlOyAvL2hpZGUgYnV0dG9uICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OZXZlck1pbmROTiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3Tk4gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZE5ORm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkTk5CdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IGJ1dHRvbiAgIFxyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQWRkTmV0d29ya05hbWUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE5FVFdPUktfTkFNRS5zYXZlKCRzY29wZS5uZXdOTiwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ldE5hbWVMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld05OID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZE5ORm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGROTkJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJOZXR3b3JrIE5hbWUgQWRkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZU5ldHdvcmtOYW1lID0gZnVuY3Rpb24gKGRhdGEsIGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBORVRXT1JLX05BTUUudXBkYXRlKHsgaWQ6IGlkIH0sIGRhdGEsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJOZXR3b3JrIE5hbWUgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWxldGVOZXR3b3JrTmFtZSA9IGZ1bmN0aW9uIChubikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBubjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTmV0d29yayBOYW1lXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChrZXlUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUubmV0TmFtZUxpc3QuaW5kZXhPZihubik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTkVUV09SS19OQU1FLmRlbGV0ZSh7IGlkOiBubi5uZXR3b3JrX25hbWVfaWQgfSwgbm4sIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXROYW1lTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJOZXR3b3JrIE5hbWUgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBOZXR3b3JrTmFtZSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBPUFF1YWxpdHkgQWRkL1VwZGF0ZS9EZWxldGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5vcFF1YWxMaXN0ID0gYWxsT2JqUHRRdWFsaXRpZXM7IC8vb3BxXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZE9QUUZvcm0gPSBmYWxzZTsgLy9hZGQgc29tZXRoaW5nIG5ldyB0byBhIGxvb2t1cCBjbGlja2VkICh3aWxsIHVuaGlkZSBmb3JtIGJlbG93IGl0KSBGYWxzZS0+IGZvcm06IGhpZGRlbiwgVHJ1ZS0+IGZvcm06IHZpc2libGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGRPUFFCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zdGFydCBpdCBhdCB0cnVlLi53aGVuIGNsaWNrZWQsIHNob3cgZm9ybSwgaGlkZSBidXR0b25cclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdPUFEgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3Nob3cgQWRkIE5ldyAuLi4uIGNsaWNrZWQsIGhpZGUgdGhlIGJ1dHRvbiBhbmQgc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRPUFFDbGlja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkT1BRRm9ybSA9IHRydWU7IC8vc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRPUFFCdXR0b25TaG93aW5nID0gZmFsc2U7IC8vaGlkZSBidXR0b24gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk5ldmVyTWluZE9QUSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3T1BRID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRPUFFGb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRPUFFCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IGJ1dHRvbiAgIFxyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkFkZE9QUXVhbGl0eSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgT1BfUVVBTElUWS5zYXZlKCRzY29wZS5uZXdPUFEsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcFF1YWxMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld09QUSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRPUFFGb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZE9QUUJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJPYmplY3RpdmUgUG9pbnQgUXVhbGl0eSBBZGRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZU9QUXVhbGl0eSA9IGZ1bmN0aW9uIChkYXRhLCBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgT1BfUVVBTElUWS51cGRhdGUoeyBpZDogaWQgfSwgZGF0YSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIk9iamVjdGl2ZSBQb2ludCBRdWFsaXR5IFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cjtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZU9QUXVhbGl0eSA9IGZ1bmN0aW9uIChvcHEpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL21vZGFsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wcTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiT2JqZWN0aXZlIFBvaW50IFF1YWxpdHlcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGtleVRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8veWVzLCByZW1vdmUgdGhpcyBrZXl3b3JkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICRzY29wZS5vcFF1YWxMaXN0LmluZGV4T2Yob3BxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ERUxFVEUgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBPUF9RVUFMSVRZLmRlbGV0ZSh7IGlkOiBvcHEub3BfcXVhbGl0eV9pZCB9LCBvcHEsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcFF1YWxMaXN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIk9iamVjdGl2ZSBQb2ludCBRdWFsaXR5IFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gT1BRdWFsaXR5IEFkZC9VcGRhdGUvRGVsZXRlXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIE9QVHlwZSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm9wVHlwZUxpc3QgPSBhbGxPYmpQdFR5cGVzOyAvL29wdFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRPUFRGb3JtID0gZmFsc2U7IC8vYWRkIHNvbWV0aGluZyBuZXcgdG8gYSBsb29rdXAgY2xpY2tlZCAod2lsbCB1bmhpZGUgZm9ybSBiZWxvdyBpdCkgRmFsc2UtPiBmb3JtOiBoaWRkZW4sIFRydWUtPiBmb3JtOiB2aXNpYmxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkT1BUQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc3RhcnQgaXQgYXQgdHJ1ZS4ud2hlbiBjbGlja2VkLCBzaG93IGZvcm0sIGhpZGUgYnV0dG9uXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV3T1BUID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zaG93IEFkZCBOZXcgLi4uLiBjbGlja2VkLCBoaWRlIHRoZSBidXR0b24gYW5kIHNob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkT1BUQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZE9QVEZvcm0gPSB0cnVlOyAvL3Nob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkT1BUQnV0dG9uU2hvd2luZyA9IGZhbHNlOyAvL2hpZGUgYnV0dG9uICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OZXZlck1pbmRPUFQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld09QVCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkT1BURm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkT1BUQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyBidXR0b24gICBcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkFkZE9QVHlwZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgT1BfVFlQRS5zYXZlKCRzY29wZS5uZXdPUFQsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcFR5cGVMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld09QVCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRPUFRGb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZE9QVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJPYmplY3RpdmUgUG9pbnQgVHlwZSBBZGRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zYXZlT1BUeXBlID0gZnVuY3Rpb24gKGRhdGEsIGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBPUF9UWVBFLnVwZGF0ZSh7IGlkOiBpZCB9LCBkYXRhLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiT2JqZWN0aXZlIFBvaW50IFR5cGUgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWxldGVPUFR5cGUgPSBmdW5jdGlvbiAob3B0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiT2JqZWN0aXZlIFBvaW50IFR5cGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGtleVRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICRzY29wZS5vcFR5cGVMaXN0LmluZGV4T2Yob3B0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBPUF9UWVBFLmRlbGV0ZSh7IGlkOiBvcHQub2JqZWN0aXZlX3BvaW50X3R5cGVfaWQgfSwgb3B0LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3BUeXBlTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJPYmplY3RpdmUgUG9pbnQgVHlwZSBSZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbG9naWMgZm9yIGNhbmNlbFxyXG4gICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIE9QVHlwZSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBTZW5zb3JCcmFuZCBBZGQvVXBkYXRlL0RlbGV0ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNCcmFuZExpc3QgPSBhbGxTZW5zb3JCcmFuZHM7IC8vc2JcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkU0JGb3JtID0gZmFsc2U7IC8vYWRkIHNvbWV0aGluZyBuZXcgdG8gYSBsb29rdXAgY2xpY2tlZCAod2lsbCB1bmhpZGUgZm9ybSBiZWxvdyBpdCkgRmFsc2UtPiBmb3JtOiBoaWRkZW4sIFRydWUtPiBmb3JtOiB2aXNpYmxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkU0JCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zdGFydCBpdCBhdCB0cnVlLi53aGVuIGNsaWNrZWQsIHNob3cgZm9ybSwgaGlkZSBidXR0b25cclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdTQiA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vc2hvdyBBZGQgTmV3IC4uLi4gY2xpY2tlZCwgaGlkZSB0aGUgYnV0dG9uIGFuZCBzaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZFNCQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZFNCRm9ybSA9IHRydWU7IC8vc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRTQkJ1dHRvblNob3dpbmcgPSBmYWxzZTsgLy9oaWRlIGJ1dHRvbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuTmV2ZXJNaW5kU0IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1NCID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRTQkZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZFNCQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyBidXR0b24gICBcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkFkZFNlbnNvckJyYW5kID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTRU5TT1JfQlJBTkQuc2F2ZSgkc2NvcGUubmV3U0IsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZW5zQnJhbmRMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1NCID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZFNCRm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRTQkJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJTZW5zb3IgQnJhbmQgQWRkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZVNlbnNvckJyYW5kID0gZnVuY3Rpb24gKGRhdGEsIGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBTRU5TT1JfQlJBTkQudXBkYXRlKHsgaWQ6IGlkIH0sIGRhdGEsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJTZW5zb3IgQnJhbmQgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWxldGVTZW5zb3JCcmFuZCA9IGZ1bmN0aW9uIChzYikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzYjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiU2Vuc29yIEJyYW5kXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChrZXlUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuc2Vuc0JyYW5kTGlzdC5pbmRleE9mKHNiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTRU5TT1JfQlJBTkQuZGVsZXRlKHsgaWQ6IHNiLnNlbnNvcl9icmFuZF9pZCB9LCBzYiwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNCcmFuZExpc3Quc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiU2Vuc29yIEJyYW5kIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gU2Vuc29yQnJhbmQgQWRkL1VwZGF0ZS9EZWxldGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gRGVwVHlwZSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlcFR5cGVMaXN0ID0gYWxsRGVwbG95bWVudFR5cGVzOyAvL2R0XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZERURm9ybSA9IGZhbHNlOyAvL2FkZCBzb21ldGhpbmcgbmV3IHRvIGEgbG9va3VwIGNsaWNrZWQgKHdpbGwgdW5oaWRlIGZvcm0gYmVsb3cgaXQpIEZhbHNlLT4gZm9ybTogaGlkZGVuLCBUcnVlLT4gZm9ybTogdmlzaWJsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZERUQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc3RhcnQgaXQgYXQgdHJ1ZS4ud2hlbiBjbGlja2VkLCBzaG93IGZvcm0sIGhpZGUgYnV0dG9uXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV3RFQgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3Nob3cgQWRkIE5ldyAuLi4uIGNsaWNrZWQsIGhpZGUgdGhlIGJ1dHRvbiBhbmQgc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGREVENsaWNrZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGREVEZvcm0gPSB0cnVlOyAvL3Nob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkRFRCdXR0b25TaG93aW5nID0gZmFsc2U7IC8vaGlkZSBidXR0b24gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk5ldmVyTWluZERUID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdEVCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkRFRGb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGREVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgYnV0dG9uICAgXHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQWRkRGVwVHlwZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgREVQTE9ZTUVOVF9UWVBFLnNhdmUoJHNjb3BlLm5ld0RULCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGVwVHlwZUxpc3QucHVzaChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3RFQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkRFRGb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZERUQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyB0aGUgYnV0dG9uIGFnYWluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkRlcGxveW1lbnQgVHlwZSBBZGRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZURlcFR5cGUgPSBmdW5jdGlvbiAoZGF0YSwgaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIERFUExPWU1FTlRfVFlQRS51cGRhdGUoeyBpZDogaWQgfSwgZGF0YSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkRlcGxveW1lbnQgVHlwZSBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWxldGVEZXBUeXBlID0gZnVuY3Rpb24gKGR0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9tb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiRGVwbG95bWVudCBUeXBlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChrZXlUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3llcywgcmVtb3ZlIHRoaXMga2V5d29yZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuZGVwVHlwZUxpc3QuaW5kZXhPZihkdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vREVMRVRFIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgREVQTE9ZTUVOVF9UWVBFLmRlbGV0ZSh7IGlkOiBkdC5kZXBsb3ltZW50X3R5cGVfaWQgfSwgZHQsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBUeXBlTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJEZXBsb3ltZW50IFR5cGUgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBEZXBUeXBlIEFkZC9VcGRhdGUvRGVsZXRlXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIFN0YXR1c1R5cGUgQWRkL1VwZGF0ZS9EZWxldGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdGF0VHlwZUxpc3QgPSBhbGxTdGF0dXNUeXBlczsgLy9zdGF0VFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRTdGF0VEZvcm0gPSBmYWxzZTsgLy9hZGQgc29tZXRoaW5nIG5ldyB0byBhIGxvb2t1cCBjbGlja2VkICh3aWxsIHVuaGlkZSBmb3JtIGJlbG93IGl0KSBGYWxzZS0+IGZvcm06IGhpZGRlbiwgVHJ1ZS0+IGZvcm06IHZpc2libGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGRTdGF0VEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3N0YXJ0IGl0IGF0IHRydWUuLndoZW4gY2xpY2tlZCwgc2hvdyBmb3JtLCBoaWRlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld1N0YXRUID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zaG93IEFkZCBOZXcgLi4uLiBjbGlja2VkLCBoaWRlIHRoZSBidXR0b24gYW5kIHNob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkU3RhdFRDbGlja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkU3RhdFRGb3JtID0gdHJ1ZTsgLy9zaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZFN0YXRUQnV0dG9uU2hvd2luZyA9IGZhbHNlOyAvL2hpZGUgYnV0dG9uICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OZXZlck1pbmRTdGF0VCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3U3RhdFQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZFN0YXRURm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkU3RhdFRCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IGJ1dHRvbiAgIFxyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQWRkU3RhdHVzVHlwZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgU1RBVFVTX1RZUEUuc2F2ZSgkc2NvcGUubmV3U3RhdFQsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0VHlwZUxpc3QucHVzaChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3U3RhdFRUID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZFN0YXRURm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRTdGF0VEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJTdGF0dXMgVHlwZSBBZGRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zYXZlU3RhdHVzVHlwZSA9IGZ1bmN0aW9uIChkYXRhLCBpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgU1RBVFVTX1RZUEUudXBkYXRlKHsgaWQ6IGlkIH0sIGRhdGEsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJTdGF0dXMgVHlwZSBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRlbGV0ZVN0YXR1c1R5cGUgPSBmdW5jdGlvbiAoc3RhdFQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhdFQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIlN0YXR1cyBUeXBlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChrZXlUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUuc3RhdFR5cGVMaXN0LmluZGV4T2Yoc3RhdFQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNUQVRVU19UWVBFLmRlbGV0ZSh7IGlkOiBzdGF0VC5zdGF0dXNfdHlwZV9pZCB9LCBzdGF0VCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRUeXBlTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJTdGF0dXMgVHlwZSBSZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbG9naWMgZm9yIGNhbmNlbFxyXG4gICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIFN0YXR1c1R5cGUgQWRkL1VwZGF0ZS9EZWxldGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gU2Vuc29yVHlwZSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNUeXBlTGlzdCA9IGFsbFNlbnNvclR5cGVzOy8vIGFsbFNlbnNvclR5cGVzOyAvL3NlblRcclxuICAgICAgICAgICAgICAgICRzY29wZS5uZXdEZXBUeXBlUmVsYXRpbmcgPSBbXTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jb21tYVNlcERlcE1FVEhPRFMgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2FkZCB0aGUgZGVwbG95bWVudCB0eXBlc1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmZvcm1hdHRlZFNlbnNUeXBlTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNUeXBlTGlzdC5mb3JFYWNoKGZ1bmN0aW9uIChzZW5zVHlwZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIFNFTlNPUl9UWVBFLmdldFNlbnNvckRlcGxveW1lbnRUeXBlcyh7IGlkOiBzZW5zVHlwZS5zZW5zb3JfdHlwZV9pZCB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZXBzID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbnNUeXBlLkRlcFR5cGVzID0gW107IHZhciBEZXBNU3RyaW5ncyA9IFtdOyBzZW5zVHlwZS5EZXBNRVRIT0RTdHJpbmdzID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRlcHMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwcy5mb3JFYWNoKGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vuc1R5cGUuRGVwVHlwZXMucHVzaChkLmRlcGxveW1lbnRfdHlwZV9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGVwTVN0cmluZ3MucHVzaChkLm1ldGhvZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vuc1R5cGUuRGVwTUVUSE9EU3RyaW5ncyA9IERlcE1TdHJpbmdzLmpvaW4oJywgJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZm9ybWF0dGVkU2Vuc1R5cGVMaXN0LnB1c2goc2Vuc1R5cGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9jaGVja2xpc3QgZm9yIGRlcGxveW1lbnQgdHlwZXNcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93RGVwVHlwZXMgPSBmdW5jdGlvbiAoU2VuVCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZWxlY3RlZCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuZGVwVHlwZUxpc3QsIGZ1bmN0aW9uIChzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChTZW5ULkRlcFR5cGVzLmluZGV4T2Yocy5kZXBsb3ltZW50X3R5cGVfaWQpID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkLnB1c2gocy5tZXRob2QpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbGVjdGVkLmxlbmd0aCA/IHNlbGVjdGVkLmpvaW4oJywgJykgOiBcIlwiO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5yZW1vdmVUaGVzZURlcFR5cGVzID0gW107IC8vdGhlc2UgYXJlIHRoZSBvbmVzIHRvIHJlbW92ZSB3aGVuIHRoZXkgY2xpY2sgc2F2ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNoZWNrTGlzdENoZWNrID0gZnVuY3Rpb24gKG9yaWdpbmFsQ2hlY2tlZCwgbm93Q2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vb3JpZ2luYWxDaGVja2VkIC0tIHdoYXQgdGhlIG1vZGVsIGhhZCBiZWZvcmUgdGhpcyBjbGljayBldmVudCB3YXMgdHJpZ2dlcmVkXHJcbiAgICAgICAgICAgICAgICAgICAgLy9ub3dDaGVja2VkIC0tIHdoYXQgZGVwbG95bWVudCB0eXBlcyBhcmUgbm93IGNoZWNrZWQuLiBsb29rIGZvciBkaWZmZXJlbmNlcyBhbmQgcmVtb3ZlIGlmIGxlc3MgdGhhbiwgb3RoZXIgd2lzZSBkbyBub3RoaW5nLCB0aGUgc2F2ZSB3aWxsIGhhbmRsZSBhZGRpbmdcclxuICAgICAgICAgICAgICAgICAgICBpZiAobm93Q2hlY2tlZC5sZW5ndGggPCBvcmlnaW5hbENoZWNrZWQubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdW5jaGVja2VkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaChvcmlnaW5hbENoZWNrZWQsIGZ1bmN0aW9uIChvYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG5vd0NoZWNrZWQuaW5kZXhPZihvYykgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3QgdGhlcmUgYW55bW9yZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZWxldGVEZXAgPSAkc2NvcGUuZGVwVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChkdCkgeyByZXR1cm4gZHQuZGVwbG95bWVudF90eXBlX2lkID09IG9jOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSB5b3UgZG9uJ3QgYWRkIGl0IHR3aWNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5yZW1vdmVUaGVzZURlcFR5cGVzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCAkc2NvcGUucmVtb3ZlVGhlc2VEZXBUeXBlcy5sZW5ndGg7IGQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5yZW1vdmVUaGVzZURlcFR5cGVzW2RdLmRlcGxveW1lbnRfdHlwZV9pZCA9PSBkZWxldGVEZXAuZGVwbG95bWVudF90eXBlX2lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9mb3JnZXR0YWJvdXQgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gJHNjb3BlLm5ld0RlcFR5cGVSZWxhdGluZy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZW1vdmVUaGVzZURlcFR5cGVzLnB1c2goZGVsZXRlRGVwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZW1vdmVUaGVzZURlcFR5cGVzLnB1c2goZGVsZXRlRGVwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZFNlblRGb3JtID0gZmFsc2U7IC8vYWRkIHNvbWV0aGluZyBuZXcgdG8gYSBsb29rdXAgY2xpY2tlZCAod2lsbCB1bmhpZGUgZm9ybSBiZWxvdyBpdCkgRmFsc2UtPiBmb3JtOiBoaWRkZW4sIFRydWUtPiBmb3JtOiB2aXNpYmxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkU2VuVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3N0YXJ0IGl0IGF0IHRydWUuLndoZW4gY2xpY2tlZCwgc2hvdyBmb3JtLCBoaWRlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld1NlblQgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3Nob3cgQWRkIE5ldyAuLi4uIGNsaWNrZWQsIGhpZGUgdGhlIGJ1dHRvbiBhbmQgc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRTZW5UQ2xpY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZFNlblRGb3JtID0gdHJ1ZTsgLy9zaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZFNlblRCdXR0b25TaG93aW5nID0gZmFsc2U7IC8vaGlkZSBidXR0b24gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk5ldmVyTWluZFNlblQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1NlblQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3RGVwVHlwZVJlbGF0aW5nID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5kZXBUeXBlTGlzdCwgZnVuY3Rpb24gKGQpIHsgZC5zZWxlY3RlZCA9IGZhbHNlOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZFNlblRGb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRTZW5UQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyBidXR0b24gICBcclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy9uZXcgc2Vuc29yIHR5cGUgYmVpbmcgYWRkZWQsIHRoZXkgY2hlY2tlZCB0byByZWxhdGUgYSBkZXBsb3ltZW50IHR5cGUuIHN0b3JlIGZvciB1c2UgZHVyaW5nIHNhdmVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGREZXBUeXBlVG9OZXdTZW5UID0gZnVuY3Rpb24gKGR0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGR0LnNlbGVjdGVkID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZG9udCBhZGQgaXQgbW9yZSB0aGFuIG9uY2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5uZXdEZXBUeXBlUmVsYXRpbmcubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZCA9IDA7IGQgPCAkc2NvcGUubmV3RGVwVHlwZVJlbGF0aW5nLmxlbmd0aDsgZCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5uZXdEZXBUeXBlUmVsYXRpbmdbZF0uZGVwbG95bWVudF90eXBlX2lkID09IGR0LmRlcGxveW1lbnRfdHlwZV9pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2ZvcmdldHRhYm91dCBpdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkID0gJHNjb3BlLm5ld0RlcFR5cGVSZWxhdGluZy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0RlcFR5cGVSZWxhdGluZy5wdXNoKGR0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZCA9ICRzY29wZS5uZXdEZXBUeXBlUmVsYXRpbmcubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5uZXdEZXBUeXBlUmVsYXRpbmcubGVuZ3RoID09PSAwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld0RlcFR5cGVSZWxhdGluZy5wdXNoKGR0KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5BZGRTZW5zb3JUeXBlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBuZXdTZW5zb3IgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlbGF0ZWREZXBzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTRU5TT1JfVFlQRS5zYXZlKCRzY29wZS5uZXdTZW5ULCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdTZW5zb3IgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdTZW5UID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZFNlblRGb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZFNlblRCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IHRoZSBidXR0b24gYWdhaW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbm93IHNlZSBpZiB0aGV5IHJlbGF0ZWQgYW55IGRlcGxveSBzZW5zb3JzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLm5ld0RlcFR5cGVSZWxhdGluZy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5uZXdEZXBUeXBlUmVsYXRpbmcsIGZ1bmN0aW9uIChuZHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIG5kdC5zZWxlY3RlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVsYXRlZERlcHMucHVzaChuZHQuZGVwbG95bWVudF90eXBlX2lkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU0VOU09SX1RZUEUuYWRkU2Vuc29yRGVwbG95bWVudFR5cGUoeyBzZW5zb3JUeXBlSWQ6IG5ld1NlbnNvci5zZW5zb3JfdHlwZV9pZCxkZXBsb3ltZW50VHlwZUlkOiBuZHQuZGVwbG95bWVudF90eXBlX2lkIH0sIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHdoYXQgPSBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV3U2Vuc29yLkRlcFR5cGVzID0gcmVsYXRlZERlcHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZm9ybWF0dGVkU2Vuc1R5cGVMaXN0LnB1c2gobmV3U2Vuc29yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiU2Vuc29yIFR5cGUgQWRkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZVNlbnNvclR5cGUgPSBmdW5jdGlvbiAoZGF0YSwgaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcHVsbCBvdXQganVzdCB0aGUgc2Vuc29yIGFuZCB0aGVuIHRoZSBkZXBsb3ltZW50IHR5cGUgdG8gcG9zdCBzZXBhcmF0ZWx5XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIFNUID0geyBzZW5zb3JfdHlwZV9pZDogZGF0YS5zZW5zb3JfdHlwZV9pZCwgc2Vuc29yOiBkYXRhLnNlbnNvciB9O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBEVHMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAvL2dldCB0aGUgRGVwbG95bWVudCBUeXBlcyBmcm9tIHRoZSBsaXN0IG9mIGlkcyBpbiBkYXRhLkRlcFR5cGVzXHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5kZXBUeXBlTGlzdCwgZnVuY3Rpb24gKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGEuRGVwVHlwZXMuaW5kZXhPZihzLmRlcGxveW1lbnRfdHlwZV9pZCkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNEVCA9IHsgZGVwbG95bWVudF90eXBlX2lkOiBzLmRlcGxveW1lbnRfdHlwZV9pZCwgbWV0aG9kOiBzLm1ldGhvZCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRFRzLnB1c2godGhpc0RUKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbm93IHVwZGF0ZSB0aGUgc2Vuc29yIGFuZCB0aGVuIGFueSBEZXAgVHlwZXMgdGhleSBhZGRlZCBvciByZW1vdmVkXHJcbiAgICAgICAgICAgICAgICAgICAgU0VOU09SX1RZUEUudXBkYXRlKHsgaWQ6IGlkIH0sIGRhdGEsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKERUcywgZnVuY3Rpb24gKGR0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTRU5TT1JfVFlQRS5hZGRTZW5zb3JEZXBsb3ltZW50VHlwZSh7IHNlbnNvclR5cGVJZDogaWQsIGRlcGxveW1lbnRUeXBlSWQ6IG5kdC5kZXBsb3ltZW50X3R5cGVfaWQgfSwgZHQsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJEZXBsb3ltZW50IFR5cGUgaXMgbm93IHJlbGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3aGF0ID0gZXJyb3JSZXNwb25zZTEuc3RhdHVzVGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJTZW5zb3IgVHlwZSBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KS4kcHJvbWlzZS50aGVuKFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3JlbW92ZSB0aG9zZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLnJlbW92ZVRoZXNlRGVwVHlwZXMsIGZ1bmN0aW9uIChyZHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNFTlNPUl9UWVBFLnJlbW92ZVNlbnNvckRlcGxveW1lbnRUeXBlKHsgc2Vuc29yVHlwZUlkOiBpZCwgRGVwbG95bWVudFR5cGVJZDogcmR0LmRlcGxveW1lbnRfdHlwZV9pZCB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRGVwbG95bWVudCBUeXBlIGlzIG5vIGxvbmdlciByZWxhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB3aGF0ID0gZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgKTtcclxuICAgICAgICAgICAgICAgICAgICAvL25vdyBtYWtlIHN1cmUgJHNjb3BlIG1vZGVsIGlzIHVwZGF0ZWQ/XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWxldGVTZW5zb3JUeXBlID0gZnVuY3Rpb24gKHNlblQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc2VuVDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiU2Vuc29yIFR5cGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGtleVRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9ICRzY29wZS5mb3JtYXR0ZWRTZW5zVHlwZUxpc3QuaW5kZXhPZihzZW5UKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIFNUID0geyBzZW5zb3JfdHlwZV9pZDogc2VuVC5zZW5zb3JfdHlwZV9pZCwgc2Vuc29yOiBzZW5ULnNlbnNvciB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25lZWQgdG8gZGVsZXRlIHRoZSByZWxhdGlvbnNoaXAgYmVmb3JlIEkgY2FuIGRlbGV0ZSB0aGUgc2Vuc29yIHR5cGUgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmRlcFR5cGVMaXN0LCBmdW5jdGlvbiAocykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNlblQuRGVwVHlwZXMuaW5kZXhPZihzLmRlcGxveW1lbnRfdHlwZV9pZCkgPj0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZ2V0IGl0IGFuZCB0aGVuIGRlbGV0ZSB0aGUgcmVsYXRpb25zaGlwXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNEVCA9IHsgZGVwbG95bWVudF90eXBlX2lkOiBzLmRlcGxveW1lbnRfdHlwZV9pZCwgbWV0aG9kOiBzLm1ldGhvZCB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNFTlNPUl9UWVBFLnJlbW92ZVNlbnNvckRlcGxveW1lbnRUeXBlKHsgc2Vuc29yVHlwZUlkOiBTVC5zZW5zb3JfdHlwZV9pZCwgRGVwbG95bWVudFR5cGVJZDogdGhpc0RULmRlcGxveW1lbnRfdHlwZV9pZCB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbm93IGRlbGV0ZSB0aGUgc2Vuc29yICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgU0VOU09SX1RZUEUuZGVsZXRlKHsgaWQ6IFNULnNlbnNvcl90eXBlX2lkIH0sIFNULCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZm9ybWF0dGVkU2Vuc1R5cGVMaXN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2dldCB0aGUgRGVwbG95bWVudCBUeXBlcyBmcm9tIHRoZSBsaXN0IG9mIGlkcyBpbiBkYXRhLkRlcFR5cGVzXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJTZW5zb3IgVHlwZSBSZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbG9naWMgZm9yIGNhbmNlbFxyXG4gICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIFNlbnNvclR5cGUgQWRkL1VwZGF0ZS9EZWxldGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gTmV0VHlwZSBBZGQvVXBkYXRlL0RlbGV0ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ldFR5cGVMaXN0ID0gYWxsTmV0d29ya1R5cGVzOyAvL250XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZE5URm9ybSA9IGZhbHNlOyAvL2FkZCBzb21ldGhpbmcgbmV3IHRvIGEgbG9va3VwIGNsaWNrZWQgKHdpbGwgdW5oaWRlIGZvcm0gYmVsb3cgaXQpIEZhbHNlLT4gZm9ybTogaGlkZGVuLCBUcnVlLT4gZm9ybTogdmlzaWJsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZE5UQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc3RhcnQgaXQgYXQgdHJ1ZS4ud2hlbiBjbGlja2VkLCBzaG93IGZvcm0sIGhpZGUgYnV0dG9uXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubmV3TlQgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3Nob3cgQWRkIE5ldyAuLi4uIGNsaWNrZWQsIGhpZGUgdGhlIGJ1dHRvbiBhbmQgc2hvdyB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGROVENsaWNrZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGROVEZvcm0gPSB0cnVlOyAvL3Nob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkTlRCdXR0b25TaG93aW5nID0gZmFsc2U7IC8vaGlkZSBidXR0b24gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk5ldmVyTWluZE5UID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdOVCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkTlRGb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGROVEJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgYnV0dG9uICAgXHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQWRkTmV0VHlwZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgTkVUV09SS19UWVBFLnNhdmUoJHNjb3BlLm5ld05ULCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV0VHlwZUxpc3QucHVzaChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3TlQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkTlRGb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZE5UQnV0dG9uU2hvd2luZyA9IHRydWU7IC8vc2hvdyB0aGUgYnV0dG9uIGFnYWluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIk5ldHdvcmsgVHlwZSBBZGRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2F2ZU5ldFR5cGUgPSBmdW5jdGlvbiAoZGF0YSwgaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIE5FVFdPUktfVFlQRS51cGRhdGUoeyBpZDogaWQgfSwgZGF0YSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIk5ldHdvcmsgVHlwZSBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gcmV0dXI7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWxldGVOZXRUeXBlID0gZnVuY3Rpb24gKG50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9tb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTmV0d29yayBUeXBlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChrZXlUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3llcywgcmVtb3ZlIHRoaXMga2V5d29yZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSAkc2NvcGUubmV0VHlwZUxpc3QuaW5kZXhPZihudCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vREVMRVRFIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgTkVUV09SS19UWVBFLmRlbGV0ZSh7IGlkOiBudC5uZXR3b3JrX3R5cGVfaWQgfSwgbnQsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXRUeXBlTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJOZXR3b3JrIFR5cGUgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBOZXRUeXBlIEFkZC9VcGRhdGUvRGVsZXRlXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIFZlcnRDb2xNZXRoIEFkZC9VcGRhdGUvRGVsZXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudmVydENvbE1ldGhMaXN0ID0gYWxsVmVydGljYWxDb2xsTWV0aG9kczsgLy92Y21cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkVkNNRm9ybSA9IGZhbHNlOyAvL2FkZCBzb21ldGhpbmcgbmV3IHRvIGEgbG9va3VwIGNsaWNrZWQgKHdpbGwgdW5oaWRlIGZvcm0gYmVsb3cgaXQpIEZhbHNlLT4gZm9ybTogaGlkZGVuLCBUcnVlLT4gZm9ybTogdmlzaWJsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZFZDTUJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3N0YXJ0IGl0IGF0IHRydWUuLndoZW4gY2xpY2tlZCwgc2hvdyBmb3JtLCBoaWRlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld1ZDTSA9IHt9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vc2hvdyBBZGQgTmV3IC4uLi4gY2xpY2tlZCwgaGlkZSB0aGUgYnV0dG9uIGFuZCBzaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZFZDTUNsaWNrZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRWQ01Gb3JtID0gdHJ1ZTsgLy9zaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZFZDTUJ1dHRvblNob3dpbmcgPSBmYWxzZTsgLy9oaWRlIGJ1dHRvbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuTmV2ZXJNaW5kVkNNID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdWQ00gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZFZDTUZvcm0gPSBmYWxzZTsgLy9oaWRlIHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZFZDTUJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgYnV0dG9uICAgXHJcblxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5BZGRWZXJ0Q29sTWV0aCA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgVkVSVElDQUxfQ09MTF9NRVRIT0Quc2F2ZSgkc2NvcGUubmV3VkNNLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudmVydENvbE1ldGhMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1ZDTSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRWQ01Gb3JtID0gZmFsc2U7IC8vaGlkZSB0aGUgZm9ybVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZFZDTUJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJWZXJ0aWNhbCBDb2xsZWN0aW9uIE1ldGhvZCBBZGRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zYXZlVmVydENvbE1ldGggPSBmdW5jdGlvbiAoZGF0YSwgaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmV0dXIgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIFZFUlRJQ0FMX0NPTExfTUVUSE9ELnVwZGF0ZSh7IGlkOiBpZCB9LCBkYXRhLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiVmVydGljYWwgQ29sbGVjdGlvbiBNZXRob2QgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJldHVyO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZWxldGVWZXJ0Q29sTWV0aCA9IGZ1bmN0aW9uICh2Y20pIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmNtO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJWZXJ0aWNhbCBDb2xsZWN0aW9uIE1ldGhvZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoa2V5VG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJHNjb3BlLnZlcnRDb2xNZXRoTGlzdC5pbmRleE9mKHZjbSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgVkVSVElDQUxfQ09MTF9NRVRIT0QuZGVsZXRlKHsgaWQ6IHZjbS52Y29sbGVjdF9tZXRob2RfaWQgfSwgdmNtLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudmVydENvbE1ldGhMaXN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlZlcnRpY2FsIENvbGxlY3Rpb24gTWV0aG9kIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gVmVydENvbE1ldGggQWRkL1VwZGF0ZS9EZWxldGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gVmVydERhdHVtIEFkZC9VcGRhdGUvRGVsZXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudmVydERhdExpc3QgPSBhbGxWZXJ0aWNhbERhdHVtczsgLy92ZFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dBZGRWREZvcm0gPSBmYWxzZTsgLy9hZGQgc29tZXRoaW5nIG5ldyB0byBhIGxvb2t1cCBjbGlja2VkICh3aWxsIHVuaGlkZSBmb3JtIGJlbG93IGl0KSBGYWxzZS0+IGZvcm06IGhpZGRlbiwgVHJ1ZS0+IGZvcm06IHZpc2libGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGRWREJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3N0YXJ0IGl0IGF0IHRydWUuLndoZW4gY2xpY2tlZCwgc2hvdyBmb3JtLCBoaWRlIGJ1dHRvblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld1ZEID0ge307XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zaG93IEFkZCBOZXcgLi4uLiBjbGlja2VkLCBoaWRlIHRoZSBidXR0b24gYW5kIHNob3cgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkVkRDbGlja2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93QWRkVkRGb3JtID0gdHJ1ZTsgLy9zaG93IHRoZSBmb3JtXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZFZEQnV0dG9uU2hvd2luZyA9IGZhbHNlOyAvL2hpZGUgYnV0dG9uICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5OZXZlck1pbmRWRCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3VkQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZFZERm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkVkRCdXR0b25TaG93aW5nID0gdHJ1ZTsgLy9zaG93IGJ1dHRvbiAgIFxyXG5cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQWRkVmVydERhdHVtID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBWRVJUSUNBTF9EQVRVTS5zYXZlKCRzY29wZS5uZXdWRCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnZlcnREYXRMaXN0LnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1ZEID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0FkZFZERm9ybSA9IGZhbHNlOyAvL2hpZGUgdGhlIGZvcm1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRWREJ1dHRvblNob3dpbmcgPSB0cnVlOyAvL3Nob3cgdGhlIGJ1dHRvbiBhZ2FpblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJWZXJ0aWNhbCBEYXR1bSBBZGRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zYXZlVmVydERhdHVtID0gZnVuY3Rpb24gKGRhdGEsIGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJldHVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBWRVJUSUNBTF9EQVRVTS51cGRhdGUoeyBpZDogaWQgfSwgZGF0YSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlZlcnRpY2FsIERhdHVtIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1ciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByZXR1cjtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVsZXRlVmVydERhdHVtID0gZnVuY3Rpb24gKHZkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJWZXJ0aWNhbCBEYXR1bVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoa2V5VG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gJHNjb3BlLnZlcnREYXRMaXN0LmluZGV4T2YodmQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFZFUlRJQ0FMX0RBVFVNLmRlbGV0ZSh7IGlkOiB2ZC5kYXR1bV9pZCB9LCB2ZCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnZlcnREYXRMaXN0LnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlZlcnRpY2FsIERhdHVtIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gVmVydERhdHVtIEFkZC9VcGRhdGUvRGVsZXRlXHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gQUxMIExPT0tVUFMgKGFkZC91cGRhdGUvZGVsZXRlKVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfV0pO1xyXG5cclxufSgpKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBTVE5Db250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTVE5Db250cm9sbGVycycpO1xyXG4gICAgU1ROQ29udHJvbGxlcnMuY29udHJvbGxlcignc3VibWl0UmVwb3J0Q3RybCcsIFsnJHNjb3BlJywgJyRodHRwJywgJyRjb29raWVzJywgJyR1aWJNb2RhbCcsICckc3RhdGUnLCAnQ09OVEFDVCcsICdSRVBPUlQnLCBcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkaHR0cCwgJGNvb2tpZXMsICR1aWJNb2RhbCwgJHN0YXRlLCBDT05UQUNULCBSRVBPUlQpIHtcclxuICAgICAgICAgICAgLy8jbWFrZSBzdXJlIHRoaXMgY2xlYXJzIGV4Y2VwdCBmb3IgaWYgdGhleSBhcmUgbmVlZGluZyB0byBjb21wbGV0ZSBhIHJlcG9ydFxyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLiRwYXJlbnQubmVlZFRvQ29tcGxldGUgIT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS4kcGFyZW50Lm5ld1JlcG9ydCA9IHtyZXBvcnRfZGF0ZTogbmV3IERhdGUoKX07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvL2tlZXBzIGl0IHZhbGlkIGFuZCB0ZWxscyBpdCBpdCdzIHV0YyBzbyBpdCB3aWxsIGNvbnZlcnQgcHJvcGVyIGxvY2FsXHJcbiAgICAgICAgICAgICAgICB2YXIgeXIgPSAkc2NvcGUubmV3UmVwb3J0LnJlcG9ydF9kYXRlLnN1YnN0cigwLCA0KTtcclxuICAgICAgICAgICAgICAgIHZhciBtbyA9ICRzY29wZS5uZXdSZXBvcnQucmVwb3J0X2RhdGUuc3Vic3RyKDUsIDIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRheSA9ICRzY29wZS5uZXdSZXBvcnQucmVwb3J0X2RhdGUuc3Vic3RyKDgsIDIpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydC5yZXBvcnRfZGF0ZSA9IG5ldyBEYXRlKG1vICsgXCIvXCIgKyBkYXkgKyBcIi9cIiArIHlyKTtcclxuICAgICAgICAgICAgICAgXHJcbi8vICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQucmVwb3J0X2RhdGUgPSBuZXcgRGF0ZSgkc2NvcGUubmV3UmVwb3J0LnJlcG9ydF9kYXRlKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgJHNjb3BlLkRlcGxveVN0YWZmID0ge307XHJcbiAgICAgICAgICAgICRzY29wZS5HZW5TdGFmZiA9IHt9O1xyXG4gICAgICAgICAgICAkc2NvcGUuSW5sYW5kU3RhZmYgPSB7fTtcclxuICAgICAgICAgICAgJHNjb3BlLkNvYXN0U3RhZmYgPSB7fTtcclxuICAgICAgICAgICAgJHNjb3BlLldhdGVyU3RhZmYgPSB7fTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSB7IG9wZW5Db250YWN0czogZmFsc2UsIG9wZW5Db3VudHM6ZmFsc2UsIG9wZW5QZXJzb25uZWw6ZmFsc2UgfTsgLy9pZiBzdWJtaXQgZm9ybSBpbnZhbGlkLCBvcGVuIGNvbnRhY3RzIHRvIHNob3cgcmVxdWlyZWQgZmllbGRcclxuICAgICAgICAgICAgLy9jYWxsZWQgYSBmZXcgdGltZXMgdG8gZm9ybWF0IGp1c3QgdGhlIGRhdGUgKG5vIHRpbWUpXHJcbiAgICAgICAgICAgIHZhciBtYWtlQWRhdGUgPSBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFEYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgIGlmIChkICE9PSBcIlwiICYmIGQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcHJvdmlkZWQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIGFEYXRlID0gbmV3IERhdGUoZCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgeWVhciA9IGFEYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW9udGggPSBhRGF0ZS5nZXRNb250aCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRheSA9ICgnMCcgKyBhRGF0ZS5nZXREYXRlKCkpLnNsaWNlKC0yKTtcclxuICAgICAgICAgICAgICAgIHZhciBtb250aE5hbWVzID0gW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGVXT3RpbWUgPSBuZXcgRGF0ZShtb250aE5hbWVzW21vbnRoXSArIFwiIFwiICsgZGF5ICsgXCIsIFwiICsgeWVhcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZVdPdGltZTtcclxuICAgICAgICAgICAgfTsvL2VuZCBtYWtlQWRhdGUoKVxyXG4gICAgICAgICAgICAvL3Jlc2V0IGl0IGhlcmUgc28gZm9ybSB3aWxsIGNsZWFyIHdoZW4gdGhleSBsZWF2ZSBhbmQgY29tZSBiYWNrLlxyXG4gICAgICAgICAgICAkc2NvcGUuJHBhcmVudC5uZWVkVG9Db21wbGV0ZSA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgaWYgKCRzY29wZS5uZXdSZXBvcnQucmVwb3J0aW5nX21ldHJpY3NfaWQgPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICRzY29wZS5kaXNhYmxlZCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAvL2dldCB0aGlzIGV2ZW50IG5hbWUgZnJvbSB0aGUgZXZlbnRpZFxyXG4gICAgICAgICAgICAkc2NvcGUuZ2V0RXZlbnROYW1lID0gZnVuY3Rpb24gKGV2SUQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBuYW1lO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRoaXNFdmVudCA9ICRzY29wZS5ldmVudHMuZmlsdGVyKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLmV2ZW50X2lkID09IGV2SUQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgbmFtZSA9IHRoaXNFdmVudC5ldmVudF9uYW1lO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5hbWU7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyNyZWdpb24gR0VUIFJlcG9ydCBDb250YWN0c1xyXG4gICAgICAgICAgICB2YXIgZ2V0UmVwb3J0Q29udGFjdHMgPSBmdW5jdGlvbiAocmVwb3J0SUQpIHtcclxuICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgIENPTlRBQ1QuZ2V0Q29udGFjdE1vZGVsKHsgUmVwb3J0TWV0cmljOiByZXBvcnRJRCB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRlcGxveVN0YWZmID0gcmVzcG9uc2UuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmNvbnRhY3RUeXBlID09IFwiRGVwbG95ZWQgU3RhZmZcIjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkdlblN0YWZmID0gcmVzcG9uc2UuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmNvbnRhY3RUeXBlID09IFwiR2VuZXJhbFwiOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSW5sYW5kU3RhZmYgPSByZXNwb25zZS5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuY29udGFjdFR5cGUgPT0gXCJJbmxhbmQgRmxvb2RcIjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkNvYXN0U3RhZmYgPSByZXNwb25zZS5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuY29udGFjdFR5cGUgPT0gXCJDb2FzdGFsIEZsb29kXCI7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5XYXRlclN0YWZmID0gcmVzcG9uc2UuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmNvbnRhY3RUeXBlID09IFwiV2F0ZXIgUXVhbGl0eVwiOyB9KVswXTtcclxuICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRpc2FibGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBHRVQgUmVwb3J0IENvbnRhY3RzXHJcblxyXG4gICAgICAgICAgICAvLyNyZWdpb24gUE9TVCBSZXBvcnQgQ29udGFjdHNcclxuICAgICAgICAgICAgdmFyIHBvc3RSZXBvcnRDb250YWN0cyA9IGZ1bmN0aW9uIChyZXBvcnRJRCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVxdWFscyh7fSwgJHNjb3BlLkRlcGxveVN0YWZmKSAmJiAkc2NvcGUuRGVwbG95U3RhZmYgIT09IHVuZGVmaW5lZCkgeyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgUkVQT1JULmFkZFJlcG9ydENvbnRhY3QoeyByZXBvcnRJZDogcmVwb3J0SUQsIGNvbnRhY3RUeXBlSWQ6IDEgfSwgJHNjb3BlLkRlcGxveVN0YWZmLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkRlcGxveSBTdGFmZiBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZTEuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2U7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghYW5ndWxhci5lcXVhbHMoe30sICRzY29wZS5HZW5TdGFmZikgJiYgJHNjb3BlLkdlblN0YWZmICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBSRVBPUlQuYWRkUmVwb3J0Q29udGFjdCh7IHJlcG9ydElkOiByZXBvcnRJRCwgY29udGFjdFR5cGVJZDogMn0sICRzY29wZS5HZW5TdGFmZiwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZTIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJHZW5lcmFsIFN0YWZmIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZTIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlMi5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghYW5ndWxhci5lcXVhbHMoe30sICRzY29wZS5JbmxhbmRTdGFmZikgJiYgJHNjb3BlLklubGFuZFN0YWZmICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBSRVBPUlQuYWRkUmVwb3J0Q29udGFjdCh7IHJlcG9ydElkOiByZXBvcnRJRCwgY29udGFjdFR5cGVJZDogM30sICRzY29wZS5JbmxhbmRTdGFmZiwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZTMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJJbmxhbmQgU3RhZmYgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlMykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2UzLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlOyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoIWFuZ3VsYXIuZXF1YWxzKHt9LCAkc2NvcGUuQ29hc3RTdGFmZikgJiYgJHNjb3BlLkNvYXN0U3RhZmYgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIFJFUE9SVC5hZGRSZXBvcnRDb250YWN0KHsgcmVwb3J0SWQ6IHJlcG9ydElELCBjb250YWN0VHlwZUlkOiA0fSwgJHNjb3BlLkNvYXN0U3RhZmYsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2U0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiQ29hc3RhbCBTdGFmZiBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2U0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZTQuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2U7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgaWYgKCFhbmd1bGFyLmVxdWFscyh7fSwgJHNjb3BlLldhdGVyU3RhZmYpICYmICRzY29wZS5XYXRlclN0YWZmICE9PSB1bmRlZmluZWQpIHsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgUkVQT1JULmFkZFJlcG9ydENvbnRhY3QoeyByZXBvcnRJZDogcmVwb3J0SUQsIGNvbnRhY3RUeXBlSWQ6IDV9LCAkc2NvcGUuV2F0ZXJTdGFmZiwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZTUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJXYXRlciBTdGFmZiBVcGRhdGVkXCIpOyAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlNSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2U1LnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyNlbmRyZWdpb24gUE9TVCBSZXBvcnQgQ29udGFjdHNcclxuXHJcbiAgICAgICAgICAgIHZhciByZW1vdmVJbmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy9yZW1vdmUgaXQgZnJvbSB0aGUgbGlzdCBvZiBpbmNvbXBsZXRlc1xyXG4gICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gMDtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgJHNjb3BlLm1lbWJlckluY29tcGxldGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5tZW1iZXJJbmNvbXBsZXRlc1tpXS5yZXBvcnRpbmdfbWV0cmljc19pZCA9PSAkc2NvcGUubmV3UmVwb3J0LnJlcG9ydGluZ19tZXRyaWNzX2lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4ID0gaTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaSA9ICRzY29wZS5tZW1iZXJJbmNvbXBsZXRlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm1lbWJlckluY29tcGxldGVzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL1Bvc3QvUHV0IHRoZSBSZXBvcnQgYW5kIFJlcG9ydCBDb250YWN0cy4gQ2FsbGVkIHR3aWNlIChmcm9tIHdpdGhpbiBNb2RhbCAoaW5jb21wbGV0ZSkgYW5kIG91dHNpZGUgKGNvbXBsZXRlKSlcclxuICAgICAgICAgICAgdmFyIFBvc3RQdXRSZXBvcnRBbmRSZXBvcnRDb250YWN0cyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vUE9TVCBvciBQVVQgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydC5yZXBvcnRfZGF0ZSA9ICRzY29wZS5uZXdSZXBvcnQucmVwb3J0X2RhdGUudG9EYXRlU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLm5ld1JlcG9ydC5yZXBvcnRpbmdfbWV0cmljc19pZCAhPT0gdW5kZWZpbmVkKSB7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAvL1BVVFxyXG4gICAgICAgICAgICAgICAgICAgIFJFUE9SVC51cGRhdGUoeyBpZDogJHNjb3BlLm5ld1JlcG9ydC5yZXBvcnRpbmdfbWV0cmljc19pZCB9LCAkc2NvcGUubmV3UmVwb3J0LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiUmVwb3J0IFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQuZXZlbnRfbmFtZSA9ICRzY29wZS5nZXRFdmVudE5hbWUoJHNjb3BlLm5ld1JlcG9ydC5ldmVudF9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubmV3UmVwb3J0LmNvbXBsZXRlID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUluY29tcGxldGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc0NvbXBsZXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGVuIFBPU1QgdGhlIFJlcG9ydENvbnRhY3RzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc3RSZXBvcnRDb250YWN0cygkc2NvcGUubmV3UmVwb3J0LnJlcG9ydGluZ19tZXRyaWNzX2lkKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5mdWxsUmVwb3J0Rm9ybS5zdWJtaXQuJHNldFByaXN0aW5lKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5mdWxsUmVwb3J0Rm9ybS5zdWJtaXQuZXZlbnRfaWQuJHZpZXdWYWx1ZSA9IHVuZGVmaW5lZDsvL25lZWRlZCBmb3IgdGhlIGNoYW5nZVN0YXRlIHRvIG5vdCB0aHJvdyB1cCBsZWF2aW5nIHRhYiBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygncmVwb3J0aW5nLnJlcG9ydERhc2gnKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9QT1NUXHJcbiAgICAgICAgICAgICAgICAgICAgUkVQT1JULnNhdmUoJHNjb3BlLm5ld1JlcG9ydCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlJlcG9ydCBDcmVhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVwb3J0cy5wdXNoKHJlc3BvbnNlKTsgLy9hZGQgdG8gdGhlIGxpc3Qgb2YgYWxsIHJlcG9ydHMgZm9yIGZpbHRlcmluZyBvbiB0aGUgZ2VuZXJhdGUgdGFiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubmV3UmVwb3J0LmNvbXBsZXRlID09IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZUluY29tcGxldGUoKTsgJHNjb3BlLmlzQ29tcGxldGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQuZXZlbnRfbmFtZSA9ICRzY29wZS5nZXRFdmVudE5hbWUoJHNjb3BlLm5ld1JlcG9ydC5ldmVudF9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVtYmVySW5jb21wbGV0ZXMucHVzaChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGVuIFBPU1QgdGhlIFJlcG9ydENvbnRhY3RzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQucmVwb3J0aW5nX21ldHJpY3NfaWQgPSByZXNwb25zZS5yZXBvcnRpbmdfbWV0cmljc19pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zdFJlcG9ydENvbnRhY3RzKCRzY29wZS5uZXdSZXBvcnQucmVwb3J0aW5nX21ldHJpY3NfaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZ1bGxSZXBvcnRGb3JtLnN1Ym1pdC4kc2V0UHJpc3RpbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZ1bGxSZXBvcnRGb3JtLnN1Ym1pdC5ldmVudF9pZC4kdmlld1ZhbHVlID0gdW5kZWZpbmVkOyAvL25lZWRlZCBmb3IgdGhlIGNoYW5nZVN0YXRlIHRvIG5vdCB0aHJvdyB1cCBsZWF2aW5nIHRhYiBtZXNzYWdlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZS5nbygncmVwb3J0aW5nLnJlcG9ydERhc2gnKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0vL2VuZCBwb3N0XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2dldCB2YWx1ZXMgZm9yIFBlcnNvbm5lbCBZZXN0ZXJkYXlzLCBhbmQgQ29udGFjdHMgKGlmIHJlcG9ydCB3YXMgZG9uZSB5ZXN0ZXJkYXkpLCBhbmQgYWxsIGNvdW50cyBmb3IgaW5zdHJ1bWVudHMgJiBod21zXHJcbiAgICAgICAgICAgICRzY29wZS5wb3B1bGF0ZVllc3RUb3RzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5uZXdSZXBvcnQucmVwb3J0X2RhdGUgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUubmV3UmVwb3J0LnN0YXRlICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLm5ld1JlcG9ydC5ldmVudF9pZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZvcm1hdERhdGUgPSBuZXcgRGF0ZSgkc2NvcGUubmV3UmVwb3J0LnJlcG9ydF9kYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXREYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdERhdGUgPSBmb3JtYXREYXRlLnRvSVNPU3RyaW5nKCkuc3Vic3RyKDAsIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbXlEYXRlID0gZm9ybWF0RGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGhlU3RhdGUgPSAkc2NvcGUubmV3UmVwb3J0LnN0YXRlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlSUQgPSAkc2NvcGUubmV3UmVwb3J0LmV2ZW50X2lkO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0ID0geyByZXBvcnRfZGF0ZTogJHNjb3BlLm5ld1JlcG9ydC5yZXBvcnRfZGF0ZSwgc3RhdGU6IHRoZVN0YXRlLCBldmVudF9pZDogZUlEIH07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRlcGxveVN0YWZmID0ge307ICRzY29wZS5HZW5TdGFmZiA9IHt9OyAkc2NvcGUuSW5sYW5kU3RhZmYgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQ29hc3RTdGFmZiA9IHt9OyAkc2NvcGUuV2F0ZXJTdGFmZiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwcmV2aW91c0RheSA9IG5ldyBEYXRlKG15RGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNEYXkuc2V0SG91cnMoMCwgMCwgMCwgMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmlvdXNEYXkgPSBwcmV2aW91c0RheS50b0lTT1N0cmluZygpLnN1YnN0cigwLCAxMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHllc3RlcmRheVJwdCA9ICRzY29wZS5yZXBvcnRzLmZpbHRlcihmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVwRGF0ZSA9IHIucmVwb3J0X2RhdGUudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gKHIuZXZlbnRfaWQgPT0gJHNjb3BlLm5ld1JlcG9ydC5ldmVudF9pZCAmJiByLnN0YXRlID09ICRzY29wZS5uZXdSZXBvcnQuc3RhdGUpICYmIChyZXBEYXRlID09IHByZXZpb3VzRGF5KTtcclxuICAgICAgICAgICAgICAgICAgICB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh5ZXN0ZXJkYXlScHQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBQRVJTT05ORUwgcG9wdWxhdGluZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0Lnllc3RfZmllbGRwZXJzID0geWVzdGVyZGF5UnB0LnRvZF9maWVsZHBlcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQueWVzdF9vZmZpY2VwZXJzID0geWVzdGVyZGF5UnB0LnRvZF9vZmZpY2VwZXJzO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ09OVEFDVFMgcG9wdWxhdGluZyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgZ2V0UmVwb3J0Q29udGFjdHMoeWVzdGVyZGF5UnB0LnJlcG9ydGluZ19tZXRyaWNzX2lkKTtcclxuICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgaWYgeWVzdGVyZGF5UnB0ICE9IHVuZGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0Lnllc3RfZmllbGRwZXJzID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydC55ZXN0X29mZmljZXBlcnMgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvL25vdyBnZXQgdG90YWxzIGZvciBhbGwgc2Vuc29ycyBhbmQgaHdtcyB0byBwb3B1bGF0ZSBpbiB0aGlzIG5ld1JlcG9ydFxyXG4gICAgICAgICAgICAgICAgICAgIFJFUE9SVC5nZXREYWlseVJlcG9ydFRvdHMoeyBEYXRlOiBteURhdGUsIEV2ZW50OiAkc2NvcGUubmV3UmVwb3J0LmV2ZW50X2lkLCBTdGF0ZTogJHNjb3BlLm5ld1JlcG9ydC5zdGF0ZSB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlNikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL29ubHkgY2FyZSBhYm91dCB0aGUgY291bnRzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQuZGVwX3JhcGRlcGxfZ2FnZSA9IHJlc3BvbnNlNi5kZXBfcmFwZGVwbF9nYWdlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0LnJlY19yYXBkZXBsX2dhZ2UgPSByZXNwb25zZTYucmVjX3JhcGRlcGxfZ2FnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydC5sb3N0X3JhcGRlcGxfZ2FnZSA9IHJlc3BvbnNlNi5sb3N0X3JhcGRlcGxfZ2FnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydC5kZXBfd3RybGV2X3NlbnNvciA9IHJlc3BvbnNlNi5kZXBfd3RybGV2X3NlbnNvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydC5yZWNfd3RybGV2X3NlbnNvciA9IHJlc3BvbnNlNi5yZWNfd3RybGV2X3NlbnNvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydC5sb3N0X3d0cmxldl9zZW5zb3IgPSByZXNwb25zZTYubG9zdF93dHJsZXZfc2Vuc29yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0LmRlcF93dl9zZW5zID0gcmVzcG9uc2U2LmRlcF93dl9zZW5zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0LnJlY193dl9zZW5zID0gcmVzcG9uc2U2LnJlY193dl9zZW5zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0Lmxvc3Rfd3Zfc2VucyA9IHJlc3BvbnNlNi5sb3N0X3d2X3NlbnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQuZGVwX2Jhcm9tZXRyaWMgPSByZXNwb25zZTYuZGVwX2Jhcm9tZXRyaWM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQucmVjX2Jhcm9tZXRyaWMgPSByZXNwb25zZTYucmVjX2Jhcm9tZXRyaWM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQubG9zdF9iYXJvbWV0cmljID0gcmVzcG9uc2U2Lmxvc3RfYmFyb21ldHJpYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydC5kZXBfbWV0ZW9yb2xvZ2ljYWwgPSByZXNwb25zZTYuZGVwX21ldGVvcm9sb2dpY2FsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0LnJlY19tZXRlb3JvbG9naWNhbCA9IHJlc3BvbnNlNi5yZWNfbWV0ZW9yb2xvZ2ljYWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQubG9zdF9tZXRlb3JvbG9naWNhbCA9IHJlc3BvbnNlNi5sb3N0X21ldGVvcm9sb2dpY2FsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0Lmh3bV9mbGFnZ2VkID0gcmVzcG9uc2U2Lmh3bV9mbGFnZ2VkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0Lmh3bV9jb2xsZWN0ZWQgPSByZXNwb25zZTYuaHdtX2NvbGxlY3RlZDtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlNikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2U2LnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJQbGVhc2UgY2hvb3NlIGEgZGF0ZSwgZXZlbnQgYW5kIHN0YXRlIGZpcnN0LlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTsgLy8gZW5kIHBvcHVsYXRlWWVzdFRvdHNcclxuXHJcbiAgICAgICAgICAgIC8vc2F2ZSB0aGlzIHJlcG9ydCBhbmQgaXQncyBjb250YWN0c1xyXG4gICAgICAgICAgICAkc2NvcGUuc2F2ZVJlcG9ydCA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5uZXdSZXBvcnQuY29tcGxldGUgPT09IHVuZGVmaW5lZCB8fCAkc2NvcGUubmV3UmVwb3J0LmNvbXBsZXRlID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9kb24ndCB3b3JyeSBpZiB2YWxpZCwganVzdCBwb3N0cHV0IG1vZGFsIGNvbmZpcm1pbmcgdGhleSB3YW50IHRvIHNhdmUgdGhpcyB3aXRob3V0IG1hcmtpbmcgaXQgY29tcGxldGVcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdzYXZlUmVwb3J0TW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdjb25maXJtUmVwb3J0TW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3llcywgcG9zdCB0aGlzIGFzIGluY29tcGxldGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydC5jb21wbGV0ZSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQubWVtYmVyX2lkID0gJHNjb3BlLk1lbWJlckxvZ2dlZEluLm1lbWJlcl9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUG9zdFB1dFJlcG9ydEFuZFJlcG9ydENvbnRhY3RzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvLy4uY29tcGxldGUgaXMgMSAuLiBjaGVjayBpZiB2YWxpZFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RoZSByZXBvcnQgaXMgY29tcGxldGUgYW5kIHZhbGlkLCBqdXN0IHBvc3QvcHV0IGl0ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5uZXdSZXBvcnQubWVtYmVyX2lkID0gJHNjb3BlLk1lbWJlckxvZ2dlZEluLm1lbWJlcl9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgUG9zdFB1dFJlcG9ydEFuZFJlcG9ydENvbnRhY3RzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9hbGVydChcIkFsbCBmaWVsZHMgYXJlIHJlcXVpcmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzLm9wZW5Db250YWN0cyA9IHRydWU7ICRzY29wZS5zdGF0dXMub3BlbkNvdW50cyA9IHRydWU7ICRzY29wZS5zdGF0dXMub3BlblBlcnNvbm5lbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChcIltuYW1lPSdcIiArICRzY29wZS5mdWxsUmVwb3J0Rm9ybS5zdWJtaXQuJG5hbWUgKyBcIiddXCIpLmZpbmQoJy5uZy1pbnZhbGlkOnZpc2libGU6Zmlyc3QnKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5wb3B1bGF0ZURlcGxveWVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkRlcGxveVN0YWZmID0gJHNjb3BlLk1lbWJlckxvZ2dlZEluO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvL2luY29tcGxldGUgcmVwb3J0IHdhcyBjbGlja2VkLCBnbyBnZXQgaXQgYW5kIHRoZSBjb250YWN0cyBmb3IgaXRcclxuICAgICAgICAgICAgJHNjb3BlLmdldEluY29tcGxldGVSZXBvcnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVwb3J0SWQgPSB0aGlzLmlyLnJlcG9ydGluZ19tZXRyaWNzX2lkO1xyXG4gICAgICAgICAgICAgICAgUkVQT1JULnF1ZXJ5KHsgaWQ6IHJlcG9ydElkIH0sIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0ID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiBDaHJvbWUsIGZvcm1hdCBkYXRlOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB5ciA9IHJlc3BvbnNlLnJlcG9ydF9kYXRlLnN1YnN0cigwLCA0KTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW8gPSByZXNwb25zZS5yZXBvcnRfZGF0ZS5zdWJzdHIoNSwgMik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRheSA9IHJlc3BvbnNlLnJlcG9ydF9kYXRlLnN1YnN0cig4LCAyKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmV3UmVwb3J0LnJlcG9ydF9kYXRlID0gbmV3IERhdGUobW8gKyBcIi9cIiArIGRheSArIFwiL1wiICsgeXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLm5ld1JlcG9ydC5yZXBvcnRfZGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5uZXdSZXBvcnQucmVwb3J0X2RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5mdWxsUmVwb3J0Rm9ybS5zdWJtaXQuJHNldERpcnR5KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9nZXQgY29udGFjdHMgXHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0UmVwb3J0Q29udGFjdHMocmVwb3J0SWQpO1xyXG4gICAgICAgICAgICAgICAgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICBpZiAoJHNjb3BlLm5ld1JlcG9ydC5yZXBvcnRpbmdfbWV0cmljc19pZCAhPT11bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICBnZXRSZXBvcnRDb250YWN0cygkc2NvcGUubmV3UmVwb3J0LnJlcG9ydGluZ19tZXRyaWNzX2lkKTtcclxuICAgICAgICB9XSk7XHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgTW9kYWxDb250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdNb2RhbENvbnRyb2xsZXJzJyk7XHJcbiAgICBNb2RhbENvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ3JlcG9ydE1vZGFsQ3RybCcsIFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgJ3JlcG9ydCcsICdzdWJtaXRQZXJzb24nLCAnY29udGFjdHMnLCBcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSwgcmVwb3J0LCBzdWJtaXRQZXJzb24sIGNvbnRhY3RzKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5SZXBvcnRWaWV3ID0ge307XHJcbiAgICAgICAgICAgICRzY29wZS5SZXBvcnRWaWV3LlJlcG9ydCA9IHJlcG9ydDtcclxuICAgICAgICAgICAgJHNjb3BlLlJlcG9ydFZpZXcuc3VibWl0dGVyID0gc3VibWl0UGVyc29uO1xyXG4gICAgICAgICAgICAkc2NvcGUuUmVwb3J0Vmlldy5kZXBsb3lTdGFmZiA9IGNvbnRhY3RzLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5jb250YWN0VHlwZSA9PSBcIkRlcGxveWVkIFN0YWZmXCI7IH0pWzBdO1xyXG4gICAgICAgICAgICAkc2NvcGUuUmVwb3J0Vmlldy5nZW5lcmFsU3RhZmYgPSBjb250YWN0cy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuY29udGFjdFR5cGUgPT0gXCJHZW5lcmFsXCI7IH0pWzBdO1xyXG4gICAgICAgICAgICAkc2NvcGUuUmVwb3J0Vmlldy5pbmxhbmRTdGFmZiA9IGNvbnRhY3RzLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5jb250YWN0VHlwZSA9PSBcIklubGFuZCBGbG9vZFwiOyB9KVswXTtcclxuICAgICAgICAgICAgJHNjb3BlLlJlcG9ydFZpZXcuY29hc3RTdGFmZiA9IGNvbnRhY3RzLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5jb250YWN0VHlwZSA9PSBcIkNvYXN0YWwgRmxvb2RcIjsgfSlbMF07XHJcbiAgICAgICAgICAgICRzY29wZS5SZXBvcnRWaWV3LndhdGVyU3RhZmYgPSBjb250YWN0cy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuY29udGFjdFR5cGUgPT0gXCJXYXRlciBRdWFsaXR5XCI7IH0pWzBdO1xyXG4gICAgICAgICAgICAkc2NvcGUucHJpbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB3aW5kb3cucHJpbnQoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfV0pO1xyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFNUTkNvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NUTkNvbnRyb2xsZXJzJyk7XHJcbiAgICBTVE5Db250cm9sbGVycy5jb250cm9sbGVyKCdyZXBvcnRpbmdEYXNoQ3RybCcsIFsnJHNjb3BlJywgJyRjb29raWVzJywgJyRmaWx0ZXInLCAnJHVpYk1vZGFsJywgJyRzdGF0ZScsICckaHR0cCcsICdDT05UQUNUJywgJ01FTUJFUicsICdhbGxSZXBvcnRzQWdhaW4nLCBcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkY29va2llcywgJGZpbHRlciwgJHVpYk1vZGFsLCAkc3RhdGUsICRodHRwLCBDT05UQUNULCBNRU1CRVIsIGFsbFJlcG9ydHNBZ2Fpbikge1xyXG4gICAgICAgICAgICAkc2NvcGUucmVwb3J0c1RvRGF0ZSA9IGFsbFJlcG9ydHNBZ2FpbjtcclxuICAgICAgICAgICAgJHNjb3BlLnRvZGF5UnB0cyA9IFtdOyAkc2NvcGUueWVzdGVyZGF5UnB0cyA9IFtdOyAkc2NvcGUucGlja0RhdGVScHRzID0gW107ICRzY29wZS5waWNrQWRhdGVSZXBvcnRzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICRzY29wZS50b2RheSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICRzY29wZS50b2RheS5zZXRIb3VycygwLCAwLCAwLCAwKTtcclxuICAgICAgICAgICAgJHNjb3BlLnllc3RlcmRheSA9IG5ldyBEYXRlKCRzY29wZS50b2RheSk7XHJcbiAgICAgICAgICAgICRzY29wZS55ZXN0ZXJkYXkuc2V0RGF0ZSgkc2NvcGUudG9kYXkuZ2V0RGF0ZSgpIC0gMSk7XHJcbiAgICAgICAgICAgICRzY29wZS50b2RheSA9ICRzY29wZS50b2RheS50b0lTT1N0cmluZygpLnN1YnN0cigwLCAxMCk7XHJcbiAgICAgICAgICAgICRzY29wZS55ZXN0ZXJkYXkgPSAkc2NvcGUueWVzdGVyZGF5LnRvSVNPU3RyaW5nKCkuc3Vic3RyKDAsMTApO1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLlRISVNfREFURSA9IHt9O1xyXG4gICAgICAgICAgICAvL1ZpZXcgUmVwb3J0IGJ1dHRvbiBjbGlja2VkLCBnZXQgc3R1ZmYgYW5kIG1ha2UgYSBwZGYgXHJcbiAgICAgICAgICAgICRzY29wZS5WaWV3UmVwb3J0ID0gZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgIC8vbW9kYWxcclxuICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnVmlld1JlcG9ydC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAncmVwb3J0TW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnbGcnLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvd0NsYXNzOiAncmVwLWRpYWxvZycsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZTogeyAgLy9UT0RPIDo6IENoYW5nZSB0aGlzIHRvIGdldCBSZXBvcnRNb2RlbCAtLWluY2x1ZGVzIGNvbnRhY3RzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcG9ydDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN1Ym1pdFBlcnNvbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1lbWJlciA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTUVNQkVSLnF1ZXJ5KHsgaWQ6IHIubWVtYmVyX2lkIH0sIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW1iZXIubWVtID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1lbWJlckFnZW5jeSA9ICRzY29wZS5hZ2VuY2llcy5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuYWdlbmN5X2lkID09IG1lbWJlci5tZW0uYWdlbmN5X2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZW1iZXIuYWdlbmN5X25hbWUgPSBtZW1iZXJBZ2VuY3kuYWdlbmN5X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVtYmVyLmFnZW5jeV9hZGRyZXNzID0gbWVtYmVyQWdlbmN5LmFkZHJlc3MgKyBcIiwgXCIgKyBtZW1iZXJBZ2VuY3kuY2l0eSArIFwiIFwiICsgbWVtYmVyQWdlbmN5LnN0YXRlICsgXCIgXCIgKyBtZW1iZXJBZ2VuY3kuemlwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbWVtYmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250YWN0czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIENPTlRBQ1QuZ2V0Q29udGFjdE1vZGVsKHsgUmVwb3J0TWV0cmljOiByLnJlcG9ydGluZ19tZXRyaWNzX2lkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9ub3RoaW5nIHRvIGRvIGhlcmVcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy9lbmQgbW9kYWxcclxuICAgICAgICAgICAgfTsvL2VuZCBWaWV3UmVwb3J0IGNsaWNrXHJcblxyXG4gICAgICAgICAgICAvL2Z1bmN0aW9uIGNhbGwgdG8gYWRkIGV2ZW50X25hbWUgdG8gbGlzdCBvZiByZXBvcnRzXHJcbiAgICAgICAgICAgIHZhciBmb3JtYXRSZXBvcnQgPSBmdW5jdGlvbiAocmVwTGlzdCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJldHVybkxpc3QgPSBbXTtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmVwTGlzdC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXAgPSByZXBMaXN0W2ldO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBldmVudCA9ICRzY29wZS5ldmVudHMuZmlsdGVyKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLmV2ZW50X2lkID09IHJlcC5ldmVudF9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgcmVwLmV2ZW50X25hbWUgPSBldmVudC5ldmVudF9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybkxpc3QucHVzaChyZXApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHJldHVybkxpc3Q7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICB2YXIgdG9kYXlSZXBvcnRzID0gJHNjb3BlLnJlcG9ydHNUb0RhdGUuZmlsdGVyKGZ1bmN0aW9uICh0b2RheXJlcCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlcG9ydERhdGUgPSB0b2RheXJlcC5yZXBvcnRfZGF0ZS50b1N0cmluZygpLnN1YnN0cmluZygwLCAxMCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVwb3J0RGF0ZSA9PSAkc2NvcGUudG9kYXk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAkc2NvcGUudG9kYXlScHRzID0gZm9ybWF0UmVwb3J0KHRvZGF5UmVwb3J0cyk7XHJcblxyXG4gICAgICAgICAgICB2YXIgeWVzdGVyZGF5UmVwb3J0cyA9ICRzY29wZS5yZXBvcnRzVG9EYXRlLmZpbHRlcihmdW5jdGlvbiAoeWVzdHJlcCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlcG9ydERhdGUgPSB5ZXN0cmVwLnJlcG9ydF9kYXRlLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIDEwKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiByZXBvcnREYXRlID09ICRzY29wZS55ZXN0ZXJkYXk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAkc2NvcGUueWVzdGVyZGF5UnB0cyA9IGZvcm1hdFJlcG9ydCh5ZXN0ZXJkYXlSZXBvcnRzKTtcclxuXHJcbiAgICAgICAgICAgIC8vZ2l2ZSBtZSB0aGUgcmVwb3J0cyBkb25lIG9uIHRoaXMgZGF0ZVxyXG4gICAgICAgICAgICAkc2NvcGUuZ2V0UmVwb3J0c0J5RGF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuVEhJU19EQVRFLmRhdGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmb3JtYXREYXRlID0gbmV3IERhdGUoJHNjb3BlLlRISVNfREFURS5kYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXREYXRlLnNldEhvdXJzKDAsIDAsIDAsIDApO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvcm1hdERhdGUgPSBmb3JtYXREYXRlLnRvSVNPU3RyaW5nKCkuc3Vic3RyKDAsIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc0RhdGVSZXBvcnRzID0gJHNjb3BlLnJlcG9ydHNUb0RhdGUuZmlsdGVyKGZ1bmN0aW9uICh0ZGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVwb3J0RGF0ZSA9IHRkYXRlLnJlcG9ydF9kYXRlLnRvU3RyaW5nKCkuc3Vic3RyaW5nKDAsIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcG9ydERhdGUgPT0gZm9ybWF0RGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGlja0RhdGVScHRzID0gZm9ybWF0UmVwb3J0KHRoaXNEYXRlUmVwb3J0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBpY2tBZGF0ZVJlcG9ydHMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhbGVydChcIlBpY2sgYSBkYXRlIGZpcnN0LlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2NvbXBsZXRlIHRoZSByZXBvcnQgYnV0dG9uIGNsaWNrZWQgLS0gc2VuZCBiYWNrIHRvIHN1Ym1pdCB3aXRoIHJlcG9ydCBwb3B1bGF0ZWRcclxuICAgICAgICAgICAgJHNjb3BlLkNvbXBsZXRlVGhpc1JlcG9ydCA9IGZ1bmN0aW9uIChyZXApIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS4kcGFyZW50Lm5ld1JlcG9ydCA9IHJlcDtcclxuICAgICAgICAgICAgICAgLy8gJHNjb3BlLiRwYXJlbnQubmV3UmVwb3J0LnJlcG9ydF9kYXRlID0gbmV3IERhdGUocmVwLnJlcG9ydF9kYXRlKTsgLy9rZWVwcyBpdCB2YWxpZFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRwYXJlbnQuZGlzYWJsZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS4kcGFyZW50Lm5lZWRUb0NvbXBsZXRlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgIENPTlRBQ1QuZ2V0Q29udGFjdE1vZGVsKHsgUmVwb3J0TWV0cmljOiByZXAucmVwb3J0aW5nX21ldHJpY3NfaWQgfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXNwb25zZS5sZW5ndGggPj0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJHBhcmVudC5EZXBsb3lTdGFmZiA9IHJlc3BvbnNlLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5jb250YWN0VHlwZSA9PSBcIkRlcGxveWVkIFN0YWZmXCI7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJHBhcmVudC5HZW5TdGFmZiA9IHJlc3BvbnNlLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5jb250YWN0VHlwZSA9PSBcIkdlbmVyYWxcIjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kcGFyZW50LklubGFuZFN0YWZmID0gcmVzcG9uc2UuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmNvbnRhY3RUeXBlID09IFwiSW5sYW5kIEZsb29kXCI7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuJHBhcmVudC5Db2FzdFN0YWZmID0gcmVzcG9uc2UuZmlsdGVyKGZ1bmN0aW9uIChkKSB7IHJldHVybiBkLmNvbnRhY3RUeXBlID09IFwiQ29hc3RhbCBGbG9vZFwiOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRwYXJlbnQuV2F0ZXJTdGFmZiA9IHJlc3BvbnNlLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5jb250YWN0VHlwZSA9PSBcIldhdGVyIFF1YWxpdHlcIjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRwYXJlbnQuRGVwbG95U3RhZmYgPSB7fTsgJHNjb3BlLiRwYXJlbnQuR2VuU3RhZmYgPSB7fTsgJHNjb3BlLiRwYXJlbnQuSW5sYW5kU3RhZmYgPSB7fTsgJHNjb3BlLiRwYXJlbnQuQ29hc3RTdGFmZiA9IHt9OyAkc2NvcGUuJHBhcmVudC5XYXRlclN0YWZmID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdyZXBvcnRpbmcuc3VibWl0UmVwb3J0Jyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vcHJvamVjdCBhbGVydCB0ZXh0IGluIG1vZGFsXHJcbiAgICAgICAgICAgICRzY29wZS5nZXRQcm9qZWN0QWxlcnRUZXh0ID0gZnVuY3Rpb24gKHJlcCkge1xyXG5cclxuICAgICAgICAgICAgICAgIC8vbmVlZDogXHJcbiAgICAgICAgICAgICAgICAvLzEuIHRoaXNSZXBvcnRcclxuICAgICAgICAgICAgICAgICRzY29wZS5Qcm9qZWN0QWxlcnRQYXJ0cyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLlByb2plY3RBbGVydFBhcnRzLlJlcG9ydCA9IHJlcDtcclxuICAgICAgICAgICAgICAgIC8vMi4gdG90YWwgb2YgWUVTVCBGSUVMRFBFUlNcclxuICAgICAgICAgICAgICAgICRzY29wZS5Qcm9qZWN0QWxlcnRQYXJ0cy50b3RZZXN0RmllbGRQZXJzID0gcmVwLnllc3RfZmllbGRwZXJzO1xyXG4gICAgICAgICAgICAgICAgLy8zLiB0b3RhbCBvZiBPRkZJQ0VQRVJTXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuUHJvamVjdEFsZXJ0UGFydHMudG90WWVzdE9mZmljUGVycyA9IHJlcC55ZXN0X29mZmljZXBlcnM7XHJcbiAgICAgICAgICAgICAgICAvLzQuIHRvdGFsIHRvdF9kaXNjaGFyZ2VfbWVhc1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLlByb2plY3RBbGVydFBhcnRzLm1lYXN1cmVDdHMgPSByZXAudG90X2Rpc2NoYXJnZV9tZWFzO1xyXG4gICAgICAgICAgICAgICAgLy81LiB0b3RhbCBzdGF0ZXMgcmVzcG9uZGluZyAoYWxsIHJlcG9ydHMgd2l0aCB0aGlzIGV2ZW50X2lkLCBjb3VudCBvZiBlYWNoIHN0YXRlKVxyXG4gICAgICAgICAgICAgICAgdmFyIGV2ZW50UmVwb3J0cyA9ICRzY29wZS5yZXBvcnRzVG9EYXRlLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gci5ldmVudF9pZCA9PSByZXAuZXZlbnRfaWQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgdmFyIHRlc3QgPSAkZmlsdGVyKCdjb3VudEJ5JykoZXZlbnRSZXBvcnRzLCAnc3RhdGUnKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5Qcm9qZWN0QWxlcnRQYXJ0cy5zdGF0ZUNvdW50ID0gMDtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCh0ZXN0LCBmdW5jdGlvbiAoZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUHJvamVjdEFsZXJ0UGFydHMuc3RhdGVDb3VudCsrO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvLzYuIHRoaXMgZXZlbnRcclxuICAgICAgICAgICAgICAgICRzY29wZS5Qcm9qZWN0QWxlcnRQYXJ0cy5FdmVudCA9ICRzY29wZS5ldmVudHMuZmlsdGVyKGZ1bmN0aW9uIChlKSB7IHJldHVybiBlLmV2ZW50X2lkID09IHJlcC5ldmVudF9pZDsgfSlbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgLy9tb2RhbFxyXG4gICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICRzY29wZS5Qcm9qZWN0QWxlcnRQYXJ0cy5FdmVudC5ldmVudF90eXBlX2lkID09IDEgPyAnRmxvb2RQQS5odG1sJyA6ICdIdXJyaWNhbmVQQS5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnUHJvakFsZXJ0TW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnbWQnLFxyXG4gICAgICAgICAgICAgICAgICAgIHdpbmRvd0NsYXNzOiAncmVwLWRpYWxvZycsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQcm9qQWxlcnQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkc2NvcGUuUHJvamVjdEFsZXJ0UGFydHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL25vdGhpbmcgdG8gZG8gaGVyZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1dKTtcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBTVE5Db250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTVE5Db250cm9sbGVycycpO1xyXG4vLyNyZWdpb24gUmVwb3J0aW5nIENvbnRyb2xsZXJcclxuICAgIFNUTkNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ3JlcG9ydGluZ0N0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRjb29raWVzJywgJyRsb2NhdGlvbicsICckaHR0cCcsICckdWliTW9kYWwnLCAnbWVtYmVyUmVwb3J0cycsICdhbGxFdmVudHMnLCAnYWxsU3RhdGVzJywgJ2FsbFJlcG9ydHMnLCAnYWxsRXZlbnRUeXBlcycsICdhbGxFdmVudFN0YXR1cycsICdhbGxBZ2VuY2llcycsICdTRVJWRVJfVVJMJywgJ1JFUE9SVCcsICdNRU1CRVInLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRjb29raWVzLCAkbG9jYXRpb24sICRodHRwLCAkdWliTW9kYWwsIG1lbWJlclJlcG9ydHMsIGFsbEV2ZW50cywgYWxsU3RhdGVzLCBhbGxSZXBvcnRzLCBhbGxFdmVudFR5cGVzLCBhbGxFdmVudFN0YXR1cywgYWxsQWdlbmNpZXMsIFNFUlZFUl9VUkwsIFJFUE9SVCwgTUVNQkVSKSB7XHJcbiAgICAgICAgICAgIGlmICgkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IHVuZGVmaW5lZCB8fCAkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hdXRoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnRoaXNQYWdlID0gXCJSZXBvcnRpbmdcIjtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuYWN0aXZlTWVudSA9IFwicmVwb3J0XCI7IFxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIGNoYW5naW5nIHRhYnMgaGFuZGxlciAvLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uIChldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmb3JtSXNQb3B1bGF0ZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGZyb21TdGF0ZS51cmwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnL1N1Ym1pdFJlcG9ydCc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmZ1bGxSZXBvcnRGb3JtLnN1Ym1pdCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUlzUG9wdWxhdGVkID0gJHNjb3BlLmZ1bGxSZXBvcnRGb3JtLnN1Ym1pdC4kZGlydHk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybUlzUG9wdWxhdGVkID0gJHNjb3BlLmZ1bGxSZXBvcnRGb3JtLnN1Ym1pdC5ldmVudF9pZC4kdmlld1ZhbHVlICE9PSB1bmRlZmluZWQgPyB0cnVlIDogZm9ybUlzUG9wdWxhdGVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmb3JtSXNQb3B1bGF0ZWQpIHsgLy9pcyBkaXJ0eVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygndG9TdGF0ZS5uYW1lOiAnICsgdG9TdGF0ZS5uYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ2Zyb21TdGF0ZS5uYW1lOiAnICsgZnJvbVN0YXRlLm5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbmZpcm0oXCJBcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gbGVhdmUgdGhlIFN1Ym1pdCBSZXBvcnQgVGFiPyBBbnkgdW5zYXZlZCBpbmZvcm1hdGlvbiB3aWxsIGJlIGxvc3QuXCIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZ28gdG86ICcgKyB0b1N0YXRlLm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ3N0YXkgYXQgc3RhdGU6ICcgKyBmcm9tU3RhdGUubmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyRzY29wZS4kYXBwbHkoKTsvLyBsb2FkaW5nLi4vLyQoXCIucGFnZS1sb2FkaW5nXCIpLmFkZENsYXNzKFwiaGlkZGVuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZXZlbnQuc3RvcFByb3BhZ2F0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gY2hhbmdpbmcgdGFicyBoYW5kbGVyIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gRGF0ZXBpY2tlclxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRhdGVwaWNrcnMgPSB7fTtcclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUub3BlbiA9IGZ1bmN0aW9uICgkZXZlbnQsIHdoaWNoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tyc1t3aGljaF0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgICAgICAgICAgICAgIC8vZm9ybWF0IHRoZSBkYXRlIG1tL2RkL3l5eXlcclxuICAgICAgICAgICAgICAgICRzY29wZS5mb3JtYXREYXRlID0gZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3VycmVudER0ID0gbmV3IERhdGUoZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1tID0gY3VycmVudER0LmdldE1vbnRoKCkgKyAxO1xyXG4gICAgICAgICAgICAgICAgICAgIG1tID0gKG1tIDwgMTApID8gJzAnICsgbW0gOiBtbTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGQgPSBjdXJyZW50RHQuZ2V0RGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB5eXl5ID0gY3VycmVudER0LmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGUgPSBtbSArICcvJyArIGRkICsgJy8nICsgeXl5eTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIGdsb2JhbCB2YXJzXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2VydmVyVVJMID0gU0VSVkVSX1VSTDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5mdWxsUmVwb3J0Rm9ybSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld1JlcG9ydCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkRlcGxveVN0YWZmID0ge307ICRzY29wZS5HZW5TdGFmZiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLklubGFuZFN0YWZmID0ge307ICRzY29wZS5Db2FzdFN0YWZmID0ge307XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuV2F0ZXJTdGFmZiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRpc2FibGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5uZWVkVG9Db21wbGV0ZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm1lbWJlckluY29tcGxldGVzID0gbWVtYmVyUmVwb3J0cy5maWx0ZXIoZnVuY3Rpb24gKGlyKSB7IHJldHVybiBpci5jb21wbGV0ZSA9PT0gMDsgfSk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXZlbnRzID0gYWxsRXZlbnRzO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRlcyA9IGFsbFN0YXRlcztcclxuICAgICAgICAgICAgICAgICRzY29wZS5yZXBvcnRzID0gYWxsUmVwb3J0cztcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICBNRU1CRVIucXVlcnkoeyBpZDogJGNvb2tpZXMuZ2V0KCdtSUQnKSB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk1lbWJlckxvZ2dlZEluID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1lbWJlckFnZW5jeSA9IGFsbEFnZW5jaWVzLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gJHNjb3BlLk1lbWJlckxvZ2dlZEluLmFnZW5jeV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk1lbWJlckxvZ2dlZEluLmFnZW5jeV9uYW1lID0gbWVtYmVyQWdlbmN5LmFnZW5jeV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5NZW1iZXJMb2dnZWRJbi5hZ2VuY3lfYWRkcmVzcyA9IG1lbWJlckFnZW5jeS5hZGRyZXNzICsgXCIsIFwiICsgbWVtYmVyQWdlbmN5LmNpdHkgKyBcIiBcIiArIG1lbWJlckFnZW5jeS5zdGF0ZSArIFwiIFwiICsgbWVtYmVyQWdlbmN5LnppcDtcclxuICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgTUVNQkVSLmdldEFsbCgpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1lbWJlcnMgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY2llcyA9IGFsbEFnZW5jaWVzO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmV2ZW50VHlwZXMgPSBhbGxFdmVudFR5cGVzO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmV2ZW50U3RhdHMgPSBhbGxFdmVudFN0YXR1cztcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gZ2xvYmFsIHZhcnNcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gR2VuZXJhdGUgUmVwb3J0IHRhYlxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLlN0YXRlbW9kZWwgPSB7fTsvL2JpbmRpbmcgdG8gdGhlIHN0YXRlIG11bHRpLXNlbGVjdFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmdlblN1bW1hcnkgPSB7fTsvL2JpbmRpbmcgZm9yIHRoZSBldmVudCBjaG9zZW4sIGFuZCBkYXRlIGNob3NlblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmZpbHRlcmVkUmVwb3J0cyA9IFtdOyAvL3Jlc3VsdCBvZiBmaWx0ZXIgb3B0aW9uc1xyXG5cclxuICAgICAgICAgICAgICAgIC8vZWFjaCBvcHRpb24gdGhlIHBvcHVsYXRlLCBuZWVkIHRvIHNob3cgc2VsZWN0aW9uIGluICdDb25maXJtIFNlbGVjdGlvbnMnIHNlY3Rpb24gKGRhdGUgd29ya3MpXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZ2VuUmVwQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5FdmVudE5hbWUgPSAkc2NvcGUuZXZlbnRzLmZpbHRlcihmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5ldmVudF9pZCA9PSAkc2NvcGUuZ2VuU3VtbWFyeS5ldmVudF9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5hbWVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFiYnJldnMgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLlN0YXRlbW9kZWwudmFsdWUsIGZ1bmN0aW9uIChzdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lcy5wdXNoKHN0YXRlLnN0YXRlX25hbWUpOyBhYmJyZXZzLnB1c2goc3RhdGUuc3RhdGVfYWJicmV2KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlN0YXRlTmFtZXMgPSBuYW1lcy5qb2luKCcsJyk7ICRzY29wZS5TdGF0ZUFiYnJldnMgPSBhYmJyZXZzLmpvaW4oJywnKTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk1ldHJpY0Rpc3BsYXlNb2RlbCA9IFtdOyAvL2hvbGQgYWxsIHJlcG9ydE1vZGVscyBmb3IgJ0Rpc3BsYXkgTWV0cmljcyBTdW1tYXJ5J1xyXG4gICAgICAgICAgICAgICAgLy9jbGlja2VkIERpc3BsYXkgTWV0cmljcyBTdW1tYXJ5LCBzaG93IGNvbnRlbnQgaW4gbmV3IHRhYlxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRpc3BsYXlNZXRyaWNTdW0gPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8jcmVnaW9uIHNjb3BlcyBuZWVkZWQgZm9yIHRoaXMgYWN0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5NZXRyaWNEaXNwbGF5TW9kZWwgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkdlblJlcEV2ZW50TW9kZWwgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93ID0ge307IC8vbW9kZWwgdG8gaG9sZCB0b3RhbHMgZm9yIHRhYmxlcyBsYXN0IHJvd1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cubm90QWNjdEZvckVtcHMgPSAwOyAkc2NvcGUudG90YWxSb3cuY3VtUEZpZWxkID0gMDsgJHNjb3BlLnRvdGFsUm93Lnllc1BGaWVsZCA9IDA7ICRzY29wZS50b3RhbFJvdy50b2RQRmllbGQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cudG9tUEZpZWxkID0gMDsgJHNjb3BlLnRvdGFsUm93LmN1bVBPZmZpY2UgPSAwOyAkc2NvcGUudG90YWxSb3cueWVzUE9mZmljZSA9IDA7ICRzY29wZS50b3RhbFJvdy50b2RQT2ZmaWNlID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LnRvbVBPZmZpY2UgPSAwOyAkc2NvcGUudG90YWxSb3cudHJ1Y2sgPSAwOyAkc2NvcGUudG90YWxSb3cuYm9hdCA9IDA7ICRzY29wZS50b3RhbFJvdy5vdGhlciA9IDA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cuZ2FnZVZpc2l0cyA9IDA7ICRzY29wZS50b3RhbFJvdy5nYWdlc0Rvd24gPSAwOyAkc2NvcGUudG90YWxSb3cuZGlzQ3RvRGF0ZSA9IDA7ICRzY29wZS50b3RhbFJvdy5kaXNDUGxhbm5lZCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy5DaGVja01lYXNUb0RhdGUgPSAwOyAkc2NvcGUudG90YWxSb3cuQ2hlY2tNZWFzUGxhbm5lZCA9IDA7ICRzY29wZS50b3RhbFJvdy5pbmRNZWFzID0gMDsgJHNjb3BlLnRvdGFsUm93LnJhdEV4dCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy5wZWFrc09mUmVjID0gMDsgJHNjb3BlLnRvdGFsUm93LlFXR2FnZVZpcyA9IDA7ICRzY29wZS50b3RhbFJvdy5jb250UVdHYWdlVmlzID0gMDsgJHNjb3BlLnRvdGFsUm93LmNvbnRRV0dhZ2VEb3duID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LmRpc1FXU2FtcGxlcyA9IDA7ICRzY29wZS50b3RhbFJvdy5zZWRTYW1wbGVzID0gMDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy5yZGdQbGFuID0gMDsgJHNjb3BlLnRvdGFsUm93LnJkZ0RlcCA9IDA7ICRzY29wZS50b3RhbFJvdy5yZGdSZWMgPSAwOyAkc2NvcGUudG90YWxSb3cucmRnTG9zdCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy53YXRlclBsYW4gPSAwOyAkc2NvcGUudG90YWxSb3cud2F0ZXJEZXAgPSAwOyAkc2NvcGUudG90YWxSb3cud2F0ZXJSZWMgPSAwOyAkc2NvcGUudG90YWxSb3cud2F0ZXJMb3N0ID0gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LndhdmVQbGFuID0gMDsgJHNjb3BlLnRvdGFsUm93LndhdmVEZXAgPSAwOyAkc2NvcGUudG90YWxSb3cud2F2ZVJlYyA9IDA7ICRzY29wZS50b3RhbFJvdy53YXZlTG9zdCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy5iYXJvUGxhbiA9IDA7ICRzY29wZS50b3RhbFJvdy5iYXJvRGVwID0gMDsgJHNjb3BlLnRvdGFsUm93LmJhcm9SZWMgPSAwOyAkc2NvcGUudG90YWxSb3cuYmFyb0xvc3QgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cubWV0UGxhbiA9IDA7ICRzY29wZS50b3RhbFJvdy5tZXREZXAgPSAwOyAkc2NvcGUudG90YWxSb3cubWV0UmVjID0gMDsgJHNjb3BlLnRvdGFsUm93Lm1ldExvc3QgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cuaHdtRmxhZyA9IDA7ICRzY29wZS50b3RhbFJvdy5od21Db2wgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gc2NvcGVzIG5lZWRlZCBmb3IgdGhpcyBhY3Rpb25cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZ2V0IG1ldHJpY3Mgc3VtbWFyeSB0byBzaG93IGluIG5ldyB0YWIgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWJicmV2cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLlN0YXRlbW9kZWwudmFsdWUsIGZ1bmN0aW9uIChzdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJicmV2cy5wdXNoKHN0YXRlLnN0YXRlX2FiYnJldik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWJicmV2U3RyaW5nID0gYWJicmV2cy5qb2luKCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzRGF0ZSA9ICRzY29wZS5mb3JtYXREYXRlKCRzY29wZS5nZW5TdW1tYXJ5LnN1bV9kYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9uZWVkOiBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8xLiBhbGwgcmVwb3J0c1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBSRVBPUlQuZ2V0RmlsdGVyZWRSZXBvcnRzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50OiAkc2NvcGUuRXZlbnROYW1lLmV2ZW50X2lkLCBTdGF0ZXM6IGFiYnJldlN0cmluZywgRGF0ZTogdGhpc0RhdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2ZvciBlYWNoIHJlcG9ydCwgZ2V0IGFsbCByZXBvcnRzIHdpdGggdGhhdCBldmVudCBhbmQgc3RhdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgcmVzdWx0Lmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNSUE1vZGVsID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1JQTW9kZWwucmVwb3J0ID0gcmVzdWx0W3hdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FkZCB0byB0b3RhbHMgZm9yIHRvdGFsIHJvd1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy5ub3RBY2N0Rm9yRW1wcyArPSAodGhpc1JQTW9kZWwucmVwb3J0LnN3X2ZpZWxkcGVyc19ub3RhY2N0ICsgdGhpc1JQTW9kZWwucmVwb3J0LndxX2ZpZWxkcGVyc19ub3RhY2N0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cuY3VtUEZpZWxkICs9IHRoaXNSUE1vZGVsLnJlcG9ydC55ZXN0X2ZpZWxkcGVycyArIHRoaXNSUE1vZGVsLnJlcG9ydC50b2RfZmllbGRwZXJzICsgdGhpc1JQTW9kZWwucmVwb3J0LnRtd19maWVsZHBlcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93Lnllc1BGaWVsZCArPSB0aGlzUlBNb2RlbC5yZXBvcnQueWVzdF9maWVsZHBlcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LnRvZFBGaWVsZCArPSB0aGlzUlBNb2RlbC5yZXBvcnQudG9kX2ZpZWxkcGVycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cudG9tUEZpZWxkICs9IHRoaXNSUE1vZGVsLnJlcG9ydC50bXdfZmllbGRwZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy5jdW1QT2ZmaWNlICs9IHRoaXNSUE1vZGVsLnJlcG9ydC55ZXN0X29mZmljZXBlcnMgKyB0aGlzUlBNb2RlbC5yZXBvcnQudG9kX29mZmljZXBlcnMgKyB0aGlzUlBNb2RlbC5yZXBvcnQudG13X29mZmljZXBlcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93Lnllc1BPZmZpY2UgKz0gdGhpc1JQTW9kZWwucmVwb3J0Lnllc3Rfb2ZmaWNlcGVycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cudG9kUE9mZmljZSArPSB0aGlzUlBNb2RlbC5yZXBvcnQudG9kX29mZmljZXBlcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LnRvbVBPZmZpY2UgKz0gdGhpc1JQTW9kZWwucmVwb3J0LnRtd19vZmZpY2VwZXJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LmdhZ2VWaXNpdHMgKz0gdGhpc1JQTW9kZWwucmVwb3J0LmdhZ2VfdmlzaXQ7ICRzY29wZS50b3RhbFJvdy5nYWdlc0Rvd24gKz0gdGhpc1JQTW9kZWwucmVwb3J0LmdhZ2VfZG93bjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cuZGlzQ3RvRGF0ZSArPSB0aGlzUlBNb2RlbC5yZXBvcnQudG90X2Rpc2NoYXJnZV9tZWFzOyAkc2NvcGUudG90YWxSb3cuZGlzQ1BsYW5uZWQgKz0gdGhpc1JQTW9kZWwucmVwb3J0LnBsYW5fZGlzY2hhcmdlX21lYXM7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy5pbmRNZWFzICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5wbGFuX2luZGlyZWN0X21lYXM7ICRzY29wZS50b3RhbFJvdy5yYXRFeHQgKz0gdGhpc1JQTW9kZWwucmVwb3J0LnJhdGluZ19leHRlbnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LnBlYWtzT2ZSZWMgKz0gdGhpc1JQTW9kZWwucmVwb3J0LmdhZ2VfcGVha19yZWNvcmQ7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy5kaXNRV1NhbXBsZXMgKz0gdGhpc1JQTW9kZWwucmVwb3J0LnF3X2Rpc2NyX3NhbXBsZXM7ICRzY29wZS50b3RhbFJvdy5zZWRTYW1wbGVzICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5jb2xsX3NlZHNhbXBsZXM7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy5yZGdQbGFuICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5wbGFuX3JhcGRlcGxfZ2FnZTsgJHNjb3BlLnRvdGFsUm93LnJkZ0RlcCArPSB0aGlzUlBNb2RlbC5yZXBvcnQuZGVwX3JhcGRlcGxfZ2FnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cucmRnUmVjICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5yZWNfcmFwZGVwbF9nYWdlOyAkc2NvcGUudG90YWxSb3cucmRnTG9zdCArPSB0aGlzUlBNb2RlbC5yZXBvcnQubG9zdF9yYXBkZXBsX2dhZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LndhdGVyUGxhbiArPSB0aGlzUlBNb2RlbC5yZXBvcnQucGxhbl93dHJsZXZfc2Vuc29yOyAkc2NvcGUudG90YWxSb3cud2F0ZXJEZXAgKz0gdGhpc1JQTW9kZWwucmVwb3J0LmRlcF93dHJsZXZfc2Vuc29yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy53YXRlclJlYyArPSB0aGlzUlBNb2RlbC5yZXBvcnQucmVjX3d0cmxldl9zZW5zb3I7ICRzY29wZS50b3RhbFJvdy53YXRlckxvc3QgKz0gdGhpc1JQTW9kZWwucmVwb3J0Lmxvc3Rfd3RybGV2X3NlbnNvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cud2F2ZVBsYW4gKz0gdGhpc1JQTW9kZWwucmVwb3J0LnBsYW5fd3Zfc2VuczsgJHNjb3BlLnRvdGFsUm93LndhdmVEZXAgKz0gdGhpc1JQTW9kZWwucmVwb3J0LmRlcF93dl9zZW5zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy53YXZlUmVjICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5yZWNfd3Zfc2VuczsgJHNjb3BlLnRvdGFsUm93LndhdmVMb3N0ICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5sb3N0X3d2X3NlbnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93LmJhcm9QbGFuICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5wbGFuX2Jhcm9tZXRyaWM7ICRzY29wZS50b3RhbFJvdy5iYXJvRGVwICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5kZXBfYmFyb21ldHJpYztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cuYmFyb1JlYyArPSB0aGlzUlBNb2RlbC5yZXBvcnQucmVjX2Jhcm9tZXRyaWM7ICRzY29wZS50b3RhbFJvdy5iYXJvTG9zdCArPSB0aGlzUlBNb2RlbC5yZXBvcnQubG9zdF9iYXJvbWV0cmljO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS50b3RhbFJvdy5tZXRQbGFuICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5wbGFuX21ldGVvcm9sb2dpY2FsOyAkc2NvcGUudG90YWxSb3cubWV0RGVwICs9IHRoaXNSUE1vZGVsLnJlcG9ydC5kZXBfbWV0ZW9yb2xvZ2ljYWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnRvdGFsUm93Lm1ldFJlYyArPSB0aGlzUlBNb2RlbC5yZXBvcnQucmVjX21ldGVvcm9sb2dpY2FsOyAkc2NvcGUudG90YWxSb3cubWV0TG9zdCArPSB0aGlzUlBNb2RlbC5yZXBvcnQubG9zdF9tZXRlb3JvbG9naWNhbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxSb3cuaHdtRmxhZyArPSB0aGlzUlBNb2RlbC5yZXBvcnQuaHdtX2ZsYWdnZWQ7ICRzY29wZS50b3RhbFJvdy5od21Db2wgPSB0aGlzUlBNb2RlbC5yZXBvcnQuaHdtX2NvbGxlY3RlZDtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk1ldHJpY0Rpc3BsYXlNb2RlbC5wdXNoKHRoaXNSUE1vZGVsKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0vL2VuZCBmb3Jsb29wIGZvciBSZXBvcnRNb2RlbExpc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vMi4gdGhpcyBFdmVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkdlblJlcEV2ZW50TW9kZWwgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5HZW5SZXBFdmVudE1vZGVsLkV2ZW50ID0gJHNjb3BlLkV2ZW50TmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5HZW5SZXBFdmVudE1vZGVsLkV2ZW50VHlwZSA9ICRzY29wZS5ldmVudFR5cGVzLmZpbHRlcihmdW5jdGlvbiAoZXQpIHsgcmV0dXJuIGV0LmV2ZW50X3R5cGVfaWQgPT0gJHNjb3BlLkV2ZW50TmFtZS5ldmVudF90eXBlX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5HZW5SZXBFdmVudE1vZGVsLkV2ZW50U3RhdCA9ICRzY29wZS5ldmVudFN0YXRzLmZpbHRlcihmdW5jdGlvbiAoZXMpIHsgcmV0dXJuIGVzLmV2ZW50X3N0YXR1c19pZCA9PSAkc2NvcGUuRXZlbnROYW1lLmV2ZW50X3N0YXR1c19pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLzMuIGV2ZW50IENvb3JkaW5hdG9yIGluZm9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5HZW5SZXBFdmVudE1vZGVsLkNvb3JkaW5hdG9yID0gJHNjb3BlLm1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1lbWJlcl9pZCA9PSAkc2NvcGUuR2VuUmVwRXZlbnRNb2RlbC5FdmVudC5ldmVudF9jb29yZGluYXRvcjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuR2VuUmVwRXZlbnRNb2RlbC5Db29yZEFnZW5jeSA9ICRzY29wZS5hZ2VuY2llcy5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuYWdlbmN5X2lkID09ICRzY29wZS5HZW5SZXBFdmVudE1vZGVsLkNvb3JkaW5hdG9yLmFnZW5jeV9pZDsgfSlbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9tb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdNZXRyaWNzU3VtbWFyeS5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnbGcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd0NsYXNzOiAncmVwLWRpYWxvZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUmVwb3J0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLk1ldHJpY0Rpc3BsYXlNb2RlbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0V2ZW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLkdlblJlcEV2ZW50TW9kZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZVRvdGFsUm93OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLnRvdGFsUm93O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsICd0aGlzUmVwb3J0JywgJ3RoaXNFdmVudCcsICd0aGVUb3RhbFJvdycsICBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSwgdGhpc1JlcG9ydCwgdGhpc0V2ZW50LCB0aGVUb3RhbFJvdykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUmVwb3J0ID0gdGhpc1JlcG9ydDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkV2ZW50ID0gdGhpc0V2ZW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudG90YWxzID0gdGhlVG90YWxSb3c7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJpbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cucHJpbnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vdGhpbmcgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgaWYgdmFsaWQgPSB0cnVlXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vY2xpY2tlZCBEaXNwbGF5IENvbnRhY3RzIFN1bW1hcnksIHNob3cgY29udGVudCBpbiBuZXcgdGFiXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGlzcGxheUNvbnRhY3RzU3VtID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZ2V0IG1ldHJpY3Mgc3VtbWFyeSB0byBzaG93IGluIG5ldyB0YWJcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jb250YWlucyB0aGUgc3RhdGVzIGNob3NlbiAgICAgJHNjb3BlLlN0YXRlbW9kZWwudmFsdWU7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2V2ZW50IGNob3NlbiAgICAkc2NvcGUuRXZlbnROYW1lWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWJicmV2cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLlN0YXRlbW9kZWwudmFsdWUsIGZ1bmN0aW9uIChzdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWJicmV2cy5wdXNoKHN0YXRlLnN0YXRlX2FiYnJldik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWJicmV2U3RyaW5nID0gYWJicmV2cy5qb2luKCcsJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzRGF0ZSA9ICRzY29wZS5mb3JtYXREYXRlKCRzY29wZS5nZW5TdW1tYXJ5LnN1bV9kYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlcG9ydE1vZGVsID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxsIGZpbHRlcmVkIHJlcG9ydHMgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBSRVBPUlQuZ2V0UmVwb3J0d2l0aENvbnRhY3RzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50OiAkc2NvcGUuRXZlbnROYW1lLmV2ZW50X2lkLCBTdGF0ZXM6IGFiYnJldlN0cmluZywgRGF0ZTogdGhpc0RhdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xvb3AgdGhyb3VnaCByZXBvcnRzIGFuZCBnZXQgZWFjaCdzIGNvbnRhY3RzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHJlc3VsdC5sZW5ndGg7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXAgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXAucmVwSUQgPSByZXN1bHRbeF0ucmVwb3J0aW5nX21ldHJpY3NfaWQ7IHJlcC5TdGF0ZSA9IHJlc3VsdFt4XS5zdGF0ZTsgcmVwLnJlcG9ydF9kYXRlID0gcmVzdWx0W3hdLnJlcG9ydF9kYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJtaXR0ZXIgPSAkc2NvcGUubWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09IHJlc3VsdFt4XS5tZW1iZXJfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzdWJtaXR0ZXJBZ2VuY3kgPSAkc2NvcGUuYWdlbmNpZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLmFnZW5jeV9pZCA9PSBzdWJtaXR0ZXIuYWdlbmN5X2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3ViID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViLmZuYW1lID0gc3VibWl0dGVyLmZuYW1lOyBzdWIubG5hbWUgPSBzdWJtaXR0ZXIubG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViLmVtYWlsID0gc3VibWl0dGVyLmVtYWlsOyBzdWIucGhvbmUgPSBzdWJtaXR0ZXIucGhvbmU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViLmFnZW5jeW5hbWUgPSBzdWJtaXR0ZXJBZ2VuY3kuYWdlbmN5X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3ViLmFnZW5jeWFkZCA9IHN1Ym1pdHRlckFnZW5jeS5jaXR5ICsgXCIgXCIgKyBzdWJtaXR0ZXJBZ2VuY3kuc3RhdGUgKyBcIiBcIiArIHN1Ym1pdHRlckFnZW5jeS56aXA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVwLnN1Ym1pdHRlciA9IHN1YjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXAuZGVwQyA9IHJlc3VsdFt4XS5SZXBvcnRDb250YWN0cy5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgudHlwZSA9PSBcIkRlcGxveWVkIFN0YWZmXCI7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlcC5nZW5DID0gcmVzdWx0W3hdLlJlcG9ydENvbnRhY3RzLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4geC50eXBlID09IFwiR2VuZXJhbFwiOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXAuaW5sQyA9IHJlc3VsdFt4XS5SZXBvcnRDb250YWN0cy5maWx0ZXIoZnVuY3Rpb24gKHgpIHsgcmV0dXJuIHgudHlwZSA9PSBcIklubGFuZCBGbG9vZFwiOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXAuY29hc3RDID0gcmVzdWx0W3hdLlJlcG9ydENvbnRhY3RzLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4geC50eXBlID09IFwiQ29hc3RhbCBGbG9vZFwiOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXAud2F0ZXJDID0gcmVzdWx0W3hdLlJlcG9ydENvbnRhY3RzLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4geC50eXBlID09IFwiV2F0ZXIgUXVhbGl0eVwiOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmVwb3J0TW9kZWwucHVzaChyZXApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAvL2VuZCBmb3IgbG9vcCBcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsgc2hvd01vZGFsKCk7IH0sIDMwMDApO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbm93IHNlbmQgaXQgYWxsIHRvIHRoZSBtb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNob3dNb2RhbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdDb250YWN0TWV0cmljc1N1bW1hcnkuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdsZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd0NsYXNzOiAncmVwLWRpYWxvZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoZXNlUmVwb3J0czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkc2NvcGUucmVwb3J0TW9kZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0V2ZW50OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkdlblJlcEV2ZW50TW9kZWwgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuR2VuUmVwRXZlbnRNb2RlbC5FdmVudCA9ICRzY29wZS5FdmVudE5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkdlblJlcEV2ZW50TW9kZWwuRXZlbnRUeXBlID0gJHNjb3BlLmV2ZW50VHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChldCkgeyByZXR1cm4gZXQuZXZlbnRfdHlwZV9pZCA9PSAkc2NvcGUuRXZlbnROYW1lLmV2ZW50X3R5cGVfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5HZW5SZXBFdmVudE1vZGVsLkV2ZW50U3RhdCA9ICRzY29wZS5ldmVudFN0YXRzLmZpbHRlcihmdW5jdGlvbiAoZXMpIHsgcmV0dXJuIGVzLmV2ZW50X3N0YXR1c19pZCA9PSAkc2NvcGUuRXZlbnROYW1lLmV2ZW50X3N0YXR1c19pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8zLiBldmVudCBDb29yZGluYXRvciBpbmZvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkdlblJlcEV2ZW50TW9kZWwuQ29vcmRpbmF0b3IgPSAkc2NvcGUubWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRzY29wZS5FdmVudE5hbWUuZXZlbnRfY29vcmRpbmF0b3I7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5HZW5SZXBFdmVudE1vZGVsLkNvb3JkQWdlbmN5ID0gJHNjb3BlLmFnZW5jaWVzLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gJHNjb3BlLkdlblJlcEV2ZW50TW9kZWwuQ29vcmRpbmF0b3IuYWdlbmN5X2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLkdlblJlcEV2ZW50TW9kZWw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRodHRwJywgJyR1aWJNb2RhbEluc3RhbmNlJywgJ3RoZXNlUmVwb3J0cycsICd0aGlzRXZlbnQnLCBmdW5jdGlvbiAoJHNjb3BlLCAkaHR0cCwgJHVpYk1vZGFsSW5zdGFuY2UsIHRoZXNlUmVwb3J0cywgdGhpc0V2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuUmVwb3J0cyA9IHRoZXNlUmVwb3J0cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5FdmVudCA9IHRoaXNFdmVudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucHJpbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LnByaW50KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vdGhpbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07IC8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gLy9lbmQgaWYgdmFsaWRcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy9jbGlja2VkIGdlbmVyYXRlIGNzdlxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmdldENTVmZpbGUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9nZXQgcmVwb3J0cyBhbmQgZ2l2ZSBhIGNzdiBmaWxlIGJhY2tcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ3RleHQvY3N2JztcclxuICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFJFUE9SVC5nZXRSZXBvcnRzQ1NWKHsgRXZlbnQ6ICRzY29wZS5nZW5TdW1tYXJ5LmV2ZW50X2lkLCBTdGF0ZXM6ICRzY29wZS5TdGF0ZUFiYnJldnMsIERhdGU6ICRzY29wZS5nZW5TdW1tYXJ5LnN1bV9kYXRlIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFuY2hvciA9IGFuZ3VsYXIuZWxlbWVudCgnPGEvPicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGpvaW5lZFJlc3BvbnNlID0gcmVzdWx0LmpvaW4oXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZSA9IG5ldyBCbG9iKFtqb2luZWRSZXNwb25zZV0sIHsgdHlwZTogJ2FwcGxpY2F0aW9uL2NzdicgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZVVSTCA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3IuaHJlZiA9IGZpbGVVUkw7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3IuZG93bmxvYWQgPSAncmVwb3J0LmNzdic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmNob3IuY2xpY2soKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9GaWxlLnNhdmVBcyhibG9iLCBcInJlcG9ydC5jc3ZcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnZXJyb3InKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9Oy8vI2VuZHJlZ2lvbiBHZW5lcmF0ZSBSZXBvcnQgdGFiXHJcbiAgICAgICAgICAgIH1cclxuICAgIH1dKTtcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBNb2RhbENvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ01vZGFsQ29udHJvbGxlcnMnKTtcclxuICAgIE1vZGFsQ29udHJvbGxlcnMuY29udHJvbGxlcignUHJvakFsZXJ0TW9kYWxDdHJsJywgWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCAnUHJvakFsZXJ0JywgXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UsIFByb2pBbGVydCkge1xyXG4gICAgICAgICAgICAkc2NvcGUuUHJvakFsZXJ0UGFydHMgPSBQcm9qQWxlcnQ7XHJcbiAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1dKTtcclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgTW9kYWxDb250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdNb2RhbENvbnRyb2xsZXJzJyk7XHJcbi8vcG9wdXAgY29uZmlybSBib3hcclxuICAgIE1vZGFsQ29udHJvbGxlcnMuY29udHJvbGxlcignY29uZmlybVJlcG9ydE1vZGFsQ3RybCcsIFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfV0pO1xyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgLyogY29udHJvbGxlcnMuanMsICdsZWFmbGV0LWRpcmVjdGl2ZScndWkudW5pcXVlJywnbmdUYWdzSW5wdXQnLCovXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIE1vZGFsQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnTW9kYWxDb250cm9sbGVycycpO1xyXG4gICAgTW9kYWxDb250cm9sbGVycy5jb250cm9sbGVyKCdwZWFrTW9kYWxDdHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckaHR0cCcsICckdWliTW9kYWxJbnN0YW5jZScsICckdWliTW9kYWwnLCAnU0VSVkVSX1VSTCcsICdhbGxWZXJ0RGF0dW1zJywgJ2FsbENvbGxlY3RDb25kaXRpb25zJywgJ3RoaXNQZWFrJywgJ3BlYWtTaXRlJywgJ2FsbE1lbWJlcnMnLCAnYWxsRXZlbnRIV01zJywgJ2FsbFNpdGVTZW5zb3JzJywgJ2FsbFNpdGVGaWxlcycsICd0aGlzUGVha0RGcycsICdEQVRBX0ZJTEUnLCAnUEVBSycsICdIV00nLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRjb29raWVzLCAkaHR0cCwgJHVpYk1vZGFsSW5zdGFuY2UsICR1aWJNb2RhbCwgU0VSVkVSX1VSTCwgYWxsVmVydERhdHVtcywgYWxsQ29sbGVjdENvbmRpdGlvbnMsIHRoaXNQZWFrLCBwZWFrU2l0ZSwgYWxsTWVtYmVycywgYWxsRXZlbnRIV01zLCBhbGxTaXRlU2Vuc29ycywgYWxsU2l0ZUZpbGVzLCB0aGlzUGVha0RGcywgREFUQV9GSUxFLCBQRUFLLCBIV00pIHtcclxuICAgICAgICAgICAgJHNjb3BlLnNlcnZlclVSTCA9IFNFUlZFUl9VUkw7XHJcbiAgICAgICAgICAgIC8vZHJvcGRvd25zXHJcbiAgICAgICAgICAgICRzY29wZS5WRGF0dW1zTGlzdCA9IGFsbFZlcnREYXR1bXM7XHJcbiAgICAgICAgICAgICRzY29wZS50aGlzU2l0ZSA9IHBlYWtTaXRlO1xyXG4gICAgICAgICAgICAkc2NvcGUubWVtYmVyTGlzdCA9IGFsbE1lbWJlcnM7XHJcbiAgICAgICAgICAgICRzY29wZS5sb2dnZWRJblJvbGUgPSAkY29va2llcy5nZXQoJ3VzZXJzUm9sZScpO1xyXG4gICAgICAgICAgICAvL25lZWQgYSBkYXRhZmlsZSBmb3IgdGhpcyBraW5kIG9mIHNlbnNvciwgY2hlY2sgZmlsZXMgZm9yIHByZXNlbmNlIG9mIGRmIHRvIHNldCBmbGFnIG9uIHNlbnNvclxyXG4gICAgICAgICAgICB2YXIgZGV0ZXJtaW5lREZQcmVzZW50ID0gZnVuY3Rpb24gKGYpIHtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgZi5sZW5ndGg7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmW3hdLmZpbGV0eXBlX2lkID09IDIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvL2FkZCBzZWxlY3RlZCBwcm9wIG5vdyBmb3IgZGF0YSBmaWxlcy9zZW5zb3IgZmlsZXMgZm9yIGxhdGVyIHVzZVxyXG4gICAgICAgICAgICBmb3IgKHZhciBzZiA9IDA7IHNmIDwgYWxsU2l0ZUZpbGVzLmxlbmd0aDsgc2YrKykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGFsbFNpdGVGaWxlc1tzZl0uZmlsZUJlbG9uZ3NUbyA9PSAnRGF0YUZpbGUgRmlsZScgfHwgYWxsU2l0ZUZpbGVzW3NmXS5maWxlQmVsb25nc1RvID09ICdTZW5zb3IgRmlsZScpIHtcclxuICAgICAgICAgICAgICAgICAgICBhbGxTaXRlRmlsZXNbc2ZdLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRzY29wZS5ldmVudFNpdGVIV01zID0gYWxsRXZlbnRIV01zLmZpbHRlcihmdW5jdGlvbiAoaCkgeyByZXR1cm4gaC5zaXRlX2lkID09IHBlYWtTaXRlLnNpdGVfaWQ7IH0pO1xyXG4gICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmV2ZW50U2l0ZUhXTXMsIGZ1bmN0aW9uIChlc2gpIHtcclxuICAgICAgICAgICAgICAgIGVzaC5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZXNoLmZpbGVzID0gYWxsU2l0ZUZpbGVzLmZpbHRlcihmdW5jdGlvbiAoc2YpIHsgcmV0dXJuIHNmLmh3bV9pZCA9PSBlc2guaHdtX2lkICYmIHNmLmZpbGVCZWxvbmdzVG8gPT0gXCJIV00gRmlsZVwiOyB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAkc2NvcGUuZXZlbnRTaXRlU2Vuc29ycyA9IGFsbFNpdGVTZW5zb3JzLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcy5ldmVudF9pZCA9PSAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudElEJyk7IH0pOyAvL21heWJlIGdvIGZyb20gaGVyZSB0byBnZXQgYWxsIGRhdGFmaWxlcyBmb3IgZWFjaCBzZW5zb3JcclxuICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5ldmVudFNpdGVTZW5zb3JzLCBmdW5jdGlvbiAoZXNzKSB7XHJcbiAgICAgICAgICAgICAgICAvLyBpZiBlc3MuU2Vuc29yX3R5cGUgPT0gMiwgNSwgb3IgNiAuLiBhbmQgdGhlcmUgYXJlIG5vIGZpbGVzLi4gc2hvdyByZWQgISB3aXRoIHRleHRcclxuICAgICAgICAgICAgICAgIGVzcy5Db2xsZWN0Q29uZGl0aW9uID0gZXNzLmluc3RfY29sbGVjdGlvbl9pZCAhPT0gbnVsbCAmJiBlc3MuaW5zdF9jb2xsZWN0aW9uX2lkID4gMCA/XHJcbiAgICAgICAgICAgICAgICAgICAgYWxsQ29sbGVjdENvbmRpdGlvbnMuZmlsdGVyKGZ1bmN0aW9uIChjYykgeyByZXR1cm4gY2MuaWQgPT0gZXNzLmluc3RfY29sbGVjdGlvbl9pZDsgfSlbMF0uY29uZGl0aW9uIDpcclxuICAgICAgICAgICAgICAgICAgICAnJztcclxuICAgICAgICAgICAgICAgIC8vc3RvcmUgaWYgdGhpcyBpcyByZXRyaWV2ZWQgKGlmIG5vdCwgc2hvdyAhIGZvciB0aGVtIHRvIHJldHJpZXZlIGl0IGluIG9yZGVyIHRvIGNvbXBsZXRlIHRoZSBwZWFrXHJcbiAgICAgICAgICAgICAgICBlc3MuaXNSZXRyaWV2ZWQgPSBlc3MuaW5zdHJ1bWVudF9zdGF0dXNbMF0uc3RhdHVzID09ICdSZXRyaWV2ZWQnID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgZXNzLmZpbGVzID0gYWxsU2l0ZUZpbGVzLmZpbHRlcihmdW5jdGlvbiAoc2YpIHsgcmV0dXJuIHNmLmluc3RydW1lbnRfaWQgPT0gZXNzLmluc3RydW1lbnRfaWQgJiYgKHNmLmZpbGVCZWxvbmdzVG8gPT0gXCJEYXRhRmlsZSBGaWxlXCIgfHwgc2YuZmlsZUJlbG9uZ3NUbyA9PSBcIlNlbnNvciBGaWxlXCIpOyB9KTtcclxuICAgICAgICAgICAgICAgIC8vdmFyIGhhc0RGID0ge3ZhbHVlOnRydWV9OyAoMjogTWV0IFN0YXRpb24sIDU6IFJhcGlkIERlcGxveW1lbnQgR2FnZSwgNjogUmFpbiBHYWdlKVxyXG4gICAgICAgICAgICAgICAgaWYgKGVzcy5zZW5zb3JfdHlwZV9pZCA9PSAyIHx8IGVzcy5zZW5zb3JfdHlwZV9pZCA9PSA1IHx8IGVzcy5zZW5zb3JfdHlwZV9pZCA9PSA2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGVzcy5maWxlcy5sZW5ndGggPT09IDApIGVzcy5OZWVkREYgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWRldGVybWluZURGUHJlc2VudChlc3MuZmlsZXMpKSBlc3MuTmVlZERGID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgaWYgdGhpcyBpcyBhIGRhdGFmaWxlIHJlcXVpcmluZyBzZW5zb3JcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy8gJHNjb3BlLnNpdGVGaWxlc0ZvclNlbnNvcnMgPSBhbGxTaXRlRmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChmKSB7IHJldHVybiBmLmluc3RydW1lbnRfaWQgIT09IG51bGwgJiYgZi5pbnN0cnVtZW50X2lkID4gMDsgfSk7XHJcbiAgICAgICAgICAgICRzY29wZS50aW1lWm9uZUxpc3QgPSBbJ1VUQycsICdQU1QnLCAnTVNUJywgJ0NTVCcsICdFU1QnXTtcclxuICAgICAgICAgICAgJHNjb3BlLkxvZ2dlZEluTWVtYmVyID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRjb29raWVzLmdldCgnbUlEJyk7IH0pWzBdO1xyXG4gICAgICAgICAgICAkc2NvcGUuY2hvc2VuSFdNTGlzdCA9IFtdOy8vaG9sZGVyIG9mIGNob3NlbiBod21zIGZvciB0aGlzIHBlYWtcclxuICAgICAgICAgICAgJHNjb3BlLnJlbW92ZWRDaG9zZW5IV01MaXN0ID0gW107IC8vaG9sZGVyIGZvciByZW1vdmVkIG9uZXMgZm9yIFBVVCAoaWYgdGhpcyBpcyBlZGl0KVxyXG4gICAgICAgICAgICAkc2NvcGUuY2hvc2VuREZMaXN0ID0gW107IC8vaG9sZGVyIGZvciBjaG9zZW4gZGF0YWZpbGUgZm9yIHRoaXMgcGVha1xyXG4gICAgICAgICAgICAkc2NvcGUucmVtb3ZlZENob3NlbkRGTGlzdCA9IFtdOyAvL2hvbGRlciBmb3IgcmVtb3ZlZCBvbmVzIGZvciBQVVQgKGlmIHRoaXMgaXMgZWRpdClcclxuICAgICAgICAgICAgJHNjb3BlLmh3bURldGFpbCA9IGZhbHNlOyAvL3Nob3cvaGlkZSBod20gYm94IG9mIGh3bSBkZXRhaWxzXHJcbiAgICAgICAgICAgICRzY29wZS5IV01Cb3ggPSB7fTsgLy9ob2xkcyBiaW5kaW5nIGZvciB3aGF0IHRvIHNob3cgaW4gaHdtIGRldGFpbCBib3hcclxuICAgICAgICAgICAgJHNjb3BlLnNlbnNvckRldGFpbCA9IGZhbHNlOyAvL3Nob3cvaGlkZSBzZW5zb3IgYm94IG9mIHNlbnNvciBkZXRhaWxzXHJcbiAgICAgICAgICAgICRzY29wZS5TZW5zb3JCb3ggPSB7fTsgLy9ob2xkcyBiaW5kaW5nIGZvciB3aGF0IHRvIHNob3cgaW4gdGhlIHNlbnNvciBkZXRhaWwgYm94XHJcbiAgICAgICAgICAgICRzY29wZS5kYXRhRmlsZURldGFpbCA9IGZhbHNlOyAvL3Nob3cvaGlkZSBkYXRhZmlsZSBib3ggb2YgZGF0YWZpbGUgZGV0YWlsc1xyXG4gICAgICAgICAgICAkc2NvcGUuREZCb3ggPSB7fTsgLy9ob2xkcyBiaW5kaW5nIGZvciB3aGF0IHRvIHNob3cgaW4gdGhlIGRhdGFmaWxlIGRldGFpbCBib3hcclxuICAgICAgICAgICAgJHNjb3BlLmFQZWFrID0ge307XHJcbiAgICAgICAgICAgIC8vZm9ybWF0dGluZyBkYXRlIGFuZCB0aW1lIHByb3Blcmx5IGZvciBjaHJvbWUgYW5kIGZmXHJcbiAgICAgICAgICAgIHZhciBnZXREYXRlVGltZVBhcnRzID0gZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgICAgIHZhciB5ID0gZC5zdWJzdHIoMCwgNCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbSA9IGQuc3Vic3RyKDUsIDIpIC0gMTsgLy9zdWJ0cmFjdCAxIGZvciBpbmRleCB2YWx1ZSAoSmFudWFyeSBpcyAwKVxyXG4gICAgICAgICAgICAgICAgdmFyIGRhID0gZC5zdWJzdHIoOCwgMik7XHJcbiAgICAgICAgICAgICAgICB2YXIgaCA9IGQuc3Vic3RyKDExLCAyKTtcclxuICAgICAgICAgICAgICAgIHZhciBtaSA9IGQuc3Vic3RyKDE0LCAyKTtcclxuICAgICAgICAgICAgICAgIHZhciBzZWMgPSBkLnN1YnN0cigxNywgMik7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGhlRGF0ZSA9IG5ldyBEYXRlKHksIG0sIGRhLCBoLCBtaSwgc2VjKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGVEYXRlO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvL2dldCB0aW1lem9uZSBhbmQgdGltZXN0YW1wIGZvciB0aGVpciB0aW1lem9uZSBmb3Igc2hvd2luZy4uIHBvc3QvcHV0IHdpbGwgY29udmVydCBpdCB0byB1dGNcclxuICAgICAgICAgICAgdmFyIGdldFRpbWVab25lU3RhbXAgPSBmdW5jdGlvbiAoZHNlbnQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzZW5kVGhpcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGQ7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKGRzZW50ICE9PSB1bmRlZmluZWQpIGQgPSBuZXcgRGF0ZShkc2VudCk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIGQgPSBuZXcgRGF0ZSgpO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBvZmZzZXQgPSAoZC50b1N0cmluZygpKS5zdWJzdHJpbmcoMzUpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHpvbmUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgc3dpdGNoIChvZmZzZXQuc3Vic3RyKDAsIDMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIkNlblwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB6b25lID0gJ0NTVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgXCJFYXNcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgem9uZSA9ICdFU1QnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICBjYXNlIFwiTW91XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHpvbmUgPSAnTVNUJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBcIlBhY1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB6b25lID0gJ1BTVCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgc2VuZFRoaXMgPSBbZCwgem9uZV07XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VuZFRoaXM7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL0RhdGVwaWNrZXJcclxuICAgICAgICAgICAgJHNjb3BlLmRhdGVPcHRpb25zID0ge1xyXG4gICAgICAgICAgICAgICAgc3RhcnRpbmdEYXk6IDEsXHJcbiAgICAgICAgICAgICAgICBzaG93V2Vla3M6IGZhbHNlXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRzY29wZS5kYXRlcGlja3JzID0ge307XHJcbiAgICAgICAgICAgICRzY29wZS5vcGVuID0gZnVuY3Rpb24gKCRldmVudCwgd2hpY2gpIHtcclxuICAgICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5kYXRlcGlja3JzW3doaWNoXSA9IHRydWU7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2lzIGl0IFVUQyBvciBsb2NhbCB0aW1lLi5tYWtlIHN1cmUgaXQgc3RheXMgVVRDXHJcbiAgICAgICAgICAgIHZhciBkZWFsV2l0aFRpbWVTdGFtcGI0U2VuZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vY2hlY2sgYW5kIHNlZSBpZiB0aGV5IGFyZSBub3QgdXNpbmcgVVRDXHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFQZWFrLnRpbWVfem9uZSAhPSBcIlVUQ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jb252ZXJ0IGl0XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHV0Y0RhdGVUaW1lID0gbmV3IERhdGUoJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZSkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVBlYWsucGVha19kYXRlID0gdXRjRGF0ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFQZWFrLnRpbWVfem9uZSA9ICdVVEMnO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL21ha2Ugc3VyZSAnR01UJyBpcyB0YWNrZWQgb24gc28gaXQgZG9lc24ndCB0cnkgdG8gYWRkIGhycyB0byBtYWtlIHRoZSBhbHJlYWR5IHV0YyBhIHV0YyBpbiBkYlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpID0gJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZS50b1N0cmluZygpLmluZGV4T2YoJ0dNVCcpICsgMztcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVBlYWsucGVha19kYXRlID0gJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZS50b1N0cmluZygpLnN1YnN0cmluZygwLCBpKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vY2FuY2VsXHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLiBcclxuICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgLy9pcyBudW1iZXJcclxuICAgICAgICAgICAgJHNjb3BlLmlzTnVtID0gZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRoZUV2ZW50ID0gZXZ0IHx8IHdpbmRvdy5ldmVudDtcclxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSB0aGVFdmVudC5rZXlDb2RlIHx8IHRoZUV2ZW50LndoaWNoO1xyXG4gICAgICAgICAgICAgICAgaWYgKGtleSAhPSA0NiAmJiBrZXkgIT0gNDUgJiYga2V5ID4gMzEgJiYgKGtleSA8IDQ4IHx8IGtleSA+IDU3KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoZUV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoZUV2ZW50LnByZXZlbnREZWZhdWx0KSB0aGVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXNQZWFrICE9IFwiZW1wdHlcIikge1xyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIGV4aXN0aW5nIFBFQUtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hUGVhayA9IGFuZ3VsYXIuY29weSh0aGlzUGVhayk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYVBlYWsucGVha19kYXRlID0geyBkYXRlOiBnZXREYXRlVGltZVBhcnRzKCRzY29wZS5hUGVhay5wZWFrX2RhdGUpLCB0aW1lOiBnZXREYXRlVGltZVBhcnRzKCRzY29wZS5hUGVhay5wZWFrX2RhdGUpIH07XHJcbiAgICAgICAgICAgICAgICAvL2dldCBwZWFrIGNyZWF0b3IgbmFtZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLlBlYWtDcmVhdG9yID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRzY29wZS5hUGVhay5tZW1iZXJfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgLy9jaGVjayBvZmYgdGhvc2UgaHdtcyB1c2VkIGZvciB0aGlzIHBlYWtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIGggPSAwOyBoIDwgJHNjb3BlLmV2ZW50U2l0ZUhXTXMubGVuZ3RoOyBoKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmV2ZW50U2l0ZUhXTXNbaF0ucGVha19zdW1tYXJ5X2lkID09ICRzY29wZS5hUGVhay5wZWFrX3N1bW1hcnlfaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFNpdGVIV01zW2hdLnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vY2hlY2sgb2ZmIHRob3NlIGh3bXMgdXNlZCBmb3IgdGhpcyBwZWFrXHJcbiAgICAgICAgICAgICAgICAvL2ZvciBlYWNoIGV2ZW50U2l0ZVNlbnNvci4uIGZvciBlYWNoIGZpbGUgd2l0aGluIGVhY2ggc2Vuc29yLi4uIGlmIGRhdGFGaWxlSUQgPT0gYW55IG9mIHRoZSBwZWFrREZzIGRhdGFmaWxlSUQgPT09PT4gbWFrZSB0aGF0IGZpbGUuc2VsZWN0ZWQgPXRydWVcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHMgPSAwOyBzIDwgJHNjb3BlLmV2ZW50U2l0ZVNlbnNvcnMubGVuZ3RoOyBzKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2ZvciBlYWNoIGV2ZW50U2l0ZVNlbnNvclxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlc3NJID0gcztcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBkZiA9IDA7IGRmIDwgJHNjb3BlLmV2ZW50U2l0ZVNlbnNvcnNbZXNzSV0uZmlsZXMubGVuZ3RoOyBkZisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vZm9yIGVhY2ggZmlsZSB3aXRoaW4gdGhpcyBldmVudFNpdGVTZW5zb3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVGhlcmUgPSB0aGlzUGVha0RGcy5maWx0ZXIoZnVuY3Rpb24gKHBkZikgeyByZXR1cm4gcGRmLmRhdGFfZmlsZV9pZCA9PSAkc2NvcGUuZXZlbnRTaXRlU2Vuc29yc1tlc3NJXS5maWxlc1tkZl0uZGF0YV9maWxlX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVGhlcmUgIT09IHVuZGVmaW5lZCkgJHNjb3BlLmV2ZW50U2l0ZVNlbnNvcnNbZXNzSV0uZmlsZXNbZGZdLnNlbGVjdGVkID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gZXhpc3RpbmcgUEVBS1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIG5ldyBQRUFLXHJcbiAgICAgICAgICAgICAgICB2YXIgdGltZVBhcnRzID0gZ2V0VGltZVpvbmVTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFQZWFrID0geyBwZWFrX2RhdGU6IHsgZGF0ZTogdGltZVBhcnRzWzBdLCB0aW1lOiB0aW1lUGFydHNbMF0gfSwgdGltZV96b25lOiB0aW1lUGFydHNbMV0sIG1lbWJlcl9pZDogJGNvb2tpZXMuZ2V0KCdtSUQnKSB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLlBlYWtDcmVhdG9yID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRjb29raWVzLmdldCgnbUlEJyk7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBuZXcgUEVBS1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvL3Nob3cgYSBtb2RhbCB3aXRoIHRoZSBsYXJnZXIgZmlsZSBpbWFnZSBhcyBhIHByZXZpZXdcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dJbWFnZU1vZGFsID0gZnVuY3Rpb24gKGltYWdlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW1hZ2VNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkltYWdlIEZpbGUgUHJldmlldzwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxpbWcgbmctc3JjPVwie3tzZXRTUkN9fVwiIC8+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbWFnZUlkID0gaW1hZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXRTUkMgPSBTRVJWRVJfVVJMICsgJy9GaWxlcy8nICsgJHNjb3BlLmltYWdlSWQgKyAnL0l0ZW0nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdtZCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8jcmVnaW9uIGh3bSBsaXN0IHN0dWZmXHJcbiAgICAgICAgICAgIHZhciBmb3JtYXRTZWxlY3RlZEhXTSA9IGZ1bmN0aW9uIChoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZmh3bSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgZmh3bS5hcHByb3ZhbF9pZCA9IGguYXBwcm92YWxfaWQ7XHJcbiAgICAgICAgICAgICAgICBmaHdtLmJhbmsgPSBoLmJhbms7XHJcbiAgICAgICAgICAgICAgICBmaHdtLmVsZXZfZnQgPSBoLmVsZXZfZnQ7XHJcbiAgICAgICAgICAgICAgICBmaHdtLmV2ZW50X2lkID0gaC5ldmVudF9pZDtcclxuICAgICAgICAgICAgICAgIGZod20uZmxhZ19kYXRlID0gaC5mbGFnX2RhdGU7XHJcbiAgICAgICAgICAgICAgICBmaHdtLmZsYWdfbWVtYmVyX2lkID0gaC5mbGFnX21lbWJlcl9pZDtcclxuICAgICAgICAgICAgICAgIGZod20uaGNvbGxlY3RfbWV0aG9kX2lkID0gaC5oY29sbGVjdF9tZXRob2RfaWQ7XHJcbiAgICAgICAgICAgICAgICBmaHdtLmhkYXR1bV9pZCA9IGguaGRhdHVtX2lkO1xyXG4gICAgICAgICAgICAgICAgZmh3bS5oZWlnaHRfYWJvdmVfZ25kID0gaC5oZWlnaHRfYWJvdmVfZ25kO1xyXG4gICAgICAgICAgICAgICAgZmh3bS5od21fZW52aXJvbm1lbnQgPSBoLmh3bV9lbnZpcm9ubWVudDtcclxuICAgICAgICAgICAgICAgIGZod20uaHdtX2lkID0gaC5od21faWQ7XHJcbiAgICAgICAgICAgICAgICBmaHdtLmh3bV9sb2NhdGlvbmRlc2NyaXB0aW9uID0gaC5od21fbG9jYXRpb25kZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgICAgIGZod20uaHdtX25vdGVzID0gaC5od21fbm90ZXM7XHJcbiAgICAgICAgICAgICAgICBmaHdtLmh3bV91bmNlcnRhaW50eSA9IGguaHdtX3VuY2VydGFpbnR5O1xyXG4gICAgICAgICAgICAgICAgZmh3bS5od21fcXVhbGl0eV9pZCA9IGguaHdtX3F1YWxpdHlfaWQ7XHJcbiAgICAgICAgICAgICAgICBmaHdtLmh3bV90eXBlX2lkID0gaC5od21fdHlwZV9pZDtcclxuICAgICAgICAgICAgICAgIGZod20ubGF0aXR1ZGVfZGQgPSBoLmxhdGl0dWRlO1xyXG4gICAgICAgICAgICAgICAgZmh3bS5sb25naXR1ZGVfZGQgPSBoLmxvbmdpdHVkZTtcclxuICAgICAgICAgICAgICAgIGZod20ubWFya2VyX2lkID0gaC5tYXJrZXJfaWQ7XHJcbiAgICAgICAgICAgICAgICBmaHdtLnBlYWtfc3VtbWFyeV9pZCA9IGgucGVha19zdW1tYXJ5X2lkO1xyXG4gICAgICAgICAgICAgICAgZmh3bS5zaXRlX2lkID0gaC5zaXRlX2lkO1xyXG4gICAgICAgICAgICAgICAgZmh3bS5zdGlsbHdhdGVyID0gaC5zdGlsbHdhdGVyID09IFwiTm9cIiA/IDAgOiAxO1xyXG4gICAgICAgICAgICAgICAgZmh3bS5zdXJ2ZXlfZGF0ZSA9IGguc3VydmV5X2RhdGU7XHJcbiAgICAgICAgICAgICAgICBmaHdtLnN1cnZleV9tZW1iZXJfaWQgPSBoLnN1cnZleV9tZW1iZXJfaWQ7XHJcbiAgICAgICAgICAgICAgICBmaHdtLnZjb2xsZWN0X21ldGhvZF9pZCA9IGgudmNvbGxlY3RfbWV0aG9kX2lkO1xyXG4gICAgICAgICAgICAgICAgZmh3bS52ZGF0dW1faWQgPSBoLnZkYXR1bV9pZDtcclxuICAgICAgICAgICAgICAgIGZod20ud2F0ZXJib2R5ID0gaC53YXRlcmJvZHk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmh3bTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9hZGQgb3IgcmVtb3ZlIGEgaHdtIGZyb20gdGhlIGxpc3Qgb2YgY2hvc2VuIGh3bXMgZm9yIGRldGVybWluaW5nIHRoaXMgcGVha1xyXG4gICAgICAgICAgICAkc2NvcGUuYWRkSFdNID0gZnVuY3Rpb24gKGgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhSFdNID0gZm9ybWF0U2VsZWN0ZWRIV00oaCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaC5zZWxlY3RlZCA9PT0gdHJ1ZSkgeyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNob3NlbkhXTUxpc3QucHVzaChhSFdNKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hUGVhay5wZWFrX3N1bW1hcnlfaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2VkaXQuLiBuZWVkIHRvIHN0b3JlIHJlbW92ZWQgb25lcyBmb3IgUFVUXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZW1vdmVkQ2hvc2VuSFdNTGlzdC5wdXNoKGRhdGFGaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jaG9zZW5IV01MaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZCA9ICRzY29wZS5jaG9zZW5IV01MaXN0Lm1hcChmdW5jdGlvbiAoaHdtKSB7IHJldHVybiBod20uaHdtX2lkOyB9KS5pbmRleE9mKGFIV00uaHdtX2lkKTsgLy9ub3Qgd29ya2luZzo6ICRzY29wZS5jaG9zZW5IV01MaXN0LmluZGV4T2YoYUhXTSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jaG9zZW5IV01MaXN0LnNwbGljZShpbmQsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vdGhleSB3YW50IHRvIHNlZSB0aGUgZGV0YWlscyBvZiB0aGUgaHdtLCBvciBub3Qgc2VlIGl0IGFueW1vcmVcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dIV01EZXRhaWxzID0gZnVuY3Rpb24gKGgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5od21EZXRhaWwgPSB0cnVlOyAkc2NvcGUuc2Vuc29yRGV0YWlsID0gZmFsc2U7ICRzY29wZS5kYXRhRmlsZURldGFpbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkhXTUJveCA9IGg7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL3VzZSB0aGlzIGh3bSB0byBwb3B1bGF0ZSBwZWFrIHBhcnRzIChwcmltYXJ5IGh3bSBmb3IgZGV0ZXJtaW5pbmcgcGVhaylcclxuICAgICAgICAgICAgJHNjb3BlLnByaW1hcnlIV00gPSBmdW5jdGlvbiAoaCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNldFByaW1IV00gPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5TZXQgYXMgUHJpbWFyeTwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBzZXQgdGhpcyBhcyB0aGUgUHJpbWFyeSBIV00/IERvaW5nIHNvIHdpbGwgcG9wdWxhdGUgdGhlIFBlYWsgRGF0ZSAobm90IGluY2x1ZGluZyB0aW1lKSwgU3RhZ2UsIFZlcnRpY2FsIERhdHVtIGFuZCBIZWlnaHQgQWJvdmUgR3JvdW5kLjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJTZXRJdCgpXCI+U2V0IGFzIFByaW1hcnk8L2J1dHRvbj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJjYW5jZWwoKVwiPkNhbmNlbDwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2V0SXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgnWWVzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBzZXRQcmltSFdNLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChzZXRJdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXRJdCA9PSAnWWVzJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVBlYWsucGVha19kYXRlLmRhdGUgPSBuZXcgRGF0ZShoLmZsYWdfZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hUGVhay5wZWFrX3N0YWdlID0gaC5lbGV2X2Z0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVBlYWsudmRhdHVtX2lkID0gaC52ZGF0dW1faWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hUGVhay5oZWlnaHRfYWJvdmVfZ25kID0gaC5oZWlnaHRfYWJvdmVfZ25kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgaEluZGV4ID0gJHNjb3BlLmV2ZW50U2l0ZUhXTXMuaW5kZXhPZihoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV2ZW50U2l0ZUhXTXNbaEluZGV4XS5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmNsb3NlRGV0YWlsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvckRldGFpbCA9IGZhbHNlOyAkc2NvcGUuaHdtRGV0YWlsID0gZmFsc2U7ICRzY29wZS5kYXRhRmlsZURldGFpbCA9IGZhbHNlO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy8jcmVnaW9uIHNlbnNvciBsaXN0IHN0dWZmXHJcbiAgICAgICAgICAgIC8vYWRkIG9yIHJlbW92ZSBhIHNlbnNvciBmcm9tIHRoZSBsaXN0IG9mIGNob3NlbiBzZW5zb3IgZm9yIGRldGVybWluaW5nIHRoaXMgcGVha1xyXG4gICAgICAgICAgICAkc2NvcGUuYWRkRGF0YUZpbGUgPSBmdW5jdGlvbiAoZGF0YWZpbGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkYXRhRmlsZSA9IHt9OyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIERBVEFfRklMRS5xdWVyeSh7IGlkOiBkYXRhZmlsZS5kYXRhX2ZpbGVfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBkYXRhRmlsZSA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkYXRhZmlsZS5zZWxlY3RlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2hvc2VuREZMaXN0LnB1c2goZGF0YUZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVBlYWsucGVha19zdW1tYXJ5X2lkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vZWRpdC4uIG5lZWQgdG8gc3RvcmUgcmVtb3ZlZCBvbmVzIGZvciBQVVRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZW1vdmVkQ2hvc2VuREZMaXN0LnB1c2goZGF0YUZpbGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY2hvc2VuREZMaXN0Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpbmQgPSAkc2NvcGUuY2hvc2VuREZMaXN0Lm1hcChmdW5jdGlvbiAoZGYpIHsgcmV0dXJuIGRmLmRhdGFfZmlsZV9pZDsgfSkuaW5kZXhPZihkYXRhZmlsZS5kYXRhX2ZpbGVfaWQpOyAvL25vdCB3b3JraW5nOjogJHNjb3BlLmNob3NlbkRGTGlzdC5pbmRleE9mKHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNob3NlbkRGTGlzdC5zcGxpY2UoaW5kLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy90aGV5IHdhbnQgdG8gc2VlIHRoZSBkZXRhaWxzIG9mIHRoZSBzZW5zb3IsIG9yIG5vdCBzZWUgaXQgYW55bW9yZVxyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd1NlbnNvckRldGFpbHMgPSBmdW5jdGlvbiAocykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvckRldGFpbCA9IHRydWU7ICRzY29wZS5od21EZXRhaWwgPSBmYWxzZTsgJHNjb3BlLmRhdGFGaWxlRGV0YWlsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuU2Vuc29yQm94ID0gcztcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy90aGV5IHdhbnQgdG8gc2VlIHRoZSBkZXRhaWxzIG9mIHRoZSBkYXRhZmlsZSwgb3Igbm90IHNlZSBpdCBhbnltb3JlXHJcbiAgICAgICAgICAgICRzY29wZS5zaG93RGF0YUZpbGVEZXRhaWxzID0gZnVuY3Rpb24gKGYpIHtcclxuICAgICAgICAgICAgICAgIERBVEFfRklMRS5xdWVyeSh7IGlkOiBmLmRhdGFfZmlsZV9pZCB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRGQm94ID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRGQm94LmZpbGVQYXRoID0gZi5wYXRoO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ERkJveC5maWxlSUQgPSBmLmZpbGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRGQm94LmZpbGVEZXNjID0gZi5kZXNjcmlwdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuREZCb3gucHJvY2Vzc2VkQnkgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT0gcmVzcG9uc2UucHJvY2Vzc29yX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuREZCb3gubndpc0ZpbGUgPSBmLmlzX253aXMgPT0gMSA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuREZCb3guZmlsZVVSTCA9IGYubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGF0YUZpbGVEZXRhaWwgPSB0cnVlOyAkc2NvcGUuaHdtRGV0YWlsID0gZmFsc2U7ICRzY29wZS5zZW5zb3JEZXRhaWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy91c2UgdGhpcyBod20gdG8gcG9wdWxhdGUgcGVhayBwYXJ0cyAocHJpbWFyeSBzZW5zb3IgZm9yIGRldGVybWluaW5nIHBlYWspXHJcbiAgICAgICAgICAgIC8qJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+QXJlIHlvdSBzdXJlIHlvdSB3YW50IHRvIHNldCB0aGlzIGFzIHRoZSBQcmltYXJ5IERhdGEgZmlsZT8gRG9pbmcgc28gd2lsbCBwb3B1bGF0ZSB0aGUgUGVhayBEYXRlLCBUaW1lIGFuZCB0aW1lIHpvbmUsIFN0YWdlLCBWZXJ0aWNhbCBEYXR1bSBhbmQgSGVpZ2h0IEFib3ZlIEdyb3VuZC48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwiU2V0SXQoKVwiPlNldCBhcyBQcmltYXJ5PC9idXR0b24+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwiY2FuY2VsKClcIj5DYW5jZWw8L2J1dHRvbj48L2Rpdj4nLCovXHJcbiAgICAgICAgICAgICRzY29wZS5wcmltYXJ5RGF0YUZpbGUgPSBmdW5jdGlvbiAoZikge1xyXG4gICAgICAgICAgICAgICAgdmFyIHNldFByaW1lREYgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5TZXQgYXMgUHJpbWFyeTwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPkFyZSB5b3Ugc3VyZSB5b3Ugd2FudCB0byBzZXQgdGhpcyBhcyB0aGUgUHJpbWFyeSBEYXRhIGZpbGU/PC9wPjxwPihDb21pbmcgc29vbjogU2NyaXB0IHByb2Nlc3NpbmcgdG8gcG9wdWxhdGUgdGhlIFBlYWsgZGF0ZSwgdGltZSBhbmQgdGltZSB6b25lLCBTdGFnZSwgVmVydGljYWwgRGF0dW0gYW5kIEhlaWdodCBhYm92ZSBncm91bmQpPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cIlNldEl0KClcIj5TZXQgYXMgUHJpbWFyeTwvYnV0dG9uPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cImNhbmNlbCgpXCI+Q2FuY2VsPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TZXRJdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCdZZXMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHNldFByaW1lREYucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHNldEl0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHNldEl0ID09ICdZZXMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZS5kYXRlID0gaC5mbGFnX2RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLmFQZWFrLnBlYWtfc3RhZ2UgPSBoLmVsZXZfZnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLmFQZWFrLnZkYXR1bV9pZCA9IGgudmRhdHVtX2lkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLmFQZWFrLmhlaWdodF9hYm92ZV9nbmQgPSBoLmhlaWdodF9hYm92ZV9nbmQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW5zID0gJHNjb3BlLmV2ZW50U2l0ZVNlbnNvcnMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLmluc3RydW1lbnRfaWQgPT0gZi5pbnN0cnVtZW50X2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNJbmRleCA9ICRzY29wZS5ldmVudFNpdGVTZW5zb3JzLmluZGV4T2Yoc2Vucyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmSW5kZXggPSBzZW5zLmZpbGVzLmluZGV4T2YoZik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFNpdGVTZW5zb3JzW3NJbmRleF0uZmlsZXNbZkluZGV4XS5zZWxlY3RlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgICAgICAgICAgLy9zYXZlIFBlYWtcclxuICAgICAgICAgICAgJHNjb3BlLnNhdmVQZWFrID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZFBlYWsgPSB7fTsgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRldGltZSA9IG5ldyBEYXRlKCRzY29wZS5hUGVhay5wZWFrX2RhdGUuZGF0ZS5nZXRGdWxsWWVhcigpLCAkc2NvcGUuYVBlYWsucGVha19kYXRlLmRhdGUuZ2V0TW9udGgoKSwgJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZS5kYXRlLmdldERhdGUoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZS50aW1lLmdldEhvdXJzKCksICRzY29wZS5hUGVhay5wZWFrX2RhdGUudGltZS5nZXRNaW51dGVzKCksICRzY29wZS5hUGVhay5wZWFrX2RhdGUudGltZS5nZXRTZWNvbmRzKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hUGVhay5wZWFrX2RhdGUgPSBkYXRldGltZTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIFBFQUsudXBkYXRlKHsgaWQ6ICRzY29wZS5hUGVhay5wZWFrX3N1bW1hcnlfaWQgfSwgJHNjb3BlLmFQZWFrKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZSBod21zL2RhdGFmaWxlcyB1c2VkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlIHRob3NlIHVuY2hvc2VuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucmVtb3ZlZENob3NlbkRGTGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByZW1kID0gMDsgcmVtZCA8ICRzY29wZS5yZW1vdmVkQ2hvc2VuREZMaXN0Lmxlbmd0aDsgcmVtZCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlbW92ZWRDaG9zZW5ERkxpc3RbcmVtZF0ucGVha19zdW1tYXJ5X2lkID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUudXBkYXRlKHsgaWQ6ICRzY29wZS5yZW1vdmVkQ2hvc2VuREZMaXN0W3JlbWRdLmRhdGFfZmlsZV9pZCB9LCAkc2NvcGUucmVtb3ZlZENob3NlbkRGTGlzdFtyZW1kXSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5yZW1vdmVkQ2hvc2VuSFdNTGlzdC5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByZW1oID0gMDsgcmVtaCA8ICRzY29wZS5yZW1vdmVkQ2hvc2VuSFdNTGlzdC5sZW5ndGg7IHJlbWgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5yZW1vdmVkQ2hvc2VuSFdNTGlzdFtyZW1oXS5wZWFrX3N1bW1hcnlfaWQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhXTS51cGRhdGUoeyBpZDogJHNjb3BlLnJlbW92ZWRDaG9zZW5IV01MaXN0W3JlbWhdLmRhdGFfZmlsZV9pZCB9LCAkc2NvcGUucmVtb3ZlZENob3NlbkhXTUxpc3RbcmVtaF0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWRkIHRob3NlIGNob3NlblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhZGRoID0gMDsgYWRkaCA8ICRzY29wZS5jaG9zZW5IV01MaXN0Lmxlbmd0aDsgYWRkaCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2hvc2VuSFdNTGlzdFthZGRoXS5wZWFrX3N1bW1hcnlfaWQgPSByZXNwb25zZS5wZWFrX3N1bW1hcnlfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBIV00udXBkYXRlKHsgaWQ6ICRzY29wZS5jaG9zZW5IV01MaXN0W2FkZGhdLmh3bV9pZCB9LCAkc2NvcGUuY2hvc2VuSFdNTGlzdFthZGRoXSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gLy9lbmQgZm9yZWFjaCBod20gc2F2ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhZGRkID0gMDsgYWRkZCA8ICRzY29wZS5jaG9zZW5ERkxpc3QubGVuZ3RoOyBhZGRkKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jaG9zZW5ERkxpc3RbYWRkZF0ucGVha19zdW1tYXJ5X2lkID0gcmVzcG9uc2UucGVha19zdW1tYXJ5X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgREFUQV9GSUxFLnVwZGF0ZSh7IGlkOiAkc2NvcGUuY2hvc2VuREZMaXN0W2FkZGRdLmRhdGFfZmlsZV9pZCB9LCAkc2NvcGUuY2hvc2VuREZMaXN0W2FkZGRdKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSAvL2VuZCBmb3JlYWNoIGh3bSBzYXZlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiUGVhayB1cGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkUGVhayA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VuZEJhY2sgPSBbdXBkYXRlZFBlYWssICd1cGRhdGVkJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHNlbmRCYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTsvL2VuZCBzYXZlKClcclxuXHJcbiAgICAgICAgICAgIC8vZGF0YSBmaWxlIElEIHRvIGdldCBkZiBhbmQgcmVtb3ZlIHBlYWtpZCBmb3IgcGVha0RlbGV0ZVxyXG4gICAgICAgICAgICB2YXIgdXBkYXRlREZ3b1BlYWtJRCA9IGZ1bmN0aW9uIChkZl9pZCkge1xyXG4gICAgICAgICAgICAgICAgLy9nZXQgaXQsIGNoYW5nZSBwZWFrIGlkLCBwdXQgaXQgYmFja1xyXG4gICAgICAgICAgICAgICAgREFUQV9GSUxFLnF1ZXJ5KHsgaWQ6IGRmX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzLnBlYWtfc3VtbWFyeV9pZCA9IG51bGw7XHJcbiAgICAgICAgICAgICAgICAgICAgREFUQV9GSUxFLnVwZGF0ZSh7IGlkOiByZXMuZGF0YV9maWxlX2lkIH0sIHJlcykuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9kZWxldGUgUGVha1xyXG4gICAgICAgICAgICAkc2NvcGUuZGVsZXRlUGVhayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBkZWxldGVQZWFrTWRsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+UmVtb3ZlIFBlYWs8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5BcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gZGVsZXRlIHRoaXMgUGVhaz88L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwiT2soKVwiPk9LPC9idXR0b24+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4td2FybmluZ1wiIG5nLWNsaWNrPVwiY2FuY2VsKClcIj5DYW5jZWw8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTsgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgIGRlbGV0ZVBlYWtNZGwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwZWFrSUQgPSAkc2NvcGUuYVBlYWsucGVha19zdW1tYXJ5X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXRldGltZSA9IG5ldyBEYXRlKCRzY29wZS5hUGVhay5wZWFrX2RhdGUuZGF0ZS5nZXRGdWxsWWVhcigpLCAkc2NvcGUuYVBlYWsucGVha19kYXRlLmRhdGUuZ2V0TW9udGgoKSwgJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZS5kYXRlLmdldERhdGUoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZS50aW1lLmdldEhvdXJzKCksICRzY29wZS5hUGVhay5wZWFrX2RhdGUudGltZS5nZXRNaW51dGVzKCksICRzY29wZS5hUGVhay5wZWFrX2RhdGUudGltZS5nZXRTZWNvbmRzKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hUGVhay5wZWFrX2RhdGUgPSBkYXRldGltZTtcclxuICAgICAgICAgICAgICAgICAgICAvL2RlbGV0ZSB0aGUgcGVhayBhbmQgdGhlbiBQVVQgYWxsIGh3bSBhbmQgZGYgdGhhdCBoYXZlIHBlYWtJRFxyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgUEVBSy5kZWxldGUoeyBpZDogJHNjb3BlLmFQZWFrLnBlYWtfc3VtbWFyeV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9mb3IgZWFjaCAkc2NvcGUuZXZlbnRTaXRlU2Vuc29ycyBmb3IgZWFjaCBmaWxlcyBpZiBmaWxlLnNlbGVjdGVkID09IHRydWUuLiBQVVQgYW5kIHJlbW92ZSBQRUFLSURcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAkc2NvcGUuZXZlbnRTaXRlU2Vuc29ycy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNTID0gJHNjb3BlLmV2ZW50U2l0ZVNlbnNvcnNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBmID0gMDsgZiA8IHRoaXNTLmZpbGVzLmxlbmd0aDsgZisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNGID0gdGhpc1MuZmlsZXNbZl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNGLnNlbGVjdGVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVERndvUGVha0lEKHRoaXNGLmRhdGFfZmlsZV9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9mb3IgZWFjaCAkc2NvcGUuZXZlbnRTaXRlSFdNcyBpZiBoLnNlbGVjdGVkID09IHRydWUuLiBQVVQgYW5kIHJlbW92ZSBQRUFLSUQgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBoID0gMDsgaCA8ICRzY29wZS5ldmVudFNpdGVIV01zLmxlbmd0aDsgaCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc0ggPSAkc2NvcGUuZXZlbnRTaXRlSFdNc1toXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzSC5zZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVtb3ZlIHBlYWtJRCBhbmQgUFVUXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0gucGVha19zdW1tYXJ5X2lkID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlVGhpc0hXTSA9IGZvcm1hdFNlbGVjdGVkSFdNKHRoaXNIKTsgLy9uZWVkIHRvIGZvcm1hdCBpdCB0byByZW1vdmUgYWxsIHRoZSBzaXRlIHN0dWZmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSFdNLnVwZGF0ZSh7IGlkOiB0aGlzSC5od21faWQgfSwgdXBkYXRlVGhpc0hXTSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiUGVhayBSZW1vdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VuZEJhY2sgPSBbXCJkZVwiLCAnZGVsZXRlZCddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZW5kQmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbG9naWMgZm9yIGNhbmNlbFxyXG4gICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vY3JlYXRlIFBlYWtcclxuICAgICAgICAgICAgJHNjb3BlLmNyZWF0ZVBlYWsgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIC8vZmlyc3QgZGV0ZXJtaW5lIHRoYXQgdGhleSBkaWQgY2hvb29zZSBhIGh3bSBvciBkYXRhIGZpbGUgZm9yIGludGVycHJldGF0b2luXHJcbiAgICAgICAgICAgICAgICB2YXIgaXNId21DaGVja2VkID0gZmFsc2U7IHZhciBpc0RGQ2hlY2tlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5ldmVudFNpdGVIV01zLCBmdW5jdGlvbiAoc2h3bSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzaHdtLnNlbGVjdGVkKSBpc0h3bUNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmV2ZW50U2l0ZVNlbnNvcnMsIGZ1bmN0aW9uIChzc2VuKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgZkkgPSAwOyBmSSA8IHNzZW4uZmlsZXMubGVuZ3RoOyBmSSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzc2VuLmZpbGVzW2ZJXS5zZWxlY3RlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNERkNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZkkgPSBzc2VuLmZpbGVzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzSHdtQ2hlY2tlZCB8fCBpc0RGQ2hlY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vdGhleSBjaG9zZSBvbmUsIGJ1dCBpcyBpdCB2YWxpZFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlZFBlYWsgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9mb3JtYXQgdG8gY29tYmluZSB0aGUgZGF0ZSBhbmQgdGltZSBiYWNrIHRvZ2V0aGVyIGludG8gMSBkYXRlIG9iamVjdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZXRpbWUgPSBuZXcgRGF0ZSgkc2NvcGUuYVBlYWsucGVha19kYXRlLmRhdGUuZ2V0RnVsbFllYXIoKSwgJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZS5kYXRlLmdldE1vbnRoKCksICRzY29wZS5hUGVhay5wZWFrX2RhdGUuZGF0ZS5nZXREYXRlKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hUGVhay5wZWFrX2RhdGUudGltZS5nZXRIb3VycygpLCAkc2NvcGUuYVBlYWsucGVha19kYXRlLnRpbWUuZ2V0TWludXRlcygpLCAkc2NvcGUuYVBlYWsucGVha19kYXRlLnRpbWUuZ2V0U2Vjb25kcygpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFQZWFrLnBlYWtfZGF0ZSA9IGRhdGV0aW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWFsV2l0aFRpbWVTdGFtcGI0U2VuZCgpOyAvL1VUQyBvciBsb2NhbD9cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBQRUFLLnNhdmUoJHNjb3BlLmFQZWFrKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFBlYWsgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdXBkYXRlIHRoZSBjaG9zZW4gaHdtcy9kYXRhIGZpbGVzIHdpdGggcGVhayBpZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaCA9IDA7IGggPCAkc2NvcGUuY2hvc2VuSFdNTGlzdC5sZW5ndGg7IGgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jaG9zZW5IV01MaXN0W2hdLnBlYWtfc3VtbWFyeV9pZCA9IHJlc3BvbnNlLnBlYWtfc3VtbWFyeV9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIV00udXBkYXRlKHsgaWQ6ICRzY29wZS5jaG9zZW5IV01MaXN0W2hdLmh3bV9pZCB9LCAkc2NvcGUuY2hvc2VuSFdNTGlzdFtoXSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IC8vZW5kIGZvcmVhY2ggaHdtIHNhdmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGQgPSAwOyBkIDwgJHNjb3BlLmNob3NlbkRGTGlzdC5sZW5ndGg7IGQrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jaG9zZW5ERkxpc3RbZF0ucGVha19zdW1tYXJ5X2lkID0gcmVzcG9uc2UucGVha19zdW1tYXJ5X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIERBVEFfRklMRS51cGRhdGUoeyBpZDogJHNjb3BlLmNob3NlbkRGTGlzdFtkXS5kYXRhX2ZpbGVfaWQgfSwgJHNjb3BlLmNob3NlbkRGTGlzdFtkXSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IC8vZW5kIGZvcmVhY2ggaHdtIHNhdmVcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIlBlYWsgY3JlYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW5kQmFjayA9IFtjcmVhdGVkUGVhaywgJ2NyZWF0ZWQnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHNlbmRCYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAvL25vIGRhdGEgZmlsZSBvciBod20gY2hlY2tlZCBhcyB1c2VkLCBzaG93IG1vZGFsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNldE9uZU1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPllvdSBtdXN0IGNob29zZSBhdCBsZWFzdCBvbmUgSFdNIG9yIERhdGEgRmlsZSB0byB1c2UgZm9yIGludGVycHJldGF0aW9uIGZvciB0aGlzIFBlYWsgU3VtbWFyeS48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cIk9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9Oy8vZW5kIGNyZWF0ZSgpXHJcbiAgICAgIFxyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd0luY29tcGxldGVERkluZm8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5jb21wbGV0ZU1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+SW5jb21wbGV0ZSBEYXRhIEZpbGU8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5BbGwgUkRHcywgTWV0IFN0YXRpb24sIGFuZCBSYWluIEdhZ2Ugc2Vuc29ycyByZXF1aXJlIGRhdGEgZmlsZSBpbmZvcm1hdGlvbiBpbiBvcmRlciB0byB1c2UgYXMgcHJpbWFyeSBpbiB0aGUgUGVhayBzdW1tYXJ5LjwvcD4nICsgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8cD5QbGVhc2UgcmV2aXNpdCB0aGUgUmV0cmlldmVkIFNlbnNvciBhbmQgY2xpY2sgb24gTldJUyBEYXRhIENvbm5lY3Rpb24gdG8gYWRkIGEgbGluayB0byB0aGUgTldJUyBkYXRhIGlmIHlvdSB3YW50IHRvIHVzZSBhcyBwcmltYXJ5LjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJPaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuZGlzbWlzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd0luY29tcGxldGVIV01JbmZvID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluY29tcGxldGVNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkluY29tcGxldGUgSFdNPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+U3VydmV5IGRhdGUgYW5kIGVsZXZhdGlvbiBhcmUgcmVxdWlyZWQgaW4gb3JkZXIgdG8gdXNlIGFzIHByaW1hcnkgaW4gdGhlIFBlYWsgc3VtbWFyeS48L3A+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8cD5QbGVhc2UgcmV2aXNpdCB0aGUgSFdNIGFuZCBhZGQgU3VydmV5IGRhdGUgYW5kIGVsZXZhdGlvbiBpZiB5b3Ugd2FudCB0byB1c2UgYXMgcHJpbWFyeS48L3A+PHA+VGhlIEhXTSBjYW4gYmUgdXNlZCBmb3IgaW50ZXJwcmVhdGlvbiB3aXRob3V0aCBhIGZpbmFsIGVsZXZhdGlvbi48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwiT2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dSZXRyaWV2ZUluZm8gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgZ29SZXRyaWV2ZU1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RGVwbG95ZWQgU2Vuc29yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+VGhpcyBzZW5vc3IgbmVlZHMgdG8gYmUgcmV0cmlldmVkIGJlZm9yZSBhIFBlYWsgY2FuIGJlIGNyZWF0ZWQuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1jbGljaz1cIk9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgIH1dKTsgLy9lbmQgSFdNXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBTVE5Db250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTVE5Db250cm9sbGVycycpO1xyXG5cclxuICAgIFNUTkNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ3BlYWtDdHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckbG9jYXRpb24nLCAnJHN0YXRlJywgJyRodHRwJywgJyR1aWJNb2RhbCcsICckZmlsdGVyJywgJyR0aW1lb3V0JywgJ3RoaXNTaXRlJywgJ1NpdGVfRmlsZXMnLCAndGhpc1NpdGVQZWFrcycsICdhbGxWZXJ0RGF0dW1zJywgJ2FsbEhXTVF1YWxpdGllcycsICdhbGxIV01UeXBlcycsICdQRUFLJywgJ0hXTScsICdNRU1CRVInLCAnU0lURScsJ0lOU1RfQ09MTF9DT05ESVRJT04nLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRjb29raWVzLCAkbG9jYXRpb24sICRzdGF0ZSwgJGh0dHAsICR1aWJNb2RhbCwgJGZpbHRlciwgJHRpbWVvdXQsIHRoaXNTaXRlLCBTaXRlX0ZpbGVzLCB0aGlzU2l0ZVBlYWtzLCBhbGxWZXJ0RGF0dW1zLCBhbGxIV01RdWFsaXRpZXMsIGFsbEhXTVR5cGVzLCBQRUFLLCBIV00sIE1FTUJFUiwgU0lURSxJTlNUX0NPTExfQ09ORElUSU9OKSB7XHJcbiAgICAgICAgICAgIGlmICgkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IHVuZGVmaW5lZCB8fCAkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hdXRoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvL2dsb2JhbCB2YXJzXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUucGVha0NvdW50ID0geyB0b3RhbDogdGhpc1NpdGVQZWFrcy5sZW5ndGggfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5TaXRlUGVha3MgPSB0aGlzU2l0ZVBlYWtzO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vZm9yIHRoaXMgdG8gd29yaywgSSdkIG5lZWQgdG8gYnJpbmcgaW4gSFdNcyBhbmQgRGF0YSBGaWxlcyh0aHJvdWdoIHNlbnNvcnMgc2luY2UgdGhhdCBob2xkcyBldmVudCkgZm9yIHRoaXMgZXZlbnQgYW5kIGZpbHRlciBiYXNlZCBvbiB0aG9zZSAuLiBvciBqdXN0IGFkZCBldmVudGlkIHRvIHBlYWtcclxuICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJyk7IH0sIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXNzaW9uRXZlbnROYW1lID0gbmV3VmFsdWUgIT09IHVuZGVmaW5lZCA/IG5ld1ZhbHVlIDogXCJBbGwgRXZlbnRzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlc3Npb25FdmVudEV4aXN0cyA9ICRzY29wZS5zZXNzaW9uRXZlbnROYW1lICE9IFwiQWxsIEV2ZW50c1wiID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlUGVha3MgPSB0aGlzU2l0ZVBlYWtzLmZpbHRlcihmdW5jdGlvbiAocCkgeyByZXR1cm4gcC5ldmVudF9uYW1lID09ICRzY29wZS5zZXNzaW9uRXZlbnROYW1lOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBlYWtDb3VudCA9IHsgdG90YWw6ICRzY29wZS5TaXRlUGVha3MubGVuZ3RoIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVQZWFrcyA9IHRoaXNTaXRlUGVha3M7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wZWFrQ291bnQgPSB7IHRvdGFsOiAkc2NvcGUuU2l0ZVBlYWtzLmxlbmd0aCB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vY3JlYXRlL2VkaXQgYSBwZWFrIFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dQZWFrTW9kYWwgPSBmdW5jdGlvbiAocGVha0NsaWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gdHJ1ZTsvLyBsb2FkaW5nLi4vLyAkKFwiLnBhZ2UtbG9hZGluZ1wiKS5yZW1vdmVDbGFzcyhcImhpZGRlblwiKTsgLy9sb2FkaW5nLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4Q2xpY2tlZCA9ICRzY29wZS5TaXRlUGVha3MuaW5kZXhPZihwZWFrQ2xpY2tlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9tb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ1BFQUttb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3BlYWtNb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnbGcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Q2xhc3M6ICdyZXAtZGlhbG9nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsQ29sbGVjdENvbmRpdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gSU5TVF9DT0xMX0NPTkRJVElPTi5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxWZXJ0RGF0dW1zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFsbFZlcnREYXR1bXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1BlYWs6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAocGVha0NsaWNrZWQgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFBFQUsucXVlcnkoeyBpZDogcGVha0NsaWNrZWQucGVha19zdW1tYXJ5X2lkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7IHJldHVybiBcImVtcHR5XCI7IH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzUGVha0RGczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwZWFrQ2xpY2tlZCAhPT0gMCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBQRUFLLmdldFBlYWtTdW1tYXJ5REZzKHtpZDogcGVha0NsaWNrZWQucGVha19zdW1tYXJ5X2lkfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBlYWtTaXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNTaXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbE1lbWJlcnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNRU1CRVIuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsRXZlbnRIV01zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEhXTS5nZXRGaWx0ZXJlZEhXTXMoeyBFdmVudDogJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnRJRCcpLCBFdmVudFN0YXR1czogMCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxTaXRlRmlsZXM6IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBTaXRlX0ZpbGVzLmdldEFsbFNpdGVGaWxlcygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbFNpdGVTZW5zb3JzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFNJVEUuZ2V0U2l0ZVNlbnNvcnMoeyBpZDogdGhpc1NpdGUuc2l0ZV9pZCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChjcmVhdGVkUGVhaykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lzIHRoZXJlIGEgbmV3IFBlYWssZWRpdGVkIHBlYWsgb3IganVzdCBjbG9zZWQgbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZWRQZWFrWzFdID09ICdjcmVhdGVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVQZWFrcy5wdXNoKGNyZWF0ZWRQZWFrWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wZWFrQ291bnQudG90YWwgPSAkc2NvcGUuU2l0ZVBlYWtzLmxlbmd0aDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXRlZFBlYWtbMV0gPT0gJ3VwZGF0ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RoaXMgaXMgZnJvbSBlZGl0IC0tIHJlZnJlc2ggcGFnZT9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlUGVha3NbaW5kZXhDbGlja2VkXSA9IGNyZWF0ZWRQZWFrWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcmVhdGVkUGVha1sxXSA9PSAnZGVsZXRlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlUGVha3Muc3BsaWNlKGluZGV4Q2xpY2tlZCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGVha0NvdW50LnRvdGFsID0gJHNjb3BlLlNpdGVQZWFrcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTsgLy9lbmQgc2hvd0hXTU1vZGFsIGZ1bmN0aW9uXHJcblxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfV0pO1xyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIE1vZGFsQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnTW9kYWxDb250cm9sbGVycycpO1xyXG4gICAgTW9kYWxDb250cm9sbGVycy5jb250cm9sbGVyKCdPUG1vZGFsQ3RybCcsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGNvb2tpZXMnLCAnJGh0dHAnLCAnJHNjZScsICckdWliTW9kYWxJbnN0YW5jZScsICckdWliTW9kYWwnLCAnU0VSVkVSX1VSTCcsICdGSUxFX1NUQU1QJywgJ1NpdGVfRmlsZXMnLCAnYWxsRHJvcGRvd25zJywgJ3RoaXNPUCcsICd0aGlzT1BDb250cm9scycsICdvcFNpdGUnLCAnYWdlbmN5TGlzdCcsICdhbGxNZW1iZXJzJywgJ09CSkVDVElWRV9QT0lOVCcsICdPUF9DT05UUk9MX0lERU5USUZJRVInLCAnT1BfTUVBU1VSRScsICdTT1VSQ0UnLCAnRklMRScsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICRodHRwLCAkc2NlLCAkdWliTW9kYWxJbnN0YW5jZSwgJHVpYk1vZGFsLCBTRVJWRVJfVVJMLCBGSUxFX1NUQU1QLCBTaXRlX0ZpbGVzLCBhbGxEcm9wZG93bnMsIHRoaXNPUCwgdGhpc09QQ29udHJvbHMsIG9wU2l0ZSwgYWdlbmN5TGlzdCwgYWxsTWVtYmVycywgT0JKRUNUSVZFX1BPSU5ULCBPUF9DT05UUk9MX0lERU5USUZJRVIsIE9QX01FQVNVUkUsIFNPVVJDRSwgRklMRSkge1xyXG4gICAgICAgICAgICAvL2RlZmF1bHRzIGZvciByYWRpbyBidXR0b25zXHJcbiAgICAgICAgICAgIC8vZHJvcGRvd25zXHJcbiAgICAgICAgICAgICRzY29wZS5zZXJ2ZXJVUkwgPSBTRVJWRVJfVVJMO1xyXG4gICAgICAgICAgICAkc2NvcGUudmlldyA9IHsgT1B2YWw6ICdkZXRhaWwnIH07XHJcbiAgICAgICAgICAgICRzY29wZS5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTsgLy9Mb2FkaW5nLi4uICAgIFxyXG4gICAgICAgICAgICAkc2NvcGUuZGwgPSB7IGRsT3BlbjogdHJ1ZSwgZGxGaWxlT3BlbjogZmFsc2UgfTsvL2FjY29yZGlvbnNcclxuICAgICAgICAgICAgJHNjb3BlLk9QVHlwZUxpc3QgPSBhbGxEcm9wZG93bnNbMF07XHJcbiAgICAgICAgICAgICRzY29wZS5IRExpc3QgPSBhbGxEcm9wZG93bnNbMV07XHJcbiAgICAgICAgICAgICRzY29wZS5IQ29sbGVjdE1ldGhvZExpc3QgPSBhbGxEcm9wZG93bnNbMl07XHJcbiAgICAgICAgICAgICRzY29wZS5WRGF0dW1MaXN0ID0gYWxsRHJvcGRvd25zWzNdO1xyXG4gICAgICAgICAgICAkc2NvcGUuVkNvbGxlY3RNZXRob2RMaXN0ID0gYWxsRHJvcGRvd25zWzRdO1xyXG4gICAgICAgICAgICAkc2NvcGUuT1BRdWFsaXR5TGlzdCA9IGFsbERyb3Bkb3duc1s1XTtcclxuICAgICAgICAgICAgJHNjb3BlLmZpbGVUeXBlTGlzdCA9IGFsbERyb3Bkb3duc1s2XTsgLy91c2VkIGlmIGNyZWF0aW5nL2VkaXRpbmcgT1AgZmlsZSAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAkc2NvcGUuaHRtbERlc2NyaXB0aW9uVGlwID0gJHNjZS50cnVzdEFzSHRtbCgnUGxlYXNlIGRlc2NyaWJlIGxvY2F0aW9uIGFuZCB0eXBlIG9mIG1hcmsgPGVtPmllLiBcXCdjaGlzZWxlZCBzcXVhcmUgb24gdGhpcmQgc2lkZXdhbGsgYmxvY2sgb24gdGhlIHNvdXRoIHNpZGUgb2YgdGhlIHN0cmVldFxcJzwvZW0+Jyk7XHJcbiAgICAgICAgICAgICRzY29wZS5IV01maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTsgLy9Mb2FkaW5nLi4uICAgIFxyXG4gICAgICAgICAgICAkc2NvcGUuT1AgPSB7fTtcclxuICAgICAgICAgICAgJHNjb3BlLnJlbW92ZU9QQ2FycmF5ID0gW107IC8vaG9sZGVyIGlmIHRoZXkgcmVtb3ZlIGFueSBPUCBjb250cm9sc1xyXG4gICAgICAgICAgICAkc2NvcGUudGhpc09Qc2l0ZSA9IG9wU2l0ZTsgLy90aGlzIE9QJ3MgU0lURVxyXG4gICAgICAgICAgICAkc2NvcGUuYWRkZWRJZGVudGlmaWVycyA9IFtdOyAvL2hvbGRlciBmb3IgYWRkZWQgSWRlbnRpZmllcnNcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dDb250cm9sSURpbnB1dCA9IGZhbHNlOyAvL2luaXRpYWxseSBoaWRlIHRoZSBhcmVhIGNvbnRhaW5pbmcgYWRkZWQgY29udHJvbCBJZGVudGlmaWVyc1xyXG4gICAgICAgICAgICAkc2NvcGUuRE1TID0ge307IC8vb2JqZWN0IGZvciBEZWcgTWluIFNlYyB2YWx1ZXNcclxuICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlcyA9IFNpdGVfRmlsZXMuZ2V0QWxsU2l0ZUZpbGVzKCk7XHJcbiAgICAgICAgICAgICRzY29wZS5PUEZpbGVzID0gdGhpc09QICE9PSBcImVtcHR5XCIgPyAkc2NvcGUuYWxsU0ZpbGVzLmZpbHRlcihmdW5jdGlvbiAoc2YpIHsgcmV0dXJuIHNmLm9iamVjdGl2ZV9wb2ludF9pZCA9PSB0aGlzT1Aub2JqZWN0aXZlX3BvaW50X2lkOyB9KSA6IFtdOy8vIG9wRmlsZXM7IC8vaG9sZGVyIGZvciBvcCBmaWxlcyBhZGRlZFxyXG4gICAgICAgICAgICAkc2NvcGUub3BJbWFnZUZpbGVzID0gJHNjb3BlLk9QRmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChvcGYpIHsgcmV0dXJuIG9wZi5maWxldHlwZV9pZCA9PT0gMTsgfSk7IC8vaW1hZ2UgZmlsZXMgZm9yIGNhcm91c2VsXHJcbiAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgLy9oaWRkZW4gZm9ybSB0byBhZGQgZmlsZSB0byBvcFxyXG4gICAgICAgICAgICAvL21ha2UgdW5jZXJ0YWludHkgY2xlYXJlZCBhbmQgZGlzYWJsZWQgd2hlbiAndW5xdWFudGlmaWVkJyBpcyBjaGVja2VkXHJcbiAgICAgICAgICAgICRzY29wZS5VbnF1YW50Q2hlY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuT1AudW5xdWFudGlmaWVkID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QLnVuY2VydGFpbnR5ID0gXCJcIjtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vI3JlZ2lvbiBGSUxFIFNUVUZGXHJcbiAgICAgICAgICAgICRzY29wZS5zdGFtcCA9IEZJTEVfU1RBTVAuZ2V0U3RhbXAoKTsgJHNjb3BlLmZpbGVJdGVtRXhpc3RzID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy9uZWVkIHRvIHJldXBsb2FkIGZpbGVJdGVtIHRvIHRoaXMgZXhpc3RpbmcgZmlsZSBPUiBDaGFuZ2Ugb3V0IGV4aXN0aW5nIGZpbGVJdGVtIGZvciBuZXcgb25lXHJcbiAgICAgICAgICAgICRzY29wZS5zYXZlRmlsZVVwbG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHZhciBmaWxlUGFydHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRmlsZUVudGl0eToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2lkOiAkc2NvcGUuYUZpbGUuZmlsZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJHNjb3BlLmFGaWxlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAkc2NvcGUuYUZpbGUuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RpcmVjdGlvbjogJHNjb3BlLmFGaWxlLnBob3RvX2RpcmVjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGVfZGQ6ICRzY29wZS5hRmlsZS5sYXRpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlX2RkOiAkc2NvcGUuYUZpbGUubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2RhdGU6ICRzY29wZS5hRmlsZS5maWxlX2RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh3bV9pZDogJHNjb3BlLmFGaWxlLmh3bV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogJHNjb3BlLmFGaWxlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlX2lkOiAkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZV9pZDogJHNjb3BlLmFGaWxlLnNvdXJjZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogJHNjb3BlLmFGaWxlLnBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFfZmlsZV9pZDogJHNjb3BlLmFGaWxlLmRhdGFfZmlsZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1bWVudF9pZDogJHNjb3BlLmFGaWxlLmluc3RydW1lbnRfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RhdGU6ICRzY29wZS5hRmlsZS5waG90b19kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc19ud2lzOiAkc2NvcGUuYUZpbGUuaXNfbndpcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0aXZlX3BvaW50X2lkOiAkc2NvcGUuYUZpbGUub2JqZWN0aXZlX3BvaW50X2lkXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBGaWxlOiAkc2NvcGUuYUZpbGUuRmlsZTEgIT09IHVuZGVmaW5lZCA/ICRzY29wZS5hRmlsZS5GaWxlMSA6ICRzY29wZS5hRmlsZS5GaWxlXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy9uZWVkIHRvIHB1dCB0aGUgZmlsZVBhcnRzIGludG8gY29ycmVjdCBmb3JtYXQgZm9yIHBvc3RcclxuICAgICAgICAgICAgICAgIHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZUVudGl0eVwiLCBKU09OLnN0cmluZ2lmeShmaWxlUGFydHMuRmlsZUVudGl0eSkpO1xyXG4gICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZVwiLCBmaWxlUGFydHMuRmlsZSk7XHJcbiAgICAgICAgICAgICAgICAvL25vdyBQT1NUIGl0IChmaWxlcGFydHMpXHJcbiAgICAgICAgICAgICAgICBGSUxFLnVwbG9hZEZpbGUoZmQpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGxvYWRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICBmcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiT2JqZWN0aXZlIFBvaW50IEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3JjID0gJHNjb3BlLnNlcnZlclVSTCArICcvRmlsZXMvJyArICRzY29wZS5hRmlsZS5maWxlX2lkICsgJy9JdGVtJyArIEZJTEVfU1RBTVAuZ2V0U3RhbXAoKTtcclxuICAgICAgICAgICAgICAgICAgICBGSUxFX1NUQU1QLnNldFN0YW1wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YW1wID0gRklMRV9TVEFNUC5nZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuRmlsZTEudHlwZS5pbmRleE9mKFwiaW1hZ2VcIikgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNQaG90byA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlICRzY29wZS5pc1Bob3RvID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLm5hbWUgPSBmcmVzcG9uc2UubmFtZTsgJHNjb3BlLmFGaWxlLnBhdGggPSBmcmVzcG9uc2UucGF0aDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLkZpbGUxICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLkZpbGUgPSAkc2NvcGUuYUZpbGUuRmlsZTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5GaWxlMSA9IHVuZGVmaW5lZDsgLy9wdXQgaXQgYXMgZmlsZSBhbmQgcmVtb3ZlIGl0IGZyb20gMVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BGaWxlcy5zcGxpY2UoJHNjb3BlLmV4aXN0RmlsZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BGaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZyZXNwb25zZS5maWxldHlwZV9pZCA9PT0gMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3BJbWFnZUZpbGVzLnNwbGljZSgkc2NvcGUuZXhpc3RGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3BJbWFnZUZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZXNbJHNjb3BlLmFsbFNGaWxlSW5kZXhdID0gZnJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbGVJdGVtRXhpc3RzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNGaWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL3Nob3cgYSBtb2RhbCB3aXRoIHRoZSBsYXJnZXIgaW1hZ2UgYXMgYSBwcmV2aWV3IG9uIHRoZSBwaG90byBmaWxlIGZvciB0aGlzIG9wXHJcbiAgICAgICAgICAgICRzY29wZS5zaG93SW1hZ2VNb2RhbCA9IGZ1bmN0aW9uIChpbWFnZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGltYWdlTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5JbWFnZSBGaWxlIFByZXZpZXc8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48aW1nIG5nLXNyYz1cInt7c2V0U1JDfX1cIiAvPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjpbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbWFnZUlkID0gaW1hZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXRTUkMgPSBTRVJWRVJfVVJMICsgJy9GaWxlcy8nICsgJHNjb3BlLmltYWdlSWQgKyAnL0l0ZW0nO1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdtZCdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy93YW50IHRvIGFkZCBvciBlZGl0IGZpbGVcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlID0gZnVuY3Rpb24gKGZpbGUpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5maWxlVHlwZXMgPSAkc2NvcGUuZmlsZVR5cGVMaXN0O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFnZW5jaWVzID0gYWdlbmN5TGlzdDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5leGlzdEZpbGVJbmRleCA9IC0xOyAkc2NvcGUuZXhpc3RJTUdGaWxlSW5kZXggPSAtMTsgJHNjb3BlLmFsbFNGaWxlSW5kZXggPSAtMTsgLy9pbmRleGVzIGZvciBzcGxpY2UvY2hhbmdlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUgPSB7fTsgLy9ob2xkZXIgZm9yIGZpbGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlID0ge307IC8vaG9sZGVyIGZvciBmaWxlIHNvdXJjZVxyXG4gICAgICAgICAgICAgICAgLy9PUCB3aWxsIG5vdCBoYXZlIGRhdGFmaWxlICAgICAkc2NvcGUuZGF0YWZpbGUgPSB7fTsgLy9ob2xkZXIgZm9yIGZpbGUgZGF0YWZpbGVcclxuICAgICAgICAgICAgICAgIGlmIChmaWxlICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9lZGl0IG9wIGZpbGVcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhpc3RGaWxlSW5kZXggPSAkc2NvcGUuT1BGaWxlcy5pbmRleE9mKGZpbGUpOyAkc2NvcGUuYWxsU0ZpbGVJbmRleCA9ICRzY29wZS5hbGxTRmlsZXMuaW5kZXhPZihmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhpc3RJTUdGaWxlSW5kZXggPSAkc2NvcGUub3BJbWFnZUZpbGVzLmxlbmd0aCA+IDAgPyAkc2NvcGUub3BJbWFnZUZpbGVzLmluZGV4T2YoZmlsZSkgOiAtMTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUgPSBhbmd1bGFyLmNvcHkoZmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmZpbGVUeXBlID0gJHNjb3BlLmZpbGVUeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGZ0KSB7IHJldHVybiBmdC5maWxldHlwZV9pZCA9PSAkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQ7IH0pWzBdLmZpbGV0eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIEZJTEUuZ2V0RmlsZUl0ZW0oeyBpZDogJHNjb3BlLmFGaWxlLmZpbGVfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbGVJdGVtRXhpc3RzID0gcmVzcG9uc2UuTGVuZ3RoID4gMCA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAvL2RldGVybWluZSBpZiBleGlzdGluZyBmaWxlIGlzIGEgcGhvdG8gKGV2ZW4gaWYgdHlwZSBpcyBub3QgKVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUubmFtZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmSSA9ICRzY29wZS5hRmlsZS5uYW1lLmxhc3RJbmRleE9mKFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVFeHQgPSAkc2NvcGUuYUZpbGUubmFtZS5zdWJzdHJpbmcoZkkgKyAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVFeHQubWF0Y2goLyhqcGd8SlBHfGpwZWd8SlBFR3xwbmd8UE5HfGdpZnxHSUYpJC8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNQaG90byA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSAkc2NvcGUuaXNQaG90byA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3JjID0gJHNjb3BlLnNlcnZlclVSTCArICcvRmlsZXMvJyArICRzY29wZS5hRmlsZS5maWxlX2lkICsgJy9JdGVtJyArIEZJTEVfU1RBTVAuZ2V0U3RhbXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlID0gbmV3IERhdGUoJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSk7IC8vZGF0ZSBmb3IgdmFsaWRpdHkgb2YgZm9ybSBvbiBQVVRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUgIT09IHVuZGVmaW5lZCkgJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUgPSBuZXcgRGF0ZSgkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSk7IC8vZGF0ZSBmb3IgdmFsaWRpdHkgb2YgZm9ybSBvbiBQVVRcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZS5zb3VyY2VfaWQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU09VUkNFLnF1ZXJ5KHsgaWQ6IGZpbGUuc291cmNlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlID0gcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlLkZVTExuYW1lID0gJHNjb3BlLmFTb3VyY2Uuc291cmNlX25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FkZCBhZ2VuY3kgbmFtZSB0byBwaG90byBjYXB0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFnZW5jeU5hbWVGb3JDYXAgPSAkc2NvcGUuYWdlbmNpZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLmFnZW5jeV9pZCA9PSAkc2NvcGUuYVNvdXJjZS5hZ2VuY3lfaWQ7IH0pWzBdLmFnZW5jeV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgaWYgc291cmNlXHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgZXhpc3RpbmcgZmlsZVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSA9IG5ldyBEYXRlKCk7ICRzY29wZS5hRmlsZS5waG90b19kYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZSA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1lbWJlcl9pZCA9PSAkY29va2llcy5nZXQoJ21JRCcpOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZS5GVUxMbmFtZSA9ICRzY29wZS5hU291cmNlLmZuYW1lICsgXCIgXCIgKyAkc2NvcGUuYVNvdXJjZS5sbmFtZTtcclxuICAgICAgICAgICAgICAgIH0gLy9lbmQgbmV3IGZpbGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudXBkYXRlQWdlbmN5Rm9yQ2FwdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY3lOYW1lRm9yQ2FwID0gJHNjb3BlLmFnZW5jaWVzLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gJHNjb3BlLmFTb3VyY2UuYWdlbmN5X2lkOyB9KVswXS5hZ2VuY3lfbmFtZTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vY3JlYXRlIHRoaXMgbmV3IGZpbGVcclxuICAgICAgICAgICAgJHNjb3BlLmNyZWF0ZUZpbGUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlSXNVcGxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9wb3N0IHNvdXJjZSBmaXJzdCB0byBnZXQgc291cmNlX2lkXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hU291cmNlLmFnZW5jeV9pZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhlU291cmNlID0geyBzb3VyY2VfbmFtZTogJHNjb3BlLmFTb3VyY2UuRlVMTG5hbWUsIGFnZW5jeV9pZDogJHNjb3BlLmFTb3VyY2UuYWdlbmN5X2lkfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3cgUE9TVCBTT1VSQ0UsIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTT1VSQ0Uuc2F2ZSh0aGVTb3VyY2UpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RoZW4gUE9TVCBmaWxlUGFydHMgKFNlcnZpY2VzIHBvcHVsYXRlIFBBVEgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZVBhcnRzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGVFbnRpdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXR5cGVfaWQ6ICRzY29wZS5hRmlsZS5maWxldHlwZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJHNjb3BlLmFGaWxlLkZpbGUubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9kYXRlOiAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaG90b19kYXRlOiAkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICRzY29wZS5hRmlsZS5kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogJHNjb3BlLnRoaXNPUHNpdGUuc2l0ZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc291cmNlX2lkOiByZXNwb25zZS5zb3VyY2VfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RpcmVjdGlvbjogJHNjb3BlLmFGaWxlLnBob3RvX2RpcmVjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGVfZGQ6ICRzY29wZS5hRmlsZS5sYXRpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlX2RkOiAkc2NvcGUuYUZpbGUubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvYmplY3RpdmVfcG9pbnRfaWQ6ICRzY29wZS5PUC5vYmplY3RpdmVfcG9pbnRfaWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGU6ICRzY29wZS5hRmlsZS5GaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9uZWVkIHRvIHB1dCB0aGUgZmlsZVBhcnRzIGludG8gY29ycmVjdCBmb3JtYXQgZm9yIHBvc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZUVudGl0eVwiLCBKU09OLnN0cmluZ2lmeShmaWxlUGFydHMuRmlsZUVudGl0eSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZVwiLCBmaWxlUGFydHMuRmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBQT1NUIGl0IChmaWxlcGFydHMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGSUxFLnVwbG9hZEZpbGUoZmQpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGxvYWRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiT2JqZWN0aXZlIFBvaW50IEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1BGaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2l0ZV9GaWxlcy5zZXRBbGxTaXRlRmlsZXMoJHNjb3BlLmFsbFNGaWxlcyk7IC8vdXBkYXRlcyB0aGUgZmlsZSBsaXN0IG9uIHRoZSBzaXRlZGFzaGJvYXJkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRklMRV9TVEFNUC5zZXRTdGFtcCgpOyAvL2hvcGVmdWxseSB1cGRhdGUgdGhlIGZpbGVzIGluIHRoZSBjYXJvdXNlbCA/Pz9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZnJlc3BvbnNlLmZpbGV0eXBlX2lkID09PSAxKSAkc2NvcGUub3BJbWFnZUZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVGb3JtID0gZmFsc2U7ICRzY29wZS5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBmaWxlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBTb3VyY2UgaW5mbzogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBzb3VyY2Uuc2F2ZSgpXHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIHZhbGlkXHJcbiAgICAgICAgICAgIH07Ly9lbmQgY3JlYXRlKClcclxuXHJcbiAgICAgICAgICAgIC8vdXBkYXRlIHRoaXMgZmlsZVxyXG4gICAgICAgICAgICAkc2NvcGUuc2F2ZUZpbGUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlSXNVcGxvYWRpbmcgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vb25seSBwaG90byBvciBvdGhlciBmaWxlIHR5cGUgKG5vIGRhdGEgZmlsZSBoZXJlKVxyXG4gICAgICAgICAgICAgICAgICAgIC8vcHV0IHNvdXJjZSBvciBkYXRhZmlsZSwgcHV0IGZpbGVcclxuICAgICAgICAgICAgICAgICAgICB2YXIgd2hhdGtpbmQgPSAkc2NvcGUuYUZpbGUuZmlsZUJlbG9uZ3NUbztcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNvdXJjZS5zb3VyY2VfaWQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZS5zb3VyY2VfbmFtZSA9ICRzY29wZS5hU291cmNlLkZVTExuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTT1VSQ0UudXBkYXRlKHsgaWQ6ICRzY29wZS5hU291cmNlLnNvdXJjZV9pZCB9LCAkc2NvcGUuYVNvdXJjZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGSUxFLnVwZGF0ZSh7IGlkOiAkc2NvcGUuYUZpbGUuZmlsZV9pZCB9LCAkc2NvcGUuYUZpbGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZpbGVSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVSZXNwb25zZS5maWxlQmVsb25nc1RvID0gXCJPYmplY3RpdmUgUG9pbnQgRmlsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PUEZpbGVzWyRzY29wZS5leGlzdEZpbGVJbmRleF0gPSBmaWxlUmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlc1skc2NvcGUuYWxsU0ZpbGVJbmRleF0gPSBmaWxlUmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2l0ZV9GaWxlcy5zZXRBbGxTaXRlRmlsZXMoJHNjb3BlLmFsbFNGaWxlcyk7IC8vdXBkYXRlcyB0aGUgZmlsZSBsaXN0IG9uIHRoZSBzaXRlZGFzaGJvYXJkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IGZhbHNlOyAkc2NvcGUuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7IC8vTG9hZGluZy4uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIHNvdXJjZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgdmFsaWRcclxuICAgICAgICAgICAgfTsvL2VuZCBzYXZlKClcclxuXHJcbiAgICAgICAgICAgIC8vZGVsZXRlIHRoaXMgZmlsZVxyXG4gICAgICAgICAgICAkc2NvcGUuZGVsZXRlRmlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBEZWxldGVNb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkc2NvcGUuYUZpbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIERlbGV0ZU1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGZpbGVUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICBGSUxFLmRlbGV0ZSh7IGlkOiBmaWxlVG9SZW1vdmUuZmlsZV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PUEZpbGVzLnNwbGljZSgkc2NvcGUuZXhpc3RGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzLnNwbGljZSgkc2NvcGUuYWxsU0ZpbGVJbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcEltYWdlRmlsZXMuc3BsaWNlKCRzY29wZS5leGlzdElNR0ZpbGVJbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVGb3JtID0gZmFsc2U7IFxyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pOy8vZW5kIERlbGV0ZU1vZGFsLnJlc3VsdC50aGVuXHJcbiAgICAgICAgICAgIH07Ly9lbmQgZGVsZXRlKClcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWxGaWxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlID0ge307XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZSA9IHt9O1xyXG4gICAgICAgICAgICAgIC8vICAkc2NvcGUuZGF0YWZpbGUgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8jZW5kcmVnaW9uIEZJTEUgU1RVRkZcclxuXHJcbiAgICAgICAgICAgIC8vY2FsbGVkIGEgZmV3IHRpbWVzIHRvIGZvcm1hdCBqdXN0IHRoZSBkYXRlIChubyB0aW1lKVxyXG4gICAgICAgICAgICB2YXIgbWFrZUFkYXRlID0gZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZCAhPT0gXCJcIiAmJiBkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3Byb3ZpZGVkIGRhdGVcclxuICAgICAgICAgICAgICAgICAgICBhRGF0ZSA9IG5ldyBEYXRlKGQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIHZhciB5ZWFyID0gYURhdGUuZ2V0RnVsbFllYXIoKTtcclxuICAgICAgICAgICAgICAgIHZhciBtb250aCA9IGFEYXRlLmdldE1vbnRoKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF5ID0gKCcwJyArIGFEYXRlLmdldERhdGUoKSkuc2xpY2UoLTIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vbnRoTmFtZXMgPSBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl07XHJcbiAgICAgICAgICAgICAgICB2YXIgZGF0ZVdPdGltZSA9IG5ldyBEYXRlKG1vbnRoTmFtZXNbbW9udGhdICsgXCIgXCIgKyBkYXkgKyBcIiwgXCIgKyB5ZWFyKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkYXRlV090aW1lO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRoaXNPUCAhPSBcImVtcHR5XCIpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5vcE1vZGFsSGVhZGVyID0gXCJEYXR1bSBMb2NhdGlvbiBJbmZvcm1hdGlvblwiO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNyZWF0ZU9SZWRpdE9QID0gJ2VkaXQnO1xyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIGV4aXN0aW5nIE9QXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuT1AgPSBhbmd1bGFyLmNvcHkodGhpc09QKTsgLy9zZXQgYSBjb3B5IHNvIGxpc3QgdmlldyBkb2VzbnQgY2hhbmdlIGlmIHRoZXkgY2FuY2VsIGZyb20gaGVyZSBhZnRlciBtYWtpbmcgY2hhbmdlc1xyXG4gICAgICAgICAgICAgICAgLy9mb3JtYXR0ZWQgYXMgZGF0ZSBmb3IgZGF0ZXBpY2tlclxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk9QLmRhdGVfZXN0YWJsaXNoZWQgPSBtYWtlQWRhdGUoJHNjb3BlLk9QLmRhdGVfZXN0YWJsaXNoZWQpO1xyXG4gICAgICAgICAgICAgICAgLy9jaGVjayBpZiB2ZGF0dW1faWQgPT0gMCwgaWYgc28gbWFrZSB1bmRlZmluZWRcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuT1AudmRhdHVtX2lkID09PSAwKSBkZWxldGUgJHNjb3BlLk9QLnZkYXR1bV9pZDtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLk9QLmRhdGVfcmVjb3ZlcmVkICE9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5PUC5kYXRlX3JlY292ZXJlZCA9IG1ha2VBZGF0ZSgkc2NvcGUuT1AuZGF0ZV9yZWNvdmVyZWQpO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzT1BDb250cm9scy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZGVkSWRlbnRpZmllcnMgPSB0aGlzT1BDb250cm9scztcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0NvbnRyb2xJRGlucHV0ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICRzY29wZS5PUC5vcFR5cGUgPSAkc2NvcGUuT1Aub3BfdHlwZV9pZCA+IDAgPyAkc2NvcGUuT1BUeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQub2JqZWN0aXZlX3BvaW50X3R5cGVfaWQgPT0gJHNjb3BlLk9QLm9wX3R5cGVfaWQ7IH0pWzBdLm9wX3R5cGUgOiAnJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5PUC5xdWFsaXR5ID0gJHNjb3BlLk9QLm9wX3F1YWxpdHlfaWQgPiAwID8gJHNjb3BlLk9QUXVhbGl0eUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChxKSB7IHJldHVybiBxLm9wX3F1YWxpdHlfaWQgPT0gJHNjb3BlLk9QLm9wX3F1YWxpdHlfaWQ7IH0pWzBdLnF1YWxpdHkgOiAnJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5PUC5oZGF0dW0gPSAkc2NvcGUuT1AuaGRhdHVtX2lkID4gMCA/ICRzY29wZS5IRExpc3QuZmlsdGVyKGZ1bmN0aW9uIChoZCkgeyByZXR1cm4gaGQuZGF0dW1faWQgPT0gJHNjb3BlLk9QLmhkYXR1bV9pZDsgfSlbMF0uZGF0dW1fbmFtZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk9QLmhDb2xsZWN0TWV0aG9kID0gJHNjb3BlLk9QLmhjb2xsZWN0X21ldGhvZF9pZCA+IDAgPyAkc2NvcGUuSENvbGxlY3RNZXRob2RMaXN0LmZpbHRlcihmdW5jdGlvbiAoaGMpIHsgcmV0dXJuIGhjLmhjb2xsZWN0X21ldGhvZF9pZCA9PSAkc2NvcGUuT1AuaGNvbGxlY3RfbWV0aG9kX2lkOyB9KVswXS5oY29sbGVjdF9tZXRob2QgOiAnJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5PUC52RGF0dW0gPSAkc2NvcGUuT1AudmRhdHVtX2lkID4gMCA/ICRzY29wZS5WRGF0dW1MaXN0LmZpbHRlcihmdW5jdGlvbiAodmQpIHsgcmV0dXJuIHZkLmRhdHVtX2lkID09ICRzY29wZS5PUC52ZGF0dW1faWQ7IH0pWzBdLmRhdHVtX25hbWUgOiAnJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5PUC52Q29sbGVjdE1ldGhvZCA9ICRzY29wZS5PUC52Y29sbGVjdF9tZXRob2RfaWQgPiAwID8gJHNjb3BlLlZDb2xsZWN0TWV0aG9kTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHZjKSB7IHJldHVybiB2Yy52Y29sbGVjdF9tZXRob2RfaWQgPT0gJHNjb3BlLk9QLnZjb2xsZWN0X21ldGhvZF9pZDsgfSlbMF0udmNvbGxlY3RfbWV0aG9kIDogJyc7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIFxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm9wTW9kYWxIZWFkZXIgPSBcIkNyZWF0ZSBuZXcgRGF0dW0gTG9jYXRpb25cIjtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jcmVhdGVPUmVkaXRPUCA9ICdjcmVhdGUnO1xyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIG5ldyBPUCBcclxuICAgICAgICAgICAgICAgICRzY29wZS5PUC5sYXRpdHVkZV9kZCA9IG9wU2l0ZS5sYXRpdHVkZV9kZDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5PUC5sb25naXR1ZGVfZGQgPSBvcFNpdGUubG9uZ2l0dWRlX2RkO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk9QLmhkYXR1bV9pZCA9IG9wU2l0ZS5oZGF0dW1faWQ7XHJcbiAgICAgICAgICAgICAgICAvL2RlZmF1bHQgdG9kYXkgZm9yIGVzdGFibGlzZWQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLk9QLmRhdGVfZXN0YWJsaXNoZWQgPSBtYWtlQWRhdGUoXCJcIik7XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb25cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9kZWZhdWx0IHJhZGlvcyAoaGFzIHRvIGNvbWUgYWZ0ZXIgT1AgaXMgc2V0IG9uZSB3YXkgb3IgYW5vdGhlcilcclxuICAgICAgICAgICAgJHNjb3BlLk9QLmRlY0RlZ09SZG1zID0gJ2RkJztcclxuICAgICAgICAgICAgJHNjb3BlLk9QLkZUb3JNRVRFUiA9ICdmdCc7XHJcbiAgICAgICAgICAgICRzY29wZS5PUC5GVG9yQ00gPSAnZnQnO1xyXG5cclxuICAgICAgICAgICAgLy93YW50IHRvIGFkZCBpZGVudGlmaWVyXHJcbiAgICAgICAgICAgICRzY29wZS5hZGROZXdJZGVudGlmaWVyID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jcmVhdGVPUmVkaXRPUCA9PSAnZWRpdCcpIFxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRlZElkZW50aWZpZXJzQ29weS5wdXNoKHsgb2JqZWN0aXZlX3BvaW50X2lkOiAkc2NvcGUuT1Aub2JqZWN0aXZlX3BvaW50X2lkLCBpZGVudGlmaWVyOiBcIlwiLCBpZGVudGlmaWVyX3R5cGU6IFwiXCIgfSk7XHJcbiAgICAgICAgICAgICAgICBlbHNlIFxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRlZElkZW50aWZpZXJzLnB1c2goeyBpZGVudGlmaWVyOiBcIlwiLCBpZGVudGlmaWVyX3R5cGU6IFwiXCIgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dDb250cm9sSURpbnB1dCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvLyNyZWdpb24gRGF0ZXBpY2tlclxyXG4gICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tycyA9IHt9O1xyXG4gICAgICAgICAgICAkc2NvcGUuZGF0ZU9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydGluZ0RheTogMSxcclxuICAgICAgICAgICAgICAgIHNob3dXZWVrczogZmFsc2VcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgJHNjb3BlLm9wZW4gPSBmdW5jdGlvbiAoJGV2ZW50LCB3aGljaCkge1xyXG4gICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRhdGVwaWNrcnNbd2hpY2hdID0gdHJ1ZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgICAgICAgICAvL2xhdC9sb25nID1pcyBudW1iZXJcclxuICAgICAgICAgICAgJHNjb3BlLmlzTnVtID0gZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHRoZUV2ZW50ID0gZXZ0IHx8IHdpbmRvdy5ldmVudDtcclxuICAgICAgICAgICAgICAgIHZhciBrZXkgPSB0aGVFdmVudC5rZXlDb2RlIHx8IHRoZUV2ZW50LndoaWNoO1xyXG4gICAgICAgICAgICAgICAgaWYgKGtleSAhPSA0NiAmJiBrZXkgIT0gNDUgJiYga2V5ID4gMzEgJiYgKGtleSA8IDQ4IHx8IGtleSA+IDU3KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoZUV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoZUV2ZW50LnByZXZlbnREZWZhdWx0KSB0aGVFdmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9jb252ZXJ0IGRlZyBtaW4gc2VjIHRvIGRlYyBkZWdyZWVzXHJcbiAgICAgICAgICAgIHZhciBhemltdXRoID0gZnVuY3Rpb24gKGRlZywgbWluLCBzZWMpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhemkgPSAwO1xyXG4gICAgICAgICAgICAgICAgaWYgKGRlZyA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBhemkgPSAtMS4wICogZGVnICsgMS4wICogbWluIC8gNjAuMCArIDEuMCAqIHNlYyAvIDM2MDAuMDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKC0xLjAgKiBhemkpLnRvRml4ZWQoNSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhemkgPSAxLjAgKiBkZWcgKyAxLjAgKiBtaW4gLyA2MC4wICsgMS4wICogc2VjIC8gMzYwMC4wO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAoYXppKS50b0ZpeGVkKDUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9jb252ZXJ0IGRlYyBkZWdyZWVzIHRvIGRtc1xyXG4gICAgICAgICAgICB2YXIgZGVnX3RvX2RtcyA9IGZ1bmN0aW9uIChkZWcpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkZWcgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZGVnID0gZGVnLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vbG9uZ2l0dWRlLCByZW1vdmUgdGhlIC0gc2lnblxyXG4gICAgICAgICAgICAgICAgICAgIGRlZyA9IGRlZy5zdWJzdHJpbmcoMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB2YXIgZCA9IE1hdGguZmxvb3IoZGVnKTtcclxuICAgICAgICAgICAgICAgIHZhciBtaW5mbG9hdCA9IChkZWcgLSBkKSAqIDYwO1xyXG4gICAgICAgICAgICAgICAgdmFyIG0gPSBNYXRoLmZsb29yKG1pbmZsb2F0KTtcclxuICAgICAgICAgICAgICAgIHZhciBzID0gKChtaW5mbG9hdCAtIG0pICogNjApLnRvRml4ZWQoMyk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChcIlwiICsgZCArIFwiOlwiICsgbSArIFwiOlwiICsgcyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL3RoZXkgY2hhbmdlZCByYWRpbyBidXR0b24gZm9yIGRtcyBkZWMgZGVnXHJcbiAgICAgICAgICAgICRzY29wZS5sYXRMb25nQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jcmVhdGVPUmVkaXRPUCA9PSAnZWRpdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLm9wQ29weS5kZWNEZWdPUmRtcyA9PSBcImRkXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGV5IGNsaWNrZWQgRGVjIERlZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxBRGVnICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY29udmVydCB3aGF0J3MgaGVyZSBmb3IgZWFjaCBsYXQgYW5kIGxvbmdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcENvcHkubGF0aXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTEFEZWcsICRzY29wZS5ETVMuTEFNaW4sICRzY29wZS5ETVMuTEFTZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9wQ29weS5sb25naXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTE9EZWcsICRzY29wZS5ETVMuTE9NaW4sICRzY29wZS5ETVMuTE9TZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jbGVhclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGV5IGNsaWNrZWQgZG1zIChjb252ZXJ0IGxhdC9sb25nIHRvIGRtcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5vcENvcHkubGF0aXR1ZGVfZGQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhdERNUyA9IChkZWdfdG9fZG1zKCRzY29wZS5vcENvcHkubGF0aXR1ZGVfZGQpKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhZERNU2FycmF5ID0gbGF0RE1TLnNwbGl0KCc6Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxBRGVnID0gbGFkRE1TYXJyYXlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxBTWluID0gbGFkRE1TYXJyYXlbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxBU2VjID0gbGFkRE1TYXJyYXlbMl07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxvbmdETVMgPSBkZWdfdG9fZG1zKCRzY29wZS5vcENvcHkubG9uZ2l0dWRlX2RkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb25nRE1TYXJyYXkgPSBsb25nRE1TLnNwbGl0KCc6Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPRGVnID0gbG9uZ0RNU2FycmF5WzBdICogLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPTWluID0gbG9uZ0RNU2FycmF5WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MT1NlYyA9IGxvbmdETVNhcnJheVsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY2xlYXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcENvcHkubGF0aXR1ZGVfZGQgPSB1bmRlZmluZWQ7ICRzY29wZS5vcENvcHkubG9uZ2l0dWRlX2RkID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLk9QLmRlY0RlZ09SZG1zID09IFwiZGRcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3RoZXkgY2xpY2tlZCBEZWMgRGVnLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ETVMuTEFEZWcgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jb252ZXJ0IHdoYXQncyBoZXJlIGZvciBlYWNoIGxhdCBhbmQgbG9uZ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QLmxhdGl0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxBRGVnLCAkc2NvcGUuRE1TLkxBTWluLCAkc2NvcGUuRE1TLkxBU2VjKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PUC5sb25naXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTE9EZWcsICRzY29wZS5ETVMuTE9NaW4sICRzY29wZS5ETVMuTE9TZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jbGVhclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGV5IGNsaWNrZWQgZG1zIChjb252ZXJ0IGxhdC9sb25nIHRvIGRtcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5PUC5sYXRpdHVkZV9kZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlX2xhdERNUyA9IChkZWdfdG9fZG1zKCRzY29wZS5PUC5sYXRpdHVkZV9kZCkpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlX2xhZERNU2FycmF5ID0gY3JlYXRlX2xhdERNUy5zcGxpdCgnOicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MQURlZyA9IGNyZWF0ZV9sYWRETVNhcnJheVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTEFNaW4gPSBjcmVhdGVfbGFkRE1TYXJyYXlbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxBU2VjID0gY3JlYXRlX2xhZERNU2FycmF5WzJdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjcmVhdGVfbG9uZ0RNUyA9IGRlZ190b19kbXMoJHNjb3BlLk9QLmxvbmdpdHVkZV9kZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlX2xvbmdETVNhcnJheSA9IGNyZWF0ZV9sb25nRE1TLnNwbGl0KCc6Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPRGVnID0gY3JlYXRlX2xvbmdETVNhcnJheVswXSAqIC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MT01pbiA9IGNyZWF0ZV9sb25nRE1TYXJyYXlbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPU2VjID0gY3JlYXRlX2xvbmdETVNhcnJheVsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY2xlYXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PUC5sYXRpdHVkZV9kZCA9IHVuZGVmaW5lZDsgJHNjb3BlLk9QLmxvbmdpdHVkZV9kZCA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vanVzdCBuZWVkIGFuIE9CSkVDVElWRV9QT0lOVCBvYmplY3QgdG8gcG9zdC9wdXRcclxuICAgICAgICAgICAgdmFyIHRyaW1PUCA9IGZ1bmN0aW9uIChvcCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIE9CSl9QVCA9IHtcclxuICAgICAgICAgICAgICAgICAgICBuYW1lOiBvcC5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiBvcC5kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgICAgICAgICBlbGV2X2Z0OiBvcC5lbGV2X2Z0ICE9PSB1bmRlZmluZWQgPyBvcC5lbGV2X2Z0IDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBkYXRlX2VzdGFibGlzaGVkOiBvcC5kYXRlX2VzdGFibGlzaGVkLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wX2lzX2Rlc3Ryb3llZDogb3Aub3BfaXNfZGVzdHJveWVkICE9PSB1bmRlZmluZWQgPyBvcC5vcF9pc19kZXN0cm95ZWQgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wX25vdGVzOiBvcC5vcF9ub3RlcyAhPT0gdW5kZWZpbmVkID8gb3Aub3Bfbm90ZXMgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6ICRzY29wZS50aGlzT1BzaXRlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgdmRhdHVtX2lkOiBvcC52ZGF0dW1faWQgIT09IHVuZGVmaW5lZCA/IG9wLnZkYXR1bV9pZCA6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGVfZGQ6IG9wLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZV9kZDogb3AubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgIGhkYXR1bV9pZDogb3AuaGRhdHVtX2lkICE9PSB1bmRlZmluZWQgPyBvcC5oZGF0dW1faWQgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIGhjb2xsZWN0X21ldGhvZF9pZDogb3AuaGNvbGxlY3RfbWV0aG9kX2lkICE9PSB1bmRlZmluZWQgPyBvcC5oY29sbGVjdF9tZXRob2RfaWQgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHZjb2xsZWN0X21ldGhvZF9pZDogb3AudmNvbGxlY3RfbWV0aG9kX2lkICE9PSB1bmRlZmluZWQgPyBvcC52Y29sbGVjdF9tZXRob2RfaWQgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wX3R5cGVfaWQ6IG9wLm9wX3R5cGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgZGF0ZV9yZWNvdmVyZWQ6IG9wLmRhdGVfcmVjb3ZlcmVkICE9PSB1bmRlZmluZWQgPyBvcC5kYXRlX3JlY292ZXJlZCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgdW5jZXJ0YWludHk6IG9wLnVuY2VydGFpbnR5ICE9PSB1bmRlZmluZWQgJiYgb3AudW5jZXJ0YWludHkgIT09IFwiXCIgPyBvcC51bmNlcnRhaW50eSA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgdW5xdWFudGlmaWVkOiBvcC51bnF1YW50aWZpZWQgIT09IHVuZGVmaW5lZCA/IG9wLnVucXVhbnRpZmllZCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgb3BfcXVhbGl0eV9pZDogb3Aub3BfcXVhbGl0eV9pZCAhPT0gdW5kZWZpbmVkID8gb3Aub3BfcXVhbGl0eV9pZCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIE9CSl9QVDtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vY2FuY2VsIG1vZGFsXHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgLy8gICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vZml4IGRlZmF1bHQgcmFkaW9zIGFuZCBsYXQvbG9uZ1xyXG4gICAgICAgICAgICB2YXIgZm9ybWF0RGVmYXVsdHMgPSBmdW5jdGlvbiAodGhlT1ApIHtcclxuICAgICAgICAgICAgICAgIC8vJHNjb3BlLk9QLkZUb3JNRVRFUiBuZWVkcyB0byBiZSAnZnQnLiBpZiAnbWV0ZXInID09Y29udmVydCB2YWx1ZSB0byBmdCBcclxuICAgICAgICAgICAgICAgIGlmICh0aGVPUC5GVG9yTUVURVIgPT0gXCJtZXRlclwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QLkZUb3JNRVRFUiA9ICdmdCc7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QLmVsZXZfZnQgPSAkc2NvcGUuT1AuZWxldl9mdCAqIDMuMjgwODtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIC8vJHNjb3BlLk9QLkZUb3JDTSBuZWVkcyB0byBiZSAnZnQnLiBpZiAnY20nID09Y29udmVydCB2YWx1ZSB0byBmdCBcclxuICAgICAgICAgICAgICAgIGlmICh0aGVPUC5GVG9yQ00gPT0gXCJjbVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QLkZUb3JDTSA9ICdmdCc7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QLnVuY2VydGFpbnR5ID0gJHNjb3BlLk9QLnVuY2VydGFpbnR5IC8gMzAuNDg7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvLyRzY29wZS5PUC5kZWNEZWdPUmRtcyBuZWVkcyB0byBiZSAnZGQnLiBpZiAnZG1zJyA9PWNvbnZlcnQgJHNjb3BlLkRNUyB2YWx1ZXMgdG8gZGRcclxuICAgICAgICAgICAgICAgIGlmICh0aGVPUC5kZWNEZWdPUmRtcyA9PSBcImRtc1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QLmRlY0RlZ09SZG1zID0gJ2RkJztcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1AubGF0aXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTEFEZWcsICRzY29wZS5ETVMuTEFNaW4sICRzY29wZS5ETVMuTEFTZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5PUC5sb25naXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTE9EZWcsICRzY29wZS5ETVMuTE9NaW4sICRzY29wZS5ETVMuTE9TZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1Auc2l0ZV9pZCA9ICRzY29wZS50aGlzT1BzaXRlLnNpdGVfaWQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL0NyZWF0ZSB0aGlzIE9QXHJcbiAgICAgICAgICAgICRzY29wZS5jcmVhdGUgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5PUEZvcm0uJHZhbGlkKSB7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjcmVhdGVkT1AgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAvL3Bvc3RcclxuICAgICAgICAgICAgICAgICAgICBmb3JtYXREZWZhdWx0cygkc2NvcGUuT1ApOyAvLyRzY29wZS5PUC5GVG9yTUVURVIsIEZUb3JDTSwgZGVjRGVnT1JkbXMgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIE9QdG9QT1NUID0gdHJpbU9QKCRzY29wZS5PUCk7IC8vbWFrZSBpdCBhbiBPQkpFQ1RJVkVfUE9JTlQgZm9yIHNhdmluZyAgICAgICAgICAgICAgICAgICAgXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIE9CSkVDVElWRV9QT0lOVC5zYXZlKE9QdG9QT1NULCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRGF0dW0gTG9jYXRpb24gY3JlYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZE9QID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYWRkZWRJZGVudGlmaWVycy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3Bvc3QgZWFjaCBvbmUgVEhJUyBXSUxMIENIQU5HRSBTT09OIFRPIEhBVkUgb2JqZWN0aXZlX3BvaW50X2lkIGFscmVhZHkgYWRkZWQgYW5kIG5vdCBzZW50IGFsb25nIHdpdGggaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG9wYyA9IDA7IG9wYyA8ICRzY29wZS5hZGRlZElkZW50aWZpZXJzLmxlbmd0aDsgb3BjKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc09uZSA9ICRzY29wZS5hZGRlZElkZW50aWZpZXJzW29wY107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc09uZS5vYmplY3RpdmVfcG9pbnRfaWQgPSByZXNwb25zZS5vYmplY3RpdmVfcG9pbnRfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT1BfQ09OVFJPTF9JREVOVElGSUVSLnNhdmUodGhpc09uZSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIGNyZWF0aW5nIERhdHVtIExvY2F0aW9uOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW5kQmFjayA9IFtjcmVhdGVkT1AsICdjcmVhdGVkJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHNlbmRCYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTsgLy9lbmQgQ3JlYXRlXHJcblxyXG4gICAgICAgICAgICAvL1ggd2FzIGNsaWNrZWQgbmV4dCB0byBleGlzdGluZyBDb250cm9sIElkZW50aWZpZXIgdG8gaGF2ZSBpdCByZW1vdmVkLCBzdG9yZSBpbiByZW1vdmUgYXJyYXkgZm9yIFNhdmUoKVxyXG4gICAgICAgICAgICAkc2NvcGUuUmVtb3ZlSUQgPSBmdW5jdGlvbiAob3BDb250cm9sKSB7XHJcbiAgICAgICAgICAgICAgICAvL29ubHkgYWRkIHRvIHJlbW92ZSBsaXN0IGlmIGl0J3MgYW4gZXhpc3Rpbmcgb25lIHRvIERFTEVURVxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hZGRlZElkZW50aWZpZXJzQ29weSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGkgPSAkc2NvcGUuYWRkZWRJZGVudGlmaWVyc0NvcHkuaW5kZXhPZihvcENvbnRyb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcENvbnRyb2wub3BfY29udHJvbF9pZGVudGlmaWVyX2lkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJlbW92ZU9QQ2FycmF5LnB1c2gob3BDb250cm9sKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZGVkSWRlbnRpZmllcnNDb3B5LnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkZWRJZGVudGlmaWVyc0NvcHkuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy90aGlzIGlzIGEgY3JlYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNpID0gJHNjb3BlLmFkZGVkSWRlbnRpZmllcnMuaW5kZXhPZihvcENvbnRyb2wpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRlZElkZW50aWZpZXJzLnNwbGljZShjaSwgMSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL1NhdmUgdGhpcyBPUFxyXG4gICAgICAgICAgICAkc2NvcGUuc2F2ZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MQURlZyAhPT0gdW5kZWZpbmVkKSAkc2NvcGUub3BDb3B5LmxhdGl0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxBRGVnLCAkc2NvcGUuRE1TLkxBTWluLCAkc2NvcGUuRE1TLkxBU2VjKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MT0RlZyAhPT0gdW5kZWZpbmVkKSAkc2NvcGUub3BDb3B5LmxvbmdpdHVkZV9kZCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MT0RlZywgJHNjb3BlLkRNUy5MT01pbiwgJHNjb3BlLkRNUy5MT1NlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVwZGF0ZWRPUCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgdGhlcmUncyBhbiBvcF9jb250cm9sX2lkZW50aWZpZXJfaWQsIFBVVCAuLiBlbHNlIFBPU1RcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFkZGVkSWRlbnRpZmllcnNDb3B5Lmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCAkc2NvcGUuYWRkZWRJZGVudGlmaWVyc0NvcHkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYWRkZWRJZGVudGlmaWVyc0NvcHlbaV0ub3BfY29udHJvbF9pZGVudGlmaWVyX2lkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2V4aXN0aW5nOiBQVVR2YXIgaW5kID0gJHNjb3BlLmNob3NlbkhXTUxpc3QubWFwKGZ1bmN0aW9uIChod20pIHsgcmV0dXJuIGh3bS5od21faWQ7IH0pLmluZGV4T2YoYUhXTS5od21faWQpOyAvL25vdCB3b3JraW5nOjogJHNjb3BlLmNob3NlbkhXTUxpc3QuaW5kZXhPZihhSFdNKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhpc3RJbmRleCA9ICRzY29wZS5hZGRlZElkZW50aWZpZXJzLm1hcChmdW5jdGlvbiAoaSkgeyByZXR1cm4gaS5vcF9jb250cm9sX2lkZW50aWZpZXJfaWQ7IH0pLmluZGV4T2YoJHNjb3BlLmFkZGVkSWRlbnRpZmllcnNDb3B5W2ldLm9wX2NvbnRyb2xfaWRlbnRpZmllcl9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgT1BfQ09OVFJPTF9JREVOVElGSUVSLnVwZGF0ZSh7IGlkOiAkc2NvcGUuYWRkZWRJZGVudGlmaWVyc0NvcHlbaV0ub3BfY29udHJvbF9pZGVudGlmaWVyX2lkIH0sICRzY29wZS5hZGRlZElkZW50aWZpZXJzQ29weVtpXSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZGVkSWRlbnRpZmllcnNbZXhpc3RJbmRleF0gPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9wb3N0IGVhY2ggb25lXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRoaXNPUENvbnRyb2xJRCA9ICRzY29wZS5hZGRlZElkZW50aWZpZXJzQ29weVtpXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzT1BDb250cm9sSUQub2JqZWN0aXZlX3BvaW50X2lkID0gJHNjb3BlLk9QLm9iamVjdGl2ZV9wb2ludF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUF9DT05UUk9MX0lERU5USUZJRVIuc2F2ZSh0aGlzT1BDb250cm9sSUQpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRlZElkZW50aWZpZXJzLnB1c2gocmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgZm9yZWFjaCBhZGRlZElkZW50aWZpZXJcclxuICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgaWYgdGhlcmUncyBhZGRlZGlkZW50aWZpZXJzXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgdGhlcmUncyBhbnkgaW4gcmVtb3ZlT1BDYXJyYXksIERFTEVURSB0aG9zZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucmVtb3ZlT1BDYXJyYXkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciByID0gMDsgciA8ICRzY29wZS5yZW1vdmVPUENhcnJheS5sZW5ndGg7IHIrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlSW5kZXggPSAkc2NvcGUuYWRkZWRJZGVudGlmaWVycy5tYXAoZnVuY3Rpb24gKHJpKSB7IHJldHVybiByaS5vcF9jb250cm9sX2lkZW50aWZpZXJfaWQ7IH0pLmluZGV4T2YoJHNjb3BlLnJlbW92ZU9QQ2FycmF5W3JdLm9wX2NvbnRyb2xfaWRlbnRpZmllcl9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPUF9DT05UUk9MX0lERU5USUZJRVIuZGVsZXRlKHsgaWQ6ICRzY29wZS5yZW1vdmVPUENhcnJheVtyXS5vcF9jb250cm9sX2lkZW50aWZpZXJfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFkZGVkSWRlbnRpZmllcnMuc3BsaWNlKGRlSW5kZXgsMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfS8vZW5kIGZvcmVhY2ggcmVtb3ZlT1BDYXJyYXlcclxuICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgaWYgdGhlcmUncyByZW1vdmVPUENzXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vbG9vayBhdCBPUC5GVG9yTUVURVIgKFwiZnRcIiksIE9QLkZUb3JDTSAoXCJmdFwiKSwgYW5kIE9QLmRlY0RlZ09SZG1zIChcImRkXCIpLCBtYWtlIHN1cmUgc2l0ZV9JRCBpcyBvbiB0aGVyZSBhbmQgc2VuZCBpdCB0byB0cmltIGJlZm9yZSBQVVQgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgZm9ybWF0RGVmYXVsdHMoJHNjb3BlLm9wQ29weSk7IC8vJHNjb3BlLk9QLkZUb3JNRVRFUiwgRlRvckNNLCBkZWNEZWdPUmRtc1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBPUHRvUE9TVCA9IHRyaW1PUCgkc2NvcGUub3BDb3B5KTtcclxuICAgICAgICAgICAgICAgICAgICBPUHRvUE9TVC5vYmplY3RpdmVfcG9pbnRfaWQgPSAkc2NvcGUub3BDb3B5Lm9iamVjdGl2ZV9wb2ludF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAvLyRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWydYLUhUVFAtTWV0aG9kLU92ZXJyaWRlJ10gPSAnUFVUJztcclxuICAgICAgICAgICAgICAgICAgICBPQkpFQ1RJVkVfUE9JTlQudXBkYXRlKHsgaWQ6IE9QdG9QT1NULm9iamVjdGl2ZV9wb2ludF9pZCB9LCBPUHRvUE9TVCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkRhdHVtIExvY2F0aW9uIHVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PUCA9IHJlc3BvbnNlOyB0aGlzT1AgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QLmRhdGVfZXN0YWJsaXNoZWQgPSBtYWtlQWRhdGUoJHNjb3BlLk9QLmRhdGVfZXN0YWJsaXNoZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLk9QLmRhdGVfcmVjb3ZlcmVkICE9PSBudWxsKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QLmRhdGVfcmVjb3ZlcmVkID0gbWFrZUFkYXRlKCRzY29wZS5PUC5kYXRlX3JlY292ZXJlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PUC5vcFR5cGUgPSAkc2NvcGUuT1Aub3BfdHlwZV9pZCA+IDAgPyAkc2NvcGUuT1BUeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHQpIHsgcmV0dXJuIHQub2JqZWN0aXZlX3BvaW50X3R5cGVfaWQgPT0gJHNjb3BlLk9QLm9wX3R5cGVfaWQ7IH0pWzBdLm9wX3R5cGUgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QLnF1YWxpdHkgPSAkc2NvcGUuT1Aub3BfcXVhbGl0eV9pZCA+IDAgPyAkc2NvcGUuT1BRdWFsaXR5TGlzdC5maWx0ZXIoZnVuY3Rpb24gKHEpIHsgcmV0dXJuIHEub3BfcXVhbGl0eV9pZCA9PSAkc2NvcGUuT1Aub3BfcXVhbGl0eV9pZDsgfSlbMF0ucXVhbGl0eSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1AuaGRhdHVtID0gJHNjb3BlLk9QLmhkYXR1bV9pZCA+IDAgPyAkc2NvcGUuSERMaXN0LmZpbHRlcihmdW5jdGlvbiAoaGQpIHsgcmV0dXJuIGhkLmRhdHVtX2lkID09ICRzY29wZS5PUC5oZGF0dW1faWQ7IH0pWzBdLmRhdHVtX25hbWUgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QLmhDb2xsZWN0TWV0aG9kID0gJHNjb3BlLk9QLmhjb2xsZWN0X21ldGhvZF9pZCA+IDAgPyAkc2NvcGUuSENvbGxlY3RNZXRob2RMaXN0LmZpbHRlcihmdW5jdGlvbiAoaGMpIHsgcmV0dXJuIGhjLmhjb2xsZWN0X21ldGhvZF9pZCA9PSAkc2NvcGUuT1AuaGNvbGxlY3RfbWV0aG9kX2lkOyB9KVswXS5oY29sbGVjdF9tZXRob2QgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLk9QLnZEYXR1bSA9ICRzY29wZS5PUC52ZGF0dW1faWQgPiAwID8gJHNjb3BlLlZEYXR1bUxpc3QuZmlsdGVyKGZ1bmN0aW9uICh2ZCkgeyByZXR1cm4gdmQuZGF0dW1faWQgPT0gJHNjb3BlLk9QLnZkYXR1bV9pZDsgfSlbMF0uZGF0dW1fbmFtZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuT1AudkNvbGxlY3RNZXRob2QgPSAkc2NvcGUuT1AudmNvbGxlY3RfbWV0aG9kX2lkID4gMCA/ICRzY29wZS5WQ29sbGVjdE1ldGhvZExpc3QuZmlsdGVyKGZ1bmN0aW9uICh2YykgeyByZXR1cm4gdmMudmNvbGxlY3RfbWV0aG9kX2lkID09ICRzY29wZS5PUC52Y29sbGVjdF9tZXRob2RfaWQ7IH0pWzBdLnZjb2xsZWN0X21ldGhvZCA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub3BDb3B5ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZGRlZElkZW50aWZpZXJzQ29weSA9IFtdOyAkc2NvcGUudmlldy5PUHZhbCA9ICdkZXRhaWwnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBkZWxldGUgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb25bJ1gtSFRUUC1NZXRob2QtT3ZlcnJpZGUnXTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHVwZGF0aW5nIERhdHVtIExvY2F0aW9uOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgdmFsaWRcclxuICAgICAgICAgICAgfTsgLy9lbmQgU2F2ZVxyXG5cclxuICAgICAgICAgICAgLy9kZWxldGUgdGhpcyBPUCBmcm9tIHRoZSBTSVRFXHJcbiAgICAgICAgICAgICRzY29wZS5kZWxldGVPUCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIE9QX01FQVNVUkUuZ2V0RGF0dW1Mb2NhdGlvbk9QTWVhc3VyZXMoeyBvYmplY3RpdmVQb2ludElkOiAkc2NvcGUuT1Aub2JqZWN0aXZlX3BvaW50X2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChyZXN1bHQubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3BPblRhcGVkb3duTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkNhbm5vdCBEZWxldGU8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoaXMgRGF0dW0gTG9jYXRpb24gaXMgYmVpbmcgdXNlZCBmb3Igb25lIG9yIG1vcmUgc2Vuc29yIHRhcGUgZG93bnMuIFBsZWFzZSBkZWxldGUgdGhlIHRhcGUgZG93biBiZWZvcmUgZGVsZXRpbmcgdGhlIGRhdHVtIGxvY2F0aW9uLjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25vIHRhcGVkb3ducywgcHJvY2VlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgRGVsZXRlTW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLk9QO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXCJPYmplY3RpdmUgUG9pbnRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBEZWxldGVNb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChvcFRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBPQkpFQ1RJVkVfUE9JTlQuZGVsZXRlKHsgaWQ6IG9wVG9SZW1vdmUub2JqZWN0aXZlX3BvaW50X2lkIH0sIG9wVG9SZW1vdmUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5PUEZpbGVzID0gW107IC8vY2xlYXIgb3V0IGh3bUZpbGVzIGZvciB0aGlzIGh3bVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcEltYWdlRmlsZXMgPSBbXTsgLy9jbGVhciBvdXQgaW1hZ2UgZmlsZXMgZm9yIHRoaXMgaHdtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9ub3cgcmVtb3ZlIGFsbCB0aGVzZSBmaWxlcyBmcm9tIFNpdGVGaWxlc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsID0gJHNjb3BlLmFsbFNGaWxlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2hpbGUgKGwtLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFsbFNGaWxlc1tsXS5vYmplY3RpdmVfcG9pbnRfaWQgPT0gb3BUb1JlbW92ZS5vYmplY3RpdmVfcG9pbnRfaWQpICRzY29wZS5hbGxTRmlsZXMuc3BsaWNlKGwsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkRhdHVtIExvY2F0aW9uIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbmRCYWNrID0gW1wiZGVcIiwgJ2RlbGV0ZWQnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZW5kQmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgZWxzZSAocHJvY2VlZCB3aXRoIGRlbGV0ZSlcclxuICAgICAgICAgICAgICAgIH0pOyAvL2VuZCBnZXQgb3BtZWFzdXJlbWVudHNcclxuICAgICAgICAgICAgfTsgLy9lbmQgZGVsZXRlXHJcblxyXG4gICAgICAgICAgICAvL2xhdCBtb2RhbCBcclxuICAgICAgICAgICAgdmFyIG9wZW5MYXRNb2RhbCA9IGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGF0TW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBMYXRpdHVkZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNzMuMDwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGxhdE1vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChmaWVsZEZvY3VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHcgPT0gJ2xhdGxvbmcnKSAkKFwiI2xhdGl0dWRlX2RkXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSAkKFwiI0xhRGVnXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vbG9uZyBtb2RhbFxyXG4gICAgICAgICAgICB2YXIgb3BlbkxvbmdNb2RhbCA9IGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbG9uZ01vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGUgTG9uZ2l0dWRlIG11c3QgYmUgYmV0d2VlbiAtMTc1LjAgYW5kIC02MC4wPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgbG9uZ01vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChmaWVsZEZvY3VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHcgPT0gJ2xhdGxvbmcnKSAkKFwiI2xvbmdpdHVkZV9kZFwiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgJChcIiNMb0RlZ1wiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL21ha2Ugc3VyZSBsYXQvbG9uZyBhcmUgcmlnaHQgbnVtYmVyIHJhbmdlXHJcbiAgICAgICAgICAgICRzY29wZS5jaGVja1ZhbHVlID0gZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkID09ICdkbXMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jaGVjayB0aGUgZGVncmVlIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ETVMuTEFEZWcgPCAwIHx8ICRzY29wZS5ETVMuTEFEZWcgPiA3Mykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuTGF0TW9kYWwoJ2RtcycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MT0RlZyA8IC0xNzUgfHwgJHNjb3BlLkRNUy5MT0RlZyA+IC02MCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuTG9uZ01vZGFsKCdkbXMnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgdGhlIGxhdGl0dWRlL2xvbmdpdHVkZVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBvcCA9ICRzY29wZS52aWV3Lk9QdmFsID09ICdlZGl0JyA/ICRzY29wZS5vcENvcHkgOiAkc2NvcGUuT1A7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wLmxhdGl0dWRlX2RkIDwgMCB8fCBvcC5sYXRpdHVkZV9kZCA+IDczKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5MYXRNb2RhbCgnbGF0bG9uZycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3AubG9uZ2l0dWRlX2RkIDwgLTE3NSB8fCBvcC5sb25naXR1ZGVfZGQgPiAtNjApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BlbkxvbmdNb2RhbCgnbGF0bG9uZycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vZWRpdCBidXR0b24gY2xpY2tlZC4gbWFrZSBjb3B5IG9mIGh3bSBcclxuICAgICAgICAgICAgJHNjb3BlLndhbm5hRWRpdE9QID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZpZXcuT1B2YWwgPSAnZWRpdCc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUub3BDb3B5ID0gYW5ndWxhci5jb3B5KCRzY29wZS5PUCk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUub3BDb3B5LmRlY0RlZ09SZG1zID0gJ2RkJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZGRlZElkZW50aWZpZXJzQ29weSA9IGFuZ3VsYXIuY29weSgkc2NvcGUuYWRkZWRJZGVudGlmaWVycyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWxPUEVkaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudmlldy5PUHZhbCA9ICdkZXRhaWwnO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm9wQ29weSA9IFtdOyAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgIH1dKTsvL2VuZCBPUG1vZGFsQ3RybFxyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgLyogY29udHJvbGxlcnMuanMsICdsZWFmbGV0LWRpcmVjdGl2ZScndWkudW5pcXVlJywnbmdUYWdzSW5wdXQnLCovXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFNUTkNvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NUTkNvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgU1ROQ29udHJvbGxlcnMuY29udHJvbGxlcignb2JqZWN0aXZlUG9pbnRDdHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckbG9jYXRpb24nLCAnJHN0YXRlJywgJyRodHRwJywgJyR1aWJNb2RhbCcsICckZmlsdGVyJywgJyR0aW1lb3V0JywgJ09CSkVDVElWRV9QT0lOVCcsICdNRU1CRVInLCAndGhpc1NpdGUnLCAndGhpc1NpdGVPUHMnLCAnYWxsT1BUeXBlcycsICdhbGxIb3JEYXR1bXMnLCAnYWxsSG9yQ29sbE1ldGhvZHMnLCAnYWxsVmVydERhdHVtcycsICdhbGxWZXJ0Q29sTWV0aG9kcycsICdhbGxPUFF1YWxpdGllcycsICdhbGxGaWxlVHlwZXMnLCAnYWxsQWdlbmNpZXMnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRjb29raWVzLCAkbG9jYXRpb24sICRzdGF0ZSwgJGh0dHAsICR1aWJNb2RhbCwgJGZpbHRlciwgJHRpbWVvdXQsIE9CSkVDVElWRV9QT0lOVCwgTUVNQkVSLCB0aGlzU2l0ZSwgdGhpc1NpdGVPUHMsIGFsbE9QVHlwZXMsIGFsbEhvckRhdHVtcywgYWxsSG9yQ29sbE1ldGhvZHMsIGFsbFZlcnREYXR1bXMsIGFsbFZlcnRDb2xNZXRob2RzLCBhbGxPUFF1YWxpdGllcywgYWxsRmlsZVR5cGVzLCBhbGxBZ2VuY2llcykge1xyXG4gICAgICAgICAgICBpZiAoJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSB1bmRlZmluZWQgfHwgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYXV0aCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy9nbG9iYWwgdmFyc1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm9wQ291bnQgPSB7IHRvdGFsOiB0aGlzU2l0ZU9Qcy5sZW5ndGggfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5TaXRlT2JqZWN0aXZlUG9pbnRzID0gdGhpc1NpdGVPUHM7XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dPUE1vZGFsID0gZnVuY3Rpb24gKE9QY2xpY2tlZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5vcEZpbGVUeXBlcyA9IGFsbEZpbGVUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKG9mdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2Z0LmZpbGV0eXBlID09PSAnUGhvdG8nIHx8IG9mdC5maWxldHlwZSA9PT0gJ0ZpZWxkIFNoZWV0cycgfHwgb2Z0LmZpbGV0eXBlID09PSAnTGV2ZWwgTm90ZXMnIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZnQuZmlsZXR5cGUgPT09ICdPdGhlcicgfHwgb2Z0LmZpbGV0eXBlID09PSAnTkdTIERhdGFzaGVldCcgfHwgb2Z0LmZpbGV0eXBlID09PSAnU2tldGNoJztcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcGFzc0FsbExpc3RzID0gW2FsbE9QVHlwZXMsIGFsbEhvckRhdHVtcywgYWxsSG9yQ29sbE1ldGhvZHMsIGFsbFZlcnREYXR1bXMsIGFsbFZlcnRDb2xNZXRob2RzLCBhbGxPUFF1YWxpdGllcywgJHNjb3BlLm9wRmlsZVR5cGVzXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXhDbGlja2VkID0gJHNjb3BlLlNpdGVPYmplY3RpdmVQb2ludHMuaW5kZXhPZihPUGNsaWNrZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcgPSB7IHNob3dMb2FkaW5nOiB0cnVlIH07IC8vTG9hZGluZy4uLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmwgOiAnT1Btb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ09QbW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ2xnJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvd0NsYXNzOiAncmVwLWRpYWxvZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbERyb3Bkb3duczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBwYXNzQWxsTGlzdHM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc09QOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIE9QY2xpY2tlZCAhPT0gMCA/IE9QY2xpY2tlZDogXCJlbXB0eVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNPUENvbnRyb2xzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKE9QY2xpY2tlZCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gT0JKRUNUSVZFX1BPSU5ULmdldE9QQ29udHJvbHMoe2lkOiBPUGNsaWNrZWQub2JqZWN0aXZlX3BvaW50X2lkfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wU2l0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzU2l0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZ2VuY3lMaXN0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFsbEFnZW5jaWVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbE1lbWJlcnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNRU1CRVIuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoY3JlYXRlZE9QKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaXMgdGhlcmUgYSBuZXcgb3Agb3IganVzdCBjbG9zZWQgbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZyA9IHsgc2hvd0xvYWRpbmc6IGZhbHNlIH07IC8vTG9hZGluZy4uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXRlZE9QICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcmVhdGVkT1BbMV0gPT0gJ2NyZWF0ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVPYmplY3RpdmVQb2ludHMucHVzaChjcmVhdGVkT1BbMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcENvdW50LnRvdGFsID0gJHNjb3BlLlNpdGVPYmplY3RpdmVQb2ludHMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZWRPUFsxXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90aGlzIGlzIGZyb20gZWRpdCAtLSByZWZyZXNoIHBhZ2U/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy91cGRhdGUgdGhlIGxpc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaUNsaWNrZWQgPSAkc2NvcGUuU2l0ZU9iamVjdGl2ZVBvaW50cy5pbmRleE9mKE9QY2xpY2tlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVPYmplY3RpdmVQb2ludHNbaUNsaWNrZWRdID0gY3JlYXRlZE9QO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcmVhdGVkT1BbMV0gPT0gJ2RlbGV0ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4Q2xpY2tlZDEgPSAkc2NvcGUuU2l0ZU9iamVjdGl2ZVBvaW50cy5pbmRleE9mKE9QY2xpY2tlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVPYmplY3RpdmVQb2ludHMuc3BsaWNlKGluZGV4Q2xpY2tlZDEsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vcENvdW50LnRvdGFsID0gJHNjb3BlLlNpdGVPYmplY3RpdmVQb2ludHMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfV0pO1xyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFNldHRpbmdzQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU2V0dGluZ3NDb250cm9sbGVycycpO1xyXG5cclxuICAgIFNldHRpbmdzQ29udHJvbGxlcnMuY29udHJvbGxlcignbWVtYmVyTW9kYWxDdHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckaHR0cCcsICckdWliTW9kYWwnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCAnJGZpbHRlcicsICckc2NlJywgJ3JvbGVMaXN0JywgJ2FnZW5jeUxpc3QnLCAndGhpc01lbWJlcicsICdNRU1CRVInLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRjb29raWVzLCAkaHR0cCwgJHVpYk1vZGFsLCAkdWliTW9kYWxJbnN0YW5jZSwgJGZpbHRlciwgJHNjZSwgcm9sZUxpc3QsIGFnZW5jeUxpc3QsIHRoaXNNZW1iZXIsIE1FTUJFUikge1xyXG4gICAgICAgICAgICAvL2FsbCB0aGluZ3MgYm90aCBuZXcgYW5kIGV4aXN0aW5nIG1lbWJlciBwYWdlIHdpbGwgbmVlZFxyXG4gICAgICAgICAgICAkc2NvcGUuYU1lbWJlciA9IHt9OyAvL2hvbGRlciBmb3IgbWVtYmVyIChlaXRoZXIgY29taW5nIGluIGZvciBlZGl0LCBvciBiZWluZyBjcmVhdGVkIGZvciBwb3N0XHJcbiAgICAgICAgICAgICRzY29wZS5tYXRjaGluZ1VzZXJzID0gdHJ1ZTtcclxuICAgICAgICAgICAgJHNjb3BlLnVzZXJuYW1lVG9vbHRpcCA9ICRzY2UudHJ1c3RBc0h0bWwoJ0FjdGl2ZSBEaXJlY3RvcnkgdXNlciBJRC4gaWU6IFxcJ21wZXBwbGVyXFwnIG5vdCBcXCdtcGVwcGxlckB1c2dzLmdvdlxcJy4nKTtcclxuICAgICAgICAgICAgJHNjb3BlLmFnZW5jeUxpc3QgPSBhZ2VuY3lMaXN0O1xyXG4gICAgICAgICAgICAkc2NvcGUucGFzcyA9IHtcclxuICAgICAgICAgICAgICAgIG5ld1A6ICcnLFxyXG4gICAgICAgICAgICAgICAgY29uZmlybVA6ICcnXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRzY29wZS5uZXdQYXNzID0gXCJcIjtcclxuICAgICAgICAgICAgLy9wb3B1bGF0ZSByb2xlcyBiYXNlZCBvbiB3aG8ncyBsb2dnZWQgaW5cclxuICAgICAgICAgICAgJHNjb3BlLmxvZ2dlZEluVXNlciA9IHt9O1xyXG4gICAgICAgICAgICAkc2NvcGUubG9nZ2VkSW5Vc2VyLk5hbWUgPSAkY29va2llcy5nZXQoJ3VzZXJzTmFtZScpOyAvL1VzZXIncyBOQU1FXHJcbiAgICAgICAgICAgICRzY29wZS5sb2dnZWRJblVzZXIuSUQgPSAkY29va2llcy5nZXQoJ21JRCcpO1xyXG4gICAgICAgICAgICAkc2NvcGUubG9nZ2VkSW5Vc2VyLlJvbGUgPSAkY29va2llcy5nZXQoJ3VzZXJzUm9sZScpO1xyXG5cclxuICAgICAgICAgICAgLy9wb3B1bGF0ZSByb2xlIGxpc3QgYmFzZWQgb24gd2hvJ3MgbG9nZ2VkIGluIChhZG1pbiBjYW4gYXNzaWduIG1hbmFnZXIgb3IgZmllbGQsIG1hbmFnZXIgY2FuIG9ubHkgYXNzaWduIGZpZWxkXHJcbiAgICAgICAgICAgIHN3aXRjaCAoJHNjb3BlLmxvZ2dlZEluVXNlci5Sb2xlKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdBZG1pbic6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnJvbGVMaXN0ID0gcm9sZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnJvbGVfaWQgPD0gMzsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdNYW5hZ2VyJzpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUucm9sZUxpc3QgPSByb2xlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHIpIHsgcmV0dXJuIHIucm9sZV9pZCA9PSAzOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL2lzIHRoaXMgY3JlYXRpbmcgbmV3IG1lbWJlciBvciBlZGl0aW5nIGV4aXN0aW5nP1xyXG4gICAgICAgICAgICBpZiAodGhpc01lbWJlciAhPSBcImVtcHR5XCIpIHtcclxuICAgICAgICAgICAgICAgIC8vY2hlY2sgdG8gc2VlIGlmIHRoZSBhY2N0IFVzZXIgaXMgdGhlIHNhbWUgYXMgdGhlIHVzZXIgdGhleSBhcmUgbG9va2luZyBhdFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm1hdGNoaW5nVXNlcnMgPSB0aGlzTWVtYmVyLm1lbWJlcl9pZCA9PSAkc2NvcGUubG9nZ2VkSW5Vc2VyLklEID8gdHJ1ZSA6IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5hTWVtYmVyID0gYW5ndWxhci5jb3B5KHRoaXNNZW1iZXIpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFNZW1iZXIuUm9sZSA9IHJvbGVMaXN0LmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gci5yb2xlX2lkID09ICRzY29wZS5hTWVtYmVyLnJvbGVfaWQ7IH0pWzBdLnJvbGVfbmFtZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jaGFuZ2VQYXNzID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvL3Bhc3N3b3JkIHVwZGF0ZSBzZWN0aW9uXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY2hhbmdlTXlQYXNzQnRuID0gZnVuY3Rpb24gKGV2dCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jaGFuZ2VQYXNzID09PSBmYWxzZSA/ICRzY29wZS5jaGFuZ2VQYXNzID0gdHJ1ZSA6ICRzY29wZS5jaGFuZ2VQYXNzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuRG9udENoYW5nZVBhc3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9uZXZlcm1pbmQsICBjbGVhciBpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jaGFuZ2VQYXNzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICB9IC8vZW5kIGV4aXN0aW5nIG1tZWJlciBlZGl0XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy9uZXcgbWVtYmVyIGJlaW5nIGNyZWF0ZWQuLiBcclxuICAgICAgICAgICAgICAgICRzY29wZS5hTWVtYmVyID0ge307XHJcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGVyZSdzIG9ubHkgMSBpbiB0aGUgcm9sZUxpc3QsIHRoZW4gdGhpcyBtZW1iZXIgaXMgYSBmaWVsZCBwZXJzb25cclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUucm9sZUxpc3QubGVuZ3RoID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFNZW1iZXIucm9sZV9pZCA9ICRzY29wZS5yb2xlTGlzdFswXS5yb2xlX2lkO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuY3JlYXRlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hTWVtYmVyLnBhc3N3b3JkID0gYnRvYSgkc2NvcGUucGFzcy5jb25maXJtUCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNyZWF0ZWRNZW1iZXIgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBNRU1CRVIuc2F2ZSgkc2NvcGUuYU1lbWJlciwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIk1lbWJlciBDcmVhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3B1c2ggdGhpcyBuZXcgbWVtYmVyIGludG8gdGhlIG1lbWJlckxpc3QgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZE1lbWJlciA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWcgPSAkc2NvcGUuYWdlbmN5TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuYWdlbmN5X2lkID09IHJlc3BvbnNlLmFnZW5jeV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBybyA9IHJvbGVMaXN0LmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gci5yb2xlX2lkID09IHJlc3BvbnNlLnJvbGVfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkTWVtYmVyLkFnZW5jeSA9IGFnLmFnZW5jeV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkTWVtYmVyLlJvbGUgPSByby5yb2xlX25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLm1lbWJlckxpc3QucHVzaChubSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBjcmVhdGluZyBuZXcgbWVtYmVyOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzZW5kQmFjayA9IFtjcmVhdGVkTWVtYmVyLCAnY3JlYXRlZCddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZW5kQmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07IC8vIGVuZCBjcmVhdGUoKVxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5wYXNzLm5ld1AgIT09IFwiXCIpICRzY29wZS5hTWVtYmVyLnBhc3N3b3JkID0gYnRvYSgkc2NvcGUucGFzcy5uZXdQKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZE1lbWJlciA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmb3JtYXR0ZWRNZW1iZXIgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLmFNZW1iZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBmb3JtYXR0ZWRNZW1iZXIuUm9sZTsgZGVsZXRlIGZvcm1hdHRlZE1lbWJlci5BZ2VuY3k7XHJcbiAgICAgICAgICAgICAgICAgICAgTUVNQkVSLnVwZGF0ZSh7IGlkOiBmb3JtYXR0ZWRNZW1iZXIubWVtYmVyX2lkIH0sIGZvcm1hdHRlZE1lbWJlciwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkTWVtYmVyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhZyA9ICRzY29wZS5hZ2VuY3lMaXN0LmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gcmVzcG9uc2UuYWdlbmN5X2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvID0gcm9sZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnJvbGVfaWQgPT0gcmVzcG9uc2Uucm9sZV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRNZW1iZXIuQWdlbmN5ID0gYWcuYWdlbmN5X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRNZW1iZXIuUm9sZSA9IHJvLnJvbGVfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgaWYgdGhpcyBpcyB0aGUgbWVtYmVyIGxvZ2dlZCBpbiBhbmQgdXBkYXRlIHRoZSBjb29raWVzIGlmIHNvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUubG9nZ2VkSW5Vc2VyLklEID09IHJlc3BvbnNlLm1lbWJlcl9pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hTWVtYmVyLnBhc3N3b3JkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZW5jID0gYnRvYSh1cGRhdGVkTWVtYmVyLnVzZXJuYW1lLmNvbmNhdChcIjpcIiwgJHNjb3BlLnBhc3MubmV3UCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2V0IGV4cGlyYXRpb24gb24gY29va2llc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHBpcmVEYXRlID0gbmV3IERhdGUoKS5hZGRIb3Vycyg4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29va2llcy5wdXQoJ1NUTkNyZWRzJywgZW5jLCB7IGV4cGlyZXM6IGV4cGlyZURhdGUgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb29raWVzLnB1dCgnU1ROVXNlcm5hbWUnLCB1cGRhdGVkTWVtYmVyLnVzZXJuYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1c2Vyc05BTUUgPSB1cGRhdGVkTWVtYmVyLmZuYW1lICsgXCIgXCIgKyB1cGRhdGVkTWVtYmVyLmxuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvb2tpZXMucHV0KCd1c2Vyc05hbWUnLCB1c2Vyc05BTUUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiTWVtYmVyIFVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VuZEJhY2sgPSBbdXBkYXRlZE1lbWJlciwgJ3VwZGF0ZWQnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uoc2VuZEJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3JNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5QbGVhc2UgcG9wdWxhdGUgYWxsIHJlcXVpcmVkIGZpZWxkcy48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTsvL2VuZCBTYXZlXHJcblxyXG4gICAgICAgICAgICAvLyNyZWdpb24gREVMRVRFIE1lbWJlciBjbGlja1xyXG4gICAgICAgICAgICAkc2NvcGUuRGVsZXRlTWVtYmVyID0gZnVuY3Rpb24gKG1lbSkge1xyXG4gICAgICAgICAgICAgICAgLy9tb2RhbFxyXG4gICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTWVtYmVyXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKG1lbVRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9ERUxFVEUgaXRcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIE1FTUJFUi5kZWxldGVNZW1iZXIoeyBpZDogbWVtVG9SZW1vdmUubWVtYmVyX2lkIH0sIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJNZW1iZXIgRGVsZXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKFtcImRlXCIsICdkZWxldGVkJ10pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyNlbmRyZWdpb24gREVMRVRFIE1lbWJlciBjbGlja1xyXG4gICAgICAgICAgICAvL2NhbmNlbCBtb2RhbFxyXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcgPSB7IHNob3dMb2FkaW5nOiBmYWxzZSB9OyAvL0xvYWRpbmcuLi5cclxuICAgICAgICB9XSk7XHJcbn0oKSk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU2V0dGluZ3NDb250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTZXR0aW5nc0NvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgU2V0dGluZ3NDb250cm9sbGVycy5jb250cm9sbGVyKCdtZW1iZXJJbmZvQ3RybCcsIFsnJHNjb3BlJywgJyRjb29raWVzJywgJyRsb2NhdGlvbicsICckaHR0cCcsICckdWliTW9kYWwnLCAnJHN0YXRlUGFyYW1zJywgJyRmaWx0ZXInLCAnJHNjZScsICdhbGxSb2xlcycsICdNRU1CRVInLCAndGhpc01lbWJlcicsIFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRjb29raWVzLCAkbG9jYXRpb24sICRodHRwLCAkdWliTW9kYWwsICRzdGF0ZVBhcmFtcywgJGZpbHRlciwgJHNjZSwgYWxsUm9sZXMsIE1FTUJFUiwgdGhpc01lbWJlcikge1xyXG4gICAgICAgICAgICBpZiAoJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSB1bmRlZmluZWQgfHwgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYXV0aCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy9hbGwgdGhpbmdzIGJvdGggbmV3IGFuZCBleGlzdGluZyBtZW1iZXIgcGFnZSB3aWxsIG5lZWRcclxuICAgICAgICAgICAgICAgICRzY29wZS5hTWVtYmVyID0ge307IC8vaG9sZGVyIGZvciBtZW1iZXIgKGVpdGhlciBjb21pbmcgaW4gZm9yIGVkaXQsIG9yIGJlaW5nIGNyZWF0ZWQgZm9yIHBvc3RcclxuICAgICAgICAgICAgICAgICRzY29wZS5tYXRjaGluZ1VzZXJzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS51c2VybmFtZVRvb2x0aXAgPSAkc2NlLnRydXN0QXNIdG1sKCdBY3RpdmUgRGlyZWN0b3J5IHVzZXIgSUQuIGllOiBcXCdtcGVwcGxlclxcJyBub3QgXFwnbXBlcHBsZXJAdXNncy5nb3ZcXCcuJyk7XHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gREVMRVRFIE1lbWJlciBjbGlja1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkRlbGV0ZU1lbWJlciA9IGZ1bmN0aW9uIChtZW0pIHtcclxuICAgICAgICAgICAgICAgICAgICAvL21vZGFsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1lbTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aGF0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiTWVtYmVyXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChuYW1lVG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy95ZXMsIHJlbW92ZSB0aGlzIGtleXdvcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRlc3Q7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vREVMRVRFIGl0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE1FTUJFUi5kZWxldGVNZW1iZXIoeyBpZDogbmFtZVRvUmVtb3ZlLm1lbWJlcl9pZCB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZGVsTWVtID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxNZW0ubWVtYmVyX2lkID0gbmFtZVRvUmVtb3ZlLm1lbWJlcl9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlbE1lbS5OYW1lID0gbmFtZVRvUmVtb3ZlLmZuYW1lICsgXCIgXCIgKyBuYW1lVG9SZW1vdmUubG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWcgPSAkc2NvcGUuYWdlbmN5TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuYWdlbmN5X2lkID09IG5hbWVUb1JlbW92ZS5hZ2VuY3lfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvID0gYWxsUm9sZXMuZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnJvbGVfaWQgPT0gbmFtZVRvUmVtb3ZlLnJvbGVfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsTWVtLkFnZW5jeSA9IGFnLmFnZW5jeV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVsTWVtLlJvbGUgPSByby5yb2xlX25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVtYmVyTGlzdC5zcGxpY2UoJHNjb3BlLm1lbWJlckxpc3QuaW5kZXhPZihkZWxNZW0pLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiTWVtYmVyIERlbGV0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9NZW1iZXJzL01lbWJlcnNMaXN0JykucmVwbGFjZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBERUxFVEUgTWVtYmVyIGNsaWNrXHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnBhc3MgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbmV3UDogJycsXHJcbiAgICAgICAgICAgICAgICAgICAgY29uZmlybVA6ICcnXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm5ld1Bhc3MgPSBcIlwiO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vaXMgdGhpcyBjcmVhdGluZyBuZXcgbWVtYmVyIG9yIGVkaXRpbmcgZXhpc3Rpbmc/XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpc01lbWJlciAhPT0gdW5kZWZpbmVkKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgdG8gc2VlIGlmIHRoZSBhY2N0IFVzZXIgaXMgdGhlIHNhbWUgYXMgdGhlIHVzZXIgdGhleSBhcmUgbG9va2luZyBhdFxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXRjaGluZ1VzZXJzID0gJHN0YXRlUGFyYW1zLmlkID09ICRzY29wZS5sb2dnZWRJblVzZXIuSUQgPyB0cnVlIDogZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hTWVtYmVyID0gdGhpc01lbWJlcjtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYU1lbWJlci5Sb2xlID0gYWxsUm9sZXMuZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnJvbGVfaWQgPT0gJHNjb3BlLmFNZW1iZXIucm9sZV9pZDsgfSlbMF0ucm9sZV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jaGFuZ2VQYXNzID0gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vY2hhbmdlIHRvIHRoZSB1c2VyIG1hZGUsIHB1dCBpdCAuLiBmaXJlZCBvbiBlYWNoIGJsdXIgYWZ0ZXIgY2hhbmdlIG1hZGUgdG8gZmllbGRcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2F2ZU9uQmx1ciA9IGZ1bmN0aW9uICh2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2Vuc3VyZSB0aGV5IGRvbid0IGRlbGV0ZSByZXF1aXJlZCBmaWVsZCB2YWx1ZXMgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1FTUJFUi51cGRhdGUoeyBpZDogJHNjb3BlLmFNZW1iZXIubWVtYmVyX2lkIH0sICRzY29wZS5hTWVtYmVyLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJNZW1iZXIgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXJyb3JNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+UGxlYXNlIHBvcHVsYXRlIGFsbCByZXF1aXJlZCBmaWVsZHMuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjpbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9Oy8vZW5kIFNhdmVPbkJsdXJcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9wYXNzd29yZCB1cGRhdGUgc2VjdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jaGFuZ2VNeVBhc3NCdG4gPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jaGFuZ2VQYXNzID09PSBmYWxzZSA/ICRzY29wZS5jaGFuZ2VQYXNzID0gdHJ1ZSA6ICRzY29wZS5jaGFuZ2VQYXNzID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkNoYW5nZVBhc3N3b3JkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NoYW5nZSBVc2VyJ3MgcGFzc3dvcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5wYXNzLm5ld1AgPT09IFwiXCIgfHwgJHNjb3BlLnBhc3MuY29uZmlybVAgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlcnJvck1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5Zb3UgbXVzdCBmaXJzdCBlbnRlciBhIG5ldyBwYXNzd29yZC48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOlsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1FTUJFUi5jaGFuZ2VQVyh7IHVzZXJuYW1lOiAkc2NvcGUuYU1lbWJlci51c2VybmFtZSwgbmV3UGFzczogJHNjb3BlLnBhc3MubmV3UCB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJQYXNzd29yZCBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZSBjcmVkcyBPTkxZIElGIHVzZXIgbG9nZ2VkIGluIGlzID09IHRoaXMgdXBkYXRpbmcgbWVtYmVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYU1lbWJlci5tZW1iZXJfaWQgPT0gJHNjb3BlLmxvZ2dlZEluVXNlci5tZW1iZXJfaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbmMgPSBidG9hKCRzY29wZS5hTWVtYmVyLnVzZXJuYW1lLmNvbmNhdChcIjpcIiwgJHNjb3BlLnBhc3MubmV3UCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvb2tpZXMucHV0KCdTVE5DcmVkcycsIGVuYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkY29va2llcy5wdXQoJ1NUTlVzZXJuYW1lJywgJHNjb3BlLmFNZW1iZXIudXNlcm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvb2tpZXMucHV0KCd1c2Vyc05hbWUnLCAkc2NvcGUubG9nZ2VkSW5Vc2VyLk5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvb2tpZXMucHV0KCdtSUQnLCAkc2NvcGUuYU1lbWJlci5tZW1iZXJfaWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvbGVOYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoICgkc2NvcGUuYU1lbWJlci5yb2xlX2lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlTmFtZSA9IFwiQWRtaW5cIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlTmFtZSA9IFwiTWFuYWdlclwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGVOYW1lID0gXCJGaWVsZFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGVOYW1lID0gXCJQdWJsaWNcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZU5hbWUgPSBcIkNpdGl6ZW5NYW5hZ2VyXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvb2tpZXMucHV0KCd1c2Vyc1JvbGUnLCByb2xlTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNoYW5nZVBhc3MgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnBhc3MubmV3UCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGFzcy5jb25maXJtUCA9ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9OyAvL2VuZCBDaGFuZ2VQYXNzd29yZCgpXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5Eb250Q2hhbmdlUGFzcyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9uZXZlcm1pbmQsICBjbGVhciBpbnB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY2hhbmdlUGFzcyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICB9IC8vZW5kIG9mICRzdGF0ZVBhcmFtcyA+IDAgKGV4aXN0aW5nKVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy90aGlzIGlzIGEgbmV3IG1lbWJlciBiZWluZyBjcmVhdGVkXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTUVNQkVSLmFkZE1lbWJlcih7IHBhc3M6ICRzY29wZS5wYXNzLmNvbmZpcm1QIH0sICRzY29wZS5hTWVtYmVyLCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJNZW1iZXIgQ3JlYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3B1c2ggdGhpcyBuZXcgbWVtYmVyIGludG8gdGhlIG1lbWJlckxpc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbm0gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBubS5tZW1iZXJfaWQgPSByZXNwb25zZS5tZW1iZXJfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm0uTmFtZSA9IHJlc3BvbnNlLmZuYW1lICsgXCIgXCIgKyByZXNwb25zZS5sbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWcgPSAkc2NvcGUuYWdlbmN5TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuYWdlbmN5X2lkID09IHJlc3BvbnNlLmFnZW5jeV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJvID0gYWxsUm9sZXMuZmlsdGVyKGZ1bmN0aW9uIChyKSB7IHJldHVybiByLnJvbGVfaWQgPT0gcmVzcG9uc2Uucm9sZV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm0uQWdlbmN5ID0gYWcuYWdlbmN5X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm0uUm9sZSA9IHJvLnJvbGVfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWVtYmVyTGlzdC5wdXNoKG5tKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvTWVtYmVycy9NZW1iZXJzTGlzdCcpLnJlcGxhY2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH07IC8vIGVuZCBzYXZlKClcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1dKTtcclxufSgpKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBTZXR0aW5nc0NvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NldHRpbmdzQ29udHJvbGxlcnMnKTtcclxuXHJcbiAgICBTZXR0aW5nc0NvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ21lbWJlckN0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRjb29raWVzJywgJyRsb2NhdGlvbicsICckaHR0cCcsICckZmlsdGVyJywgJyR1aWJNb2RhbCcsICdNRU1CRVInLCAnYWxsUm9sZXMnLCAnYWxsQWdlbmNpZXMnLCAndXNlclByb2ZpbGVJZCcsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICRsb2NhdGlvbiwgJGh0dHAsICRmaWx0ZXIsICR1aWJNb2RhbCwgTUVNQkVSLCBhbGxSb2xlcywgYWxsQWdlbmNpZXMsIHVzZXJQcm9maWxlSWQpIHtcclxuICAgICAgICAgICAgaWYgKCRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gdW5kZWZpbmVkIHx8ICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmF1dGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbG9naW4nKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vYWxsIHRoaW5ncyBib3RoIG5ldyBhbmQgZXhpc3RpbmcgbWVtYmVyIHBhZ2Ugd2lsbCBuZWVkXHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnRoaXNQYWdlID0gXCJTZXR0aW5ncy9NZW1iZXJzXCI7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy8gY2hhbmdlIHNvcnRpbmcgb3JkZXJcclxuICAgICAgICAgICAgICAgICRzY29wZS5zb3J0X2J5ID0gZnVuY3Rpb24gKG5ld1NvcnRpbmdPcmRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuc29ydGluZ09yZGVyID09IG5ld1NvcnRpbmdPcmRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmV2ZXJzZSA9ICEkc2NvcGUucmV2ZXJzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNvcnRpbmdPcmRlciA9IG5ld1NvcnRpbmdPcmRlcjtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpY29uIHNldHVwXHJcbiAgICAgICAgICAgICAgICAgICAgJCgndGggaScpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpY29uIHJlc2V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoKS5hZGRDbGFzcygnZ2x5cGhpY29uIGdseXBoaWNvbi1zb3J0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5yZXZlcnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJ3RoLicgKyBuZXdTb3J0aW5nT3JkZXIgKyAnIGknKS5yZW1vdmVDbGFzcygpLmFkZENsYXNzKCdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tdXAnKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCd0aC4nICsgbmV3U29ydGluZ09yZGVyICsgJyBpJykucmVtb3ZlQ2xhc3MoKS5hZGRDbGFzcygnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWRvd24nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vY3JlYXRlL3ZpZXcgbWVtYmVyIHdhcyBjbGlja2VkXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd01lbWJlck1vZGFsID0gZnVuY3Rpb24gKG1lbWJlckNsaWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXhDbGlja2VkID0gJHNjb3BlLm1lbWJlckxpc3QuaW5kZXhPZihtZW1iZXJDbGlja2VkKTtcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nID0geyBzaG93TG9hZGluZzogdHJ1ZSB9OyAvL0xvYWRpbmcuLi5cclxuICAgICAgICAgICAgICAgICAgICAvL21vZGFsXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnbWVtYmVyTW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdtZW1iZXJNb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnbGcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Q2xhc3M6ICdyZXAtZGlhbG9nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpc01lbWJlcjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtZW1iZXJDbGlja2VkICE9PSAwID8gbWVtYmVyQ2xpY2tlZCA6IFwiZW1wdHlcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZ2VuY3lMaXN0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFsbEFnZW5jaWVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGVMaXN0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGFsbFJvbGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoY3JlYXRlZE1lbWJlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2lzIHRoZXJlIGEgbmV3IG9wIG9yIGp1c3QgY2xvc2VkIG1vZGFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcgPSB7IHNob3dMb2FkaW5nOiBmYWxzZSB9OyAvL0xvYWRpbmcuLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZWRNZW1iZXIgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZWRNZW1iZXJbMV0gPT0gJ2NyZWF0ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1lbWJlckxpc3QucHVzaChjcmVhdGVkTWVtYmVyWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcmVhdGVkTWVtYmVyWzFdID09PSAndXBkYXRlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZSB0aGUgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tZW1iZXJMaXN0W2luZGV4Q2xpY2tlZF0gPSBjcmVhdGVkTWVtYmVyWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZWRNZW1iZXJbMV0gPT0gJ2RlbGV0ZWQnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2YXIgaW5kZXhDbGlja2VkMSA9ICRzY29wZS5tZW1iZXJMaXN0LmluZGV4T2YoY3JlYXRlZE1lbWJlclswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1lbWJlckxpc3Quc3BsaWNlKGluZGV4Q2xpY2tlZCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWdlbmN5TGlzdCA9IGFsbEFnZW5jaWVzO1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgTUVNQkVSLmdldEFsbCgpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1lbWJlckxpc3QgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IHJlc3BvbnNlLmxlbmd0aDsgeCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlYWNoTSA9IHJlc3BvbnNlW3hdOyAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWcgPSAkc2NvcGUuYWdlbmN5TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuYWdlbmN5X2lkID09IHJlc3BvbnNlW3hdLmFnZW5jeV9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBybyA9IGFsbFJvbGVzLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gci5yb2xlX2lkID09IHJlc3BvbnNlW3hdLnJvbGVfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlYWNoTS5BZ2VuY3kgPSBhZy5hZ2VuY3lfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZWFjaE0uUm9sZSA9IHJvLnJvbGVfbmFtZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tZW1iZXJMaXN0LnB1c2goZWFjaE0pO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvL2lmIHNvbWVvbmUgY2xpY2tlZCBvbiB0aGVpciBuYW1lIGluIHRoZSB1cHBlciByaWdodCBjb3JuZXIsIGNvbWUgaW4gYW5kIHN0cmFpZ2h0IGF3YXkgb3BlbiBtb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh1c2VyUHJvZmlsZUlkICE9PSB1bmRlZmluZWQgJiYgdXNlclByb2ZpbGVJZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBNRU1CRVIucXVlcnkoeyBpZDogdXNlclByb2ZpbGVJZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd01lbWJlck1vZGFsKHJlc3ApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1dKTtcclxufSgpKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBiZHJhcGVyIG9uIDMvOS8yMDE2LlxyXG4gKi9cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHZhciBTVE5Db250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTVE5Db250cm9sbGVycycpO1xyXG5cclxuICAgIFNUTkNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ01hcFNpdGVJbmZvQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRodHRwJywgJyRyb290U2NvcGUnLCAnJGNvb2tpZXMnLCAnJGxvY2F0aW9uJywgJ1NJVEUnLCAnbGVhZmxldE1hcmtlckV2ZW50cycsICdsZWFmbGV0Qm91bmRzSGVscGVycycsICckc3RhdGUnLCAnc3Bpbm5lclNlcnZpY2UnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCAkcm9vdFNjb3BlLCAkY29va2llcywgJGxvY2F0aW9uLCBTSVRFLCAgbGVhZmxldE1hcmtlckV2ZW50cywgbGVhZmxldEJvdW5kc0hlbHBlcnMsICRzdGF0ZSwgc3Bpbm5lclNlcnZpY2UpIHtcclxuICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHsgc2l0ZU9wZW46IHRydWUgfTsgLy9hY2NvcmRpb24gZm9yIHNpdGVJbmZvXHJcbiAgICAgICAgICAgICRyb290U2NvcGUuJG9uKCdtYXBTaXRlQ2xpY2tSZXN1bHRzJywgZnVuY3Rpb24gKGV2ZW50LCBzaXRlUGFydHMpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZSA9IHNpdGVQYXJ0c1swXTtcclxuICAgICAgICAgICAgICAgIC8vb25seSA2IGRlY2ltYWwgcGxhY2VzIGZvciBsYXQvbG9uZ1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZCA9IHBhcnNlRmxvYXQoJHNjb3BlLmFTaXRlLmxhdGl0dWRlX2RkLnRvRml4ZWQoNikpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLmxvbmdpdHVkZV9kZCA9IHBhcnNlRmxvYXQoJHNjb3BlLmFTaXRlLmxvbmdpdHVkZV9kZC50b0ZpeGVkKDYpKTtcclxuICAgICAgICAgICAgICAgIHNwaW5uZXJTZXJ2aWNlLmhpZGUoXCJzaXRlSW5mb1NwaW5uZXJcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmdvVG9TaXRlRGFzaGJvYXJkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdzaXRlLmRhc2hib2FyZCcsIHsgaWQ6ICRzY29wZS5hU2l0ZS5zaXRlX2lkIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1dKTsvL2VuZCBjb250cm9sbGVyIGZ1bmN0aW9uXHJcbn0pKCk7XHJcbiIsIi8qKlxyXG4gKiBDcmVhdGVkIGJ5IGJkcmFwZXIgb24gMy85LzIwMTYuXHJcbiAqL1xyXG4oZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgdmFyIFNUTkNvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NUTkNvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgU1ROQ29udHJvbGxlcnMuY29udHJvbGxlcignTWFwU2Vuc29yUHJvcG9zZUNvbnRyb2xsZXInLCBbJyRzY29wZScsICckaHR0cCcsICckdGltZW91dCcsICckcm9vdFNjb3BlJywgJyRjb29raWVzJywgJyRsb2NhdGlvbicsICdTSVRFJywgJ0lOU1RSVU1FTlQnLCAnSU5TVFJVTUVOVF9TVEFUVVMnLCAnYWxsRGVwbG95VHlwZXMnLCAnYWxsU2Vuc0RlcHMnLCAnbGVhZmxldE1hcmtlckV2ZW50cycsICdsZWFmbGV0Qm91bmRzSGVscGVycycsICckc3RhdGUnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCAkdGltZW91dCwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICRsb2NhdGlvbiwgU0lURSwgSU5TVFJVTUVOVCwgSU5TVFJVTUVOVF9TVEFUVVMsIGFsbERlcGxveVR5cGVzLCBhbGxTZW5zRGVwcywgbGVhZmxldE1hcmtlckV2ZW50cywgbGVhZmxldEJvdW5kc0hlbHBlcnMsICRzdGF0ZSkge1xyXG4gICAgICAgICAgICAvL3doZW4gYSBzaXRlIGlzICBjbGlja2VkLCB0aGlzIHdpbGwgYmUgdHJpZ2dlcmVkIGZyb20gc2VydmljZSB0byBsZXQgdGhpcyBjb250cm9sbGVyIGtub3cgYWJvdXQgaXRcclxuICAgICAgICAgICAgJHJvb3RTY29wZS4kb24oJ21hcFNpdGVDbGlja1Jlc3VsdHMnLCBmdW5jdGlvbiAoZXZlbnQsIHNpdGVQYXJ0cykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnRoaXNTaXRlID0gc2l0ZVBhcnRzWzBdOyAvL2hlcmUncyB0aGUgc2l0ZSB0aGV5IGNsaWNrZWRcclxuICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMuc2Vuc29yT3BlbiA9IGZhbHNlOyAvL21ha2Ugc3VyZSB0aGUgcHJvcG9zZWQgc2Vuc29yIGFjY29yZGlvbiBpcyBjbG9zZWQgc28gdGhleSBoYXZlIHRvIG9wZW4gYW5kIHRyaWdnZXIgdGhlIGdldFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLlByb3Bvc2VkU2Vuc29yczRTaXRlID0gW107IC8vbWFrZSBzdXJlIHRoaXMgaXMgY2xlYXIgaW4gY2FzZSB0aGV5IGFyZSBjbGlja2luZyBvbiBvbmUgc2l0ZSBhZnRlciBhbm90aGVyXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1Byb3Bvc2VkID0gZmFsc2U7IC8vaGlkZSB0aGUgcHJvcG9zZWQgc2Vuc29yIHR5cGUgbGlzdCBpbml0aWFsbHlcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vYWxsIGRlcGxveW1lbnQgdHlwZXNcclxuICAgICAgICAgICAgJHNjb3BlLmRlcGxveVR5cGVMaXN0ID0gYW5ndWxhci5jb3B5KGFsbERlcGxveVR5cGVzKTtcclxuICAgICAgICAgICAgdmFyIHRlbXBEZXBUeXBlSUQgPSAwO1xyXG5cclxuICAgICAgICAgICAgLy9maXggZGVwbG95bWVudCB0eXBlcyBzbyB0aGF0IFwiVGVtcGVyYXR1cmVcIiBiZWNvbWVzIDIgOiBUZW1wZXJhdHVyZSAoTWV0IHNlbnNvciktU2Vuc29yVHlwZToyIGFuZCBUZW1wZXJhdHVyZSAocHJlc3N1cmUgdHJhbnNkdWNlciktU2Vuc29yVHlwZToxIC0tIGp1c3QgZm9yIHByb3Bvc2VkXHJcbiAgICAgICAgICAgIGZvciAodmFyIGQgPSAwOyBkIDwgJHNjb3BlLmRlcGxveVR5cGVMaXN0Lmxlbmd0aDsgZCsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmRlcGxveVR5cGVMaXN0W2RdLm1ldGhvZCA9PT0gXCJUZW1wZXJhdHVyZVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcERlcFR5cGVJRCA9ICRzY29wZS5kZXBsb3lUeXBlTGlzdFtkXS5kZXBsb3ltZW50X3R5cGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRlcGxveVR5cGVMaXN0W2RdLm1ldGhvZCA9IFwiVGVtcGVyYXR1cmUgKE1ldCBzZW5zb3IpXCI7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgJHNjb3BlLmRlcGxveVR5cGVMaXN0LnB1c2goeyBkZXBsb3ltZW50X3R5cGVfaWQ6IHRlbXBEZXBUeXBlSUQsIG1ldGhvZDogXCJUZW1wZXJhdHVyZSAoUHJlc3N1cmUgVHJhbnNkdWNlcilcIiB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vcHJvcG9zZWQgc2Vuc29ycyBhY2NvcmRpb24gd2FzIG9wZW5lZCwgZ28gZ2V0IHRoZW1cclxuICAgICAgICAgICAgJHNjb3BlLmdldFByb3Bvc2VkU2Vuc29ycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIFNJVEUuZ2V0U2l0ZVNlbnNvcnMoeyBpZDogJHNjb3BlLnRoaXNTaXRlLnNpdGVfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoc1Jlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlByb3Bvc2VkU2Vuc29yczRTaXRlID0gc1Jlc3BvbnNlLmZpbHRlcihmdW5jdGlvbiAoc3MpIHsgcmV0dXJuIHNzLmluc3RydW1lbnRfc3RhdHVzWzBdLnN0YXR1c190eXBlX2lkID09IDQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2FsbCBzZW5zb3IgZGVwbG95bWVudHMgKHJlbGF0aW9uc2hpcCB0YWJsZSlcclxuICAgICAgICAgICAgJHNjb3BlLnNlbnNEZXBUeXBlcyA9IGFsbFNlbnNEZXBzO1xyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd1Byb3Bvc2VkID0gZmFsc2U7IC8vdGhleSB3YW50IHRvIGFkZCBhIHByb3Bvc2VkIHNlbnNvciwgb3BlbiBvcHRpb25zIChib29sZWFuIHRvZ2dsZSlcclxuICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHsgc2Vuc29yT3BlbjogZmFsc2UgfTsgLy9hY2NvcmRpb24gb3BlbiBvciBjbG9zZWRcclxuICAgICAgICAgICAgLy9zaG93L2hpZGUgcHJvcG9zZWQgc2Vuc29ycyB0byBhZGRcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dIaWRlUHJvcG9zZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1Byb3Bvc2VkID0gISRzY29wZS5zaG93UHJvcG9zZWQ7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2NhbmNlbCBwcm9wb3NpbmcgYSBzZW5zb3IsIGNsb3NlIHRoZSBsaXN0XHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWxQcm9wb3NpbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd1Byb3Bvc2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vYWRkIHRoZXNlIGNoZWNrZWQgUHJvcG9zZWQgc2Vuc29ycyB0byB0aGlzIHNpdGVcclxuICAgICAgICAgICAgJHNjb3BlLkFkZFByb3Bvc2VkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIFRpbWVfU1RBTVAgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgZHQgPSAwOyBkdCA8ICRzY29wZS5kZXBsb3lUeXBlTGlzdC5sZW5ndGg7IGR0KyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmRlcGxveVR5cGVMaXN0W2R0XS5zZWxlY3RlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcG9zZWRUb0FkZCA9IHt9OyB2YXIgcHJvcFN0YXRUb0FkZCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmRlcGxveVR5cGVMaXN0W2R0XS5tZXRob2Quc3Vic3RyaW5nKDAsIDQpID09IFwiVGVtcFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RlbXBlcmF0dXJlIHByb3Bvc2VkIHNlbnNvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHJvcG9zZWRUb0FkZCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBsb3ltZW50X3R5cGVfaWQ6ICRzY29wZS5kZXBsb3lUeXBlTGlzdFtkdF0uZGVwbG95bWVudF90eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6ICRzY29wZS50aGlzU2l0ZS5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbnNvcl90eXBlX2lkOiAkc2NvcGUuZGVwbG95VHlwZUxpc3RbZHRdLm1ldGhvZCA9PSBcIlRlbXBlcmF0dXJlIChQcmVzc3VyZSBUcmFuc2R1Y2VyKVwiID8gMSA6IDIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9nbyB0aHJvdWdoIHRoZSBuZXcgZnVsbEluc3RydW1lbnQgYW5kIHNlZSBpZiBhbnkgb2YgdGhlIHNlbnNvcidzIGRlcGxveW1lbnR0eXBlcyBhcmUgdGhpcyBkZXBsb3ltZW50IHR5cGUgdG8gc2V0IHRoZSBzZW5zb3JfdHlwZV9pZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNJRCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLnNlbnNEZXBUeXBlcywgZnVuY3Rpb24gKHNkdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgc2R0LmRlcGxveW1lbnR0eXBlcy5sZW5ndGg7IHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2R0LmRlcGxveW1lbnR0eXBlc1t4XS5kZXBsb3ltZW50X3R5cGVfaWQgPT0gJHNjb3BlLmRlcGxveVR5cGVMaXN0W2R0XS5kZXBsb3ltZW50X3R5cGVfaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzSUQgPSBzZHQuc2Vuc29yX3R5cGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2FueSBvdGhlciB0eXBlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wb3NlZFRvQWRkID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlcGxveW1lbnRfdHlwZV9pZDogJHNjb3BlLmRlcGxveVR5cGVMaXN0W2R0XS5kZXBsb3ltZW50X3R5cGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogJHNjb3BlLnRoaXNTaXRlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vuc29yX3R5cGVfaWQ6IHNJRFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBwb3N0IGl0IChJbnN0cnVtZW50IGZpcnN0LCB0aGVuIEluc3RydW1lbnQgU3RhdHVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgSU5TVFJVTUVOVC5zYXZlKHByb3Bvc2VkVG9BZGQpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlZFByb3BTZW5zb3IgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVwbG95bWVudF90eXBlX2lkOiByZXNwb25zZS5kZXBsb3ltZW50X3R5cGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogcmVzcG9uc2Uuc2l0ZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5zb3JfdHlwZV9pZDogcmVzcG9uc2Uuc2Vuc29yX3R5cGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1bWVudF9pZDogcmVzcG9uc2UuaW5zdHJ1bWVudF9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZXBsb3ltZW50VHlwZTogJHNjb3BlLmRlcGxveVR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoZHRsKSB7IHJldHVybiBkdGwuZGVwbG95bWVudF90eXBlX2lkID09IHJlc3BvbnNlLmRlcGxveW1lbnRfdHlwZV9pZDsgfSlbMF0ubWV0aG9kLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbnNvclR5cGU6ICRzY29wZS5zZW5zRGVwVHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnNlbnNvcl90eXBlX2lkID09IHJlc3BvbnNlLnNlbnNvcl90eXBlX2lkO30pWzBdLnNlbnNvclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHByb3BTdGF0VG9BZGQgPSB7IGluc3RydW1lbnRfaWQ6IHJlc3BvbnNlLmluc3RydW1lbnRfaWQsIHN0YXR1c190eXBlX2lkOiA0LCBtZW1iZXJfaWQ6ICRjb29raWVzLmdldCgnbUlEJyksIHRpbWVfc3RhbXA6IFRpbWVfU1RBTVAsIHRpbWVfem9uZTogJ1VUQycsIH07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSU5TVFJVTUVOVF9TVEFUVVMuc2F2ZShwcm9wU3RhdFRvQWRkKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChzdGF0UmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwcm9wU3RhdFRvQWRkLnN0YXR1cyA9ICdQcm9wb3NlZCc7IHByb3BTdGF0VG9BZGQuaW5zdHJ1bWVudF9zdGF0dXNfaWQgPSBzdGF0UmVzcG9uc2UuaW5zdHJ1bWVudF9zdGF0dXNfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFByb3BTZW5zb3IuaW5zdHJ1bWVudF9zdGF0dXMgPSBbcHJvcFN0YXRUb0FkZF07ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5Qcm9wb3NlZFNlbnNvcnM0U2l0ZS5wdXNoKGNyZWF0ZWRQcm9wU2Vuc29yKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NsZWFuIHVwIC4uLmFsbCB1bmNoZWNrZWQgYW5kIHRoZW4gaGlkZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGRlcCA9IDA7IGRlcCA8ICRzY29wZS5kZXBsb3lUeXBlTGlzdC5sZW5ndGg7IGRlcCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZXBsb3lUeXBlTGlzdFtkZXBdLnNlbGVjdGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYW55dGhpbmcgeW91IHdhbnQgY2FuIGdvIGhlcmUgYW5kIHdpbGwgc2FmZWx5IGJlIHJ1biBvbiB0aGUgbmV4dCBkaWdlc3QuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93UHJvcG9zZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJQcm9wb3NlZCBzZW5zb3IgY3JlYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIGNyZWF0aW5nIHByb3Bvc2VkIGluc3RydW1lbnQ6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIElOU1RSVU1FTlRfU1RBVFVTLnNhdmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIGNyZWF0aW5nIHByb3Bvc2VkIGluc3RydW1lbnQ6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7IC8vZW5kIElOU1RSVU1FTlQuc2F2ZVxyXG4gICAgICAgICAgICAgICAgICAgIH0vL2VuZCBpZiBzZWxlY3RlZCA9PSB0cnVlXHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgZm9yZWFjaCBkZXBsb3lUeXBlTGlzdFxyXG4gICAgICAgICAgICB9Oy8vZW5kIEFkZFByb3Bvc2VkKClcclxuXHJcbiAgICAgICAgfV0pOy8vZW5kIGNvbnRyb2xsZXIgZnVuY3Rpb25cclxufSkoKTsiLCIvKipcclxuICogQ3JlYXRlZCBieSBiZHJhcGVyIG9uIDMvOS8yMDE2LlxyXG4gKi9cclxuKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuICAgIHZhciBTVE5Db250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTVE5Db250cm9sbGVycycpO1xyXG5cclxuICAgIFNUTkNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ01hcFBlYWtzQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGh0dHAnLCAnJGNvb2tpZXMnLCAnJGxvY2F0aW9uJywgJ2xlYWZsZXRNYXJrZXJFdmVudHMnLCAnbGVhZmxldEJvdW5kc0hlbHBlcnMnLCAnJHN0YXRlJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkaHR0cCwgJGNvb2tpZXMsICRsb2NhdGlvbiwgbGVhZmxldE1hcmtlckV2ZW50cywgbGVhZmxldEJvdW5kc0hlbHBlcnMsICRzdGF0ZSkge1xyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLiRvbignbWFwU2l0ZUNsaWNrUmVzdWx0cycsIGZ1bmN0aW9uIChldmVudCwgc2l0ZVBhcnRzKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZVBlYWtzID0gW107XHJcbiAgICAgICAgICAgICAgICB2YXIgYWxsU2l0ZVBlYWtzID0gc2l0ZVBhcnRzWzFdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgcCA9IDA7IHAgPCBhbGxTaXRlUGVha3MubGVuZ3RoOyBwKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWxsU2l0ZVBlYWtzW3BdLmV2ZW50X25hbWUgPT0gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJykpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlUGVha3MucHVzaChhbGxTaXRlUGVha3NbcF0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dQZWFrcyA9IHRydWU7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dQZWFrcyA9IGZhbHNlO1xyXG4gICAgICAgIH1dKTsvL2VuZCBjb250cm9sbGVyIGZ1bmN0aW9uXHJcbn0pKCk7IiwiLyoqXHJcbiAqIENyZWF0ZWQgYnkgYmRyYXBlciBvbiA0LzcvMjAxNi5cclxuICovXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcbiAgICB2YXIgU1ROQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQ29udHJvbGxlcnMnKTtcclxuXHJcbiAgICBTVE5Db250cm9sbGVycy5jb250cm9sbGVyKCdNYXBGaWx0ZXJzQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRodHRwJywgJyRyb290U2NvcGUnLCAnJGNvb2tpZXMnLCAnJGxvY2F0aW9uJywgJ1NJVEUnLCAnRVZFTlQnLCAnTWFwX0ZpbHRlcicsICckc3RhdGUnLCAgJ3N0YXRlTGlzdCcsICdzZW5zb3JUeXBlcycsICduZXR3b3JrTmFtZXMnLCAnc3Bpbm5lclNlcnZpY2UnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCAkcm9vdFNjb3BlLCAkY29va2llcywgJGxvY2F0aW9uLCBTSVRFLCBFVkVOVCwgTWFwX0ZpbHRlciwgJHN0YXRlLCBzdGF0ZUxpc3QsIHNlbnNvclR5cGVzLCBuZXR3b3JrTmFtZXMsIHNwaW5uZXJTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSB7IHNpdGVPcGVuOiB0cnVlIH07IC8vYWNjb3JkaW9uIGZvciBzaXRlSW5mb1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLnN0YXRlcyA9IHN0YXRlTGlzdDtcclxuICAgICAgICAgICAgJHNjb3BlLnNlblR5cGVzID0gc2Vuc29yVHlwZXM7XHJcbiAgICAgICAgICAgICRzY29wZS5uZXROYW1lcyA9IG5ldHdvcmtOYW1lcztcclxuICAgICAgICAgICAgJHNjb3BlLnN1cnZleU9wdGlvbnMgPSBbeyBpZDogdHJ1ZSwgdmFsdWU6IFwiU3VydmV5ZWQgSFdNc1wiIH0sIHsgaWQ6IGZhbHNlLCB2YWx1ZTogXCJVbnN1cnZleWVkIEhXTXNcIiB9XTtcclxuICAgICAgICAgICAgJHNjb3BlLkNob3NlbiA9IHtcclxuICAgICAgICAgICAgICAgIG5ldHdvcms6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzZW5zb3I6IG51bGwsXHJcbiAgICAgICAgICAgICAgICBzdXJ2ZXk6bnVsbFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgJHNjb3BlLmNob3NlblN0YXRlcyA9IFtdOyAvL3VzZWQgdG8gam9pbiBlYWNoIGFiYnJldiB0byBwYXNzIHRvIGNhbGxcclxuICAgICAgICAgICAgJHNjb3BlLnNpdGVSZXNwb25zZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAkc2NvcGUuY2hlY2tib3hNb2RlbCA9IHtcclxuICAgICAgICAgICAgICAgIGV2ZW50U2l0ZXNPbmx5OiAnMScsXHJcbiAgICAgICAgICAgICAgICBod21Pbmx5OiAnMCcsXHJcbiAgICAgICAgICAgICAgICBzZW5Pbmx5OiAnMCcsXHJcbiAgICAgICAgICAgICAgICByZGdPbmx5OiAnMCcsXHJcbiAgICAgICAgICAgICAgICBvcERlZmluZWQ6ICcwJ1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLnNlYXJjaFNpdGVzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy8kcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gdHJ1ZTsgLy8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAvL3N0b3JlIHNlYXJjaCBpbiBjYXNlIHRoZXkgbGVhdmUgYW5kIGNsaWNrIGJhY2tcclxuICAgICAgICAgICAgICAgIHNwaW5uZXJTZXJ2aWNlLnNob3coXCJtYXBTcGlubmVyXCIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5jaGVja2JveE1vZGVsLmV2ZW50U2l0ZXNPbmx5ID09PSBcIjFcIiAmJiAkc2NvcGUuc2Vzc2lvbkV2ZW50RXhpc3RzID09IHRydWUgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlU3RyaW5nID0gJHNjb3BlLmNob3NlblN0YXRlcy5qb2luKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVSZXNwb25zZSA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlTGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBldklEID0gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnRJRCcpICE9PSBudWxsICYmICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSAhPT0gdW5kZWZpbmVkID8gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnRJRCcpIDogMDtcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnNlYXJjaFBhcmFtcyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnQ6IGV2SUQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiAkc2NvcGUuY2hvc2VuU3RhdGVzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZW5zb3JUeXBlOiAkc2NvcGUuQ2hvc2VuLnNlbnNvcixcclxuICAgICAgICAgICAgICAgICAgICAgICAgTmV0d29ya05hbWU6ICRzY29wZS5DaG9zZW4ubmV0d29yayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgSFdNT25seTogJHNjb3BlLmNoZWNrYm94TW9kZWwuaHdtT25seSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgSFdNU3VydmV5ZWQ6ICRzY29wZS5DaG9zZW4uc3VydmV5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTZW5zb3JPbmx5OiAkc2NvcGUuY2hlY2tib3hNb2RlbC5zZW5Pbmx5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBSREdPbmx5OiAkc2NvcGUuY2hlY2tib3hNb2RlbC5yZGdPbmx5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBPUERlZmluZWQ6ICRzY29wZS5jaGVja2JveE1vZGVsLm9wRGVmaW5lZFxyXG4gICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgU0lURS5nZXRGaWx0ZXJlZFNpdGVzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEV2ZW50OiBldklELFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU3RhdGU6IHN0YXRlU3RyaW5nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU2Vuc29yVHlwZTogJHNjb3BlLkNob3Nlbi5zZW5zb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBOZXR3b3JrTmFtZTogJHNjb3BlLkNob3Nlbi5uZXR3b3JrLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSFdNT25seTogJHNjb3BlLmNoZWNrYm94TW9kZWwuaHdtT25seSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhXTVN1cnZleWVkOiAkc2NvcGUuQ2hvc2VuLnN1cnZleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlbnNvck9ubHk6ICRzY29wZS5jaGVja2JveE1vZGVsLnNlbk9ubHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBSREdPbmx5OiAkc2NvcGUuY2hlY2tib3hNb2RlbC5yZGdPbmx5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT1BEZWZpbmVkOiAkc2NvcGUuY2hlY2tib3hNb2RlbC5vcERlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gJHNjb3BlLnNpdGVMaXN0ID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAkc2NvcGUuc2l0ZVJlc3BvbnNlID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNwaW5uZXJTZXJ2aWNlLmhpZGUoXCJtYXBTcGlubmVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8kcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTWFwX0ZpbHRlci5zZXRGaWx0ZXJlZFNpdGVzKHJlc3BvbnNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsgLy8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUuY2hlY2tib3hNb2RlbC5ldmVudFNpdGVzT25seSA9PT0gXCIwXCIgfHwgJHNjb3BlLnNlc3Npb25FdmVudEV4aXN0cyA9PSBmYWxzZSl7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGVTdHJpbmcgPSAkc2NvcGUuY2hvc2VuU3RhdGVzLmpvaW4oKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZVJlc3BvbnNlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVMaXN0ID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc2VhcmNoUGFyYW1zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogJHNjb3BlLmNob3NlblN0YXRlcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2Vuc29yVHlwZTogJHNjb3BlLkNob3Nlbi5zZW5zb3IsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE5ldHdvcmtOYW1lOiAkc2NvcGUuQ2hvc2VuLm5ldHdvcmssXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEhXTU9ubHk6ICRzY29wZS5jaGVja2JveE1vZGVsLmh3bU9ubHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEhXTVN1cnZleWVkOiAkc2NvcGUuQ2hvc2VuLnN1cnZleSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2Vuc29yT25seTogJHNjb3BlLmNoZWNrYm94TW9kZWwuc2VuT25seSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgUkRHT25seTogJHNjb3BlLmNoZWNrYm94TW9kZWwucmRnT25seSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgT1BEZWZpbmVkOiAkc2NvcGUuY2hlY2tib3hNb2RlbC5vcERlZmluZWRcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgc3AgPSAkcm9vdFNjb3BlLnNlYXJjaFBhcmFtcztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoc3AuSFdNT25seSA9PT0gXCIwXCIgJiYgc3AuSFdNU3VydmV5ZWQgPT0gbnVsbCAmJiBzcC5OZXR3b3JrTmFtZSA9PSBudWxsICYmIHNwLk9QRGVmaW5lZCA9PT0gXCIwXCIgJiYgc3AuUkRHT25seSA9PT0gXCIwXCIgJiYgc3AuU2Vuc29yT25seSA9PT0gXCIwXCIgJiYgc3AuU2Vuc29yVHlwZSA9PT0gbnVsbCAmJiBzcC5zdGF0ZS5sZW5ndGggPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzcGlubmVyU2VydmljZS5oaWRlKFwibWFwU3Bpbm5lclwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLm9wdGlvbnMucG9zaXRpb25DbGFzcyA9IFwidG9hc3QtYm90dG9tLXJpZ2h0XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci53YXJuaW5nKFwiUGxlYXNlIHNlbGVjdCBhdCBsZWFzdCBvbmUgc2VhcmNoIHBhcmFtZXRlci5cIiwgXCJNYXAgRmlsdGVyc1wiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgU0lURS5nZXRGaWx0ZXJlZFNpdGVzKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRlOiBzdGF0ZVN0cmluZyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlbnNvclR5cGU6ICRzY29wZS5DaG9zZW4uc2Vuc29yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgTmV0d29ya05hbWU6ICRzY29wZS5DaG9zZW4ubmV0d29yayxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEhXTU9ubHk6ICRzY29wZS5jaGVja2JveE1vZGVsLmh3bU9ubHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBIV01TdXJ2ZXllZDogJHNjb3BlLkNob3Nlbi5zdXJ2ZXksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTZW5zb3JPbmx5OiAkc2NvcGUuY2hlY2tib3hNb2RlbC5zZW5Pbmx5LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUkRHT25seTogJHNjb3BlLmNoZWNrYm94TW9kZWwucmRnT25seSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9QRGVmaW5lZDogJHNjb3BlLmNoZWNrYm94TW9kZWwub3BEZWZpbmVkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICRzY29wZS5zaXRlTGlzdCA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gJHNjb3BlLnNpdGVSZXNwb25zZSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGlubmVyU2VydmljZS5oaWRlKFwibWFwU3Bpbm5lclwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIE1hcF9GaWx0ZXIuc2V0RmlsdGVyZWRTaXRlcyhyZXNwb25zZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9Oy8vZW5kIHNlYXJjaFNpdGVzIGNsaWNrIGFjdGlvblxyXG5cclxuICAgICAgICAgICAgLy9hZGQgZWFjaCBzdGF0ZSB0byBhbiBhcnJheSB0byBiZSBqb2luZWQgaW4gdGhlIEdFVFxyXG4gICAgICAgICAgICAkc2NvcGUuc3RhdGVDbGljayA9IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5zZWxlY3RlZCA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5jaG9zZW5TdGF0ZXMucHVzaChkYXRhLnN0YXRlX2FiYnJldik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5zZWxlY3RlZCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kID0gJHNjb3BlLmNob3NlblN0YXRlcy5pbmRleE9mKGRhdGEuc3RhdGVfYWJicmV2KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5kID49IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNob3NlblN0YXRlcy5zcGxpY2UoaW5kLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2NsZWFyIHRoZSBmaWx0ZXIgY2hvaWNlcyAoc3RhcnQgb3ZlcilcclxuICAgICAgICAgICAgJHNjb3BlLmNsZWFyRmlsdGVycyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHNwaW5uZXJTZXJ2aWNlLnNob3coXCJtYXBTcGlubmVyXCIpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNoZWNrYm94TW9kZWwgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRTaXRlc09ubHk6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgaHdtT25seTogMCxcclxuICAgICAgICAgICAgICAgICAgICBzZW5Pbmx5OiAwLFxyXG4gICAgICAgICAgICAgICAgICAgIHJkZ09ubHk6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgb3BEZWZpbmVkOiAwXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkNob3NlbiA9IHt9OyBcclxuICAgICAgICAgICAgICAgICRzY29wZS5jaG9zZW5TdGF0ZXMgPSBbXTtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuc3RhdGVzLCBmdW5jdGlvbiAoc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICBzdC5zZWxlY3RlZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZXZJRCA9ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSAhPT0gbnVsbCAmJiAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudElEJykgIT09IHVuZGVmaW5lZCA/ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSA6IDA7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZXNQcm9taXNlID0gRVZFTlQuZ2V0RXZlbnRTaXRlcyh7aWQ6IGV2SUR9LC8vU0lURS5nZXRBbGwoeyBFdmVudDogZXZJRCB9LFxyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vc3Bpbm5lclNlcnZpY2UuaGlkZShcIm1hcFNwaW5uZXJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgTWFwX0ZpbHRlci5zZXRGaWx0ZXJlZFNpdGVzKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICBzcGlubmVyU2VydmljZS5oaWRlKFwibWFwU3Bpbm5lclwiKTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vICRyb290U2NvcGUuJG9uKCdtYXBTaXRlQ2xpY2snLCBmdW5jdGlvbiAoZXZlbnQsIHNpdGVQYXJ0cykge1xyXG4gICAgICAgICAgICAvLyAgICAgJHNjb3BlLmFTaXRlID0gc2l0ZVBhcnRzWzBdO1xyXG4gICAgICAgICAgICAvLyAgICAgLy9vbmx5IDYgZGVjaW1hbCBwbGFjZXMgZm9yIGxhdC9sb25nXHJcbiAgICAgICAgICAgIC8vICAgICAkc2NvcGUuYVNpdGUubGF0aXR1ZGVfZGQgPSBwYXJzZUZsb2F0KCRzY29wZS5hU2l0ZS5sYXRpdHVkZV9kZC50b0ZpeGVkKDYpKTtcclxuICAgICAgICAgICAgLy8gICAgICRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQgPSBwYXJzZUZsb2F0KCRzY29wZS5hU2l0ZS5sb25naXR1ZGVfZGQudG9GaXhlZCg2KSk7XHJcbiAgICAgICAgICAgIC8vIH0pO1xyXG5cclxuICAgICAgICB9XSk7Ly9lbmQgY29udHJvbGxlciBmdW5jdGlvblxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG4gICAgdmFyIFNUTkNvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NUTkNvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgU1ROQ29udHJvbGxlcnMuY29udHJvbGxlcignTWFwQ29udHJvbGxlcicsIFsnJHNjb3BlJywgJyRodHRwJywgJyRyb290U2NvcGUnLCAnJGNvb2tpZXMnLCAnJGxvY2F0aW9uJywgJ1NJVEUnLCAnRVZFTlQnLCAnTWFwX1NpdGUnLCAnbGVhZmxldE1hcmtlckV2ZW50cycsICdsZWFmbGV0Qm91bmRzSGVscGVycycsICdsZWFmbGV0RGF0YScsICckc3RhdGUnLCAnc3Bpbm5lclNlcnZpY2UnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRodHRwLCAkcm9vdFNjb3BlLCAkY29va2llcywgJGxvY2F0aW9uLCBTSVRFLCBFVkVOVCwgTWFwX1NpdGUsbGVhZmxldE1hcmtlckV2ZW50cywgbGVhZmxldEJvdW5kc0hlbHBlcnMsIGxlYWZsZXREYXRhLCAkc3RhdGUsIHNwaW5uZXJTZXJ2aWNlKSB7XHJcbiAgICAgICAgICAgIGlmICgkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IHVuZGVmaW5lZCB8fCAkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hdXRoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnRoaXNQYWdlID0gXCJNYXBcIjtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuYWN0aXZlTWVudSA9IFwibWFwXCI7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubWVzc2FnZSA9IFwiTWFueSBvZiB0aGUgc3VwcGxlbWVudGFsIEdJUyBkYXRhIGxheWVycyBmb3VuZCBpbiB0aGUgbWFwIGFyZSBmcm9tIGEgcmFuZ2Ugb2Ygc291cmNlcyBhbmQgYXJlIG5vdCBtYWludGFpbmVkIGJ5IFdpTS4gV2Ugb2ZmZXIgdGhlc2UgbWFwIGxheWVycyBhcyBhIFwiICtcclxuICAgICAgICAgICAgICAgICAgICBcImRlY2lzaW9uIHN1cHBvcnQgc3VwcGxlbWVudCB0byB0aGUgU1ROIHNpdGVzIGxheWVyLCBidXQgd2UgY2Fubm90IGd1YXJhbnRlZSB0aGVpciBwZXJmb3JtYW5jZSBhbmQgYXZhaWxhYmlsaXR5LiBNYW55IG9mIHRoZXNlIGV4dGVybmFsbHkgbWFpbnRhaW5lZCBsYXllcnMgYXJlIFwiICtcclxuICAgICAgICAgICAgICAgICAgICBcImxhcmdlIGRhdGFzZXRzIGFuZCBtYXkgbG9hZCBzbG93bHkgZGVwZW5kaW5nIG9uIG5ldHdvcmsgbGF0ZW5jeS4gSW4gc29tZSBjYXNlcyB0aGV5IG1heSBmYWlsIHRvIGxvYWQgZW50aXJlbHkgd2hlbiBuZXR3b3JrIGxhdGVuY3kgaXMgaGlnaC5cIjtcclxuXHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRvbignZmlsdGVyU2l0ZXNDbGljaycsIGZ1bmN0aW9uIChldmVudCwgZmlsdGVyZWRTaXRlc0FycmF5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbHRlcmVkU2l0ZXNBcnJheS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYXRocyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRNYXJrZXJOdW0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaG93RXZlbnRTaXRlcyhmaWx0ZXJlZFNpdGVzQXJyYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdG9hc3RyLm9wdGlvbnMoe1wicG9zaXRpb25DbGFzc1wiOiBcInRvYXN0LWJvdHRvbS1yaWdodFwifSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5vcHRpb25zLnBvc2l0aW9uQ2xhc3MgPSBcInRvYXN0LWJvdHRvbS1yaWdodFwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIud2FybmluZyhcIllvdXIgZmlsdGVyIHJldHVybmVkIG5vIHJlc3VsdHMuXCIsIFwiTWFwIEZpbHRlcnNcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIGljb25zID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0bjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiAnZGl2JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvblNpemU6IFsxMCwgMTBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdzdG5TaXRlSWNvbidcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIHN0bkdyYXk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25TaXplOiBbMTAsIDEwXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnc3RuU2l0ZUdyYXknXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBuZXdTaXRlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdkaXYnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uU2l6ZTogWzEwLCAxMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ25ld1NpdGVJY29uJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvbkFuY2hvcjogIFs1LCA1XVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2RpdicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25TaXplOiBbMTIsIDEyXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnc2VsZWN0ZWRJY29uJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgbndpczogTC5kaXZJY29uKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvblNpemU6IFsxMCwgMTBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjbGFzc05hbWU6ICdhcnJvdy11cCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaWNvbkFuY2hvcjogWzEzLjUsIDE3LjVdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwb3B1cEFuY2hvcjogWzAsIC0xMV1cclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICBhY3Rpb246IEwuaWNvbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25Vcmw6ICdpbWFnZXMvYWN0aW9uLnBuZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwQW5jaG9yOiBbMTAsIDEwXVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvd190aHJlc2hvbGQ6IEwuaWNvbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25Vcmw6ICdpbWFnZXMvbG93X3RocmVzaG9sZC5wbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B1cEFuY2hvcjogWzEwLCAxMF1cclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICBtYWpvcjogTC5pY29uKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvblVybDogJ2ltYWdlcy9tYWpvci5wbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B1cEFuY2hvcjogWzEwLCAxMF1cclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICBtaW5vcjogTC5pY29uKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvblVybDogJ2ltYWdlcy9taW5vci5wbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B1cEFuY2hvcjogWzEwLCAxMF1cclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICBtb2RlcmF0ZTogTC5pY29uKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvblVybDogJ2ltYWdlcy9tb2RlcmF0ZS5wbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B1cEFuY2hvcjogWzEwLCAxMF1cclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICBub19mbG9vZGluZzogTC5pY29uKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvblVybDogJ2ltYWdlcy9ub19mbG9vZGluZy5wbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B1cEFuY2hvcjogWzEwLCAxMF1cclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICBub3RfZGVmaW5lZDogTC5pY29uKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWNvblVybDogJ2ltYWdlcy9ub3RfZGVmaW5lZC5wbmcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3B1cEFuY2hvcjogWzEwLCAxMF1cclxuICAgICAgICAgICAgICAgICAgICB9KSxcclxuICAgICAgICAgICAgICAgICAgICBvYnNfbm90X2N1cnJlbnQ6IEwuaWNvbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljb25Vcmw6ICdpbWFnZXMvb2JzX25vdF9jdXJyZW50LnBuZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwQW5jaG9yOiBbMTAsIDEwXVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLFxyXG4gICAgICAgICAgICAgICAgICAgIG91dF9vZl9zZXJ2aWNlOiBMLmljb24oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpY29uVXJsOiAnaW1hZ2VzL291dF9vZl9zZXJ2aWNlLnBuZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcHVwQW5jaG9yOiBbMTAsIDEwXVxyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy9jcmVhdGVzIHRoZSBtYXJrZXJzIG9uIHRoZSBtYXAgYWZ0ZXIgZ2V0dGluZyBKU09OIGZyb20gU1ROIHdlYiBzZXJ2aWNlcyBjYWxsXHJcbiAgICAgICAgICAgICAgICB2YXIgc2hvd0V2ZW50U2l0ZXMgPSBmdW5jdGlvbihyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzaXRlc0FycmF5ID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVzID0gc2l0ZXNBcnJheTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFya2VycyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXJrZXJzTGF0TG5nQXJyYXkgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8vLy9jb250cm9scyBtZXRob2QvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAgICAgbGVhZmxldERhdGEuZ2V0RGlyZWN0aXZlQ29udHJvbHMoKS50aGVuKGZ1bmN0aW9uIChjb250cm9scykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbHMubWFya2Vycy5jcmVhdGUoe30sICRzY29wZS5tYXJrZXJzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXJrZXJzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2l0ZXNBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBzaXRlc0FycmF5W2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFya2Vycy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjonc3RuU2l0ZXMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdDogYS5sYXRpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbmc6IGEubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6IGEuc2l0ZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXCJTVE4gU2l0ZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IGljb25zLnN0blxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25lZWQgdGhpcyAnbWFya2Vyc0xhdExuZ0FycmF5JyBmb3IgdGhlIHpvb20gdG8gYm91bmRzIC0gcmVxdWlyZXMgc2ltcGxlIGxhdC9sbmcgYXJyYXkgdG8gd29ya1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnNMYXRMbmdBcnJheS5wdXNoKFthLmxhdGl0dWRlX2RkLCBhLmxvbmdpdHVkZV9kZF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9scy5tYXJrZXJzLmNyZWF0ZShtYXJrZXJzICwkc2NvcGUubWFya2Vycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXJrZXJzID0gbWFya2VycztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS50YWJsZSgkc2NvcGUubWFya2Vycyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgTExCb3VuZHMgPSAgbmV3IEwuTGF0TG5nQm91bmRzKCRzY29wZS5tYXJrZXJzTGF0TG5nQXJyYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYm91bmRzID0gbGVhZmxldEJvdW5kc0hlbHBlcnMuY3JlYXRlQm91bmRzRnJvbUFycmF5KFtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtMTEJvdW5kcy5fbm9ydGhFYXN0LmxhdCwgTExCb3VuZHMuX25vcnRoRWFzdC5sbmddLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgW0xMQm91bmRzLl9zb3V0aFdlc3QubGF0LCBMTEJvdW5kcy5fc291dGhXZXN0LmxuZ11cclxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAvLy8vL2VuZCBjb250cm9scyBtZXRob2QvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy9yYW5kbyBrZXlzIG1ldGhvZC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIGZvciAodmFyIGkgPSAwOyBpIDwgc2l0ZXNBcnJheS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB2YXIgYSA9IHNpdGVzQXJyYXlbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHZhciBtYXJrZXJJRCA9ICRzY29wZS5tYWtlSUQoKTtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLy8gJHNjb3BlLm1hcmtlcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC8vICAgICBsYXllcjonc3RuU2l0ZXMnLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAvLyAgICAgbGF0OiBhLmxhdGl0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAvLyAgICAgbG5nOiBhLmxvbmdpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLy8gICAgIHNpdGVfaWQ6IGEuc2l0ZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLy8gICAgIHRpdGxlOiBcIlNUTiBTaXRlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC8vICAgICBpY29uOiBpY29ucy5zdG5cclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgLy8gfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIC8vXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICRzY29wZS5tYXJrZXJzW21hcmtlcklEXSA9IHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIGxheWVyOidzdG5TaXRlcycsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBsYXQ6IGEubGF0aXR1ZGUsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAgICBsbmc6IGEubG9uZ2l0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgc2l0ZV9pZDogYS5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgdGl0bGU6IFwiU1ROIFNpdGVcIixcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIGljb246IGljb25zLnN0blxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAkc2NvcGUubWFya2Vyc0xhdExuZ0FycmF5LnB1c2goW2EubGF0aXR1ZGUsIGEubG9uZ2l0dWRlXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8vLy9lbmQgcmFuZG8ga2V5cyBtZXRob2QvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuXHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5wYXRoc09iaiA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjaXJjbGVNYXJrZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJjaXJjbGVNYXJrZXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmFkaXVzOjIwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3ZWlnaHQ6MyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29sb3I6ICcjMDAwMDk5JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGF0bG5nczoge31cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy9zdG9yZXMgdGhlIGxhc3Qgc2VsZWN0ZWQgbWFya2VyIGluZGV4LCBzbyBpdHMgaWNvbiBhbmQgbGFiZWwgY2FuIGJlIHJlc2V0IGFzIHRoZSBmaXJzdCB0aGluZyB0byBoYXBwZW4gYWZ0ZXIgY2xpY2tcclxuICAgICAgICAgICAgICAgIC8vdmFyIHNlbGVjdGVkTWFya2VyTnVtID0gMDtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZWxlY3RlZE1hcmtlck51bSA9IDA7XHJcbiAgICAgICAgICAgICAgICAvLy8vdGhpcyBzaG93cyBob3cgdG8gZ3JhYiB0aGUgU2l0ZSBJRCBpbiBhcmdzLm1vZGVsLnNpdGVfaWRcclxuICAgICAgICAgICAgICAgICRzY29wZS4kb24oJ2xlYWZsZXREaXJlY3RpdmVNYXJrZXIuY2xpY2snLCBmdW5jdGlvbiAoZXZlbnQsIGFyZ3MpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYXJncy5tb2RlbC5zaXRlX2lkICE9ICduZXdTaXRlJykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Bpbm5lclNlcnZpY2Uuc2hvdyhcInNpdGVJbmZvU3Bpbm5lclwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXJrZXJzWyRzY29wZS5zZWxlY3RlZE1hcmtlck51bV0uaWNvbiA9IGljb25zLnN0bjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlICRzY29wZS5tYXJrZXJzWyRzY29wZS5zZWxlY3RlZE1hcmtlck51bV0ubGFiZWw7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2l0ZUlEID0gYXJncy5tb2RlbC5zaXRlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSB0cnVlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXBfU2l0ZS5zZXRNYXBTaXRlUGFydHMoc2l0ZUlEKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9nZXRzIGFycmF5IG51bWJlciBvZiBtYXJrZXIgZWxlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRNYXJrZXJOdW0gPSBwYXJzZUludChhcmdzLm1vZGVsTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2V0cyB0aGUgaWNvbiB0byB0aGUgc2VsZWN0ZWQgaWNvbiBjbGFzc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFya2Vyc1skc2NvcGUuc2VsZWN0ZWRNYXJrZXJOdW1dLmljb24gPSBpY29ucy5zZWxlY3RlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnNbJHNjb3BlLnNlbGVjdGVkTWFya2VyTnVtXS5sYWJlbCA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2U6ICdTaXRlICcgKyBzaXRlSUQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9IaWRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9mZnNldDogWzI1LCAtMTVdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsYXNzTmFtZTogJ3NpdGVMYWJlbCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5tYXBDZW50ZXIuem9vbSA8PSA5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUubWFwQ2VudGVyID0ge2xhdDogYXJncy5tb2RlbC5sYXQsIGxuZzogYXJncy5tb2RlbC5sbmcsIHpvb206IDEwfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICgkc2NvcGUubWFwQ2VudGVyLnpvb20gPj0gMTApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXBDZW50ZXIgPSB7bGF0OiBhcmdzLm1vZGVsLmxhdCwgbG5nOiBhcmdzLm1vZGVsLmxuZywgem9vbSA6ICRzY29wZS5tYXBDZW50ZXIuem9vbX07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGFkZFNoYXBlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGF0aHMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYXRoc09iai5jaXJjbGVNYXJrZXIubGF0bG5ncyA9IHtsYXQ6IGFyZ3MubW9kZWwubGF0LCBsbmc6IGFyZ3MubW9kZWwubG5nfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wYXRoc1snY2lyY2xlTWFya2VyJ10gPSAkc2NvcGUucGF0aHNPYmpbJ2NpcmNsZU1hcmtlciddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZGRTaGFwZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8vdGhpcyBuZWVkcyB0byBiZSBpbnN0YW50aWF0ZWQgYmVmb3JlIGl0IGNhbiBiZSBmaWxsZWQgcHJvZ3JhbW1hdGljYWxseSBiZWxvdy4gbWF5IG5lZWQgdG8gbW92ZSBzY29wZS5leHRlbmQgYmxvY2sgdG8gdG9wXHJcbiAgICAgICAgICAgICAgICAvLyAkc2NvcGUuY29udHJvbHMgPSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgY3VzdG9tOiBbXVxyXG4gICAgICAgICAgICAgICAgLy8gfTtcclxuICAgICAgICAgICAgICAgIC8vY29tbWVudGVkIGJsb2NrIGJlbG93IGlzIGZvciBtYWtpbmcgY3VzdG9tIGxlYWZsZXQgY29udHJvbCBmb3IgY3JlYXRlIHNpdGUgbW9kZSBpbmRpY2F0b3JcclxuICAgICAgICAgICAgICAgIC8vdmFyIGNyZWF0ZVNpdGVNb2RlQ29udHJvbCA9IEwuY29udHJvbCgpO1xyXG4gICAgICAgICAgICAgICAgLy9jcmVhdGVTaXRlTW9kZUNvbnRyb2wuc2V0UG9zaXRpb24oJ2JvdHRvbWxlZnQnKTtcclxuICAgICAgICAgICAgICAgIC8vY3JlYXRlU2l0ZU1vZGVDb250cm9sLm9uQWRkID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgdmFyIGNsYXNzTmFtZSA9ICdjcmVhdGVTaXRlTW9kZUluZGljYXRvcicsXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgY29udGFpbmVyID0gTC5Eb21VdGlsLmNyZWF0ZSgnZGl2JywgY2xhc3NOYW1lICsgJyBsZWFmbGV0LWJhcicpO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgcmV0dXJuIGNvbnRhaW5lcjtcclxuICAgICAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIC8vJHNjb3BlLmNvbnRyb2xzLmN1c3RvbS5wdXNoKGNyZWF0ZVNpdGVNb2RlQ29udHJvbCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8vbmVlZCB0byB3YXRjaCBmb3Igc2Vzc2lvbiBldmVudCBpZCwgZG8gbmV3IGNhbGwgdG8gc2VydmVyIHdoZW4gdGhhdCBjaGFuZ2VzXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKTsgfSwgZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ld1ZhbHVlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlc3Npb25FdmVudCA9ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50TmFtZScpICE9PSBudWxsICYmICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50TmFtZScpICE9PSB1bmRlZmluZWQgPyAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudE5hbWUnKSA6IFwiQWxsIEV2ZW50c1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZJRCA9IG5ld1ZhbHVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2JlbG93IGdldHMgc2l0ZXMgdXNpbmcgJGh0dHAuZ2V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNwaW5uZXJTZXJ2aWNlLnNob3coXCJtYXBTcGlubmVyXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2VsZWN0ZWRNYXJrZXJOdW0gPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucGF0aHMgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9iZWxvdyBnZXRzIHNpdGVzIHVzaW5nIHNpbXBsZSBhbmd1bGFyICRodHRwIHNlcnZpY2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gJHNjb3BlLnNpdGVzUHJvbWlzZSA9ICRodHRwLmdldCgnaHR0cHM6Ly9zdG4ud2ltLnVzZ3MuZ292L1NUTlNlcnZpY2VzL0V2ZW50cy8nICsgZXZJRCArICcvU2l0ZXMuanNvbicpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgLnRoZW4oc2hvd0V2ZW50U2l0ZXMsIG9uRXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2JlbG93IGdldHMgc2l0ZXMgdXNpbmcgdGhlIFNJVEUgJ2ZhY3RvcnknXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlc1Byb21pc2UgPSBFVkVOVC5nZXRFdmVudFNpdGVzKHtpZDogZXZJRH0sLy8gU0lURS5nZXRBbGwoeyAgRXZlbnQ6IGV2SUR9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzcGlubmVyU2VydmljZS5oaWRlKFwibWFwU3Bpbm5lclwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dFdmVudFNpdGVzKHJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5lcnJvciA9IFwiQ291bGQgbm90IGZldGNoIHNpdGVzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLm9wdGlvbnMucG9zaXRpb25DbGFzcyA9IFwidG9hc3QtYm90dG9tLXJpZ2h0XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5vcHRpb25zLnRpbWVPdXQgPSBcIjgwMDBcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLm9wdGlvbnMuY2xvc2VCdXR0b24gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIud2FybmluZyhcIk5vIHNpdGVzIGFyZSBzaG93aW5nIGJlY2F1c2UgeW91IGhhdmUgbm8gZmlsdGVycyBhcHBsaWVkLiBQbGVhc2Ugc2VsZWN0IGF0IGxlYXN0IG9uZSBzZWFyY2ggcGFyYW1ldGVyLlwiLCBcIk1hcCBGaWx0ZXJzXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vd2F0Y2ggZm9yIHRoZSBzZXNzaW9uIGV2ZW50IHRvIGNoYW5nZSBhbmQgdXBkYXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50TmFtZScpOyB9LCBmdW5jdGlvbiAobmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vzc2lvbkV2ZW50TmFtZSA9IG5ld1ZhbHVlICE9PSB1bmRlZmluZWQgPyBuZXdWYWx1ZSA6IFwiQWxsIEV2ZW50c1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXNzaW9uRXZlbnRFeGlzdHMgPSAkc2NvcGUuc2Vzc2lvbkV2ZW50TmFtZSAhPSBcIkFsbCBFdmVudHNcIiA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciBvbkVycm9yID0gZnVuY3Rpb24ocmVhc29uKXtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSBcIkNvdWxkIG5vdCBmZXRjaCBzaXRlc1wiO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS4kb24oXCJsZWFmbGV0RGlyZWN0aXZlTWFwLmNsaWNrXCIsIGZ1bmN0aW9uKGV2ZW50LCBhcmdzKXtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmNyZWF0ZVNpdGVNb2RlQWN0aXZlID09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9maXJzdCwgcmVtb3ZlIHByZXZpb3VzbHkgY2xpY2stY3JlYXRlZCBzaXRlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZVVzZXJDcmVhdGVkU2l0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGVhZkV2ZW50ID0gYXJncy5sZWFmbGV0RXZlbnQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51c2VyQ3JlYXRlZFNpdGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZTogbGVhZkV2ZW50LmxhdGxuZy5sYXQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IGxlYWZFdmVudC5sYXRsbmcubG5nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcmV0dXJucyB0aGUgY3JlYXRlZCBzaXRlIG9iamVjdCwgYnV0IG5vdCB0aGF0IHVzZWZ1bFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3ZhciBjcmVhdGVkU2l0ZSA9ICRzY29wZS5tYXJrZXJzLmZpbHRlcihmdW5jdGlvbiAob2JqKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICByZXR1cm4gb2JqLnNpdGVfaWQgPT09ICduZXdTaXRlJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy99KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMucHVzaCh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogJ25ld1NpdGUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiAkc2NvcGUudXNlckNyZWF0ZWRTaXRlLmxhdGl0dWRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG5nOiAkc2NvcGUudXNlckNyZWF0ZWRTaXRlLmxvbmdpdHVkZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6ICduZXdTaXRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IGljb25zLm5ld1NpdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIk5ldyBkcmFnZ2FibGUgU1ROIHNpdGVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRyYWdnYWJsZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvY3VzOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhYmVsOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWVzc2FnZTogJ05ldyBTaXRlJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vSGlkZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xhc3NOYW1lOiAnbmV3U2l0ZUxhYmVsJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vdXNlIG5ldyBjbGlja2VkIHNpdGUgbGF0L2xuZyBhbmQgY3JlYXRlIG5ldyBzaXRlIGZyb20gdGhhdFxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcmVtb3ZlVXNlckNyZWF0ZWRTaXRlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vcmV0dXJucyBjcmVhdGVkIHNpdGUgaW5kZXggc28gaXQgY2FuIGJlIHJlbW92ZWQgdG8gbWFrZSB3YXkgZm9yIGl0cyByZXBsYWNlbWVudFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjcmVhdGVkU2l0ZUluZGV4ID0gJHNjb3BlLm1hcmtlcnMubWFwKGZ1bmN0aW9uKG9iaikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2JqLnNpdGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuaW5kZXhPZignbmV3U2l0ZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vc3BsaWNlIGNyZWF0ZWQgc2l0ZSBmcm9tIHRoZSBtYXJrZXJzIGFycmF5IGlmIGl0IGV4aXN0c1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChjcmVhdGVkU2l0ZUluZGV4ID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMuc3BsaWNlKGNyZWF0ZWRTaXRlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudXNlckNyZWF0ZWRTaXRlID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLy91cGRhdGUgbmV3U2l0ZSBsYXQvbG5nIGFmdGVyIGRyYWdlbmRcclxuICAgICAgICAgICAgICAgICRzY29wZS4kb24oXCJsZWFmbGV0RGlyZWN0aXZlTWFya2VyLmRyYWdlbmRcIiwgZnVuY3Rpb24oZXZlbnQsIGFyZ3Mpe1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkcmFnZW5kTG9jYXRpb24gPSBhcmdzLm1vZGVsO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS51c2VyQ3JlYXRlZFNpdGUgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlOiBkcmFnZW5kTG9jYXRpb24ubGF0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IGRyYWdlbmRMb2NhdGlvbi5sbmdcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvLy9saXN0ZW5zICh3YXRjaGVzKSBmb3IgY2hhbmdlIG9mIHRoZSBjcmVhdGVTaXRlTW9kZUFjdGl2ZSBhdHRyaWJ1dGUgLSBjdWVkIGJ5IGNsaWNrIG9mIHRoZSBDcmVhdGUgU2l0ZSBidXR0b25cclxuICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goJ2NyZWF0ZVNpdGVNb2RlQWN0aXZlJywgZnVuY3Rpb24oKXtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY3JlYXRlU2l0ZUJ1dHRvblRleHQgPSAkc2NvcGUuY3JlYXRlU2l0ZU1vZGVBY3RpdmUgPyAnQ2FuY2VsIENyZWF0ZSBTaXRlIE1vZGUnIDogJ0NyZWF0ZSBOZXcgU2l0ZSBvbiBNYXAnO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5tYXBTdHlsZSA9ICRzY29wZS5jcmVhdGVTaXRlTW9kZUFjdGl2ZSA/IHtcImN1cnNvclwiOlwiY3Jvc3NoYWlyXCJ9IDoge1wiY3Vyc29yXCI6XCJncmFiXCJ9O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghJHNjb3BlLmNyZWF0ZVNpdGVNb2RlQWN0aXZlKSB7cmVtb3ZlVXNlckNyZWF0ZWRTaXRlKCk7fVxyXG4gICAgICAgICAgICAgICAgICAgIC8vdHdvIGxpbmVzIGJlbG93IHJlZmVyZW5jZWQgY3JlYXRlU2l0ZU1vZGVJbmRpY2F0b3IgbGVhZmxldCBjb250cm9sLiBjYW4gYmUgcmVtb3ZlZCBldmVudHVhbGx5LlxyXG4gICAgICAgICAgICAgICAgICAgIC8vdmFyIGNyZWF0ZVNpdGVNb2RlSW5kaWNhdG9yID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZShcImNyZWF0ZVNpdGVNb2RlSW5kaWNhdG9yXCIpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY3JlYXRlU2l0ZU1vZGVJbmRpY2F0b3Iuc3R5bGUudmlzaWJpbGl0eSA9ICRzY29wZS5jcmVhdGVTaXRlTW9kZUFjdGl2ZSA/ICd2aXNpYmxlJyA6J2hpZGRlbic7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuY3JlYXRlU2l0ZUZyb21NYXAgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICBpZigkc2NvcGUudXNlckNyZWF0ZWRTaXRlLmxhdGl0dWRlICE9PSB1bmRlZmluZWQgJiYgICRzY29wZS51c2VyQ3JlYXRlZFNpdGUubG9uZ2l0dWRlICE9PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlLmdvKCdzaXRlLmRhc2hib2FyZCcsIHsgaWQ6IDAsIGxhdGl0dWRlOiAkc2NvcGUudXNlckNyZWF0ZWRTaXRlLmxhdGl0dWRlLCBsb25naXR1ZGU6ICRzY29wZS51c2VyQ3JlYXRlZFNpdGUubG9uZ2l0dWRlIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIlBsZWFzZSBjbGljayBhIGxvY2F0aW9uIG9uIHRoZSBtYXAgdG8gY3JlYXRlIGEgc2l0ZSB0aGlzIHdheS5cIik7XHJcbiAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vICRzY29wZS5zaG93QWxsU2l0ZXMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgc3Bpbm5lclNlcnZpY2Uuc2hvdyhcIm1hcFNwaW5uZXJcIik7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL3Rlc3RpbmcgZnVsbCBzaXRlcyBwZXJmb3JtYW5jZS8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgU0lURS5nZXRBbGwoXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICB2YXIgYWxsU2l0ZXNBcnJheSA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgJHNjb3BlLmFsbFNpdGVzID0gYWxsU2l0ZXNBcnJheTtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIC8vJHNjb3BlLm1hcmtlcnMgPSBbXTtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIC8vJHNjb3BlLm1hcmtlcnNMYXRMbmdBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIC8vLy8vY29udHJvbHMgbWV0aG9kLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgbGVhZmxldERhdGEuZ2V0RGlyZWN0aXZlQ29udHJvbHMoKS50aGVuKGZ1bmN0aW9uIChjb250cm9scykge1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgIC8vY29udHJvbHMubWFya2Vycy5jcmVhdGUoe30sICRzY29wZS5tYXJrZXJzKTtcclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgdmFyIG1hcmtlcnMgPSBbXTtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGFsbFNpdGVzQXJyYXkubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgdmFyIGEgPSBhbGxTaXRlc0FycmF5W2ldO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICBtYXJrZXJzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6ICdzdG5TaXRlc0FsbCcsXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBsYXQ6IGEubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgICBsbmc6IGEubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogYS5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFwiU1ROIFNpdGVcIixcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgIGljb246IGljb25zLnN0blxyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUubWFya2Vyc0xhdExuZ0FycmF5LnB1c2goW2EubGF0aXR1ZGVfZGQsIGEubG9uZ2l0dWRlX2RkXSk7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICBjb250cm9scy5tYXJrZXJzLmNyZWF0ZShtYXJrZXJzLCAkc2NvcGUubWFya2Vycyk7XHJcbiAgICAgICAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgJHNjb3BlLm1hcmtlcnMgPSBtYXJrZXJzO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgICAgIHNwaW5uZXJTZXJ2aWNlLmhpZGUoXCJtYXBTcGlubmVyXCIpO1xyXG4gICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAkc2NvcGUuZXJyb3IgPSBcIkNvdWxkIG5vdCBmZXRjaCBzaXRlc1wiO1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAvL1xyXG4gICAgICAgICAgICAgICAgLy8gICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAvLyB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vZ2V0IGFsbCBTVE4gc2l0ZXNcclxuICAgICAgICAgICAgICAgIC8vJGh0dHAuZ2V0KCdodHRwczovL3N0bi53aW0udXNncy5nb3YvU1ROU2VydmljZXMvU2l0ZXMvcG9pbnRzLmpzb24nKVxyXG4gICAgICAgICAgICAgICAgLy8gICAgLnRoZW4ob25TaXRlQ29tcGxldGUsIG9uRXJyb3IpO1xyXG4gICAgICAgICAgICAgICAgLy9nZXQgU1ROIHNpdGVzIGZvciBzZXNzaW9uIGV2ZW50IGNob3NlbiBieSB1c2VyXHJcbiAgICAgICAgICAgICAgICAvLyRodHRwLmdldCgnaHR0cHM6Ly9zdG4ud2ltLnVzZ3MuZ292L1NUTlNlcnZpY2VzL1NpdGVzLmpzb24/RXZlbnQ9JyArIGV2SUQpXHJcbiAgICAgICAgICAgICAgICAvLyAgICAudGhlbihvblNpdGVDb21wbGV0ZSwgb25FcnJvcik7XHJcbiAgICAgICAgICAgICAgICAvLy9yZXRyaWV2ZXMgZXZlbnQgc2Vzc2lvbiBJRFxyXG4gICAgICAgICAgICAgICAgLy92YXIgZXZJRCA9ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSAhPT0gbnVsbCAmJiAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudElEJykgIT09IHVuZGVmaW5lZCA/ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSA6IDA7XHJcbiAgICAgICAgICAgICAgICAvL2dldCBTVE4gc2l0ZXMgZm9yIHNlc3Npb24gZXZlbnRcclxuICAgICAgICAgICAgICAgIC8vJGh0dHAuZ2V0KCdodHRwczovL3N0bi53aW0udXNncy5nb3YvU1ROU2VydmljZXMvRXZlbnRzLycgKyBldklEICsgJy9TaXRlcy5qc29uJylcclxuICAgICAgICAgICAgICAgIC8vICAgIC50aGVuKG9uU2l0ZUNvbXBsZXRlLCBvbkVycm9yKTtcclxuICAgICAgICAgICAgICAgIC8vY29waWVzIHNjb3BlIG9iamVjdC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcblxyXG4gICAgICAgICAgICAgICAgbGVhZmxldERhdGEuZ2V0TWFwKCkudGhlbihmdW5jdGlvbihtYXApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZ2VvU2VhcmNoQ29udHJvbCA9IG5ldyBMLkNvbnRyb2wuR2VvU2VhcmNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdmlkZXI6IG5ldyBMLkdlb1NlYXJjaC5Qcm92aWRlci5Fc3JpKCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAndG9wbGVmdCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHpvb21MZXZlbDogMTVcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBnZW9TZWFyY2hDb250cm9sLmFkZFRvKG1hcCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBkZWxldGUgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbjtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZXh0ZW5kKCRzY29wZSwge1xyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50czoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXJrZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmFibGU6IGxlYWZsZXRNYXJrZXJFdmVudHMuZ2V0QXZhaWxhYmxlRXZlbnRzKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgbWFwQ2VudGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhdDogNDEuMjc4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsbmc6IC05Mi4zMzYsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHpvb206IDQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1pblpvb206IDRcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xzOiB7fSxcclxuICAgICAgICAgICAgICAgICAgICBtYXJrZXJzV2F0Y2hPcHRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRvV2F0Y2g6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlzRGVlcDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5kaXZpZHVhbDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9XYXRjaDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzRGVlcDogZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgcGF0aHM6IHt9LFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlcnM6IFtdLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hcmtlcnNMYXRMbmdBcnJheTogW10sXHJcbiAgICAgICAgICAgICAgICAgICAgY3JlYXRlU2l0ZU1vZGVBY3RpdmU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgIHVzZXJDcmVhdGVkU2l0ZToge30sXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbWFrZUlEOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgdmFyIHRleHQgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICB2YXIgcG9zc2libGUgPSBcIkFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaYWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXowMTIzNDU2Nzg5XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9cclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgZm9yKCB2YXIgaT0wOyBpIDwgNTsgaSsrIClcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIHRleHQgKz0gcG9zc2libGUuY2hhckF0KE1hdGguZmxvb3IoTWF0aC5yYW5kb20oKSAqIHBvc3NpYmxlLmxlbmd0aCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHJldHVybiB0ZXh0O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgIHVybDogXCJodHRwOi8vZ2lzLnNyaC5ub2FhLmdvdi9hcmNnaXMvcmVzdC9zZXJ2aWNlcy9haHBzX2dhdWdlcy9NYXBTZXJ2ZXIvbGVnZW5kLz9mPWpzb25cIixcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgbGVnZW5kQ2xhc3M6IFwiaW5mbyBsZWdlbmQtZXNyaVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICBwb3NpdGlvbjogXCJib3R0b21sZWZ0XCJcclxuICAgICAgICAgICAgICAgICAgICAvLyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGxlZ2VuZFVSTDE6IFwiaHR0cDovL3NlcnZpY2VzLmFyY2dpc29ubGluZS5jb20vYXJjZ2lzL3Jlc3Qvc2VydmljZXMvRGVtb2dyYXBoaWNzL1VTQV8xOTkwLTIwMDBfUG9wdWxhdGlvbl9DaGFuZ2UvTWFwU2VydmVyL2xlZ2VuZD9mPWpzb25cIixcclxuICAgICAgICAgICAgICAgICAgICAvLyBsZWdlbmRVUkwyOiBcImh0dHBzOi8vaGF6YXJkcy5mZW1hLmdvdi9naXMvbmZobC9yZXN0L3NlcnZpY2VzL3B1YmxpYy9ORkhML01hcFNlcnZlci9sZWdlbmQ/Zj1qc29uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gc3dpdGNoTGVnZW5kOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgJHNjb3BlLmxheWVycy5vdmVybGF5cy51c2Ffc29jaWFsLnZpc2libGUgPSAhJHNjb3BlLmxheWVycy5vdmVybGF5cy51c2Ffc29jaWFsLnZpc2libGU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICRzY29wZS5sZWdlbmQudXJsID1cclxuICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgICRzY29wZS5sZWdlbmQudXJsID09ICRzY29wZS5sZWdlbmRVUkwxPyAkc2NvcGUubGVnZW5kVVJMMjokc2NvcGUubGVnZW5kVVJMMTtcclxuICAgICAgICAgICAgICAgICAgICAvLyB9LFxyXG4gICAgICAgICAgICAgICAgICAgIC8vLy8vLy8vLy8hISFuZWVkIHRvIGFkZCBsZWdlbmQ9XCJsZWdlbmRcIiBiYWNrIHRvIG1hcCBkaXJlY3RpdmUgaWYgdXNpbmcgdGhpcyEhISEhISEhXHJcbiAgICAgICAgICAgICAgICAgICAgbGF5ZXJzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhc2VsYXllcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyYXk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkdyYXlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFnc0Jhc2VcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogXCJHcmF5XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdHJlZXRzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJTdHJlZXRzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZ3NCYXNlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6IFwiU3RyZWV0c1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9wbzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiV29ybGQgVG9wb2dyYXBoaWNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFnc0Jhc2VcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogXCJUb3BvZ3JhcGhpY1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbmF0aW9uYWw6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIk5hdGlvbmFsIEdlb2dyYXBoaWNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFnc0Jhc2VcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogXCJOYXRpb25hbEdlb2dyYXBoaWNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9jZWFuczoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiT2NlYW5zXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZ3NCYXNlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXI6IFwiT2NlYW5zXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogZmFsc2VcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkYXJrZ3JheToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRGFya0dyYXlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFnc0Jhc2VcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllcjogXCJEYXJrR3JheVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW1hZ2VyeToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiSW1hZ2VyeVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWdzQmFzZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyOiBcIkltYWdlcnlcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNoYWRlZHJlbGllZjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiU2hhZGVkIFJlbGllZlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWdzQmFzZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyOiBcIlNoYWRlZFJlbGllZlwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVycmFpbjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVGVycmFpblwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWdzQmFzZVwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyOiBcIlRlcnJhaW5cIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvdmVybGF5cyA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0blNpdGVzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2dyb3VwJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOidTVE4gU2l0ZXMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IHRydWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdG5TaXRlc0FsbDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6ICdncm91cCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTonU1ROIFNpdGVzIEFsbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ld1NpdGUgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ2dyb3VwJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiAnbmV3U2l0ZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTp0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyUGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNob3dPblNlbGVjdG9yOiBmYWxzZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBud2lzIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiVVNHUyByZWFsLXRpbWUgc3RyZWFtZ2FnZXNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBcImFnc0ZlYXR1cmVcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmwgOiBcImh0dHBzOi8vc3RubWFwc2VydmljZXMud2ltLnVzZ3MuZ292OjY0NDMvYXJjZ2lzL3Jlc3Qvc2VydmljZXMvU1ROL1NUTl9ud2lzX3J0L01hcFNlcnZlci8wXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludFRvTGF5ZXI6IGZ1bmN0aW9uIChnZW9qc29uLCBsYXRsbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBMLm1hcmtlcihsYXRsbmcsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpY29ucy5ud2lzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb25FYWNoRmVhdHVyZTogZnVuY3Rpb24oZmVhdHVyZSwgbGF5ZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbGF5ZXIuYmluZFBvcHVwKFwiVVNHUyBJRDogXCIgKyBmZWF0dXJlLnByb3BlcnRpZXMuTmFtZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllci5iaW5kUG9wdXAoZmVhdHVyZS5wcm9wZXJ0aWVzLlBvcHVwSW5mbyArICc8YnI+PGltZyBzdHlsZT1cIndpZHRoOiAzNTBweFwiIHNyYz1cImh0dHA6Ly93YXRlcmRhdGEudXNncy5nb3Yvbndpc3dlYi9ncmFwaD9hZ2VuY3lfY2Q9VVNHUyZzaXRlX25vPScgKyBmZWF0dXJlLnByb3BlcnRpZXMuTmFtZSArICcmcGFybV9jZD0wMDA2NSZwZXJpb2Q9N1wiPicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFocHMgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogXCJBSFBTIEdhZ2VzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZ3NGZWF0dXJlXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsIDogXCJodHRwczovL2lkcGdpcy5uY2VwLm5vYWEuZ292L2FyY2dpcy9yZXN0L3NlcnZpY2VzL05XU19PYnNlcnZhdGlvbnMvYWhwc19yaXZfZ2F1Z2VzL01hcFNlcnZlci8wXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmlzaWJsZTogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJPcHRpb25zIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xheWVyczogWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcGFjaXR5OiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb2ludFRvTGF5ZXI6IGZ1bmN0aW9uIChnZW9qc29uLCBsYXRsbmcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBMLm1hcmtlcihsYXRsbmcsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpY29uOiBpY29uc1tnZW9qc29uLnByb3BlcnRpZXMuc3RhdHVzXVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9uRWFjaEZlYXR1cmU6IGZ1bmN0aW9uKGZlYXR1cmUsIGxheWVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xheWVyLmJpbmRQb3B1cChcIlVTR1MgSUQ6IFwiICsgZmVhdHVyZS5wcm9wZXJ0aWVzLk5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGdyYXBoVVJMID0gXCJodHRwczovL3dhdGVyLndlYXRoZXIuZ292L3Jlc291cmNlcy9oeWRyb2dyYXBocy9cIiArIGZlYXR1cmUucHJvcGVydGllcy5nYXVnZWxpZC50b0xvd2VyQ2FzZSgpICsgXCJfaGcucG5nXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2xheWVyLmJpbmRQb3B1cChcIjxiPkdhZ2UgSUQ6IDwvYj5cIiArIGZlYXR1cmUucHJvcGVydGllcy5nYXVnZWxpZCArIFwiPC9icj48Yj5Mb2NhdGlvbjogPC9iPlwiICsgZmVhdHVyZS5wcm9wZXJ0aWVzLmxvY2F0aW9uICsgXCI8L2JyPjxiPldhdGVyYm9keTogPC9iPlwiICsgZmVhdHVyZS5wcm9wZXJ0aWVzLndhdGVyYm9keSArIFwiPC9icj48YSB0YXJnZXQ9J19ibGFuaycgaHJlZj0nXCIrIGZlYXR1cmUucHJvcGVydGllcy51cmwgKyBcIic+PGltZyB0aXRsZT0nQ2xpY2sgZm9yIGRldGFpbHMgcGFnZScgd2lkdGg9MzAwIHNyYz0nXCIgKyBncmFwaFVSTCArXCInLz48L2E+XCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXIuYmluZFBvcHVwKFwiPGI+R2FnZSBJRDogPC9iPlwiICsgZmVhdHVyZS5wcm9wZXJ0aWVzLmdhdWdlbGlkICsgXCI8L2JyPjxhIHRhcmdldD0nX2JsYW5rJyBocmVmPSdcIisgZmVhdHVyZS5wcm9wZXJ0aWVzLnVybCArIFwiJz48aW1nIHRpdGxlPSdDbGljayBmb3IgZGV0YWlscyBwYWdlJyB3aWR0aD0zMDAgc3JjPSdcIiArIGdyYXBoVVJMICtcIicvPjwvYT5cIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhZGFyIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiV2VhdGhlciBSYWRhclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWdzRHluYW1pY1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA6IFwiaHR0cHM6Ly9pZHBnaXMubmNlcC5ub2FhLmdvdi9hcmNnaXMvcmVzdC9zZXJ2aWNlcy9OV1NfT2JzZXJ2YXRpb25zL3JhZGFyX2Jhc2VfcmVmbGVjdGl2aXR5L01hcFNlcnZlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucyA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJzOiBbMF0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2F0Y2hXYXJuIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiTldTIFdhdGNoZXMgJiBXYXJuaW5nc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IFwiYWdzRHluYW1pY1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVybCA6IFwiaHR0cHM6Ly9pZHBnaXMubmNlcC5ub2FhLmdvdi9hcmNnaXMvcmVzdC9zZXJ2aWNlcy9OV1NfRm9yZWNhc3RzX0d1aWRhbmNlX1dhcm5pbmdzL3dhdGNoX3dhcm5fYWR2L01hcFNlcnZlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZpc2libGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyT3B0aW9ucyA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF5ZXJzOiBbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wYWNpdHk6IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmxvb2RUaHJlc2hvbGRzIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIG5hbWU6IFwiTldTIFdGTyBDb2FzdGFsIEZsb29kIFRocmVzaG9sZHNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB0eXBlOiBcImFnc0R5bmFtaWNcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB1cmwgOiBcImh0dHBzOi8vd3d3LmNzYy5ub2FhLmdvdi9hcmNnaXMvcmVzdC9zZXJ2aWNlcy9kY19zbHIvRmxvb2RfRnJlcXVlbmN5L01hcFNlcnZlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIHZpc2libGU6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGxheWVyT3B0aW9ucyA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgbGF5ZXJzOiBbMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgICAgIG9wYWNpdHk6IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG13YSA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkxpbWl0IE1vZGVyYXRlIFdhdmUgQWN0aW9uXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZ3NEeW5hbWljXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsIDogXCJodHRwczovL2hhemFyZHMuZmVtYS5nb3YvZ2lzL25maGwvcmVzdC9zZXJ2aWNlcy9wdWJsaWMvTkZITC9NYXBTZXJ2ZXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyczogWzE5XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9vZEJvdW5kcyA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBcIkZsb29kIEhhemFyZCBCb3VuZGFyaWVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZ3NEeW5hbWljXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsIDogXCJodHRwczovL2hhemFyZHMuZmVtYS5nb3YvZ2lzL25maGwvcmVzdC9zZXJ2aWNlcy9wdWJsaWMvTkZITC9NYXBTZXJ2ZXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyczogWzI3XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmbG9vZFpvbmVzIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6IFwiRmxvb2QgSGF6YXJkIFpvbmVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZTogXCJhZ3NEeW5hbWljXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsIDogXCJodHRwczovL2hhemFyZHMuZmVtYS5nb3YvZ2lzL25maGwvcmVzdC9zZXJ2aWNlcy9wdWJsaWMvTkZITC9NYXBTZXJ2ZXJcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2aXNpYmxlOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXllck9wdGlvbnMgOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxheWVyczogWzI4XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BhY2l0eTogMC43XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbGVnZW5kOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIHVybDogXCJodHRwOi8vZ2lzLnNyaC5ub2FhLmdvdi9hcmNnaXMvcmVzdC9zZXJ2aWNlcy9haHBzX2dhdWdlcy9NYXBTZXJ2ZXIvbGVnZW5kP2Y9anNvblwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICBsZWdlbmRDbGFzczogXCJpbmZvIGxlZ2VuZC1lc3JpXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIHBvc2l0aW9uOiBcImJvdHRvbWxlZnRcIlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTsvL2VuZCBhbmd1bGFyICRzY29wZS5leHRlbmQgc3RhdGVtZW50XHJcbiAgICAgICAgICAgICAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cclxuICAgICAgICAgICAgfSAvL2VuZCAtaWYgY3JlZGVudGlhbHMgcGFzcy0gc3RhdGVtZW50XHJcbiAgICAgICAgfV0pOy8vZW5kIGNvbnRyb2xsZXIgZnVuY3Rpb25cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU1ROQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQ29udHJvbGxlcnMnKTsgXHJcbiAgICBTVE5Db250cm9sbGVycy5jb250cm9sbGVyKCdtYWluQ3RybCcsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGRvY3VtZW50JywgJyRjb29raWVzJywgJyR1aWJNb2RhbCcsICckbG9jYXRpb24nLCAnJHN0YXRlJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkZG9jdW1lbnQsICRjb29raWVzLCAkdWliTW9kYWwsICRsb2NhdGlvbiwgJHN0YXRlKSB7XHJcbiAgICAgICAgICAgICRyb290U2NvcGUuaXNBdXRoID0ge307ICAgICAgICBcclxuICAgICAgICAgICAgJHJvb3RTY29wZS5hY3RpdmVNZW51ID0gJ2hvbWUnOyAvL3Njb3BlIHZhciBmb3Igc2V0dGluZyBhY3RpdmUgY2xhc3NcclxuICAgICAgICAgICAgaWYgKCRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gdW5kZWZpbmVkIHx8ICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5pc0F1dGgudmFsID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoJGRvY3VtZW50WzBdLmRvY3VtZW50TW9kZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJyb3dzZXJJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5XYXJuaW5nPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGlzIGFwcGxpY2F0aW9uIHVzZXMgZnVuY3Rpb25hbGl0eSB0aGF0IGlzIG5vdCBjb21wbGV0ZWx5IHN1cHBvcnRlZCBieSBJbnRlcm5ldCBFeHBsb3Jlci4gVGhlIHByZWZlcnJlZCBicm93c2VyIGlzIENocm9tZSAoYmlzb24gY29ubmVjdCkuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5pc0F1dGgudmFsID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUudXNlcnNOYW1lID0gJGNvb2tpZXMuZ2V0KCd1c2Vyc05hbWUnKTtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUudXNlcklEID0gJGNvb2tpZXMuZ2V0KCdtSUQnKTtcclxuICAgICAgICAgICAgICAgIHZhciBFdmVudE5hbWUgPSAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudE5hbWUnKTtcclxuICAgICAgICAgICAgICAgIGlmIChFdmVudE5hbWUgIT09IG51bGwgJiYgRXZlbnROYW1lICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zZXNzaW9uRXZlbnQgPSBcIlNlc3Npb24gRXZlbnQ6IFwiICsgRXZlbnROYW1lICsgXCIuXCI7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ21hcCcpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfV0pO1xyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIExvZ0luT3V0Q29udHJvbGxlciA9IGFuZ3VsYXIubW9kdWxlKCdMb2dJbk91dENvbnRyb2xsZXInLCBbXSk7XHJcblxyXG4gICAgTG9nSW5PdXRDb250cm9sbGVyLmNvbnRyb2xsZXIoJ2xvZ2luQ3RybCcsIFsnJHNjb3BlJywgJyRzdGF0ZScsICckbG9jYXRpb24nLCAnJHVpYk1vZGFsJywgJyRodHRwJywgJyRjb29raWVzJywgJyRyb290U2NvcGUnLCAnJGRvY3VtZW50JywgJ1NFUlZFUl9VUkwnLCAnTG9naW4nLCBcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkc3RhdGUsICRsb2NhdGlvbiwgJHVpYk1vZGFsLCAkaHR0cCwgJGNvb2tpZXMsICRyb290U2NvcGUsICRkb2N1bWVudCwgU0VSVkVSX1VSTCwgTG9naW4pIHtcclxuICAgICAgICAgICAgLy9sb2dpbiAvL1xyXG4gICAgICAgICAgICAvLyNyZWdpb24gQ0FQIGxvY2sgQ2hlY2tcclxuICAgICAgICAgICAgJCgnW3R5cGU9cGFzc3dvcmRdJykua2V5cHJlc3MoZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciAkcGFzc3dvcmQgPSAkKHRoaXMpLFxyXG4gICAgICAgICAgICAgICAgICAgIHRvb2x0aXBWaXNpYmxlID0gJCgnLnRvb2x0aXAnKS5pcygnOnZpc2libGUnKSxcclxuICAgICAgICAgICAgICAgICAgICBzID0gU3RyaW5nLmZyb21DaGFyQ29kZShlLndoaWNoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAocy50b1VwcGVyQ2FzZSgpID09PSBzICYmIHMudG9Mb3dlckNhc2UoKSAhPT0gcyAmJiAhZS5zaGlmdEtleSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICghdG9vbHRpcFZpc2libGUpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRwYXNzd29yZC50b29sdGlwKCdzaG93Jyk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0b29sdGlwVmlzaWJsZSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHBhc3N3b3JkLnRvb2x0aXAoJ2hpZGUnKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAvL2hpZGUgdGhlIHRvb2x0aXAgd2hlbiBtb3ZpbmcgYXdheSBmcm9tIHBhc3N3b3JkIGZpZWxkXHJcbiAgICAgICAgICAgICAgICAkcGFzc3dvcmQuYmx1cihmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRwYXNzd29yZC50b29sdGlwKCdoaWRlJyk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBDQVAgbG9jayBDaGVja1xyXG5cclxuICAgICAgICAgICAgaWYgKCRkb2N1bWVudFswXS5kb2N1bWVudE1vZGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGJyb3dzZXJJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPldhcm5pbmc8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+VGhpcyBhcHBsaWNhdGlvbiB1c2VzIGZ1bmN0aW9uYWxpdHkgdGhhdCBpcyBub3QgY29tcGxldGVseSBzdXBwb3J0ZWQgYnkgSW50ZXJuZXQgRXhwbG9yZXIuIFRoZSBwcmVmZXJyZWQgYnJvd3NlciBpcyBDaHJvbWUgKGJpc29uIGNvbm5lY3QpLjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07ICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgRGF0ZS5wcm90b3R5cGUuYWRkSG91cnMgPSBmdW5jdGlvbiAoaCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZXRIb3Vycyh0aGlzLmdldEhvdXJzKCkgKyBoKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VydmVyVVJMID0gU0VSVkVSX1VSTDtcclxuICAgICAgICAgICAgJHNjb3BlLnN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vJHNjb3BlLnN1YiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gdHJ1ZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgIHZhciBwb3N0RGF0YSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBcInVzZXJuYW1lXCI6ICRzY29wZS51c2VybmFtZSxcclxuICAgICAgICAgICAgICAgICAgICBcInBhc3N3b3JkXCI6ICRzY29wZS5wYXNzd29yZFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHZhciB1cCA9ICRzY29wZS51c2VybmFtZSArIFwiOlwiICsgJHNjb3BlLnBhc3N3b3JkO1xyXG4gICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgYnRvYSh1cCk7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIExvZ2luLmxvZ2luKHt9LCBcclxuICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1c2VyID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1c2VyICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2V0IHVzZXIgY29va2llcyAoY3JlZCwgdXNlcm5hbWUsIG5hbWUsIHJvbGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1c2Vyc05BTUUgPSB1c2VyLmZuYW1lICsgXCIgXCIgKyB1c2VyLmxuYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVuYyA9IGJ0b2EoJHNjb3BlLnVzZXJuYW1lLmNvbmNhdChcIjpcIiwgJHNjb3BlLnBhc3N3b3JkKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3NldCBleHBpcmF0aW9uIG9uIGNvb2tpZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBleHBpcmVEYXRlID0gbmV3IERhdGUoKS5hZGRIb3Vycyg4KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb29raWVzLnB1dCgnU1ROQ3JlZHMnLCBlbmMsIHsgZXhwaXJlczogZXhwaXJlRGF0ZSB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb29raWVzLnB1dCgnU1ROVXNlcm5hbWUnLCAkc2NvcGUudXNlcm5hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvb2tpZXMucHV0KCd1c2Vyc05hbWUnLCB1c2Vyc05BTUUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGNvb2tpZXMucHV0KCdtSUQnLCB1c2VyLm1lbWJlcl9pZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcm9sZU5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKHVzZXIucm9sZV9pZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMTpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZU5hbWUgPSBcIkFkbWluXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgMjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcm9sZU5hbWUgPSBcIk1hbmFnZXJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAzOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlTmFtZSA9IFwiRmllbGRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSA0OlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByb2xlTmFtZSA9IFwiUHVibGljXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvbGVOYW1lID0gXCJDaXRpemVuTWFuYWdlclwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRjb29raWVzLnB1dCgndXNlcnNSb2xlJywgcm9sZU5hbWUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuaXNBdXRoLnZhbCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnVzZXJzTmFtZSA9IHVzZXJzTkFNRTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUudXNlcklEID0gdXNlci5tZW1iZXJfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHJvb3RTY29wZS5yZXR1cm5Ub1N0YXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJHJvb3RTY29wZS5yZXR1cm5Ub1N0YXRlLCB7aWQ6ICRyb290U2NvcGUucmV0dXJuVG9TdGF0ZVBhcmFtc30pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUuZ28oJ21hcCcpOyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yID0gXCJMb2dpbiBGYWlsZWRcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbW9kYWwgZm9yIGVycm9yXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZXJlIHdhcyBhbiBlcnJvci48L3A+PHA+RXJyb3I6IHt7c3RhdHVzfX0gLSB7e3N0YXR1c1RleHR9fTwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMgPSBlcnJvclJlc3BvbnNlLnN0YXR1cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzVGV4dCA9IGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoZmllbGRGb2N1cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICApO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1dKTtcclxuXHJcbiAgICAvL2xvZ091dFxyXG4gICAgTG9nSW5PdXRDb250cm9sbGVyLmNvbnRyb2xsZXIoJ2xvZ291dEN0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRjb29raWVzJywgJyRsb2NhdGlvbicsIFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRjb29raWVzLCAkbG9jYXRpb24pIHtcclxuICAgICAgICAgICAgJHNjb3BlLmxvZ291dCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vY2xlYXIgJGNvb2tpZXNcclxuICAgICAgICAgICAgICAgICRjb29raWVzLnJlbW92ZSgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICRjb29raWVzLnJlbW92ZSgnU1ROVXNlcm5hbWUnKTtcclxuICAgICAgICAgICAgICAgICRjb29raWVzLnJlbW92ZSgndXNlcnNOYW1lJyk7XHJcbiAgICAgICAgICAgICAgICAkY29va2llcy5yZW1vdmUoJ3VzZXJzUm9sZScpO1xyXG4gICAgICAgICAgICAgICAgJGNvb2tpZXMucmVtb3ZlKCdtSUQnKTtcclxuICAgICAgICAgICAgICAgICRjb29raWVzLnJlbW92ZSgnU2Vzc2lvbkV2ZW50SUQnKTtcclxuICAgICAgICAgICAgICAgICRjb29raWVzLnJlbW92ZSgnU2Vzc2lvbkV2ZW50TmFtZScpO1xyXG4gICAgICAgICAgICAgICAgLy9jbGVhciAkcm9vdFNjb3BlXHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnRoaXNQYWdlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5yZXR1cm5Ub1N0YXRlID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5yZXR1cm5Ub1N0YXRlUGFyYW1zID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuYWN0aXZlTWVudSA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuc2Vzc2lvbkV2ZW50ID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5pc0F1dGggPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnNlYXJjaFRlcm0gPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnNlYXJjaFBhcmFtcyA9IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuYXBwcm92YWxTZWFyY2ggPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfV0pO1xyXG59KCkpO1xyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgLyogY29udHJvbGxlcnMuanMsICdsZWFmbGV0LWRpcmVjdGl2ZScndWkudW5pcXVlJywnbmdUYWdzSW5wdXQnLCovXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFNUTkNvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NUTkNvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgU1ROQ29udHJvbGxlcnMuY29udHJvbGxlcigncXVpY2tIV01DdHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckbG9jYXRpb24nLCAnJHN0YXRlJywgJyRodHRwJywgJyR1aWJNb2RhbCcsICckZmlsdGVyJyxcclxuICAgICAgICAnYWxsSG9yRGF0dW1zJywgJ2FsbEhvckNvbGxNZXRob2RzJywgJ2FsbFN0YXRlcycsICdhbGxDb3VudGllcycsICdhbGxPUFR5cGVzJywgJ2FsbFZlcnREYXR1bXMnLCAnYWxsVmVydENvbE1ldGhvZHMnLCBcclxuICAgICAgICAnYWxsT1BRdWFsaXRpZXMnLCAnYWxsSFdNVHlwZXMnLCAnYWxsSFdNUXVhbGl0aWVzJywgJ2FsbE1hcmtlcnMnLCAnU0lURScsICdPQkpFQ1RJVkVfUE9JTlQnLCAnSFdNJywgXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICRsb2NhdGlvbiwgJHN0YXRlLCAkaHR0cCwgJHVpYk1vZGFsLCAkZmlsdGVyLCBhbGxIb3JEYXR1bXMsIGFsbEhvckNvbGxNZXRob2RzLCBhbGxTdGF0ZXMsXHJcbiAgICAgICAgYWxsQ291bnRpZXMsIGFsbE9QVHlwZXMsIGFsbFZlcnREYXR1bXMsIGFsbFZlcnRDb2xNZXRob2RzLCBhbGxPUFF1YWxpdGllcywgYWxsSFdNVHlwZXMsIGFsbEhXTVF1YWxpdGllcywgYWxsTWFya2VycywgU0lURSwgT0JKRUNUSVZFX1BPSU5ULCBIV00pIHtcclxuICAgICAgICAgICAgaWYgKCRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gdW5kZWZpbmVkIHx8ICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmF1dGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbG9naW4nKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vZ2xvYmFsIHZhcnNcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUudGhpc1BhZ2UgPSBcIlF1aWNrIEhXTVwiO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnFod21Gb3JtID0ge307IC8vZm9ybXMgd2l0aGluIHRoZSBhY2NvcmRpb24gLlNpdGUsIC5PUCwgLkhXTVxyXG4gICAgICAgICAgICAgICAgLy9jYWxsZWQgYSBmZXcgdGltZXMgdG8gZm9ybWF0IGp1c3QgdGhlIGRhdGUgKG5vIHRpbWUpXHJcbiAgICAgICAgICAgICAgICB2YXIgbWFrZUFkYXRlID0gZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgYURhdGUgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChkICE9PSBcIlwiICYmIGQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3Byb3ZpZGVkIGRhdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgYURhdGUgPSBuZXcgRGF0ZShkKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciB5ZWFyID0gYURhdGUuZ2V0RnVsbFllYXIoKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9udGggPSBhRGF0ZS5nZXRNb250aCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBkYXkgPSAoJzAnICsgYURhdGUuZ2V0RGF0ZSgpKS5zbGljZSgtMik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1vbnRoTmFtZXMgPSBbXCJKYW5cIiwgXCJGZWJcIiwgXCJNYXJcIiwgXCJBcHJcIiwgXCJNYXlcIiwgXCJKdW5cIiwgXCJKdWxcIiwgXCJBdWdcIiwgXCJTZXBcIiwgXCJPY3RcIiwgXCJOb3ZcIiwgXCJEZWNcIl07XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRhdGVXT3RpbWUgPSBuZXcgRGF0ZShtb250aE5hbWVzW21vbnRoXSArIFwiIFwiICsgZGF5ICsgXCIsIFwiICsgeWVhcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVXT3RpbWU7XHJcbiAgICAgICAgICAgICAgICB9Oy8vZW5kIG1ha2VBZGF0ZSgpXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVjRGVnT1JkbXMgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZSA9IHsgTUVNQkVSX0lEOiAkY29va2llcy5nZXQoJ21JRCcpIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYU9QID0ge0RBVEVfRVNUQUJMSVNIRUQ6IG1ha2VBZGF0ZShcIlwiKX07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTSA9IHsgSFdNX0VOVklST05NRU5UOiAnUml2ZXJpbmUnLCBCQU5LOiAnTi9BJywgRkxBR19EQVRFOiBtYWtlQWRhdGUoXCJcIiksIFNUSUxMV0FURVI6MCB9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YXR1cyA9IHsgc2l0ZU9wZW46IHRydWUsIG9wT3BlbjogZmFsc2UsIGh3bU9wZW46IGZhbHNlIH07IC8vYWNjb3JkaW9uIGZvciBwYXJ0c1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlbW92ZU9QQ2FycmF5ID0gW107IC8vaG9sZGVyIGlmIHRoZXkgcmVtb3ZlIGFueSBPUCBjb250cm9sc1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFkZGVkSWRlbnRpZmllcnMgPSBbXTsgLy9ob2xkZXIgZm9yIGFkZGVkIElkZW50aWZpZXJzXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0NvbnRyb2xJRGlucHV0ID0gZmFsc2U7IC8vaW5pdGlhbGx5IGhpZGUgdGhlIGFyZWEgY29udGFpbmluZyBhZGRlZCBjb250cm9sIElkZW50aWZpZXJzXHJcbiAgICAgICAgICAgICAgICAvL2Ryb3Bkb3duc1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmhvckRhdHVtTGlzdCA9IGFsbEhvckRhdHVtczsgJHNjb3BlLmhvckNvbGxNZXRob2RMaXN0ID0gYWxsSG9yQ29sbE1ldGhvZHM7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVMaXN0ID0gYWxsU3RhdGVzOyAkc2NvcGUuYWxsQ291bnR5TGlzdCA9IGFsbENvdW50aWVzOyAkc2NvcGUuc3RhdGVDb3VudHlMaXN0ID0gW107XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUub3BUeXBlTGlzdCA9IGFsbE9QVHlwZXM7ICRzY29wZS52ZXJ0RGF0dW1MaXN0ID0gYWxsVmVydERhdHVtcztcclxuICAgICAgICAgICAgICAgICRzY29wZS52ZXJ0Q29sbE1ldGhvZExpc3QgPSBhbGxWZXJ0Q29sTWV0aG9kczsgJHNjb3BlLm9wUXVhbExpc3QgPSBhbGxPUFF1YWxpdGllcztcclxuICAgICAgICAgICAgICAgICRzY29wZS5od21UeXBlTGlzdCA9IGFsbEhXTVR5cGVzOyAkc2NvcGUuaHdtUXVhbExpc3QgPSBhbGxIV01RdWFsaXRpZXM7ICRzY29wZS5tYXJrZXJMaXN0ID0gYWxsTWFya2VycztcclxuICAgICAgICAgICAgICAgIC8vZGVmYXVsdCByYWRpb3NcclxuICAgICAgICAgICAgICAgICRzY29wZS5GVG9yTUVURVIgPSAnZnQnO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkZUb3JDTSA9ICdmdCc7XHJcblxyXG4gICAgICAgICAgICAgICAgLy93YW50IHRvIGFkZCBpZGVudGlmaWVyXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWRkTmV3SWRlbnRpZmllciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWRkZWRJZGVudGlmaWVycy5wdXNoKHsgT0JKRUNUSVZFX1BPSU5UX0lEOiAkc2NvcGUuYU9QLk9CSkVDVElWRV9QT0lOVF9JRCwgSURFTlRJRklFUjogXCJcIiwgSURFTlRJRklFUl9UWVBFOiBcIlwiIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93Q29udHJvbElEaW5wdXQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfTsvL2VuZCBhZGROZXdJZGVudGlmaWVyIGZvciBPUFxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBEYXRlcGlja2VyXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tycyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLm9wZW4gPSBmdW5jdGlvbiAoJGV2ZW50LCB3aGljaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGVwaWNrcnNbd2hpY2hdID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gbGF0L2xvbmcgc3R1ZmZcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZGVjRGVnT1JkbXMudmFsID0gJ2RkJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5ETVMgPSB7fTsgLy9ob2xkZXIgb2YgZGVnIG1pbiBzZWMgdmFsdWVzXHJcblxyXG4gICAgICAgICAgICAgICAgLy9jb252ZXJ0IGRlZyBtaW4gc2VjIHRvIGRlYyBkZWdyZWVzXHJcbiAgICAgICAgICAgICAgICB2YXIgYXppbXV0aCA9IGZ1bmN0aW9uIChkZWcsIG1pbiwgc2VjKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGF6aSA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlZyA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYXppID0gLTEuMCAqIGRlZyArIDEuMCAqIG1pbiAvIDYwLjAgKyAxLjAgKiBzZWMgLyAzNjAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoLTEuMCAqIGF6aSkudG9GaXhlZCg1KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGF6aSA9IDEuMCAqIGRlZyArIDEuMCAqIG1pbiAvIDYwLjAgKyAxLjAgKiBzZWMgLyAzNjAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoYXppKS50b0ZpeGVkKDUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy9jb252ZXJ0IGRlYyBkZWdyZWVzIHRvIGRtc1xyXG4gICAgICAgICAgICAgICAgdmFyIGRlZ190b19kbXMgPSBmdW5jdGlvbiAoZGVnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGRlZyA8IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVnID0gZGVnLnRvU3RyaW5nKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2xvbmdpdHVkZSwgcmVtb3ZlIHRoZSAtIHNpZ25cclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVnID0gZGVnLnN1YnN0cmluZygxKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGQgPSBNYXRoLmZsb29yKGRlZyk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1pbmZsb2F0ID0gKGRlZyAtIGQpICogNjA7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG0gPSBNYXRoLmZsb29yKG1pbmZsb2F0KTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcyA9ICgobWluZmxvYXQgLSBtKSAqIDYwKS50b0ZpeGVkKDMpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKFwiXCIgKyBkICsgXCI6XCIgKyBtICsgXCI6XCIgKyBzKTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy90aGV5IGNoYW5nZWQgcmFkaW8gYnV0dG9uIGZvciBkbXMgZGVjIGRlZ1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmxhdExvbmdDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5kZWNEZWdPUmRtcy52YWwgPT0gXCJkZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhleSBjbGlja2VkIERlYyBEZWcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MQURlZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnZlcnQgd2hhdCdzIGhlcmUgZm9yIGVhY2ggbGF0IGFuZCBsb25nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuTEFUSVRVREVfREQgPSBhemltdXRoKCRzY29wZS5ETVMuTEFEZWcsICRzY29wZS5ETVMuTEFNaW4sICRzY29wZS5ETVMuTEFTZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLkxPTkdJVFVERV9ERCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MT0RlZywgJHNjb3BlLkRNUy5MT01pbiwgJHNjb3BlLkRNUy5MT1NlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhleSBjbGlja2VkIGRtcyAoY29udmVydCBsYXQvbG9uZyB0byBkbXMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNpdGUuTEFUSVRVREVfREQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGxhdERNUyA9IChkZWdfdG9fZG1zKCRzY29wZS5hU2l0ZS5MQVRJVFVERV9ERCkpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFkRE1TYXJyYXkgPSBsYXRETVMuc3BsaXQoJzonKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTEFEZWcgPSBsYWRETVNhcnJheVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTEFNaW4gPSBsYWRETVNhcnJheVsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTEFTZWMgPSBsYWRETVNhcnJheVsyXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9uZ0RNUyA9IGRlZ190b19kbXMoJHNjb3BlLmFTaXRlLkxPTkdJVFVERV9ERCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9uZ0RNU2FycmF5ID0gbG9uZ0RNUy5zcGxpdCgnOicpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MT0RlZyA9IGxvbmdETVNhcnJheVswXSAqIC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MT01pbiA9IGxvbmdETVNhcnJheVsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTE9TZWMgPSBsb25nRE1TYXJyYXlbMl07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vICBsYXQvbG9uZyA9aXMgbnVtYmVyXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaXNOdW0gPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRoZUV2ZW50ID0gZXZ0IHx8IHdpbmRvdy5ldmVudDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gdGhlRXZlbnQua2V5Q29kZSB8fCB0aGVFdmVudC53aGljaDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoa2V5ICE9IDQ2ICYmIGtleSAhPSA0NSAmJiBrZXkgPiAzMSAmJiAoa2V5IDwgNDggfHwga2V5ID4gNTcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoZUV2ZW50LnJldHVyblZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGVFdmVudC5wcmV2ZW50RGVmYXVsdCkgdGhlRXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgIC8vZ2V0IGFkZHJlc3MgcGFydHMgYW5kIGV4aXN0aW5nIHNpdGVzIFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmdldEFkZHJlc3MgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jbGVhciB0aGVtIGFsbCBmaXJzdFxyXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSAkc2NvcGUuYVNpdGUuQUREUkVTUzsgZGVsZXRlICRzY29wZS5hU2l0ZS5DSVRZOyBkZWxldGUgJHNjb3BlLmFTaXRlLlNUQVRFO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZUNvdW50eUxpc3QgPSBbXTsgZGVsZXRlICRzY29wZS5hU2l0ZS5aSVA7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSB0cnVlOyAvL2xvYWRpbmcuLi5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgZ2VvY29kZXIgPSBuZXcgZ29vZ2xlLm1hcHMuR2VvY29kZXIoKTsgLy9yZXZlcnNlIGFkZHJlc3MgbG9va3VwXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhdGxuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcoJHNjb3BlLmFTaXRlLkxBVElUVURFX0RELCAkc2NvcGUuYVNpdGUuTE9OR0lUVURFX0REKTtcclxuICAgICAgICAgICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKHsgJ2xhdExuZyc6IGxhdGxuZyB9LCBmdW5jdGlvbiAocmVzdWx0cywgc3RhdHVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT0spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcGFyc2UgdGhlIHJlc3VsdHMgb3V0IGludG8gY29tcG9uZW50cyAoJ3N0cmVldF9udW1iZXInLCAncm91dGUnLCAnbG9jYWxpdHknLCAnYWRtaW5pc3RyYXRpdmVfYXJlYV9sZXZlbF8yJywgJ2FkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMScsICdwb3N0YWxfY29kZSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhZGRyZXNzX2NvbXBvbmVudHMgPSByZXN1bHRzWzBdLmFkZHJlc3NfY29tcG9uZW50cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb21wb25lbnRzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2goYWRkcmVzc19jb21wb25lbnRzLCBmdW5jdGlvbiAoaywgdjEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2godjEudHlwZXMsIGZ1bmN0aW9uIChrMiwgdjIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50c1t2Ml0gPSB2MS5sb25nX25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuQUREUkVTUyA9IGNvbXBvbmVudHMuc3RyZWV0X251bWJlciAhPT0gdW5kZWZpbmVkID8gY29tcG9uZW50cy5zdHJlZXRfbnVtYmVyICsgXCIgXCIgKyBjb21wb25lbnRzLnJvdXRlIDogY29tcG9uZW50cy5yb3V0ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5DSVRZID0gY29tcG9uZW50cy5sb2NhbGl0eTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc1N0YXRlID0gJHNjb3BlLnN0YXRlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuU1RBVEVfTkFNRSA9PSBjb21wb25lbnRzLmFkbWluaXN0cmF0aXZlX2FyZWFfbGV2ZWxfMTsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1N0YXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuU1RBVEUgPSB0aGlzU3RhdGUuU1RBVEVfQUJCUkVWO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0ZUNvdW50eUxpc3QgPSAkc2NvcGUuYWxsQ291bnR5TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuU1RBVEVfSUQgPT0gdGhpc1N0YXRlLlNUQVRFX0lEOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNpdGUuQ09VTlRZID0gY29tcG9uZW50cy5hZG1pbmlzdHJhdGl2ZV9hcmVhX2xldmVsXzI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTaXRlLlpJUCA9IGNvbXBvbmVudHMucG9zdGFsX2NvZGU7ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLiRhcHBseSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiVGhlIExhdGl0dWRlL0xvbmdpdHVkZSBkaWQgbm90IHJldHVybiBhIGxvY2F0aW9uIHdpdGhpbiB0aGUgVS5TLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIlRoZXJlIHdhcyBhbiBlcnJvciBnZXR0aW5nIGFkZHJlc3MuIFBsZWFzZSB0cnkgYWdhaW4uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gXHJcbiAgICAgICAgICAgICAgICB9Oy8vZW5kIGdldEFkZHJlc3MoKVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBsYXQvbG9uZyBzdHVmZlxyXG4gICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIHdhdGNoIGZvciB0aGUgc2Vzc2lvbiBldmVudCB0byBjaGFuZ2UgYW5kIHVwZGF0ZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7IHJldHVybiAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudE5hbWUnKTsgfSwgZnVuY3Rpb24gKG5ld1ZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlc3Npb25FdmVudE5hbWUgPSBuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkID8gbmV3VmFsdWUgOiBcIkFsbCBFdmVudHNcIjtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vzc2lvbkV2ZW50RXhpc3RzID0gJHNjb3BlLnNlc3Npb25FdmVudE5hbWUgIT0gXCJBbGwgRXZlbnRzXCIgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL3doZW4gU0lURS5zdGF0ZSBjaGFuZ2VzLCB1cGRhdGUgY291bnR5IGxpc3RcclxuICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVDb3VudHlMaXN0ID0gZnVuY3Rpb24gKHMpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc1N0YXRlID0gJHNjb3BlLnN0YXRlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHN0KSB7IHJldHVybiBzdC5TVEFURV9BQkJSRVYgPT0gczsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YXRlQ291bnR5TGlzdCA9ICRzY29wZS5hbGxDb3VudHlMaXN0LmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5TVEFURV9JRCA9PSB0aGlzU3RhdGUuU1RBVEVfSUQ7IH0pO1xyXG4gICAgICAgICAgICAgICAgfTsvL2VuZCB1cGRhdGVDb3VudHlMaXN0KCkgZm9yIFNpdGVcclxuXHJcbiAgICAgICAgICAgICAgICAvL21ha2UgdW5jZXJ0YWludHkgY2xlYXJlZCBhbmQgZGlzYWJsZWQgd2hlbiAndW5xdWFudGlmaWVkJyBpcyBjaGVja2VkXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuVW5xdWFudENoZWNrZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hT1AuVU5RVUFOVElGSUVEID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hT1AuVU5DRVJUQUlOVFkgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgfTsvL2VuZCB1bnF1YW50Q2hlY2tlZCgpIGZvciBvcFxyXG5cclxuICAgICAgICAgICAgICAgIC8vanVzdCBuZWVkIGFuIE9CSkVDVElWRV9QT0lOVCBvYmplY3QgdG8gcG9zdC9wdXRcclxuICAgICAgICAgICAgICAgIHZhciB0cmltT1AgPSBmdW5jdGlvbiAob3ApIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgT0JKX1BUID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBPQkpFQ1RJVkVfUE9JTlRfSUQ6IG9wLk9CSkVDVElWRV9QT0lOVF9JRCAhPT0gdW5kZWZpbmVkID8gb3AuT0JKRUNUSVZFX1BPSU5UX0lEIDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgTkFNRTogb3AuTkFNRSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgREVTQ1JJUFRJT046IG9wLkRFU0NSSVBUSU9OLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBFTEVWX0ZUOiBvcC5FTEVWX0ZUICE9PSB1bmRlZmluZWQgPyBvcC5FTEVWX0ZUIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgREFURV9FU1RBQkxJU0hFRDogb3AuREFURV9FU1RBQkxJU0hFRCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgT1BfSVNfREVTVFJPWUVEOiBvcC5PUF9JU19ERVNUUk9ZRUQgIT09IHVuZGVmaW5lZCA/IG9wLk9QX0lTX0RFU1RST1lFRCA6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9QX05PVEVTOiBvcC5PUF9OT1RFUyAhPT0gdW5kZWZpbmVkID8gb3AuT1BfTk9URVMgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBTSVRFX0lEOiBvcC5TSVRFX0lELFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBWREFUVU1fSUQ6IG9wLlZEQVRVTV9JRCAhPT0gdW5kZWZpbmVkID8gb3AuVkRBVFVNX0lEIDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgTEFUSVRVREVfREQ6IG9wLkxBVElUVURFX0RELFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBMT05HSVRVREVfREQ6IG9wLkxPTkdJVFVERV9ERCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgSERBVFVNX0lEOiBvcC5IREFUVU1fSUQgIT09IHVuZGVmaW5lZCA/IG9wLkhEQVRVTV9JRCA6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEhDT0xMRUNUX01FVEhPRF9JRDogb3AuSENPTExFQ1RfTUVUSE9EX0lEICE9PSB1bmRlZmluZWQgPyBvcC5IQ09MTEVDVF9NRVRIT0RfSUQgOiAwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBWQ09MTEVDVF9NRVRIT0RfSUQ6IG9wLlZDT0xMRUNUX01FVEhPRF9JRCAhPT0gdW5kZWZpbmVkID8gb3AuVkNPTExFQ1RfTUVUSE9EX0lEIDogMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgT1BfVFlQRV9JRDogb3AuT1BfVFlQRV9JRCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgREFURV9SRUNPVkVSRUQ6IG9wLkRBVEVfUkVDT1ZFUkVEICE9PSB1bmRlZmluZWQgPyBvcC5EQVRFX1JFQ09WRVJFRCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFVOQ0VSVEFJTlRZOiBvcC5VTkNFUlRBSU5UWSAhPT0gdW5kZWZpbmVkID8gb3AuVU5DRVJUQUlOVFkgOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBVTlFVQU5USUZJRUQ6IG9wLlVOUVVBTlRJRklFRCAhPT0gdW5kZWZpbmVkID8gb3AuVU5RVUFOVElGSUVEIDogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgT1BfUVVBTElUWV9JRDogb3AuT1BfUVVBTElUWV9JRCAhPT0gdW5kZWZpbmVkID8gb3AuT1BfUVVBTElUWV9JRCA6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gT0JKX1BUO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2ZpeCBkZWZhdWx0IHJhZGlvcyBhbmQgbGF0L2xvbmdcclxuICAgICAgICAgICAgICAgIHZhciBmb3JtYXREZWZhdWx0cyA9IGZ1bmN0aW9uICh0aGVPUCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vJHNjb3BlLk9QLkZUb3JNRVRFUiBuZWVkcyB0byBiZSAnZnQnLiBpZiAnbWV0ZXInID09Y29udmVydCB2YWx1ZSB0byBmdCBcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhlT1AuRlRvck1FVEVSID09IFwibWV0ZXJcIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYU9QLkZUb3JNRVRFUiA9ICdmdCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hT1AuRUxFVl9GVCA9ICRzY29wZS5hT1AuRUxFVl9GVCAqIDMuMjgwODtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy8kc2NvcGUuT1AuRlRvckNNIG5lZWRzIHRvIGJlICdmdCcuIGlmICdjbScgPT1jb252ZXJ0IHZhbHVlIHRvIGZ0IFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGVPUC5GVG9yQ00gPT0gXCJjbVwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hT1AuRlRvckNNID0gJ2Z0JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFPUC5VTkNFUlRBSU5UWSA9ICRzY29wZS5hT1AuVU5DRVJUQUlOVFkgLyAzMC40ODtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaXRlRXJyb3JzID0gZmFsc2U7ICRzY29wZS5vcEVycm9ycyA9IGZhbHNlOyAkc2NvcGUuaHdtRXJyb3JzID0gZmFsc2U7IFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNyZWF0ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gdHJ1ZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGhlRm9ybSA9ICRzY29wZS5xaHdtRm9ybS5xdWlja0hXTTsgJHNjb3BlLnNpdGVFcnJvcnMgPSBmYWxzZTsgJHNjb3BlLm9wRXJyb3JzID0gZmFsc2U7ICRzY29wZS5od21FcnJvcnMgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhlRm9ybS4kdmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zaXRlIFBPU1RcclxuICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlZFNpdGVJRCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYVNpdGUuTE9OR0lUVURFX0REID4gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hU2l0ZS5MT05HSVRVREVfREQgPSAkc2NvcGUuYVNpdGUuTE9OR0lUVURFX0REICogKC0xKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9QT1NUIHNpdGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgU0lURS5zYXZlKCRzY29wZS5hU2l0ZSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZFNpdGVJRCA9IHJlc3BvbnNlLlNJVEVfSUQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYU9QLlNJVEVfSUQgPSBjcmVhdGVkU2l0ZUlEOyAkc2NvcGUuYU9QLkxBVElUVURFX0REID0gcmVzcG9uc2UuTEFUSVRVREVfREQ7ICRzY29wZS5hT1AuTE9OR0lUVURFX0REID0gcmVzcG9uc2UuTE9OR0lUVURFX0REO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFPUC5IREFUVU1fSUQgPSByZXNwb25zZS5IREFUVU1fSUQ7ICRzY29wZS5hT1AuSENPTExFQ1RfTUVUSE9EX0lEID0gcmVzcG9uc2UuSENPTExFQ1RfTUVUSE9EX0lEO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLlNJVEVfSUQgPSBjcmVhdGVkU2l0ZUlEOyAkc2NvcGUuYUhXTS5XQVRFUkJPRFkgPSByZXNwb25zZS5XQVRFUkJPRFk7ICRzY29wZS5hSFdNLkxBVElUVURFX0REID0gcmVzcG9uc2UuTEFUSVRVREVfREQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5MT05HSVRVREVfREQgPSByZXNwb25zZS5MT05HSVRVREVfREQ7ICRzY29wZS5hSFdNLkhDT0xMRUNUX01FVEhPRF9JRCA9IHJlc3BvbnNlLkhDT0xMRUNUX01FVEhPRF9JRDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLkhEQVRVTV9JRCA9IHJlc3BvbnNlLkhEQVRVTV9JRDsgJHNjb3BlLmFIV00uRkxBR19URUFNX0lEID0gcmVzcG9uc2UuTUVNQkVSX0lEOyAkc2NvcGUuYUhXTS5FVkVOVF9JRCA9ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL09QIHN0dWZmIFBPU1RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjcmVhdGVkT1AgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vcG9zdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0RGVmYXVsdHMoJHNjb3BlLmFPUCk7IC8vJHNjb3BlLk9QLkZUb3JNRVRFUiwgRlRvckNNLCBkZWNEZWdPUmRtcyAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBPUHRvUE9TVCA9IHRyaW1PUCgkc2NvcGUuYU9QKTsgLy9tYWtlIGl0IGFuIE9CSkVDVElWRV9QT0lOVCBmb3Igc2F2aW5nXHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgT0JKRUNUSVZFX1BPSU5ULnNhdmUoT1B0b1BPU1QsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkT1AgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFkZGVkSWRlbnRpZmllcnMubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3Bvc3QgZWFjaCBvbmVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgb3BjID0gMDsgb3BjIDwgJHNjb3BlLmFkZGVkSWRlbnRpZmllcnMubGVuZ3RoOyBvcGMrKylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIE9CSkVDVElWRV9QT0lOVC5jcmVhdGVPUENvbnRyb2xJRCh7IGlkOiByZXNwb25zZS5PQkpFQ1RJVkVfUE9JTlRfSUQgfSwgJHNjb3BlLmFkZGVkSWRlbnRpZmllcnNbb3BjXSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vSFdNIHN0dWZmIFBPU1RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlZEhXTSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgdGhleSBlbnRlcmVkIGEgc3VydmV5IGRhdGUgb3IgZWxldmF0aW9uLCB0aGVuIHNldCBzdXJ2ZXkgbWVtYmVyIGFzIHRoZSBmbGFnIG1lbWJlciAoZmxhZ2dpbmcgYW5kIHN1cnZleWluZyBhdCBzYW1lIHRpbWVcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFIV00uU1VSVkVZX0RBVEUgIT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uU1VSVkVZX1RFQU1fSUQgPSAkc2NvcGUuYUhXTS5GTEFHX1RFQU1fSUQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUhXTS5FTEVWX0ZUICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgdGhleSBhZGRlZCB0aGUgc3VydmV5IGRhdGUgaWYgdGhleSBhZGRlZCBhbiBlbGV2YXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hSFdNLlNVUlZFWV9EQVRFID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5TVVJWRVlfREFURSA9IG1ha2VBZGF0ZShcIlwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLlNVUlZFWV9URUFNX0lEID0gJHNjb3BlLmFIV00uRkxBR19URUFNX0lEO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBIV00uc2F2ZSgkc2NvcGUuYUhXTSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJRdWljayBIV00gY3JlYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL1NpdGUvJyArIGNyZWF0ZWRTaXRlSUQgKyAnL1NpdGVEYXNoYm9hcmQnKS5yZXBsYWNlKCk7Ly8ubm90aWZ5KGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFwcGx5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIEhXTS5zYXZlKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pOy8vZW5kIE9QLnNhdmUoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBTSVRFLnNhdmUoKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7Ly8gbG9hZGluZy4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMuc2l0ZU9wZW4gPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdHVzLm9wT3BlbiA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGF0dXMuaHdtT3BlbiA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoXCJbbmFtZT0nXCIgKyB0aGVGb3JtLiRuYW1lICsgXCInXVwiKS5maW5kKCcubmctaW52YWxpZDp2aXNpYmxlOmZpcnN0JykuZm9jdXMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGVGb3JtLlNJVEVfREVTQ1JJUFRJT04uJGludmFsaWQgfHwgdGhlRm9ybS5MQVRJVFVERV9ERC4kaW52YWxpZCB8fCB0aGVGb3JtLkxPTkdJVFVERV9ERC4kaW52YWxpZCB8fCB0aGVGb3JtLkhEQVRVTV9JRC4kaW52YWxpZCB8fCB0aGVGb3JtLkhDT0xMRUNUX01FVEhPRF9JRC4kaW52YWxpZCB8fCB0aGVGb3JtLldBVEVSQk9EWS4kaW52YWxpZCB8fCB0aGVGb3JtLlNUQVRFLiRpbnZhbGlkdiB8fCB0aGVGb3JtLkNPVU5UWS4kaW52YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVFcnJvcnMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGVGb3JtLk9QX1RZUEVfSUQuJGludmFsaWQgfHwgdGhlRm9ybS5OQU1FLiRpbnZhbGlkIHx8IHRoZUZvcm0uREVTQ1JJUFRJT04uJGludmFsaWQgfHwgdGhlRm9ybS5kZS4kaW52YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9wRXJyb3JzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhlRm9ybS5IV01fVFlQRV9JRC4kaW52YWxpZCB8fCB0aGVGb3JtLkhXTV9FTlZJUk9OTUVOVC4kaW52YWxpZCB8fCB0aGVGb3JtLkhXTV9RVUFMSVRZX0lELiRpbnZhbGlkIHx8IHRoZUZvcm0uZmQuJGludmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5od21FcnJvcnMgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIlF1aWNrIEhXTSBub3QgY3JlYXRlZC5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgICAgICB9Ly9lbmQgZWxzZSAobG9nZ2VkIGluKVxyXG4gICAgICAgIH1dKTtcclxuICBcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgLyogY29udHJvbGxlcnMuanMsICdsZWFmbGV0LWRpcmVjdGl2ZScndWkudW5pcXVlJywnbmdUYWdzSW5wdXQnLCovXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIE1vZGFsQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnTW9kYWxDb250cm9sbGVycycpO1xyXG4gICAgTW9kYWxDb250cm9sbGVycy5jb250cm9sbGVyKCdod21Nb2RhbEN0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRjb29raWVzJywgJyRodHRwJywgJyRzY2UnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCAnJHVpYk1vZGFsJywgJ1NFUlZFUl9VUkwnLCdGSUxFX1NUQU1QJywgJ2FsbERyb3Bkb3ducycsICdTaXRlX0ZpbGVzJywgJ3RoaXNIV00nLCAnaHdtQXBwcm92YWwnLCAnYWdlbmN5TGlzdCcsICdod21TaXRlJywgJ2FsbE1lbWJlcnMnLCAnSFdNJywgJ1NPVVJDRScsICdGSUxFJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkY29va2llcywgJGh0dHAsICRzY2UsICR1aWJNb2RhbEluc3RhbmNlLCAkdWliTW9kYWwsIFNFUlZFUl9VUkwsIEZJTEVfU1RBTVAsIGFsbERyb3Bkb3ducywgU2l0ZV9GaWxlcywgdGhpc0hXTSwgaHdtQXBwcm92YWwsIGFnZW5jeUxpc3QsIGh3bVNpdGUsIGFsbE1lbWJlcnMsIEhXTSwgU09VUkNFLCBGSUxFKSB7XHJcbiAgICAgICAgICAgIC8vZHJvcGRvd25zXHJcbiAgICAgICAgICAgICRzY29wZS52aWV3ID0geyBIV012YWw6ICdkZXRhaWwnIH07XHJcbiAgICAgICAgICAgICRzY29wZS5oID0geyBoT3BlbjogdHJ1ZSwgaEZpbGVPcGVuOiBmYWxzZSB9OyAvL2FjY29yZGlvbnNcclxuICAgICAgICAgICAgJHNjb3BlLmh3bVR5cGVMaXN0ID0gYWxsRHJvcGRvd25zWzBdO1xyXG4gICAgICAgICAgICAkc2NvcGUuaHdtUXVhbExpc3QgPSBhbGxEcm9wZG93bnNbMV07XHJcbiAgICAgICAgICAgICRzY29wZS5IRGF0dW1zTGlzdCA9IGFsbERyb3Bkb3duc1syXTtcclxuICAgICAgICAgICAgJHNjb3BlLmhDb2xsTUxpc3QgPSBhbGxEcm9wZG93bnNbM107XHJcbiAgICAgICAgICAgICRzY29wZS5WRGF0dW1zTGlzdCA9IGFsbERyb3Bkb3duc1s0XTtcclxuICAgICAgICAgICAgJHNjb3BlLnZDb2xsTUxpc3QgPSBhbGxEcm9wZG93bnNbNV07XHJcbiAgICAgICAgICAgICRzY29wZS5tYXJrZXJMaXN0ID0gYWxsRHJvcGRvd25zWzZdO1xyXG4gICAgICAgICAgICAkc2NvcGUuZXZlbnRMaXN0ID0gYWxsRHJvcGRvd25zWzddOyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAkc2NvcGUuZmlsZVR5cGVMaXN0ID0gYWxsRHJvcGRvd25zWzhdOyAvL3VzZWQgaWYgY3JlYXRpbmcvZWRpdGluZyBIV00gZmlsZSAgICBcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZXMgPSBTaXRlX0ZpbGVzLmdldEFsbFNpdGVGaWxlcygpO1xyXG4gICAgICAgICAgICAkc2NvcGUuSFdNRmlsZXMgPSB0aGlzSFdNICE9PSBcImVtcHR5XCIgPyAkc2NvcGUuYWxsU0ZpbGVzLmZpbHRlcihmdW5jdGlvbiAoc2YpIHsgcmV0dXJuIHNmLmh3bV9pZCA9PSB0aGlzSFdNLmh3bV9pZDsgfSkgOiBbXTsvLyBob2xkZXIgZm9yIGh3bSBmaWxlcyBhZGRlZFxyXG4gICAgICAgICAgICAkc2NvcGUuaHdtSW1hZ2VGaWxlcyA9ICRzY29wZS5IV01GaWxlcy5maWx0ZXIoZnVuY3Rpb24gKGhmKSB7IHJldHVybiBoZi5maWxldHlwZV9pZCA9PT0gMTsgfSk7IC8vaW1hZ2UgZmlsZXMgZm9yIGNhcm91c2VsXHJcbiAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgLy9oaWRkZW4gZm9ybSB0byBhZGQgZmlsZSB0byBod21cclxuICAgICAgICAgICAgJHNjb3BlLnVzZXJSb2xlID0gJGNvb2tpZXMuZ2V0KCd1c2Vyc1JvbGUnKTtcclxuICAgICAgICAgICAgJHNjb3BlLkZsYWdNZW1iZXIgPSBcIlwiOyAvL2p1c3QgZm9yIHNob3cgb24gcGFnZVxyXG4gICAgICAgICAgICAvLyRzY29wZS5TdXJ2ZXlNZW1iZXIgPSBcIlwiOyAvL2p1c3QgZm9yIHNob3cgb24gcGFnZVxyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd0V2ZW50REQgPSBmYWxzZTsgLy90b2dnbGUgdG8gc2hvdy9oaWRlIGV2ZW50IGRkIChhZG1pbiBvbmx5KVxyXG4gICAgICAgICAgICAkc2NvcGUuYWRtaW5DaGFuZ2VkID0ge307IC8vd2lsbCBob2xkIGV2ZW50X2lkIGlmIGFkbWluIGNoYW5nZXMgaXQuIGFwcGx5IHdoZW4gUFVUdGluZ1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VydmVyVVJMID0gU0VSVkVSX1VSTDsgLy9jb25zdGFudCB3aXRoIHN0bnRlc3Qud2ltLnVzZ3MuZ292L1NUTlNlcnZpY2VzMiBcclxuICAgICAgICAgICAgLy9idXR0b24gY2xpY2sgdG8gc2hvdyBldmVudCBkcm9wZG93biB0byBjaGFuZ2UgaXQgb24gZXhpc3RpbmcgaHdtIChhZG1pbiBvbmx5KVxyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd0NoYW5nZUV2ZW50REQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0V2ZW50REQgPSAhJHNjb3BlLnNob3dFdmVudEREO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgLy9jaGFuZ2UgZXZlbnQgPSBhcHBseSBpdCB0byB0aGUgJHNjb3BlLkV2ZW50TmFtZVxyXG4gICAgICAgICAgICAkc2NvcGUuQ2hhbmdlRXZlbnQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuRXZlbnROYW1lID0gJHNjb3BlLmV2ZW50TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7IHJldHVybiBlbC5ldmVudF9pZCA9PSAkc2NvcGUuYWRtaW5DaGFuZ2VkLmV2ZW50X2lkOyB9KVswXS5ldmVudF9uYW1lO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyAkc2NvcGUuc2Vzc2lvbkV2ZW50ID0gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJyk7XHJcbiAgICAgICAgICAgICRzY29wZS5Mb2dnZWRJbk1lbWJlciA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1lbWJlcl9pZCA9PSAkY29va2llcy5nZXQoJ21JRCcpOyB9KVswXTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5hSFdNID0ge307XHJcbiAgICAgICAgICAgICRzY29wZS5ETVMgPSB7fTtcclxuICAgICAgICAgICAgJHNjb3BlLnRoaXNIV01zaXRlID0gaHdtU2l0ZTtcclxuICAgICAgICAgICAgJHNjb3BlLkFwcHJvdmFsSW5mbyA9IHt9OyAvL3doZW4gaXQgZ2V0cyBhcHByb3ZlZCBvciBpZiBpdCBpcyBhcHByb3ZlZCwgcG9wdWxhdGUgdGhpcyB3aXRoIG1lbWJlciBhbmQgZGF0ZVxyXG4gICAgICAgICAgICAvL0RhdGVwaWNrZXJcclxuICAgICAgICAgICAgJHNjb3BlLmRhdGVwaWNrcnMgPSB7fTtcclxuICAgICAgICAgICAgJHNjb3BlLm9wZW4gPSBmdW5jdGlvbiAoJGV2ZW50LCB3aGljaCkge1xyXG4gICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRhdGVwaWNrcnNbd2hpY2hdID0gdHJ1ZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vY29udmVydCBkZWcgbWluIHNlYyB0byBkZWMgZGVncmVlc1xyXG4gICAgICAgICAgICB2YXIgYXppbXV0aCA9IGZ1bmN0aW9uIChkZWcsIG1pbiwgc2VjKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXppID0gMDtcclxuICAgICAgICAgICAgICAgIGlmIChkZWcgPCAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXppID0gLTEuMCAqIGRlZyArIDEuMCAqIG1pbiAvIDYwLjAgKyAxLjAgKiBzZWMgLyAzNjAwLjA7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICgtMS4wICogYXppKS50b0ZpeGVkKDUpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYXppID0gMS4wICogZGVnICsgMS4wICogbWluIC8gNjAuMCArIDEuMCAqIHNlYyAvIDM2MDAuMDtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGF6aSkudG9GaXhlZCg1KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vY29udmVydCBkZWMgZGVncmVlcyB0byBkbXNcclxuICAgICAgICAgICAgdmFyIGRlZ190b19kbXMgPSBmdW5jdGlvbiAoZGVnKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoZGVnIDwgMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGRlZyA9IGRlZy50b1N0cmluZygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvL2xvbmdpdHVkZSwgcmVtb3ZlIHRoZSAtIHNpZ25cclxuICAgICAgICAgICAgICAgICAgICBkZWcgPSBkZWcuc3Vic3RyaW5nKDEpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIGQgPSBNYXRoLmZsb29yKGRlZyk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbWluZmxvYXQgPSAoZGVnIC0gZCkgKiA2MDtcclxuICAgICAgICAgICAgICAgIHZhciBtID0gTWF0aC5mbG9vcihtaW5mbG9hdCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgcyA9ICgobWluZmxvYXQgLSBtKSAqIDYwKS50b0ZpeGVkKDMpO1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiAoXCJcIiArIGQgKyBcIjpcIiArIG0gKyBcIjpcIiArIHMpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy90aGV5IGNoYW5nZWQgcmFkaW8gYnV0dG9uIGZvciBkbXMgZGVjIGRlZ1xyXG4gICAgICAgICAgICAkc2NvcGUubGF0TG9uZ0NoYW5nZSA9IGZ1bmN0aW9uICgpIHsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmNyZWF0ZU9SZWRpdEhXTSA9PSAnZWRpdCcpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmh3bUNvcHkuZGVjRGVnT1JkbXMgPT0gXCJkZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhleSBjbGlja2VkIERlYyBEZWcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MQURlZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnZlcnQgd2hhdCdzIGhlcmUgZm9yIGVhY2ggbGF0IGFuZCBsb25nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtQ29weS5sYXRpdHVkZV9kZCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MQURlZywgJHNjb3BlLkRNUy5MQU1pbiwgJHNjb3BlLkRNUy5MQVNlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtQ29weS5sb25naXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTE9EZWcsICRzY29wZS5ETVMuTE9NaW4sICRzY29wZS5ETVMuTE9TZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jbGVhclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGV5IGNsaWNrZWQgZG1zIChjb252ZXJ0IGxhdC9sb25nIHRvIGRtcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5od21Db3B5LmxhdGl0dWRlX2RkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsYXRETVMgPSAoZGVnX3RvX2Rtcygkc2NvcGUuaHdtQ29weS5sYXRpdHVkZV9kZCkpLnRvU3RyaW5nKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGFkRE1TYXJyYXkgPSBsYXRETVMuc3BsaXQoJzonKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTEFEZWcgPSBsYWRETVNhcnJheVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTEFNaW4gPSBsYWRETVNhcnJheVsxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTEFTZWMgPSBsYWRETVNhcnJheVsyXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9uZ0RNUyA9IGRlZ190b19kbXMoJHNjb3BlLmh3bUNvcHkubG9uZ2l0dWRlX2RkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb25nRE1TYXJyYXkgPSBsb25nRE1TLnNwbGl0KCc6Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPRGVnID0gbG9uZ0RNU2FycmF5WzBdICogLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPTWluID0gbG9uZ0RNU2FycmF5WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MT1NlYyA9IGxvbmdETVNhcnJheVsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY2xlYXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5od21Db3B5LmxhdGl0dWRlX2RkID0gdW5kZWZpbmVkOyAkc2NvcGUuaHdtQ29weS5sb25naXR1ZGVfZGQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY3JlYXRlIHZpZXdcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFIV00uZGVjRGVnT1JkbXMgPT0gXCJkZFwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhleSBjbGlja2VkIERlYyBEZWcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MQURlZyAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnZlcnQgd2hhdCdzIGhlcmUgZm9yIGVhY2ggbGF0IGFuZCBsb25nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5sYXRpdHVkZV9kZCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MQURlZywgJHNjb3BlLkRNUy5MQU1pbiwgJHNjb3BlLkRNUy5MQVNlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5sb25naXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTE9EZWcsICRzY29wZS5ETVMuTE9NaW4sICRzY29wZS5ETVMuTE9TZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9jbGVhclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGV5IGNsaWNrZWQgZG1zIChjb252ZXJ0IGxhdC9sb25nIHRvIGRtcylcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hSFdNLmxhdGl0dWRlX2RkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjcmVhdGVfbGF0RE1TID0gKGRlZ190b19kbXMoJHNjb3BlLmFIV00ubGF0aXR1ZGVfZGQpKS50b1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGNyZWF0ZV9sYWRETVNhcnJheSA9IGNyZWF0ZV9sYXRETVMuc3BsaXQoJzonKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ETVMuTEFEZWcgPSBjcmVhdGVfbGFkRE1TYXJyYXlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxBTWluID0gY3JlYXRlX2xhZERNU2FycmF5WzFdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MQVNlYyA9IGNyZWF0ZV9sYWRETVNhcnJheVsyXTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlX2xvbmdETVMgPSBkZWdfdG9fZG1zKCRzY29wZS5hSFdNLmxvbmdpdHVkZV9kZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlX2xvbmdETVNhcnJheSA9IGNyZWF0ZV9sb25nRE1TLnNwbGl0KCc6Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPRGVnID0gY3JlYXRlX2xvbmdETVNhcnJheVswXSAqIC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkRNUy5MT01pbiA9IGNyZWF0ZV9sb25nRE1TYXJyYXlbMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRE1TLkxPU2VjID0gY3JlYXRlX2xvbmdETVNhcnJheVsyXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vY2xlYXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLmxhdGl0dWRlX2RkID0gdW5kZWZpbmVkOyAkc2NvcGUuYUhXTS5sb25naXR1ZGVfZGQgPSB1bmRlZmluZWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2xhdCBtb2RhbCBcclxuICAgICAgICAgICAgdmFyIG9wZW5MYXRNb2RhbCA9IGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbGF0TW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZSBMYXRpdHVkZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNzMuMDwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGxhdE1vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChmaWVsZEZvY3VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHcgPT0gJ2xhdGxvbmcnKSAkKFwiI2xhdGl0dWRlX2RkXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgZWxzZSAkKFwiI0xhRGVnXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vbG9uZyBtb2RhbFxyXG4gICAgICAgICAgICB2YXIgb3BlbkxvbmdNb2RhbCA9IGZ1bmN0aW9uICh3KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbG9uZ01vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGUgTG9uZ2l0dWRlIG11c3QgYmUgYmV0d2VlbiAtMTc1LjAgYW5kIC02MC4wPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgbG9uZ01vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChmaWVsZEZvY3VzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHcgPT0gJ2xhdGxvbmcnKSAkKFwiI2xvbmdpdHVkZV9kZFwiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgJChcIiNMb0RlZ1wiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL21ha2Ugc3VyZSBsYXQvbG9uZyBhcmUgcmlnaHQgbnVtYmVyIHJhbmdlXHJcbiAgICAgICAgICAgICRzY29wZS5jaGVja1ZhbHVlID0gZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChkID09ICdkbXMnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9jaGVjayB0aGUgZGVncmVlIHZhbHVlXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ETVMuTEFEZWcgPCAwIHx8ICRzY29wZS5ETVMuTEFEZWcgPiA3Mykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuTGF0TW9kYWwoJ2RtcycpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MT0RlZyA8IC0xNzUgfHwgJHNjb3BlLkRNUy5MT0RlZyA+IC02MCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuTG9uZ01vZGFsKCdkbXMnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vY2hlY2sgdGhlIGxhdGl0dWRlL2xvbmdpdHVkZVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBoID0gJHNjb3BlLnZpZXcuSFdNdmFsID09ICdlZGl0JyA/ICRzY29wZS5od21Db3B5IDogJHNjb3BlLmFIV007XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGgubGF0aXR1ZGVfZGQgPCAwIHx8IGgubGF0aXR1ZGVfZGQgPiA3Mykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuTGF0TW9kYWwoJ2xhdGxvbmcnKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGgubG9uZ2l0dWRlX2RkIDwgLTE3NSB8fCBoLmxvbmdpdHVkZV9kZCA+IC02MCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuTG9uZ01vZGFsKCdsYXRsb25nJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvLyAgbGF0L2xvbmcgPWlzIG51bWJlclxyXG4gICAgICAgICAgICAkc2NvcGUuaXNOdW0gPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGhlRXZlbnQgPSBldnQgfHwgd2luZG93LmV2ZW50O1xyXG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IHRoZUV2ZW50LmtleUNvZGUgfHwgdGhlRXZlbnQud2hpY2g7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9IDQ2ICYmIGtleSAhPSA0NSAmJiBrZXkgPiAzMSAmJiAoa2V5IDwgNDggfHwga2V5ID4gNTcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhlRXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhlRXZlbnQucHJldmVudERlZmF1bHQpIHRoZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vaHdtX3VuY2VydGFpbnR5IHR5cGVkIGluLCBjaG9vc2UgY29vcmVzcG9uZGluZyBod21fZW52aXJvbm1lbnRcclxuICAgICAgICAgICAgJHNjb3BlLmNob29zZVF1YWxpdHkgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaCA9ICRzY29wZS52aWV3LkhXTXZhbCA9PSAnZWRpdCcgPyAkc2NvcGUuaHdtQ29weSA6ICRzY29wZS5hSFdNO1xyXG4gICAgICAgICAgICAgICAgaWYgKGguaHdtX3VuY2VydGFpbnR5ICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHggPSBOdW1iZXIoaC5od21fdW5jZXJ0YWludHkpO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICBFeGNlbGxlbnQgICAgKy0wLjA1ICAgICAgIDAgICAgICAtICAwLjA1MFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICBHb29kICAgICAgICAgKy0wLjEwICAgICAgIDAuMDUxICAtICAwLjEwMFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICBGYWlyICAgICAgICAgKy0wLjIwICAgICAgIDAuMTAxICAtICAwLjIwMFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICBQb29yICAgICAgICAgKy0wLjQwICAgICAgIDAuMjAxICAtICAwLjQwMFxyXG4gICAgICAgICAgICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICBWIFBvb3IgICAgICAgPiAwLjQwICAgICAgIDAuNDAxICAtICBpbmZpbml0eVxyXG4gICAgICAgICAgICAgICAgICAgIGguaHdtX3F1YWxpdHlfaWQgPSAkc2NvcGUuaHdtUXVhbExpc3QuZmlsdGVyKGZ1bmN0aW9uIChoKSB7IHJldHVybiBoLm1pbl9yYW5nZSA8PSB4ICYmIGgubWF4X3JhbmdlID49IHg7IH0pWzBdLmh3bV9xdWFsaXR5X2lkO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvL2h3bSBxdWFsaXR5IGNob3NlbiAob3IgaXQgY2hhbmdlZCBmcm9tIGFib3ZlKSwgY2hlY2sgdG8gbWFrZSBzdXJlIGl0IGlzIGNvbmdydWVudCB3aXRoIGlucHV0IGFib3ZlXHJcbiAgICAgICAgICAgICRzY29wZS5jb21wYXJlVG9VbmNlcnRhaW50eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBoID0gJHNjb3BlLnZpZXcuSFdNdmFsID09ICdlZGl0JyA/ICRzY29wZS5od21Db3B5IDogJHNjb3BlLmFIV007XHJcbiAgICAgICAgICAgICAgICBpZiAoaC5od21fdW5jZXJ0YWludHkgIT09IFwiXCIgJiYgaC5od21fdW5jZXJ0YWludHkgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB4ID0gTnVtYmVyKGguaHdtX3VuY2VydGFpbnR5KTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hpbmdRdWFsSWQgPSAkc2NvcGUuaHdtUXVhbExpc3QuZmlsdGVyKGZ1bmN0aW9uIChoKSB7IHJldHVybiBoLm1pbl9yYW5nZSA8PSB4ICYmIGgubWF4X3JhbmdlID49IHg7IH0pWzBdLmh3bV9xdWFsaXR5X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChoLmh3bV9xdWFsaXR5X2lkICE9PSBtYXRjaGluZ1F1YWxJZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3Nob3cgd2FybmluZyBtb2RhbCBhbmQgZm9jdXMgaW4gdW5jZXJ0YWludHlcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluY29uZ3J1ZW50TW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPldhcm5pbmc8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxwPlRoZXJlIGlzIGEgbWlzbWF0Y2ggYmV0d2VlbiB0aGUgaHdtIHF1YWxpdHkgY2hvc2VuIGFuZCB0aGUgaHdtIHVuY2VydGFpbnR5IGFib3ZlLiBQbGVhc2UgY29ycmVjdCB5b3VyIGh3bSB1bmNlcnRhaW50eS48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbmNvbmdydWVudE1vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChcIltuYW1lPSdod21fdW5jZXJ0YWludHknXVwiKS5mb2N1cygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vY2FsbGVkIGEgZmV3IHRpbWVzIHRvIGZvcm1hdCBqdXN0IHRoZSBkYXRlIChubyB0aW1lKVxyXG4gICAgICAgICAgICB2YXIgbWFrZUFkYXRlID0gZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZCAhPT0gXCJcIiAmJiBkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL3Byb3ZpZGVkIGRhdGVcclxuICAgICAgICAgICAgICAgICAgICBhRGF0ZSA9IG5ldyBEYXRlKGQpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgdmFyIHllYXIgPSBhRGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1vbnRoID0gYURhdGUuZ2V0TW9udGgoKTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXkgPSAoJzAnICsgYURhdGUuZ2V0RGF0ZSgpKS5zbGljZSgtMik7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW9udGhOYW1lcyA9IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXTtcclxuICAgICAgICAgICAgICAgIHZhciBkYXRlV090aW1lID0gbmV3IERhdGUobW9udGhOYW1lc1ttb250aF0gKyBcIiBcIiArIGRheSArIFwiLCBcIiArIHllYXIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGRhdGVXT3RpbWU7XHJcbiAgICAgICAgICAgIH07Ly9lbmQgbWFrZUFkYXRlKClcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzSFdNICE9IFwiZW1wdHlcIikge1xyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIGV4aXN0aW5nIEhXTVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNyZWF0ZU9SZWRpdEhXTSA9ICdlZGl0JztcclxuICAgICAgICAgICAgICAgICRzY29wZS5hSFdNID0gYW5ndWxhci5jb3B5KHRoaXNIV00pO1xyXG4gICAgICAgICAgICAgICAgLy9nZXQgYWxsIHRoZSBuYW1lcyBmb3IgZGV0YWlscyB2aWV3XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5od21fdHlwZSA9ICRzY29wZS5od21UeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGh0KSB7IHJldHVybiBodC5od21fdHlwZV9pZCA9PSAkc2NvcGUuYUhXTS5od21fdHlwZV9pZDsgfSlbMF0uaHdtX3R5cGU7XHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFIV00uc3RpbGx3YXRlciAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLlRyYW5xdWlsID0gJHNjb3BlLmFIV00uc3RpbGx3YXRlciA+IDAgPyAnWWVzJyA6ICdObyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5NYXJrZXIgPSAkc2NvcGUuYUhXTS5tYXJrZXJfaWQgPiAwID8gJHNjb3BlLm1hcmtlckxpc3QuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1hcmtlcl9pZCA9PSAkc2NvcGUuYUhXTS5tYXJrZXJfaWQ7IH0pWzBdLm1hcmtlcjEgOiAnJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLlF1YWxpdHkgPSAkc2NvcGUuYUhXTS5od21fcXVhbGl0eV9pZCA+IDAgPyAkc2NvcGUuaHdtUXVhbExpc3QuZmlsdGVyKGZ1bmN0aW9uIChocSkgeyByZXR1cm4gaHEuaHdtX3F1YWxpdHlfaWQgPT0gJHNjb3BlLmFIV00uaHdtX3F1YWxpdHlfaWQ7IH0pWzBdLmh3bV9xdWFsaXR5IDogJyc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5oZGF0dW0gPSAkc2NvcGUuYUhXTS5oZGF0dW1faWQgPiAwID8gJHNjb3BlLkhEYXR1bXNMaXN0LmZpbHRlcihmdW5jdGlvbiAoaGQpIHsgcmV0dXJuIGhkLmRhdHVtX2lkID09ICRzY29wZS5hSFdNLmhkYXR1bV9pZDsgfSlbMF0uZGF0dW1fbmFtZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uaENvbGxlY3RNZXRob2QgPSAkc2NvcGUuYUhXTS5oY29sbGVjdF9tZXRob2RfaWQgPiAwID8gJHNjb3BlLmhDb2xsTUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChoYykgeyByZXR1cm4gaGMuaGNvbGxlY3RfbWV0aG9kX2lkID09ICRzY29wZS5hSFdNLmhjb2xsZWN0X21ldGhvZF9pZDsgfSlbMF0uaGNvbGxlY3RfbWV0aG9kIDogJyc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS52RGF0dW0gPSAkc2NvcGUuYUhXTS52ZGF0dW1faWQgPiAwID8gJHNjb3BlLlZEYXR1bXNMaXN0LmZpbHRlcihmdW5jdGlvbiAodmQpIHsgcmV0dXJuIHZkLmRhdHVtX2lkID09ICRzY29wZS5hSFdNLnZkYXR1bV9pZDsgfSlbMF0uZGF0dW1fbmFtZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFIV00udkNvbGxlY3RNZXRob2QgPSAkc2NvcGUuYUhXTS52Y29sbGVjdF9tZXRob2RfaWQgPiAwID8gJHNjb3BlLnZDb2xsTUxpc3QuZmlsdGVyKGZ1bmN0aW9uICh2YykgeyByZXR1cm4gdmMudmNvbGxlY3RfbWV0aG9kX2lkID09ICRzY29wZS5hSFdNLnZjb2xsZWN0X21ldGhvZF9pZDsgfSlbMF0udmNvbGxlY3RfbWV0aG9kIDogJyc7XHJcbiAgICAgICAgICAgICAgICAvL2dldCBhcHByb3ZhbCBpbmZvIGlmIGFueVxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hSFdNLmFwcHJvdmFsX2lkICE9PSB1bmRlZmluZWQpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgSFdNLmdldEhXTUFwcHJvdmFsKHsgaWQ6ICRzY29wZS5hSFdNLmh3bV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQXBwcm92YWxJbmZvLmFwcHJvdmFsRGF0ZSA9IG5ldyBEYXRlKHJlc3BvbnNlLmFwcHJvdmFsX2RhdGUpOyAvL2luY2x1ZGUgbm90ZSB0aGF0IGl0J3MgZGlzcGxheWVkIGluIHRoZWlyIGxvY2FsIHRpbWUgYnV0IHN0b3JlZCBpbiBVVENcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkFwcHJvdmFsSW5mby5NZW1iZXIgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAoYW1lbSkgeyByZXR1cm4gYW1lbS5tZW1iZXJfaWQgPT0gcmVzcG9uc2UubWVtYmVyX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaHdtTW9kYWxIZWFkZXIgPSBcIkhXTSBJbmZvcm1hdGlvblwiO1xyXG4gICAgICAgICAgICAgICAgLy9nZXQgdGhpcyBod20ncyBldmVudCBuYW1lXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuRXZlbnROYW1lID0gJHNjb3BlLmFIV00uZXZlbnRfaWQgPiAwID8gJHNjb3BlLmV2ZW50TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUuZXZlbnRfaWQgPT0gJHNjb3BlLmFIV00uZXZlbnRfaWQ7IH0pWzBdLmV2ZW50X25hbWUgOiAnTm9uZSBwcm92aWRlZCc7XHJcbiAgICAgICAgICAgICAgICAvL2RhdGUgZm9ybWF0dGluZ1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uZmxhZ19kYXRlID0gbWFrZUFkYXRlKCRzY29wZS5hSFdNLmZsYWdfZGF0ZSk7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy9pZiB0aGlzIGlzIHN1cnZleWVkLCBkYXRlIGZvcm1hdCBhbmQgZ2V0IHN1cnZleSBtZW1iZXIncyBuYW1lXHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFIV00uc3VydmV5X2RhdGUgIT09IG51bGwgJiYgJHNjb3BlLmFIV00uc3VydmV5X2RhdGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLnN1cnZleV9kYXRlID0gbWFrZUFkYXRlKCRzY29wZS5hSFdNLnN1cnZleV9kYXRlKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU3VydmV5TWVtYmVyID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRzY29wZS5hSFdNLnN1cnZleV9tZW1iZXJfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgLy9nZXQgZmxhZ2dpbmcgbWVtYmVyJ3MgbmFtZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkZsYWdNZW1iZXIgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT0gJHNjb3BlLmFIV00uZmxhZ19tZW1iZXJfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIGV4aXN0aW5nIEhXTVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIG5ldyBIV01cclxuICAgICAgICAgICAgICAgICRzY29wZS5od21Nb2RhbEhlYWRlciA9IFwiQ3JlYXRlIG5ldyBIV01cIjtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jcmVhdGVPUmVkaXRIV00gPSAnY3JlYXRlJztcclxuICAgICAgICAgICAgICAgIC8vdXNlIHNpdGUncyBMQVQsIExPTkcsIHdhdGVyYm9keSwgSERBVFVNLCBIQ09MTEVDVE1FVEhPRCwgc2V0IEZMQUdEQVRFIHdpdGggdG9kYXlcclxuICAgICAgICAgICAgICAgICRzY29wZS5hSFdNID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6ICRzY29wZS50aGlzSFdNc2l0ZS5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIGV2ZW50X2lkOiAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudElEJyksXHJcbiAgICAgICAgICAgICAgICAgICAgaHdtX2Vudmlyb25tZW50OiAnUml2ZXJpbmUnLFxyXG4gICAgICAgICAgICAgICAgICAgIGJhbms6ICdOL0EnLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0aWxsd2F0ZXI6IDAsXHJcbiAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGVfZGQ6IGh3bVNpdGUubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlX2RkOiBod21TaXRlLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICB3YXRlcmJvZHk6IGh3bVNpdGUud2F0ZXJib2R5LFxyXG4gICAgICAgICAgICAgICAgICAgIGhkYXR1bV9pZDogaHdtU2l0ZS5oZGF0dW1faWQsXHJcbiAgICAgICAgICAgICAgICAgICAgaGNvbGxlY3RfbWV0aG9kX2lkOiBod21TaXRlLmhjb2xsZWN0X21ldGhvZF9pZCxcclxuICAgICAgICAgICAgICAgICAgICBmbGFnX2RhdGU6IG1ha2VBZGF0ZShcIlwiKSxcclxuICAgICAgICAgICAgICAgICAgICBmbGFnX21lbWJlcl9pZDogJHNjb3BlLkxvZ2dlZEluTWVtYmVyLm1lbWJlcl9pZFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5FdmVudE5hbWUgPSAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudE5hbWUnKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5GbGFnTWVtYmVyID0gJHNjb3BlLkxvZ2dlZEluTWVtYmVyO1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIG5ldyBIV01cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvL3JhZGlvIGJ1dHRvbiBkZWZhdWx0c1xyXG4gICAgICAgICAgICAkc2NvcGUuYUhXTS5kZWNEZWdPUmRtcyA9ICdkZCc7XHJcbiAgICAgICAgICAgICRzY29wZS5GVG9yQ00gPSAnZnQnO1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmNyZWF0ZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNyZWF0ZWRIV00gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MQURlZyAhPT0gdW5kZWZpbmVkKSAkc2NvcGUuYUhXTS5sYXRpdHVkZV9kZCA9IGF6aW11dGgoJHNjb3BlLkRNUy5MQURlZywgJHNjb3BlLkRNUy5MQU1pbiwgJHNjb3BlLkRNUy5MQVNlYyk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5ETVMuTE9EZWcgIT09IHVuZGVmaW5lZCkgJHNjb3BlLmFIV00ubG9uZ2l0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxPRGVnLCAkc2NvcGUuRE1TLkxPTWluLCAkc2NvcGUuRE1TLkxPU2VjKTtcclxuICAgICAgICAgICAgICAgICAgICAvL2lmIHRoZXkgZW50ZXJlZCBhIHN1cnZleSBkYXRlIG9yIGVsZXZhdGlvbiwgdGhlbiBzZXQgc3VydmV5IG1lbWJlciBhcyB0aGUgZmxhZyBtZW1iZXIgKGZsYWdnaW5nIGFuZCBzdXJ2ZXlpbmcgYXQgc2FtZSB0aW1lXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hSFdNLnN1cnZleV9kYXRlICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLmFIV00uc3VydmV5X2RhdGUgIT09IG51bGwpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLnN1cnZleV9tZW1iZXJfaWQgPSAkc2NvcGUuZmxhZ19tZW1iZXJfaWQ7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRlRvckNNID09IFwiY21cIikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRlRvckNNID0gJ2Z0JztcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hSFdNLnVuY2VydGFpbnR5ICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS51bmNlcnRhaW50eSA9ICRzY29wZS5hSFdNLnVuY2VydGFpbnR5IC8gMzAuNDg7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFIV00uZWxldl9mdCAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5hSFdNLmVsZXZfZnQgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgdGhleSBhZGRlZCB0aGUgc3VydmV5IGRhdGUgaWYgdGhleSBhZGRlZCBhbiBlbGV2YXRpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hSFdNLnN1cnZleV9kYXRlID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS5zdXJ2ZXlfZGF0ZSA9IG1ha2VBZGF0ZShcIlwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLnN1cnZleV9tZW1iZXJfaWQgPSAkc2NvcGUuYUhXTS5mbGFnX21lbWJlcl9pZDtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgSFdNLnNhdmUoJHNjb3BlLmFIV00pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRIV00gPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJIV00gY3JlYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbmRCYWNrID0gW2NyZWF0ZWRIV00sICdjcmVhdGVkJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHNlbmRCYWNrKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTsvL2VuZCBjcmVhdGUoKVxyXG5cclxuICAgICAgICAgICAgLy9hcHByb3ZlIHRoaXMgaHdtIChpZiBhZG1pbiBvciBtYW5hZ2VyKVxyXG4gICAgICAgICAgICAkc2NvcGUuYXBwcm92ZUhXTSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vdGhpcyBpcyB2YWxpZCwgc2hvdyBtb2RhbCB0byBjb25maXJtIHRoZXkgd2FudCB0byBhcHByb3ZlIGl0XHJcbiAgICAgICAgICAgICAgICB2YXIgdGhpc0hXTSA9ICRzY29wZS5hSFdNO1xyXG4gICAgICAgICAgICAgICAgdmFyIGFwcHJvdmVNb2RhbCA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogXCI8ZGl2IGNsYXNzPSdtb2RhbC1oZWFkZXInPjxoMyBjbGFzcz0nbW9kYWwtdGl0bGUnPkFwcHJvdmUgSFdNPC9oMz48L2Rpdj5cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiPGRpdiBjbGFzcz0nbW9kYWwtYm9keSc+PHA+QXJlIHlvdSByZWFkeSB0byBhcHByb3ZlIHRoaXMgSFdNPzwvcD48cD5UaGUgc3VydmV5ZWQgZWxldmF0aW9uIGlzIHt7YXBwcm92ZUhXTS5lbGV2X2Z0IHx8ICctLS0nfX08L3A+PHA+VGhlIGhlaWdodCBhYm92ZSBncm91bmQgaXMge3thcHByb3ZlSFdNLmhlaWdodF9hYm92ZV9nbmQgfHwgJy0tLSd9fTwvcD48L2Rpdj5cIiArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFwiPGRpdiBjbGFzcz0nbW9kYWwtZm9vdGVyJz48YnV0dG9uIGNsYXNzPSdidG4gYnRuLXByaW1hcnknIG5nLWNsaWNrPSdhcHByb3ZlSXQoKSc+QXBwcm92ZTwvYnV0dG9uPjxidXR0b24gY2xhc3M9J2J0biBidG4td2FybmluZycgbmctY2xpY2s9J2NhbmNlbCgpJz5DYW5jZWw8L2J1dHRvbj48L2Rpdj5cIixcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHByb3ZlSFdNID0gdGhpc0hXTTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXBwcm92ZUl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UodGhpc0hXTSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBhcHByb3ZlTW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgSFdNLmFwcHJvdmVIV00oeyBpZDogaC5od21faWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoYXBwcm92YWxSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBoLmFwcHJvdmFsX2lkID0gYXBwcm92YWxSZXNwb25zZS5hcHByb3ZhbF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJIV00gQXBwcm92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5BcHByb3ZhbEluZm8uYXBwcm92YWxEYXRlID0gbmV3IERhdGUoYXBwcm92YWxSZXNwb25zZS5hcHByb3ZhbF9kYXRlKTsgLy9pbmNsdWRlIG5vdGUgdGhhdCBpdCdzIGRpc3BsYXllZCBpbiB0aGVpciBsb2NhbCB0aW1lIGJ1dCBzdG9yZWQgaW4gVVRDXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5BcHByb3ZhbEluZm8uTWVtYmVyID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKGFtZW0pIHsgcmV0dXJuIGFtZW0ubWVtYmVyX2lkID09IGFwcHJvdmFsUmVzcG9uc2UubWVtYmVyX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgc2VuZEJhY2sgPSBbaCwgJ3VwZGF0ZWQnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8kdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZW5kQmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbG9naWMgZm9yIGNhbmNlbFxyXG4gICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9hcHByb3ZlIHRoaXMgaHdtIChpZiBhZG1pbiBvciBtYW5hZ2VyKVxyXG4gICAgICAgICAgICAkc2NvcGUudW5BcHByb3ZlSFdNID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy90aGlzIGlzIHZhbGlkLCBzaG93IG1vZGFsIHRvIGNvbmZpcm0gdGhleSB3YW50IHRvIGFwcHJvdmUgaXRcclxuICAgICAgICAgICAgICAgIHZhciB0aGlzSFdNID0gJHNjb3BlLmFIV007XHJcbiAgICAgICAgICAgICAgICB2YXIgdW5hcHByb3ZlTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwiPGRpdiBjbGFzcz0nbW9kYWwtaGVhZGVyJz48aDMgY2xhc3M9J21vZGFsLXRpdGxlJz5SZW1vdmUgQXBwcm92YWw8L2gzPjwvZGl2PlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdtb2RhbC1ib2R5Jz48cD5BcmUgeW91IHN1cmUgeW91IHdhbiB0byB1bmFwcHJvdmUgdGhpcyBIV00/PC9wPjwvZGl2PlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdtb2RhbC1mb290ZXInPjxidXR0b24gY2xhc3M9J2J0biBidG4tcHJpbWFyeScgbmctY2xpY2s9J3VuQXBwcm92ZUl0KCknPlVuYXBwcm92ZTwvYnV0dG9uPjxidXR0b24gY2xhc3M9J2J0biBidG4td2FybmluZycgbmctY2xpY2s9J2NhbmNlbCgpJz5DYW5jZWw8L2J1dHRvbj48L2Rpdj5cIixcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hcHByb3ZlSFdNID0gdGhpc0hXTTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudW5BcHByb3ZlSXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSh0aGlzSFdNKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIHVuYXBwcm92ZU1vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgIEhXTS51bkFwcHJvdmVIV00oeyBpZDogaC5od21faWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGguYXBwcm92YWxfaWQgPSBudWxsO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkhXTSBVbmFwcHJvdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQXBwcm92YWxJbmZvID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdmFyIHNlbmRCYWNrID0gW2gsICd1cGRhdGVkJ107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uoc2VuZEJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgIH0pOy8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIHZhciBmb3JtYXRIV00gPSBmdW5jdGlvbiAoaCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGZvcm1hdHRlZEhXTSA9IHtcclxuICAgICAgICAgICAgICAgICAgICBod21faWQ6IGguaHdtX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIGJhbms6IGguYmFuayxcclxuICAgICAgICAgICAgICAgICAgICBlbGV2X2Z0OiBoLmVsZXZfZnQsXHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRfaWQ6IGguZXZlbnRfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgZmxhZ19kYXRlOiBoLmZsYWdfZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICBmbGFnX21lbWJlcl9pZDogaC5mbGFnX21lbWJlcl9pZCxcclxuICAgICAgICAgICAgICAgICAgICBoY29sbGVjdF9tZXRob2RfaWQ6IGguaGNvbGxlY3RfbWV0aG9kX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIGhkYXR1bV9pZDogaC5oZGF0dW1faWQsXHJcbiAgICAgICAgICAgICAgICAgICAgaGVpZ2h0X2Fib3ZlX2duZDogaC5oZWlnaHRfYWJvdmVfZ25kLFxyXG4gICAgICAgICAgICAgICAgICAgIGh3bV9lbnZpcm9ubWVudDogaC5od21fZW52aXJvbm1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgaHdtX2xvY2F0aW9uZGVzY3JpcHRpb246IGguaHdtX2xvY2F0aW9uZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgaHdtX25vdGVzOiBoLmh3bV9ub3RlcyxcclxuICAgICAgICAgICAgICAgICAgICBod21fdW5jZXJ0YWludHk6IGguaHdtX3VuY2VydGFpbnR5LFxyXG4gICAgICAgICAgICAgICAgICAgIGh3bV9xdWFsaXR5X2lkOiBoLmh3bV9xdWFsaXR5X2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIGh3bV90eXBlX2lkOiBoLmh3bV90eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlX2RkOiBoLmxhdGl0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZV9kZDogaC5sb25naXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgbWFya2VyX2lkOiBoLm1hcmtlcl9pZCxcclxuICAgICAgICAgICAgICAgICAgICBzaXRlX2lkOiBoLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgc3RpbGx3YXRlcjogaC5zdGlsbHdhdGVyLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1cnZleV9kYXRlOiBoLnN1cnZleV9kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgIHN1cnZleV9tZW1iZXJfaWQ6IGguc3VydmV5X21lbWJlcl9pZCxcclxuICAgICAgICAgICAgICAgICAgICB2Y29sbGVjdF9tZXRob2RfaWQ6IGgudmNvbGxlY3RfbWV0aG9kX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgIHZkYXR1bV9pZDogaC52ZGF0dW1faWQsXHJcbiAgICAgICAgICAgICAgICAgICAgd2F0ZXJib2R5OiBoLndhdGVyYm9keVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBmb3JtYXR0ZWRIV007XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vc2F2ZSBhSFdNXHJcbiAgICAgICAgICAgICRzY29wZS5zYXZlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdXBkYXRlZEhXTSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuRE1TLkxBRGVnICE9PSB1bmRlZmluZWQpICRzY29wZS5od21Db3B5LmxhdGl0dWRlX2RkID0gYXppbXV0aCgkc2NvcGUuRE1TLkxBRGVnLCAkc2NvcGUuRE1TLkxBTWluLCAkc2NvcGUuRE1TLkxBU2VjKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkRNUy5MT0RlZyAhPT0gdW5kZWZpbmVkKSAkc2NvcGUuaHdtQ29weS5sb25naXR1ZGVfZGQgPSBhemltdXRoKCRzY29wZS5ETVMuTE9EZWcsICRzY29wZS5ETVMuTE9NaW4sICRzY29wZS5ETVMuTE9TZWMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYWRtaW5DaGFuZ2VkLmV2ZW50X2lkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9hZG1pbiBjaGFuZ2VkIHRoZSBldmVudCBmb3IgdGhpcyBod20uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtQ29weS5ldmVudF9pZCA9ICRzY29wZS5hZG1pbkNoYW5nZWQuZXZlbnRfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIC8vaWYgdGhleSBhZGRlZCBhIHN1cnZleSBkYXRlLCBhcHBseSBzdXJ2ZXkgbWVtYmVyIGFzIGxvZ2dlZCBpbiBtZW1iZXJcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmh3bUNvcHkuc3VydmV5X2RhdGUgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuaHdtQ29weS5zdXJ2ZXlfbWVtYmVyX2lkID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5od21Db3B5LnN1cnZleV9tZW1iZXJfaWQgPSAkY29va2llcy5nZXQoJ21JRCcpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLkZUb3JDTSA9PSBcImNtXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkZUb3JDTSA9ICdmdCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuaHdtQ29weS51bmNlcnRhaW50eSAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bUNvcHkudW5jZXJ0YWludHkgPSAkc2NvcGUuaHdtQ29weS51bmNlcnRhaW50eSAvIDMwLjQ4O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5od21Db3B5LmVsZXZfZnQgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuaHdtQ29weS5lbGV2X2Z0ICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlIHRoZXkgYWRkZWQgdGhlIHN1cnZleSBkYXRlIGlmIHRoZXkgYWRkZWQgYW4gZWxldmF0aW9uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuaHdtQ29weS5zdXJ2ZXlfZGF0ZSA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bUNvcHkuc3VydmV5X2RhdGUgPSBtYWtlQWRhdGUoXCJcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmh3bUNvcHkuc3VydmV5X21lbWJlcl9pZCA9PT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bUNvcHkuc3VydmV5X21lbWJlcl9pZCA9ICRjb29raWVzLmdldCgnbUlEJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjbGVhbkhXTSA9IGZvcm1hdEhXTSgkc2NvcGUuaHdtQ29weSk7XHJcbiAgICAgICAgICAgICAgICAgICAgSFdNLnVwZGF0ZSh7IGlkOiBjbGVhbkhXTS5od21faWQgfSwgY2xlYW5IV00pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiSFdNIHVwZGF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNID0gcmVzcG9uc2U7IHRoaXNIV00gPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9nZXQgYWxsIHRoZSBuYW1lcyBmb3IgZGV0YWlscyB2aWV3XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLmh3bV90eXBlID0gJHNjb3BlLmh3bVR5cGVMaXN0LmZpbHRlcihmdW5jdGlvbiAoaHQpIHsgcmV0dXJuIGh0Lmh3bV90eXBlX2lkID09ICRzY29wZS5hSFdNLmh3bV90eXBlX2lkOyB9KVswXS5od21fdHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hSFdNLnN0aWxsd2F0ZXIgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLlRyYW5xdWlsID0gJHNjb3BlLmFIV00uc3RpbGx3YXRlciA+IDAgPyAnWWVzJyA6ICdObyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uTWFya2VyID0gJHNjb3BlLmFIV00ubWFya2VyX2lkID4gMCA/ICRzY29wZS5tYXJrZXJMaXN0LmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tYXJrZXJfaWQgPT0gJHNjb3BlLmFIV00ubWFya2VyX2lkOyB9KVswXS5tYXJrZXIxIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLlF1YWxpdHkgPSAkc2NvcGUuYUhXTS5od21fcXVhbGl0eV9pZCA+IDAgPyAkc2NvcGUuaHdtUXVhbExpc3QuZmlsdGVyKGZ1bmN0aW9uIChocSkgeyByZXR1cm4gaHEuaHdtX3F1YWxpdHlfaWQgPT0gJHNjb3BlLmFIV00uaHdtX3F1YWxpdHlfaWQ7IH0pWzBdLmh3bV9xdWFsaXR5IDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLmhkYXR1bSA9ICRzY29wZS5hSFdNLmhkYXR1bV9pZCA+IDAgPyAkc2NvcGUuSERhdHVtc0xpc3QuZmlsdGVyKGZ1bmN0aW9uIChoZCkgeyByZXR1cm4gaGQuZGF0dW1faWQgPT0gJHNjb3BlLmFIV00uaGRhdHVtX2lkOyB9KVswXS5kYXR1bV9uYW1lIDogJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hSFdNLmhDb2xsZWN0TWV0aG9kID0gJHNjb3BlLmFIV00uaGNvbGxlY3RfbWV0aG9kX2lkID4gMCA/ICRzY29wZS5oQ29sbE1MaXN0LmZpbHRlcihmdW5jdGlvbiAoaGMpIHsgcmV0dXJuIGhjLmhjb2xsZWN0X21ldGhvZF9pZCA9PSAkc2NvcGUuYUhXTS5oY29sbGVjdF9tZXRob2RfaWQ7IH0pWzBdLmhjb2xsZWN0X21ldGhvZCA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS52RGF0dW0gPSAkc2NvcGUuYUhXTS52ZGF0dW1faWQgPiAwID8gJHNjb3BlLlZEYXR1bXNMaXN0LmZpbHRlcihmdW5jdGlvbiAodmQpIHsgcmV0dXJuIHZkLmRhdHVtX2lkID09ICRzY29wZS5hSFdNLnZkYXR1bV9pZDsgfSlbMF0uZGF0dW1fbmFtZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUhXTS52Q29sbGVjdE1ldGhvZCA9ICRzY29wZS5hSFdNLnZjb2xsZWN0X21ldGhvZF9pZCA+IDAgPyAkc2NvcGUudkNvbGxNTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHZjKSB7IHJldHVybiB2Yy52Y29sbGVjdF9tZXRob2RfaWQgPT0gJHNjb3BlLmFIV00udmNvbGxlY3RfbWV0aG9kX2lkOyB9KVswXS52Y29sbGVjdF9tZXRob2QgOiAnJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uZmxhZ19kYXRlID0gbWFrZUFkYXRlKCRzY29wZS5hSFdNLmZsYWdfZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaXMgaXQgYXBwcm92ZWQ/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChod21BcHByb3ZhbCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQXBwcm92YWxJbmZvLmFwcHJvdmFsRGF0ZSA9IG5ldyBEYXRlKGh3bUFwcHJvdmFsLmFwcHJvdmFsX2RhdGUpOyAvL2luY2x1ZGUgbm90ZSB0aGF0IGl0J3MgZGlzcGxheWVkIGluIHRoZWlyIGxvY2FsIHRpbWUgYnV0IHN0b3JlZCBpbiBVVENcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5BcHByb3ZhbEluZm8uTWVtYmVyID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKGFtZW0pIHsgcmV0dXJuIGFtZW0ubWVtYmVyX2lkID09IGh3bUFwcHJvdmFsLm1lbWJlcl9pZDsgfSlbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgdGhpcyBpcyBzdXJ2ZXllZCwgZGF0ZSBmb3JtYXQgYW5kIGdldCBzdXJ2ZXkgbWVtYmVyJ3MgbmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFIV00uc3VydmV5X2RhdGUgIT09IG51bGwgJiYgJHNjb3BlLmFIV00uc3VydmV5X2RhdGUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFIV00uc3VydmV5X2RhdGUgPSBtYWtlQWRhdGUoJHNjb3BlLmFIV00uc3VydmV5X2RhdGUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlN1cnZleU1lbWJlciA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1lbWJlcl9pZCA9PSAkc2NvcGUuYUhXTS5zdXJ2ZXlfbWVtYmVyX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9nZXQgZmxhZ2dpbmcgbWVtYmVyJ3MgbmFtZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRmxhZ01lbWJlciA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChtKSB7IHJldHVybiBtLm1lbWJlcl9pZCA9PSAkc2NvcGUuYUhXTS5mbGFnX21lbWJlcl9pZDsgfSlbMF07XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtQ29weSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudmlldy5IV012YWwgPSAnZGV0YWlsJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy92YXIgc2VuZEJhY2sgPSBbdXBkYXRlZEhXTSwgJ3VwZGF0ZWQnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8kdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZW5kQmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07Ly9lbmQgc2F2ZSgpXHJcblxyXG4gICAgICAgICAgICAvL2RlbGV0ZSBhSFdNXHJcbiAgICAgICAgICAgICRzY29wZS5kZWxldGVIV00gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAvL1RPRE86OiBEZWxldGUgdGhlIGZpbGVzIGZvciB0aGlzIGh3bSB0b28gb3IgcmVhc3NpZ24gdG8gdGhlIFNpdGU/PyBTZXJ2aWNlcyBvciBjbGllbnQgaGFuZGxpbmc/XHJcbiAgICAgICAgICAgICAgICB2YXIgRGVsZXRlTW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLmFIV007XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkhXTVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgRGVsZXRlTW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoaHdtVG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgSFdNLmRlbGV0ZSh7IGlkOiBod21Ub1JlbW92ZS5od21faWQgfSwgaHdtVG9SZW1vdmUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSFdNRmlsZXMgPSBbXTsgLy9jbGVhciBvdXQgaHdtRmlsZXMgZm9yIHRoaXMgaHdtXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5od21JbWFnZUZpbGVzID0gW107IC8vY2xlYXIgb3V0IGltYWdlIGZpbGVzIGZvciB0aGlzIGh3bVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25vdyByZW1vdmUgYWxsIHRoZXNlIGZpbGVzIGZyb20gU2l0ZUZpbGVzXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsID0gJHNjb3BlLmFsbFNGaWxlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWxlIChsLS0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYWxsU0ZpbGVzW2xdLmh3bV9pZCA9PSBod21Ub1JlbW92ZS5od21faWQpICRzY29wZS5hbGxTRmlsZXMuc3BsaWNlKGwsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vdXBkYXRlcyB0aGUgZmlsZSBsaXN0IG9uIHRoZSBzaXRlZGFzaGJvYXJkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJIV00gUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbmRCYWNrID0gW1wiZGVcIiwgJ2RlbGV0ZWQnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uoc2VuZEJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2xvZ2ljIGZvciBjYW5jZWxcclxuICAgICAgICAgICAgICAgIH0pOy8vZW5kIG1vZGFsXHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2NhbmNlbFxyXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOyAvLyBsb2FkaW5nLi4gXHJcbiAgICAgICAgICAgICAgICB2YXIgc2VuZEJhY2sgPSAkc2NvcGUuYUhXTTtcclxuICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKHNlbmRCYWNrKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vZWRpdCBidXR0b24gY2xpY2tlZC4gbWFrZSBjb3B5IG9mIGh3bSBcclxuICAgICAgICAgICAgJHNjb3BlLndhbm5hRWRpdEhXTSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS52aWV3LkhXTXZhbCA9ICdlZGl0JzsgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaHdtQ29weSA9IGFuZ3VsYXIuY29weSgkc2NvcGUuYUhXTSk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaHdtQ29weS5kZWNEZWdPUmRtcyA9ICdkZCc7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWxIV01FZGl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZpZXcuSFdNdmFsID0gJ2RldGFpbCc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaHdtQ29weSA9IFtdOyBcclxuICAgICAgICAgICAgICAgICRzY29wZS5hZG1pbkNoYW5nZWQgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5FdmVudE5hbWUgPSAkc2NvcGUuZXZlbnRMaXN0LmZpbHRlcihmdW5jdGlvbiAoZSkgeyByZXR1cm4gZS5ldmVudF9pZCA9PSAkc2NvcGUuYUhXTS5ldmVudF9pZDsgfSlbMF0uZXZlbnRfbmFtZTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vI3JlZ2lvbiBGSUxFIFNUVUZGXHJcbiAgICAgICAgICAgICRzY29wZS5zdGFtcCA9IEZJTEVfU1RBTVAuZ2V0U3RhbXAoKTsgJHNjb3BlLmZpbGVJdGVtRXhpc3RzID0gdHJ1ZTtcclxuICAgICAgICAgICAgLy9uZWVkIHRvIHJldXBsb2FkIGZpbGVJdGVtIHRvIHRoaXMgZXhpc3RpbmcgZmlsZSBPUiBDaGFuZ2Ugb3V0IGV4aXN0aW5nIGZpbGVJdGVtIGZvciBuZXcgb25lXHJcbiAgICAgICAgICAgICRzY29wZS5zYXZlRmlsZVVwbG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIHZhciBmaWxlUGFydHMgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgRmlsZUVudGl0eToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2lkOiAkc2NvcGUuYUZpbGUuZmlsZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJHNjb3BlLmFGaWxlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAkc2NvcGUuYUZpbGUuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RpcmVjdGlvbjogJHNjb3BlLmFGaWxlLnBob3RvX2RpcmVjdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgbGF0aXR1ZGVfZGQ6ICRzY29wZS5hRmlsZS5sYXRpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9uZ2l0dWRlX2RkOiAkc2NvcGUuYUZpbGUubG9uZ2l0dWRlX2RkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlX2RhdGU6ICRzY29wZS5hRmlsZS5maWxlX2RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh3bV9pZDogJHNjb3BlLmFGaWxlLmh3bV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogJHNjb3BlLmFGaWxlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlX2lkOiAkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZV9pZDogJHNjb3BlLmFGaWxlLnNvdXJjZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcGF0aDogJHNjb3BlLmFGaWxlLnBhdGgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFfZmlsZV9pZDogJHNjb3BlLmFGaWxlLmRhdGFfZmlsZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1bWVudF9pZDogJHNjb3BlLmFGaWxlLmluc3RydW1lbnRfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBob3RvX2RhdGU6ICRzY29wZS5hRmlsZS5waG90b19kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc19ud2lzOiAkc2NvcGUuYUZpbGUuaXNfbndpcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb2JqZWN0aXZlX3BvaW50X2lkOiAkc2NvcGUuYUZpbGUub2JqZWN0aXZlX3BvaW50X2lkXHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBGaWxlOiAkc2NvcGUuYUZpbGUuRmlsZTEgIT09IHVuZGVmaW5lZCA/ICRzY29wZS5hRmlsZS5GaWxlMSA6ICRzY29wZS5hRmlsZS5GaWxlXHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgLy9uZWVkIHRvIHB1dCB0aGUgZmlsZVBhcnRzIGludG8gY29ycmVjdCBmb3JtYXQgZm9yIHBvc3RcclxuICAgICAgICAgICAgICAgIHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZUVudGl0eVwiLCBKU09OLnN0cmluZ2lmeShmaWxlUGFydHMuRmlsZUVudGl0eSkpO1xyXG4gICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZVwiLCBmaWxlUGFydHMuRmlsZSk7XHJcbiAgICAgICAgICAgICAgICAvL25vdyBQT1NUIGl0IChmaWxlcGFydHMpXHJcbiAgICAgICAgICAgICAgICBGSUxFLnVwbG9hZEZpbGUoZmQpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGxvYWRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3JjID0gJHNjb3BlLnNlcnZlclVSTCArICcvRmlsZXMvJyArICRzY29wZS5hRmlsZS5maWxlX2lkICsgJy9JdGVtJyArIEZJTEVfU1RBTVAuZ2V0U3RhbXAoKTtcclxuICAgICAgICAgICAgICAgICAgICBGSUxFX1NUQU1QLnNldFN0YW1wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YW1wID0gRklMRV9TVEFNUC5nZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuRmlsZTEudHlwZS5pbmRleE9mKFwiaW1hZ2VcIikgPiAtMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNQaG90byA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlICRzY29wZS5pc1Bob3RvID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLm5hbWUgPSBmcmVzcG9uc2UubmFtZTsgJHNjb3BlLmFGaWxlLnBhdGggPSBmcmVzcG9uc2UucGF0aDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLkZpbGUxICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLkZpbGUgPSAkc2NvcGUuYUZpbGUuRmlsZTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5GaWxlMSA9IHVuZGVmaW5lZDsgLy9wdXQgaXQgYXMgZmlsZSBhbmQgcmVtb3ZlIGl0IGZyb20gMVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBmcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiSFdNIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSFdNRmlsZXMuc3BsaWNlKCRzY29wZS5leGlzdEZpbGVJbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkhXTUZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoZnJlc3BvbnNlLmZpbGV0eXBlX2lkID09PSAxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5od21JbWFnZUZpbGVzLnNwbGljZSgkc2NvcGUuZXhpc3RGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtSW1hZ2VGaWxlcy5wdXNoKGZyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZXNbJHNjb3BlLmFsbFNGaWxlSW5kZXhdID0gZnJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmZpbGVJdGVtRXhpc3RzID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNGaWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL3Nob3cgYSBtb2RhbCB3aXRoIHRoZSBsYXJnZXIgaW1hZ2UgYXMgYSBwcmV2aWV3IG9uIHRoZSBwaG90byBmaWxlIGZvciB0aGlzIGh3bVxyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd0ltYWdlTW9kYWwgPSBmdW5jdGlvbiAoaW1hZ2UpIHtcclxuICAgICAgICAgICAgICAgIHZhciBpbWFnZU1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+SW1hZ2UgRmlsZSBQcmV2aWV3PC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PGltZyBuZy1zcmM9XCJ7e3NldFNSQ319XCIgLz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmltYWdlSWQgPSBpbWFnZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNldFNSQyA9IFNFUlZFUl9VUkwgKyAnL0ZpbGVzLycgKyAkc2NvcGUuaW1hZ2VJZCArICcvSXRlbSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ21kJ1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL3dhbnQgdG8gYWRkIG9yIGVkaXQgZmlsZVxyXG4gICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGUgPSBmdW5jdGlvbiAoZmlsZSkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmZpbGVUeXBlcyA9ICRzY29wZS5maWxlVHlwZUxpc3Q7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWdlbmNpZXMgPSBhZ2VuY3lMaXN0O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmV4aXN0RmlsZUluZGV4ID0gLTE7ICRzY29wZS5leGlzdElNR0ZpbGVJbmRleCA9IC0xOyAkc2NvcGUuYWxsU0ZpbGVJbmRleCA9IC0xOyAvL2luZGV4ZXMgZm9yIHNwbGljZS9jaGFuZ2VcclxuICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZSA9IHt9OyAvL2hvbGRlciBmb3IgZmlsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UgPSB7fTsgLy9ob2xkZXIgZm9yIGZpbGUgc291cmNlXHJcbiAgICAgICAgICAgICAgICAvL0hXTSB3aWxsIG5vdCBoYXZlIGRhdGFmaWxlIFxyXG4gICAgICAgICAgICAgICAgaWYgKGZpbGUgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2VkaXQgaHdtIGZpbGVcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhpc3RGaWxlSW5kZXggPSAkc2NvcGUuSFdNRmlsZXMuaW5kZXhPZihmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVJbmRleCA9ICRzY29wZS5hbGxTRmlsZXMuaW5kZXhPZihmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXhpc3RJTUdGaWxlSW5kZXggPSAkc2NvcGUuaHdtSW1hZ2VGaWxlcy5sZW5ndGggPiAwID8gJHNjb3BlLmh3bUltYWdlRmlsZXMuaW5kZXhPZihmaWxlKSA6IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZSA9IGFuZ3VsYXIuY29weShmaWxlKTtcclxuICAgICAgICAgICAgICAgICAgICBGSUxFLmdldEZpbGVJdGVtKHsgaWQ6ICRzY29wZS5hRmlsZS5maWxlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlSXRlbUV4aXN0cyA9IHJlc3BvbnNlLkxlbmd0aCA+IDAgPyB0cnVlIDogZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmZpbGVUeXBlID0gJHNjb3BlLmZpbGVUeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGZ0KSB7IHJldHVybiBmdC5maWxldHlwZV9pZCA9PSAkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQ7IH0pWzBdLmZpbGV0eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZGV0ZXJtaW5lIGlmIGV4aXN0aW5nIGZpbGUgaXMgYSBwaG90byAoZXZlbiBpZiB0eXBlIGlzIG5vdCApXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5uYW1lICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZJID0gJHNjb3BlLmFGaWxlLm5hbWUubGFzdEluZGV4T2YoXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZUV4dCA9ICRzY29wZS5hRmlsZS5uYW1lLnN1YnN0cmluZyhmSSArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUV4dC5tYXRjaCgvKGpwZ3xKUEd8anBlZ3xKUEVHfHBuZ3xQTkd8Z2lmfEdJRikkLykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1Bob3RvID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlICRzY29wZS5pc1Bob3RvID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zcmMgPSAkc2NvcGUuc2VydmVyVVJMICsgJy9GaWxlcy8nICsgJHNjb3BlLmFGaWxlLmZpbGVfaWQgKyAnL0l0ZW0nICsgRklMRV9TVEFNUC5nZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5maWxlX2RhdGUgPSBuZXcgRGF0ZSgkc2NvcGUuYUZpbGUuZmlsZV9kYXRlKTsgLy9kYXRlIGZvciB2YWxpZGl0eSBvZiBmb3JtIG9uIFBVVFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSAhPT0gdW5kZWZpbmVkKSAkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5hRmlsZS5waG90b19kYXRlKTsgLy9kYXRlIGZvciB2YWxpZGl0eSBvZiBmb3JtIG9uIFBVVFxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlLnNvdXJjZV9pZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBTT1VSQ0UucXVlcnkoeyBpZDogZmlsZS5zb3VyY2VfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UgPSBzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UuRlVMTG5hbWUgPSAkc2NvcGUuYVNvdXJjZS5zb3VyY2VfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY3lOYW1lRm9yQ2FwID0gJHNjb3BlLmFnZW5jaWVzLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gJHNjb3BlLmFTb3VyY2UuYWdlbmN5X2lkOyB9KVswXS5hZ2VuY3lfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfS8vZW5kIGlmIHNvdXJjZVxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIGV4aXN0aW5nIGZpbGVcclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5maWxlX2RhdGUgPSBuZXcgRGF0ZSgpOyAkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UgPSBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAobSkgeyByZXR1cm4gbS5tZW1iZXJfaWQgPT0gJGNvb2tpZXMuZ2V0KCdtSUQnKTsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UuRlVMTG5hbWUgPSAkc2NvcGUuYVNvdXJjZS5mbmFtZSArIFwiIFwiICsgJHNjb3BlLmFTb3VyY2UubG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFnZW5jeU5hbWVGb3JDYXAgPSAkc2NvcGUuYWdlbmNpZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLmFnZW5jeV9pZCA9PSAkc2NvcGUuYVNvdXJjZS5hZ2VuY3lfaWQ7IH0pWzBdLmFnZW5jeV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgfSAvL2VuZCBuZXcgZmlsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dGaWxlRm9ybSA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICRzY29wZS51cGRhdGVBZ2VuY3lGb3JDYXB0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQgPT0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFnZW5jeU5hbWVGb3JDYXAgPSAkc2NvcGUuYWdlbmNpZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLmFnZW5jeV9pZCA9PSAkc2NvcGUuYVNvdXJjZS5hZ2VuY3lfaWQ7IH0pWzBdLmFnZW5jeV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9jcmVhdGUgdGhpcyBuZXcgZmlsZVxyXG4gICAgICAgICAgICAkc2NvcGUuY3JlYXRlRmlsZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkhXTWZpbGVJc1VwbG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGhlU291cmNlID0geyBzb3VyY2VfbmFtZTogJHNjb3BlLmFTb3VyY2UuRlVMTG5hbWUsIGFnZW5jeV9pZDogJHNjb3BlLmFTb3VyY2UuYWdlbmN5X2lkIH07XHJcbiAgICAgICAgICAgICAgICAgICAgLy9wb3N0IHNvdXJjZSBmaXJzdCB0byBnZXQgc291cmNlX2lkXHJcbiAgICAgICAgICAgICAgICAgICAgU09VUkNFLnNhdmUodGhlU291cmNlKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkICE9PSA4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RoZW4gUE9TVCBmaWxlUGFydHMgKFNlcnZpY2VzIHBvcHVsYXRlIFBBVEgpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZmlsZVBhcnRzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGVFbnRpdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZXR5cGVfaWQ6ICRzY29wZS5hRmlsZS5maWxldHlwZV9pZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmFtZTogJHNjb3BlLmFGaWxlLkZpbGUubmFtZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9kYXRlOiAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaG90b19kYXRlOiAkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZGVzY3JpcHRpb246ICRzY29wZS5hRmlsZS5kZXNjcmlwdGlvbixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l0ZV9pZDogJHNjb3BlLnRoaXNIV01zaXRlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZV9pZDogcmVzcG9uc2Uuc291cmNlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaG90b19kaXJlY3Rpb246ICRzY29wZS5hRmlsZS5waG90b19kaXJlY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlX2RkOiAkc2NvcGUuYUZpbGUubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZV9kZDogJHNjb3BlLmFGaWxlLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHdtX2lkOiAkc2NvcGUuYUhXTS5od21faWRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGU6ICRzY29wZS5hRmlsZS5GaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9uZWVkIHRvIHB1dCB0aGUgZmlsZVBhcnRzIGludG8gY29ycmVjdCBmb3JtYXQgZm9yIHBvc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZUVudGl0eVwiLCBKU09OLnN0cmluZ2lmeShmaWxlUGFydHMuRmlsZUVudGl0eSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZVwiLCBmaWxlUGFydHMuRmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBQT1NUIGl0IChmaWxlcGFydHMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGSUxFLnVwbG9hZEZpbGUoZmQpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGxvYWRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiSFdNIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSFdNRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hbGxTRmlsZXMucHVzaChmcmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5hbGxTRmlsZXMpOyAvL3VwZGF0ZXMgdGhlIGZpbGUgbGlzdCBvbiB0aGUgc2l0ZWRhc2hib2FyZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmcmVzcG9uc2UuZmlsZXR5cGVfaWQgPT09IDEpICRzY29wZS5od21JbWFnZUZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVGb3JtID0gZmFsc2U7ICRzY29wZS5IV01maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkhXTWZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHVwbG9hZGluZyBmaWxlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5zb3VyY2VfaWQgPSByZXNwb25zZS5zb3VyY2VfaWQ7ICRzY29wZS5hRmlsZS5zaXRlX2lkID0gJHNjb3BlLnRoaXNIV01zaXRlLnNpdGVfaWQ7ICRzY29wZS5hRmlsZS5od21faWQgPSAkc2NvcGUuYUhXTS5od21faWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGSUxFLnNhdmUoJHNjb3BlLmFGaWxlKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChmcmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkxpbmsgc2F2ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJlc3BvbnNlLmZpbGVCZWxvbmdzVG8gPSBcIkhXTSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkhXTUZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzLnB1c2goZnJlc3BvbnNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuYWxsU0ZpbGVzKTsgLy91cGRhdGVzIHRoZSBmaWxlIGxpc3Qgb24gdGhlIHNpdGVkYXNoYm9hcmQgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTsgJHNjb3BlLkhXTWZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSFdNZmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGZpbGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgZWxzZVxyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5IV01maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3IgY3JlYXRpbmcgU291cmNlIGluZm86IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTsvL2VuZCBzb3VyY2Uuc2F2ZSgpICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH0vL2VuZCB2YWxpZFxyXG4gICAgICAgICAgICB9Oy8vZW5kIGNyZWF0ZSgpXHJcblxyXG4gICAgICAgICAgICAvL3VwZGF0ZSB0aGlzIGZpbGVcclxuICAgICAgICAgICAgJHNjb3BlLnNhdmVGaWxlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSFdNZmlsZUlzVXBsb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAvL29ubHkgcGhvdG8gb3Igb3RoZXIgZmlsZSB0eXBlIChubyBkYXRhIGZpbGUgaGVyZSlcclxuICAgICAgICAgICAgICAgICAgICAvL3B1dCBzb3VyY2Ugb3IgZGF0YWZpbGUsIHB1dCBmaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdoYXRraW5kID0gJHNjb3BlLmFGaWxlLmZpbGVCZWxvbmdzVG87XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFTb3VyY2Uuc291cmNlX2lkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2Uuc291cmNlX25hbWUgPSAkc2NvcGUuYVNvdXJjZS5GVUxMbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU09VUkNFLnVwZGF0ZSh7IGlkOiAkc2NvcGUuYVNvdXJjZS5zb3VyY2VfaWQgfSwgJHNjb3BlLmFTb3VyY2UpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRklMRS51cGRhdGUoeyBpZDogJHNjb3BlLmFGaWxlLmZpbGVfaWQgfSwgJHNjb3BlLmFGaWxlKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChmaWxlUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlUmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiSFdNIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuSFdNRmlsZXNbJHNjb3BlLmV4aXN0RmlsZUluZGV4XSA9IGZpbGVSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU0ZpbGVzWyRzY29wZS5hbGxTRmlsZUluZGV4XSA9IGZpbGVSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuYWxsU0ZpbGVzKTsgLy91cGRhdGVzIHRoZSBmaWxlIGxpc3Qgb24gdGhlIHNpdGVkYXNoYm9hcmRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0ZpbGVGb3JtID0gZmFsc2U7ICRzY29wZS5IV01maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkhXTWZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBmaWxlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5IV01maWxlSXNVcGxvYWRpbmcgPSBmYWxzZTsgLy9Mb2FkaW5nLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgdmFsaWRcclxuICAgICAgICAgICAgfTsvL2VuZCBzYXZlKClcclxuXHJcbiAgICAgICAgICAgIC8vZGVsZXRlIHRoaXMgZmlsZVxyXG4gICAgICAgICAgICAkc2NvcGUuZGVsZXRlRmlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBEZWxldGVNb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAncmVtb3ZlbW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ0NvbmZpcm1Nb2RhbEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbScsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBuYW1lVG9SZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkc2NvcGUuYUZpbGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIERlbGV0ZU1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGZpbGVUb1JlbW92ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICBGSUxFLmRlbGV0ZSh7IGlkOiBmaWxlVG9SZW1vdmUuZmlsZV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJGaWxlIFJlbW92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5IV01GaWxlcy5zcGxpY2UoJHNjb3BlLmV4aXN0RmlsZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFsbFNGaWxlcy5zcGxpY2UoJHNjb3BlLmFsbFNGaWxlSW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtSW1hZ2VGaWxlcy5zcGxpY2UoJHNjb3BlLmV4aXN0SU1HRmlsZUluZGV4LCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU2l0ZV9GaWxlcy5zZXRBbGxTaXRlRmlsZXMoJHNjb3BlLmFsbFNGaWxlcyk7IC8vdXBkYXRlcyB0aGUgZmlsZSBsaXN0IG9uIHRoZSBzaXRlZGFzaGJvYXJkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9KTsvL2VuZCBEZWxldGVNb2RhbC5yZXN1bHQudGhlblxyXG4gICAgICAgICAgICB9Oy8vZW5kIGRlbGV0ZSgpXHJcblxyXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsRmlsZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UgPSB7fTtcclxuICAgICAgICAgICAgICAgIC8vICAkc2NvcGUuZGF0YWZpbGUgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZUZvcm0gPSBmYWxzZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8jZW5kcmVnaW9uIEZJTEUgU1RVRkZcclxuICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOyAvLyBsb2FkaW5nLi5cclxuICAgICAgICB9XSk7IC8vZW5kIEhXTVxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAvKiBjb250cm9sbGVycy5qcywgJ2xlYWZsZXQtZGlyZWN0aXZlJyd1aS51bmlxdWUnLCduZ1RhZ3NJbnB1dCcsKi9cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU1ROQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQ29udHJvbGxlcnMnKTtcclxuXHJcbiAgICBTVE5Db250cm9sbGVycy5jb250cm9sbGVyKCdod21DdHJsJywgWyckc2NvcGUnLCAnJHJvb3RTY29wZScsICckY29va2llcycsICckbG9jYXRpb24nLCAnJHN0YXRlJywgJyRodHRwJywgJyR1aWJNb2RhbCcsICckZmlsdGVyJywgJyR0aW1lb3V0JywgJ3RoaXNTaXRlJywgJ3RoaXNTaXRlSFdNcycsICdIV01fU2VydmljZScsICdhbGxBZ2VuY2llcycsICdhbGxIV01UeXBlcycsICdhbGxIV01RdWFsaXRpZXMnLCAnYWxsSG9yRGF0dW1zJywgJ2FsbE1hcmtlcnMnLCAnYWxsSG9yQ29sbE1ldGhvZHMnLCAnYWxsVmVydERhdHVtcycsICdhbGxWZXJ0Q29sTWV0aG9kcycsICdhbGxFdmVudHMnLCAnYWxsRmlsZVR5cGVzJywgJ01FTUJFUicsICdIV00nLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRjb29raWVzLCAkbG9jYXRpb24sICRzdGF0ZSwgJGh0dHAsICR1aWJNb2RhbCwgJGZpbHRlciwgJHRpbWVvdXQsIHRoaXNTaXRlLCB0aGlzU2l0ZUhXTXMsIEhXTV9TZXJ2aWNlLCBhbGxBZ2VuY2llcywgYWxsSFdNVHlwZXMsIGFsbEhXTVF1YWxpdGllcywgYWxsSG9yRGF0dW1zLCBhbGxNYXJrZXJzLCBhbGxIb3JDb2xsTWV0aG9kcywgYWxsVmVydERhdHVtcywgYWxsVmVydENvbE1ldGhvZHMsIGFsbEV2ZW50cywgYWxsRmlsZVR5cGVzLCBNRU1CRVIsIEhXTSkge1xyXG4gICAgICAgICAgICBpZiAoJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSB1bmRlZmluZWQgfHwgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYXV0aCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vZ2xvYmFsIHZhcnNcclxuICAgICAgICAgICAgICAgICRzY29wZS5od21Db3VudCA9IHsgdG90YWw6IHRoaXNTaXRlSFdNcy5sZW5ndGggfTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZUhXTXMgPSB0aGlzU2l0ZUhXTXM7XHJcbiAgICAgICAgICAgICAgICBIV01fU2VydmljZS5zZXRBbGxTaXRlSFdNcygkc2NvcGUuU2l0ZUhXTXMpO1xyXG4gICAgICAgICAgICAgICAgLy8gd2F0Y2ggZm9yIHRoZSBzZXNzaW9uIGV2ZW50IHRvIGNoYW5nZSBhbmQgdXBkYXRlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50TmFtZScpOyB9LCBmdW5jdGlvbiAobmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vzc2lvbkV2ZW50TmFtZSA9IG5ld1ZhbHVlICE9PSB1bmRlZmluZWQgPyBuZXdWYWx1ZSA6IFwiQWxsIEV2ZW50c1wiO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXNzaW9uRXZlbnRFeGlzdHMgPSAkc2NvcGUuc2Vzc2lvbkV2ZW50TmFtZSAhPSBcIkFsbCBFdmVudHNcIiA/IHRydWUgOiBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobmV3VmFsdWUgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZUhXTXMgPSB0aGlzU2l0ZUhXTXMuZmlsdGVyKGZ1bmN0aW9uIChoKSB7IHJldHVybiBoLmV2ZW50X2lkID09ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5od21Db3VudCA9IHsgdG90YWw6ICRzY29wZS5TaXRlSFdNcy5sZW5ndGggfTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZUhXTXMgPSB0aGlzU2l0ZUhXTXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5od21Db3VudCA9IHsgdG90YWw6ICRzY29wZS5TaXRlSFdNcy5sZW5ndGggfTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0hXTU1vZGFsID0gZnVuY3Rpb24gKEhXTWNsaWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaHdtRmlsZVR5cGVzID0gYWxsRmlsZVR5cGVzLmZpbHRlcihmdW5jdGlvbiAoaGZ0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vUGhvdG8gKDEpLCBIaXN0b3JpYyAoMyksIEZpZWxkIFNoZWV0cyAoNCksIExldmVsIE5vdGVzICg1KSwgT3RoZXIgKDcpLCBMaW5rICg4KSwgU2tldGNoICgxMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhmdC5maWxldHlwZSA9PT0gJ1Bob3RvJyB8fCBoZnQuZmlsZXR5cGUgPT09ICdIaXN0b3JpYyBDaXRhdGlvbicgfHwgaGZ0LmZpbGV0eXBlID09PSAnRmllbGQgU2hlZXRzJyB8fCBoZnQuZmlsZXR5cGUgPT09ICdMZXZlbCBOb3RlcycgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGhmdC5maWxldHlwZSA9PT0gJ090aGVyJyB8fCBoZnQuZmlsZXR5cGUgPT09ICdMaW5rJyB8fCBoZnQuZmlsZXR5cGUgPT09ICdTa2V0Y2gnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXNzQWxsTGlzdHMgPSBbYWxsSFdNVHlwZXMsIGFsbEhXTVF1YWxpdGllcywgYWxsSG9yRGF0dW1zLCBhbGxIb3JDb2xsTWV0aG9kcywgYWxsVmVydERhdHVtcywgYWxsVmVydENvbE1ldGhvZHMsIGFsbE1hcmtlcnMsIGFsbEV2ZW50cywgaHdtRmlsZVR5cGVzXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXhDbGlja2VkID0gJHNjb3BlLlNpdGVIV01zLmluZGV4T2YoSFdNY2xpY2tlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IHRydWU7IC8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgIC8vbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdIV01tb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2h3bU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnbGcnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93Q2xhc3M6ICdyZXAtZGlhbG9nJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxEcm9wZG93bnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBhc3NBbGxMaXN0cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNIV006IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEhXTWNsaWNrZWQgIT09IDAgPyBIV01jbGlja2VkOiBcImVtcHR5XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBod21BcHByb3ZhbDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoSFdNY2xpY2tlZCAhPT0gMCAmJiAoSFdNY2xpY2tlZC5hcHByb3ZhbF9pZCAhPT0gdW5kZWZpbmVkICYmIEhXTWNsaWNrZWQuYXBwcm92YWxfaWQgPiAwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEhXTS5nZXRIV01BcHByb3ZhbCh7IGlkOiBIV01jbGlja2VkLmh3bV9pZCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaHdtU2l0ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1NpdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZ2VuY3lMaXN0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhbGxBZ2VuY2llcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbE1lbWJlcnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNRU1CRVIuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGNyZWF0ZWRIV00pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9pcyB0aGVyZSBhIG5ldyBIV00gb3IganVzdCBjbG9zZWQgbW9kYWxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZWRIV01bMV09PSAnY3JlYXRlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlSFdNcy5wdXNoKGNyZWF0ZWRIV01bMF0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSFdNX1NlcnZpY2Uuc2V0QWxsU2l0ZUhXTXMoJHNjb3BlLlNpdGVIV01zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5od21Db3VudC50b3RhbCA9ICRzY29wZS5TaXRlSFdNcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZWRIV01bMV0gPT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90aGlzIGlzIGZyb20gZWRpdCAtLSByZWZyZXNoIHBhZ2U/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3VwZGF0ZSB0aGUgbGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4Q2xpY2tlZCA9ICRzY29wZS5TaXRlSFdNcy5pbmRleE9mKEhXTWNsaWNrZWQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVIV01zW2luZGV4Q2xpY2tlZF0gPSBjcmVhdGVkSFdNO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSFdNX1NlcnZpY2Uuc2V0QWxsU2l0ZUhXTXMoJHNjb3BlLlNpdGVIV01zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY3JlYXRlZEhXTVsxXT09ICdkZWxldGVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4Q2xpY2tlZDEgPSAkc2NvcGUuU2l0ZUhXTXMuaW5kZXhPZihIV01jbGlja2VkKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlSFdNcy5zcGxpY2UoaW5kZXhDbGlja2VkMSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaHdtQ291bnQudG90YWwgPSAkc2NvcGUuU2l0ZUhXTXMubGVuZ3RoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSFdNX1NlcnZpY2Uuc2V0QWxsU2l0ZUhXTXMoJHNjb3BlLlNpdGVIV01zKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTsgLy9lbmQgc2hvd0hXTU1vZGFsIGZ1bmN0aW9uXHJcbiAgICAgICAgICAgIH0vL2VuZCBzdG5jcmVkcyBnb29kXHJcbiAgICAgICAgfV0pO1xyXG5cclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBTVE5Db250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTVE5Db250cm9sbGVycycpO1xyXG5cclxuICAgIFNUTkNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ2hpc3RvcmljSFdNQ3RybCcsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGNvb2tpZXMnLCAnJGxvY2F0aW9uJywgJyRodHRwJywgJyRmaWx0ZXInLCAnJHVpYk1vZGFsJywgJ1NJVEUnLCAnSFdNJywgJ09CSkVDVElWRV9QT0lOVCcsICdHRU9DT0RFJywgJ3RoaXNFdmVudCcsICdIRGF0dW1zJywgJ0hDb2xsZWN0TWV0aHMnLCAnU3RhdGVzJywgJ0NvdW50aWVzJywgJ09QVHlwZXMnLCAnVkRhdHVtcycsICdIVHlwZXMnLCAnSFdNUXVhbHMnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRjb29raWVzLCAkbG9jYXRpb24sICRodHRwLCAkZmlsdGVyLCAkdWliTW9kYWwsIFNJVEUsIEhXTSwgT0JKRUNUSVZFX1BPSU5ULCBHRU9DT0RFLCB0aGlzRXZlbnQsIEhEYXR1bXMsIEhDb2xsZWN0TWV0aHMsIFN0YXRlcywgQ291bnRpZXMsIE9QVHlwZXMsIFZEYXR1bXMsIEhUeXBlcywgSFdNUXVhbHMpIHtcclxuICAgICAgICAgICAgaWYgKCRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gdW5kZWZpbmVkIHx8ICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmF1dGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbG9naW4nKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIC8vZ2xvYmFsIHZhcnNcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93TG9hZGluZyA9IGZhbHNlOyAvL2RpdiBob2xkaW5nIGxvYWRlciBhbmQgZHluYW1pYyBhbmQgbWF4IGZvciBwcm9ncmVzcyBiYXJcclxuICAgICAgICAgICAgICAgICRzY29wZS5keW5hbWljID0gMDsgJHNjb3BlLm1heCA9IDA7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaG90SW5zdGFuY2U7ICAvL3NkICAgbGF0IGxvbmcgaGQgIGhjbSAgd2F0ICBHUyAgIHN0ICAgY28gICBvcHQgIG9wbiAgZGVzICB2ZGEgIG9wZCAgaHdtdCBlbnYgICBxdWEgIGZsYWdcclxuICAgICAgICAgICAgICAgICRzY29wZS5jb2x1bW5XaWR0aHMgPSBbMTQwLCA3NiwgODQsIDIyMCwgMjIwLCAxMDAsIDE1MCwgMTIwLCAxMjAsIDE4MCwgMTIwLCAxNDAsIDE0MCwgMTIwLCAxNDAsIDE0MCwgMTQwLCAxMjBdO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkNoYW5nZXMgPSBbXTsgLy90cmFjayBjaGFuZ2VzIG1hZGUgdG8gY29tcGFyZSBmb3Igc2F2aW5nXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaW52YWxpZHMgPSBbXTsgLy9zdG9yZSB3aGVuIGludmFsaWQgdGhyb3duXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZXZlbnQgPSB0aGlzRXZlbnQ7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaERhdHVtTGlzdCA9IEhEYXR1bXM7ICRzY29wZS5oRGF0dW1BcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmhDb2xsZWN0TGlzdCA9IEhDb2xsZWN0TWV0aHM7ICRzY29wZS5oY29sbGVjdEFycmF5ID0gW107XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVMaXN0ID0gU3RhdGVzOyAvL1RPRE8gTWFrZSB0aGlzIGludGVyYWN0aXZlIHdpdGggY291bnRpZXMgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc3RhdGVBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNvdW50eUxpc3QgPSBDb3VudGllczsgJHNjb3BlLmNvdW50eUFycmF5ID0gW107XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUub3BUeXBlTGlzdCA9IE9QVHlwZXM7ICRzY29wZS5vcFR5cGVBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZEYXR1bUxpc3QgPSBWRGF0dW1zOyAkc2NvcGUudkRhdHVtQXJyYXkgPSBbXTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5od21UeXBlTGlzdCA9IEhUeXBlczsgJHNjb3BlLmh3bVR5cGVBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmh3bUVudmlyTGlzdCA9IFsnQ29hc3RhbCcsICdSaXZlcmluZSddO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmh3bVF1YWxpdHlMaXN0ID0gSFdNUXVhbHM7ICRzY29wZS5od21RdWFsaXR5QXJyYXkgPSBbXTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuaGlzdG9yaWNIV01zID0gW107XHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIGZvcm1hdCBkcm9wZG93bnMgZnJvbSBvYmplY3QgYXJyYXkgdG8gc3RyaW5nIGFycmF5XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLmhEYXR1bUxpc3QsIGZ1bmN0aW9uIChsKSB7ICRzY29wZS5oRGF0dW1BcnJheS5wdXNoKGwuZGF0dW1fbmFtZSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5oQ29sbGVjdExpc3QsIGZ1bmN0aW9uIChsKSB7ICRzY29wZS5oY29sbGVjdEFycmF5LnB1c2gobC5oY29sbGVjdF9tZXRob2QpOyB9KTtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuc3RhdGVMaXN0LCBmdW5jdGlvbiAobCkgeyAkc2NvcGUuc3RhdGVBcnJheS5wdXNoKGwuc3RhdGVfbmFtZSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5jb3VudHlMaXN0LCBmdW5jdGlvbiAobCkgeyAkc2NvcGUuY291bnR5QXJyYXkucHVzaChsLmNvdW50eV9uYW1lKTsgfSk7XHJcbiAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goJHNjb3BlLm9wVHlwZUxpc3QsIGZ1bmN0aW9uIChsKSB7ICRzY29wZS5vcFR5cGVBcnJheS5wdXNoKGwub3BfdHlwZSk7IH0pO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS52RGF0dW1MaXN0LCBmdW5jdGlvbiAobCkgeyAkc2NvcGUudkRhdHVtQXJyYXkucHVzaChsLmRhdHVtX2FiYnJldmlhdGlvbik7IH0pO1xyXG4gICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5od21UeXBlTGlzdCwgZnVuY3Rpb24gKGwpIHsgJHNjb3BlLmh3bVR5cGVBcnJheS5wdXNoKGwuaHdtX3R5cGUpOyB9KTtcclxuICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuaHdtUXVhbGl0eUxpc3QsIGZ1bmN0aW9uIChsKSB7ICRzY29wZS5od21RdWFsaXR5QXJyYXkucHVzaChsLmh3bV9xdWFsaXR5KTsgfSk7XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICAgICAgICAgICAgICAvL0dldCBzdGF0ZSBjb3VudHkgYnV0dG9uIGNsaWNrZWRcclxuICAgICAgICAgICAgICAgICRzY29wZS5nZXRTdGF0ZUNvID0gZnVuY3Rpb24gKGMsIHIpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcm93VmFsdWVzID0gJHNjb3BlLmhvdEluc3RhbmNlLmdldERhdGFBdFJvdyhyKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoKHJvd1ZhbHVlc1sxXSAhPT0gXCJcIiAmJiByb3dWYWx1ZXNbMV0gIT09IG51bGwpICYmIChyb3dWYWx1ZXNbMl0gIT09IFwiXCIgJiYgcm93VmFsdWVzWzJdICE9PSBudWxsKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gdHJ1ZTsgLy9sb2FkaW5nLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb247XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEdFT0NPREUuZ2V0QWRkcmVzc1BhcnRzKHsgTG9uZ2l0dWRlOiByb3dWYWx1ZXNbMl0sIExhdGl0dWRlOiByb3dWYWx1ZXNbMV0gfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3BvbnNlLnJlc3VsdC5nZW9ncmFwaGllcy5Db3VudGllcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlRklQUyA9IHJlc3BvbnNlLnJlc3VsdC5nZW9ncmFwaGllcy5Db3VudGllc1swXS5TVEFURTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY291bnR5TmFtZSA9IHJlc3BvbnNlLnJlc3VsdC5nZW9ncmFwaGllcy5Db3VudGllc1swXS5OQU1FO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzU3RhdGVJRCA9ICRzY29wZS5jb3VudHlMaXN0LmZpbHRlcihmdW5jdGlvbiAoYykgeyByZXR1cm4gYy5zdGF0ZV9maXAgPT0gc3RhdGVGSVBTOyB9KVswXS5zdGF0ZV9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc1N0YXRlID0gJHNjb3BlLnN0YXRlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc3RhdGVfaWQgPT0gdGhpc1N0YXRlSUQ7IH0pWzBdO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodGhpc1N0YXRlICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmhvdEluc3RhbmNlLnNldERhdGFBdENlbGwociwgNywgdGhpc1N0YXRlLnN0YXRlX25hbWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc3RhdGVDb3VudHlMaXN0ID0gJHNjb3BlLmNvdW50eUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnN0YXRlX2lkID09IHRoaXNTdGF0ZS5zdGF0ZV9pZDsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jb3VudHlBcnJheSA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc3RhdGVDb3VudHlMaXN0LCBmdW5jdGlvbiAobCkgeyAkc2NvcGUuY291bnR5QXJyYXkucHVzaChsLmNvdW50eV9uYW1lKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5ob3RJbnN0YW5jZS5zZXRDZWxsTWV0YShyLCA4LCBcInNvdXJjZVwiLCAkc2NvcGUuY291bnR5QXJyYXkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaG90SW5zdGFuY2Uuc2V0RGF0YUF0Q2VsbChyLCA4LCBjb3VudHlOYW1lKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOy8vIGxvYWRpbmcuLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiVGhlIExhdGl0dWRlL0xvbmdpdHVkZSBkaWQgbm90IHJldHVybiBhIHJlY29nbml6ZWQgc3RhdGUuIFBsZWFzZSBjaG9vc2Ugb25lIGZyb20gdGhlIGRyb3Bkb3duLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBnZXR0aW5nIGFkZHJlc3MgbG9jYXRpb24uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZy5zaG93TG9hZGluZyA9IGZhbHNlOy8vIGxvYWRpbmcuLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy90aGV5IGRpZCBub3QgdHlwZSBhIGxhdC9sb25nIGZpcnN0Li4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTsvLyBsb2FkaW5nLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGVtcHR5TGF0TG9uZ01vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+UGxlYXNlIHByb3ZpZGUgYSBMYXRpdHVkZSBhbmQgTG9uZ2l0dWRlIGJlZm9yZSBjbGlja2luZyBHZXQgU3RhdGUvQ291bnR5PC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfS8vZW5kIGlmIHJvdyB2YWx1ZXMgYXJlIHRoZXJlICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH0vL2VuZCBnZXRTdGF0ZUNvKClcclxuICAgICAgICAgICAgICAgICRzY29wZS5VcGRhdGVDb3VudGllcyA9IGZ1bmN0aW9uICh0aGVDaGFuZ2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc1N0YXRlID0gJHNjb3BlLnN0YXRlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc3RhdGVfbmFtZSA9PSB0aGVDaGFuZ2VbM107IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzdGF0ZUNvdW50eUxpc3QgPSAkc2NvcGUuY291bnR5TGlzdC5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMuc3RhdGVfaWQgPT0gdGhpc1N0YXRlLnN0YXRlX2lkOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuY291bnR5QXJyYXkgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goc3RhdGVDb3VudHlMaXN0LCBmdW5jdGlvbiAobCkgeyAkc2NvcGUuY291bnR5QXJyYXkucHVzaChsLmNvdW50eV9uYW1lKTsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmhvdEluc3RhbmNlLnNldENlbGxNZXRhKHRoZUNoYW5nZVswXSwgOCwgXCJzb3VyY2VcIiwgJHNjb3BlLmNvdW50eUFycmF5KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVuZGVyZXJzXHJcbiAgICAgICAgICAgICAgICB2YXIgcmVxdWlyZWRNb2RhbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcmVxTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+VGhpcyBmaWVsZCBpcyByZXF1aXJlZC48L3A+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubGF0VmFsaWRhdG9yID0gZnVuY3Rpb24gKHZhbHVlLCBjYWxsYmFjaykge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbnVtYmVyIGFuZCA+IDBcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPCAwIHx8IGlzTmFOKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGF0TW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5MYXRpdHVkZSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiAwLjwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkTW9kYWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9uZ1ZhbGlkYXRvciA9IGZ1bmN0aW9uICh2YWx1ZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodmFsdWUgPiAwIHx8IGlzTmFOKHZhbHVlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9uZ01vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwibW9kYWwtaGVhZGVyXCI+PGgzIGNsYXNzPVwibW9kYWwtdGl0bGVcIj5FcnJvcjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+TG9uZ2l0dWRlIG11c3QgYmUgbGVzcyB0aGFuIDAuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6Wyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCAgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmICghdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZWRNb2RhbCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayhmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgdmFyIGNvbG9yUmVuZGVyZXIgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIHRkLCByb3csIGNvbCwgcHJvcCwgdmFsdWUsIGNlbGxQcm9wZXJ0aWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyICRidXR0b24gPSAkKCc8YnV0dG9uIHR5cGU9XCJidXR0b25cIiBjbGFzcz1cImJ0biBibnQtcHJpbWFyeVwiPjwvYnV0dG9uPicpO1xyXG4gICAgICAgICAgICAgICAgICAgICRidXR0b24uaHRtbCgnR2V0IFN0YXRlL0NvdW50eScpO1xyXG4gICAgICAgICAgICAgICAgICAgICQodGQpLmVtcHR5KCkuYXBwZW5kKCRidXR0b24pOyAvL2VtcHR5IGlzIG5lZWRlZCBiZWNhdXNlIHlvdSBhcmUgcmVuZGVyaW5nIHRvIGFuIGV4aXN0aW5nIGNlbGxcclxuICAgICAgICAgICAgICAgICAgLy8gIHRkLnN0eWxlLmJhY2tncm91bmQgPSAnI0VFRSc7XHJcbiAgICAgICAgICAgICAgICAgICAvLyB0ZC5pbm5lckhUTUwgPSAnR2V0IFN0YXRlL0NvdW50eSc7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRkO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5yZXF1aXJlZFZhbGlkYXRvciA9IGZ1bmN0aW9uICh2YWx1ZSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVkTW9kYWwoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2soZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb25cclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgLy9yZXNldCBiYWNrIFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByZXNldE1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPjwvaDM+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5BcmUgeW91IHN1cmUgeW91IHdhbnQgdG8gY2xlYXIgdGhlIHRhYmxlPzwvcD48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWNsaWNrPVwiY2FuY2VsKClcIj5DYW5jZWw8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrZHJvcDogJ3N0YXRpYycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleWJvYXJkOiBmYWxzZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogWyckc2NvcGUnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCBmdW5jdGlvbiAoJHNjb3BlLCAkdWliTW9kYWxJbnN0YW5jZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc2V0TW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaGlzdG9yaWNIV01zID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbnZhbGlkcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gaGFuZHNvbnRhYmxlIHNldHRpbmdzXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudGFibGVTZXR0aW5ncyA9IHtcclxuICAgICAgICAgICAgICAgICAgICBjb2xIZWFkZXJzOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJvd0hlYWRlcnM6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udGV4dE1lbnU6IFsncm93X2Fib3ZlJywgJ3Jvd19iZWxvdycsICdyZW1vdmVfcm93J10sXHJcbiAgICAgICAgICAgICAgICAgICAgbWluU3BhcmVSb3dzOiAzLFxyXG4gICAgICAgICAgICAgICAgICAgIGFmdGVySW5pdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaG90SW5zdGFuY2UgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgbWFudWFsQ29sdW1uUmVzaXplOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hbnVhbFJvd1Jlc2l6ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICB3b3JkV3JhcDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgdmlld3BvcnRDb2x1bW5SZW5kZXJpbmdPZmZzZXROdW1iZXI6IDEsICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbFdpZHRoczogJHNjb3BlLmNvbHVtbldpZHRocyxcclxuICAgICAgICAgICAgICAgICAgICBjZWxsczogZnVuY3Rpb24gKHJvdywgY29sLCBwcm9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcGh5c2ljYWwsIGNoZW1pY2FsLGJpb2xvZ2ljYWwsIG1pY3JvYmlvLCB0b3hcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvbCA9PSA2KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2VsbHByb3BzID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjZWxscHJvcHMucmVuZGVyZXIgPSBjb2xvclJlbmRlcmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGNlbGxwcm9wcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgb25CZWZvcmVDaGFuZ2U6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRhdGFbaV1bMV0gPT0gXCJzdGF0ZVwiICYmIGRhdGFbaV1bM10gIT09IGRhdGFbaV1bMl0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuVXBkYXRlQ291bnRpZXMoZGF0YVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIG9uQWZ0ZXJDaGFuZ2U6IGZ1bmN0aW9uIChjaGFuZ2UsIHNvdXJjZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2NoYW5nZSBpcyBhbiBhcnJheSBjb250YWluaW5nIGFycmF5cyBmb3IgZWFjaCBjb2x1bW4gYWZmZWN0ZWQ6IFswXSA9IHJvdywgWzFdID0gZGF0YU5hbWUsIFsyXSA9IHZhbHVlIGl0IHdhcywgWzNdID0gdmFsdWUgaXQgaXMgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc291cmNlIGlzIHN0cmluZyA6IFwiYWx0ZXInLCBcImVtcHR5JywgXCJlZGl0JywgXCJwb3B1bGF0ZUZyb21BcnJheScsIFwibG9hZERhdGEnLCBcImF1dG9maWxsJywgXCJwYXN0ZVwiLiAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzb3VyY2UgIT0gJ2xvYWREYXRhJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGFuZ2UubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL29ubHkgY2FyZSBpZiBpdCB3YXMgYWN0dWFsbHkgY2hhbmdlZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjaGFuZ2VbaV1bMl0gIT09IGNoYW5nZVtpXVszXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQ2hhbmdlcy5wdXNoKGNoYW5nZVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vaWYgKGNoYW5nZVtpXVsxXSA9PSBcInN0YXRlXCIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgJHNjb3BlLlVwZGF0ZUNvdW50aWVzKGNoYW5nZVtpXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgYWZ0ZXJPbkNlbGxNb3VzZURvd246IGZ1bmN0aW9uIChldmVudCwgY29vcmRzLCB0ZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoY29vcmRzLmNvbCA9PSA2KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmdldFN0YXRlQ28oY29vcmRzLmNvbCwgY29vcmRzLnJvdyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwvL2VuZCBhZnRlck9uQ2VsbE1vdXNlRG93biAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICBvbkFmdGVyVmFsaWRhdGU6IGZ1bmN0aW9uIChpc1ZhbGlkLCB2YWx1ZSwgcm93LCBwcm9wLCBzb3VjZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIWlzVmFsaWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaW52YWxpZHMucHVzaCh7IFwiaXNWYWxpZFwiOiBpc1ZhbGlkLCBcInJvd1wiOiByb3csIFwicHJvcFwiOiBwcm9wIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHZJbmRleCA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgdkkgPSAwOyB2SSA8ICRzY29wZS5pbnZhbGlkcy5sZW5ndGg7IHZJKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmludmFsaWRzW3ZJXS5yb3cgPT0gcm93ICYmICRzY29wZS5pbnZhbGlkc1t2SV0ucHJvcCA9PSBwcm9wKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZJbmRleCA9IHZJO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodkluZGV4ID4gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmludmFsaWRzLnNwbGljZSh2SW5kZXgsIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICByb3dIZWlnaHRzOiA1MFxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgICAgICAgICAgfS8vZW5kIGF1dGhvcml6ZWRcclxuICAgIH1dKTtcclxufSgpKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgLyogY29udHJvbGxlcnMuanMsICdsZWFmbGV0LWRpcmVjdGl2ZScndWkudW5pcXVlJywnbmdUYWdzSW5wdXQnLCovXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIFNUTkNvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NUTkNvbnRyb2xsZXJzJyk7XHJcblxyXG4gICAgU1ROQ29udHJvbGxlcnMuY29udHJvbGxlcignaGVscEN0cmwnLCBbJyRzY29wZScsIFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUpIHtcclxuICAgICAgICAgICAgJHNjb3BlLmhlbHBJbmZvID0ge307XHJcbiAgICAgICAgICAgICRzY29wZS5oZWxwSW5mby5mYWN0ID0gXCJTb21lIHJlYWxseSBpbnRlcmVzdGluZyBoZWxwIHdpbGwgYmUgaGVyZS5cIjtcclxuICAgICAgICB9XSk7XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIE1vZGFsQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnTW9kYWxDb250cm9sbGVycycpOy8vXHJcbiAgICBNb2RhbENvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ3NpdGVGaWxlTW9kYWxDdHJsJywgWyckc2NvcGUnLCAnJGNvb2tpZXMnLCAnJGh0dHAnLCAnJHVpYk1vZGFsSW5zdGFuY2UnLCAnJHVpYk1vZGFsJywgJ1NFUlZFUl9VUkwnLCAnRklMRV9TVEFNUCcsICdmaWxlVHlwZUxpc3QnLCAndGhpc0ZpbGUnLCAnZmlsZUV4aXN0cycsICdhbGxNZW1iZXJzJywgJ2ZpbGVTb3VyY2UnLCAnZGF0YUZpbGUnLCAnYWdlbmN5TGlzdCcsICdmaWxlU2l0ZScsICdGSUxFJywgJ1NPVVJDRScsICdEQVRBX0ZJTEUnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRjb29raWVzLCAkaHR0cCwgJHVpYk1vZGFsSW5zdGFuY2UsICR1aWJNb2RhbCwgU0VSVkVSX1VSTCwgRklMRV9TVEFNUCwgZmlsZVR5cGVMaXN0LCB0aGlzRmlsZSwgZmlsZUV4aXN0cywgYWxsTWVtYmVycywgZmlsZVNvdXJjZSwgZGF0YUZpbGUsIGFnZW5jeUxpc3QsIGZpbGVTaXRlLCBGSUxFLCBTT1VSQ0UsIERBVEFfRklMRSkge1xyXG4gICAgICAgICAgICAvL2Ryb3Bkb3duc1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VydmVyVVJMID0gU0VSVkVSX1VSTDtcclxuICAgICAgICAgICAgJHNjb3BlLnVzZXJSb2xlID0gJGNvb2tpZXMuZ2V0KCd1c2Vyc1JvbGUnKTtcclxuICAgICAgICAgICAgJHNjb3BlLnZpZXcgPSB7IEZJTEV2YWw6ICdkZXRhaWwnIH07XHJcbiAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7IC8vTG9hZGluZy4uLiAgICBcclxuICAgICAgICAgICAgJHNjb3BlLmZpbGVUeXBlcyA9IGZpbGVUeXBlTGlzdDtcclxuICAgICAgICAgICAgJHNjb3BlLmFnZW5jaWVzID0gYWdlbmN5TGlzdDtcclxuICAgICAgICAgICAgJHNjb3BlLnRoZVNpdGUgPSBmaWxlU2l0ZTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICRzY29wZS5hRmlsZSA9IHt9OyAvL2hvbGRlciBmb3IgZmlsZVxyXG4gICAgICAgICAgICAkc2NvcGUuYVNvdXJjZSA9IHt9OyAvL2hvbGRlciBmb3IgZmlsZSBzb3VyY2VcclxuICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlID0ge307IC8vaG9sZGVyIGZvciBmaWxlIGRhdGFmaWxlXHJcbiAgICAgICAgICAgIC8vIGlzIGludGVydmFsIGlzIG51bWJlclxyXG4gICAgICAgICAgICAkc2NvcGUuaXNOdW0gPSBmdW5jdGlvbiAoZXZ0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgdGhlRXZlbnQgPSBldnQgfHwgd2luZG93LmV2ZW50O1xyXG4gICAgICAgICAgICAgICAgdmFyIGtleSA9IHRoZUV2ZW50LmtleUNvZGUgfHwgdGhlRXZlbnQud2hpY2g7XHJcbiAgICAgICAgICAgICAgICBpZiAoa2V5ICE9IDQ2ICYmIGtleSAhPSA0NSAmJiBrZXkgPiAzMSAmJiAoa2V5IDwgNDggfHwga2V5ID4gNTcpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhlRXZlbnQucmV0dXJuVmFsdWUgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGhlRXZlbnQucHJldmVudERlZmF1bHQpIHRoZUV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICRzY29wZS5maWxlSXRlbUV4aXN0cyA9IGZpbGVFeGlzdHMgPT0gdW5kZWZpbmVkIHx8IGZpbGVFeGlzdHMuTGVuZ3RoID4gMCA/IHRydWU6ZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAvLyNyZWdpb24gRGF0ZXBpY2tlclxyXG4gICAgICAgICAgICAkc2NvcGUuZGF0ZXBpY2tycyA9IHt9O1xyXG4gICAgICAgICAgICAkc2NvcGUuZGF0ZU9wdGlvbnMgPSB7XHJcbiAgICAgICAgICAgICAgICBzdGFydGluZ0RheTogMSxcclxuICAgICAgICAgICAgICAgIHNob3dXZWVrczogZmFsc2VcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgJHNjb3BlLm9wZW4gPSBmdW5jdGlvbiAoJGV2ZW50LCB3aGljaCkge1xyXG4gICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRhdGVwaWNrcnNbd2hpY2hdID0gdHJ1ZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgICAgICAgICAkc2NvcGUudXBkYXRlQWdlbmN5Rm9yQ2FwdGlvbiA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuY3JlYXRlT1JlZGl0RmlsZSA9PSAnY3JlYXRlJykge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQgPT0gMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFnZW5jeU5hbWVGb3JDYXAgPSAkc2NvcGUuYWdlbmNpZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLmFnZW5jeV9pZCA9PSAkc2NvcGUuYVNvdXJjZS5hZ2VuY3lfaWQ7IH0pWzBdLmFnZW5jeV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmZpbGVDb3B5LmZpbGV0eXBlX2lkID09IDEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY3lOYW1lRm9yQ2FwID0gJHNjb3BlLmFnZW5jaWVzLmZpbHRlcihmdW5jdGlvbiAoYSkgeyByZXR1cm4gYS5hZ2VuY3lfaWQgPT0gJHNjb3BlLnNvdXJjZUNvcHkuYWdlbmN5X2lkOyB9KVswXS5hZ2VuY3lfbmFtZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9mb3JtYXR0aW5nIGRhdGUgYW5kIHRpbWUgcHJvcGVybHkgZm9yIGNocm9tZSBhbmQgZmZcclxuICAgICAgICAgICAgdmFyIGdldERhdGVUaW1lUGFydHMgPSBmdW5jdGlvbiAoZCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHkgPSBkLnN1YnN0cigwLCA0KTtcclxuICAgICAgICAgICAgICAgIHZhciBtID0gZC5zdWJzdHIoNSwgMikgLSAxOyAvL3N1YnRyYWN0IDEgZm9yIGluZGV4IHZhbHVlIChKYW51YXJ5IGlzIDApXHJcbiAgICAgICAgICAgICAgICB2YXIgZGEgPSBkLnN1YnN0cig4LCAyKTtcclxuICAgICAgICAgICAgICAgIHZhciBoID0gZC5zdWJzdHIoMTEsIDIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1pID0gZC5zdWJzdHIoMTQsIDIpO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlYyA9IGQuc3Vic3RyKDE3LCAyKTtcclxuICAgICAgICAgICAgICAgIHZhciB0aGVEYXRlID0gbmV3IERhdGUoeSwgbSwgZGEsIGgsIG1pLCBzZWMpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoZURhdGU7XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIGlmICh0aGlzRmlsZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAvL2VkaXQgZmlsZVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmNyZWF0ZU9SZWRpdEZpbGUgPSAnZWRpdCc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUud2hvc2VGaWxlID0gdGhpc0ZpbGUuZmlsZUJlbG9uZ3NUbztcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUud2hvc2VGaWxlID09ICdPYmplY3RpdmUgUG9pbnQgRmlsZScpICRzY29wZS53aG9zZUZpbGUgPSAnRGF0dW0gTG9jYXRpb24gRmlsZSc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUgPSB0aGlzRmlsZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5maWxlVHlwZSA9IGZpbGVUeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGZ0KSB7IHJldHVybiBmdC5maWxldHlwZV9pZCA9PSAkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQ7IH0pWzBdLmZpbGV0eXBlO1xyXG4gICAgICAgICAgICAgICAgLy9kZXRlcm1pbmUgaWYgZXhpc3RpbmcgZmlsZSBpcyBhIHBob3RvIChldmVuIGlmIHR5cGUgaXMgbm90IClcclxuICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUubmFtZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZJID0gJHNjb3BlLmFGaWxlLm5hbWUubGFzdEluZGV4T2YoXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmaWxlRXh0ID0gJHNjb3BlLmFGaWxlLm5hbWUuc3Vic3RyaW5nKGZJICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVFeHQubWF0Y2goLyhqcGd8SlBHfGpwZWd8SlBFR3xwbmd8UE5HfGdpZnxHSUYpJC8pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1Bob3RvID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgJHNjb3BlLmlzUGhvdG8gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICRzY29wZS5zcmMgPSAkc2NvcGUuc2VydmVyVVJMICsgJy9GaWxlcy8nICsgJHNjb3BlLmFGaWxlLmZpbGVfaWQgKyAnL0l0ZW0nICsgRklMRV9TVEFNUC5nZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5hRmlsZS5maWxlX2RhdGUpOyAvL2RhdGUgZm9yIHZhbGlkaXR5IG9mIGZvcm0gb24gUFVUXHJcbiAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUgIT09IHVuZGVmaW5lZCkgJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUgPSBuZXcgRGF0ZSgkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSk7IC8vZGF0ZSBmb3IgdmFsaWRpdHkgb2YgZm9ybSBvbiBQVVRcclxuICAgICAgICAgICAgICAgIGlmIChmaWxlU291cmNlICE9PSB1bmRlZmluZWQpICB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UgPSBmaWxlU291cmNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlLkZVTExuYW1lID0gJHNjb3BlLmFTb3VyY2Uuc291cmNlX25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UuYWdlbmN5TmFtZSA9ICRzY29wZS5hZ2VuY2llcy5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuYWdlbmN5X2lkID09ICRzY29wZS5hU291cmNlLmFnZW5jeV9pZDsgfSlbMF0uYWdlbmN5X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9hZGQgYWdlbmN5IG5hbWUgdG8gcGhvdG8gY2FwdGlvblxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hZ2VuY3lOYW1lRm9yQ2FwID0gJHNjb3BlLmFTb3VyY2UuYWdlbmN5TmFtZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChkYXRhRmlsZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkFwcHJvdmFsSW5mbyA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZSA9IGRhdGFGaWxlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS50aW1lWm9uZUxpc3QgPSBbJ1VUQycsICdQU1QnLCAnTVNUJywgJ0NTVCcsICdFU1QnXTsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmNvbGxlY3RfZGF0ZSA9IG5ldyBEYXRlKCRzY29wZS5kYXRhZmlsZS5jb2xsZWN0X2RhdGUpOyAvL2RhdGUgZm9yIHZhbGlkaXR5IG9mIGZvcm0gb24gcHV0XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmdvb2Rfc3RhcnQgPSBnZXREYXRlVGltZVBhcnRzKCRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0KTsgLy9kYXRlIGZvciB2YWxpZGl0eSBvZiBmb3JtIG9uIHB1dFxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5nb29kX2VuZCA9IGdldERhdGVUaW1lUGFydHMoJHNjb3BlLmRhdGFmaWxlLmdvb2RfZW5kKTsgLy9kYXRlIGZvciB2YWxpZGl0eSBvZiBmb3JtIG9uIHB1dFxyXG4gICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZGF0YWZpbGUuYXBwcm92YWxfaWQgIT09IHVuZGVmaW5lZCAmJiAkc2NvcGUuZGF0YWZpbGUuYXBwcm92YWxfaWQgIT09IG51bGwgJiYgJHNjb3BlLmRhdGFmaWxlLmFwcHJvdmFsX2lkID49IDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgREFUQV9GSUxFLmdldERGQXBwcm92YWwoeyBpZDogJHNjb3BlLmRhdGFmaWxlLmRhdGFfZmlsZV9pZCB9LCBmdW5jdGlvbiBzdWNjZXNzKGFwcHJvdmFsUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5BcHByb3ZhbEluZm8uYXBwcm92YWxEYXRlID0gbmV3IERhdGUoYXBwcm92YWxSZXNwb25zZS5hcHByb3ZhbF9kYXRlKTsgLy9pbmNsdWRlIG5vdGUgdGhhdCBpdCdzIGRpc3BsYXllZCBpbiB0aGVpciBsb2NhbCB0aW1lIGJ1dCBzdG9yZWQgaW4gVVRDXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQXBwcm92YWxJbmZvLk1lbWJlciA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChhbWVtKSB7IHJldHVybiBhbWVtLm1lbWJlcl9pZCA9PSBhcHByb3ZhbFJlc3BvbnNlLm1lbWJlcl9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIGdldHRpbmcgZGF0YSBmaWxlIGFwcHJvdmFsIGluZm9ybWF0aW9uXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFQcm9jZXNzb3IgPSAkc2NvcGUuZGF0YWZpbGUucHJvY2Vzc29yX2lkICE9PSBudWxsID8gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKGFtZW0pIHsgcmV0dXJuIGFtZW0ubWVtYmVyX2lkID09ICRzY29wZS5kYXRhZmlsZS5wcm9jZXNzb3JfaWQ7IH0pWzBdIDoge307XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnByb2Nlc3NvciA9IGFQcm9jZXNzb3IuZm5hbWUgIT09IHVuZGVmaW5lZCA/IGFQcm9jZXNzb3IuZm5hbWUgKyAnICcgKyBhUHJvY2Vzc29yLmxuYW1lIDogJyc7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvL2NyZWF0ZSBmaWxlXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUud2hvc2VGaWxlID0gXCJTaXRlIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICRzY29wZS5jcmVhdGVPUmVkaXRGaWxlID0gJ2NyZWF0ZSc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5waG90b19kYXRlID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hU291cmNlID0gYWxsTWVtYmVycy5maWx0ZXIoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG0ubWVtYmVyX2lkID09ICRjb29raWVzLmdldCgnbUlEJyk7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UuRlVMTG5hbWUgPSAkc2NvcGUuYVNvdXJjZS5mbmFtZSArIFwiIFwiICsgJHNjb3BlLmFTb3VyY2UubG5hbWU7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWdlbmN5TmFtZUZvckNhcCA9ICRzY29wZS5hZ2VuY2llcy5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuYWdlbmN5X2lkID09ICRzY29wZS5hU291cmNlLmFnZW5jeV9pZDsgfSlbMF0uYWdlbmN5X25hbWU7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlbmRCYWNrID0gJHNjb3BlLmFGaWxlO1xyXG4gICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uoc2VuZEJhY2spO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9jcmVhdGUgdGhpcyBuZXcgZmlsZVxyXG4gICAgICAgICAgICAkc2NvcGUuY3JlYXRlID0gZnVuY3Rpb24gKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHsvL29ubHkgYmUgcGhvdG8gZmlsZSBvciBvdGhlciAuLiBubyBEQVRBIGhlcmVcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICAvL3Bvc3Qgc291cmNlIGZpcnN0IHRvIGdldCBzb3VyY2VfaWRcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGhlU291cmNlID0geyBzb3VyY2VfbmFtZTogJHNjb3BlLmFTb3VyY2UuRlVMTG5hbWUsIGFnZW5jeV9pZDogJHNjb3BlLmFTb3VyY2UuYWdlbmN5X2lkIH07XHJcbiAgICAgICAgICAgICAgICAgICAgLy9ub3cgUE9TVCBTT1VSQ0UsIFxyXG4gICAgICAgICAgICAgICAgICAgIFNPVVJDRS5zYXZlKHRoZVNvdXJjZSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5maWxldHlwZV9pZCAhPT0gOCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy90aGVuIFBPU1QgZmlsZVBhcnRzIChTZXJ2aWNlcyBwb3B1bGF0ZSBQQVRIKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpbGVQYXJ0cyA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlRW50aXR5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGV0eXBlX2lkOiAkc2NvcGUuYUZpbGUuZmlsZXR5cGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICRzY29wZS5hRmlsZS5GaWxlLm5hbWUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVfZGF0ZTogJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGhvdG9fZGF0ZTogJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlc2NyaXB0aW9uOiAkc2NvcGUuYUZpbGUuZGVzY3JpcHRpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6ICRzY29wZS50aGVTaXRlLnNpdGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNvdXJjZV9pZDogcmVzcG9uc2Uuc291cmNlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaG90b19kaXJlY3Rpb246ICRzY29wZS5hRmlsZS5waG90b19kaXJlY3Rpb25cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGU6ICRzY29wZS5hRmlsZS5GaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9uZWVkIHRvIHB1dCB0aGUgZmlsZVBhcnRzIGludG8gY29ycmVjdCBmb3JtYXQgZm9yIHBvc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmZCA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZUVudGl0eVwiLCBKU09OLnN0cmluZ2lmeShmaWxlUGFydHMuRmlsZUVudGl0eSkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmQuYXBwZW5kKFwiRmlsZVwiLCBmaWxlUGFydHMuRmlsZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL25vdyBQT1NUIGl0IChmaWxlcGFydHMpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGSUxFLnVwbG9hZEZpbGUoZmQpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGxvYWRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiU2l0ZSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gJ2NyZWF0ZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2VuZCB0aGUgZmlsZSBiYWNrIHRvIGJlIGFkZGVkIHRvIHRoZSBzY29wZSBsaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbmRCYWNrID0gW2ZyZXNwb25zZSwgc3RhdGVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uoc2VuZEJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBmaWxlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdGhpcyBpcyBhIGxpbmtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5zaXRlX2lkID0gJHNjb3BlLnRoZVNpdGUuc2l0ZV9pZDsgJHNjb3BlLmFGaWxlLnNvdXJjZV9pZCA9IHJlc3BvbnNlLnNvdXJjZV9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZJTEUuc2F2ZSgkc2NvcGUuYUZpbGUpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGZyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRmlsZSBVcGxvYWRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IFwiU2l0ZSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHN0YXRlID0gJ2NyZWF0ZWQnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vc2VuZCB0aGUgZmlsZSBiYWNrIHRvIGJlIGFkZGVkIHRvIHRoZSBzY29wZSBsaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbmRCYWNrID0gW2ZyZXNwb25zZSwgc3RhdGVdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uoc2VuZEJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBmaWxlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfS8vZW5kIHNhdmUgbGluayBmaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNGaWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIFNvdXJjZSBpbmZvOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7Ly9lbmQgc291cmNlLnNhdmUoKVxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIHZhbGlkXHJcbiAgICAgICAgICAgIH07Ly9lbmQgY3JlYXRlKClcclxuICAgICAgICAgICAgJHNjb3BlLmNoYW5nZWRGaWxlVHlwZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIC8vZnJvbSBwaG90byB0byBkYXRhXHJcbiAgICAgICAgICAgICAgICAvL2Zyb20gZGF0YSB0byBwaG90b1xyXG4gICAgICAgICAgICAgICAgLy9mcm9tIGRhdGEgdG8gb3RoZXJcclxuICAgICAgICAgICAgICAgIC8vZnJvbSBwaG90byB0byBvdGhlclxyXG4gICAgICAgICAgICAgICAgLy9mcm9tIG90aGVyIHRvIG90aGVyXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgLy91cGRhdGUgdGhpcyBmaWxlXHJcbiAgICAgICAgICAgICRzY29wZS5zYXZlID0gZnVuY3Rpb24gKHZhbGlkKSB7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgaWYgKCRzY29wZS5maWxlQ29weS5maWxldHlwZV9pZCA9PSAyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgZW5kIGRhdGUgaXMgYWZ0ZXIgc3RhcnQgZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzID0gJHNjb3BlLmRmQ29weS5nb29kX3N0YXJ0Oy8vbmVlZCB0byBnZXQgZGVwIHN0YXR1cyBkYXRlIGluIHNhbWUgZm9ybWF0IGFzIHJldHJpZXZlZCB0byBjb21wYXJlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGUgPSAkc2NvcGUuZGZDb3B5Lmdvb2RfZW5kOyAvL3N0dXBpZCBjb21tYSBpbiB0aGVyZSBtYWtpbmcgaXQgbm90IHRoZSBzYW1lXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG5ldyBEYXRlKGUpIDwgbmV3IERhdGUocykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZpeERhdGUgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJtb2RhbC1oZWFkZXJcIj48aDMgY2xhc3M9XCJtb2RhbC10aXRsZVwiPkVycm9yPC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWJvZHlcIj48cD5UaGUgZ29vZCBlbmQgZGF0ZSBtdXN0IGJlIGFmdGVyIHRoZSBnb29kIHN0YXJ0IGRhdGUuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtZm9vdGVyXCI+PGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tcHJpbWFyeVwiIG5nLWVudGVyPVwib2soKVwiIG5nLWNsaWNrPVwib2soKVwiPk9LPC9idXR0b24+PC9kaXY+JyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZml4RGF0ZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9Ly9lbmQgaWYgRGF0ZTxEYXRlXHJcbiAgICAgICAgICAgICAgICB9Ly9lbmQgZmlsZS5Db3B5LmZpbGV0eXBlX2lkID09IDJcclxuICAgICAgICAgICAgICAgIGlmICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAvL29ubHkgcGhvdG8gb3Igb3RoZXIgZmlsZSB0eXBlIChubyBkYXRhIGZpbGUgaGVyZSlcclxuICAgICAgICAgICAgICAgICAgICAvL3B1dCBzb3VyY2Ugb3IgZGF0YWZpbGUsIHB1dCBmaWxlXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHdoYXRraW5kID0gJHNjb3BlLmFGaWxlLmZpbGVCZWxvbmdzVG87XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLnNvdXJjZUNvcHkuc291cmNlX2lkICE9PSB1bmRlZmluZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNvdXJjZUNvcHkuc291cmNlX25hbWUgPSAkc2NvcGUuc291cmNlQ29weS5GVUxMbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgU09VUkNFLnVwZGF0ZSh7IGlkOiAkc2NvcGUuc291cmNlQ29weS5zb3VyY2VfaWQgfSwgJHNjb3BlLnNvdXJjZUNvcHkpLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHNSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UgPSBzUmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYVNvdXJjZS5GVUxMbmFtZSA9ICRzY29wZS5hU291cmNlLnNvdXJjZV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmFTb3VyY2UuYWdlbmN5TmFtZSA9ICRzY29wZS5hZ2VuY2llcy5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuYWdlbmN5X2lkID09ICRzY29wZS5hU291cmNlLmFnZW5jeV9pZDsgfSlbMF0uYWdlbmN5X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2VkaXRpbmcganVzdCB0aGUgZmlsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRklMRS51cGRhdGUoeyBpZDogJHNjb3BlLmZpbGVDb3B5LmZpbGVfaWQgfSwgJHNjb3BlLmZpbGVDb3B5KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChmaWxlUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlUmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IHdoYXRraW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZSA9IGZpbGVSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuZmlsZVR5cGUgPSBmaWxlVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChmdCkgeyByZXR1cm4gZnQuZmlsZXR5cGVfaWQgPT0gJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkOyB9KVswXS5maWxldHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlID0gbmV3IERhdGUoJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSk7IC8vZGF0ZSBmb3IgdmFsaWRpdHkgb2YgZm9ybSBvbiBQVVRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUgIT09IHVuZGVmaW5lZCkgJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUgPSBuZXcgRGF0ZSgkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSk7IC8vZGF0ZSBmb3IgdmFsaWRpdHkgb2YgZm9ybSBvbiBQVVRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZUNvcHkgPSB7fTsgJHNjb3BlLnNvdXJjZUNvcHkgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudmlldy5GSUxFdmFsID0gJ2RldGFpbCc7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNGaWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNGaWxlSXNVcGxvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvciBzYXZpbmcgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IGZhbHNlOyAvL0xvYWRpbmcuLi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBzb3VyY2U6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9kYXRhIGZpbGVcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9jaGVjayB0aW1lem9uZSBhbmQgbWFrZSBzdXJlIGRhdGUgc3RheXMgdXRjXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuZGZDb3B5LnRpbWVfem9uZSAhPSBcIlVUQ1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2NvbnZlcnQgaXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB1dGNTdGFydERhdGVUaW1lID0gbmV3IERhdGUoJHNjb3BlLmRmQ29weS5nb29kX3N0YXJ0KS50b1VUQ1N0cmluZygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHV0Y0VuZERhdGVUaW1lID0gbmV3IERhdGUoJHNjb3BlLmRmQ29weS5nb29kX2VuZCkudG9VVENTdHJpbmcoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kZkNvcHkuZ29vZF9zdGFydCA9IHV0Y1N0YXJ0RGF0ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGZDb3B5Lmdvb2RfZW5kID0gdXRjRW5kRGF0ZVRpbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGZDb3B5LnRpbWVfem9uZSA9ICdVVEMnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgJ0dNVCcgaXMgdGFja2VkIG9uIHNvIGl0IGRvZXNuJ3QgdHJ5IHRvIGFkZCBocnMgdG8gbWFrZSB0aGUgYWxyZWFkeSB1dGMgYSB1dGMgaW4gZGJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBzaSA9ICRzY29wZS5kZkNvcHkuZ29vZF9zdGFydC50b1N0cmluZygpLmluZGV4T2YoJ0dNVCcpICsgMztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlaSA9ICRzY29wZS5kZkNvcHkuZ29vZF9lbmQudG9TdHJpbmcoKS5pbmRleE9mKCdHTVQnKSArIDM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZGZDb3B5Lmdvb2Rfc3RhcnQgPSAkc2NvcGUuZGZDb3B5Lmdvb2Rfc3RhcnQudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgc2kpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRmQ29weS5nb29kX2VuZCA9ICRzY29wZS5kZkNvcHkuZ29vZF9lbmQudG9TdHJpbmcoKS5zdWJzdHJpbmcoMCwgZWkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIERBVEFfRklMRS51cGRhdGUoeyBpZDogJHNjb3BlLmRmQ29weS5kYXRhX2ZpbGVfaWQgfSwgJHNjb3BlLmRmQ29weSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoZGZSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlID0gZGZSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5kYXRhZmlsZS5jb2xsZWN0X2RhdGUgPSBuZXcgRGF0ZSgkc2NvcGUuZGF0YWZpbGUuY29sbGVjdF9kYXRlKTsgLy9kYXRlIGZvciB2YWxpZGl0eSBvZiBmb3JtIG9uIHB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmdvb2Rfc3RhcnQgPSBnZXREYXRlVGltZVBhcnRzKCRzY29wZS5kYXRhZmlsZS5nb29kX3N0YXJ0KTsgLy9kYXRlIGZvciB2YWxpZGl0eSBvZiBmb3JtIG9uIHB1dFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlLmdvb2RfZW5kID0gZ2V0RGF0ZVRpbWVQYXJ0cygkc2NvcGUuZGF0YWZpbGUuZ29vZF9lbmQpOyAvL2RhdGUgZm9yIHZhbGlkaXR5IG9mIGZvcm0gb24gcHV0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYVByb2Nlc3NvciA9ICRzY29wZS5kYXRhZmlsZS5wcm9jZXNzb3JfaWQgIT09IG51bGwgPyBhbGxNZW1iZXJzLmZpbHRlcihmdW5jdGlvbiAoYW1lbSkgeyByZXR1cm4gYW1lbS5tZW1iZXJfaWQgPT0gJHNjb3BlLmRhdGFmaWxlLnByb2Nlc3Nvcl9pZDsgfSlbMF0gOiB7fTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5wcm9jZXNzb3IgPSBhUHJvY2Vzc29yLmZuYW1lICE9PSB1bmRlZmluZWQgPyBhUHJvY2Vzc29yLmZuYW1lICsgJyAnICsgYVByb2Nlc3Nvci5sbmFtZSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRklMRS51cGRhdGUoeyBpZDogJHNjb3BlLmZpbGVDb3B5LmZpbGVfaWQgfSwgJHNjb3BlLmZpbGVDb3B5KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChmaWxlUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgVXBkYXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlUmVzcG9uc2UuZmlsZUJlbG9uZ3NUbyA9IHdoYXRraW5kO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZSA9IGZpbGVSZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuZmlsZVR5cGUgPSBmaWxlVHlwZUxpc3QuZmlsdGVyKGZ1bmN0aW9uIChmdCkgeyByZXR1cm4gZnQuZmlsZXR5cGVfaWQgPT0gJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkOyB9KVswXS5maWxldHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlID0gbmV3IERhdGUoJHNjb3BlLmFGaWxlLmZpbGVfZGF0ZSk7IC8vZGF0ZSBmb3IgdmFsaWRpdHkgb2YgZm9ybSBvbiBQVVRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUgIT09IHVuZGVmaW5lZCkgJHNjb3BlLmFGaWxlLnBob3RvX2RhdGUgPSBuZXcgRGF0ZSgkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSk7IC8vZGF0ZSBmb3IgdmFsaWRpdHkgb2YgZm9ybSBvbiBQVVRcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZUNvcHkgPSB7fTsgJHNjb3BlLmRmQ29weSA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS52aWV3LkZJTEV2YWwgPSAnZGV0YWlsJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIHNhdmluZyBmaWxlOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7IC8vTG9hZGluZy4uLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGRhdGEgZmlsZTogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9IC8vZW5kIGVsc2UgKGRhdGFmaWxlKVxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIHZhbGlkICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9Oy8vZW5kIHNhdmUoKVxyXG5cclxuICAgICAgICAgICAgLy9uZWVkIHRvIHJldXBsb2FkIGZpbGVJdGVtIHRvIHRoaXMgZXhpc3RpbmcgZmlsZSBPUiBDaGFuZ2Ugb3V0IGV4aXN0aW5nIGZpbGVJdGVtIGZvciBuZXcgb25lXHJcbiAgICAgICAgICAgICRzY29wZS5zYXZlRmlsZVVwbG9hZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gdHJ1ZTsgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB2YXIgZmlsZVBhcnRzID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIEZpbGVFbnRpdHk6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9pZDogJHNjb3BlLmFGaWxlLmZpbGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU6ICRzY29wZS5hRmlsZS5uYW1lLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZXNjcmlwdGlvbjogJHNjb3BlLmFGaWxlLmRlc2NyaXB0aW9uLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwaG90b19kaXJlY3Rpb246ICRzY29wZS5hRmlsZS5waG90b19kaXJlY3Rpb24sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhdGl0dWRlX2RkOiAkc2NvcGUuYUZpbGUubGF0aXR1ZGVfZGQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvbmdpdHVkZV9kZDogJHNjb3BlLmFGaWxlLmxvbmdpdHVkZV9kZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZV9kYXRlOiAkc2NvcGUuYUZpbGUuZmlsZV9kYXRlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBod21faWQ6ICRzY29wZS5hRmlsZS5od21faWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpdGVfaWQ6ICRzY29wZS5hRmlsZS5zaXRlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxldHlwZV9pZDogJHNjb3BlLmFGaWxlLmZpbGV0eXBlX2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzb3VyY2VfaWQ6ICRzY29wZS5hRmlsZS5zb3VyY2VfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhdGg6ICRzY29wZS5hRmlsZS5wYXRoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhX2ZpbGVfaWQ6ICRzY29wZS5hRmlsZS5kYXRhX2ZpbGVfaWQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluc3RydW1lbnRfaWQ6ICRzY29wZS5hRmlsZS5pbnN0cnVtZW50X2lkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwaG90b19kYXRlOiAkc2NvcGUuYUZpbGUucGhvdG9fZGF0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNfbndpczogJHNjb3BlLmFGaWxlLmlzX253aXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9iamVjdGl2ZV9wb2ludF9pZDogJHNjb3BlLmFGaWxlLm9iamVjdGl2ZV9wb2ludF9pZFxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgRmlsZTogJHNjb3BlLmFGaWxlLkZpbGUxICE9PSB1bmRlZmluZWQgPyAkc2NvcGUuYUZpbGUuRmlsZTEgOiAkc2NvcGUuYUZpbGUuRmlsZVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIC8vbmVlZCB0byBwdXQgdGhlIGZpbGVQYXJ0cyBpbnRvIGNvcnJlY3QgZm9ybWF0IGZvciBwb3N0XHJcbiAgICAgICAgICAgICAgICB2YXIgZmQgPSBuZXcgRm9ybURhdGEoKTtcclxuICAgICAgICAgICAgICAgIGZkLmFwcGVuZChcIkZpbGVFbnRpdHlcIiwgSlNPTi5zdHJpbmdpZnkoZmlsZVBhcnRzLkZpbGVFbnRpdHkpKTtcclxuICAgICAgICAgICAgICAgIGZkLmFwcGVuZChcIkZpbGVcIiwgZmlsZVBhcnRzLkZpbGUpO1xyXG4gICAgICAgICAgICAgICAgLy9ub3cgUE9TVCBpdCAoZmlsZXBhcnRzKVxyXG4gICAgICAgICAgICAgICAgRklMRS51cGxvYWRGaWxlKGZkKS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChmcmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgVXBsb2FkZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNyYyA9ICRzY29wZS5zZXJ2ZXJVUkwgKyAnL0ZpbGVzLycgKyAkc2NvcGUuYUZpbGUuZmlsZV9pZCArICcvSXRlbScgKyBGSUxFX1NUQU1QLmdldFN0YW1wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgRklMRV9TVEFNUC5zZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zdGFtcCA9IEZJTEVfU1RBTVAuZ2V0U3RhbXAoKTtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUubmFtZSA9IGZyZXNwb25zZS5uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5wYXRoID0gZnJlc3BvbnNlLnBhdGg7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9pZiB0aGlzIGlzIGEgcGhvdG8gZmlsZSwgZmxhZyBzbyB0aHVtYm5haWwgc2hvd3MgYW5kIG1ha2Ugc3VyZVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuRmlsZTEgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHNjb3BlLmFGaWxlLkZpbGUxLnR5cGUuaW5kZXhPZihcImltYWdlXCIpID4gLTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pc1Bob3RvID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsgJHNjb3BlLmlzUGhvdG8gPSBmYWxzZTsgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuYUZpbGUuRmlsZS50eXBlLmluZGV4T2YoXCJpbWFnZVwiKSA+IC0xKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuaXNQaG90byA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgZWxzZSB7ICRzY29wZS5pc1Bob3RvID0gZmFsc2U7IH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5hRmlsZS5GaWxlMSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5hRmlsZS5GaWxlID0gJHNjb3BlLmFGaWxlLkZpbGUxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYUZpbGUuRmlsZTEgPSB1bmRlZmluZWQ7IC8vcHV0IGl0IGFzIGZpbGUgYW5kIHJlbW92ZSBpdCBmcm9tIDFcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy91cGRhdGUgdGhlIHNpdGVJbWFnZUZpbGVzIGZvciBjYXJvdXNlbCBpZiBwaG90byB3YXMgY2hhbmdlZCB0byBhIGRpZmZlcmVudCB0eXBlIG9yIHZpc2UgdmVyc2FcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc0ZpbGVJc1VwbG9hZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5maWxlSXRlbUV4aXN0cyA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zRmlsZUlzVXBsb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3Igc2F2aW5nIGZpbGU6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9kZWxldGUgdGhpcyBmaWxlXHJcbiAgICAgICAgICAgICRzY29wZS5kZWxldGVGaWxlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIERlbGV0ZU1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdyZW1vdmVtb2RhbC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnQ29uZmlybU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgc2l6ZTogJ3NtJyxcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWVUb1JlbW92ZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5hRmlsZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgd2hhdDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFwiRmlsZVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgRGVsZXRlTW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoZmlsZVRvUmVtb3ZlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgIEZJTEUuZGVsZXRlKHsgaWQ6IGZpbGVUb1JlbW92ZS5maWxlX2lkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkZpbGUgUmVtb3ZlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbmRCYWNrID0gW1wiZGVcIiwgJ2RlbGV0ZWQnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uoc2VuZEJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pOy8vZW5kIERlbGV0ZU1vZGFsLnJlc3VsdC50aGVuXHJcbiAgICAgICAgICAgIH07Ly9lbmQgZGVsZXRlKClcclxuXHJcbiAgICAgICAgICAgIC8vZWRpdCBidXR0b24gY2xpY2tlZC4gbWFrZSBjb3B5IG9mIGh3bSBcclxuICAgICAgICAgICAgJHNjb3BlLndhbm5hRWRpdEZJTEUgPSBmdW5jdGlvbiAoKSB7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnZpZXcuRklMRXZhbCA9ICdlZGl0JztcclxuICAgICAgICAgICAgICAgICRzY29wZS5maWxlQ29weSA9IGFuZ3VsYXIuY29weSgkc2NvcGUuYUZpbGUpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRmQ29weSA9IGFuZ3VsYXIuY29weSgkc2NvcGUuZGF0YWZpbGUpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNvdXJjZUNvcHkgPSBhbmd1bGFyLmNvcHkoJHNjb3BlLmFTb3VyY2UpO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsRklMRUVkaXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudmlldy5GSUxFdmFsID0gJ2RldGFpbCc7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuZmlsZUNvcHkgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5kZkNvcHkgPSB7fTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zb3VyY2VDb3B5ID0ge307XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIC8vYXBwcm92ZSB0aGlzIGRhdGFmaWxlIChpZiBhZG1pbiBvciBtYW5hZ2VyKVxyXG4gICAgICAgICAgICAkc2NvcGUuYXBwcm92ZURGID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy90aGlzIGlzIHZhbGlkLCBzaG93IG1vZGFsIHRvIGNvbmZpcm0gdGhleSB3YW50IHRvIGFwcHJvdmUgaXRcclxuICAgICAgICAgICAgICAgIHZhciB0aGlzREYgPSAkc2NvcGUuZGF0YWZpbGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgYXBwcm92ZU1vZGFsID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiBcIjxkaXYgY2xhc3M9J21vZGFsLWhlYWRlcic+PGgzIGNsYXNzPSdtb2RhbC10aXRsZSc+QXBwcm92ZSBEYXRhIEZpbGU8L2gzPjwvZGl2PlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdtb2RhbC1ib2R5Jz48cD5BcmUgeW91IHJlYWR5IHRvIGFwcHJvdmUgdGhpcyBEYXRhIEZpbGU/PC9wPjwvZGl2PlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdtb2RhbC1mb290ZXInPjxidXR0b24gY2xhc3M9J2J0biBidG4tcHJpbWFyeScgbmctY2xpY2s9J2FwcHJvdmVJdCgpJz5BcHByb3ZlPC9idXR0b24+PGJ1dHRvbiBjbGFzcz0nYnRuIGJ0bi13YXJuaW5nJyBuZy1jbGljaz0nY2FuY2VsKCknPkNhbmNlbDwvYnV0dG9uPjwvZGl2PlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuYXBwcm92ZUl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9kZWxldGUgdGhlIHNpdGUgYW5kIGFsbCB0aGluZ3MgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSh0aGlzREYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYXBwcm92ZU1vZGFsLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChkZikge1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUuYXBwcm92ZURGKHsgaWQ6IGRmLmRhdGFfZmlsZV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChhcHByb3ZhbFJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRmLmFwcHJvdmFsX2lkID0gYXBwcm92YWxSZXNwb25zZS5hcHByb3ZhbF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlID0gZGY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRGF0YSBGaWxlIEFwcHJvdmVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQXBwcm92YWxJbmZvLmFwcHJvdmFsRGF0ZSA9IG5ldyBEYXRlKGFwcHJvdmFsUmVzcG9uc2UuYXBwcm92YWxfZGF0ZSk7IC8vaW5jbHVkZSBub3RlIHRoYXQgaXQncyBkaXNwbGF5ZWQgaW4gdGhlaXIgbG9jYWwgdGltZSBidXQgc3RvcmVkIGluIFVUQ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuQXBwcm92YWxJbmZvLk1lbWJlciA9IGFsbE1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChhbWVtKSB7IHJldHVybiBhbWVtLm1lbWJlcl9pZCA9PSBhcHByb3ZhbFJlc3BvbnNlLm1lbWJlcl9pZDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuZXJyb3IoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIC8vbG9naWMgZm9yIGNhbmNlbFxyXG4gICAgICAgICAgICAgICAgfSk7Ly9lbmQgbW9kYWxcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vYXBwcm92ZSB0aGlzIGh3bSAoaWYgYWRtaW4gb3IgbWFuYWdlcilcclxuICAgICAgICAgICAgJHNjb3BlLnVuQXBwcm92ZURGID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy90aGlzIGlzIHZhbGlkLCBzaG93IG1vZGFsIHRvIGNvbmZpcm0gdGhleSB3YW50IHRvIGFwcHJvdmUgaXRcclxuICAgICAgICAgICAgICAgIHZhciB0aGlzREYgPSAkc2NvcGUuZGF0YWZpbGU7XHJcbiAgICAgICAgICAgICAgICB2YXIgdW5hcHByb3ZlTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwiPGRpdiBjbGFzcz0nbW9kYWwtaGVhZGVyJz48aDMgY2xhc3M9J21vZGFsLXRpdGxlJz5SZW1vdmUgQXBwcm92YWw8L2gzPjwvZGl2PlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdtb2RhbC1ib2R5Jz48cD5BcmUgeW91IHN1cmUgeW91IHdhbiB0byB1bmFwcHJvdmUgdGhpcyBEYXRhIEZpbGU/PC9wPjwvZGl2PlwiICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgXCI8ZGl2IGNsYXNzPSdtb2RhbC1mb290ZXInPjxidXR0b24gY2xhc3M9J2J0biBidG4tcHJpbWFyeScgbmctY2xpY2s9J3VuQXBwcm92ZUl0KCknPlVuYXBwcm92ZTwvYnV0dG9uPjxidXR0b24gY2xhc3M9J2J0biBidG4td2FybmluZycgbmctY2xpY2s9J2NhbmNlbCgpJz5DYW5jZWw8L2J1dHRvbj48L2Rpdj5cIixcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVuQXBwcm92ZUl0ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy9kZWxldGUgdGhlIHNpdGUgYW5kIGFsbCB0aGluZ3MgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSh0aGlzREYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHNpemU6ICdzbSdcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgdW5hcHByb3ZlTW9kYWwucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGRmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgIERBVEFfRklMRS51bkFwcHJvdmVERih7IGlkOiBkZi5kYXRhX2ZpbGVfaWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRmLmFwcHJvdmFsX2lkID0gbnVsbDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmRhdGFmaWxlID0gZGY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRGF0YSBGaWxlIFVuYXBwcm92ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5BcHByb3ZhbEluZm8gPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9sb2dpYyBmb3IgY2FuY2VsXHJcbiAgICAgICAgICAgICAgICB9KTsvL2VuZCBtb2RhbFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH1dKTsvL2VuZCBmaWxlTW9kYWxDdHJsXHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICAvKiBjb250cm9sbGVycy5qcywgJ2xlYWZsZXQtZGlyZWN0aXZlJyd1aS51bmlxdWUnLCduZ1RhZ3NJbnB1dCcsKi9cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU1ROQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQ29udHJvbGxlcnMnKTtcclxuXHJcbiAgICBTVE5Db250cm9sbGVycy5jb250cm9sbGVyKCdmaWxlQ3RybCcsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGNvb2tpZXMnLCAnJGxvY2F0aW9uJywgJyRzdGF0ZScsICckaHR0cCcsICdTRVJWRVJfVVJMJywgJ0ZJTEVfU1RBTVAnLCAnU2l0ZV9GaWxlcycsICdIV01fU2VydmljZScsICdJbnN0cnVtZW50X1NlcnZpY2UnLCAnJHVpYk1vZGFsJywgJyRmaWx0ZXInLCAnJHRpbWVvdXQnLCAndGhpc1NpdGUnLCAndGhpc1NpdGVGaWxlcycsICdhbGxGaWxlVHlwZXMnLCAnYWxsQWdlbmNpZXMnLCAndGhpc1NpdGVTZW5zb3JzJywgJ3RoaXNTaXRlT1BzJywgJ3RoaXNTaXRlSFdNcycsICdGSUxFJywgJ0RBVEFfRklMRScsICdNRU1CRVInLCAnU09VUkNFJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkY29va2llcywgJGxvY2F0aW9uLCAkc3RhdGUsICRodHRwLCBTRVJWRVJfVVJMLEZJTEVfU1RBTVAsIFNpdGVfRmlsZXMsIEhXTV9TZXJ2aWNlLCBJbnN0cnVtZW50X1NlcnZpY2UsICR1aWJNb2RhbCwgJGZpbHRlciwgJHRpbWVvdXQsIHRoaXNTaXRlLCB0aGlzU2l0ZUZpbGVzLCBhbGxGaWxlVHlwZXMsIGFsbEFnZW5jaWVzLCB0aGlzU2l0ZVNlbnNvcnMsIHRoaXNTaXRlT1BzLCB0aGlzU2l0ZUhXTXMsIEZJTEUsIERBVEFfRklMRSwgTUVNQkVSLCBTT1VSQ0UpIHtcclxuICAgICAgICAgICAgaWYgKCRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gdW5kZWZpbmVkIHx8ICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmF1dGggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRsb2NhdGlvbi5wYXRoKCcvbG9naW4nKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5zZXJ2ZXJVUkwgPSBTRVJWRVJfVVJMO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnN0YW1wID0gRklMRV9TVEFNUC5nZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS4kb24oJ2ZpbGVTdGFtcFNldCcsIGZ1bmN0aW9uIChldmVudCwgc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc3RhbXAgPSBzdDtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5zaXRlSFdNcyA9IHRoaXNTaXRlSFdNczsgLy9IV01fU2VydmljZS5nZXRBbGxTaXRlSFdNcygpOyAvL2lmIGNyZWF0ZSBhIG5ldyBvbmUsIHRoZW4gYWRkIGEgZmlsZSB0byBpdC4uIGRvZXNuJ3Qgc2hvdyBpbiBmaWxlTGlzdCBiZWNhdXNlIHRoaXMgZG9lc24ndCBoYXZlIHRoYXQgbmV3IGh3bSB5ZXQuLlxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVTZW5zb3JzID0gdGhpc1NpdGVTZW5zb3JzO1xyXG4gICAgICAgICAgICAgICAgLy9pbmNsdWRlIGlmIEhXTSwgSW5zdHJ1bWVudCwgRGF0YSBGaWxlIG9yIE9QIEZpbGUgZm9yIGVhY2ggICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHNmID0gMDsgc2YgPCB0aGlzU2l0ZUZpbGVzLmxlbmd0aDsgc2YrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB3aGF0S2luZGFGaWxlID0gJyc7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTaXRlRmlsZXNbc2ZdLmh3bV9pZCA+IDAgJiYgdGhpc1NpdGVGaWxlc1tzZl0uaHdtX2lkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoYXRLaW5kYUZpbGUgPSBcIkhXTSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzU2l0ZUZpbGVzW3NmXS5kYXRhX2ZpbGVfaWQgPiAwICYmIHRoaXNTaXRlRmlsZXNbc2ZdLmRhdGFfZmlsZV9pZCAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aGF0S2luZGFGaWxlID0gXCJEYXRhRmlsZSBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aGlzU2l0ZUZpbGVzW3NmXS5pbnN0cnVtZW50X2lkID4gMCAmJiB0aGlzU2l0ZUZpbGVzW3NmXS5pbnN0cnVtZW50X2lkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoYXRLaW5kYUZpbGUgPSBcIlNlbnNvciBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzSW5zID0gdGhpc1NpdGVTZW5zb3JzLmZpbHRlcihmdW5jdGlvbiAocykgeyByZXR1cm4gcy5pbnN0cnVtZW50X2lkID09IHRoaXNTaXRlRmlsZXNbc2ZdLmluc3RydW1lbnRfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzU2l0ZUZpbGVzW3NmXS50eXBlTmFtZSA9IHRoaXNJbnMuc2VyaWFsX251bWJlcjtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTaXRlRmlsZXNbc2ZdLm9iamVjdGl2ZV9wb2ludF9pZCA+IDAgJiYgdGhpc1NpdGVGaWxlc1tzZl0ub2JqZWN0aXZlX3BvaW50X2lkICE9PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoYXRLaW5kYUZpbGUgPSBcIk9iamVjdGl2ZSBQb2ludCBGaWxlXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNTaXRlRmlsZXNbc2ZdLnR5cGVOYW1lID0gdGhpc1NpdGVPUHMuZmlsdGVyKGZ1bmN0aW9uIChvcCkgeyByZXR1cm4gb3Aub2JqZWN0aXZlX3BvaW50X2lkID09IHRoaXNTaXRlRmlsZXNbc2ZdLm9iamVjdGl2ZV9wb2ludF9pZDsgfSlbMF0ubmFtZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHdoYXRLaW5kYUZpbGUgPT09ICcnKSB3aGF0S2luZGFGaWxlID0gXCJTaXRlIEZpbGVcIjtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzU2l0ZUZpbGVzW3NmXS5maWxlQmVsb25nc1RvID0gd2hhdEtpbmRhRmlsZTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKHRoaXNTaXRlRmlsZXMpOy8vLCAkc2NvcGUuc2l0ZUhXTXMsICRzY29wZS5zaXRlU2Vuc29ycyk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZUZpbGVzID0gU2l0ZV9GaWxlcy5nZXRBbGxTaXRlRmlsZXMoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZUltYWdlRmlsZXMgPSBbXTsgLy9ob2xkZXIgb2YgY2Fyb3VzZWwgaW1hZ2VzXHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzID0gMDsgcyA8ICRzY29wZS5TaXRlRmlsZXMubGVuZ3RoOyBzKyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXh0SSA9ICRzY29wZS5TaXRlRmlsZXNbc10ubmFtZS5pbmRleE9mKFwiLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXh0U3RyaW5nID0gJHNjb3BlLlNpdGVGaWxlc1tzXS5uYW1lLnN1YnN0cmluZyhleHRJICsgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFsnanBnJywnSlBHJywnanBlZycsJ0pQRUcnLCdwbmcnLCdQTkcnLCdnaWYnLCdHSUYnXS5pbmRleE9mKGV4dFN0cmluZykgPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVJbWFnZUZpbGVzLnB1c2goJHNjb3BlLlNpdGVGaWxlc1tzXSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAvL2lmIGZpbGVzIGFyZSBhZGRlZC9lZGl0ZWQsIGRlbGV0ZWQgZnJvbSBvdGhlciBwYXJ0cyAob2JqZWN0aXZlIFBvaW50cywgc2Vuc29ycywgaHdtcyksIG1ha2Ugc3VyZSBpZiBldmVudCBpcyBjaG9zZW4gdG8gdXBkYXRlIHNpdGVGaWxlcyBhY2NvcmRpbmdseVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLiRvbignc2l0ZUZpbGVzVXBkYXRlZCcsIGZ1bmN0aW9uIChldmVudCwgc2l0ZWZpbGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVIV01zID0gSFdNX1NlcnZpY2UuZ2V0QWxsU2l0ZUhXTXMoKTsgJHNjb3BlLnNpdGVTZW5zb3JzID0gSW5zdHJ1bWVudF9TZXJ2aWNlLmdldEFsbFNpdGVTZW5zb3JzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9ub3cgZ28gYWJvdXQgdXBkYXRpbmcgdGhlIEZpbGVMaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVGaWxlcyA9IHNpdGVmaWxlcy5maWx0ZXIoZnVuY3Rpb24gKGgpIHsgcmV0dXJuIGguZmlsZUJlbG9uZ3NUbyA9PSAnU2l0ZSBGaWxlJyB8fCBoLmZpbGVCZWxvbmdzVG8gPT0gJ09iamVjdGl2ZSBQb2ludCBGaWxlJzsgfSk7ICAvL2tlZXAgYWxsIHNpdGUgYW5kIG9wIGZpbGVzXHJcbiAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5TaXRlRmlsZXMsIGZ1bmN0aW9uIChzZil7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZi5maWxlQmVsb25nc1RvID09ICdPYmplY3RpdmUgUG9pbnQgRmlsZScpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZi50eXBlTmFtZSA9IHRoaXNTaXRlT1BzLmZpbHRlcihmdW5jdGlvbiAob3ApIHsgcmV0dXJuIG9wLm9iamVjdGl2ZV9wb2ludF9pZCA9PSBzZi5vYmplY3RpdmVfcG9pbnRfaWQ7IH0pWzBdLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaHdtRmlsZXMgPSBzaXRlZmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChzZmlsZXMpIHsgcmV0dXJuIHNmaWxlcy5maWxlQmVsb25nc1RvID09ICdIV00gRmlsZSc7IH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBzZW5zRmlsZXMgPSBzaXRlZmlsZXMuZmlsdGVyKGZ1bmN0aW9uIChzZmkpIHsgcmV0dXJuIHNmaS5pbnN0cnVtZW50X2lkID4gMCAmJiBzZmkuaW5zdHJ1bWVudF9pZCAhPT0gbnVsbDsgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9vbmx5IHNob3cgZmlsZXMgZm9yIHRoaXMgZXZlbnQgKGdvIHRocm91Z2ggaHdtIGZpbGVzIGFuZCBtYXRjaCBldmVudGlkXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGhmID0gMDsgaGYgPCBod21GaWxlcy5sZW5ndGg7IGhmKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGh3bSA9IDA7IGh3bSA8ICRzY29wZS5zaXRlSFdNcy5sZW5ndGg7IGh3bSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGh3bUZpbGVzW2hmXS5od21faWQgPT0gJHNjb3BlLnNpdGVIV01zW2h3bV0uaHdtX2lkICYmICRzY29wZS5zaXRlSFdNc1tod21dLmV2ZW50X2lkID09ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVGaWxlcy5wdXNoKGh3bUZpbGVzW2hmXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBoZiA9IDA7IGhmIDwgaHdtRmlsZXMubGVuZ3RoOyBoZisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBod20gPSAwOyBod20gPCAkc2NvcGUuc2l0ZUhXTXMubGVuZ3RoOyBod20rKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChod21GaWxlc1toZl0uaHdtX2lkID09ICRzY29wZS5zaXRlSFdNc1tod21dLmh3bV9pZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVGaWxlcy5wdXNoKGh3bUZpbGVzW2hmXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgLy9vbmx5IHNob3cgZmlsZXMgZm9yIHRoaXMgZXZlbnQgKGdvIHRocm91Z2ggc2Vuc29yIGZpbGVzIGFuZCBtYXRjaCBldmVudGlkXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHNmID0gMDsgc2YgPCBzZW5zRmlsZXMubGVuZ3RoOyBzZisrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBpbnN0ID0gMDsgaW5zdCA8ICRzY29wZS5zaXRlU2Vuc29ycy5sZW5ndGg7IGluc3QrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzZW5zRmlsZXNbc2ZdLmluc3RydW1lbnRfaWQgPT0gJHNjb3BlLnNpdGVTZW5zb3JzW2luc3RdLmluc3RydW1lbnRfaWQgJiYgJHNjb3BlLnNpdGVTZW5zb3JzW2luc3RdLmV2ZW50X2lkID09ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZW5zRmlsZXNbc2ZdLnR5cGVOYW1lID0gJHNjb3BlLnNpdGVTZW5zb3JzW2luc3RdLnNlcmlhbF9udW1iZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlRmlsZXMucHVzaChzZW5zRmlsZXNbc2ZdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBzZiA9IDA7IHNmIDwgc2Vuc0ZpbGVzLmxlbmd0aDsgc2YrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaW5zdCA9IDA7IGluc3QgPCAkc2NvcGUuc2l0ZVNlbnNvcnMubGVuZ3RoOyBpbnN0KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2Vuc0ZpbGVzW3NmXS5pbnN0cnVtZW50X2lkID09ICRzY29wZS5zaXRlU2Vuc29yc1tpbnN0XS5pbnN0cnVtZW50X2lkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbnNGaWxlc1tzZl0udHlwZU5hbWUgPSAkc2NvcGUuc2l0ZVNlbnNvcnNbaW5zdF0uc2VyaWFsX251bWJlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVGaWxlcy5wdXNoKHNlbnNGaWxlc1tzZl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAvL2lmIGltYWdlLCBwdXQgaW50byBjYXJvdXNlbCBhcnJheVxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlSW1hZ2VGaWxlcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgIGFuZ3VsYXIuZm9yRWFjaCgkc2NvcGUuU2l0ZUZpbGVzLCBmdW5jdGlvbiAoc2YpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4dEkgPSBzZi5uYW1lLmluZGV4T2YoXCIuXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXh0U3RyaW5nID0gc2YubmFtZS5zdWJzdHJpbmcoZXh0SSArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoWydqcGcnLCAnSlBHJywgJ2pwZWcnLCAnSlBFRycsICdwbmcnLCAnUE5HJywgJ2dpZicsICdHSUYnXS5pbmRleE9mKGV4dFN0cmluZykgPiAtMSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlSW1hZ2VGaWxlcy5wdXNoKHNmKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIH0sIHRydWUpO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAvLyB3YXRjaCBmb3IgdGhlIHNlc3Npb24gZXZlbnQgdG8gY2hhbmdlIGFuZCB1cGRhdGUgU0lURSBGSUxFUyBETyBOT1QgSEFWRSBBTiBFVkVOVCAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJyk7IH0sIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zZXNzaW9uRXZlbnROYW1lID0gbmV3VmFsdWUgIT09IHVuZGVmaW5lZCA/IG5ld1ZhbHVlIDogXCJBbGwgRXZlbnRzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlc3Npb25FdmVudEV4aXN0cyA9ICRzY29wZS5zZXNzaW9uRXZlbnROYW1lICE9IFwiQWxsIEV2ZW50c1wiID8gdHJ1ZSA6IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChuZXdWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlSFdNcyA9IEhXTV9TZXJ2aWNlLmdldEFsbFNpdGVIV01zKCk7ICRzY29wZS5zaXRlU2Vuc29ycyA9IEluc3RydW1lbnRfU2VydmljZS5nZXRBbGxTaXRlU2Vuc29ycygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2tlZXAgYWxsIHNpdGUgJiBPUCBGaWxlcywgZmlsdGVyIEhXTSwgSW5zdHJ1bWVudCAoREYgZmlsZXMgdXNlIEluc3RydW1lbnQgZXZlbnQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlRmlsZXMgPSBTaXRlX0ZpbGVzLmdldEFsbFNpdGVGaWxlcygpLmZpbHRlcihmdW5jdGlvbiAoaCkgeyByZXR1cm4gaC5maWxlQmVsb25nc1RvID09ICdTaXRlIEZpbGUnIHx8IGguZmlsZUJlbG9uZ3NUbyA9PSAnT2JqZWN0aXZlIFBvaW50IEZpbGUnOyB9KTsgIC8va2VlcCBhbGwgc2l0ZSBhbmQgb3AgZmlsZXNcclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKCRzY29wZS5TaXRlRmlsZXMsIGZ1bmN0aW9uIChzZikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNmLmZpbGVCZWxvbmdzVG8gPT0gJ09iamVjdGl2ZSBQb2ludCBGaWxlJylcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZi50eXBlTmFtZSA9IHRoaXNTaXRlT1BzLmZpbHRlcihmdW5jdGlvbiAob3ApIHsgcmV0dXJuIG9wLm9iamVjdGl2ZV9wb2ludF9pZCA9PSBzZi5vYmplY3RpdmVfcG9pbnRfaWQ7IH0pWzBdLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL2lmIGltYWdlLCBwdXQgaW50byBjYXJvdXNlbCBhcnJheVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVJbWFnZUZpbGVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXh0SSA9IHNmLm5hbWUuaW5kZXhPZihcIi5cIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXh0U3RyaW5nID0gc2YubmFtZS5zdWJzdHJpbmcoZXh0SSArIDEpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFsnanBnJywgJ0pQRycsICdqcGVnJywgJ0pQRUcnLCAncG5nJywgJ1BORycsICdnaWYnLCAnR0lGJ10uaW5kZXhPZihleHRTdHJpbmcpID4gLTEpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNpdGVJbWFnZUZpbGVzLnB1c2goc2YpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGh3bUZpbGVzID0gU2l0ZV9GaWxlcy5nZXRBbGxTaXRlRmlsZXMoKS5maWx0ZXIoZnVuY3Rpb24gKHNmaWxlcykgeyByZXR1cm4gc2ZpbGVzLmZpbGVCZWxvbmdzVG8gPT0gJ0hXTSBGaWxlJzsgfSk7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2Vuc0ZpbGVzID0gU2l0ZV9GaWxlcy5nZXRBbGxTaXRlRmlsZXMoKS5maWx0ZXIoZnVuY3Rpb24gKHNmaSkgeyByZXR1cm4gc2ZpLmluc3RydW1lbnRfaWQgPiAwICYmIHNmaS5pbnN0cnVtZW50X2lkICE9PSBudWxsOyB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9vbmx5IHNob3cgZmlsZXMgZm9yIHRoaXMgZXZlbnQgKGdvIHRocm91Z2ggaHdtIGZpbGVzIGFuZCBtYXRjaCBldmVudGlkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGhmID0gMDsgaGYgPCBod21GaWxlcy5sZW5ndGg7IGhmKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGh3bSA9IDA7IGh3bSA8ICRzY29wZS5zaXRlSFdNcy5sZW5ndGg7IGh3bSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGh3bUZpbGVzW2hmXS5od21faWQgPT0gJHNjb3BlLnNpdGVIV01zW2h3bV0uaHdtX2lkICYmICRzY29wZS5zaXRlSFdNc1tod21dLmV2ZW50X2lkID09ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSkgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlRmlsZXMucHVzaChod21GaWxlc1toZl0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vb25seSBzaG93IGZpbGVzIGZvciB0aGlzIGV2ZW50IChnbyB0aHJvdWdoIHNlbnNvciBmaWxlcyBhbmQgbWF0Y2ggZXZlbnRpZFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBzZiA9IDA7IHNmIDwgc2Vuc0ZpbGVzLmxlbmd0aDsgc2YrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaW5zdCA9IDA7IGluc3QgPCAkc2NvcGUuc2l0ZVNlbnNvcnMubGVuZ3RoOyBpbnN0KyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2Vuc0ZpbGVzW3NmXS5pbnN0cnVtZW50X2lkID09ICRzY29wZS5zaXRlU2Vuc29yc1tpbnN0XS5pbnN0cnVtZW50X2lkICYmICRzY29wZS5zaXRlU2Vuc29yc1tpbnN0XS5ldmVudF9pZCA9PSAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudElEJykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Vuc0ZpbGVzW3NmXS50eXBlTmFtZSA9ICRzY29wZS5zaXRlU2Vuc29yc1tpbnN0XS5zZXJpYWxfbnVtYmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuU2l0ZUZpbGVzLnB1c2goc2Vuc0ZpbGVzW3NmXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLlNpdGVGaWxlcyA9IFNpdGVfRmlsZXMuZ2V0QWxsU2l0ZUZpbGVzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSwgdHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy9zaG93IGEgbW9kYWwgd2l0aCB0aGUgbGFyZ2VyIGltYWdlIGFzIGEgcHJldmlld1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNob3dJbWFnZU1vZGFsID0gZnVuY3Rpb24gKGltYWdlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGltYWdlTW9kYWwgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+SW1hZ2UgRmlsZSBQcmV2aWV3PC9oMz48L2Rpdj4nICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICc8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPjxpbWcgbmctc3JjPVwie3tzZXRTUkN9fVwiIC8+PC9kaXY+JyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPjxidXR0b24gY2xhc3M9XCJidG4gYnRuLXByaW1hcnlcIiBuZy1lbnRlcj1cIm9rKClcIiBuZy1jbGljaz1cIm9rKClcIj5PSzwvYnV0dG9uPjwvZGl2PicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5pbWFnZUlkID0gaW1hZ2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2V0U1JDID0gU0VSVkVSX1VSTCArICcvRmlsZXMvJyArICRzY29wZS5pbWFnZUlkICsgJy9JdGVtJztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdtZCdcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAgICAgLy9jcmVhdGUvZWRpdCBhIGZpbGVcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93RmlsZU1vZGFsID0gZnVuY3Rpb24gKEZpbGVDbGlja2VkKSB7ICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB2YXIgU2luZGV4Q2xpY2tlZCA9ICRzY29wZS5TaXRlRmlsZXMuaW5kZXhPZihGaWxlQ2xpY2tlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9wb3B1bGF0ZSBhbGwgZmlsZXR5cGVzIHRoYXQgY3JlYXRlL2VkaXQgZmlsZSBuZWVkcyBkZXBlbmRpbmcgb24gd2hhdCB0aGUgZmlsZSBpcyBhdHRhY2hlZCB0b1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5zaXRlRmlsZVR5cGVzID0gYWxsRmlsZVR5cGVzLmZpbHRlcihmdW5jdGlvbiAoZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ0LmZpbGV0eXBlID09PSAnUGhvdG8nIHx8IGZ0LmZpbGV0eXBlID09PSAnSGlzdG9yaWMgQ2l0YXRpb24nIHx8IGZ0LmZpbGV0eXBlID09PSAnRmllbGQgU2hlZXRzJyB8fFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZnQuZmlsZXR5cGUgPT09ICdMZXZlbCBOb3RlcycgfHwgZnQuZmlsZXR5cGUgPT09ICdTaXRlIFNrZXRjaCcgfHwgZnQuZmlsZXR5cGUgPT09ICdPdGhlcicgfHwgZnQuZmlsZXR5cGUgPT09ICdMaW5rJyB8fCBmdC5maWxldHlwZSA9PT0gJ1NrZXRjaCcgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZ0LmZpbGV0eXBlID09PSAnTGFuZG93bmVyIFBlcm1pc3Npb24gRm9ybSc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmh3bUZpbGVUeXBlcyA9IGFsbEZpbGVUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKGhmdCl7IFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGZ0LmZpbGV0eXBlID09PSAnUGhvdG8nIHx8IGhmdC5maWxldHlwZSA9PT0gJ0hpc3RvcmljIENpdGF0aW9uJyB8fCBoZnQuZmlsZXR5cGUgPT09ICdGaWVsZCBTaGVldHMnIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoZnQuZmlsZXR5cGUgPT09ICdMZXZlbCBOb3RlcycgfHwgaGZ0LmZpbGV0eXBlID09PSAnT3RoZXInIHx8IGhmdC5maWxldHlwZSA9PT0gJ0xpbmsnIHx8IGhmdC5maWxldHlwZSA9PT0gJ1NrZXRjaCc7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNlbnNvckZpbGVUeXBlcyA9IGFsbEZpbGVUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKHNmdCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZnQuZmlsZXR5cGUgPT09ICdQaG90bycgfHwgc2Z0LmZpbGV0eXBlID09PSAnRGF0YScgfHwgc2Z0LmZpbGV0eXBlID09PSAnSGlzdG9yaWMgQ2l0YXRpb24nIHx8IHNmdC5maWxldHlwZSA9PT0gJ0ZpZWxkIFNoZWV0cycgfHxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgc2Z0LmZpbGV0eXBlID09PSAnTGV2ZWwgTm90ZXMnIHx8IHNmdC5maWxldHlwZSA9PT0gJ090aGVyJyB8fCBzZnQuZmlsZXR5cGUgPT09ICdMaW5rJyB8fCBzZnQuZmlsZXR5cGUgPT09ICdTa2V0Y2gnO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5vcEZpbGVUeXBlcyA9IGFsbEZpbGVUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKG9mdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb2Z0LmZpbGV0eXBlID09PSAnUGhvdG8nIHx8IG9mdC5maWxldHlwZSA9PT0gJ0ZpZWxkIFNoZWV0cycgfHwgb2Z0LmZpbGV0eXBlID09PSAnTGV2ZWwgTm90ZXMnIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvZnQuZmlsZXR5cGUgPT09ICdPdGhlcicgfHwgb2Z0LmZpbGV0eXBlID09PSAnTkdTIERhdGFzaGVldCcgfHwgb2Z0LmZpbGV0eXBlID09PSAnU2tldGNoJztcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy9tb2RhbCBhbGxGaWxlVHlwZXMsIHRoaXNGaWxlLCBhbGxNZW1iZXJzLCBhZ2VuY3lMaXN0LCBmaWxlU2l0ZSxcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IEZpbGVDbGlja2VkICE9PSAwID8gJ0ZJTEVtb2RhbC5odG1sJyA6ICdGaWxlQ3JlYXRlTW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdzaXRlRmlsZU1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdsZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ3JlcC1kaWFsb2cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlRXhpc3RzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEZpbGVDbGlja2VkICE9PSAwKSBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZJTEUuZ2V0RmlsZUl0ZW0oeyBpZDogRmlsZUNsaWNrZWQuZmlsZV9pZCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmaWxlVHlwZUxpc3Q6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoRmlsZUNsaWNrZWQgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChGaWxlQ2xpY2tlZC5maWxlQmVsb25nc1RvKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdIV00gRmlsZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzY29wZS5od21GaWxlVHlwZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlICdEYXRhRmlsZSBGaWxlJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLnNlbnNvckZpbGVUeXBlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ1NlbnNvciBGaWxlJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLnNlbnNvckZpbGVUeXBlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgJ09iamVjdGl2ZSBQb2ludCBGaWxlJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLm9wRmlsZVR5cGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSAnU2l0ZSBGaWxlJzpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLnNpdGVGaWxlVHlwZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJHNjb3BlLnNpdGVGaWxlVHlwZXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFnZW5jeUxpc3Q6IGZ1bmN0aW9uICgpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhbGxBZ2VuY2llcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzRmlsZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChGaWxlQ2xpY2tlZCAhPT0gMClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEZpbGVDbGlja2VkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVTaXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXNTaXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsbE1lbWJlcnM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBNRU1CRVIuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVNvdXJjZTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChGaWxlQ2xpY2tlZCAhPT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoRmlsZUNsaWNrZWQuc291cmNlX2lkICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU09VUkNFLnF1ZXJ5KHtpZDpGaWxlQ2xpY2tlZC5zb3VyY2VfaWR9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZGF0YUZpbGU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoRmlsZUNsaWNrZWQgIT09IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEZpbGVDbGlja2VkLmRhdGFfZmlsZV9pZCAhPT0gdW5kZWZpbmVkKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIERBVEFfRklMRS5xdWVyeSh7IGlkOiBGaWxlQ2xpY2tlZC5kYXRhX2ZpbGVfaWQgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoY3JlYXRlZEZpbGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9pcyB0aGVyZSBhIG5ldyBmaWxlIG9yIGp1c3QgY2xvc2VkIG1vZGFsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcmVhdGVkRmlsZVsxXSA9PSAnY3JlYXRlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlRmlsZXMucHVzaChjcmVhdGVkRmlsZVswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTaXRlX0ZpbGVzLnNldEFsbFNpdGVGaWxlcygkc2NvcGUuU2l0ZUZpbGVzKTsvLywgJHNjb3BlLnNpdGVIV01zLCAkc2NvcGUuc2l0ZVNlbnNvcnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcmVhdGVkRmlsZVsxXSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3RoaXMgaXMgZnJvbSBlZGl0IC0tIHJlZnJlc2ggcGFnZT9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlRmlsZXNbU2luZGV4Q2xpY2tlZF0gPSBjcmVhdGVkRmlsZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNpdGVfRmlsZXMuc2V0QWxsU2l0ZUZpbGVzKCRzY29wZS5TaXRlRmlsZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnN0YW1wID0gRklMRV9TVEFNUC5nZXRTdGFtcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcmVhdGVkRmlsZVsxXSA9PSAnZGVsZXRlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlRmlsZXMuc3BsaWNlKFNpbmRleENsaWNrZWQsIDEpOyAvL3JlbW92ZSBmcm9tIGZpbGUgTGlzdFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgU2l0ZV9GaWxlcy5zZXRBbGxTaXRlRmlsZXMoJHNjb3BlLlNpdGVGaWxlcyk7Ly8sICRzY29wZS5zaXRlSFdNcywgJHNjb3BlLnNpdGVTZW5zb3JzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1dKTtcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgLyogY29udHJvbGxlcnMuanMsICdsZWFmbGV0LWRpcmVjdGl2ZScndWkudW5pcXVlJywnbmdUYWdzSW5wdXQnLCovXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIE1vZGFsQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnTW9kYWxDb250cm9sbGVycycpO1xyXG4gICAgTW9kYWxDb250cm9sbGVycy5jb250cm9sbGVyKCdldmVudFNlc3Npb25Nb2RhbEN0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRjb29raWVzJywgJyR1aWJNb2RhbEluc3RhbmNlJywgJ2FsbEV2ZW50cycsICdhbGxFdmVudFR5cGVzJywgJ2FsbFN0YXRlcycsICdFVkVOVCcsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICR1aWJNb2RhbEluc3RhbmNlLCBhbGxFdmVudHMsIGFsbEV2ZW50VHlwZXMsIGFsbFN0YXRlcywgRVZFTlQpIHtcclxuICAgICAgICAgICAgJHNjb3BlLkV2ZW50TGlzdCA9IGFsbEV2ZW50cztcclxuICAgICAgICAgICAgJHNjb3BlLkV2ZW50VHlwZUxpc3QgPSBhbGxFdmVudFR5cGVzO1xyXG4gICAgICAgICAgICAkc2NvcGUuU3RhdGVMaXN0ID0gYWxsU3RhdGVzO1xyXG4gICAgICAgICAgICB2YXIgY2hvc2VuRXYgPSAkY29va2llcy5nZXQoJ1Nlc3Npb25FdmVudElEJyk7IC8vc2VlIGlmIHdlIG5lZWQgdG8gc2VsZWN0IHRoZSBzZXNzaW9uIGV2ZW50XHJcbiAgICAgICAgICAgICRzY29wZS5ldmVudCA9IHsgRXZlbnRDaG9zZW46IGNob3NlbkV2ICE9PSB1bmRlZmluZWQgPyBOdW1iZXIoY2hvc2VuRXYpIDogXCJcIiB9O1xyXG5cclxuICAgICAgICAgICAgLy9maWx0ZXJzIGNob3Nlbiwgb25seSBzaG93IHRoZXNlIGV2ZW50c1xyXG4gICAgICAgICAgICAkc2NvcGUuZmlsdGVyRXZlbnRzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy8/RGF0ZTogbnVsbCwgVHlwZTogMCwgU3RhdGU6IG51bGxcclxuICAgICAgICAgICAgICAgIHZhciBkID0gJHNjb3BlLmV2ZW50LkRBVEUgIT09IG51bGwgJiYgJHNjb3BlLmV2ZW50LkRBVEUgIT09IHVuZGVmaW5lZCA/ICRzY29wZS5ldmVudC5EQVRFIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIHZhciB0ID0gJHNjb3BlLmV2ZW50LnR5cGUgIT09IG51bGwgJiYgJHNjb3BlLmV2ZW50LnR5cGUgIT09IHVuZGVmaW5lZCA/ICRzY29wZS5ldmVudC50eXBlIDogMDtcclxuICAgICAgICAgICAgICAgIHZhciBzID0gJHNjb3BlLmV2ZW50LnN0YXRlICE9PSBudWxsICYmICRzY29wZS5ldmVudC5zdGF0ZSAhPT0gdW5kZWZpbmVkID8gJHNjb3BlLmV2ZW50LnN0YXRlIDogbnVsbDtcclxuICAgICAgICAgICAgICAgIEVWRU5ULmdldEZpbHRlcmVkRXZlbnRzKHsgRGF0ZTogZCwgVHlwZTogdCwgU3RhdGU6IHMgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuRXZlbnRMaXN0ID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy9jbGVhciB0aGUgZmlsdGVyc1xyXG4gICAgICAgICAgICAkc2NvcGUuY2xlYXJGaWx0ZXJzID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmV2ZW50ID0geyBFdmVudENob3NlbjogY2hvc2VuRXYgIT09IHVuZGVmaW5lZCA/IE51bWJlcihjaG9zZW5FdikgOiBcIlwiIH07XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuRXZlbnRMaXN0ID0gYWxsRXZlbnRzO1xyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAvL2V2ZW50IGhhcyBiZWVuIGNob3Nlbi4gU2V0IGl0IGFzIHNlc3Npb24gZXZlbnRcclxuICAgICAgICAgICAgJHNjb3BlLnNldEV2ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmV2SUQgPSAkc2NvcGUuZXZlbnQuRXZlbnRDaG9zZW47XHJcbiAgICAgICAgICAgICAgICB2YXIgZXZlbnROYW1lID0gYWxsRXZlbnRzLmZpbHRlcihmdW5jdGlvbiAoeCkgeyByZXR1cm4geC5ldmVudF9pZCA9PSAkc2NvcGUuZXZJRDsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAkY29va2llcy5wdXQoJ1Nlc3Npb25FdmVudElEJywgJHNjb3BlLmV2SUQpO1xyXG4gICAgICAgICAgICAgICAgJGNvb2tpZXMucHV0KCdTZXNzaW9uRXZlbnROYW1lJywgZXZlbnROYW1lLmV2ZW50X25hbWUpOyAgICAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuc2Vzc2lvbkV2ZW50ID0gXCJTZXNzaW9uIEV2ZW50OiBcIiArIGV2ZW50TmFtZS5ldmVudF9uYW1lICsgXCIuXCI7XHJcbiAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgIC8vdGhleSB3YW50IHRvIGNsZWFyIHRoZSBzZXNzaW9uIGV2ZW50XHJcbiAgICAgICAgICAgICRzY29wZS5jbGVhckV2ZW50ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmV2ZW50ID0ge307XHJcbiAgICAgICAgICAgICAgICAkY29va2llcy5yZW1vdmUoJ1Nlc3Npb25FdmVudElEJyk7XHJcbiAgICAgICAgICAgICAgICAkY29va2llcy5yZW1vdmUoJ1Nlc3Npb25FdmVudE5hbWUnKTtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuc2Vzc2lvbkV2ZW50ID0gXCJcIjtcclxuICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgLy9EYXRlcGlja2VyXHJcbiAgICAgICAgICAgICRzY29wZS5kYXRlcGlja3JzID0ge307XHJcbiAgICAgICAgICAgICRzY29wZS5vcGVuID0gZnVuY3Rpb24gKCRldmVudCwgd2hpY2gpIHtcclxuICAgICAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgJGV2ZW50LnN0b3BQcm9wYWdhdGlvbigpO1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5kYXRlcGlja3JzW3doaWNoXSA9IHRydWU7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2NhbmNlbFxyXG4gICAgICAgICAgICAkc2NvcGUuY2xvc2UgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XSk7XHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgIC8qIGNvbnRyb2xsZXJzLmpzLCAnbGVhZmxldC1kaXJlY3RpdmUnJ3VpLnVuaXF1ZScsJ25nVGFnc0lucHV0JywqL1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBTVE5Db250cm9sbGVycyA9IGFuZ3VsYXIubW9kdWxlKCdTVE5Db250cm9sbGVycycpO1xyXG5cclxuICAgIFNUTkNvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ2V2ZW50U2Vzc2lvbkN0cmwnLCBbJyRzY29wZScsICckcm9vdFNjb3BlJywgJyRjb29raWVzJywgJyR1aWJNb2RhbCcsICckbG9jYXRpb24nLCAnJHN0YXRlJywgJ0VWRU5UJywgJ0VWRU5UX1RZUEUnLCAnU1RBVEUnLFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc2NvcGUsICRyb290U2NvcGUsICRjb29raWVzLCAkdWliTW9kYWwsICRsb2NhdGlvbiwgJHN0YXRlLCBFVkVOVCwgRVZFTlRfVFlQRSwgU1RBVEUpIHtcclxuICAgICAgICAgICAgJHNjb3BlLm9wZW5FdmVudE1vZGFsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgLy9tb2RhbFxyXG4gICAgICAgICAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdDaG9vc2VFdmVudC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnZXZlbnRTZXNzaW9uTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnbWQnLFxyXG4gICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICBrZXlib2FyZDogZmFsc2UsXHJcbiAgICAgICAgICAgICAgICAgICAgd2luZG93Q2xhc3M6ICdyZXAtZGlhbG9nJyxcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEV2ZW50czogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIEVWRU5ULmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxFdmVudFR5cGVzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gRVZFTlRfVFlQRS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsU3RhdGVzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gU1RBVEUuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL25vdGhpbmcgdG8gZG8gaGVyZVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgIH1dKTtcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBTZXR0aW5nc0NvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NldHRpbmdzQ29udHJvbGxlcnMnKTtcclxuICAgIFxyXG4gICAgU2V0dGluZ3NDb250cm9sbGVycy5jb250cm9sbGVyKCdldmVudE1vZGFsQ3RybCcsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGNvb2tpZXMnLCAnJGh0dHAnLCAnJHVpYk1vZGFsJywgJyR1aWJNb2RhbEluc3RhbmNlJywgJyRmaWx0ZXInLCd0aGlzRXZlbnQnLCAnZXZlbnRUeXBlTGlzdCcsICdldmVudFN0YXR1c0xpc3QnLCAnYWRtaW5MaXN0JywgJ0VWRU5UJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkcm9vdFNjb3BlLCAkY29va2llcywgJGh0dHAsICR1aWJNb2RhbCwgJHVpYk1vZGFsSW5zdGFuY2UsICRmaWx0ZXIsIHRoaXNFdmVudCwgZXZlbnRUeXBlTGlzdCwgZXZlbnRTdGF0dXNMaXN0LCBhZG1pbkxpc3QsIEVWRU5UKSB7XHJcbiAgICAgICAgICAgICRzY29wZS5hbkV2ZW50ID0ge307XHJcbiAgICAgICAgICAgICRzY29wZS5ldmVudFR5cGVzID0gZXZlbnRUeXBlTGlzdDtcclxuICAgICAgICAgICAgJHNjb3BlLmV2ZW50U3RhdHVzZXMgPSBldmVudFN0YXR1c0xpc3Q7XHJcbiAgICAgICAgICAgICRzY29wZS5hZG1pbk1lbWJlcnMgPSBhZG1pbkxpc3Q7XHJcbiAgICAgICAgICAgICRzY29wZS5sb2dnZWRJblJvbGUgPSAkY29va2llcy5nZXQoJ3VzZXJzUm9sZScpO1xyXG5cclxuICAgICAgICAgICAgLy8jcmVnaW9uIERhdGVwaWNrZXJcclxuICAgICAgICAgICAgJHNjb3BlLmRhdGVwaWNrcnMgPSB7fTtcclxuICAgICAgICAgICAgJHNjb3BlLm9wZW4gPSBmdW5jdGlvbiAoJGV2ZW50LCB3aGljaCkge1xyXG4gICAgICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAkZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmRhdGVwaWNrcnNbd2hpY2hdID0gdHJ1ZTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgLy8kc2NvcGUuZm9ybWF0ID0gJ01NTSBkZCwgeXl5eSc7XHJcbiAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBEYXRlcGlja2VyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vY2FsbGVkIGEgZmV3IHRpbWVzIHRvIGZvcm1hdCBqdXN0IHRoZSBkYXRlIChubyB0aW1lKVxyXG4gICAgICAgICAgICB2YXIgbWFrZUFkYXRlID0gZnVuY3Rpb24gKGQpIHtcclxuICAgICAgICAgICAgICAgIHZhciBhRGF0ZSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZCAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9wcm92aWRlZCBkYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgYURhdGUgPSBuZXcgRGF0ZShkKTtcclxuICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICB2YXIgeWVhciA9IGFEYXRlLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbW9udGggPSBhRGF0ZS5nZXRNb250aCgpO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRheSA9ICgnMCcgKyBhRGF0ZS5nZXREYXRlKCkpLnNsaWNlKC0yKTtcclxuICAgICAgICAgICAgICAgIHZhciBtb250aE5hbWVzID0gW1wiSmFuXCIsIFwiRmViXCIsIFwiTWFyXCIsIFwiQXByXCIsIFwiTWF5XCIsIFwiSnVuXCIsIFwiSnVsXCIsIFwiQXVnXCIsIFwiU2VwXCIsIFwiT2N0XCIsIFwiTm92XCIsIFwiRGVjXCJdO1xyXG4gICAgICAgICAgICAgICAgdmFyIGRhdGVXT3RpbWUgPSBuZXcgRGF0ZShtb250aE5hbWVzW21vbnRoXSArIFwiIFwiICsgZGF5ICsgXCIsIFwiICsgeWVhcik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZGF0ZVdPdGltZTtcclxuICAgICAgICAgICAgfTsgLy9lbmQgbWFrZUFkYXRlKClcclxuICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIGlmICh0aGlzRXZlbnQgIT0gXCJlbXB0eVwiKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYW5FdmVudCA9IGFuZ3VsYXIuY29weSh0aGlzRXZlbnQpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFuRXZlbnQuZXZlbnRfc3RhcnRfZGF0ZSA9ICRzY29wZS5hbkV2ZW50LmV2ZW50X3N0YXJ0X2RhdGUgIT09IHVuZGVmaW5lZCA/IG1ha2VBZGF0ZSgkc2NvcGUuYW5FdmVudC5ldmVudF9zdGFydF9kYXRlKSA6ICcnO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFuRXZlbnQuZXZlbnRfZW5kX2RhdGUgPSAkc2NvcGUuYW5FdmVudC5ldmVudF9lbmRfZGF0ZSAhPT0gdW5kZWZpbmVkID8gbWFrZUFkYXRlKCRzY29wZS5hbkV2ZW50LmV2ZW50X2VuZF9kYXRlKSA6ICcnO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy90aGlzIGlzIGEgbmV3IGV2ZW50IGJlaW5nIGNyZWF0ZWRcclxuICAgICAgICAgICAgICAgICRzY29wZS5hbkV2ZW50LmV2ZW50X3N0YXJ0X2RhdGUgPSBtYWtlQWRhdGUoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy9vbiBjcmVhdGUgYW5kIHNhdmUsIGlmIGRhdGVzIGVudGVyZWQsIGNvbXBhcmUgdG8gZW5zdXJlIGVuZCBkYXRlIGNvbWVzIGFmdGVyIHN0YXJ0IGRhdGVcclxuICAgICAgICAgICAgdmFyIGNvbXBhcmVEYXRlcyA9IGZ1bmN0aW9uICh2LCBzZCwgZWQpIHtcclxuICAgICAgICAgICAgICAgIGlmIChuZXcgRGF0ZShlZCkgPCBuZXcgRGF0ZShzZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB2ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGZpeERhdGUgPSAkdWliTW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPjxoMyBjbGFzcz1cIm1vZGFsLXRpdGxlXCI+RXJyb3I8L2gzPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1ib2R5XCI+PHA+VGhlIGV2ZW50IGVuZCBkYXRlIG11c3QgYmUgYWZ0ZXIgdGhlIGV2ZW50IHN0YXJ0IGRhdGUuPC9wPjwvZGl2PicgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJtb2RhbC1mb290ZXJcIj48YnV0dG9uIGNsYXNzPVwiYnRuIGJ0bi1wcmltYXJ5XCIgbmctZW50ZXI9XCJvaygpXCIgbmctY2xpY2s9XCJvaygpXCI+T0s8L2J1dHRvbj48L2Rpdj4nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsICckdWliTW9kYWxJbnN0YW5jZScsIGZ1bmN0aW9uICgkc2NvcGUsICR1aWJNb2RhbEluc3RhbmNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nXHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZml4RGF0ZS5yZXN1bHQudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHYgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB2O1xyXG4gICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLmNyZWF0ZSA9IGZ1bmN0aW9uICh2YWxpZCkge1xyXG4gICAgICAgICAgICAgICAgLy9tYWtlIHN1cmUgZW5kIGRhdGUgaXMgYWZ0ZXIgc3RhcnQgZGF0ZSAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIGlmICgoJHNjb3BlLmFuRXZlbnQuZXZlbnRfc3RhcnRfZGF0ZSAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5hbkV2ZW50LmV2ZW50X3N0YXJ0X2RhdGUgIT09IG51bGwpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgKCRzY29wZS5hbkV2ZW50LmV2ZW50X2VuZF9kYXRlICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLmFuRXZlbnQuZXZlbnRfZW5kX2RhdGUgIT09IG51bGwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBjb21wYXJlRGF0ZXModmFsaWQsICRzY29wZS5hbkV2ZW50LmV2ZW50X3N0YXJ0X2RhdGUsICRzY29wZS5hbkV2ZW50LmV2ZW50X2VuZF9kYXRlKTtcclxuICAgICAgICAgICAgICAgIH0vL2VuZCBpZiB0aGVyZSdzIGEgc3RhcnQgYW5kIGVuZCBkYXRlIFxyXG4gICAgICAgICAgICAgICAgaWYgKHZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICB2YXIgY3JlYXRlZEV2ZW50ID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgRVZFTlQuc2F2ZSgkc2NvcGUuYW5FdmVudCwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdHIuc3VjY2VzcyhcIkV2ZW50IENyZWF0ZWRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcHVzaCB0aGlzIG5ldyBldmVudCBpbnRvIHRoZSBldmVudExpc3RcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZEV2ZW50ID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRFdmVudC5ldmVudF9pZCA9IHJlc3BvbnNlLmV2ZW50X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkRXZlbnQuTmFtZSA9IHJlc3BvbnNlLmV2ZW50X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRFdmVudC5UeXBlID0gJHNjb3BlLmV2ZW50VHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLmV2ZW50X3R5cGVfaWQgPT0gcmVzcG9uc2UuZXZlbnRfdHlwZV9pZDsgfSlbMF0udHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3JlYXRlZEV2ZW50LlN0YXR1cyA9ICRzY29wZS5ldmVudFN0YXR1c2VzLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gci5ldmVudF9zdGF0dXNfaWQgPT0gcmVzcG9uc2UuZXZlbnRfc3RhdHVzX2lkOyB9KVswXS5zdGF0dXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb29yZCA9ICRzY29wZS5hZG1pbk1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLm1lbWJlcl9pZCA9PSByZXNwb25zZS5ldmVudF9jb29yZGluYXRvcjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNyZWF0ZWRFdmVudC5TdGFydERhdGUgPSByZXNwb25zZS5ldmVudF9zdGFydF9kYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkRXZlbnQuRW5kRGF0ZSA9IHJlc3BvbnNlLmV2ZW50X2VuZF9kYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjcmVhdGVkRXZlbnQuQ29vcmQgPSBjb29yZCAhPT0gdW5kZWZpbmVkID8gY29vcmQuZm5hbWUgKyBcIiBcIiArIGNvb3JkLmxuYW1lIDogXCJcIjsgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yIGNyZWF0aW5nIG5ldyBldmVudDogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2VuZEJhY2sgPSBbY3JlYXRlZEV2ZW50LCAnY3JlYXRlZCddO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5jbG9zZShzZW5kQmFjayk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9Oy8vZW5kICRzY29wZS5zYXZlKCkgICAgIFxyXG5cclxuICAgICAgICAgICAgJHNjb3BlLnNhdmUgPSBmdW5jdGlvbiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgIC8vbWFrZSBzdXJlIGVuZCBkYXRlIGlzIGFmdGVyIHN0YXJ0IGRhdGVcclxuICAgICAgICAgICAgICAgIGlmICgoJHNjb3BlLmFuRXZlbnQuZXZlbnRfc3RhcnRfZGF0ZSAhPT0gdW5kZWZpbmVkICYmICRzY29wZS5hbkV2ZW50LmV2ZW50X3N0YXJ0X2RhdGUgIT09IG51bGwpICYmXHJcbiAgICAgICAgICAgICAgICAgICAgKCRzY29wZS5hbkV2ZW50LmV2ZW50X2VuZF9kYXRlICE9PSB1bmRlZmluZWQgJiYgJHNjb3BlLmFuRXZlbnQuZXZlbnRfZW5kX2RhdGUgIT09IG51bGwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWQgPSBjb21wYXJlRGF0ZXModmFsaWQsICRzY29wZS5hbkV2ZW50LmV2ZW50X3N0YXJ0X2RhdGUsICRzY29wZS5hbkV2ZW50LmV2ZW50X2VuZF9kYXRlKTsgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgfS8vZW5kIGlmIHRoZXJlJ3MgYSBzdGFydCBhbmQgZW5kIGRhdGUgXHJcbiAgICAgICAgICAgICAgICBpZiAodmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB1cGRhdGVkRXZlbnQgPSB7fTtcclxuICAgICAgICAgICAgICAgICAgICBFVkVOVC51cGRhdGUoeyBpZDogJHNjb3BlLmFuRXZlbnQuZXZlbnRfaWQgfSwgJHNjb3BlLmFuRXZlbnQsIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZEV2ZW50ID0gcmVzcG9uc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRFdmVudC5ldmVudF9pZCA9IHJlc3BvbnNlLmV2ZW50X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkRXZlbnQuTmFtZSA9IHJlc3BvbnNlLmV2ZW50X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRFdmVudC5UeXBlID0gJHNjb3BlLmV2ZW50VHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChhKSB7IHJldHVybiBhLmV2ZW50X3R5cGVfaWQgPT0gcmVzcG9uc2UuZXZlbnRfdHlwZV9pZDsgfSlbMF0udHlwZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlZEV2ZW50LlN0YXR1cyA9ICRzY29wZS5ldmVudFN0YXR1c2VzLmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gci5ldmVudF9zdGF0dXNfaWQgPT0gcmVzcG9uc2UuZXZlbnRfc3RhdHVzX2lkOyB9KVswXS5zdGF0dXM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBjb29yZCA9ICRzY29wZS5hZG1pbk1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLm1lbWJlcl9pZCA9PSByZXNwb25zZS5ldmVudF9jb29yZGluYXRvcjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVwZGF0ZWRFdmVudC5TdGFydERhdGUgPSByZXNwb25zZS5ldmVudF9zdGFydF9kYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkRXZlbnQuRW5kRGF0ZSA9IHJlc3BvbnNlLmV2ZW50X2VuZF9kYXRlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVkRXZlbnQuQ29vcmQgPSBjb29yZCAhPT0gdW5kZWZpbmVkID8gY29vcmQuZm5hbWUgKyBcIiBcIiArIGNvb3JkLmxuYW1lIDogXCJcIjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLnN1Y2Nlc3MoXCJFdmVudCBVcGRhdGVkXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3RyLmVycm9yKFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNlbmRCYWNrID0gW3VwZGF0ZWRFdmVudCwgJ3VwZGF0ZWQnXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2Uoc2VuZEJhY2spO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICBcclxuICAgICAgICAgICAgJHNjb3BlLkRlbGV0ZUV2ZW50ID0gZnVuY3Rpb24gKGV2KSB7XHJcbiAgICAgICAgICAgICAgICAvL21vZGFsXHJcbiAgICAgICAgICAgICAgICB2YXIgbW9kYWxJbnN0YW5jZSA9ICR1aWJNb2RhbC5vcGVuKHtcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ3JlbW92ZW1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdDb25maXJtTW9kYWxDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICBzaXplOiAnc20nLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmFtZVRvUmVtb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXY7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcIkV2ZW50XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGV2ZW50VG9SZW1vdmUpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL0RFTEVURSBpdFxyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkF1dGhvcml6YXRpb24gPSAnQmFzaWMgJyArICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKTtcclxuICAgICAgICAgICAgICAgICAgICBFVkVOVC5kZWxldGUoeyBpZDogZXZlbnRUb1JlbW92ZS5ldmVudF9pZCB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5zdWNjZXNzKFwiRXZlbnQgRGVsZXRlZFwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0ci5lcnJvcihcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2Uuc3RhdHVzVGV4dCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICR1aWJNb2RhbEluc3RhbmNlLmNsb3NlKFtcImRlXCIsICdkZWxldGVkJ10pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICAvL2NhbmNlbCBtb2RhbFxyXG4gICAgICAgICAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UoKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZyA9IHsgc2hvd0xvYWRpbmc6IGZhbHNlIH07IC8vTG9hZGluZy4uLlxyXG5cclxuICAgICAgICB9XSk7XHJcbiAgICBcclxufSgpKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBTZXR0aW5nc0NvbnRyb2xsZXJzID0gYW5ndWxhci5tb2R1bGUoJ1NldHRpbmdzQ29udHJvbGxlcnMnKTtcclxuXHJcbiAgICBTZXR0aW5nc0NvbnRyb2xsZXJzLmNvbnRyb2xsZXIoJ2V2ZW50Q3RybCcsIFsnJHNjb3BlJywgJyRyb290U2NvcGUnLCAnJGNvb2tpZXMnLCAnJGxvY2F0aW9uJywgJyRodHRwJywgJyRmaWx0ZXInLCAnJHVpYk1vZGFsJywgJ01FTUJFUicsICdhbGxDb29yZE1lbWJlcnMnLCAnYWxsRXZlbnRzJywgJ2FsbEV2ZW50VHlwZXMnLCAnYWxsRXZlbnRTdGF0cycsXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHJvb3RTY29wZSwgJGNvb2tpZXMsICRsb2NhdGlvbiwgJGh0dHAsICRmaWx0ZXIsICR1aWJNb2RhbCwgTUVNQkVSLCBhbGxDb29yZE1lbWJlcnMsIGFsbEV2ZW50cywgYWxsRXZlbnRUeXBlcywgYWxsRXZlbnRTdGF0cykge1xyXG4gICAgICAgICAgICBpZiAoJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSB1bmRlZmluZWQgfHwgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpID09PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYXV0aCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgJGxvY2F0aW9uLnBhdGgoJy9sb2dpbicpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgJHJvb3RTY29wZS50aGlzUGFnZSA9IFwiU2V0dGluZ3MvRXZlbnRzXCI7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUubG9nZ2VkSW5Sb2xlID0gJGNvb2tpZXMuZ2V0KCd1c2Vyc1JvbGUnKTtcclxuICAgICAgICAgICAgICAgICRzY29wZS5pc0FkbWluID0gJHNjb3BlLmxvZ2dlZEluUm9sZSA9PSBcIkFkbWluXCIgPyB0cnVlIDogZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gY2hhbmdlIHNvcnRpbmcgb3JkZXJcclxuICAgICAgICAgICAgICAgICRzY29wZS5zb3J0X2J5ID0gZnVuY3Rpb24gKG5ld1NvcnRpbmdPcmRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgkc2NvcGUuc29ydGluZ09yZGVyID09IG5ld1NvcnRpbmdPcmRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUucmV2ZXJzZSA9ICEkc2NvcGUucmV2ZXJzZTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNvcnRpbmdPcmRlciA9IG5ld1NvcnRpbmdPcmRlcjtcclxuICAgICAgICAgICAgICAgICAgICAvLyBpY29uIHNldHVwXHJcbiAgICAgICAgICAgICAgICAgICAgJCgndGggaScpLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBpY29uIHJlc2V0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQodGhpcykucmVtb3ZlQ2xhc3MoKS5hZGRDbGFzcygnZ2x5cGhpY29uIGdseXBoaWNvbi1zb3J0Jyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCRzY29wZS5yZXZlcnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICQoJ3RoLicgKyBuZXdTb3J0aW5nT3JkZXIgKyAnIGknKS5yZW1vdmVDbGFzcygpLmFkZENsYXNzKCdnbHlwaGljb24gZ2x5cGhpY29uLWNoZXZyb24tdXAnKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkKCd0aC4nICsgbmV3U29ydGluZ09yZGVyICsgJyBpJykucmVtb3ZlQ2xhc3MoKS5hZGRDbGFzcygnZ2x5cGhpY29uIGdseXBoaWNvbi1jaGV2cm9uLWRvd24nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9O1xyXG5cclxuICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFR5cGVMaXN0ID0gYWxsRXZlbnRUeXBlcztcclxuICAgICAgICAgICAgICAgICRzY29wZS5ldmVudFN0YXRMaXN0ID0gYWxsRXZlbnRTdGF0cztcclxuICAgICAgICAgICAgICAgICRzY29wZS5ldmVudENvb3JkTGlzdCA9IGFsbENvb3JkTWVtYmVycztcclxuXHJcbiAgICAgICAgICAgICAgICAvL2J1aWxkIGV2ZW50T2JqZWN0IGZvciBldmVudExpc3QgZm9yIHRhYmxlIGluIGV2ZW50c0xpc3QuaHRtbFxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmV2ZW50TGlzdCA9IFtdO1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgeCA9IDA7IHggPCBhbGxFdmVudHMubGVuZ3RoOyB4KyspIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgRSA9IGFsbEV2ZW50c1t4XTtcclxuICAgICAgICAgICAgICAgICAgICBFLk5hbWUgPSBhbGxFdmVudHNbeF0uZXZlbnRfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBFLlR5cGUgPSAkc2NvcGUuZXZlbnRUeXBlTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGEpIHsgcmV0dXJuIGEuZXZlbnRfdHlwZV9pZCA9PSBhbGxFdmVudHNbeF0uZXZlbnRfdHlwZV9pZDsgfSlbMF0udHlwZTtcclxuICAgICAgICAgICAgICAgICAgICBFLlN0YXR1cyA9ICRzY29wZS5ldmVudFN0YXRMaXN0LmZpbHRlcihmdW5jdGlvbiAocikgeyByZXR1cm4gci5ldmVudF9zdGF0dXNfaWQgPT0gYWxsRXZlbnRzW3hdLmV2ZW50X3N0YXR1c19pZDsgfSlbMF0uc3RhdHVzO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjb29yZCA9ICRzY29wZS5ldmVudENvb3JkTGlzdC5maWx0ZXIoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGMubWVtYmVyX2lkID09IGFsbEV2ZW50c1t4XS5ldmVudF9jb29yZGluYXRvcjsgfSlbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgRS5TdGFydERhdGUgPSBhbGxFdmVudHNbeF0uZXZlbnRfc3RhcnRfZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICBFLkVuZERhdGUgPSBhbGxFdmVudHNbeF0uZXZlbnRfZW5kX2RhdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgRS5Db29yZCA9IGNvb3JkICE9PSB1bmRlZmluZWQgPyBjb29yZC5mbmFtZSArIFwiIFwiICsgY29vcmQubG5hbWUgOiBcIlwiO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXZlbnRMaXN0LnB1c2goRSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgLy9jcmVhdGUvdmlldyBtZW1iZXIgd2FzIGNsaWNrZWRcclxuICAgICAgICAgICAgICAgICRzY29wZS5zaG93RXZlbnRNb2RhbCA9IGZ1bmN0aW9uIChldmVudENsaWNrZWQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXhDbGlja2VkID0gJHNjb3BlLmV2ZW50TGlzdC5pbmRleE9mKGV2ZW50Q2xpY2tlZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHJvb3RTY29wZS5zdGF0ZUlzTG9hZGluZyA9IHsgc2hvd0xvYWRpbmc6IHRydWUgfTsgLy9Mb2FkaW5nLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgLy9tb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJHVpYk1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2V2ZW50TW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdldmVudE1vZGFsQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU6ICdsZycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2tkcm9wOiAnc3RhdGljJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAga2V5Ym9hcmQ6IGZhbHNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3dDbGFzczogJ3JlcC1kaWFsb2cnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzRXZlbnQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXZlbnRDbGlja2VkICE9PSAwID8gZXZlbnRDbGlja2VkIDogXCJlbXB0eVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50VHlwZUxpc3Q6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWxsRXZlbnRUeXBlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudFN0YXR1c0xpc3Q6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWxsRXZlbnRTdGF0cztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZG1pbkxpc3Q6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhbGxDb29yZE1lbWJlcnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChjcmVhdGVkRXZlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9pcyB0aGVyZSBhIG5ldyBvcCBvciBqdXN0IGNsb3NlZCBtb2RhbFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nID0geyBzaG93TG9hZGluZzogZmFsc2UgfTsgLy9Mb2FkaW5nLi4uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcmVhdGVkRXZlbnQgIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZWRFdmVudFsxXSA9PSAnY3JlYXRlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuZXZlbnRMaXN0LnB1c2goY3JlYXRlZEV2ZW50WzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjcmVhdGVkRXZlbnRbMV0gPT09ICd1cGRhdGVkJykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vdXBkYXRlIHRoZSBsaXN0XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV2ZW50TGlzdFtpbmRleENsaWNrZWRdID0gY3JlYXRlZEV2ZW50WzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNyZWF0ZWRFdmVudFsxXSA9PSAnZGVsZXRlZCcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyB2YXIgaW5kZXhDbGlja2VkMSA9ICRzY29wZS5tZW1iZXJMaXN0LmluZGV4T2YoY3JlYXRlZE1lbWJlclswXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLmV2ZW50TGlzdC5zcGxpY2UoaW5kZXhDbGlja2VkLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuICAgICAgICB9XSk7XHJcbn0oKSk7IiwiXHJcbihmdW5jdGlvbiAoKSB7XHJcbiAgICAvKiBjb250cm9sbGVycy5qcywgJ2xlYWZsZXQtZGlyZWN0aXZlJyd1aS51bmlxdWUnLCduZ1RhZ3NJbnB1dCcsKi9cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU1ROQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnU1ROQ29udHJvbGxlcnMnKTtcclxuXHJcbiAgICBTVE5Db250cm9sbGVycy5jb250cm9sbGVyKCdhcHByb3ZhbEN0cmwnLCBbJyRzY29wZScsICckY29va2llcycsICckcm9vdFNjb3BlJywgJyRsb2NhdGlvbicsICckaHR0cCcsICdzdGF0ZUxpc3QnLCAnaW5zdHJ1bWVudExpc3QnLCAnYWxsU2Vuc29yVHlwZXMnLCAnYWxsRGVwVHlwZXMnLCAnSFdNJywgJ0RBVEFfRklMRScsICdJTlNUUlVNRU5UJywgJ01FTUJFUicsICdTSVRFJyxcclxuICAgICAgICBmdW5jdGlvbiAoJHNjb3BlLCAkY29va2llcywgJHJvb3RTY29wZSwgJGxvY2F0aW9uLCAkaHR0cCwgc3RhdGVMaXN0LCBpbnN0cnVtZW50TGlzdCwgYWxsU2Vuc29yVHlwZXMsIGFsbERlcFR5cGVzLCBIV00sIERBVEFfRklMRSwgSU5TVFJVTUVOVCwgTUVNQkVSLCBTSVRFKSB7XHJcbiAgICAgICAgICAgIGlmICgkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IHVuZGVmaW5lZCB8fCAkY29va2llcy5nZXQoJ1NUTkNyZWRzJykgPT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5hdXRoID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAkbG9jYXRpb24ucGF0aCgnL2xvZ2luJyk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAvL1RPRE86IFdobyBjYW4gZG8gYXBwcm92YWxzPz8/Pz8/Pz9cclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUudGhpc1BhZ2UgPSBcIkFwcHJvdmFsXCI7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmFjdGl2ZU1lbnUgPSBcImFwcHJvdmFsXCI7XHJcbiAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgIC8vIHdhdGNoIGZvciB0aGUgc2Vzc2lvbiBldmVudCB0byBjaGFuZ2UgYW5kIHVwZGF0ZSAgXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHsgcmV0dXJuICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50TmFtZScpOyB9LCBmdW5jdGlvbiAobmV3VmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vzc2lvbkV2ZW50ID0gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJykgIT09IG51bGwgJiYgJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJykgIT09IHVuZGVmaW5lZCA/ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50TmFtZScpIDogXCJBbGwgRXZlbnRzXCI7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICBNRU1CRVIuZ2V0QWxsKGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UpIHsgJHNjb3BlLmFsbE1lbWJlcnMgPSByZXNwb25zZTt9KS4kcHJvbWlzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU3RhdGVzID0gc3RhdGVMaXN0O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmFsbEluc3RydW1lbnRzID0gaW5zdHJ1bWVudExpc3Q7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuYWxsU2Vuc29yVHlwZXMgPSBhbGxTZW5zb3JUeXBlcztcclxuICAgICAgICAgICAgICAgICRzY29wZS5hbGxEZXBsb3ltZW50VHlwZXMgPSBhbGxEZXBUeXBlcztcclxuICAgICAgICAgICAgICAgICRzY29wZS5DaG9zZW5FdmVudCA9IHt9O1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLkNob3NlblN0YXRlID0ge307XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuQ2hvc2VuTWVtYmVyID0ge307XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUudW5BcHByb3ZlZEhXTXMgPSBbXTsgJHNjb3BlLnNob3dIV01ib3ggPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICRzY29wZS51bkFwcHJvdmVkREZzID0gW107ICRzY29wZS5zaG93REZib3ggPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAvL2lmIHRoZXkgYXJlIGNvbWluZyBiYWNrIGhlcmUsIHNlZSBpZiBhIHNlYXJjaCBoYXMgYmVlbiBzdG9yZWQgbGFzdCB0aW1lLlxyXG4gICAgICAgICAgICAgICAgaWYgKCRyb290U2NvcGUuYXBwcm92YWxTZWFyY2ggIT09IHVuZGVmaW5lZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0aGlzU2VhcmNoID0gJHJvb3RTY29wZS5hcHByb3ZhbFNlYXJjaDtcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vzc2lvbkV2ZW50ID0gTnVtYmVyKHRoaXNTZWFyY2guZXZlbnRJRCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLkNob3NlblN0YXRlLmlkID0gdGhpc1NlYXJjaC5zdGF0ZUlEO1xyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5DaG9zZW5NZW1iZXIuaWQgPSB0aGlzU2VhcmNoLm1lbWJlcklEOyAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgLy9nbyBnZXQgdGhlIEhXTXMgYW5kIERhdGFGaWxlcyB0aGF0IG5lZWQgdG8gYmUgYXBwcm92ZWRcclxuICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgIEhXTS5nZXRVbmFwcHJvdmVkSFdNcyh7IElzQXBwcm92ZWQ6ICdmYWxzZScsIEV2ZW50OiB0aGlzU2VhcmNoLmV2ZW50SUQsIE1lbWJlcjogdGhpc1NlYXJjaC5tZW1iZXJJRCwgU3RhdGU6IHRoaXNTZWFyY2guc3RhdGVJRCB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51bkFwcHJvdmVkSFdNcyA9IHJlc3BvbnNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0hXTWJveCA9IHRydWU7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uIGVycm9yKGVycm9yUmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIERBVEFfRklMRS5nZXRVbmFwcHJvdmVkREZzKHsgSXNBcHByb3ZlZDogJ2ZhbHNlJywgRXZlbnQ6IHRoaXNTZWFyY2guZXZlbnRJRCwgUHJvY2Vzc29yOiB0aGlzU2VhcmNoLm1lbWJlcklELCBTdGF0ZTogdGhpc1NlYXJjaC5zdGF0ZUlEIH0sIGZ1bmN0aW9uIHN1Y2Nlc3MocmVzcG9uc2UxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBERnMgPSByZXNwb25zZTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbmVlZCBzZW5zb3IgYW5kIHNpdGUgaW5mb1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2goREZzLCBmdW5jdGlvbiAoZGYpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0aGlzZGZJbnN0ID0gJHNjb3BlLmFsbEluc3RydW1lbnRzLmZpbHRlcihmdW5jdGlvbiAoaSkgeyByZXR1cm4gaS5pbnN0cnVtZW50X2lkID09IGRmLmluc3RydW1lbnRfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZvcm1hdHRlZERGID0ge307XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgc2l0ZUlEID0gdGhpc2RmSW5zdC5zaXRlX2lkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkREYuU2l0ZUlkID0gc2l0ZUlEO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkREYuc2VuVHlwZSA9ICRzY29wZS5hbGxTZW5zb3JUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKHMpIHsgcmV0dXJuIHMuc2Vuc29yX3R5cGVfaWQgPT0gdGhpc2RmSW5zdC5zZW5zb3JfdHlwZV9pZDsgfSlbMF0uc2Vuc29yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRlcFR5cGUgPSAkc2NvcGUuYWxsRGVwbG95bWVudFR5cGVzLmZpbHRlcihmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5kZXBsb3ltZW50X3R5cGVfaWQgPT0gdGhpc2RmSW5zdC5kZXBsb3ltZW50X3R5cGVfaWQ7IH0pWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkREYuZGVwVHlwZSA9IGRlcFR5cGUgIT09IHVuZGVmaW5lZCA/IGRlcFR5cGUubWV0aG9kIDogdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9ybWF0dGVkREYuSW5zdHJJRCA9IHRoaXNkZkluc3QuaW5zdHJ1bWVudF9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNJVEUucXVlcnkoeyBpZDogc2l0ZUlEIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlMikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZERGLlNpdGVObyA9IHJlc3BvbnNlMi5zaXRlX25vO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS51bkFwcHJvdmVkREZzLnB1c2goZm9ybWF0dGVkREYpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2hvd0RGYm94ID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydChcIkVycm9yOiBcIiArIGVycm9yUmVzcG9uc2UxLnN0YXR1c1RleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlYXJjaCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAvL2NsZWFyIGNvbnRlbnRzIGluIGNhc2UgdGhleSBhcmUgc2VhcmNoaW5nIG11bHRpcGxlIHRpbWVzXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVuQXBwcm92ZWRIV01zID0gW107ICRzY29wZS5zaG93SFdNYm94ID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnVuQXBwcm92ZWRERnMgPSBbXTsgJHNjb3BlLnNob3dERmJveCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBldklEID0gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnRJRCcpICE9PSBudWxsICYmICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50SUQnKSAhPT0gdW5kZWZpbmVkID8gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnRJRCcpIDogMDtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgc0lEID0gJHNjb3BlLkNob3NlblN0YXRlLmlkICE9PSB1bmRlZmluZWQgPyAkc2NvcGUuQ2hvc2VuU3RhdGUuaWQgOiAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtSUQgPSAkc2NvcGUuQ2hvc2VuTWVtYmVyLmlkICE9PSB1bmRlZmluZWQgPyAkc2NvcGUuQ2hvc2VuTWVtYmVyLmlkIDogMDtcclxuICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLmFwcHJvdmFsU2VhcmNoID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudElEOiBldklELFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZUlEOiBzSUQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lbWJlcklEOiBtSURcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIC8vZ28gZ2V0IHRoZSBIV01zIGFuZCBEYXRhRmlsZXMgdGhhdCBuZWVkIHRvIGJlIGFwcHJvdmVkXHJcbiAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQXV0aG9yaXphdGlvbiA9ICdCYXNpYyAnICsgJGNvb2tpZXMuZ2V0KCdTVE5DcmVkcycpO1xyXG4gICAgICAgICAgICAgICAgICAgICRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uLkFjY2VwdCA9ICdhcHBsaWNhdGlvbi9qc29uJztcclxuICAgICAgICAgICAgICAgICAgICBIV00uZ2V0VW5hcHByb3ZlZEhXTXMoeyBJc0FwcHJvdmVkOiAnZmFsc2UnLCBFdmVudDogZXZJRCwgTWVtYmVyOiBtSUQsIFN0YXRlOiBzSUQgfSwgZnVuY3Rpb24gc3VjY2VzcyhyZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25lZWQgc2l0ZSBub1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbmd1bGFyLmZvckVhY2gocmVzcG9uc2UsIGZ1bmN0aW9uIChoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTSVRFLnF1ZXJ5KHsgaWQ6IGguc2l0ZV9pZCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChzcmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBoLnNpdGVfbm8gPSBzcmVzcG9uc2Uuc2l0ZV9ubztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudW5BcHByb3ZlZEhXTXMucHVzaChoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dIV01ib3ggPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9LCBmdW5jdGlvbiBlcnJvcihlcnJvclJlc3BvbnNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiRXJyb3I6IFwiICsgZXJyb3JSZXNwb25zZS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICBEQVRBX0ZJTEUuZ2V0VW5hcHByb3ZlZERGcyh7IElzQXBwcm92ZWQ6ICdmYWxzZScsIEV2ZW50OiBldklELCBQcm9jZXNzb3I6IG1JRCwgU3RhdGU6IHNJRCB9LCBmdW5jdGlvbiBzdWNjZXNzKHJlc3BvbnNlMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgREZzID0gcmVzcG9uc2UxO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL25lZWQgc2Vuc29yIGFuZCBzaXRlIGluZm9cclxuICAgICAgICAgICAgICAgICAgICAgICAgYW5ndWxhci5mb3JFYWNoKERGcywgZnVuY3Rpb24gKGRmKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGhpc2RmSW5zdCA9ICRzY29wZS5hbGxJbnN0cnVtZW50cy5maWx0ZXIoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGkuaW5zdHJ1bWVudF9pZCA9PSBkZi5pbnN0cnVtZW50X2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBmb3JtYXR0ZWRERiA9IHt9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHNpdGVJRCA9IHRoaXNkZkluc3Quc2l0ZV9pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZERGLlNpdGVJZCA9IHNpdGVJRDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZERGLnNlblR5cGUgPSAkc2NvcGUuYWxsU2Vuc29yVHlwZXMuZmlsdGVyKGZ1bmN0aW9uIChzKSB7IHJldHVybiBzLnNlbnNvcl90eXBlX2lkID09IHRoaXNkZkluc3Quc2Vuc29yX3R5cGVfaWQ7IH0pWzBdLnNlbnNvcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkZXBUeXBlID0gJHNjb3BlLmFsbERlcGxveW1lbnRUeXBlcy5maWx0ZXIoZnVuY3Rpb24gKGQpIHsgcmV0dXJuIGQuZGVwbG95bWVudF90eXBlX2lkID09IHRoaXNkZkluc3QuZGVwbG95bWVudF90eXBlX2lkOyB9KVswXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZERGLmRlcFR5cGUgPSBkZXBUeXBlICE9PSB1bmRlZmluZWQgPyBkZXBUeXBlLm1ldGhvZCA6IHVuZGVmaW5lZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvcm1hdHRlZERGLkluc3RySUQgPSB0aGlzZGZJbnN0Lmluc3RydW1lbnRfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBTSVRFLnF1ZXJ5KHsgaWQ6IHNpdGVJRCB9KS4kcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZTIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3JtYXR0ZWRERi5TaXRlTm8gPSByZXNwb25zZTIuc2l0ZV9ubztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUudW5BcHByb3ZlZERGcy5wdXNoKGZvcm1hdHRlZERGKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJHNjb3BlLnNob3dERmJveCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gZXJyb3IoZXJyb3JSZXNwb25zZTEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJFcnJvcjogXCIgKyBlcnJvclJlc3BvbnNlMS5zdGF0dXNUZXh0KTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XSk7XHJcblxyXG59KSgpOyIsIihmdW5jdGlvbiAoKSB7XHJcbiAgICBcInVzZSBzdHJpY3RcIjtcclxuXHJcbiAgICAvL2xvb2sgdXAgY29tbW9uIHNlcnZpY2UgbW9kdWxlLCBhbmQgcmVnaXN0ZXIgdGhlIG5ldyBmYWN0b3J5IHdpdGggdGhhdCBtb2R1bGUgXHJcbiAgICB2YXIgU1ROUmVzb3VyY2UgPSBhbmd1bGFyLm1vZHVsZSgnU1ROUmVzb3VyY2UnLCBbJ25nUmVzb3VyY2UnXSk7XHJcbiAgICB2YXIgcm9vdFVSTCA9IFwiaHR0cHM6Ly9zdG4ud2ltLnVzZ3MuZ292L1NUTlNlcnZpY2VzXCI7XHJcbiAgICAvLyB2YXIgcm9vdFVSTCA9IFwiaHR0cHM6Ly9zdG50ZXN0LndpbS51c2dzLmdvdi9TVE5TZXJ2aWNlczJcIjtcclxuICAgICAvL3ZhciByb290VVJMID0gXCJodHRwOi8vbG9jYWxob3N0L1NUTlNlcnZpY2VzMlwiO1xyXG4gICBcclxuICAgIC8vI3JlZ2lvbiBHRU9DT0RFIGh0dHBzOi8vZ2VvY29kaW5nLmdlby5jZW5zdXMuZ292L2dlb2NvZGVyL2dlb2dyYXBoaWVzL2Nvb3JkaW5hdGVzP2JlbmNobWFyaz00JnZpbnRhZ2U9NCZmb3JtYXQ9anNvblxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnR0VPQ09ERScsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkgeyAgICAgICAgICBcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL0dlb2NvZGUvbG9jYXRpb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgZ2V0QWRkcmVzc1BhcnRzOiB7IG1ldGhvZDogJ0dFVCcsIHBhcmFtczogeyBMYXRpdHVkZTogJ0BMYXRpdHVkZScsIExvbmdpdHVkZTogJ0BMb25naXR1ZGUnIH0gfSAvL3k9MjguMzU5NzUmeD0tODEuNDIxOTg4XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIEdFT0NPREVcclxuICAgIC8vI3JlZ2lvbiBBR0VOQ1lcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0FHRU5DWScsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvQWdlbmNpZXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIEFHRU5DWSAgICBcclxuICAgIC8vI3JlZ2lvbiBDT05UQUNUX1RZUEVcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0NPTlRBQ1RfVFlQRScsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvQ29udGFjdFR5cGVzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBDT05UQUNUX1RZUEVcclxuICAgIC8vI3JlZ2lvbiBDT05UQUNUXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdDT05UQUNUJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9Db250YWN0cy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRDb250YWN0TW9kZWw6IHttZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgQ09OVEFDVFxyXG4gICAgLy8jcmVnaW9uIENPVU5USUVTXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdDT1VOVElFUycsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvQ291bnRpZXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIENPVU5USUVTXHJcbiAgICAvLyNyZWdpb24gREFUQV9GSUxFXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdEQVRBX0ZJTEUnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL0RhdGFGaWxlcy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0REZBcHByb3ZhbDogeyBtZXRob2Q6ICdHRVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlLCB1cmw6IHJvb3RVUkwgKyAnL0RhdGFGaWxlcy86aWQvQXBwcm92YWwuanNvbicgfSxcclxuICAgICAgICAgICAgICAgIGdldFVuYXBwcm92ZWRERnM6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgY2FjaGU6IGZhbHNlIH0sIC8vP0lzQXBwcm92ZWQ9e2FwcHJvdmVkfSZFdmVudD17ZXZlbnRJZH0mUHJvY2Vzc29yPXttZW1iZXJJZH0mU3RhdGU9e3N0YXRlfVxyXG4gICAgICAgICAgICAgICAgYXBwcm92ZURGOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlLCBwYXJhbXM6IHsgaWQ6ICdAaWQnIH0sIHVybDogcm9vdFVSTCArICcvZGF0YWZpbGVzLzppZC9BcHByb3ZlLmpzb24nIH0sIC8vcG9zdHMgYW4gQVBQUk9WQUwsIHVwZGF0ZXMgdGhlIGRhdGEgZmlsZSB3aXRoIGFwcHJvdmFsX2lkIGFuZCByZXR1cm5zIEFQUFJPVkFMXHJcbiAgICAgICAgICAgICAgICBhcHByb3ZlTldJU0RGOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlLCBwYXJhbXM6IHsgaWQ6ICdAaWQnIH0sIHVybDogcm9vdFVSTCArICcvZGF0YWZpbGVzLzppZC9OV0lTQXBwcm92ZS5qc29uJyB9LCAvL3Bvc3RzIGFuIEFQUFJPVkFMICh1c2luZyBFdmVudENvb3JkKSwgdXBkYXRlcyB0aGUgZGF0YSBmaWxlIHdpdGggYXBwcm92YWxfaWQgYW5kIHJldHVybnMgQVBQUk9WQUxcclxuICAgICAgICAgICAgICAgIHVuQXBwcm92ZURGOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UsIHVybDogcm9vdFVSTCArICcvZGF0YWZpbGVzLzppZC9VbmFwcHJvdmUuanNvbicgfSwgLy9wb3N0cyBhbiBBUFBST1ZBTCwgdXBkYXRlcyB0aGUgZGF0YWZpbGUgd2l0aCBhcHByb3ZhbF9pZCBhbmQgcmV0dXJucyBBUFBST1ZBTFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgREFUQV9GSUxFXHJcbiAgICAvLyNyZWdpb24gREVQTE9ZTUVOVF9QUklPUklUWVxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnREVQTE9ZTUVOVF9QUklPUklUWScsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvRGVwbG95bWVudFByaW9yaXRpZXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIERFUExPWU1FTlRfUFJJT1JJVFlcclxuICAgIC8vI3JlZ2lvbiBERVBMT1lNRU5UX1RZUEVcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0RFUExPWU1FTlRfVFlQRScsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvRGVwbG95bWVudFR5cGVzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldERlcFNlbnNUeXBlOiB7bWV0aG9kOiAnR0VUJywgaXNBcnJheTogZmFsc2UsIHVybDogcm9vdFVSTCArICcvRGVwbG95bWVudFR5cGVzLzppZC9TZW5zb3JUeXBlLmpzb24nfSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBERVBMT1lNRU5UX1RZUEUgICAgXHJcbiAgICAvLyNyZWdpb24gRVZFTlRcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0VWRU5UJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9FdmVudHMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIGdldEV2ZW50U2l0ZXM6IHttZXRob2Q6ICdHRVQnLCBpc0FycmF5OnRydWUsIHVybDogcm9vdFVSTCArICcvRXZlbnRzLzppZC9TaXRlcy5qc29uJ30sXHJcbiAgICAgICAgICAgICAgICBnZXRGaWx0ZXJlZEV2ZW50czoge21ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUsIHVybDogcm9vdFVSTCArICcvRXZlbnRzL0ZpbHRlcmVkRXZlbnRzLmpzb24nfSwgLy8/RGF0ZTogbnVsbCwgVHlwZTogMCwgU3RhdGU6IG51bGxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIEVWRU5UXHJcbiAgICAvLyNyZWdpb24gRVZFTlRfU1RBVFVTXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdFVkVOVF9TVEFUVVMnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL0V2ZW50U3RhdHVzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBFVkVOVF9TVEFUVVNcclxuICAgIC8vI3JlZ2lvbiBFVkVOVF9UWVBFXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdFVkVOVF9UWVBFJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9FdmVudFR5cGVzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBFVkVOVF9UWVBFICAgXHJcbiAgICAvLyNyZWdpb24gRklMRVxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnRklMRScsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvRmlsZXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIGdldEZpbGVJdGVtOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IGZhbHNlLCB1cmw6IHJvb3RVUkwgKyAnL0ZpbGVzLzppZC9JdGVtJyB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHVwbG9hZEZpbGU6IHsgbWV0aG9kOiAnUE9TVCcsIHVybDogcm9vdFVSTCArICcvRmlsZXMvYnl0ZXMnLCBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiB1bmRlZmluZWQgfSwgdHJhbnNmb3JtUmVxdWVzdDogYW5ndWxhci5pZGVudGl0eSwgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBGSUxFIFxyXG4gICAgLy8jcmVnaW9uIHBob3RvRmlsZVN0YW1wXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdGSUxFX1NUQU1QJywgWyckcm9vdFNjb3BlJywgZnVuY3Rpb24gKCRyb290U2NvcGUpIHtcclxuICAgICAgICAvL25lZWQgdG8gdXBkYXRlIHRoZSBuZy1zcmMgb24gcGhvdG8gZmlsZXMgaWYgb25lIGNoYW5nZXMsIHVwZGF0ZSB0aGUgc3RhbXAgcGFydCBvZiB0aGUgaW1hZ2UgdG8gcmVmcmVzaCB0aGUgbGluayAgICAgICAgXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0U3RhbXA6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBzdGFtcCA9ICc/JyArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHN0YW1wO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXRTdGFtcDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHN0YW1wID0gJz8nICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XHJcbiAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2ZpbGVTdGFtcFNldCcsIHN0YW1wKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgSFdNX1NlcnZpY2VcclxuICAgIC8vI3JlZ2lvbiBGSUxFX1RZUEVcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0ZJTEVfVFlQRScsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvRmlsZVR5cGVzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBGSUxFX1RZUEUgICBcclxuICAgIC8vI3JlZ2lvbiBIT1JJWk9OVEFMX0NPTExfTUVUSE9EU1xyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnSE9SSVpPTlRBTF9DT0xMX01FVEhPRFMnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL0hvcml6b250YWxNZXRob2RzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBIT1JJWk9OVEFMX0NPTExfTUVUSE9EU1xyXG4gICAgLy8jcmVnaW9uIEhPUklaT05UQUxfREFUVU1cclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0hPUklaT05UQUxfREFUVU0nLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL0hvcml6b250YWxEYXR1bXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIEhPUklaT05UQUxfREFUVU1cclxuICAgIC8vI3JlZ2lvbiBIT1VTSU5HX1RZUEVcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0hPVVNJTkdfVFlQRScsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvSG91c2luZ1R5cGVzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBIT1VTSU5HX1RZUEVcclxuICAgIC8vI3JlZ2lvbiBIV01cclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0hXTScsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvaHdtcy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0RmlsdGVyZWRIV01zOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUsIHVybDogcm9vdFVSTCArICcvSFdNcy9GaWx0ZXJlZEhXTXMuanNvbicgfSwgLy9FdmVudD17ZXZlbnRJZHN9JkV2ZW50VHlwZT17ZXZlbnRUeXBlSURzfSZFdmVudFN0YXR1cz17ZXZlbnRTdGF0dXNJRH0mU3RhdGVzPXtzdGF0ZXN9JkNvdW50eT17Y291bnRpZXN9JkhXTVR5cGU9e2h3bVR5cGVJRHN9JkhXTVF1YWxpdHk9e2h3bVF1YWxJRHN9JkhXTUVudmlyb25tZW50PXtod21FbnZpcm9ubWVudH0mU3VydmV5Q29tcGxldGU9e3N1cnZleUNvbXBsZXRlfSZTdGlsbFdhdGVyPXtzdGlsbFdhdGVyfVxyXG4gICAgICAgICAgICAgICAgZ2V0VW5hcHByb3ZlZEhXTXM6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgY2FjaGU6IGZhbHNlIH0sIC8vSXNBcHByb3ZlZD17J3RydWUnLydmYWxzZSd9JkV2ZW50PXtldmVudElkfSZNZW1iZXI9e21lbWJlcklkfSZTdGF0ZT17c3RhdGV9XHJcbiAgICAgICAgICAgICAgICBnZXRIV01BcHByb3ZhbDoge21ldGhvZDogJ0dFVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UsIHVybDogcm9vdFVSTCArICcvaHdtcy86aWQvQXBwcm92YWwuanNvbid9LFxyXG4gICAgICAgICAgICAgICAgYXBwcm92ZUhXTTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSwgcGFyYW1zOiB7IGlkOiAnQGlkJyB9LCB1cmw6IHJvb3RVUkwgKyAnL2h3bXMvOmlkL0FwcHJvdmUuanNvbicgfSwgLy9wb3N0cyBhbiBBUFBST1ZBTCwgdXBkYXRlcyB0aGUgSFdNIHdpdGggYXBwcm92YWxfaWQgYW5kIHJldHVybnMgQVBQUk9WQUxcclxuICAgICAgICAgICAgICAgIHVuQXBwcm92ZUhXTTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlLCB1cmw6IHJvb3RVUkwgKyAnL2h3bXMvOmlkL1VuYXBwcm92ZS5qc29uJyB9LCAvL3Bvc3RzIGFuIEFQUFJPVkFMLCB1cGRhdGVzIHRoZSBIV00gd2l0aCBhcHByb3ZhbF9pZCBhbmQgcmV0dXJucyBBUFBST1ZBTFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgSFdNXHJcbiAgICAvLyNyZWdpb24gSFdNX1NlcnZpY2VcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0hXTV9TZXJ2aWNlJywgW2Z1bmN0aW9uICgpIHtcclxuICAgICAgICAvL3doZW4gaHdtIGlzIGNyZWF0ZWQgb3IgZGVsZXRlZCwgdGhpcyBnZXRzIHVwZGF0ZWQgc28gdGhhdCBmaWxlc0N0cmwgd2lsbCB1cGRhdGUgaXQncyBsaXN0IG9mIHNpdGVIV01zXHJcbiAgICAgICAgdmFyIGFsbFNpdGVIV01zID0gW107XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0QWxsU2l0ZUhXTXM6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBhbGxTaXRlSFdNcztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2V0QWxsU2l0ZUhXTXM6IGZ1bmN0aW9uIChzaCkge1xyXG4gICAgICAgICAgICAgICAgYWxsU2l0ZUhXTXMgPSBzaDsgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgSFdNX1NlcnZpY2VcclxuICAgIC8vI3JlZ2lvbiBIV01fUVVBTElUWVxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnSFdNX1FVQUxJVFknLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL0hXTVF1YWxpdGllcy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgSFdNX1FVQUxJVFlcclxuICAgIC8vI3JlZ2lvbiBIV01fVFlQRVxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnSFdNX1RZUEUnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL0hXTVR5cGVzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBIV01fVFlQRVxyXG4gICAgLy8jcmVnaW9uIElOU1RSVU1FTlRcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0lOU1RSVU1FTlQnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL0luc3RydW1lbnRzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRzdGF0dXNJbnN0cnVtZW50czogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlLCB1cmw6IHJvb3RVUkwgKyAnL0luc3RydW1lbnRzLmpzb24vJyB9LCAvL0N1cnJlbnRTdGF0dXM6IDEsIEV2ZW50OiAkc2NvcGUuZXZJRCBcclxuICAgICAgICAgICAgICAgIGdldEZ1bGxJbnN0cnVtZW50OiB7IG1ldGhvZDogJ0dFVCcsIHVybDogcm9vdFVSTCArICcvSW5zdHJ1bWVudHMvOmlkL0Z1bGxJbnN0cnVtZW50Lmpzb24nIH0sIC8vZ2V0cyBpbnN0cnVtZW50IGFuZCBpdCdzIHN0YXRzIHRvZ2V0aGVyXHJcbiAgICAgICAgICAgICAgICBnZXRJbnN0cnVtZW50U3RhdHVzOiB7IG1ldGhvZDogJ0dFVCcsIHVybDogcm9vdFVSTCArICcvSW5zdHJ1bWVudHMvOmlkL0luc3RydW1lbnRTdGF0dXMuanNvbicgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIElOU1RSVU1FTlRcclxuICAgIC8vI3JlZ2lvbiBJbnN0cnVtZW50X1NlcnZpY2VcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0luc3RydW1lbnRfU2VydmljZScsIFtmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgLy93aGVuIGh3bSBpcyBjcmVhdGVkIG9yIGRlbGV0ZWQsIHRoaXMgZ2V0cyB1cGRhdGVkIHNvIHRoYXQgZmlsZXNDdHJsIHdpbGwgdXBkYXRlIGl0J3MgbGlzdCBvZiBzaXRlSFdNc1xyXG4gICAgICAgIHZhciBhbGxTaXRlU2Vuc29ycyA9IFtdO1xyXG4gICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgIGdldEFsbFNpdGVTZW5zb3JzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxsU2l0ZVNlbnNvcnM7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHNldEFsbFNpdGVTZW5zb3JzOiBmdW5jdGlvbiAoc3MpIHtcclxuICAgICAgICAgICAgICAgIGFsbFNpdGVTZW5zb3JzID0gc3M7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIEluc3RydW1lbnRfU2VydmljZVxyXG4gICAgLy8jcmVnaW9uIElOU1RSVU1FTlRfU1RBVFVTXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdJTlNUUlVNRU5UX1NUQVRVUycsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvSW5zdHJ1bWVudFN0YXR1cy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LCAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgSU5TVFJVTUVOVFxyXG4gICAgLy8jcmVnaW9uIElOU1RfQ09MTF9DT05ESVRJT05cclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0lOU1RfQ09MTF9DT05ESVRJT04nLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL0luc3RyQ29sbGVjdENvbmRpdGlvbnMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIElOU1RfQ09MTF9DT05ESVRJT05cclxuICAgIC8vI3JlZ2lvbiBMQU5ET1dORVJfQ09OVEFDVFxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnTEFORE9XTkVSX0NPTlRBQ1QnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL0xhbmRPd25lcnMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIExBTkRPV05FUl9DT05UQUNUXHJcbiAgICAvLyNyZWdpb24gTWFwX1NpdGVcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ01hcF9TaXRlJywgWydTSVRFJywgJyRyb290U2NvcGUnLCAnJGNvb2tpZXMnLCBmdW5jdGlvbiAoU0lURSwgJHJvb3RTY29wZSwkY29va2llcykge1xyXG4gICAgICAgIHZhciBNYXBTaXRlUGFydHMgPSBbXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0TWFwU2l0ZVBhcnRzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gTWFwU2l0ZVBhcnRzO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXRNYXBTaXRlUGFydHM6IGZ1bmN0aW9uIChzaXRlSWQpIHtcclxuICAgICAgICAgICAgICAgIE1hcFNpdGVQYXJ0cyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgU0lURS5xdWVyeSh7IGlkOiBzaXRlSWQgfSkuJHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBNYXBTaXRlUGFydHMucHVzaChyZXNwb25zZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgU0lURS5nZXRTaXRlUGVha3MoeyBpZDogc2l0ZUlkIH0pLiRwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHBSZXNwb25zZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBNYXBTaXRlUGFydHMucHVzaChwUmVzcG9uc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ21hcFNpdGVDbGlja1Jlc3VsdHMnLCBNYXBTaXRlUGFydHMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pOyAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgTWFwX1NpdGVcclxuICAgIC8vI3JlZ2lvbiBNYXBfZmlsdGVyXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdNYXBfRmlsdGVyJywgWyAnJHJvb3RTY29wZScsIGZ1bmN0aW9uICgkcm9vdFNjb3BlKSB7XHJcbiAgICAgICAgdmFyIGZpbHRlcmVkU2l0ZXMgPSBbXTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgLy8gZ2V0RmlsdGVyZWRTaXRlczogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAvLyAgICAgcmV0dXJuIGZpbHRlcmVkU2l0ZXM7XHJcbiAgICAgICAgICAgIC8vIH0sXHJcbiAgICAgICAgICAgIHNldEZpbHRlcmVkU2l0ZXM6IGZ1bmN0aW9uIChzaXRlc0FycmF5KSB7XHJcbiAgICAgICAgICAgICAgICBmaWx0ZXJlZFNpdGVzID0gc2l0ZXNBcnJheTtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnZmlsdGVyU2l0ZXNDbGljaycsIGZpbHRlcmVkU2l0ZXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBNYXBfRmlsdGVyXHJcbiAgICAvLyNyZWdpb24gTUFSS0VSXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdNQVJLRVInLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL01hcmtlcnMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIE1BUktFUlxyXG4gICAgLy8jcmVnaW9uIE1FTUJFUlxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnTUVNQkVSJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9NZW1iZXJzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7IH0sICAgXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0Um9sZU1lbWJlcnM6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgdXJsOiByb290VVJMICsgJy9Sb2xlcy86cm9sZUlkL01lbWJlcnMuanNvbicgfSxcclxuICAgICAgICAgICAgICAgIGdldEV2ZW50UGVvcGxlOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUsIHVybDogcm9vdFVSTCArICcvRXZlbnRzLzpFdmVudGlkL01lbWJlcnMuanNvbicgfSxcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgY2hhbmdlUFc6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogZmFsc2UsIHVybDogcm9vdFVSTCArICcvTWVtYmVycy5qc29uJyB9LFxyXG4gICAgICAgICAgICAgICAgYWRkTWVtYmVyOiB7bWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UsIHVybDogcm9vdFVSTCArICcvTWVtYmVycy86cGFzcy9hZGRNZW1iZXInfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGVNZW1iZXI6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSx1cmw6IHJvb3RVUkwgKyAnL01lbWJlcnMvOmlkJyB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIE1FTUJFUlxyXG4gICAgLy8jcmVnaW9uIE5FVFdPUktfTkFNRVxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnTkVUV09SS19OQU1FJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9OZXR3b3JrTmFtZXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIE5FVFdPUktfTkFNRVxyXG4gICAgLy8jcmVnaW9uIE5FVFdPUktfVFlQRVxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnTkVUV09SS19UWVBFJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9OZXR3b3JrVHlwZXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIE5FVFdPUktfVFlQRSAgIFxyXG4gICAgLy8jcmVnaW9uIE9CSkVDVElWRV9QT0lOVFxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnT0JKRUNUSVZFX1BPSU5UJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9PYmplY3RpdmVQb2ludHMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRPUEZpbGVzOiB7bWV0aG9kOiAnR0VUJywgaXNBcnJheTp0cnVlLCB1cmw6IHJvb3RVUkwgKyBcIi9PYmplY3RpdmVQb2ludHMvOmlkL0ZpbGVzXCJ9LFxyXG4gICAgICAgICAgICAgICAgZ2V0T1BDb250cm9sczogeyBtZXRob2Q6ICdHRVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IHRydWUsIHVybDogcm9vdFVSTCArIFwiL09iamVjdGl2ZVBvaW50cy86aWQvT1BDb250cm9scy5qc29uXCIgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgT0JKRUNUSVZFX1BPSU5UXHJcbiAgICAvLyNyZWdpb24gT1BfQ09OVFJPTF9JREVOVElGSUVSXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdPUF9DT05UUk9MX0lERU5USUZJRVInLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL09QQ29udHJvbElkZW50aWZpZXJzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBPUF9DT05UUk9MX0lERU5USUZJRVJcclxuICAgIC8vI3JlZ2lvbiBPUF9NRUFTVVJFXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdPUF9NRUFTVVJFJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9PUE1lYXN1cmVtZW50cy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0SW5zdFN0YXRPUE1lYXN1cmVzOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUsIHVybDogcm9vdFVSTCArICcvSW5zdHJ1bWVudFN0YXR1cy86aW5zdHJ1bWVudFN0YXR1c0lkL09QTWVhc3VyZW1lbnRzJyB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0RGF0dW1Mb2NhdGlvbk9QTWVhc3VyZXM6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgdXJsOiByb290VVJMICsgJy9PYmplY3RpdmVQb2ludHMvOm9iamVjdGl2ZVBvaW50SWQvT1BNZWFzdXJlbWVudHMnIH0sXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBPUF9NRUFTVVJFXHJcbiAgICAvLyNyZWdpb24gT1BfUVVBTElUWVxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnT1BfUVVBTElUWScsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvT2JqZWN0aXZlUG9pbnRRdWFsaXRpZXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIE9QX1FVQUxJVFlcclxuICAgIC8vI3JlZ2lvbiBPUF9UWVBFXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdPUF9UWVBFJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9PUFR5cGVzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBPUF9UWVBFXHJcbiAgICAvLyNyZWdpb24gUEVBS1xyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnUEVBSycsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvUGVha1N1bW1hcmllcy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0UGVha1N1bW1hcnlERnM6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgY2FjaGU6IGZhbHNlLCB1cmw6IHJvb3RVUkwgKyAnL1BlYWtTdW1tYXJpZXMvOmlkL0RhdGFGaWxlcy5qc29uJyB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgUEVBS1xyXG4gICAgLy8jcmVnaW9uIFJFUE9SVFxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnUkVQT1JUJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9SZXBvcnRpbmdNZXRyaWNzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldFJlcG9ydEJ5RXZTdDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICBnZXREYWlseVJlcG9ydFRvdHM6IHttZXRob2Q6ICdHRVQnLCB1cmw6IHJvb3RVUkwgKyAnL1JlcG9ydGluZ01ldHJpY3MvRGFpbHlSZXBvcnRUb3RhbHMnfSxcclxuICAgICAgICAgICAgICAgIGdldE1lbWJlclJlcG9ydHM6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgdXJsOiByb290VVJMICsgJy9NZW1iZXJzLzptZW1iZXJJZC9SZXBvcnRzLmpzb24nIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRGaWx0ZXJlZFJlcG9ydHM6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgdXJsOiByb290VVJMICsgJy9SZXBvcnRpbmdNZXRyaWNzL0ZpbHRlcmVkUmVwb3J0cy5qc29uJyB9LFxyXG4gICAgICAgICAgICAgICAgZ2V0UmVwb3J0d2l0aENvbnRhY3RzOiB7bWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgdXJsOiByb290VVJMICsgJy9SZXBvcnRSZXNvdXJjZS9GaWx0ZXJlZFJlcG9ydE1vZGVsLmpzb24nfSxcclxuICAgICAgICAgICAgICAgIGdldFJlcG9ydHNDU1Y6IHttZXRob2Q6ICdHRVQnLCB1cmw6IHJvb3RVUkwgKyAnL1JlcG9ydGluZ01ldHJpY3MvRmlsdGVyZWRSZXBvcnRzLmNzdid9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBhZGRSZXBvcnRDb250YWN0OiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlLCBwYXJhbXM6IHsgUmVwb3J0SWQ6ICdAcmVwb3J0SWQnLCBDb250YWN0VHlwZUlkOiAnQGNvbnRhY3RUeXBlSWQnIH0sIHVybDogcm9vdFVSTCArICcvUmVwb3J0aW5nTWV0cmljcy86cmVwb3J0SWQvQWRkQ29udGFjdFR5cGUvOmNvbnRhY3RUeXBlSWQnIH0sIC8vY29udGFjdCBlbnRpdHkgaW4gYm9keSBcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgUkVQT1JUXHJcbiAgICAvLyNyZWdpb24gUk9MRVxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnUk9MRScsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvUm9sZXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgUk9MRVxyXG4gICAgLy8jcmVnaW9uIFNFTlNPUl9CUkFORFxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnU0VOU09SX0JSQU5EJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9TZW5zb3JCcmFuZHMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIFNFTlNPUl9CUkFORFxyXG4gICAgLy8jcmVnaW9uIFNFTlNPUl9ERVBMT1lNRU5UIC0tLSBubyBsb25nZXIgbmVlZGVkIHNpbmNlIFNFTlNPUl9UWVBFIHJldHVybnMgYXMgdGhpcyByZWxhdGlvbnNoaXAgbm93XHJcbiAgICAvL1NUTlJlc291cmNlLmZhY3RvcnkoJ1NFTlNPUl9ERVBMT1lNRU5UJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAvLyAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL1NlbnNvckRlcGxveW1lbnRzLzppZC5qc29uJyxcclxuICAgIC8vICAgICAgICB7fSwge1xyXG4gICAgLy8gICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAvLyAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sICAgICAgICAgICAgICAgXHJcbiAgICAvLyAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAvLyAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgIC8vICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgLy8gICAgICAgIH0pO1xyXG4gICAgLy99XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgU0VOU09SX0RFUExPWU1FTlRcclxuICAgIC8vI3JlZ2lvbiBTRU5TT1JfVFlQRVxyXG4gICAgU1ROUmVzb3VyY2UuZmFjdG9yeSgnU0VOU09SX1RZUEUnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL1NlbnNvclR5cGVzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sIC8vdGhpcyByZXR1cm5zIHNlbnNvcnR5cGVzIHdpdGggbGlzdCBvZiBkZXBsb3ltZW50dHlwZXMgZm9yIGVhY2ggb25lXHJcbiAgICAgICAgICAgICAgICBnZXRTZW5zb3JEZXBsb3ltZW50VHlwZXM6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgdXJsOiByb290VVJMICsgJy9TZW5zb3JUeXBlcy86aWQvRGVwbG95bWVudFR5cGVzLmpzb24nIH0sICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgYWRkU2Vuc29yRGVwbG95bWVudFR5cGU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogdHJ1ZSwgcGFyYW1zOiB7IHNlbnNvclR5cGVJZDogJ0BzZW5zb3JUeXBlSWQnLCBEZXBsb3ltZW50VHlwZUlkOiAnQGRlcGxveW1lbnRUeXBlSWQnIH0sIHVybDogcm9vdFVSTCArICcvU2Vuc29yVHlwZXMvOnNlbnNvclR5cGVJZC9hZGREZXBsb3ltZW50VHlwZScgfSwvLz9EZXBsb3ltZW50VHlwZUlkPXtkZXBsb3ltZW50VHlwZUlkfVwiXHJcbiAgICAgICAgICAgICAgICByZW1vdmVTZW5zb3JEZXBsb3ltZW50VHlwZTogeyBtZXRob2Q6ICdQT1NUJywgaXNBcnJheTogZmFsc2UsIHBhcmFtczogeyBzZW5zb3JUeXBlSWQ6ICdAc2Vuc29yVHlwZUlkJywgRGVwbG95bWVudFR5cGVJZDogJ0BkZXBsb3ltZW50VHlwZUlkJyB9LCB1cmw6IHJvb3RVUkwgKyAnL1NlbnNvclR5cGVzLzpzZW5zb3JUeXBlSWQvcmVtb3ZlRGVwbG95bWVudFR5cGUnIH0sLy8/RGVwbG95bWVudFR5cGVJZD17ZGVwbG95bWVudFR5cGVJZH1cIlxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgU0VOU09SX1RZUEVcclxuICAgIC8vI3JlZ2lvbiBTSVRFXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdTSVRFJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9TaXRlcy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRQcm94aW1pdHlTaXRlczoge21ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUsIHBhcmFtczogeyBMYXRpdHVkZTogJ0BsYXRpdHVkZScsIExvbmdpdHVkZTogJ0Bsb25naXR1ZGUnLCBCdWZmZXI6ICdAYnVmZmVyJyB9fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRTZWFyY2hlZFNpdGU6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogZmFsc2UsIHVybDogcm9vdFVSTCArICcvU2l0ZXMvU2VhcmNoJyB9LCAvLz9ieVNpdGVObz17c2l0ZU5vfSZieVNpdGVOYW1lPXtzaXRlTmFtZX0mYnlTaXRlSWQ9e3NpdGVJZH0gKG9ubHkgZ29pbmcgdG8gcG9wdWxhdGUgMSBvZiB0aGVzZSBwYXJhbXNcclxuICAgICAgICAgICAgICAgIGdldEZpbHRlcmVkU2l0ZXM6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgdXJsOiByb290VVJMICsgJy9TaXRlcy9GaWx0ZXJlZFNpdGVzLmpzb24nIH0sIC8vYWNjZXB0cyBvcHRpb25hbCBwYXJhbWV0ZXJzOiBFdmVudD17ZXZlbnRJZH0mU3RhdGU9e3N0YXRlTmFtZXN9JlNlbnNvclR5cGU9e3NlbnNvclR5cGVJZH0mTmV0d29ya05hbWU9e25ldHdvcmtOYW1lSWR9Jk9QRGVmaW5lZD17b3BEZWZpbmVkfSZIV01Pbmx5PXtod21Pbmx5U2l0ZXN9JiZIV01TdXJ2ZXllZD17c3VydmV5ZWRIV01zfVxyXG4gICAgICAgICAgICAgICAgLy9sYW5kb3duZXJcclxuICAgICAgICAgICAgICAgIGdldFNpdGVMYW5kT3duZXI6IHsgbWV0aG9kOiAnR0VUJywgdXJsOiByb290VVJMICsgJy9TaXRlcy86aWQvTGFuZE93bmVyLmpzb24nIH0sXHJcbiAgICAgICAgICAgICAgICAvL1NpdGUgTmV0d29ya1R5cGVzXHJcbiAgICAgICAgICAgICAgICBnZXRTaXRlTmV0d29ya1R5cGVzOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUsIHVybDogcm9vdFVSTCArICcvc2l0ZXMvOmlkL25ldHdvcmtUeXBlcy5qc29uJyB9LFxyXG4gICAgICAgICAgICAgICAgcG9zdFNpdGVOZXR3b3JrVHlwZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBwYXJhbXM6IHsgc2l0ZUlkOiAnQHNpdGVJZCcsIE5ldHdvcmtUeXBlSWQ6ICdAbmV0d29ya1R5cGVJZCcgfSwgaXNBcnJheTogdHJ1ZSwgdXJsOiByb290VVJMICsgJy9zaXRlcy86c2l0ZUlkL0FkZE5ldHdvcmtUeXBlJyB9LCAvLz9OZXR3b3JrVHlwZUlkPSB7bmV0d29ya1R5cGVJZH1cclxuICAgICAgICAgICAgICAgIGRlbGV0ZVNpdGVOZXR3b3JrVHlwZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlLCB1cmw6IHJvb3RVUkwgKyAnL3NpdGVzLzpzaXRlSWQvcmVtb3ZlTmV0d29ya1R5cGU/TmV0d29ya1R5cGVJZDpuZXR3b3JrVHlwZUlkJyB9LFxyXG4gICAgICAgICAgICAgICAgLy9TaXRlIE5ldHdvcmsgTmFtZXNcclxuICAgICAgICAgICAgICAgIGdldFNpdGVOZXR3b3JrTmFtZXM6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgdXJsOiByb290VVJMICsgJy9zaXRlcy86aWQvbmV0d29ya05hbWVzLmpzb24nIH0sXHJcbiAgICAgICAgICAgICAgICBwb3N0U2l0ZU5ldHdvcmtOYW1lOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIHBhcmFtczogeyBzaXRlSWQ6ICdAc2l0ZUlkJywgTmV0d29ya05hbWVJZDogJ0BuZXR3b3JrTmFtZUlkJyB9LCBpc0FycmF5OiB0cnVlLCB1cmw6IHJvb3RVUkwgKyAnL3NpdGVzLzpzaXRlSWQvQWRkTmV0d29ya05hbWUnIH0sIC8vP05ldHdvcmtOYW1lSWQ9IHtuZXR3b3JrTmFtZUlkfVxyXG4gICAgICAgICAgICAgICAgZGVsZXRlU2l0ZU5ldHdvcmtOYW1lOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UsIHVybDogcm9vdFVSTCArICcvc2l0ZXMvOnNpdGVJZC9yZW1vdmVOZXR3b3JrTmFtZT9OZXR3b3JrTmFtZUlkOm5ldHdvcmtOYW1lSWQnfSxcclxuICAgICAgICAgICAgICAgIC8vU2l0ZSBIb3VzaW5nc1xyXG4gICAgICAgICAgICAgICAgZ2V0U2l0ZUhvdXNpbmdzOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUsIHVybDogcm9vdFVSTCArICcvc2l0ZXMvOmlkL1NpdGVIb3VzaW5ncy5qc29uJyB9LFxyXG4gICAgICAgICAgICAgIC8vICBwb3N0U2l0ZUhvdXNpbmc6IHttZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OnRydWUsIHVybDogcm9vdFVSTCArICcvc2l0ZS86aWQvQWRkU2l0ZVNpdGVIb3VzaW5nLmpzb24nfSxcclxuICAgICAgICAgICAgICAgIC8vU2l0ZSBQYXJ0c1xyXG4gICAgICAgICAgICAgICAgZ2V0U2l0ZU9QczogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlLCB1cmw6IHJvb3RVUkwgKyAnL1NpdGVzLzppZC9PYmplY3RpdmVQb2ludHMuanNvbicgfSxcclxuICAgICAgICAgICAgICAgIGdldFNpdGVTZW5zb3JzOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUsIHVybDogcm9vdFVSTCArICcvU2l0ZXMvOmlkL1NpdGVGdWxsSW5zdHJ1bWVudExpc3QuanNvbicgfSwgLy9hbGwgaW5zdHJ1bWVudHMgYW5kIHRoZWlyIHN0YXRzIHRvZ2V0aGVyXHJcbiAgICAgICAgICAgICAgICBnZXRTaXRlSFdNczogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlLCB1cmw6IHJvb3RVUkwgKyAnL1NpdGVzLzppZC9IV01zLmpzb24nIH0sXHJcbiAgICAgICAgICAgICAgICBnZXRTaXRlRmlsZXM6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSwgdXJsOiByb290VVJMICsgJy9TaXRlcy86aWQvRmlsZXMuanNvbicgfSxcclxuICAgICAgICAgICAgICAgIGdldFNpdGVQZWFrczogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlLCB1cmw6IHJvb3RVUkwgKyAnL1NpdGVzLzppZC9QZWFrU3VtbWFyeVZpZXcuanNvbicgfSxcclxuICAgICAgICAgICAgICAgIC8vanVzdCB0aGUgU2l0ZVxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgU0lURVxyXG4gICAgLy8jcmVnaW9uIFNpdGVfRmlsZXNcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ1NpdGVfRmlsZXMnLCBbJyRjb29raWVzJywgJyRyb290U2NvcGUnLCBmdW5jdGlvbiAoJGNvb2tpZXMsICRyb290U2NvcGUpIHtcclxuICAgICAgICB2YXIgYWxsU2l0ZUZpbGVzID0gW107XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgZ2V0QWxsU2l0ZUZpbGVzOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gYWxsU2l0ZUZpbGVzO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBzZXRBbGxTaXRlRmlsZXM6IGZ1bmN0aW9uIChzZil7XHJcbiAgICAgICAgICAgICAgICBhbGxTaXRlRmlsZXMgPSBzZjtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuJGJyb2FkY2FzdCgnc2l0ZUZpbGVzVXBkYXRlZCcsIGFsbFNpdGVGaWxlcyk7ICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBTaXRlX0ZpbGVzXHJcbiAgICAvLyNyZWdpb24gU1RBVEVcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ1NUQVRFJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9TdGF0ZXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIFNUQVRFXHJcbiAgICAvLyNyZWdpb24gU0lURV9IT1VTSU5HXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdTSVRFX0hPVVNJTkcnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL1NpdGVIb3VzaW5ncy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgU0lURV9IT1VTSU5HXHJcbiAgICAvLyNyZWdpb24gU1RBVFVTX1RZUEVcclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ1NUQVRVU19UWVBFJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9TdGF0dXNUeXBlcy86aWQuanNvbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBxdWVyeToge30sXHJcbiAgICAgICAgICAgICAgICBnZXRBbGw6IHsgbWV0aG9kOiAnR0VUJywgaXNBcnJheTogdHJ1ZSB9LFxyXG4gICAgICAgICAgICAgICAgdXBkYXRlOiB7IG1ldGhvZDogJ1BVVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIHNhdmU6IHsgbWV0aG9kOiAnUE9TVCcsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfSxcclxuICAgICAgICAgICAgICAgIGRlbGV0ZTogeyBtZXRob2Q6ICdERUxFVEUnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgU1RBVFVTX1RZUEUgXHJcbiAgICAvLyNyZWdpb24gU09VUkNFXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdTT1VSQ0UnLCBbJyRyZXNvdXJjZScsIGZ1bmN0aW9uICgkcmVzb3VyY2UpIHtcclxuICAgICAgICByZXR1cm4gJHJlc291cmNlKHJvb3RVUkwgKyAnL1NvdXJjZXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIFNPVVJDRVxyXG4gICAgLy8jcmVnaW9uIFZFUlRJQ0FMX0NPTExfTUVUSE9EXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdWRVJUSUNBTF9DT0xMX01FVEhPRCcsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvVmVydGljYWxNZXRob2RzLzppZC5qc29uJyxcclxuICAgICAgICAgICAge30sIHtcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiB7fSxcclxuICAgICAgICAgICAgICAgIGdldEFsbDogeyBtZXRob2Q6ICdHRVQnLCBpc0FycmF5OiB0cnVlIH0sXHJcbiAgICAgICAgICAgICAgICB1cGRhdGU6IHsgbWV0aG9kOiAnUFVUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgc2F2ZTogeyBtZXRob2Q6ICdQT1NUJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9LFxyXG4gICAgICAgICAgICAgICAgZGVsZXRlOiB7IG1ldGhvZDogJ0RFTEVURScsIGNhY2hlOiBmYWxzZSwgaXNBcnJheTogZmFsc2UgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgIH1dKTtcclxuICAgIC8vI2VuZHJlZ2lvbiBvZiBWRVJUSUNBTF9DT0xMX01FVEhPRFxyXG4gICAgLy8jcmVnaW9uIFZFUlRJQ0FMX0RBVFVNXHJcbiAgICBTVE5SZXNvdXJjZS5mYWN0b3J5KCdWRVJUSUNBTF9EQVRVTScsIFsnJHJlc291cmNlJywgZnVuY3Rpb24gKCRyZXNvdXJjZSkge1xyXG4gICAgICAgIHJldHVybiAkcmVzb3VyY2Uocm9vdFVSTCArICcvVmVydGljYWxEYXR1bXMvOmlkLmpzb24nLFxyXG4gICAgICAgICAgICB7fSwge1xyXG4gICAgICAgICAgICAgICAgcXVlcnk6IHt9LFxyXG4gICAgICAgICAgICAgICAgZ2V0QWxsOiB7IG1ldGhvZDogJ0dFVCcsIGlzQXJyYXk6IHRydWUgfSxcclxuICAgICAgICAgICAgICAgIHVwZGF0ZTogeyBtZXRob2Q6ICdQVVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBzYXZlOiB7IG1ldGhvZDogJ1BPU1QnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH0sXHJcbiAgICAgICAgICAgICAgICBkZWxldGU6IHsgbWV0aG9kOiAnREVMRVRFJywgY2FjaGU6IGZhbHNlLCBpc0FycmF5OiBmYWxzZSB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgfV0pO1xyXG4gICAgLy8jZW5kcmVnaW9uIG9mIFZFUlRJQ0FMX0RBVFVNXHJcbiAgICAvLyNyZWdpb24gTG9naW5cclxuICAgIFNUTlJlc291cmNlLmZhY3RvcnkoJ0xvZ2luJywgWyckcmVzb3VyY2UnLCBmdW5jdGlvbiAoJHJlc291cmNlKSB7XHJcbiAgICAgICAgcmV0dXJuICRyZXNvdXJjZShyb290VVJMICsgJy9sb2dpbicsXHJcbiAgICAgICAgICAgIHt9LCB7XHJcbiAgICAgICAgICAgICAgICBsb2dpbjogeyBtZXRob2Q6ICdHRVQnLCBjYWNoZTogZmFsc2UsIGlzQXJyYXk6IGZhbHNlIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gb2YgTG9naW5cclxuXHJcbn0pKCk7IiwiKGZ1bmN0aW9uICgpIHtcclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgU1ROQnVzaW5lc3NTZXJ2aWNlcyA9IGFuZ3VsYXIubW9kdWxlKCdTVE5CdXNpbmVzc1NlcnZpY2VzJywgWyduZ0Nvb2tpZXMnXSk7XHJcblxyXG4gICAgLy8jcmVnaW9uIFNFVFRFUlNcclxuICAgIC8vc2V0IHRoZSBjcmVkZW50aWFscyAoZW5jb2RlZFRva2VuLCB1c2VybmFtZSwgdXNlcnNOYW1lLCB1c2Vyc1JvbGUpICB3aGVuIHVzZXIgbG9ncyBpblxyXG4gICAgU1ROQnVzaW5lc3NTZXJ2aWNlcy5mYWN0b3J5KCdzZXRDcmVkcycsIFsnJGNvb2tpZXMnLCBmdW5jdGlvbiAoJGNvb2tpZXMpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHVuLCBwdywgdXNlck5hbWUsIHVzZXJSb2xlLCB1c2VySUQpIHtcclxuICAgICAgICAgICAgdmFyIHRva2VuID0gdW4uY29uY2F0KFwiOlwiLCBwdyk7XHJcbiAgICAgICAgICAgICRjb29raWVzLlNUTkNyZWRzID0gdG9rZW47XHJcblxyXG4gICAgICAgICAgICAkY29va2llcy5TVE5Vc2VybmFtZSA9IHVuO1xyXG4gICAgICAgICAgICAkY29va2llcy51c2Vyc05hbWUgPSB1c2VyTmFtZTtcclxuICAgICAgICAgICAgJGNvb2tpZXMubUlEID0gdXNlcklEO1xyXG4gICAgICAgICAgICB2YXIgcm9sZU5hbWU7XHJcbiAgICAgICAgICAgIHN3aXRjaCh1c2VyUm9sZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAxOlxyXG4gICAgICAgICAgICAgICAgICAgIHJvbGVOYW1lID0gXCJBZG1pblwiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAyOlxyXG4gICAgICAgICAgICAgICAgICAgIHJvbGVOYW1lID0gXCJNYW5hZ2VyXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDM6XHJcbiAgICAgICAgICAgICAgICAgICAgcm9sZU5hbWUgPSBcIkZpZWxkXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIDQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcm9sZU5hbWUgPSBcIlB1YmxpY1wiO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByb2xlTmFtZSA9IFwiQ2l0aXplbk1hbmFnZXJcIjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAkY29va2llcy51c2Vyc1JvbGUgPSByb2xlTmFtZTtcclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xyXG5cclxuICAgIC8vc2V0IHRoZSBldmVudCB0aGV5IGNob29zZSBmcm9tIGhvbWUgcGFnZSwgbG9va2VkIGZvciB0aHJvdWdoIG91dCBhcHBcclxuICAgIFNUTkJ1c2luZXNzU2VydmljZXMuZmFjdG9yeSgnc2V0U2Vzc2lvbkV2ZW50JywgWyckY29va2llcycsIGZ1bmN0aW9uICgkY29va2llcykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoZXZJZCwgZXZOYW1lKSB7XHJcbiAgICAgICAgICAgICRjb29raWVzLlNlc3Npb25FdmVudElEID0gZXZJZDtcclxuICAgICAgICAgICAgJGNvb2tpZXMuU2Vzc2lvbkV2ZW50TmFtZSA9IGV2TmFtZTtcclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xyXG5cclxuICAgIC8vc2V0IHRoZSB0ZWFtIHRoZXkgY2hvb3NlIGZyb20gaG9tZSBwYWdlLCBsb29rZWQgZm9yIHRocm91Z2ggb3V0IGFwcFxyXG4gICAgU1ROQnVzaW5lc3NTZXJ2aWNlcy5mYWN0b3J5KCdzZXRTZXNzaW9uVGVhbScsIFsnJGNvb2tpZXMnLCBmdW5jdGlvbiAoJGNvb2tpZXMpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRJZCwgdE5hbWUpIHtcclxuICAgICAgICAgICAgJGNvb2tpZXMuU2Vzc2lvblRlYUlEID0gdElkO1xyXG4gICAgICAgICAgICAkY29va2llcy5TZXNzaW9uVGVhbU5hbWUgPSB0TmFtZTtcclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xyXG5cclxuICAgIFNUTkJ1c2luZXNzU2VydmljZXMuZmFjdG9yeSgnc2V0TG9nZ2VkSW4nLCBbJyRjb29raWVzJywgZnVuY3Rpb24gKCRjb29raWVzKSB7XHJcbiAgICAgICAgdmFyIGxvZ2dlZEluID0gZmFsc2U7XHJcbiAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgaXNMb2dnZWRJbjogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGxvZ2dlZEluO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBjaGFuZ2VMb2dnZWRJbjogZnVuY3Rpb24gKFllc09yTm8pIHtcclxuICAgICAgICAgICAgICAgIGxvZ2dlZEluID0gWWVzT3JObztcclxuXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xyXG5cclxuICAgIC8vI2VuZHJlZ2lvbiBTRVRURVJTXHJcblxyXG4gICAgLy8jcmVnaW9uIEdFVFRFUlNcclxuICAgIC8vY2hlY2sgdGhlIHN0YXR1cyBvZiB1c2VyJ3MgY3JlZGVudGlhbHMuIGlmIHJldHVybiBmYWxzZSA9IHJlZGlyZWN0IHRvIGxvZ2luIFxyXG4gICAgU1ROQnVzaW5lc3NTZXJ2aWNlcy5mYWN0b3J5KCdjaGVja0NyZWRzJywgWyckY29va2llcycsIGZ1bmN0aW9uICgkY29va2llcykge1xyXG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZhciByZXR1cm5WYWwgPSBmYWxzZTtcclxuICAgICAgICAgICAgdmFyIFNUTkNyZWRzID0gJGNvb2tpZXMuU1ROQ3JlZHM7XHJcblxyXG4gICAgICAgICAgICBpZiAoU1ROQ3JlZHMgIT09IHVuZGVmaW5lZCAmJiBTVE5DcmVkcyAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsID0gdHJ1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsO1xyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XHJcblxyXG4gICAgLy9yZXRyaWV2ZSB1c2VyJ3MgJ3Rva2VuJyBmcm9tIGNvb2tpZVxyXG4gICAgU1ROQnVzaW5lc3NTZXJ2aWNlcy5mYWN0b3J5KCdnZXRDcmVkcycsIFsnJGNvb2tpZXMnLCBmdW5jdGlvbiAoJGNvb2tpZXMpIHtcclxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgcmV0dXJuVmFsID0gXCJcIjtcclxuICAgICAgICAgICAgdmFyIFNUTkNyZWRzID0gJGNvb2tpZXMuU1ROQ3JlZHM7XHJcblxyXG4gICAgICAgICAgICBpZiAoU1ROQ3JlZHMgIT09IHVuZGVmaW5lZCAmJiBTVE5DcmVkcyAhPT0gXCJcIikge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuVmFsID0gYnRvYShTVE5DcmVkcyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbDtcclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xyXG5cclxuICAgIC8vcmV0cmlldmUgdXNlciBmcm9tIGNvb2tpZVxyXG4gICAgU1ROQnVzaW5lc3NTZXJ2aWNlcy5mYWN0b3J5KCdnZXRVc2Vyc05BTUUnLCBbJyRjb29raWVzJywgZnVuY3Rpb24gKCRjb29raWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJldHVyblZhbCA9IFwiXCI7XHJcbiAgICAgICAgICAgIHZhciB1c2VzTmFtZSA9ICRjb29raWVzLnVzZXJzTmFtZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh1c2VzTmFtZSAhPT0gdW5kZWZpbmVkICYmIHVzZXNOYW1lICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5WYWwgPSB1c2VzTmFtZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsO1xyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XHJcblxyXG4gICAgLy9yZXRyaWV2ZSB1c2VycyBJRCBmcm9tIGNvb2tpZVxyXG4gICAgU1ROQnVzaW5lc3NTZXJ2aWNlcy5mYWN0b3J5KCdnZXRVc2VySUQnLCBbJyRjb29raWVzJywgZnVuY3Rpb24gKCRjb29raWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJldHVyblZhbCA9IFwiXCI7XHJcbiAgICAgICAgICAgIHZhciB1c2VySUQgPSAkY29va2llcy5tSUQ7XHJcblxyXG4gICAgICAgICAgICBpZiAodXNlcklEICE9PSB1bmRlZmluZWQgJiYgdXNlcklEICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5WYWwgPSB1c2VySUQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHJldHVyblZhbDtcclxuICAgICAgICB9O1xyXG4gICAgfV0pO1xyXG5cclxuICAgIC8vZ2V0IHRoZSB1c2VybmFtZSB0byB1c2UgdGhyb3VnaG91dCB0aGUgYXBwbGljYXRpb25cclxuICAgIFNUTkJ1c2luZXNzU2VydmljZXMuZmFjdG9yeSgnZ2V0VXNlcm5hbWUnLCBbJyRjb29raWVzJywgZnVuY3Rpb24gKCRjb29raWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJldHVyblZhbCA9IFwiXCI7XHJcbiAgICAgICAgICAgIHZhciBTVE5Vc2VybmFtZSA9ICRjb29raWVzLlNUTlVzZXJuYW1lO1xyXG5cclxuICAgICAgICAgICAgaWYgKFNUTlVzZXJuYW1lICE9PSB1bmRlZmluZWQgJiYgU1ROVXNlcm5hbWUgIT09IFwiXCIpIHtcclxuICAgICAgICAgICAgICAgIHJldHVyblZhbCA9IFNUTlVzZXJuYW1lO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXR1cm5WYWw7XHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcclxuXHJcbiAgICAvL2dldCB0aGUgUm9sZSB0byB1c2UgdGhyb3VnaG91dCB0aGUgYXBwbGljYXRpb25cclxuICAgIFNUTkJ1c2luZXNzU2VydmljZXMuZmFjdG9yeSgnZ2V0VXNlclJvbGUnLCBbJyRjb29raWVzJywgZnVuY3Rpb24gKCRjb29raWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIHJldHVyblZhbCA9IFwiXCI7XHJcbiAgICAgICAgICAgIHZhciB1c2VyUm9sZSA9ICRjb29raWVzLnVzZXJzUm9sZTtcclxuXHJcbiAgICAgICAgICAgIGlmICh1c2VyUm9sZSAhPT0gdW5kZWZpbmVkICYmIHVzZXJSb2xlICE9PSBcIlwiKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm5WYWwgPSB1c2VyUm9sZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmV0dXJuVmFsO1xyXG4gICAgICAgIH07XHJcbiAgICB9XSk7XHJcbiAgICAvLyNlbmRyZWdpb24gR0VUVEVSU1xyXG5cclxuICAgIC8vREVMRVRFLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXHJcbiAgICAvL2RlbGV0ZSB0aGUgY3JlZGVudGlhbHNcclxuICAgIFNUTkJ1c2luZXNzU2VydmljZXMuZmFjdG9yeSgnZGVsZXRlQ3JlZHMnLCBbJyRjb29raWVzJywgZnVuY3Rpb24gKCRjb29raWVzKSB7XHJcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgJGNvb2tpZXMuU1ROQ3JlZHMgPSBcIlwiO1xyXG4gICAgICAgICAgICAkY29va2llcy5TVE5Vc2VybmFtZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICRjb29raWVzLnVzZXJzTmFtZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICRjb29raWVzLnVzZXJzUm9sZSA9IFwiXCI7XHJcbiAgICAgICAgfTtcclxuICAgIH1dKTtcclxufSkoKTsiLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4gICAgdmFyIE1vZGFsQ29udHJvbGxlcnMgPSBhbmd1bGFyLm1vZHVsZSgnTW9kYWxDb250cm9sbGVycycpO1xyXG5cclxuICAgIC8vcG9wdXAgY29uZmlybSBib3hcclxuICAgIE1vZGFsQ29udHJvbGxlcnMuY29udHJvbGxlcignQ29uZmlybU1vZGFsQ3RybCcsIFsnJHNjb3BlJywgJyR1aWJNb2RhbEluc3RhbmNlJywgJ25hbWVUb1JlbW92ZScsICd3aGF0JywgXHJcbiAgICAgICAgZnVuY3Rpb24gKCRzY29wZSwgJHVpYk1vZGFsSW5zdGFuY2UsIG5hbWVUb1JlbW92ZSwgd2hhdCkge1xyXG4gICAgICAgICAgICAvLyNyZWdpb24gc3dpdGNoIChsb25nKVxyXG4gICAgICAgICAgICBzd2l0Y2ggKHdoYXQpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJNZW1iZXJcIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLmZuYW1lICsgXCIgXCIgKyBuYW1lVG9SZW1vdmUubG5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiRXZlbnRcIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLmV2ZW50X25hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiQWdlbmN5XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IG5hbWVUb1JlbW92ZS5hZ2VuY3lfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJDb250YWN0IFR5cGVcIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLnR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiRGVwbG95bWVudCBQcmlvcml0eVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uYW1lVG9SbXYgPSBuYW1lVG9SZW1vdmUucHJpb3JpdHlfbmFtZTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJFdmVudCBTdGF0dXNcIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLnN0YXR1cztcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJGaWxlIFR5cGVcIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLmZpbGV0eXBlO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkhvcml6b250YWwgQ29sbGVjdGlvbiBNZXRob2RcIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLmhjb2xsZWN0X21ldGhvZDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJIb3Jpem9udGFsIERhdHVtXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IG5hbWVUb1JlbW92ZS5kYXR1bV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkhvdXNpbmcgVHlwZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uYW1lVG9SbXYgPSBuYW1lVG9SZW1vdmUudHlwZV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkhXTSBRdWFsaXR5XCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IG5hbWVUb1JlbW92ZS5od21fcXVhbGl0eTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJIV00gVHlwZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uYW1lVG9SbXYgPSBuYW1lVG9SZW1vdmUuaHdtX3R5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiSW5zdHJ1bWVudCBDb2xsZWN0aW9uIENvbmRpdGlvblwiOlxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uYW1lVG9SbXYgPSBuYW1lVG9SZW1vdmUuY29uZGl0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIk1hcmtlclwiOlxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uYW1lVG9SbXYgPSBuYW1lVG9SZW1vdmUubWFya2VyMTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJOZXR3b3JrIE5hbWVcIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiT2JqZWN0aXZlIFBvaW50IFF1YWxpdHlcIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLnF1YWxpdHk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiT2JqZWN0aXZlIFBvaW50IFR5cGVcIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLm9wX3R5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiU2Vuc29yIEJyYW5kXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IG5hbWVUb1JlbW92ZS5icmFuZF9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIkRlcGxveW1lbnQgVHlwZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uYW1lVG9SbXYgPSBuYW1lVG9SZW1vdmUubWV0aG9kO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlN0YXR1cyBUeXBlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IG5hbWVUb1JlbW92ZS5zdGF0dXM7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiU2Vuc29yIFR5cGVcIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLnNlbnNvcjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJOZXR3b3JrIFR5cGVcIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLm5ldHdvcmtfdHlwZV9uYW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlZlcnRpY2FsIENvbGxlY3Rpb24gTWV0aG9kXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IG5hbWVUb1JlbW92ZS52Y29sbGVjdF9tZXRob2Q7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiVmVydGljYWwgRGF0dW1cIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLmRhdHVtX2FiYnJldmlhdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJPYmplY3RpdmUgUG9pbnRcIjpcclxuICAgICAgICAgICAgICAgICAgICAkc2NvcGUubmFtZVRvUm12ID0gbmFtZVRvUmVtb3ZlLm5hbWU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiSFdNXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFEYXRlID0gbmV3IERhdGUobmFtZVRvUmVtb3ZlLmZsYWdfZGF0ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHllYXIgPSBhRGF0ZS5nZXRGdWxsWWVhcigpO1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtb250aCA9IGFEYXRlLmdldE1vbnRoKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRheSA9ICgnMCcgKyBhRGF0ZS5nZXREYXRlKCkpLnNsaWNlKC0yKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbW9udGhOYW1lcyA9IFtcIkphblwiLCBcIkZlYlwiLCBcIk1hclwiLCBcIkFwclwiLCBcIk1heVwiLCBcIkp1blwiLCBcIkp1bFwiLCBcIkF1Z1wiLCBcIlNlcFwiLCBcIk9jdFwiLCBcIk5vdlwiLCBcIkRlY1wiXTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZGF0ZVdPdGltZSA9IG1vbnRoTmFtZXNbbW9udGhdICsgXCIgXCIgKyBkYXkgKyBcIiwgXCIgKyB5ZWFyO1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IFwiRmxhZ2dlZCBvbjogXCIgKyBkYXRlV090aW1lO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBcIlNlbnNvclwiOlxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uYW1lVG9SbXYgPSBuYW1lVG9SZW1vdmUuZGVwbG95bWVudFR5cGU7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiRmlsZVwiOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBmID0gbmFtZVRvUmVtb3ZlLm5hbWUgIT09IHVuZGVmaW5lZCB8fCBuYW1lVG9SZW1vdmUubmFtZSAhPT0gbnVsbCA/IG5hbWVUb1JlbW92ZS5uYW1lIDogbmFtZVRvUmVtb3ZlLmZpbGVfZGF0ZTtcclxuICAgICAgICAgICAgICAgICAgICBmID0gZiAhPT0gbnVsbCB8fCBmICE9PSB1bmRlZmluZWQgPyBmIDogbmFtZVRvUmVtb3ZlLmZpbGVfaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgJHNjb3BlLm5hbWVUb1JtdiA9IGY7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIFwiUGVha1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICRzY29wZS5uYW1lVG9SbXYgPSBuYW1lVG9SZW1vdmUucGVha19zdW1tYXJ5X2lkO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgICAgICAgICAgJHNjb3BlLndoYXQgPSB3aGF0O1xyXG5cclxuICAgICAgICAgICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgJHVpYk1vZGFsSW5zdGFuY2UuY2xvc2UobmFtZVRvUmVtb3ZlKTtcclxuICAgICAgICAgICAgfTtcclxuXHJcbiAgICAgICAgICAgICRzY29wZS5jYW5jZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkdWliTW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcclxuICAgICAgICAgICAgfTtcclxuICAgICAgICB9XSk7XHJcbn0oKSk7IiwiLyohXHJcbioganF1ZXJ5LmlucHV0bWFzay5idW5kbGUuanNcclxuKiBodHRwOi8vZ2l0aHViLmNvbS9Sb2JpbkhlcmJvdHMvanF1ZXJ5LmlucHV0bWFza1xyXG4qIENvcHlyaWdodCAoYykgMjAxMCAtIDIwMTUgUm9iaW4gSGVyYm90c1xyXG4qIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSAoaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHApXHJcbiogVmVyc2lvbjogMy4yLjQtMTRcclxuKi9cclxuLyoganNoaW50IGlnbm9yZTpzdGFydCAqL1xyXG4hZnVuY3Rpb24gKCQpIHtcclxuICAgIGZ1bmN0aW9uIElucHV0bWFzayhhbGlhcywgb3B0aW9ucykge1xyXG4gICAgICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgSW5wdXRtYXNrID8gKFwib2JqZWN0XCIgPT0gdHlwZW9mIGFsaWFzID8gb3B0aW9ucyA9IGFsaWFzIDogKG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9LFxyXG4gICAgICAgIG9wdGlvbnMuYWxpYXMgPSBhbGlhcyksIHRoaXMuZWwgPSB2b2lkIDAsIHRoaXMub3B0cyA9ICQuZXh0ZW5kKCEwLCB7fSwgdGhpcy5kZWZhdWx0cywgb3B0aW9ucyksXHJcbiAgICAgICAgdGhpcy5ub01hc2tzQ2FjaGUgPSBvcHRpb25zICYmIHZvaWQgMCAhPT0gb3B0aW9ucy5kZWZpbml0aW9ucywgdGhpcy51c2VyT3B0aW9ucyA9IG9wdGlvbnMgfHwge30sXHJcbiAgICAgICAgdm9pZCByZXNvbHZlQWxpYXModGhpcy5vcHRzLmFsaWFzLCBvcHRpb25zLCB0aGlzLm9wdHMpKSA6IG5ldyBJbnB1dG1hc2soYWxpYXMsIG9wdGlvbnMpO1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gaXNJbnB1dEV2ZW50U3VwcG9ydGVkKGV2ZW50TmFtZSkge1xyXG4gICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKSwgZXZOYW1lID0gXCJvblwiICsgZXZlbnROYW1lLCBpc1N1cHBvcnRlZCA9IGV2TmFtZSBpbiBlbDtcclxuICAgICAgICByZXR1cm4gaXNTdXBwb3J0ZWQgfHwgKGVsLnNldEF0dHJpYnV0ZShldk5hbWUsIFwicmV0dXJuO1wiKSwgaXNTdXBwb3J0ZWQgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGVsW2V2TmFtZV0pLFxyXG4gICAgICAgIGVsID0gbnVsbCwgaXNTdXBwb3J0ZWQ7XHJcbiAgICB9XHJcbiAgICBmdW5jdGlvbiBpc0lucHV0VHlwZVN1cHBvcnRlZChpbnB1dFR5cGUpIHtcclxuICAgICAgICB2YXIgaXNTdXBwb3J0ZWQgPSBcInRleHRcIiA9PT0gaW5wdXRUeXBlIHx8IFwidGVsXCIgPT09IGlucHV0VHlwZSB8fCBcInBhc3N3b3JkXCIgPT09IGlucHV0VHlwZTtcclxuICAgICAgICBpZiAoIWlzU3VwcG9ydGVkKSB7XHJcbiAgICAgICAgICAgIHZhciBlbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJpbnB1dFwiKTtcclxuICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKFwidHlwZVwiLCBpbnB1dFR5cGUpLCBpc1N1cHBvcnRlZCA9IFwidGV4dFwiID09PSBlbC50eXBlLCBlbCA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBpc1N1cHBvcnRlZDtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIHJlc29sdmVBbGlhcyhhbGlhc1N0ciwgb3B0aW9ucywgb3B0cykge1xyXG4gICAgICAgIHZhciBhbGlhc0RlZmluaXRpb24gPSBvcHRzLmFsaWFzZXNbYWxpYXNTdHJdO1xyXG4gICAgICAgIHJldHVybiBhbGlhc0RlZmluaXRpb24gPyAoYWxpYXNEZWZpbml0aW9uLmFsaWFzICYmIHJlc29sdmVBbGlhcyhhbGlhc0RlZmluaXRpb24uYWxpYXMsIHZvaWQgMCwgb3B0cyksXHJcbiAgICAgICAgJC5leHRlbmQoITAsIG9wdHMsIGFsaWFzRGVmaW5pdGlvbiksICQuZXh0ZW5kKCEwLCBvcHRzLCBvcHRpb25zKSwgITApIDogKG51bGwgPT09IG9wdHMubWFzayAmJiAob3B0cy5tYXNrID0gYWxpYXNTdHIpLFxyXG4gICAgICAgICExKTtcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGltcG9ydEF0dHJpYnV0ZU9wdGlvbnMobnB0LCBvcHRzLCB1c2VyT3B0aW9ucykge1xyXG4gICAgICAgIGZ1bmN0aW9uIGltcG9ydE9wdGlvbihvcHRpb24sIG9wdGlvbkRhdGEpIHtcclxuICAgICAgICAgICAgb3B0aW9uRGF0YSA9IHZvaWQgMCAhPT0gb3B0aW9uRGF0YSA/IG9wdGlvbkRhdGEgOiBucHQuZ2V0QXR0cmlidXRlKFwiZGF0YS1pbnB1dG1hc2stXCIgKyBvcHRpb24pLFxyXG4gICAgICAgICAgICBudWxsICE9PSBvcHRpb25EYXRhICYmIChcInN0cmluZ1wiID09IHR5cGVvZiBvcHRpb25EYXRhICYmICgwID09PSBvcHRpb24uaW5kZXhPZihcIm9uXCIpID8gb3B0aW9uRGF0YSA9IHdpbmRvd1tvcHRpb25EYXRhXSA6IFwiZmFsc2VcIiA9PT0gb3B0aW9uRGF0YSA/IG9wdGlvbkRhdGEgPSAhMSA6IFwidHJ1ZVwiID09PSBvcHRpb25EYXRhICYmIChvcHRpb25EYXRhID0gITApKSxcclxuICAgICAgICAgICAgXCJtYXNrXCIgPT09IG9wdGlvbiAmJiAwID09PSBvcHRpb25EYXRhLmluZGV4T2YoXCJbXCIpID8gKHVzZXJPcHRpb25zW29wdGlvbl0gPSBvcHRpb25EYXRhLnJlcGxhY2UoL1tcXHNbXFxdXS9nLCBcIlwiKS5zcGxpdChcIixcIiksXHJcbiAgICAgICAgICAgIHVzZXJPcHRpb25zW29wdGlvbl1bMF0gPSB1c2VyT3B0aW9uc1tvcHRpb25dWzBdLnJlcGxhY2UoXCInXCIsIFwiXCIpLCB1c2VyT3B0aW9uc1tvcHRpb25dW3VzZXJPcHRpb25zW29wdGlvbl0ubGVuZ3RoIC0gMV0gPSB1c2VyT3B0aW9uc1tvcHRpb25dW3VzZXJPcHRpb25zW29wdGlvbl0ubGVuZ3RoIC0gMV0ucmVwbGFjZShcIidcIiwgXCJcIikpIDogdXNlck9wdGlvbnNbb3B0aW9uXSA9IG9wdGlvbkRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgb3B0aW9uLCBkYXRhb3B0aW9ucywgb3B0aW9uRGF0YSwgYXR0ck9wdGlvbnMgPSBucHQuZ2V0QXR0cmlidXRlKFwiZGF0YS1pbnB1dG1hc2tcIik7XHJcbiAgICAgICAgYXR0ck9wdGlvbnMgJiYgXCJcIiAhPT0gYXR0ck9wdGlvbnMgJiYgKGF0dHJPcHRpb25zID0gYXR0ck9wdGlvbnMucmVwbGFjZShuZXcgUmVnRXhwKFwiJ1wiLCBcImdcIiksICdcIicpLFxyXG4gICAgICAgIGRhdGFvcHRpb25zID0gSlNPTi5wYXJzZShcIntcIiArIGF0dHJPcHRpb25zICsgXCJ9XCIpKTtcclxuICAgICAgICBmb3IgKG9wdGlvbiBpbiBvcHRzKSB7XHJcbiAgICAgICAgICAgIGlmIChkYXRhb3B0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgb3B0aW9uRGF0YSA9IHZvaWQgMDtcclxuICAgICAgICAgICAgICAgIGZvciAodmFyIHAgaW4gZGF0YW9wdGlvbnMpIGlmIChwLnRvTG93ZXJDYXNlKCkgPT09IG9wdGlvbi50b0xvd2VyQ2FzZSgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0aW9uRGF0YSA9IGRhdGFvcHRpb25zW3BdO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGltcG9ydE9wdGlvbihvcHRpb24sIG9wdGlvbkRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAodXNlck9wdGlvbnMuYWxpYXMpIHtcclxuICAgICAgICAgICAgcmVzb2x2ZUFsaWFzKHVzZXJPcHRpb25zLmFsaWFzLCB1c2VyT3B0aW9ucywgb3B0cyk7XHJcbiAgICAgICAgICAgIGZvciAob3B0aW9uIGluIG9wdHMpIGltcG9ydE9wdGlvbihvcHRpb24pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gJC5leHRlbmQoITAsIG9wdHMsIHVzZXJPcHRpb25zKSwgb3B0cztcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIGdlbmVyYXRlTWFza1NldChvcHRzLCBub2NhY2hlKSB7XHJcbiAgICAgICAgZnVuY3Rpb24gYW5hbHlzZU1hc2sobWFzaykge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBNYXNrVG9rZW4oaXNHcm91cCwgaXNPcHRpb25hbCwgaXNRdWFudGlmaWVyLCBpc0FsdGVybmF0b3IpIHtcclxuICAgICAgICAgICAgICAgIHRoaXMubWF0Y2hlcyA9IFtdLCB0aGlzLmlzR3JvdXAgPSBpc0dyb3VwIHx8ICExLCB0aGlzLmlzT3B0aW9uYWwgPSBpc09wdGlvbmFsIHx8ICExLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5pc1F1YW50aWZpZXIgPSBpc1F1YW50aWZpZXIgfHwgITEsIHRoaXMuaXNBbHRlcm5hdG9yID0gaXNBbHRlcm5hdG9yIHx8ICExLFxyXG4gICAgICAgICAgICAgICAgdGhpcy5xdWFudGlmaWVyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIG1pbjogMSxcclxuICAgICAgICAgICAgICAgICAgICBtYXg6IDFcclxuICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gaW5zZXJ0VGVzdERlZmluaXRpb24obXRva2VuLCBlbGVtZW50LCBwb3NpdGlvbikge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1hc2tkZWYgPSBvcHRzLmRlZmluaXRpb25zW2VsZW1lbnRdO1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb24gPSB2b2lkIDAgIT09IHBvc2l0aW9uID8gcG9zaXRpb24gOiBtdG9rZW4ubWF0Y2hlcy5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJldk1hdGNoID0gbXRva2VuLm1hdGNoZXNbcG9zaXRpb24gLSAxXTtcclxuICAgICAgICAgICAgICAgIGlmIChtYXNrZGVmICYmICFlc2NhcGVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbWFza2RlZi5wbGFjZWhvbGRlciA9ICQuaXNGdW5jdGlvbihtYXNrZGVmLnBsYWNlaG9sZGVyKSA/IG1hc2tkZWYucGxhY2Vob2xkZXIob3B0cykgOiBtYXNrZGVmLnBsYWNlaG9sZGVyO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHByZXZhbGlkYXRvcnMgPSBtYXNrZGVmLnByZXZhbGlkYXRvciwgcHJldmFsaWRhdG9yc0wgPSBwcmV2YWxpZGF0b3JzID8gcHJldmFsaWRhdG9ycy5sZW5ndGggOiAwLCBpID0gMTsgaSA8IG1hc2tkZWYuY2FyZGluYWxpdHk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcHJldmFsaWRhdG9yID0gcHJldmFsaWRhdG9yc0wgPj0gaSA/IHByZXZhbGlkYXRvcnNbaSAtIDFdIDogW10sIHZhbGlkYXRvciA9IHByZXZhbGlkYXRvci52YWxpZGF0b3IsIGNhcmRpbmFsaXR5ID0gcHJldmFsaWRhdG9yLmNhcmRpbmFsaXR5O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtdG9rZW4ubWF0Y2hlcy5zcGxpY2UocG9zaXRpb24rKywgMCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm46IHZhbGlkYXRvciA/IFwic3RyaW5nXCIgPT0gdHlwZW9mIHZhbGlkYXRvciA/IG5ldyBSZWdFeHAodmFsaWRhdG9yKSA6IG5ldyBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy50ZXN0ID0gdmFsaWRhdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSgpIDogbmV3IFJlZ0V4cChcIi5cIiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogY2FyZGluYWxpdHkgPyBjYXJkaW5hbGl0eSA6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogbXRva2VuLmlzT3B0aW9uYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXdCbG9ja01hcmtlcjogdm9pZCAwID09PSBwcmV2TWF0Y2ggfHwgcHJldk1hdGNoLmRlZiAhPT0gKG1hc2tkZWYuZGVmaW5pdGlvblN5bWJvbCB8fCBlbGVtZW50KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2luZzogbWFza2RlZi5jYXNpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWY6IG1hc2tkZWYuZGVmaW5pdGlvblN5bWJvbCB8fCBlbGVtZW50LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IG1hc2tkZWYucGxhY2Vob2xkZXIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrOiBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLCBwcmV2TWF0Y2ggPSBtdG9rZW4ubWF0Y2hlc1twb3NpdGlvbiAtIDFdO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBtdG9rZW4ubWF0Y2hlcy5zcGxpY2UocG9zaXRpb24rKywgMCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmbjogbWFza2RlZi52YWxpZGF0b3IgPyBcInN0cmluZ1wiID09IHR5cGVvZiBtYXNrZGVmLnZhbGlkYXRvciA/IG5ldyBSZWdFeHAobWFza2RlZi52YWxpZGF0b3IpIDogbmV3IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMudGVzdCA9IG1hc2tkZWYudmFsaWRhdG9yO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KCkgOiBuZXcgUmVnRXhwKFwiLlwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IG1hc2tkZWYuY2FyZGluYWxpdHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG9wdGlvbmFsaXR5OiBtdG9rZW4uaXNPcHRpb25hbCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3QmxvY2tNYXJrZXI6IHZvaWQgMCA9PT0gcHJldk1hdGNoIHx8IHByZXZNYXRjaC5kZWYgIT09IChtYXNrZGVmLmRlZmluaXRpb25TeW1ib2wgfHwgZWxlbWVudCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2luZzogbWFza2RlZi5jYXNpbmcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlZjogbWFza2RlZi5kZWZpbml0aW9uU3ltYm9sIHx8IGVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBtYXNrZGVmLnBsYWNlaG9sZGVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrOiBlbGVtZW50XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgbXRva2VuLm1hdGNoZXMuc3BsaWNlKHBvc2l0aW9uKyssIDAsIHtcclxuICAgICAgICAgICAgICAgICAgICBmbjogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMCxcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogbXRva2VuLmlzT3B0aW9uYWwsXHJcbiAgICAgICAgICAgICAgICAgICAgbmV3QmxvY2tNYXJrZXI6IHZvaWQgMCA9PT0gcHJldk1hdGNoIHx8IHByZXZNYXRjaC5kZWYgIT09IGVsZW1lbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlZjogZWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogdm9pZCAwLFxyXG4gICAgICAgICAgICAgICAgICAgIG1hc2s6IGVsZW1lbnRcclxuICAgICAgICAgICAgICAgIH0pLCBlc2NhcGVkID0gITE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gdmVyaWZ5R3JvdXBNYXJrZXIobGFzdE1hdGNoLCBpc09wZW5Hcm91cCkge1xyXG4gICAgICAgICAgICAgICAgbGFzdE1hdGNoLmlzR3JvdXAgJiYgKGxhc3RNYXRjaC5pc0dyb3VwID0gITEsIGluc2VydFRlc3REZWZpbml0aW9uKGxhc3RNYXRjaCwgb3B0cy5ncm91cG1hcmtlci5zdGFydCwgMCksXHJcbiAgICAgICAgICAgICAgICBpc09wZW5Hcm91cCAhPT0gITAgJiYgaW5zZXJ0VGVzdERlZmluaXRpb24obGFzdE1hdGNoLCBvcHRzLmdyb3VwbWFya2VyLmVuZCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIG1hc2tDdXJyZW50VG9rZW4obSwgY3VycmVudFRva2VuLCBsYXN0TWF0Y2gsIGV4dHJhQ29uZGl0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICBjdXJyZW50VG9rZW4ubWF0Y2hlcy5sZW5ndGggPiAwICYmICh2b2lkIDAgPT09IGV4dHJhQ29uZGl0aW9uIHx8IGV4dHJhQ29uZGl0aW9uKSAmJiAobGFzdE1hdGNoID0gY3VycmVudFRva2VuLm1hdGNoZXNbY3VycmVudFRva2VuLm1hdGNoZXMubGVuZ3RoIC0gMV0sXHJcbiAgICAgICAgICAgICAgICB2ZXJpZnlHcm91cE1hcmtlcihsYXN0TWF0Y2gpKSwgaW5zZXJ0VGVzdERlZmluaXRpb24oY3VycmVudFRva2VuLCBtKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBkZWZhdWx0Q2FzZSgpIHtcclxuICAgICAgICAgICAgICAgIGlmIChvcGVuZW5pbmdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXSwgbWFza0N1cnJlbnRUb2tlbihtLCBjdXJyZW50T3BlbmluZ1Rva2VuLCBsYXN0TWF0Y2gsICFjdXJyZW50T3BlbmluZ1Rva2VuLmlzQWx0ZXJuYXRvciksXHJcbiAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbi5pc0FsdGVybmF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWx0ZXJuYXRvciA9IG9wZW5lbmluZ3MucG9wKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG1uZHggPSAwOyBtbmR4IDwgYWx0ZXJuYXRvci5tYXRjaGVzLmxlbmd0aDsgbW5keCsrKSBhbHRlcm5hdG9yLm1hdGNoZXNbbW5keF0uaXNHcm91cCA9ICExO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcGVuZW5pbmdzLmxlbmd0aCA+IDAgPyAoY3VycmVudE9wZW5pbmdUb2tlbiA9IG9wZW5lbmluZ3Nbb3BlbmVuaW5ncy5sZW5ndGggLSAxXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudE9wZW5pbmdUb2tlbi5tYXRjaGVzLnB1c2goYWx0ZXJuYXRvcikpIDogY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChhbHRlcm5hdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgbWFza0N1cnJlbnRUb2tlbihtLCBjdXJyZW50VG9rZW4sIGxhc3RNYXRjaCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZnVuY3Rpb24gcmV2ZXJzZVRva2VucyhtYXNrVG9rZW4pIHtcclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJldmVyc2VTdGF0aWMoc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3QgPT09IG9wdHMub3B0aW9uYWxtYXJrZXIuc3RhcnQgPyBzdCA9IG9wdHMub3B0aW9uYWxtYXJrZXIuZW5kIDogc3QgPT09IG9wdHMub3B0aW9uYWxtYXJrZXIuZW5kID8gc3QgPSBvcHRzLm9wdGlvbmFsbWFya2VyLnN0YXJ0IDogc3QgPT09IG9wdHMuZ3JvdXBtYXJrZXIuc3RhcnQgPyBzdCA9IG9wdHMuZ3JvdXBtYXJrZXIuZW5kIDogc3QgPT09IG9wdHMuZ3JvdXBtYXJrZXIuZW5kICYmIChzdCA9IG9wdHMuZ3JvdXBtYXJrZXIuc3RhcnQpLFxyXG4gICAgICAgICAgICAgICAgICAgIHN0O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgbWFza1Rva2VuLm1hdGNoZXMgPSBtYXNrVG9rZW4ubWF0Y2hlcy5yZXZlcnNlKCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBtYXRjaCBpbiBtYXNrVG9rZW4ubWF0Y2hlcykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbnRNYXRjaCA9IHBhcnNlSW50KG1hdGNoKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdLmlzUXVhbnRpZmllciAmJiBtYXNrVG9rZW4ubWF0Y2hlc1tpbnRNYXRjaCArIDFdICYmIG1hc2tUb2tlbi5tYXRjaGVzW2ludE1hdGNoICsgMV0uaXNHcm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcXQgPSBtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tUb2tlbi5tYXRjaGVzLnNwbGljZShtYXRjaCwgMSksIG1hc2tUb2tlbi5tYXRjaGVzLnNwbGljZShpbnRNYXRjaCArIDEsIDAsIHF0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBtYXNrVG9rZW4ubWF0Y2hlc1ttYXRjaF0ubWF0Y2hlcyA/IG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXSA9IHJldmVyc2VUb2tlbnMobWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdKSA6IG1hc2tUb2tlbi5tYXRjaGVzW21hdGNoXSA9IHJldmVyc2VTdGF0aWMobWFza1Rva2VuLm1hdGNoZXNbbWF0Y2hdKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBtYXNrVG9rZW47XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgbWF0Y2gsIG0sIG9wZW5pbmdUb2tlbiwgY3VycmVudE9wZW5pbmdUb2tlbiwgYWx0ZXJuYXRvciwgbGFzdE1hdGNoLCBncm91cFRva2VuLCB0b2tlbml6ZXIgPSAvKD86Wz8qK118XFx7WzAtOVxcK1xcKl0rKD86LFswLTlcXCtcXCpdKik/XFx9KXxbXi4/KiteJHtbXSgpfFxcXFxdK3wuL2csIGVzY2FwZWQgPSAhMSwgY3VycmVudFRva2VuID0gbmV3IE1hc2tUb2tlbigpLCBvcGVuZW5pbmdzID0gW10sIG1hc2tUb2tlbnMgPSBbXTsgbWF0Y2ggPSB0b2tlbml6ZXIuZXhlYyhtYXNrKSA7KSBpZiAobSA9IG1hdGNoWzBdLFxyXG4gICAgICAgICAgICBlc2NhcGVkKSBkZWZhdWx0Q2FzZSgpOyBlbHNlIHN3aXRjaCAobS5jaGFyQXQoMCkpIHtcclxuICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5lc2NhcGVDaGFyOlxyXG4gICAgICAgICAgICAgICAgICAgIGVzY2FwZWQgPSAhMDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIG9wdHMub3B0aW9uYWxtYXJrZXIuZW5kOlxyXG4gICAgICAgICAgICAgICAgY2FzZSBvcHRzLmdyb3VwbWFya2VyLmVuZDpcclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BlbmluZ1Rva2VuID0gb3BlbmVuaW5ncy5wb3AoKSwgdm9pZCAwICE9PSBvcGVuaW5nVG9rZW4pIGlmIChvcGVuZW5pbmdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGN1cnJlbnRPcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV0sIGN1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcy5wdXNoKG9wZW5pbmdUb2tlbiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPcGVuaW5nVG9rZW4uaXNBbHRlcm5hdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbHRlcm5hdG9yID0gb3BlbmVuaW5ncy5wb3AoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG1uZHggPSAwOyBtbmR4IDwgYWx0ZXJuYXRvci5tYXRjaGVzLmxlbmd0aDsgbW5keCsrKSBhbHRlcm5hdG9yLm1hdGNoZXNbbW5keF0uaXNHcm91cCA9ICExO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5sZW5ndGggPiAwID8gKGN1cnJlbnRPcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjdXJyZW50T3BlbmluZ1Rva2VuLm1hdGNoZXMucHVzaChhbHRlcm5hdG9yKSkgOiBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKGFsdGVybmF0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2gob3BlbmluZ1Rva2VuKTsgZWxzZSBkZWZhdWx0Q2FzZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5vcHRpb25hbG1hcmtlci5zdGFydDpcclxuICAgICAgICAgICAgICAgICAgICBvcGVuZW5pbmdzLnB1c2gobmV3IE1hc2tUb2tlbighMSwgITApKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIG9wdHMuZ3JvdXBtYXJrZXIuc3RhcnQ6XHJcbiAgICAgICAgICAgICAgICAgICAgb3BlbmVuaW5ncy5wdXNoKG5ldyBNYXNrVG9rZW4oITApKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICBjYXNlIG9wdHMucXVhbnRpZmllcm1hcmtlci5zdGFydDpcclxuICAgICAgICAgICAgICAgICAgICB2YXIgcXVhbnRpZmllciA9IG5ldyBNYXNrVG9rZW4oITEsICExLCAhMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbSA9IG0ucmVwbGFjZSgvW3t9XS9nLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbXEgPSBtLnNwbGl0KFwiLFwiKSwgbXEwID0gaXNOYU4obXFbMF0pID8gbXFbMF0gOiBwYXJzZUludChtcVswXSksIG1xMSA9IDEgPT09IG1xLmxlbmd0aCA/IG1xMCA6IGlzTmFOKG1xWzFdKSA/IG1xWzFdIDogcGFyc2VJbnQobXFbMV0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgoXCIqXCIgPT09IG1xMSB8fCBcIitcIiA9PT0gbXExKSAmJiAobXEwID0gXCIqXCIgPT09IG1xMSA/IDAgOiAxKSwgcXVhbnRpZmllci5xdWFudGlmaWVyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBtaW46IG1xMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF4OiBtcTFcclxuICAgICAgICAgICAgICAgICAgICB9LCBvcGVuZW5pbmdzLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoZXMgPSBvcGVuZW5pbmdzW29wZW5lbmluZ3MubGVuZ3RoIC0gMV0ubWF0Y2hlcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBtYXRjaGVzLnBvcCgpLCBtYXRjaC5pc0dyb3VwIHx8IChncm91cFRva2VuID0gbmV3IE1hc2tUb2tlbighMCksIGdyb3VwVG9rZW4ubWF0Y2hlcy5wdXNoKG1hdGNoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBncm91cFRva2VuKSwgbWF0Y2hlcy5wdXNoKG1hdGNoKSwgbWF0Y2hlcy5wdXNoKHF1YW50aWZpZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBtYXRjaCA9IGN1cnJlbnRUb2tlbi5tYXRjaGVzLnBvcCgpLCBtYXRjaC5pc0dyb3VwIHx8IChncm91cFRva2VuID0gbmV3IE1hc2tUb2tlbighMCksXHJcbiAgICAgICAgICAgICAgICAgICAgZ3JvdXBUb2tlbi5tYXRjaGVzLnB1c2gobWF0Y2gpLCBtYXRjaCA9IGdyb3VwVG9rZW4pLCBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKG1hdGNoKSxcclxuICAgICAgICAgICAgICAgICAgICBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKHF1YW50aWZpZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgIGNhc2Ugb3B0cy5hbHRlcm5hdG9ybWFya2VyOlxyXG4gICAgICAgICAgICAgICAgICAgIG9wZW5lbmluZ3MubGVuZ3RoID4gMCA/IChjdXJyZW50T3BlbmluZ1Rva2VuID0gb3BlbmVuaW5nc1tvcGVuZW5pbmdzLmxlbmd0aCAtIDFdLFxyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RNYXRjaCA9IGN1cnJlbnRPcGVuaW5nVG9rZW4ubWF0Y2hlcy5wb3AoKSkgOiBsYXN0TWF0Y2ggPSBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wb3AoKSxcclxuICAgICAgICAgICAgICAgICAgICBsYXN0TWF0Y2guaXNBbHRlcm5hdG9yID8gb3BlbmVuaW5ncy5wdXNoKGxhc3RNYXRjaCkgOiAoYWx0ZXJuYXRvciA9IG5ldyBNYXNrVG9rZW4oITEsICExLCAhMSwgITApLFxyXG4gICAgICAgICAgICAgICAgICAgIGFsdGVybmF0b3IubWF0Y2hlcy5wdXNoKGxhc3RNYXRjaCksIG9wZW5lbmluZ3MucHVzaChhbHRlcm5hdG9yKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICBkZWZhdWx0Q2FzZSgpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZvciAoOyBvcGVuZW5pbmdzLmxlbmd0aCA+IDA7KSBvcGVuaW5nVG9rZW4gPSBvcGVuZW5pbmdzLnBvcCgpLCB2ZXJpZnlHcm91cE1hcmtlcihvcGVuaW5nVG9rZW4sICEwKSxcclxuICAgICAgICAgICAgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChvcGVuaW5nVG9rZW4pO1xyXG4gICAgICAgICAgICByZXR1cm4gY3VycmVudFRva2VuLm1hdGNoZXMubGVuZ3RoID4gMCAmJiAobGFzdE1hdGNoID0gY3VycmVudFRva2VuLm1hdGNoZXNbY3VycmVudFRva2VuLm1hdGNoZXMubGVuZ3RoIC0gMV0sXHJcbiAgICAgICAgICAgIHZlcmlmeUdyb3VwTWFya2VyKGxhc3RNYXRjaCksIG1hc2tUb2tlbnMucHVzaChjdXJyZW50VG9rZW4pKSwgb3B0cy5udW1lcmljSW5wdXQgJiYgcmV2ZXJzZVRva2VucyhtYXNrVG9rZW5zWzBdKSxcclxuICAgICAgICAgICAgbWFza1Rva2VucztcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZ2VuZXJhdGVNYXNrKG1hc2ssIG1ldGFkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmIChudWxsID09PSBtYXNrIHx8IFwiXCIgPT09IG1hc2spIHJldHVybiB2b2lkIDA7XHJcbiAgICAgICAgICAgIGlmICgxID09PSBtYXNrLmxlbmd0aCAmJiBvcHRzLmdyZWVkeSA9PT0gITEgJiYgMCAhPT0gb3B0cy5yZXBlYXQgJiYgKG9wdHMucGxhY2Vob2xkZXIgPSBcIlwiKSxcclxuICAgICAgICAgICAgb3B0cy5yZXBlYXQgPiAwIHx8IFwiKlwiID09PSBvcHRzLnJlcGVhdCB8fCBcIitcIiA9PT0gb3B0cy5yZXBlYXQpIHtcclxuICAgICAgICAgICAgICAgIHZhciByZXBlYXRTdGFydCA9IFwiKlwiID09PSBvcHRzLnJlcGVhdCA/IDAgOiBcIitcIiA9PT0gb3B0cy5yZXBlYXQgPyAxIDogb3B0cy5yZXBlYXQ7XHJcbiAgICAgICAgICAgICAgICBtYXNrID0gb3B0cy5ncm91cG1hcmtlci5zdGFydCArIG1hc2sgKyBvcHRzLmdyb3VwbWFya2VyLmVuZCArIG9wdHMucXVhbnRpZmllcm1hcmtlci5zdGFydCArIHJlcGVhdFN0YXJ0ICsgXCIsXCIgKyBvcHRzLnJlcGVhdCArIG9wdHMucXVhbnRpZmllcm1hcmtlci5lbmQ7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIG1hc2tzZXREZWZpbml0aW9uO1xyXG4gICAgICAgICAgICByZXR1cm4gdm9pZCAwID09PSBJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbbWFza10gfHwgbm9jYWNoZSA9PT0gITAgPyAobWFza3NldERlZmluaXRpb24gPSB7XHJcbiAgICAgICAgICAgICAgICBtYXNrOiBtYXNrLFxyXG4gICAgICAgICAgICAgICAgbWFza1Rva2VuOiBhbmFseXNlTWFzayhtYXNrKSxcclxuICAgICAgICAgICAgICAgIHZhbGlkUG9zaXRpb25zOiB7fSxcclxuICAgICAgICAgICAgICAgIF9idWZmZXI6IHZvaWQgMCxcclxuICAgICAgICAgICAgICAgIGJ1ZmZlcjogdm9pZCAwLFxyXG4gICAgICAgICAgICAgICAgdGVzdHM6IHt9LFxyXG4gICAgICAgICAgICAgICAgbWV0YWRhdGE6IG1ldGFkYXRhXHJcbiAgICAgICAgICAgIH0sIG5vY2FjaGUgIT09ICEwICYmIChJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbb3B0cy5udW1lcmljSW5wdXQgPyBtYXNrLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogbWFza10gPSBtYXNrc2V0RGVmaW5pdGlvbixcclxuICAgICAgICAgICAgbWFza3NldERlZmluaXRpb24gPSAkLmV4dGVuZCghMCwge30sIElucHV0bWFzay5wcm90b3R5cGUubWFza3NDYWNoZVtvcHRzLm51bWVyaWNJbnB1dCA/IG1hc2suc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIikgOiBtYXNrXSkpKSA6IG1hc2tzZXREZWZpbml0aW9uID0gJC5leHRlbmQoITAsIHt9LCBJbnB1dG1hc2sucHJvdG90eXBlLm1hc2tzQ2FjaGVbb3B0cy5udW1lcmljSW5wdXQgPyBtYXNrLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogbWFza10pLFxyXG4gICAgICAgICAgICBtYXNrc2V0RGVmaW5pdGlvbjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gcHJlUHJvY2Vzc01hc2sobWFzaykge1xyXG4gICAgICAgICAgICByZXR1cm4gbWFzayA9IG1hc2sudG9TdHJpbmcoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIG1zO1xyXG4gICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5tYXNrKSAmJiAob3B0cy5tYXNrID0gb3B0cy5tYXNrKG9wdHMpKSwgJC5pc0FycmF5KG9wdHMubWFzaykpIHtcclxuICAgICAgICAgICAgaWYgKG9wdHMubWFzay5sZW5ndGggPiAxKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRzLmtlZXBTdGF0aWMgPSBudWxsID09PSBvcHRzLmtlZXBTdGF0aWMgPyAhMCA6IG9wdHMua2VlcFN0YXRpYztcclxuICAgICAgICAgICAgICAgIHZhciBhbHRNYXNrID0gXCIoXCI7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJC5lYWNoKG9wdHMubnVtZXJpY0lucHV0ID8gb3B0cy5tYXNrLnJldmVyc2UoKSA6IG9wdHMubWFzaywgZnVuY3Rpb24gKG5keCwgbXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWx0TWFzay5sZW5ndGggPiAxICYmIChhbHRNYXNrICs9IFwiKXwoXCIpLCBhbHRNYXNrICs9IHByZVByb2Nlc3NNYXNrKHZvaWQgMCA9PT0gbXNrLm1hc2sgfHwgJC5pc0Z1bmN0aW9uKG1zay5tYXNrKSA/IG1zayA6IG1zay5tYXNrKTtcclxuICAgICAgICAgICAgICAgIH0pLCBhbHRNYXNrICs9IFwiKVwiLCBnZW5lcmF0ZU1hc2soYWx0TWFzaywgb3B0cy5tYXNrKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvcHRzLm1hc2sgPSBvcHRzLm1hc2sucG9wKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiBvcHRzLm1hc2sgJiYgKG1zID0gdm9pZCAwID09PSBvcHRzLm1hc2subWFzayB8fCAkLmlzRnVuY3Rpb24ob3B0cy5tYXNrLm1hc2spID8gZ2VuZXJhdGVNYXNrKHByZVByb2Nlc3NNYXNrKG9wdHMubWFzayksIG9wdHMubWFzaykgOiBnZW5lcmF0ZU1hc2socHJlUHJvY2Vzc01hc2sob3B0cy5tYXNrLm1hc2spLCBvcHRzLm1hc2spKSxcclxuICAgICAgICBtcztcclxuICAgIH1cclxuICAgIGZ1bmN0aW9uIG1hc2tTY29wZShhY3Rpb25PYmosIG1hc2tzZXQsIG9wdHMpIHtcclxuICAgICAgICBmdW5jdGlvbiBnZXRNYXNrVGVtcGxhdGUoYmFzZU9uSW5wdXQsIG1pbmltYWxQb3MsIGluY2x1ZGVJbnB1dCkge1xyXG4gICAgICAgICAgICBtaW5pbWFsUG9zID0gbWluaW1hbFBvcyB8fCAwO1xyXG4gICAgICAgICAgICB2YXIgbmR4SW50bHpyLCB0ZXN0LCB0ZXN0UG9zLCBtYXNrVGVtcGxhdGUgPSBbXSwgcG9zID0gMDtcclxuICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGJhc2VPbklucHV0ID09PSAhMCAmJiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWxpZFBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdO1xyXG4gICAgICAgICAgICAgICAgICAgIHRlc3QgPSB2YWxpZFBvcy5tYXRjaCwgbmR4SW50bHpyID0gdmFsaWRQb3MubG9jYXRvci5zbGljZSgpLCBtYXNrVGVtcGxhdGUucHVzaChpbmNsdWRlSW5wdXQgPT09ICEwID8gdmFsaWRQb3MuaW5wdXQgOiBnZXRQbGFjZWhvbGRlcihwb3MsIHRlc3QpKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB0ZXN0UG9zID0gZ2V0VGVzdFRlbXBsYXRlKHBvcywgbmR4SW50bHpyLCBwb3MgLSAxKSwgdGVzdCA9IHRlc3RQb3MubWF0Y2gsXHJcbiAgICAgICAgICAgICAgICBuZHhJbnRsenIgPSB0ZXN0UG9zLmxvY2F0b3Iuc2xpY2UoKSwgbWFza1RlbXBsYXRlLnB1c2goZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0KSk7XHJcbiAgICAgICAgICAgICAgICBwb3MrKztcclxuICAgICAgICAgICAgfSB3aGlsZSAoKHZvaWQgMCA9PT0gbWF4TGVuZ3RoIHx8IG1heExlbmd0aCA+IHBvcyAtIDEpICYmIG51bGwgIT09IHRlc3QuZm4gfHwgbnVsbCA9PT0gdGVzdC5mbiAmJiBcIlwiICE9PSB0ZXN0LmRlZiB8fCBtaW5pbWFsUG9zID49IHBvcyk7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXNrVGVtcGxhdGUucG9wKCksIG1hc2tUZW1wbGF0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0TWFza1NldCgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1hc2tzZXQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHJlc2V0TWFza1NldChzb2Z0KSB7XHJcbiAgICAgICAgICAgIHZhciBtYXNrc2V0ID0gZ2V0TWFza1NldCgpO1xyXG4gICAgICAgICAgICBtYXNrc2V0LmJ1ZmZlciA9IHZvaWQgMCwgbWFza3NldC50ZXN0cyA9IHt9LCBzb2Z0ICE9PSAhMCAmJiAobWFza3NldC5fYnVmZmVyID0gdm9pZCAwLFxyXG4gICAgICAgICAgICBtYXNrc2V0LnZhbGlkUG9zaXRpb25zID0ge30sIG1hc2tzZXQucCA9IDApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBnZXRMYXN0VmFsaWRQb3NpdGlvbihjbG9zZXN0VG8sIHN0cmljdCkge1xyXG4gICAgICAgICAgICB2YXIgbWFza3NldCA9IGdldE1hc2tTZXQoKSwgbGFzdFZhbGlkUG9zaXRpb24gPSAtMSwgdmFsaWRzID0gbWFza3NldC52YWxpZFBvc2l0aW9ucztcclxuICAgICAgICAgICAgdm9pZCAwID09PSBjbG9zZXN0VG8gJiYgKGNsb3Nlc3RUbyA9IC0xKTtcclxuICAgICAgICAgICAgdmFyIGJlZm9yZSA9IGxhc3RWYWxpZFBvc2l0aW9uLCBhZnRlciA9IGxhc3RWYWxpZFBvc2l0aW9uO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBwb3NOZHggaW4gdmFsaWRzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHNOZHggPSBwYXJzZUludChwb3NOZHgpO1xyXG4gICAgICAgICAgICAgICAgdmFsaWRzW3BzTmR4XSAmJiAoc3RyaWN0IHx8IG51bGwgIT09IHZhbGlkc1twc05keF0ubWF0Y2guZm4pICYmIChjbG9zZXN0VG8gPj0gcHNOZHggJiYgKGJlZm9yZSA9IHBzTmR4KSxcclxuICAgICAgICAgICAgICAgIHBzTmR4ID49IGNsb3Nlc3RUbyAmJiAoYWZ0ZXIgPSBwc05keCkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBsYXN0VmFsaWRQb3NpdGlvbiA9IC0xICE9PSBiZWZvcmUgJiYgY2xvc2VzdFRvIC0gYmVmb3JlID4gMSB8fCBjbG9zZXN0VG8gPiBhZnRlciA/IGJlZm9yZSA6IGFmdGVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBzZXRWYWxpZFBvc2l0aW9uKHBvcywgdmFsaWRUZXN0LCBmcm9tU2V0VmFsaWQpIHtcclxuICAgICAgICAgICAgaWYgKG9wdHMuaW5zZXJ0TW9kZSAmJiB2b2lkIDAgIT09IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdICYmIHZvaWQgMCA9PT0gZnJvbVNldFZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaSwgcG9zaXRpb25zQ2xvbmUgPSAkLmV4dGVuZCghMCwge30sIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyksIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKCk7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBwb3M7IGx2cCA+PSBpOyBpKyspIGRlbGV0ZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV07XHJcbiAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSA9IHZhbGlkVGVzdDtcclxuICAgICAgICAgICAgICAgIHZhciBqLCB2YWxpZCA9ICEwLCB2cHMgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnM7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGkgPSBqID0gcG9zOyBsdnAgPj0gaTsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHQgPSBwb3NpdGlvbnNDbG9uZVtpXTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSB0KSBmb3IgKHZhciBwb3NNYXRjaCA9IGosIHByZXZQb3NNYXRjaCA9IC0xOyBwb3NNYXRjaCA8IGdldE1hc2tMZW5ndGgoKSAmJiAobnVsbCA9PSB0Lm1hdGNoLmZuICYmIHZwc1tpXSAmJiAodnBzW2ldLm1hdGNoLm9wdGlvbmFsUXVhbnRpZmllciA9PT0gITAgfHwgdnBzW2ldLm1hdGNoLm9wdGlvbmFsaXR5ID09PSAhMCkgfHwgbnVsbCAhPSB0Lm1hdGNoLmZuKSA7KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChudWxsID09PSB0Lm1hdGNoLmZuIHx8ICFvcHRzLmtlZXBTdGF0aWMgJiYgdnBzW2ldICYmICh2b2lkIDAgIT09IHZwc1tpICsgMV0gJiYgZ2V0VGVzdHMoaSArIDEsIHZwc1tpXS5sb2NhdG9yLnNsaWNlKCksIGkpLmxlbmd0aCA+IDEgfHwgdm9pZCAwICE9PSB2cHNbaV0uYWx0ZXJuYXRpb24pID8gcG9zTWF0Y2grKyA6IHBvc01hdGNoID0gc2Vla05leHQoaiksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvc2l0aW9uQ2FuTWF0Y2hEZWZpbml0aW9uKHBvc01hdGNoLCB0Lm1hdGNoLmRlZikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkID0gaXNWYWxpZChwb3NNYXRjaCwgdC5pbnB1dCwgITAsICEwKSAhPT0gITEsIGogPSBwb3NNYXRjaDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZCA9IG51bGwgPT0gdC5tYXRjaC5mbiwgcHJldlBvc01hdGNoID09PSBwb3NNYXRjaCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHByZXZQb3NNYXRjaCA9IHBvc01hdGNoO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAoIXZhbGlkKSBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICghdmFsaWQpIHJldHVybiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMgPSAkLmV4dGVuZCghMCwge30sIHBvc2l0aW9uc0Nsb25lKSxcclxuICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCghMCksICExO1xyXG4gICAgICAgICAgICB9IGVsc2UgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc10gPSB2YWxpZFRlc3Q7XHJcbiAgICAgICAgICAgIHJldHVybiByZXNldE1hc2tTZXQoITApLCAhMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RyaXBWYWxpZFBvc2l0aW9ucyhzdGFydCwgZW5kLCBub2NoZWNrLCBzdHJpY3QpIHtcclxuICAgICAgICAgICAgdmFyIGksIHN0YXJ0UG9zID0gc3RhcnQ7XHJcbiAgICAgICAgICAgIGZvciAoZ2V0TWFza1NldCgpLnAgPSBzdGFydCwgaSA9IHN0YXJ0UG9zOyBlbmQgPiBpOyBpKyspIHZvaWQgMCAhPT0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldICYmIChub2NoZWNrID09PSAhMCB8fCBvcHRzLmNhbkNsZWFyUG9zaXRpb24oZ2V0TWFza1NldCgpLCBpLCBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLCBzdHJpY3QsIG9wdHMpICE9PSAhMSkgJiYgZGVsZXRlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXTtcclxuICAgICAgICAgICAgZm9yIChpID0gc3RhcnRQb3MgKyAxOyBpIDw9IGdldExhc3RWYWxpZFBvc2l0aW9uKCkgOykge1xyXG4gICAgICAgICAgICAgICAgZm9yICg7IHZvaWQgMCAhPT0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3N0YXJ0UG9zXTspIHN0YXJ0UG9zKys7XHJcbiAgICAgICAgICAgICAgICB2YXIgcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tzdGFydFBvc107XHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhcnRQb3MgPiBpICYmIChpID0gc3RhcnRQb3MgKyAxKSwgdm9pZCAwID09PSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbaV0gJiYgaXNNYXNrKGkpIHx8IHZvaWQgMCAhPT0gcykgaSsrOyBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdCA9IGdldFRlc3RUZW1wbGF0ZShpKTtcclxuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbkNhbk1hdGNoRGVmaW5pdGlvbihzdGFydFBvcywgdC5tYXRjaC5kZWYpID8gaXNWYWxpZChzdGFydFBvcywgdC5pbnB1dCB8fCBnZXRQbGFjZWhvbGRlcihpKSwgITApICE9PSAhMSAmJiAoZGVsZXRlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXSxcclxuICAgICAgICAgICAgICAgICAgICBpKyspIDogaXNNYXNrKGkpIHx8IChpKyssIHN0YXJ0UG9zLS0pLCBzdGFydFBvcysrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLCBtbCA9IGdldE1hc2tMZW5ndGgoKTtcclxuICAgICAgICAgICAgZm9yIChzdHJpY3QgIT09ICEwICYmIG5vY2hlY2sgIT09ICEwICYmIHZvaWQgMCAhPT0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2x2cF0gJiYgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2x2cF0uaW5wdXQgPT09IG9wdHMucmFkaXhQb2ludCAmJiBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2x2cF0sXHJcbiAgICAgICAgICAgIGkgPSBsdnAgKyAxOyBtbCA+PSBpOyBpKyspIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXSAmJiBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldO1xyXG4gICAgICAgICAgICByZXNldE1hc2tTZXQoITApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBnZXRUZXN0VGVtcGxhdGUocG9zLCBuZHhJbnRsenIsIHRzdFBzKSB7XHJcbiAgICAgICAgICAgIHZhciB0ZXN0UG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3Bvc107XHJcbiAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IHRlc3RQb3MpIGZvciAodmFyIHRlc3RQb3NpdGlvbnMgPSBnZXRUZXN0cyhwb3MsIG5keEludGx6ciwgdHN0UHMpLCBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLCBsdlRlc3QgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbHZwXSB8fCBnZXRUZXN0cygwKVswXSwgbHZUZXN0QWx0QXJyID0gdm9pZCAwICE9PSBsdlRlc3QuYWx0ZXJuYXRpb24gPyBsdlRlc3QubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpIDogW10sIG5keCA9IDA7IG5keCA8IHRlc3RQb3NpdGlvbnMubGVuZ3RoICYmICh0ZXN0UG9zID0gdGVzdFBvc2l0aW9uc1tuZHhdLFxyXG4gICAgICAgICAgICAhKHRlc3RQb3MubWF0Y2ggJiYgKG9wdHMuZ3JlZWR5ICYmIHRlc3RQb3MubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICE9PSAhMCB8fCAodGVzdFBvcy5tYXRjaC5vcHRpb25hbGl0eSA9PT0gITEgfHwgdGVzdFBvcy5tYXRjaC5uZXdCbG9ja01hcmtlciA9PT0gITEpICYmIHRlc3RQb3MubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyICE9PSAhMCkgJiYgKHZvaWQgMCA9PT0gbHZUZXN0LmFsdGVybmF0aW9uIHx8IGx2VGVzdC5hbHRlcm5hdGlvbiAhPT0gdGVzdFBvcy5hbHRlcm5hdGlvbiB8fCB2b2lkIDAgIT09IHRlc3RQb3MubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dICYmIGNoZWNrQWx0ZXJuYXRpb25NYXRjaCh0ZXN0UG9zLmxvY2F0b3JbbHZUZXN0LmFsdGVybmF0aW9uXS50b1N0cmluZygpLnNwbGl0KFwiLFwiKSwgbHZUZXN0QWx0QXJyKSkpKSA7IG5keCsrKTtcclxuICAgICAgICAgICAgcmV0dXJuIHRlc3RQb3M7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFRlc3QocG9zKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zXSA/IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdLm1hdGNoIDogZ2V0VGVzdHMocG9zKVswXS5tYXRjaDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gcG9zaXRpb25DYW5NYXRjaERlZmluaXRpb24ocG9zLCBkZWYpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgdmFsaWQgPSAhMSwgdGVzdHMgPSBnZXRUZXN0cyhwb3MpLCB0bmR4ID0gMDsgdG5keCA8IHRlc3RzLmxlbmd0aDsgdG5keCsrKSBpZiAodGVzdHNbdG5keF0ubWF0Y2ggJiYgdGVzdHNbdG5keF0ubWF0Y2guZGVmID09PSBkZWYpIHtcclxuICAgICAgICAgICAgICAgIHZhbGlkID0gITA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gdmFsaWQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGdldFRlc3RzKHBvcywgbmR4SW50bHpyLCB0c3RQcywgY2FjaGVhYmxlKSB7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHJlc29sdmVUZXN0RnJvbVRva2VuKG1hc2tUb2tlbiwgbmR4SW5pdGlhbGl6ZXIsIGxvb3BOZHgsIHF1YW50aWZpZXJSZWN1cnNlKSB7XHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiBoYW5kbGVNYXRjaChtYXRjaCwgbG9vcE5keCwgcXVhbnRpZmllclJlY3Vyc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodGVzdFBvcyA+IDFlNCkgdGhyb3cgXCJJbnB1dG1hc2s6IFRoZXJlIGlzIHByb2JhYmx5IGFuIGVycm9yIGluIHlvdXIgbWFzayBkZWZpbml0aW9uIG9yIGluIHRoZSBjb2RlLiBDcmVhdGUgYW4gaXNzdWUgb24gZ2l0aHViIHdpdGggYW4gZXhhbXBsZSBvZiB0aGUgbWFzayB5b3UgYXJlIHVzaW5nLiBcIiArIGdldE1hc2tTZXQoKS5tYXNrO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0UG9zID09PSBwb3MgJiYgdm9pZCAwID09PSBtYXRjaC5tYXRjaGVzKSByZXR1cm4gbWF0Y2hlcy5wdXNoKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2g6IG1hdGNoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdG9yOiBsb29wTmR4LnJldmVyc2UoKVxyXG4gICAgICAgICAgICAgICAgICAgIH0pLCAhMDtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSBtYXRjaC5tYXRjaGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaC5pc0dyb3VwICYmIHF1YW50aWZpZXJSZWN1cnNlICE9PSBtYXRjaCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoID0gaGFuZGxlTWF0Y2gobWFza1Rva2VuLm1hdGNoZXNbJC5pbkFycmF5KG1hdGNoLCBtYXNrVG9rZW4ubWF0Y2hlcykgKyAxXSwgbG9vcE5keCkpIHJldHVybiAhMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChtYXRjaC5pc09wdGlvbmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgb3B0aW9uYWxUb2tlbiA9IG1hdGNoO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoID0gcmVzb2x2ZVRlc3RGcm9tVG9rZW4obWF0Y2gsIG5keEluaXRpYWxpemVyLCBsb29wTmR4LCBxdWFudGlmaWVyUmVjdXJzZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobGF0ZXN0TWF0Y2ggPSBtYXRjaGVzW21hdGNoZXMubGVuZ3RoIC0gMV0ubWF0Y2gsIGlzRmlyc3RNYXRjaCA9IDAgPT09ICQuaW5BcnJheShsYXRlc3RNYXRjaCwgb3B0aW9uYWxUb2tlbi5tYXRjaGVzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAhaXNGaXJzdE1hdGNoKSByZXR1cm4gITA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5zZXJ0U3RvcCA9ICEwLCB0ZXN0UG9zID0gcG9zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoLmlzQWx0ZXJuYXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hbHRNYXRjaGVzLCBhbHRlcm5hdGVUb2tlbiA9IG1hdGNoLCBtYWx0ZXJuYXRlTWF0Y2hlcyA9IFtdLCBjdXJyZW50TWF0Y2hlcyA9IG1hdGNoZXMuc2xpY2UoKSwgbG9vcE5keENudCA9IGxvb3BOZHgubGVuZ3RoLCBhbHRJbmRleCA9IG5keEluaXRpYWxpemVyLmxlbmd0aCA+IDAgPyBuZHhJbml0aWFsaXplci5zaGlmdCgpIDogLTE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoLTEgPT09IGFsdEluZGV4IHx8IFwic3RyaW5nXCIgPT0gdHlwZW9mIGFsdEluZGV4KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGN1cnJlbnRQb3MgPSB0ZXN0UG9zLCBuZHhJbml0aWFsaXplckNsb25lID0gbmR4SW5pdGlhbGl6ZXIuc2xpY2UoKSwgYWx0SW5kZXhBcnIgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN0cmluZ1wiID09IHR5cGVvZiBhbHRJbmRleCAmJiAoYWx0SW5kZXhBcnIgPSBhbHRJbmRleC5zcGxpdChcIixcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGFtbmR4ID0gMDsgYW1uZHggPCBhbHRlcm5hdGVUb2tlbi5tYXRjaGVzLmxlbmd0aDsgYW1uZHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hlcyA9IFtdLCBtYXRjaCA9IGhhbmRsZU1hdGNoKGFsdGVybmF0ZVRva2VuLm1hdGNoZXNbYW1uZHhdLCBbYW1uZHhdLmNvbmNhdChsb29wTmR4KSwgcXVhbnRpZmllclJlY3Vyc2UpIHx8IG1hdGNoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCAhPT0gITAgJiYgdm9pZCAwICE9PSBtYXRjaCAmJiBhbHRJbmRleEFyclthbHRJbmRleEFyci5sZW5ndGggLSAxXSA8IGFsdGVybmF0ZVRva2VuLm1hdGNoZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbnRuZHggPSBtYXNrVG9rZW4ubWF0Y2hlcy5pbmRleE9mKG1hdGNoKSArIDE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrVG9rZW4ubWF0Y2hlcy5sZW5ndGggPiBudG5keCAmJiAobWF0Y2ggPSBoYW5kbGVNYXRjaChtYXNrVG9rZW4ubWF0Y2hlc1tudG5keF0sIFtudG5keF0uY29uY2F0KGxvb3BOZHguc2xpY2UoMSwgbG9vcE5keC5sZW5ndGgpKSwgcXVhbnRpZmllclJlY3Vyc2UpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggJiYgKGFsdEluZGV4QXJyLnB1c2gobnRuZHgudG9TdHJpbmcoKSksICQuZWFjaChtYXRjaGVzLCBmdW5jdGlvbiAobmR4LCBsbW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG1udC5hbHRlcm5hdGlvbiA9IGxvb3BOZHgubGVuZ3RoIC0gMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFsdE1hdGNoZXMgPSBtYXRjaGVzLnNsaWNlKCksIHRlc3RQb3MgPSBjdXJyZW50UG9zLCBtYXRjaGVzID0gW107XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmR4SW5pdGlhbGl6ZXJDbG9uZS5sZW5ndGg7IGkrKykgbmR4SW5pdGlhbGl6ZXJbaV0gPSBuZHhJbml0aWFsaXplckNsb25lW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBuZHgxID0gMDsgbmR4MSA8IG1hbHRNYXRjaGVzLmxlbmd0aDsgbmR4MSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0TWF0Y2ggPSBtYWx0TWF0Y2hlc1tuZHgxXTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdE1hdGNoLmFsdGVybmF0aW9uID0gYWx0TWF0Y2guYWx0ZXJuYXRpb24gfHwgbG9vcE5keENudDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG5keDIgPSAwOyBuZHgyIDwgbWFsdGVybmF0ZU1hdGNoZXMubGVuZ3RoOyBuZHgyKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgYWx0TWF0Y2gyID0gbWFsdGVybmF0ZU1hdGNoZXNbbmR4Ml07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFsdE1hdGNoLm1hdGNoLm1hc2sgPT09IGFsdE1hdGNoMi5tYXRjaC5tYXNrICYmIChcInN0cmluZ1wiICE9IHR5cGVvZiBhbHRJbmRleCB8fCAtMSAhPT0gJC5pbkFycmF5KGFsdE1hdGNoLmxvY2F0b3JbYWx0TWF0Y2guYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCksIGFsdEluZGV4QXJyKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFsdE1hdGNoZXMuc3BsaWNlKG5keDEsIDEpLCBuZHgxLS0sIGFsdE1hdGNoMi5sb2NhdG9yW2FsdE1hdGNoLmFsdGVybmF0aW9uXSA9IGFsdE1hdGNoMi5sb2NhdG9yW2FsdE1hdGNoLmFsdGVybmF0aW9uXSArIFwiLFwiICsgYWx0TWF0Y2gubG9jYXRvclthbHRNYXRjaC5hbHRlcm5hdGlvbl0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFsdE1hdGNoMi5hbHRlcm5hdGlvbiA9IGFsdE1hdGNoLmFsdGVybmF0aW9uO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFsdGVybmF0ZU1hdGNoZXMgPSBtYWx0ZXJuYXRlTWF0Y2hlcy5jb25jYXQobWFsdE1hdGNoZXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBcInN0cmluZ1wiID09IHR5cGVvZiBhbHRJbmRleCAmJiAobWFsdGVybmF0ZU1hdGNoZXMgPSAkLm1hcChtYWx0ZXJuYXRlTWF0Y2hlcywgZnVuY3Rpb24gKGxtbnQsIG5keCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNGaW5pdGUobmR4KSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1hbWF0Y2gsIGFsdGVybmF0aW9uID0gbG1udC5hbHRlcm5hdGlvbiwgYWx0TG9jQXJyID0gbG1udC5sb2NhdG9yW2FsdGVybmF0aW9uXS50b1N0cmluZygpLnNwbGl0KFwiLFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxtbnQubG9jYXRvclthbHRlcm5hdGlvbl0gPSB2b2lkIDAsIGxtbnQuYWx0ZXJuYXRpb24gPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBhbG5keCA9IDA7IGFsbmR4IDwgYWx0TG9jQXJyLmxlbmd0aDsgYWxuZHgrKykgbWFtYXRjaCA9IC0xICE9PSAkLmluQXJyYXkoYWx0TG9jQXJyW2FsbmR4XSwgYWx0SW5kZXhBcnIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFtYXRjaCAmJiAodm9pZCAwICE9PSBsbW50LmxvY2F0b3JbYWx0ZXJuYXRpb25dID8gKGxtbnQubG9jYXRvclthbHRlcm5hdGlvbl0gKz0gXCIsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbW50LmxvY2F0b3JbYWx0ZXJuYXRpb25dICs9IGFsdExvY0FyclthbG5keF0pIDogbG1udC5sb2NhdG9yW2FsdGVybmF0aW9uXSA9IHBhcnNlSW50KGFsdExvY0FyclthbG5keF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG1udC5hbHRlcm5hdGlvbiA9IGFsdGVybmF0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgIT09IGxtbnQubG9jYXRvclthbHRlcm5hdGlvbl0pIHJldHVybiBsbW50O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSkpLCBtYXRjaGVzID0gY3VycmVudE1hdGNoZXMuY29uY2F0KG1hbHRlcm5hdGVNYXRjaGVzKSwgdGVzdFBvcyA9IHBvcywgaW5zZXJ0U3RvcCA9IG1hdGNoZXMubGVuZ3RoID4gMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSBtYXRjaCA9IGFsdGVybmF0ZVRva2VuLm1hdGNoZXNbYWx0SW5kZXhdID8gaGFuZGxlTWF0Y2goYWx0ZXJuYXRlVG9rZW4ubWF0Y2hlc1thbHRJbmRleF0sIFthbHRJbmRleF0uY29uY2F0KGxvb3BOZHgpLCBxdWFudGlmaWVyUmVjdXJzZSkgOiAhMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaCkgcmV0dXJuICEwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoLmlzUXVhbnRpZmllciAmJiBxdWFudGlmaWVyUmVjdXJzZSAhPT0gbWFza1Rva2VuLm1hdGNoZXNbJC5pbkFycmF5KG1hdGNoLCBtYXNrVG9rZW4ubWF0Y2hlcykgLSAxXSkgZm9yICh2YXIgcXQgPSBtYXRjaCwgcW5keCA9IG5keEluaXRpYWxpemVyLmxlbmd0aCA+IDAgPyBuZHhJbml0aWFsaXplci5zaGlmdCgpIDogMDsgcW5keCA8IChpc05hTihxdC5xdWFudGlmaWVyLm1heCkgPyBxbmR4ICsgMSA6IHF0LnF1YW50aWZpZXIubWF4KSAmJiBwb3MgPj0gdGVzdFBvczsgcW5keCsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG9rZW5Hcm91cCA9IG1hc2tUb2tlbi5tYXRjaGVzWyQuaW5BcnJheShxdCwgbWFza1Rva2VuLm1hdGNoZXMpIC0gMV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2ggPSBoYW5kbGVNYXRjaCh0b2tlbkdyb3VwLCBbcW5keF0uY29uY2F0KGxvb3BOZHgpLCB0b2tlbkdyb3VwKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsYXRlc3RNYXRjaCA9IG1hdGNoZXNbbWF0Y2hlcy5sZW5ndGggLSAxXS5tYXRjaCwgbGF0ZXN0TWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyID0gcW5keCA+IHF0LnF1YW50aWZpZXIubWluIC0gMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc0ZpcnN0TWF0Y2ggPSAwID09PSAkLmluQXJyYXkobGF0ZXN0TWF0Y2gsIHRva2VuR3JvdXAubWF0Y2hlcykpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHFuZHggPiBxdC5xdWFudGlmaWVyLm1pbiAtIDEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydFN0b3AgPSAhMCwgdGVzdFBvcyA9IHBvcztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKG1hdGNoID0gcmVzb2x2ZVRlc3RGcm9tVG9rZW4obWF0Y2gsIG5keEluaXRpYWxpemVyLCBsb29wTmR4LCBxdWFudGlmaWVyUmVjdXJzZSkpIHJldHVybiAhMDtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgdGVzdFBvcysrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdG5keCA9IG5keEluaXRpYWxpemVyLmxlbmd0aCA+IDAgPyBuZHhJbml0aWFsaXplci5zaGlmdCgpIDogMDsgdG5keCA8IG1hc2tUb2tlbi5tYXRjaGVzLmxlbmd0aDsgdG5keCsrKSBpZiAobWFza1Rva2VuLm1hdGNoZXNbdG5keF0uaXNRdWFudGlmaWVyICE9PSAhMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IGhhbmRsZU1hdGNoKG1hc2tUb2tlbi5tYXRjaGVzW3RuZHhdLCBbdG5keF0uY29uY2F0KGxvb3BOZHgpLCBxdWFudGlmaWVyUmVjdXJzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoICYmIHRlc3RQb3MgPT09IHBvcykgcmV0dXJuIG1hdGNoO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0ZXN0UG9zID4gcG9zKSBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgbGF0ZXN0TWF0Y2gsIGlzRmlyc3RNYXRjaCwgbWFza1Rva2VucyA9IGdldE1hc2tTZXQoKS5tYXNrVG9rZW4sIHRlc3RQb3MgPSBuZHhJbnRsenIgPyB0c3RQcyA6IDAsIG5keEluaXRpYWxpemVyID0gbmR4SW50bHpyIHx8IFswXSwgbWF0Y2hlcyA9IFtdLCBpbnNlcnRTdG9wID0gITE7XHJcbiAgICAgICAgICAgIGlmIChjYWNoZWFibGUgPT09ICEwICYmIGdldE1hc2tTZXQoKS50ZXN0c1twb3NdKSByZXR1cm4gZ2V0TWFza1NldCgpLnRlc3RzW3Bvc107XHJcbiAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IG5keEludGx6cikge1xyXG4gICAgICAgICAgICAgICAgZm9yICh2YXIgdGVzdCwgcHJldmlvdXNQb3MgPSBwb3MgLSAxOyB2b2lkIDAgPT09ICh0ZXN0ID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3ByZXZpb3VzUG9zXSkgJiYgcHJldmlvdXNQb3MgPiAtMSAmJiAoIWdldE1hc2tTZXQoKS50ZXN0c1twcmV2aW91c1Bvc10gfHwgdm9pZCAwID09PSAodGVzdCA9IGdldE1hc2tTZXQoKS50ZXN0c1twcmV2aW91c1Bvc11bMF0pKSA7KSBwcmV2aW91c1Bvcy0tO1xyXG4gICAgICAgICAgICAgICAgdm9pZCAwICE9PSB0ZXN0ICYmIHByZXZpb3VzUG9zID4gLTEgJiYgKHRlc3RQb3MgPSBwcmV2aW91c1BvcywgbmR4SW5pdGlhbGl6ZXIgPSB0ZXN0LmxvY2F0b3Iuc2xpY2UoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZm9yICh2YXIgbXRuZHggPSBuZHhJbml0aWFsaXplci5zaGlmdCgpIDsgbXRuZHggPCBtYXNrVG9rZW5zLmxlbmd0aDsgbXRuZHgrKykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1hdGNoID0gcmVzb2x2ZVRlc3RGcm9tVG9rZW4obWFza1Rva2Vuc1ttdG5keF0sIG5keEluaXRpYWxpemVyLCBbbXRuZHhdKTtcclxuICAgICAgICAgICAgICAgIGlmIChtYXRjaCAmJiB0ZXN0UG9zID09PSBwb3MgfHwgdGVzdFBvcyA+IHBvcykgYnJlYWs7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuICgwID09PSBtYXRjaGVzLmxlbmd0aCB8fCBpbnNlcnRTdG9wKSAmJiBtYXRjaGVzLnB1c2goe1xyXG4gICAgICAgICAgICAgICAgbWF0Y2g6IHtcclxuICAgICAgICAgICAgICAgICAgICBmbjogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMCxcclxuICAgICAgICAgICAgICAgICAgICBvcHRpb25hbGl0eTogITAsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIGRlZjogXCJcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGxvY2F0b3I6IFtdXHJcbiAgICAgICAgICAgIH0pLCBnZXRNYXNrU2V0KCkudGVzdHNbcG9zXSA9ICQuZXh0ZW5kKCEwLCBbXSwgbWF0Y2hlcyksIGdldE1hc2tTZXQoKS50ZXN0c1twb3NdO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBnZXRCdWZmZXJUZW1wbGF0ZSgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gZ2V0TWFza1NldCgpLl9idWZmZXIgJiYgKGdldE1hc2tTZXQoKS5fYnVmZmVyID0gZ2V0TWFza1RlbXBsYXRlKCExLCAxKSksXHJcbiAgICAgICAgICAgIGdldE1hc2tTZXQoKS5fYnVmZmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBnZXRCdWZmZXIobm9DYWNoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gKHZvaWQgMCA9PT0gZ2V0TWFza1NldCgpLmJ1ZmZlciB8fCBub0NhY2hlID09PSAhMCkgJiYgKG5vQ2FjaGUgPT09ICEwICYmIChnZXRNYXNrU2V0KCkudGVzdCA9IHt9KSxcclxuICAgICAgICAgICAgZ2V0TWFza1NldCgpLmJ1ZmZlciA9IGdldE1hc2tUZW1wbGF0ZSghMCwgZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSwgITApKSwgZ2V0TWFza1NldCgpLmJ1ZmZlcjtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVmcmVzaEZyb21CdWZmZXIoc3RhcnQsIGVuZCwgYnVmZmVyKSB7XHJcbiAgICAgICAgICAgIHZhciBpO1xyXG4gICAgICAgICAgICBpZiAoYnVmZmVyID0gYnVmZmVyLCBzdGFydCA9PT0gITApIHJlc2V0TWFza1NldCgpLCBzdGFydCA9IDAsIGVuZCA9IGJ1ZmZlci5sZW5ndGg7IGVsc2UgZm9yIChpID0gc3RhcnQ7IGVuZCA+IGk7IGkrKykgZGVsZXRlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXSxcclxuICAgICAgICAgICAgZGVsZXRlIGdldE1hc2tTZXQoKS50ZXN0c1tpXTtcclxuICAgICAgICAgICAgZm9yIChpID0gc3RhcnQ7IGVuZCA+IGk7IGkrKykgcmVzZXRNYXNrU2V0KCEwKSwgYnVmZmVyW2ldICE9PSBvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIgJiYgaXNWYWxpZChpLCBidWZmZXJbaV0sICEwLCAhMCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGNhc2luZyhlbGVtLCB0ZXN0KSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGVzdC5jYXNpbmcpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgXCJ1cHBlclwiOlxyXG4gICAgICAgICAgICAgICAgICAgIGVsZW0gPSBlbGVtLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgY2FzZSBcImxvd2VyXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgZWxlbSA9IGVsZW0udG9Mb3dlckNhc2UoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gZWxlbTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gY2hlY2tBbHRlcm5hdGlvbk1hdGNoKGFsdEFycjEsIGFsdEFycjIpIHtcclxuICAgICAgICAgICAgZm9yICh2YXIgYWx0QXJyQyA9IG9wdHMuZ3JlZWR5ID8gYWx0QXJyMiA6IGFsdEFycjIuc2xpY2UoMCwgMSksIGlzTWF0Y2ggPSAhMSwgYWxuZHggPSAwOyBhbG5keCA8IGFsdEFycjEubGVuZ3RoOyBhbG5keCsrKSBpZiAoLTEgIT09ICQuaW5BcnJheShhbHRBcnIxW2FsbmR4XSwgYWx0QXJyQykpIHtcclxuICAgICAgICAgICAgICAgIGlzTWF0Y2ggPSAhMDtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBpc01hdGNoO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBpc1ZhbGlkKHBvcywgYywgc3RyaWN0LCBmcm9tU2V0VmFsaWQpIHtcclxuICAgICAgICAgICAgZnVuY3Rpb24gX2lzVmFsaWQocG9zaXRpb24sIGMsIHN0cmljdCwgZnJvbVNldFZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgcnNsdCA9ICExO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuICQuZWFjaChnZXRUZXN0cyhwb3NpdGlvbiksIGZ1bmN0aW9uIChuZHgsIHRzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHRlc3QgPSB0c3QubWF0Y2gsIGxvb3BlbmQgPSBjID8gMSA6IDAsIGNocnMgPSBcIlwiLCBpID0gdGVzdC5jYXJkaW5hbGl0eTsgaSA+IGxvb3BlbmQ7IGktLSkgY2hycyArPSBnZXRCdWZmZXJFbGVtZW50KHBvc2l0aW9uIC0gKGkgLSAxKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMgJiYgKGNocnMgKz0gYyksIGdldEJ1ZmZlcighMCksIHJzbHQgPSBudWxsICE9IHRlc3QuZm4gPyB0ZXN0LmZuLnRlc3QoY2hycywgZ2V0TWFza1NldCgpLCBwb3NpdGlvbiwgc3RyaWN0LCBvcHRzKSA6IGMgIT09IHRlc3QuZGVmICYmIGMgIT09IG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlciB8fCBcIlwiID09PSB0ZXN0LmRlZiA/ICExIDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjOiB0ZXN0LmRlZixcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3NpdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIH0sIHJzbHQgIT09ICExKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBlbGVtID0gdm9pZCAwICE9PSByc2x0LmMgPyByc2x0LmMgOiBjO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlbGVtID0gZWxlbSA9PT0gb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyICYmIG51bGwgPT09IHRlc3QuZm4gPyB0ZXN0LmRlZiA6IGVsZW07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWxpZGF0ZWRQb3MgPSBwb3NpdGlvbiwgcG9zc2libGVNb2RpZmllZEJ1ZmZlciA9IGdldEJ1ZmZlcigpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSByc2x0LnJlbW92ZSAmJiAoJC5pc0FycmF5KHJzbHQucmVtb3ZlKSB8fCAocnNsdC5yZW1vdmUgPSBbcnNsdC5yZW1vdmVdKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJC5lYWNoKHJzbHQucmVtb3ZlLnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBiIC0gYTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSksIGZ1bmN0aW9uIChuZHgsIGxtbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cmlwVmFsaWRQb3NpdGlvbnMobG1udCwgbG1udCArIDEsICEwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSkpLCB2b2lkIDAgIT09IHJzbHQuaW5zZXJ0ICYmICgkLmlzQXJyYXkocnNsdC5pbnNlcnQpIHx8IChyc2x0Lmluc2VydCA9IFtyc2x0Lmluc2VydF0pLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkLmVhY2gocnNsdC5pbnNlcnQuc29ydChmdW5jdGlvbiAoYSwgYikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEgLSBiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSwgZnVuY3Rpb24gKG5keCwgbG1udCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZChsbW50LnBvcywgbG1udC5jLCAhMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pKSwgcnNsdC5yZWZyZXNoRnJvbUJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZnJlc2ggPSByc2x0LnJlZnJlc2hGcm9tQnVmZmVyO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHN0cmljdCA9ICEwLCByZWZyZXNoRnJvbUJ1ZmZlcihyZWZyZXNoID09PSAhMCA/IHJlZnJlc2ggOiByZWZyZXNoLnN0YXJ0LCByZWZyZXNoLmVuZCwgcG9zc2libGVNb2RpZmllZEJ1ZmZlciksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2b2lkIDAgPT09IHJzbHQucG9zICYmIHZvaWQgMCA9PT0gcnNsdC5jKSByZXR1cm4gcnNsdC5wb3MgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgITE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodmFsaWRhdGVkUG9zID0gdm9pZCAwICE9PSByc2x0LnBvcyA/IHJzbHQucG9zIDogcG9zaXRpb24sIHZhbGlkYXRlZFBvcyAhPT0gcG9zaXRpb24pIHJldHVybiByc2x0ID0gJC5leHRlbmQocnNsdCwgaXNWYWxpZCh2YWxpZGF0ZWRQb3MsIGVsZW0sICEwKSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAhMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmIChyc2x0ICE9PSAhMCAmJiB2b2lkIDAgIT09IHJzbHQucG9zICYmIHJzbHQucG9zICE9PSBwb3NpdGlvbiAmJiAodmFsaWRhdGVkUG9zID0gcnNsdC5wb3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyKHBvc2l0aW9uLCB2YWxpZGF0ZWRQb3MsIGdldEJ1ZmZlcigpLnNsaWNlKCkpLCB2YWxpZGF0ZWRQb3MgIT09IHBvc2l0aW9uKSkgcmV0dXJuIHJzbHQgPSAkLmV4dGVuZChyc2x0LCBpc1ZhbGlkKHZhbGlkYXRlZFBvcywgZWxlbSwgITApKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgITE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByc2x0ICE9PSAhMCAmJiB2b2lkIDAgPT09IHJzbHQucG9zICYmIHZvaWQgMCA9PT0gcnNsdC5jID8gITEgOiAobmR4ID4gMCAmJiByZXNldE1hc2tTZXQoITApLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZXRWYWxpZFBvc2l0aW9uKHZhbGlkYXRlZFBvcywgJC5leHRlbmQoe30sIHRzdCwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGNhc2luZyhlbGVtLCB0ZXN0KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSwgZnJvbVNldFZhbGlkKSB8fCAocnNsdCA9ICExKSwgITEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pLCByc2x0O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGFsdGVybmF0ZShwb3MsIGMsIHN0cmljdCwgZnJvbVNldFZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBsYXN0QWx0LCBhbHRlcm5hdGlvbiwgaXNWYWxpZFJzbHQsIGFsdFBvcywgaSwgdmFsaWRQb3MsIHZhbGlkUHNDbG9uZSA9ICQuZXh0ZW5kKCEwLCB7fSwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zKSwgbEFsdCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKCkgOyBsQWx0ID49IDAgJiYgKGFsdFBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsQWx0XSxcclxuICAgICAgICAgICAgICAgICFhbHRQb3MgfHwgdm9pZCAwID09PSBhbHRQb3MuYWx0ZXJuYXRpb24gfHwgKGxhc3RBbHQgPSBsQWx0LCBhbHRlcm5hdGlvbiA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsYXN0QWx0XS5hbHRlcm5hdGlvbixcclxuICAgICAgICAgICAgICAgIGdldFRlc3RUZW1wbGF0ZShsYXN0QWx0KS5sb2NhdG9yW2FsdFBvcy5hbHRlcm5hdGlvbl0gPT09IGFsdFBvcy5sb2NhdG9yW2FsdFBvcy5hbHRlcm5hdGlvbl0pKSA7IGxBbHQtLSk7XHJcbiAgICAgICAgICAgICAgICBpZiAodm9pZCAwICE9PSBhbHRlcm5hdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxhc3RBbHQgPSBwYXJzZUludChsYXN0QWx0KTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBkZWNpc2lvblBvcyBpbiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMpIGlmIChkZWNpc2lvblBvcyA9IHBhcnNlSW50KGRlY2lzaW9uUG9zKSxcclxuICAgICAgICAgICAgICAgICAgICBhbHRQb3MgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbZGVjaXNpb25Qb3NdLCBkZWNpc2lvblBvcyA+PSBsYXN0QWx0ICYmIHZvaWQgMCAhPT0gYWx0UG9zLmFsdGVybmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhbHROZHhzID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2xhc3RBbHRdLmxvY2F0b3JbYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpLCBkZWNpc2lvblRha2VyID0gYWx0UG9zLmxvY2F0b3JbYWx0ZXJuYXRpb25dIHx8IGFsdE5keHNbMF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlY2lzaW9uVGFrZXIubGVuZ3RoID4gMCAmJiAoZGVjaXNpb25UYWtlciA9IGRlY2lzaW9uVGFrZXIuc3BsaXQoXCIsXCIpWzBdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgbW5keCA9IDA7IG1uZHggPCBhbHROZHhzLmxlbmd0aDsgbW5keCsrKSBpZiAoZGVjaXNpb25UYWtlciA8IGFsdE5keHNbbW5keF0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHBvc3NpYmlsaXR5UG9zLCBwb3NzaWJpbGl0aWVzLCBkcCA9IGRlY2lzaW9uUG9zOyBkcCA+PSAwOyBkcC0tKSBpZiAocG9zc2liaWxpdHlQb3MgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbZHBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBwb3NzaWJpbGl0eVBvcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvc3NpYmlsaXRpZXMgPSBwb3NzaWJpbGl0eVBvcy5sb2NhdG9yW2FsdGVybmF0aW9uXSwgcG9zc2liaWxpdHlQb3MubG9jYXRvclthbHRlcm5hdGlvbl0gPSBwYXJzZUludChhbHROZHhzW21uZHhdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkZWNpc2lvblRha2VyICE9PSBwb3NzaWJpbGl0eVBvcy5sb2NhdG9yW2FsdGVybmF0aW9uXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB2YWxpZElucHV0cyA9IFtdLCBzdGF0aWNJbnB1dHNCZWZvcmVQb3MgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAoaSA9IGRlY2lzaW9uUG9zICsgMTsgaSA8IGdldExhc3RWYWxpZFBvc2l0aW9uKCkgKyAxOyBpKyspIHZhbGlkUG9zID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkUG9zICYmIChudWxsICE9IHZhbGlkUG9zLm1hdGNoLmZuID8gdmFsaWRJbnB1dHMucHVzaCh2YWxpZFBvcy5pbnB1dCkgOiBwb3MgPiBpICYmIHN0YXRpY0lucHV0c0JlZm9yZVBvcysrKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWxldGUgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldLCBkZWxldGUgZ2V0TWFza1NldCgpLnRlc3RzW2ldO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAocmVzZXRNYXNrU2V0KCEwKSwgb3B0cy5rZWVwU3RhdGljID0gIW9wdHMua2VlcFN0YXRpYywgaXNWYWxpZFJzbHQgPSAhMDsgdmFsaWRJbnB1dHMubGVuZ3RoID4gMDspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlucHV0ID0gdmFsaWRJbnB1dHMuc2hpZnQoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlucHV0ICE9PSBvcHRzLnNraXBPcHRpb25hbFBhcnRDaGFyYWN0ZXIgJiYgIShpc1ZhbGlkUnNsdCA9IGlzVmFsaWQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSArIDEsIGlucHV0LCAhMSwgITApKSkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwb3NzaWJpbGl0eVBvcy5hbHRlcm5hdGlvbiA9IGFsdGVybmF0aW9uLCBwb3NzaWJpbGl0eVBvcy5sb2NhdG9yW2FsdGVybmF0aW9uXSA9IHBvc3NpYmlsaXRpZXMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZFJzbHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRhcmdldEx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKHBvcykgKyAxLCBzdGF0aWNJbnB1dHNCZWZvcmVQb3NBbHRlcm5hdGUgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGkgPSBkZWNpc2lvblBvcyArIDE7IGkgPCBnZXRMYXN0VmFsaWRQb3NpdGlvbigpICsgMTsgaSsrKSB2YWxpZFBvcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tpXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRQb3MgJiYgbnVsbCA9PSB2YWxpZFBvcy5tYXRjaC5mbiAmJiBwb3MgPiBpICYmIHN0YXRpY0lucHV0c0JlZm9yZVBvc0FsdGVybmF0ZSsrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MgKz0gc3RhdGljSW5wdXRzQmVmb3JlUG9zQWx0ZXJuYXRlIC0gc3RhdGljSW5wdXRzQmVmb3JlUG9zLCBpc1ZhbGlkUnNsdCA9IGlzVmFsaWQocG9zID4gdGFyZ2V0THZwID8gdGFyZ2V0THZwIDogcG9zLCBjLCBzdHJpY3QsIGZyb21TZXRWYWxpZCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLmtlZXBTdGF0aWMgPSAhb3B0cy5rZWVwU3RhdGljLCBpc1ZhbGlkUnNsdCkgcmV0dXJuIGlzVmFsaWRSc2x0O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCgpLCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMgPSAkLmV4dGVuZCghMCwge30sIHZhbGlkUHNDbG9uZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICExO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHRyYWNrYmFja0FsdGVybmF0aW9ucyhvcmlnaW5hbFBvcywgbmV3UG9zKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB2cCA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tuZXdQb3NdLCB0YXJnZXRMb2NhdG9yID0gdnAubG9jYXRvciwgdGxsID0gdGFyZ2V0TG9jYXRvci5sZW5ndGgsIHBzID0gb3JpZ2luYWxQb3M7IG5ld1BvcyA+IHBzOyBwcysrKSBpZiAoIWlzTWFzayhwcykpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdHMgPSBnZXRUZXN0cyhwcyksIGJlc3RNYXRjaCA9IHRlc3RzWzBdLCBlcXVhbGl0eSA9IC0xO1xyXG4gICAgICAgICAgICAgICAgICAgICQuZWFjaCh0ZXN0cywgZnVuY3Rpb24gKG5keCwgdHN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyB0bGwgPiBpOyBpKyspIHRzdC5sb2NhdG9yW2ldICYmIGNoZWNrQWx0ZXJuYXRpb25NYXRjaCh0c3QubG9jYXRvcltpXS50b1N0cmluZygpLnNwbGl0KFwiLFwiKSwgdGFyZ2V0TG9jYXRvcltpXS50b1N0cmluZygpLnNwbGl0KFwiLFwiKSkgJiYgaSA+IGVxdWFsaXR5ICYmIChlcXVhbGl0eSA9IGksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJlc3RNYXRjaCA9IHRzdCk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSksIHNldFZhbGlkUG9zaXRpb24ocHMsICQuZXh0ZW5kKHt9LCBiZXN0TWF0Y2gsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXQ6IGJlc3RNYXRjaC5tYXRjaC5kZWZcclxuICAgICAgICAgICAgICAgICAgICB9KSwgITApO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHN0cmljdCA9IHN0cmljdCA9PT0gITA7XHJcbiAgICAgICAgICAgIGZvciAodmFyIGJ1ZmZlciA9IGdldEJ1ZmZlcigpLCBwbmR4ID0gcG9zIC0gMTsgcG5keCA+IC0xICYmICFnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG5keF07IHBuZHgtLSk7XHJcbiAgICAgICAgICAgIGZvciAocG5keCsrOyBwb3MgPiBwbmR4OyBwbmR4KyspIHZvaWQgMCA9PT0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW3BuZHhdICYmICgoIWlzTWFzayhwbmR4KSB8fCBidWZmZXJbcG5keF0gIT09IGdldFBsYWNlaG9sZGVyKHBuZHgpKSAmJiBnZXRUZXN0cyhwbmR4KS5sZW5ndGggPiAxIHx8IGJ1ZmZlcltwbmR4XSA9PT0gb3B0cy5yYWRpeFBvaW50IHx8IFwiMFwiID09PSBidWZmZXJbcG5keF0gJiYgJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgYnVmZmVyKSA8IHBuZHgpICYmIF9pc1ZhbGlkKHBuZHgsIGJ1ZmZlcltwbmR4XSwgITApO1xyXG4gICAgICAgICAgICB2YXIgbWFza1BvcyA9IHBvcywgcmVzdWx0ID0gITEsIHBvc2l0aW9uc0Nsb25lID0gJC5leHRlbmQoITAsIHt9LCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMpO1xyXG4gICAgICAgICAgICBpZiAobWFza1BvcyA8IGdldE1hc2tMZW5ndGgoKSAmJiAocmVzdWx0ID0gX2lzVmFsaWQobWFza1BvcywgYywgc3RyaWN0LCBmcm9tU2V0VmFsaWQpLFxyXG4gICAgICAgICAgICAoIXN0cmljdCB8fCBmcm9tU2V0VmFsaWQpICYmIHJlc3VsdCA9PT0gITEpKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudFBvc1ZhbGlkID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW21hc2tQb3NdO1xyXG4gICAgICAgICAgICAgICAgaWYgKCFjdXJyZW50UG9zVmFsaWQgfHwgbnVsbCAhPT0gY3VycmVudFBvc1ZhbGlkLm1hdGNoLmZuIHx8IGN1cnJlbnRQb3NWYWxpZC5tYXRjaC5kZWYgIT09IGMgJiYgYyAhPT0gb3B0cy5za2lwT3B0aW9uYWxQYXJ0Q2hhcmFjdGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKChvcHRzLmluc2VydE1vZGUgfHwgdm9pZCAwID09PSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbc2Vla05leHQobWFza1BvcyldKSAmJiAhaXNNYXNrKG1hc2tQb3MpKSBmb3IgKHZhciBuUG9zID0gbWFza1BvcyArIDEsIHNuUG9zID0gc2Vla05leHQobWFza1BvcykgOyBzblBvcyA+PSBuUG9zOyBuUG9zKyspIGlmIChyZXN1bHQgPSBfaXNWYWxpZChuUG9zLCBjLCBzdHJpY3QsIGZyb21TZXRWYWxpZCksXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0ICE9PSAhMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0cmFja2JhY2tBbHRlcm5hdGlvbnMobWFza1BvcywgblBvcyksIG1hc2tQb3MgPSBuUG9zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9IGVsc2UgcmVzdWx0ID0ge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhcmV0OiBzZWVrTmV4dChtYXNrUG9zKVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAocmVzdWx0ID09PSAhMSAmJiBvcHRzLmtlZXBTdGF0aWMgJiYgaXNDb21wbGV0ZShidWZmZXIpICYmIChyZXN1bHQgPSBhbHRlcm5hdGUocG9zLCBjLCBzdHJpY3QsIGZyb21TZXRWYWxpZCkpLFxyXG4gICAgICAgICAgICByZXN1bHQgPT09ICEwICYmIChyZXN1bHQgPSB7XHJcbiAgICAgICAgICAgICAgICBwb3M6IG1hc2tQb3NcclxuICAgICAgICAgICAgfSksICQuaXNGdW5jdGlvbihvcHRzLnBvc3RWYWxpZGF0aW9uKSAmJiByZXN1bHQgIT09ICExICYmICFzdHJpY3QpIHtcclxuICAgICAgICAgICAgICAgIHZhciBwb3N0VmFsaWRSZXN1bHQgPSBvcHRzLnBvc3RWYWxpZGF0aW9uKGdldEJ1ZmZlcighMCksIG9wdHMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKHBvc3RWYWxpZFJlc3VsdCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwb3N0VmFsaWRSZXN1bHQucmVmcmVzaEZyb21CdWZmZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJlZnJlc2ggPSBwb3N0VmFsaWRSZXN1bHQucmVmcmVzaEZyb21CdWZmZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyKHJlZnJlc2ggPT09ICEwID8gcmVmcmVzaCA6IHJlZnJlc2guc3RhcnQsIHJlZnJlc2guZW5kLCBwb3N0VmFsaWRSZXN1bHQuYnVmZmVyKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzZXRNYXNrU2V0KCEwKSwgcmVzdWx0ID0gcG9zdFZhbGlkUmVzdWx0O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gZWxzZSByZXNldE1hc2tTZXQoITApLCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMgPSAkLmV4dGVuZCghMCwge30sIHBvc2l0aW9uc0Nsb25lKSxcclxuICAgICAgICAgICAgICAgIHJlc3VsdCA9ICExO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGlzTWFzayhwb3MpIHtcclxuICAgICAgICAgICAgdmFyIHRlc3QgPSBnZXRUZXN0KHBvcyk7XHJcbiAgICAgICAgICAgIGlmIChudWxsICE9IHRlc3QuZm4pIHJldHVybiB0ZXN0LmZuO1xyXG4gICAgICAgICAgICBpZiAocG9zID4gLTEgJiYgIW9wdHMua2VlcFN0YXRpYyAmJiB2b2lkIDAgPT09IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciB0ZXN0cyA9IGdldFRlc3RzKHBvcyksIHN0YXRpY0FsdGVybmF0aW9ucyA9ICEwLCBpID0gMDsgaSA8IHRlc3RzLmxlbmd0aDsgaSsrKSBpZiAoXCJcIiAhPT0gdGVzdHNbaV0ubWF0Y2guZGVmICYmICh2b2lkIDAgPT09IHRlc3RzW2ldLmFsdGVybmF0aW9uIHx8IHRlc3RzW2ldLmxvY2F0b3JbdGVzdHNbaV0uYWx0ZXJuYXRpb25dLmxlbmd0aCA+IDEpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc3RhdGljQWx0ZXJuYXRpb25zID0gITE7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGljQWx0ZXJuYXRpb25zO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiAhMTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0TWFza0xlbmd0aCgpIHtcclxuICAgICAgICAgICAgdmFyIG1hc2tMZW5ndGg7XHJcbiAgICAgICAgICAgIG1heExlbmd0aCA9IHZvaWQgMCAhPT0gZWwgPyBlbC5tYXhMZW5ndGggOiB2b2lkIDAsIC0xID09PSBtYXhMZW5ndGggJiYgKG1heExlbmd0aCA9IHZvaWQgMCk7XHJcbiAgICAgICAgICAgIHZhciBwb3MsIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKCksIHRlc3RQb3MgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbHZwXSwgbmR4SW50bHpyID0gdm9pZCAwICE9PSB0ZXN0UG9zID8gdGVzdFBvcy5sb2NhdG9yLnNsaWNlKCkgOiB2b2lkIDA7XHJcbiAgICAgICAgICAgIGZvciAocG9zID0gbHZwICsgMTsgdm9pZCAwID09PSB0ZXN0UG9zIHx8IG51bGwgIT09IHRlc3RQb3MubWF0Y2guZm4gfHwgbnVsbCA9PT0gdGVzdFBvcy5tYXRjaC5mbiAmJiBcIlwiICE9PSB0ZXN0UG9zLm1hdGNoLmRlZjsgcG9zKyspIHRlc3RQb3MgPSBnZXRUZXN0VGVtcGxhdGUocG9zLCBuZHhJbnRsenIsIHBvcyAtIDEpLFxyXG4gICAgICAgICAgICBuZHhJbnRsenIgPSB0ZXN0UG9zLmxvY2F0b3Iuc2xpY2UoKTtcclxuICAgICAgICAgICAgdmFyIGxhc3RUZXN0ID0gZ2V0VGVzdChwb3MgLSAxKTtcclxuICAgICAgICAgICAgcmV0dXJuIG1hc2tMZW5ndGggPSBcIlwiICE9PSBsYXN0VGVzdC5kZWYgPyBwb3MgOiBwb3MgLSAxLCB2b2lkIDAgPT09IG1heExlbmd0aCB8fCBtYXhMZW5ndGggPiBtYXNrTGVuZ3RoID8gbWFza0xlbmd0aCA6IG1heExlbmd0aDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gc2Vla05leHQocG9zLCBuZXdCbG9jaykge1xyXG4gICAgICAgICAgICB2YXIgbWFza0wgPSBnZXRNYXNrTGVuZ3RoKCk7XHJcbiAgICAgICAgICAgIGlmIChwb3MgPj0gbWFza0wpIHJldHVybiBtYXNrTDtcclxuICAgICAgICAgICAgZm9yICh2YXIgcG9zaXRpb24gPSBwb3M7ICsrcG9zaXRpb24gPCBtYXNrTCAmJiAobmV3QmxvY2sgPT09ICEwICYmIChnZXRUZXN0KHBvc2l0aW9uKS5uZXdCbG9ja01hcmtlciAhPT0gITAgfHwgIWlzTWFzayhwb3NpdGlvbikpIHx8IG5ld0Jsb2NrICE9PSAhMCAmJiAhaXNNYXNrKHBvc2l0aW9uKSAmJiAob3B0cy5ub2p1bXBzICE9PSAhMCB8fCBvcHRzLm5vanVtcHNUaHJlc2hvbGQgPiBwb3NpdGlvbikpIDspO1xyXG4gICAgICAgICAgICByZXR1cm4gcG9zaXRpb247XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHNlZWtQcmV2aW91cyhwb3MsIG5ld0Jsb2NrKSB7XHJcbiAgICAgICAgICAgIHZhciBwb3NpdGlvbiA9IHBvcztcclxuICAgICAgICAgICAgaWYgKDAgPj0gcG9zaXRpb24pIHJldHVybiAwO1xyXG4gICAgICAgICAgICBmb3IgKDsgLS1wb3NpdGlvbiA+IDAgJiYgKG5ld0Jsb2NrID09PSAhMCAmJiBnZXRUZXN0KHBvc2l0aW9uKS5uZXdCbG9ja01hcmtlciAhPT0gITAgfHwgbmV3QmxvY2sgIT09ICEwICYmICFpc01hc2socG9zaXRpb24pKSA7KTtcclxuICAgICAgICAgICAgcmV0dXJuIHBvc2l0aW9uO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBnZXRCdWZmZXJFbGVtZW50KHBvc2l0aW9uKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB2b2lkIDAgPT09IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NpdGlvbl0gPyBnZXRQbGFjZWhvbGRlcihwb3NpdGlvbikgOiBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbcG9zaXRpb25dLmlucHV0O1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiB3cml0ZUJ1ZmZlcihpbnB1dCwgYnVmZmVyLCBjYXJldFBvcywgZXZlbnQsIHRyaWdnZXJJbnB1dEV2ZW50KSB7XHJcbiAgICAgICAgICAgIGlmIChldmVudCAmJiAkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZVdyaXRlKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG9wdHMub25CZWZvcmVXcml0ZS5jYWxsKGlucHV0LCBldmVudCwgYnVmZmVyLCBjYXJldFBvcywgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICBpZiAocmVzdWx0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJlc3VsdC5yZWZyZXNoRnJvbUJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVmcmVzaCA9IHJlc3VsdC5yZWZyZXNoRnJvbUJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXIocmVmcmVzaCA9PT0gITAgPyByZWZyZXNoIDogcmVmcmVzaC5zdGFydCwgcmVmcmVzaC5lbmQsIHJlc3VsdC5idWZmZXIgfHwgYnVmZmVyKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyID0gZ2V0QnVmZmVyKCEwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgdm9pZCAwICE9PSBjYXJldFBvcyAmJiAoY2FyZXRQb3MgPSB2b2lkIDAgIT09IHJlc3VsdC5jYXJldCA/IHJlc3VsdC5jYXJldCA6IGNhcmV0UG9zKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlU2V0KGJ1ZmZlci5qb2luKFwiXCIpKSwgdm9pZCAwID09PSBjYXJldFBvcyB8fCB2b2lkIDAgIT09IGV2ZW50ICYmIFwiYmx1clwiID09PSBldmVudC50eXBlIHx8IGNhcmV0KGlucHV0LCBjYXJldFBvcyksXHJcbiAgICAgICAgICAgIHRyaWdnZXJJbnB1dEV2ZW50ID09PSAhMCAmJiAoc2tpcElucHV0RXZlbnQgPSAhMCwgJChpbnB1dCkudHJpZ2dlcihcImlucHV0XCIpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZ2V0UGxhY2Vob2xkZXIocG9zLCB0ZXN0KSB7XHJcbiAgICAgICAgICAgIGlmICh0ZXN0ID0gdGVzdCB8fCBnZXRUZXN0KHBvcyksIHZvaWQgMCAhPT0gdGVzdC5wbGFjZWhvbGRlcikgcmV0dXJuIHRlc3QucGxhY2Vob2xkZXI7XHJcbiAgICAgICAgICAgIGlmIChudWxsID09PSB0ZXN0LmZuKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAocG9zID4gLTEgJiYgIW9wdHMua2VlcFN0YXRpYyAmJiB2b2lkIDAgPT09IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3NdKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgcHJldlRlc3QsIHRlc3RzID0gZ2V0VGVzdHMocG9zKSwgaGFzQWx0ZXJuYXRpb25zID0gITEsIGkgPSAwOyBpIDwgdGVzdHMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHByZXZUZXN0ICYmIFwiXCIgIT09IHRlc3RzW2ldLm1hdGNoLmRlZiAmJiB0ZXN0c1tpXS5tYXRjaC5kZWYgIT09IHByZXZUZXN0Lm1hdGNoLmRlZiAmJiAodm9pZCAwID09PSB0ZXN0c1tpXS5hbHRlcm5hdGlvbiB8fCB0ZXN0c1tpXS5hbHRlcm5hdGlvbiA9PT0gcHJldlRlc3QuYWx0ZXJuYXRpb24pKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBoYXNBbHRlcm5hdGlvbnMgPSAhMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRlc3RzW2ldLm1hdGNoLm9wdGlvbmFsaXR5ICE9PSAhMCAmJiB0ZXN0c1tpXS5tYXRjaC5vcHRpb25hbFF1YW50aWZpZXIgIT09ICEwICYmIChwcmV2VGVzdCA9IHRlc3RzW2ldKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc0FsdGVybmF0aW9ucykgcmV0dXJuIG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KHBvcyAlIG9wdHMucGxhY2Vob2xkZXIubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiB0ZXN0LmRlZjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQocG9zICUgb3B0cy5wbGFjZWhvbGRlci5sZW5ndGgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBjaGVja1ZhbChpbnB1dCwgd3JpdGVPdXQsIHN0cmljdCwgbnB0dmwpIHtcclxuICAgICAgICAgICAgZnVuY3Rpb24gaXNUZW1wbGF0ZU1hdGNoKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGlzTWF0Y2ggPSAhMSwgY2hhckNvZGVOZHggPSBnZXRCdWZmZXJUZW1wbGF0ZSgpLnNsaWNlKGluaXRpYWxOZHgsIHNlZWtOZXh0KGluaXRpYWxOZHgpKS5qb2luKFwiXCIpLmluZGV4T2YoY2hhckNvZGVzKTtcclxuICAgICAgICAgICAgICAgIGlmICgtMSAhPT0gY2hhckNvZGVOZHggJiYgIWlzTWFzayhpbml0aWFsTmR4KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlzTWF0Y2ggPSAhMDtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBidWZmZXJUZW1wbGF0ZUFyciA9IGdldEJ1ZmZlclRlbXBsYXRlKCkuc2xpY2UoaW5pdGlhbE5keCwgaW5pdGlhbE5keCArIGNoYXJDb2RlTmR4KSwgaSA9IDA7IGkgPCBidWZmZXJUZW1wbGF0ZUFyci5sZW5ndGg7IGkrKykgaWYgKFwiIFwiICE9PSBidWZmZXJUZW1wbGF0ZUFycltpXSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc01hdGNoID0gITE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBpc01hdGNoO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciBpbnB1dFZhbHVlID0gbnB0dmwuc2xpY2UoKSwgY2hhckNvZGVzID0gXCJcIiwgaW5pdGlhbE5keCA9IDA7XHJcbiAgICAgICAgICAgIGlmIChyZXNldE1hc2tTZXQoKSwgZ2V0TWFza1NldCgpLnAgPSBzZWVrTmV4dCgtMSksICFzdHJpY3QpIGlmIChvcHRzLmF1dG9Vbm1hc2sgIT09ICEwKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGljSW5wdXQgPSBnZXRCdWZmZXJUZW1wbGF0ZSgpLnNsaWNlKDAsIHNlZWtOZXh0KC0xKSkuam9pbihcIlwiKSwgbWF0Y2hlcyA9IGlucHV0VmFsdWUuam9pbihcIlwiKS5tYXRjaChuZXcgUmVnRXhwKFwiXlwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KHN0YXRpY0lucHV0KSwgXCJnXCIpKTtcclxuICAgICAgICAgICAgICAgIG1hdGNoZXMgJiYgbWF0Y2hlcy5sZW5ndGggPiAwICYmIChpbnB1dFZhbHVlLnNwbGljZSgwLCBtYXRjaGVzLmxlbmd0aCAqIHN0YXRpY0lucHV0Lmxlbmd0aCksXHJcbiAgICAgICAgICAgICAgICBpbml0aWFsTmR4ID0gc2Vla05leHQoaW5pdGlhbE5keCkpO1xyXG4gICAgICAgICAgICB9IGVsc2UgaW5pdGlhbE5keCA9IHNlZWtOZXh0KGluaXRpYWxOZHgpO1xyXG4gICAgICAgICAgICAkLmVhY2goaW5wdXRWYWx1ZSwgZnVuY3Rpb24gKG5keCwgY2hhckNvZGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciBrZXlwcmVzcyA9ICQuRXZlbnQoXCJrZXlwcmVzc1wiKTtcclxuICAgICAgICAgICAgICAgIGtleXByZXNzLndoaWNoID0gY2hhckNvZGUuY2hhckNvZGVBdCgwKSwgY2hhckNvZGVzICs9IGNoYXJDb2RlO1xyXG4gICAgICAgICAgICAgICAgdmFyIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKHZvaWQgMCwgITApLCBsdlRlc3QgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbHZwXSwgbmV4dFRlc3QgPSBnZXRUZXN0VGVtcGxhdGUobHZwICsgMSwgbHZUZXN0ID8gbHZUZXN0LmxvY2F0b3Iuc2xpY2UoKSA6IHZvaWQgMCwgbHZwKTtcclxuICAgICAgICAgICAgICAgIGlmICghaXNUZW1wbGF0ZU1hdGNoKCkgfHwgc3RyaWN0IHx8IG9wdHMuYXV0b1VubWFzaykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwb3MgPSBzdHJpY3QgPyBuZHggOiBudWxsID09IG5leHRUZXN0Lm1hdGNoLmZuICYmIG5leHRUZXN0Lm1hdGNoLm9wdGlvbmFsaXR5ICYmIGx2cCArIDEgPCBnZXRNYXNrU2V0KCkucCA/IGx2cCArIDEgOiBnZXRNYXNrU2V0KCkucDtcclxuICAgICAgICAgICAgICAgICAgICBrZXlwcmVzc0V2ZW50LmNhbGwoaW5wdXQsIGtleXByZXNzLCAhMCwgITEsIHN0cmljdCwgcG9zKSwgaW5pdGlhbE5keCA9IHBvcyArIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgY2hhckNvZGVzID0gXCJcIjtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSBrZXlwcmVzc0V2ZW50LmNhbGwoaW5wdXQsIGtleXByZXNzLCAhMCwgITEsICEwLCBsdnAgKyAxKTtcclxuICAgICAgICAgICAgfSksIHdyaXRlT3V0ICYmIHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gaW5wdXQgPyBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigwKSkgOiB2b2lkIDAsICQuRXZlbnQoXCJjaGVja3ZhbFwiKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHVubWFza2VkdmFsdWUoaW5wdXQpIHtcclxuICAgICAgICAgICAgaWYgKGlucHV0ICYmIHZvaWQgMCA9PT0gaW5wdXQuaW5wdXRtYXNrKSByZXR1cm4gaW5wdXQudmFsdWU7XHJcbiAgICAgICAgICAgIHZhciB1bVZhbHVlID0gW10sIHZwcyA9IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucztcclxuICAgICAgICAgICAgZm9yICh2YXIgcG5keCBpbiB2cHMpIHZwc1twbmR4XS5tYXRjaCAmJiBudWxsICE9IHZwc1twbmR4XS5tYXRjaC5mbiAmJiB1bVZhbHVlLnB1c2godnBzW3BuZHhdLmlucHV0KTtcclxuICAgICAgICAgICAgdmFyIHVubWFza2VkVmFsdWUgPSAwID09PSB1bVZhbHVlLmxlbmd0aCA/IG51bGwgOiAoaXNSVEwgPyB1bVZhbHVlLnJldmVyc2UoKSA6IHVtVmFsdWUpLmpvaW4oXCJcIik7XHJcbiAgICAgICAgICAgIGlmIChudWxsICE9PSB1bm1hc2tlZFZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyVmFsdWUgPSAoaXNSVEwgPyBnZXRCdWZmZXIoKS5zbGljZSgpLnJldmVyc2UoKSA6IGdldEJ1ZmZlcigpKS5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgJC5pc0Z1bmN0aW9uKG9wdHMub25Vbk1hc2spICYmICh1bm1hc2tlZFZhbHVlID0gb3B0cy5vblVuTWFzay5jYWxsKGlucHV0LCBidWZmZXJWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykgfHwgdW5tYXNrZWRWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIHVubWFza2VkVmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGNhcmV0KGlucHV0LCBiZWdpbiwgZW5kKSB7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHRyYW5zbGF0ZVBvc2l0aW9uKHBvcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKGlzUlRMICYmIFwibnVtYmVyXCIgPT0gdHlwZW9mIHBvcyAmJiAoIW9wdHMuZ3JlZWR5IHx8IFwiXCIgIT09IG9wdHMucGxhY2Vob2xkZXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGJmZnJMZ2h0ID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKS5sZW5ndGg7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zID0gYmZmckxnaHQgLSBwb3M7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcG9zO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciByYW5nZTtcclxuICAgICAgICAgICAgaWYgKFwibnVtYmVyXCIgIT0gdHlwZW9mIGJlZ2luKSByZXR1cm4gaW5wdXQuc2V0U2VsZWN0aW9uUmFuZ2UgPyAoYmVnaW4gPSBpbnB1dC5zZWxlY3Rpb25TdGFydCxcclxuICAgICAgICAgICAgZW5kID0gaW5wdXQuc2VsZWN0aW9uRW5kKSA6IHdpbmRvdy5nZXRTZWxlY3Rpb24gPyAocmFuZ2UgPSB3aW5kb3cuZ2V0U2VsZWN0aW9uKCkuZ2V0UmFuZ2VBdCgwKSxcclxuICAgICAgICAgICAgKHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyLnBhcmVudE5vZGUgPT09IGlucHV0IHx8IHJhbmdlLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyID09PSBpbnB1dCkgJiYgKGJlZ2luID0gcmFuZ2Uuc3RhcnRPZmZzZXQsXHJcbiAgICAgICAgICAgIGVuZCA9IHJhbmdlLmVuZE9mZnNldCkpIDogZG9jdW1lbnQuc2VsZWN0aW9uICYmIGRvY3VtZW50LnNlbGVjdGlvbi5jcmVhdGVSYW5nZSAmJiAocmFuZ2UgPSBkb2N1bWVudC5zZWxlY3Rpb24uY3JlYXRlUmFuZ2UoKSxcclxuICAgICAgICAgICAgYmVnaW4gPSAwIC0gcmFuZ2UuZHVwbGljYXRlKCkubW92ZVN0YXJ0KFwiY2hhcmFjdGVyXCIsIC0xZTUpLCBlbmQgPSBiZWdpbiArIHJhbmdlLnRleHQubGVuZ3RoKSxcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgYmVnaW46IHRyYW5zbGF0ZVBvc2l0aW9uKGJlZ2luKSxcclxuICAgICAgICAgICAgICAgIGVuZDogdHJhbnNsYXRlUG9zaXRpb24oZW5kKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICBiZWdpbiA9IHRyYW5zbGF0ZVBvc2l0aW9uKGJlZ2luKSwgZW5kID0gdHJhbnNsYXRlUG9zaXRpb24oZW5kKSwgZW5kID0gXCJudW1iZXJcIiA9PSB0eXBlb2YgZW5kID8gZW5kIDogYmVnaW47XHJcbiAgICAgICAgICAgIHZhciBzY3JvbGxDYWxjID0gcGFyc2VJbnQoKChpbnB1dC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvdykuZ2V0Q29tcHV0ZWRTdHlsZSA/IChpbnB1dC5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3IHx8IHdpbmRvdykuZ2V0Q29tcHV0ZWRTdHlsZShpbnB1dCwgbnVsbCkgOiBpbnB1dC5jdXJyZW50U3R5bGUpLmZvbnRTaXplKSAqIGVuZDtcclxuICAgICAgICAgICAgaWYgKGlucHV0LnNjcm9sbExlZnQgPSBzY3JvbGxDYWxjID4gaW5wdXQuc2Nyb2xsV2lkdGggPyBzY3JvbGxDYWxjIDogMCwgYW5kcm9pZGNocm9tZSB8fCBvcHRzLmluc2VydE1vZGUgIT09ICExIHx8IGJlZ2luICE9PSBlbmQgfHwgZW5kKyssXHJcbiAgICAgICAgICAgIGlucHV0LnNldFNlbGVjdGlvblJhbmdlKSBpbnB1dC5zZWxlY3Rpb25TdGFydCA9IGJlZ2luLCBpbnB1dC5zZWxlY3Rpb25FbmQgPSBlbmQ7IGVsc2UgaWYgKHdpbmRvdy5nZXRTZWxlY3Rpb24pIHtcclxuICAgICAgICAgICAgICAgIGlmIChyYW5nZSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCksIHZvaWQgMCA9PT0gaW5wdXQuZmlyc3RDaGlsZCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlucHV0LmFwcGVuZENoaWxkKHRleHROb2RlKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJhbmdlLnNldFN0YXJ0KGlucHV0LmZpcnN0Q2hpbGQsIGJlZ2luIDwgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCA/IGJlZ2luIDogaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCksXHJcbiAgICAgICAgICAgICAgICByYW5nZS5zZXRFbmQoaW5wdXQuZmlyc3RDaGlsZCwgZW5kIDwgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpLmxlbmd0aCA/IGVuZCA6IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKS5sZW5ndGgpLFxyXG4gICAgICAgICAgICAgICAgcmFuZ2UuY29sbGFwc2UoITApO1xyXG4gICAgICAgICAgICAgICAgdmFyIHNlbCA9IHdpbmRvdy5nZXRTZWxlY3Rpb24oKTtcclxuICAgICAgICAgICAgICAgIHNlbC5yZW1vdmVBbGxSYW5nZXMoKSwgc2VsLmFkZFJhbmdlKHJhbmdlKTtcclxuICAgICAgICAgICAgfSBlbHNlIGlucHV0LmNyZWF0ZVRleHRSYW5nZSAmJiAocmFuZ2UgPSBpbnB1dC5jcmVhdGVUZXh0UmFuZ2UoKSwgcmFuZ2UuY29sbGFwc2UoITApLFxyXG4gICAgICAgICAgICByYW5nZS5tb3ZlRW5kKFwiY2hhcmFjdGVyXCIsIGVuZCksIHJhbmdlLm1vdmVTdGFydChcImNoYXJhY3RlclwiLCBiZWdpbiksIHJhbmdlLnNlbGVjdCgpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZGV0ZXJtaW5lTGFzdFJlcXVpcmVkUG9zaXRpb24ocmV0dXJuRGVmaW5pdGlvbikge1xyXG4gICAgICAgICAgICB2YXIgcG9zLCB0ZXN0UG9zLCBidWZmZXIgPSBnZXRCdWZmZXIoKSwgYmwgPSBidWZmZXIubGVuZ3RoLCBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLCBwb3NpdGlvbnMgPSB7fSwgbHZUZXN0ID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2x2cF0sIG5keEludGx6ciA9IHZvaWQgMCAhPT0gbHZUZXN0ID8gbHZUZXN0LmxvY2F0b3Iuc2xpY2UoKSA6IHZvaWQgMDtcclxuICAgICAgICAgICAgZm9yIChwb3MgPSBsdnAgKyAxOyBwb3MgPCBidWZmZXIubGVuZ3RoOyBwb3MrKykgdGVzdFBvcyA9IGdldFRlc3RUZW1wbGF0ZShwb3MsIG5keEludGx6ciwgcG9zIC0gMSksXHJcbiAgICAgICAgICAgIG5keEludGx6ciA9IHRlc3RQb3MubG9jYXRvci5zbGljZSgpLCBwb3NpdGlvbnNbcG9zXSA9ICQuZXh0ZW5kKCEwLCB7fSwgdGVzdFBvcyk7XHJcbiAgICAgICAgICAgIHZhciBsdlRlc3RBbHQgPSBsdlRlc3QgJiYgdm9pZCAwICE9PSBsdlRlc3QuYWx0ZXJuYXRpb24gPyBsdlRlc3QubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dIDogdm9pZCAwO1xyXG4gICAgICAgICAgICBmb3IgKHBvcyA9IGJsIC0gMTsgcG9zID4gbHZwICYmICh0ZXN0UG9zID0gcG9zaXRpb25zW3Bvc10sICh0ZXN0UG9zLm1hdGNoLm9wdGlvbmFsaXR5IHx8IHRlc3RQb3MubWF0Y2gub3B0aW9uYWxRdWFudGlmaWVyIHx8IGx2VGVzdEFsdCAmJiAobHZUZXN0QWx0ICE9PSBwb3NpdGlvbnNbcG9zXS5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0gJiYgbnVsbCAhPSB0ZXN0UG9zLm1hdGNoLmZuIHx8IG51bGwgPT09IHRlc3RQb3MubWF0Y2guZm4gJiYgdGVzdFBvcy5sb2NhdG9yW2x2VGVzdC5hbHRlcm5hdGlvbl0gJiYgY2hlY2tBbHRlcm5hdGlvbk1hdGNoKHRlc3RQb3MubG9jYXRvcltsdlRlc3QuYWx0ZXJuYXRpb25dLnRvU3RyaW5nKCkuc3BsaXQoXCIsXCIpLCBsdlRlc3RBbHQudG9TdHJpbmcoKS5zcGxpdChcIixcIikpICYmIFwiXCIgIT09IGdldFRlc3RzKHBvcylbMF0uZGVmKSkgJiYgYnVmZmVyW3Bvc10gPT09IGdldFBsYWNlaG9sZGVyKHBvcywgdGVzdFBvcy5tYXRjaCkpIDsgcG9zLS0pIGJsLS07XHJcbiAgICAgICAgICAgIHJldHVybiByZXR1cm5EZWZpbml0aW9uID8ge1xyXG4gICAgICAgICAgICAgICAgbDogYmwsXHJcbiAgICAgICAgICAgICAgICBkZWY6IHBvc2l0aW9uc1tibF0gPyBwb3NpdGlvbnNbYmxdLm1hdGNoIDogdm9pZCAwXHJcbiAgICAgICAgICAgIH0gOiBibDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gY2xlYXJPcHRpb25hbFRhaWwoYnVmZmVyKSB7XHJcbiAgICAgICAgICAgIGZvciAodmFyIHJsID0gZGV0ZXJtaW5lTGFzdFJlcXVpcmVkUG9zaXRpb24oKSwgbG1pYiA9IGJ1ZmZlci5sZW5ndGggLSAxOyBsbWliID4gcmwgJiYgIWlzTWFzayhsbWliKSA7IGxtaWItLSk7XHJcbiAgICAgICAgICAgIHJldHVybiBidWZmZXIuc3BsaWNlKHJsLCBsbWliICsgMSAtIHJsKSwgYnVmZmVyO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBpc0NvbXBsZXRlKGJ1ZmZlcikge1xyXG4gICAgICAgICAgICBpZiAoJC5pc0Z1bmN0aW9uKG9wdHMuaXNDb21wbGV0ZSkpIHJldHVybiBvcHRzLmlzQ29tcGxldGUuY2FsbChlbCwgYnVmZmVyLCBvcHRzKTtcclxuICAgICAgICAgICAgaWYgKFwiKlwiID09PSBvcHRzLnJlcGVhdCkgcmV0dXJuIHZvaWQgMDtcclxuICAgICAgICAgICAgdmFyIGNvbXBsZXRlID0gITEsIGxycCA9IGRldGVybWluZUxhc3RSZXF1aXJlZFBvc2l0aW9uKCEwKSwgYW1sID0gc2Vla1ByZXZpb3VzKGxycC5sKTtcclxuICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gbHJwLmRlZiB8fCBscnAuZGVmLm5ld0Jsb2NrTWFya2VyIHx8IGxycC5kZWYub3B0aW9uYWxpdHkgfHwgbHJwLmRlZi5vcHRpb25hbFF1YW50aWZpZXIpIHtcclxuICAgICAgICAgICAgICAgIGNvbXBsZXRlID0gITA7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgYW1sID49IGk7IGkrKykge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0ZXN0ID0gZ2V0VGVzdFRlbXBsYXRlKGkpLm1hdGNoO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChudWxsICE9PSB0ZXN0LmZuICYmIHZvaWQgMCA9PT0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ldICYmIHRlc3Qub3B0aW9uYWxpdHkgIT09ICEwICYmIHRlc3Qub3B0aW9uYWxRdWFudGlmaWVyICE9PSAhMCB8fCBudWxsID09PSB0ZXN0LmZuICYmIGJ1ZmZlcltpXSAhPT0gZ2V0UGxhY2Vob2xkZXIoaSwgdGVzdCkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29tcGxldGUgPSAhMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBjb21wbGV0ZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gaXNTZWxlY3Rpb24oYmVnaW4sIGVuZCkge1xyXG4gICAgICAgICAgICByZXR1cm4gaXNSVEwgPyBiZWdpbiAtIGVuZCA+IDEgfHwgYmVnaW4gLSBlbmQgPT09IDEgJiYgb3B0cy5pbnNlcnRNb2RlIDogZW5kIC0gYmVnaW4gPiAxIHx8IGVuZCAtIGJlZ2luID09PSAxICYmIG9wdHMuaW5zZXJ0TW9kZTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gd3JhcEV2ZW50UnVsZXIoZXZlbnRIYW5kbGVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluQ29tcG9zaXRpb24gPSAhMSwga2V5ZG93blByZXNzZWQgPSAhMTtcclxuICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IHRoaXMuaW5wdXRtYXNrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGltT3B0cyA9ICQuZGF0YSh0aGlzLCBcIl9pbnB1dG1hc2tfb3B0c1wiKTtcclxuICAgICAgICAgICAgICAgICAgICBpbU9wdHMgPyBuZXcgSW5wdXRtYXNrKGltT3B0cykubWFzayh0aGlzKSA6ICQodGhpcykub2ZmKFwiLmlucHV0bWFza1wiKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKFwic2V0dmFsdWVcIiA9PT0gZS50eXBlIHx8ICEodGhpcy5kaXNhYmxlZCB8fCB0aGlzLnJlYWRPbmx5ICYmICEoXCJrZXlkb3duXCIgPT09IGUudHlwZSAmJiBlLmN0cmxLZXkgJiYgNjcgPT09IGUua2V5Q29kZSB8fCBvcHRzLnRhYlRocm91Z2ggPT09ICExICYmIGUua2V5Q29kZSA9PT0gSW5wdXRtYXNrLmtleUNvZGUuVEFCKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3dpdGNoIChlLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCJpbnB1dFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChza2lwSW5wdXRFdmVudCA9PT0gITAgfHwgaW5Db21wb3NpdGlvbiA9PT0gITApIHJldHVybiBza2lwSW5wdXRFdmVudCA9ICExLCBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAga2V5ZG93blByZXNzZWQgPSAhMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwia2V5ZG93blwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBLZXlQcmVzc0V2ZW50ID0gITEsIGluQ29tcG9zaXRpb24gPSAhMSwga2V5ZG93blByZXNzZWQgPSAhMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwia2V5cHJlc3NcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoc2tpcEtleVByZXNzRXZlbnQgPT09ICEwKSByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBLZXlQcmVzc0V2ZW50ID0gITA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbkNvbXBvc2l0aW9uID0gITA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc2tpcElucHV0RXZlbnQgPSBrZXlkb3duUHJlc3NlZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpbkNvbXBvc2l0aW9uID0gITEsIGtleWRvd25QcmVzc2VkID0gITE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcImN1dFwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNraXBJbnB1dEV2ZW50ID0gITA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV2ZW50SGFuZGxlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHBhdGNoVmFsdWVQcm9wZXJ0eShucHQpIHtcclxuICAgICAgICAgICAgZnVuY3Rpb24gcGF0Y2hWYWxob29rKHR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkLnZhbEhvb2tzICYmICh2b2lkIDAgPT09ICQudmFsSG9va3NbdHlwZV0gfHwgJC52YWxIb29rc1t0eXBlXS5pbnB1dG1hc2twYXRjaCAhPT0gITApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHZhbGhvb2tHZXQgPSAkLnZhbEhvb2tzW3R5cGVdICYmICQudmFsSG9va3NbdHlwZV0uZ2V0ID8gJC52YWxIb29rc1t0eXBlXS5nZXQgOiBmdW5jdGlvbiAoZWxlbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWxlbS52YWx1ZTtcclxuICAgICAgICAgICAgICAgICAgICB9LCB2YWxob29rU2V0ID0gJC52YWxIb29rc1t0eXBlXSAmJiAkLnZhbEhvb2tzW3R5cGVdLnNldCA/ICQudmFsSG9va3NbdHlwZV0uc2V0IDogZnVuY3Rpb24gKGVsZW0sIHZhbHVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlbGVtLnZhbHVlID0gdmFsdWUsIGVsZW07XHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAkLnZhbEhvb2tzW3R5cGVdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIChlbGVtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5pbnB1dG1hc2spIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5pbnB1dG1hc2sub3B0cy5hdXRvVW5tYXNrKSByZXR1cm4gZWxlbS5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQgPSB2YWxob29rR2V0KGVsZW0pLCBtYXNrc2V0ID0gZWxlbS5pbnB1dG1hc2subWFza3NldCwgYnVmZmVyVGVtcGxhdGUgPSBtYXNrc2V0Ll9idWZmZXI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGJ1ZmZlclRlbXBsYXRlID0gYnVmZmVyVGVtcGxhdGUgPyBidWZmZXJUZW1wbGF0ZS5qb2luKFwiXCIpIDogXCJcIiwgcmVzdWx0ICE9PSBidWZmZXJUZW1wbGF0ZSA/IHJlc3VsdCA6IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmFsaG9va0dldChlbGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2V0OiBmdW5jdGlvbiAoZWxlbSwgdmFsdWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByZXN1bHQsICRlbGVtID0gJChlbGVtKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQgPSB2YWxob29rU2V0KGVsZW0sIHZhbHVlKSwgZWxlbS5pbnB1dG1hc2sgJiYgJGVsZW0udHJpZ2dlcihcInNldHZhbHVlLmlucHV0bWFza1wiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc3VsdDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRtYXNrcGF0Y2g6ICEwXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBnZXR0ZXIoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dG1hc2sgPyB0aGlzLmlucHV0bWFzay5vcHRzLmF1dG9Vbm1hc2sgPyB0aGlzLmlucHV0bWFzay51bm1hc2tlZHZhbHVlKCkgOiB2YWx1ZUdldC5jYWxsKHRoaXMpICE9PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikgPyBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSB0aGlzICYmIG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgPyAoaXNSVEwgPyBjbGVhck9wdGlvbmFsVGFpbChnZXRCdWZmZXIoKSkucmV2ZXJzZSgpIDogY2xlYXJPcHRpb25hbFRhaWwoZ2V0QnVmZmVyKCkpKS5qb2luKFwiXCIpIDogdmFsdWVHZXQuY2FsbCh0aGlzKSA6IFwiXCIgOiB2YWx1ZUdldC5jYWxsKHRoaXMpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHNldHRlcih2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWVTZXQuY2FsbCh0aGlzLCB2YWx1ZSksIHRoaXMuaW5wdXRtYXNrICYmICQodGhpcykudHJpZ2dlcihcInNldHZhbHVlLmlucHV0bWFza1wiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBmdW5jdGlvbiBpbnN0YWxsTmF0aXZlVmFsdWVTZXRGYWxsYmFjayhucHQpIHtcclxuICAgICAgICAgICAgICAgICQobnB0KS5vbihcIm1vdXNlZW50ZXIuaW5wdXRtYXNrXCIsIHdyYXBFdmVudFJ1bGVyKGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpLCBpbnB1dCA9IHRoaXMsIHZhbHVlID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIFwiXCIgIT09IHZhbHVlICYmIHZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpICYmICRpbnB1dC50cmlnZ2VyKFwic2V0dmFsdWUuaW5wdXRtYXNrXCIpO1xyXG4gICAgICAgICAgICAgICAgfSkpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZUdldCwgdmFsdWVTZXQ7XHJcbiAgICAgICAgICAgIG5wdC5pbnB1dG1hc2suX192YWx1ZUdldCB8fCAoT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiB2b2lkIDAgPT09IG5wdC52YWx1ZSA/ICh2YWx1ZUdldCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnRleHRDb250ZW50O1xyXG4gICAgICAgICAgICB9LCB2YWx1ZVNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0Q29udGVudCA9IHZhbHVlO1xyXG4gICAgICAgICAgICB9LCBPYmplY3QuZGVmaW5lUHJvcGVydHkobnB0LCBcInZhbHVlXCIsIHtcclxuICAgICAgICAgICAgICAgIGdldDogZ2V0dGVyLFxyXG4gICAgICAgICAgICAgICAgc2V0OiBzZXR0ZXJcclxuICAgICAgICAgICAgfSkpIDogZG9jdW1lbnQuX19sb29rdXBHZXR0ZXJfXyAmJiBucHQuX19sb29rdXBHZXR0ZXJfXyhcInZhbHVlXCIpID8gKHZhbHVlR2V0ID0gbnB0Ll9fbG9va3VwR2V0dGVyX18oXCJ2YWx1ZVwiKSxcclxuICAgICAgICAgICAgdmFsdWVTZXQgPSBucHQuX19sb29rdXBTZXR0ZXJfXyhcInZhbHVlXCIpLCBucHQuX19kZWZpbmVHZXR0ZXJfXyhcInZhbHVlXCIsIGdldHRlciksXHJcbiAgICAgICAgICAgIG5wdC5fX2RlZmluZVNldHRlcl9fKFwidmFsdWVcIiwgc2V0dGVyKSkgOiAodmFsdWVHZXQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnB0LnZhbHVlO1xyXG4gICAgICAgICAgICB9LCB2YWx1ZVNldCA9IGZ1bmN0aW9uICh2YWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgbnB0LnZhbHVlID0gdmFsdWU7XHJcbiAgICAgICAgICAgIH0sIHBhdGNoVmFsaG9vayhucHQudHlwZSksIGluc3RhbGxOYXRpdmVWYWx1ZVNldEZhbGxiYWNrKG5wdCkpLCBucHQuaW5wdXRtYXNrLl9fdmFsdWVHZXQgPSB2YWx1ZUdldCxcclxuICAgICAgICAgICAgbnB0LmlucHV0bWFzay5fdmFsdWVHZXQgPSBmdW5jdGlvbiAob3ZlcnJ1bGVSVEwpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBpc1JUTCAmJiBvdmVycnVsZVJUTCAhPT0gITAgPyB2YWx1ZUdldC5jYWxsKHRoaXMuZWwpLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogdmFsdWVHZXQuY2FsbCh0aGlzLmVsKTtcclxuICAgICAgICAgICAgfSwgbnB0LmlucHV0bWFzay5fX3ZhbHVlU2V0ID0gdmFsdWVTZXQsIG5wdC5pbnB1dG1hc2suX3ZhbHVlU2V0ID0gZnVuY3Rpb24gKHZhbHVlLCBvdmVycnVsZVJUTCkge1xyXG4gICAgICAgICAgICAgICAgdmFsdWVTZXQuY2FsbCh0aGlzLmVsLCBudWxsID09PSB2YWx1ZSB8fCB2b2lkIDAgPT09IHZhbHVlID8gXCJcIiA6IG92ZXJydWxlUlRMICE9PSAhMCAmJiBpc1JUTCA/IHZhbHVlLnNwbGl0KFwiXCIpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogdmFsdWUpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gaGFuZGxlUmVtb3ZlKGlucHV0LCBrLCBwb3MsIHN0cmljdCkge1xyXG4gICAgICAgICAgICBmdW5jdGlvbiBnZW5lcmFsaXplKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdHMua2VlcFN0YXRpYykge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCghMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGxhc3RBbHQsIHZhbGlkSW5wdXRzID0gW10sIHBvc2l0aW9uc0Nsb25lID0gJC5leHRlbmQoITAsIHt9LCBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAobGFzdEFsdCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKCkgOyBsYXN0QWx0ID49IDA7IGxhc3RBbHQtLSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdmFsaWRQb3MgPSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbGFzdEFsdF07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh2YWxpZFBvcyAmJiAobnVsbCAhPSB2YWxpZFBvcy5tYXRjaC5mbiAmJiB2YWxpZElucHV0cy5wdXNoKHZhbGlkUG9zLmlucHV0KSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZGVsZXRlIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tsYXN0QWx0XSwgdm9pZCAwICE9PSB2YWxpZFBvcy5hbHRlcm5hdGlvbiAmJiB2YWxpZFBvcy5sb2NhdG9yW3ZhbGlkUG9zLmFsdGVybmF0aW9uXSA9PT0gZ2V0VGVzdFRlbXBsYXRlKGxhc3RBbHQpLmxvY2F0b3JbdmFsaWRQb3MuYWx0ZXJuYXRpb25dKSkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0QWx0ID4gLTEpIGZvciAoOyB2YWxpZElucHV0cy5sZW5ndGggPiAwOykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBnZXRNYXNrU2V0KCkucCA9IHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIga2V5cHJlc3MgPSAkLkV2ZW50KFwia2V5cHJlc3NcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleXByZXNzLndoaWNoID0gdmFsaWRJbnB1dHMucG9wKCkuY2hhckNvZGVBdCgwKSwga2V5cHJlc3NFdmVudC5jYWxsKGlucHV0LCBrZXlwcmVzcywgITAsICExLCAhMSwgZ2V0TWFza1NldCgpLnApO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnMgPSAkLmV4dGVuZCghMCwge30sIHBvc2l0aW9uc0Nsb25lKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpZiAoKG9wdHMubnVtZXJpY0lucHV0IHx8IGlzUlRMKSAmJiAoayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuQkFDS1NQQUNFID8gayA9IElucHV0bWFzay5rZXlDb2RlLkRFTEVURSA6IGsgPT09IElucHV0bWFzay5rZXlDb2RlLkRFTEVURSAmJiAoayA9IElucHV0bWFzay5rZXlDb2RlLkJBQ0tTUEFDRSksXHJcbiAgICAgICAgICAgIGlzUlRMKSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBlbmQgPSBwb3MuZW5kO1xyXG4gICAgICAgICAgICAgICAgcG9zLmVuZCA9IHBvcy5iZWdpbiwgcG9zLmJlZ2luID0gcGVuZDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5CQUNLU1BBQ0UgJiYgKHBvcy5lbmQgLSBwb3MuYmVnaW4gPCAxIHx8IG9wdHMuaW5zZXJ0TW9kZSA9PT0gITEpID8gKHBvcy5iZWdpbiA9IHNlZWtQcmV2aW91cyhwb3MuYmVnaW4pLFxyXG4gICAgICAgICAgICB2b2lkIDAgPT09IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MuYmVnaW5dIHx8IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MuYmVnaW5dLmlucHV0ICE9PSBvcHRzLmdyb3VwU2VwYXJhdG9yICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MuYmVnaW5dLmlucHV0ICE9PSBvcHRzLnJhZGl4UG9pbnQgfHwgcG9zLmJlZ2luLS0pIDogayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuREVMRVRFICYmIHBvcy5iZWdpbiA9PT0gcG9zLmVuZCAmJiAocG9zLmVuZCA9IGlzTWFzayhwb3MuZW5kKSA/IHBvcy5lbmQgKyAxIDogc2Vla05leHQocG9zLmVuZCkgKyAxLFxyXG4gICAgICAgICAgICB2b2lkIDAgPT09IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MuYmVnaW5dIHx8IGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MuYmVnaW5dLmlucHV0ICE9PSBvcHRzLmdyb3VwU2VwYXJhdG9yICYmIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1twb3MuYmVnaW5dLmlucHV0ICE9PSBvcHRzLnJhZGl4UG9pbnQgfHwgcG9zLmVuZCsrKSxcclxuICAgICAgICAgICAgc3RyaXBWYWxpZFBvc2l0aW9ucyhwb3MuYmVnaW4sIHBvcy5lbmQsICExLCBzdHJpY3QpLCBzdHJpY3QgIT09ICEwICYmIGdlbmVyYWxpemUoKTtcclxuICAgICAgICAgICAgdmFyIGx2cCA9IGdldExhc3RWYWxpZFBvc2l0aW9uKHBvcy5iZWdpbik7XHJcbiAgICAgICAgICAgIGx2cCA8IHBvcy5iZWdpbiA/ICgtMSA9PT0gbHZwICYmIHJlc2V0TWFza1NldCgpLCBnZXRNYXNrU2V0KCkucCA9IHNlZWtOZXh0KGx2cCkpIDogc3RyaWN0ICE9PSAhMCAmJiAoZ2V0TWFza1NldCgpLnAgPSBwb3MuYmVnaW4pO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBrZXlkb3duRXZlbnQoZSkge1xyXG4gICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCAkaW5wdXQgPSAkKGlucHV0KSwgayA9IGUua2V5Q29kZSwgcG9zID0gY2FyZXQoaW5wdXQpO1xyXG4gICAgICAgICAgICBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5CQUNLU1BBQ0UgfHwgayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuREVMRVRFIHx8IGlwaG9uZSAmJiAxMjcgPT09IGsgfHwgZS5jdHJsS2V5ICYmIDg4ID09PSBrICYmICFpc0lucHV0RXZlbnRTdXBwb3J0ZWQoXCJjdXRcIikgPyAoZS5wcmV2ZW50RGVmYXVsdCgpLFxyXG4gICAgICAgICAgICA4OCA9PT0gayAmJiAodW5kb1ZhbHVlID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSksIGhhbmRsZVJlbW92ZShpbnB1dCwgaywgcG9zKSwgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCBnZXRNYXNrU2V0KCkucCwgZSwgdW5kb1ZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKSxcclxuICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpID09PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikgPyAkaW5wdXQudHJpZ2dlcihcImNsZWFyZWRcIikgOiBpc0NvbXBsZXRlKGdldEJ1ZmZlcigpKSA9PT0gITAgJiYgJGlucHV0LnRyaWdnZXIoXCJjb21wbGV0ZVwiKSxcclxuICAgICAgICAgICAgb3B0cy5zaG93VG9vbHRpcCAmJiAoaW5wdXQudGl0bGUgPSBvcHRzLnRvb2x0aXAgfHwgZ2V0TWFza1NldCgpLm1hc2spKSA6IGsgPT09IElucHV0bWFzay5rZXlDb2RlLkVORCB8fCBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5QQUdFX0RPV04gPyBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBjYXJldFBvcyA9IHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpO1xyXG4gICAgICAgICAgICAgICAgb3B0cy5pbnNlcnRNb2RlIHx8IGNhcmV0UG9zICE9PSBnZXRNYXNrTGVuZ3RoKCkgfHwgZS5zaGlmdEtleSB8fCBjYXJldFBvcy0tLCBjYXJldChpbnB1dCwgZS5zaGlmdEtleSA/IHBvcy5iZWdpbiA6IGNhcmV0UG9zLCBjYXJldFBvcyk7XHJcbiAgICAgICAgICAgIH0sIDApIDogayA9PT0gSW5wdXRtYXNrLmtleUNvZGUuSE9NRSAmJiAhZS5zaGlmdEtleSB8fCBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5QQUdFX1VQID8gY2FyZXQoaW5wdXQsIDAsIGUuc2hpZnRLZXkgPyBwb3MuYmVnaW4gOiAwKSA6IChvcHRzLnVuZG9PbkVzY2FwZSAmJiBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5FU0NBUEUgfHwgOTAgPT09IGsgJiYgZS5jdHJsS2V5KSAmJiBlLmFsdEtleSAhPT0gITAgPyAoY2hlY2tWYWwoaW5wdXQsICEwLCAhMSwgdW5kb1ZhbHVlLnNwbGl0KFwiXCIpKSxcclxuICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJjbGlja1wiKSkgOiBrICE9PSBJbnB1dG1hc2sua2V5Q29kZS5JTlNFUlQgfHwgZS5zaGlmdEtleSB8fCBlLmN0cmxLZXkgPyBvcHRzLnRhYlRocm91Z2ggPT09ICEwICYmIGsgPT09IElucHV0bWFzay5rZXlDb2RlLlRBQiA/IChlLnNoaWZ0S2V5ID09PSAhMCA/IChudWxsID09PSBnZXRUZXN0KHBvcy5iZWdpbikuZm4gJiYgKHBvcy5iZWdpbiA9IHNlZWtOZXh0KHBvcy5iZWdpbikpLFxyXG4gICAgICAgICAgICBwb3MuZW5kID0gc2Vla1ByZXZpb3VzKHBvcy5iZWdpbiwgITApLCBwb3MuYmVnaW4gPSBzZWVrUHJldmlvdXMocG9zLmVuZCwgITApKSA6IChwb3MuYmVnaW4gPSBzZWVrTmV4dChwb3MuYmVnaW4sICEwKSxcclxuICAgICAgICAgICAgcG9zLmVuZCA9IHNlZWtOZXh0KHBvcy5iZWdpbiwgITApLCBwb3MuZW5kIDwgZ2V0TWFza0xlbmd0aCgpICYmIHBvcy5lbmQtLSksIHBvcy5iZWdpbiA8IGdldE1hc2tMZW5ndGgoKSAmJiAoZS5wcmV2ZW50RGVmYXVsdCgpLFxyXG4gICAgICAgICAgICBjYXJldChpbnB1dCwgcG9zLmJlZ2luLCBwb3MuZW5kKSkpIDogb3B0cy5pbnNlcnRNb2RlICE9PSAhMSB8fCBlLnNoaWZ0S2V5IHx8IChrID09PSBJbnB1dG1hc2sua2V5Q29kZS5SSUdIVCA/IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zID0gY2FyZXQoaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIGNhcmV0UG9zLmJlZ2luKTtcclxuICAgICAgICAgICAgfSwgMCkgOiBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5MRUZUICYmIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGNhcmV0UG9zID0gY2FyZXQoaW5wdXQpO1xyXG4gICAgICAgICAgICAgICAgY2FyZXQoaW5wdXQsIGlzUlRMID8gY2FyZXRQb3MuYmVnaW4gKyAxIDogY2FyZXRQb3MuYmVnaW4gLSAxKTtcclxuICAgICAgICAgICAgfSwgMCkpIDogKG9wdHMuaW5zZXJ0TW9kZSA9ICFvcHRzLmluc2VydE1vZGUsIGNhcmV0KGlucHV0LCBvcHRzLmluc2VydE1vZGUgfHwgcG9zLmJlZ2luICE9PSBnZXRNYXNrTGVuZ3RoKCkgPyBwb3MuYmVnaW4gOiBwb3MuYmVnaW4gLSAxKSksXHJcbiAgICAgICAgICAgIG9wdHMub25LZXlEb3duKGUsIGdldEJ1ZmZlcigpLCBjYXJldChpbnB1dCkuYmVnaW4sIG9wdHMpLCBpZ25vcmFibGUgPSAtMSAhPT0gJC5pbkFycmF5KGssIG9wdHMuaWdub3JhYmxlcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGtleXByZXNzRXZlbnQoZSwgY2hlY2t2YWwsIHdyaXRlT3V0LCBzdHJpY3QsIG5keCkge1xyXG4gICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCAkaW5wdXQgPSAkKGlucHV0KSwgayA9IGUud2hpY2ggfHwgZS5jaGFyQ29kZSB8fCBlLmtleUNvZGU7XHJcbiAgICAgICAgICAgIGlmICghKGNoZWNrdmFsID09PSAhMCB8fCBlLmN0cmxLZXkgJiYgZS5hbHRLZXkpICYmIChlLmN0cmxLZXkgfHwgZS5tZXRhS2V5IHx8IGlnbm9yYWJsZSkpIHJldHVybiBrID09PSBJbnB1dG1hc2sua2V5Q29kZS5FTlRFUiAmJiB1bmRvVmFsdWUgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikgJiYgKHVuZG9WYWx1ZSA9IGdldEJ1ZmZlcigpLmpvaW4oXCJcIiksXHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKSwgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcImNoYW5nZVwiKTtcclxuICAgICAgICAgICAgfSwgMCkpLCAhMDtcclxuICAgICAgICAgICAgaWYgKGspIHtcclxuICAgICAgICAgICAgICAgIDQ2ID09PSBrICYmIGUuc2hpZnRLZXkgPT09ICExICYmIFwiLFwiID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgKGsgPSA0NCk7XHJcbiAgICAgICAgICAgICAgICB2YXIgZm9yd2FyZFBvc2l0aW9uLCBwb3MgPSBjaGVja3ZhbCA/IHtcclxuICAgICAgICAgICAgICAgICAgICBiZWdpbjogbmR4LFxyXG4gICAgICAgICAgICAgICAgICAgIGVuZDogbmR4XHJcbiAgICAgICAgICAgICAgICB9IDogY2FyZXQoaW5wdXQpLCBjID0gU3RyaW5nLmZyb21DaGFyQ29kZShrKSwgaXNTbGN0biA9IGlzU2VsZWN0aW9uKHBvcy5iZWdpbiwgcG9zLmVuZCk7XHJcbiAgICAgICAgICAgICAgICBpc1NsY3RuICYmIChnZXRNYXNrU2V0KCkudW5kb1Bvc2l0aW9ucyA9ICQuZXh0ZW5kKCEwLCB7fSwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zKSxcclxuICAgICAgICAgICAgICAgIGhhbmRsZVJlbW92ZShpbnB1dCwgSW5wdXRtYXNrLmtleUNvZGUuREVMRVRFLCBwb3MsICEwKSwgcG9zLmJlZ2luID0gZ2V0TWFza1NldCgpLnAsXHJcbiAgICAgICAgICAgICAgICBvcHRzLmluc2VydE1vZGUgfHwgKG9wdHMuaW5zZXJ0TW9kZSA9ICFvcHRzLmluc2VydE1vZGUsIHNldFZhbGlkUG9zaXRpb24ocG9zLmJlZ2luLCBzdHJpY3QpLFxyXG4gICAgICAgICAgICAgICAgb3B0cy5pbnNlcnRNb2RlID0gIW9wdHMuaW5zZXJ0TW9kZSksIGlzU2xjdG4gPSAhb3B0cy5tdWx0aSksIGdldE1hc2tTZXQoKS53cml0ZU91dEJ1ZmZlciA9ICEwO1xyXG4gICAgICAgICAgICAgICAgdmFyIHAgPSBpc1JUTCAmJiAhaXNTbGN0biA/IHBvcy5lbmQgOiBwb3MuYmVnaW4sIHZhbFJlc3VsdCA9IGlzVmFsaWQocCwgYywgc3RyaWN0KTtcclxuICAgICAgICAgICAgICAgIGlmICh2YWxSZXN1bHQgIT09ICExKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZhbFJlc3VsdCAhPT0gITAgJiYgKHAgPSB2b2lkIDAgIT09IHZhbFJlc3VsdC5wb3MgPyB2YWxSZXN1bHQucG9zIDogcCwgYyA9IHZvaWQgMCAhPT0gdmFsUmVzdWx0LmMgPyB2YWxSZXN1bHQuYyA6IGMpLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc2V0TWFza1NldCghMCksIHZvaWQgMCAhPT0gdmFsUmVzdWx0LmNhcmV0KSBmb3J3YXJkUG9zaXRpb24gPSB2YWxSZXN1bHQuY2FyZXQ7IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgdnBzID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmb3J3YXJkUG9zaXRpb24gPSAhb3B0cy5rZWVwU3RhdGljICYmICh2b2lkIDAgIT09IHZwc1twICsgMV0gJiYgZ2V0VGVzdHMocCArIDEsIHZwc1twXS5sb2NhdG9yLnNsaWNlKCksIHApLmxlbmd0aCA+IDEgfHwgdm9pZCAwICE9PSB2cHNbcF0uYWx0ZXJuYXRpb24pID8gcCArIDEgOiBzZWVrTmV4dChwKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgZ2V0TWFza1NldCgpLnAgPSBmb3J3YXJkUG9zaXRpb247XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAod3JpdGVPdXQgIT09ICExKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0cy5vbktleVZhbGlkYXRpb24uY2FsbChzZWxmLCB2YWxSZXN1bHQsIG9wdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sIDApLCBnZXRNYXNrU2V0KCkud3JpdGVPdXRCdWZmZXIgJiYgdmFsUmVzdWx0ICE9PSAhMSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBidWZmZXIsIGNoZWNrdmFsID8gdm9pZCAwIDogb3B0cy5udW1lcmljSW5wdXQgPyBzZWVrUHJldmlvdXMoZm9yd2FyZFBvc2l0aW9uKSA6IGZvcndhcmRQb3NpdGlvbiwgZSwgY2hlY2t2YWwgIT09ICEwKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hlY2t2YWwgIT09ICEwICYmIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNDb21wbGV0ZShidWZmZXIpID09PSAhMCAmJiAkaW5wdXQudHJpZ2dlcihcImNvbXBsZXRlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCAwKTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaXNTbGN0biAmJiAoZ2V0TWFza1NldCgpLmJ1ZmZlciA9IHZvaWQgMCwgZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zID0gZ2V0TWFza1NldCgpLnVuZG9Qb3NpdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIGlzU2xjdG4gJiYgKGdldE1hc2tTZXQoKS5idWZmZXIgPSB2b2lkIDAsIGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9ucyA9IGdldE1hc2tTZXQoKS51bmRvUG9zaXRpb25zKTtcclxuICAgICAgICAgICAgICAgIGlmIChvcHRzLnNob3dUb29sdGlwICYmIChpbnB1dC50aXRsZSA9IG9wdHMudG9vbHRpcCB8fCBnZXRNYXNrU2V0KCkubWFzayksIGNoZWNrdmFsICYmICQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlV3JpdGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJlc3VsdCA9IG9wdHMub25CZWZvcmVXcml0ZShlLCBnZXRCdWZmZXIoKSwgZm9yd2FyZFBvc2l0aW9uLCBvcHRzKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmVzdWx0ICYmIHJlc3VsdC5yZWZyZXNoRnJvbUJ1ZmZlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVmcmVzaCA9IHJlc3VsdC5yZWZyZXNoRnJvbUJ1ZmZlcjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXIocmVmcmVzaCA9PT0gITAgPyByZWZyZXNoIDogcmVmcmVzaC5zdGFydCwgcmVmcmVzaC5lbmQsIHJlc3VsdC5idWZmZXIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXNldE1hc2tTZXQoITApLCByZXN1bHQuY2FyZXQgJiYgKGdldE1hc2tTZXQoKS5wID0gcmVzdWx0LmNhcmV0KTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5wcmV2ZW50RGVmYXVsdCgpLCBjaGVja3ZhbCkgcmV0dXJuIHZhbFJlc3VsdDtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBwYXN0ZUV2ZW50KGUpIHtcclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgZXYgPSBlLm9yaWdpbmFsRXZlbnQgfHwgZSwgJGlucHV0ID0gJChpbnB1dCksIGlucHV0VmFsdWUgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCEwKSwgY2FyZXRQb3MgPSBjYXJldChpbnB1dCk7XHJcbiAgICAgICAgICAgIGlmIChcInByb3BlcnR5Y2hhbmdlXCIgPT09IGUudHlwZSAmJiBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkubGVuZ3RoIDw9IGdldE1hc2tMZW5ndGgoKSkgcmV0dXJuICEwO1xyXG4gICAgICAgICAgICBpZiAoXCJwYXN0ZVwiID09PSBlLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIHZhciB2YWx1ZUJlZm9yZUNhcmV0ID0gaW5wdXRWYWx1ZS5zdWJzdHIoMCwgY2FyZXRQb3MuYmVnaW4pLCB2YWx1ZUFmdGVyQ2FyZXQgPSBpbnB1dFZhbHVlLnN1YnN0cihjYXJldFBvcy5lbmQsIGlucHV0VmFsdWUubGVuZ3RoKTtcclxuICAgICAgICAgICAgICAgIHZhbHVlQmVmb3JlQ2FyZXQgPT09IGdldEJ1ZmZlclRlbXBsYXRlKCkuc2xpY2UoMCwgY2FyZXRQb3MuYmVnaW4pLmpvaW4oXCJcIikgJiYgKHZhbHVlQmVmb3JlQ2FyZXQgPSBcIlwiKSxcclxuICAgICAgICAgICAgICAgIHZhbHVlQWZ0ZXJDYXJldCA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5zbGljZShjYXJldFBvcy5lbmQpLmpvaW4oXCJcIikgJiYgKHZhbHVlQWZ0ZXJDYXJldCA9IFwiXCIpLFxyXG4gICAgICAgICAgICAgICAgd2luZG93LmNsaXBib2FyZERhdGEgJiYgd2luZG93LmNsaXBib2FyZERhdGEuZ2V0RGF0YSA/IGlucHV0VmFsdWUgPSB2YWx1ZUJlZm9yZUNhcmV0ICsgd2luZG93LmNsaXBib2FyZERhdGEuZ2V0RGF0YShcIlRleHRcIikgKyB2YWx1ZUFmdGVyQ2FyZXQgOiBldi5jbGlwYm9hcmREYXRhICYmIGV2LmNsaXBib2FyZERhdGEuZ2V0RGF0YSAmJiAoaW5wdXRWYWx1ZSA9IHZhbHVlQmVmb3JlQ2FyZXQgKyBldi5jbGlwYm9hcmREYXRhLmdldERhdGEoXCJ0ZXh0L3BsYWluXCIpICsgdmFsdWVBZnRlckNhcmV0KTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB2YXIgcGFzdGVWYWx1ZSA9IGlucHV0VmFsdWU7XHJcbiAgICAgICAgICAgIGlmICgkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZVBhc3RlKSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHBhc3RlVmFsdWUgPSBvcHRzLm9uQmVmb3JlUGFzdGUuY2FsbChpbnB1dCwgaW5wdXRWYWx1ZSwgb3B0cyksIHBhc3RlVmFsdWUgPT09ICExKSByZXR1cm4gZS5wcmV2ZW50RGVmYXVsdCgpLFxyXG4gICAgICAgICAgICAgICAgITE7XHJcbiAgICAgICAgICAgICAgICBwYXN0ZVZhbHVlIHx8IChwYXN0ZVZhbHVlID0gaW5wdXRWYWx1ZSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgcmV0dXJuIGNoZWNrVmFsKGlucHV0LCAhMSwgITEsIGlzUlRMID8gcGFzdGVWYWx1ZS5zcGxpdChcIlwiKS5yZXZlcnNlKCkgOiBwYXN0ZVZhbHVlLnRvU3RyaW5nKCkuc3BsaXQoXCJcIikpLFxyXG4gICAgICAgICAgICB3cml0ZUJ1ZmZlcihpbnB1dCwgZ2V0QnVmZmVyKCksIHZvaWQgMCwgZSwgITApLCAkaW5wdXQudHJpZ2dlcihcImNsaWNrXCIpLCBpc0NvbXBsZXRlKGdldEJ1ZmZlcigpKSA9PT0gITAgJiYgJGlucHV0LnRyaWdnZXIoXCJjb21wbGV0ZVwiKSxcclxuICAgICAgICAgICAgITE7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGlucHV0RmFsbEJhY2tFdmVudChlKSB7XHJcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXM7XHJcbiAgICAgICAgICAgIGNoZWNrVmFsKGlucHV0LCAhMCwgITEsIGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKS5zcGxpdChcIlwiKSksIGlzQ29tcGxldGUoZ2V0QnVmZmVyKCkpID09PSAhMCAmJiAkKGlucHV0KS50cmlnZ2VyKFwiY29tcGxldGVcIiksXHJcbiAgICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gbW9iaWxlSW5wdXRFdmVudChlKSB7XHJcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsIGNhcmV0UG9zID0gY2FyZXQoaW5wdXQpLCBjdXJyZW50VmFsdWUgPSBpbnB1dC5fdmFsdWVHZXQoKTtcclxuICAgICAgICAgICAgY3VycmVudFZhbHVlID0gY3VycmVudFZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChcIihcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikpICsgXCIpKlwiKSwgXCJcIiksXHJcbiAgICAgICAgICAgIGNhcmV0UG9zLmJlZ2luID4gY3VycmVudFZhbHVlLmxlbmd0aCAmJiAoY2FyZXQoaW5wdXQsIGN1cnJlbnRWYWx1ZS5sZW5ndGgpLCBjYXJldFBvcyA9IGNhcmV0KGlucHV0KSksXHJcbiAgICAgICAgICAgIGdldEJ1ZmZlcigpLmxlbmd0aCAtIGN1cnJlbnRWYWx1ZS5sZW5ndGggIT09IDEgfHwgY3VycmVudFZhbHVlLmNoYXJBdChjYXJldFBvcy5iZWdpbikgPT09IGdldEJ1ZmZlcigpW2NhcmV0UG9zLmJlZ2luXSB8fCBjdXJyZW50VmFsdWUuY2hhckF0KGNhcmV0UG9zLmJlZ2luICsgMSkgPT09IGdldEJ1ZmZlcigpW2NhcmV0UG9zLmJlZ2luXSB8fCBpc01hc2soY2FyZXRQb3MuYmVnaW4pID8gaW5wdXRGYWxsQmFja0V2ZW50LmNhbGwodGhpcywgZSkgOiAoZS5rZXlDb2RlID0gb3B0cy5rZXlDb2RlLkJBQ0tTUEFDRSxcclxuICAgICAgICAgICAga2V5ZG93bkV2ZW50LmNhbGwoaW5wdXQsIGUpKSwgZS5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBjb21wb3NpdGlvblN0YXJ0RXZlbnQoZSkge1xyXG4gICAgICAgICAgICB2YXIgZXYgPSBlLm9yaWdpbmFsRXZlbnQgfHwgZTtcclxuICAgICAgICAgICAgdW5kb1ZhbHVlID0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSwgXCJcIiA9PT0gY29tcG9zaXRpb25EYXRhIHx8IDAgIT09IGV2LmRhdGEuaW5kZXhPZihjb21wb3NpdGlvbkRhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBjb21wb3NpdGlvblVwZGF0ZUV2ZW50KGUpIHtcclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcywgZXYgPSBlLm9yaWdpbmFsRXZlbnQgfHwgZTtcclxuICAgICAgICAgICAgMCA9PT0gZXYuZGF0YS5pbmRleE9mKGNvbXBvc2l0aW9uRGF0YSkgJiYgKHJlc2V0TWFza1NldCgpLCBnZXRNYXNrU2V0KCkucCA9IHNlZWtOZXh0KC0xKSxcclxuICAgICAgICAgICAgc2tpcElucHV0RXZlbnQgPSAhMCk7XHJcbiAgICAgICAgICAgIGZvciAodmFyIG5ld0RhdGEgPSBldi5kYXRhLCBpID0gMDsgaSA8IG5ld0RhdGEubGVuZ3RoOyBpKyspIHtcclxuICAgICAgICAgICAgICAgIHZhciBrZXlwcmVzcyA9ICQuRXZlbnQoXCJrZXlwcmVzc1wiKTtcclxuICAgICAgICAgICAgICAgIGtleXByZXNzLndoaWNoID0gbmV3RGF0YS5jaGFyQ29kZUF0KGkpLCBza2lwS2V5UHJlc3NFdmVudCA9ICExLCBpZ25vcmFibGUgPSAhMSxcclxuICAgICAgICAgICAgICAgIGtleXByZXNzRXZlbnQuY2FsbChpbnB1dCwga2V5cHJlc3MsICEwLCAhMSwgITEsIGdldE1hc2tTZXQoKS5wKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIHZhciBmb3J3YXJkUG9zaXRpb24gPSBnZXRNYXNrU2V0KCkucDtcclxuICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGlucHV0LCBnZXRCdWZmZXIoKSwgb3B0cy5udW1lcmljSW5wdXQgPyBzZWVrUHJldmlvdXMoZm9yd2FyZFBvc2l0aW9uKSA6IGZvcndhcmRQb3NpdGlvbik7XHJcbiAgICAgICAgICAgIH0sIDApLCBjb21wb3NpdGlvbkRhdGEgPSBldi5kYXRhO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBjb21wb3NpdGlvbkVuZEV2ZW50KGUpIHsgfVxyXG4gICAgICAgIGZ1bmN0aW9uIHNldFZhbHVlRXZlbnQoZSkge1xyXG4gICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCB2YWx1ZSA9IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKTtcclxuICAgICAgICAgICAgY2hlY2tWYWwoaW5wdXQsICEwLCAhMSwgKCQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlTWFzaykgPyBvcHRzLm9uQmVmb3JlTWFzay5jYWxsKGlucHV0LCB2YWx1ZSwgb3B0cykgfHwgdmFsdWUgOiB2YWx1ZSkuc3BsaXQoXCJcIikpLFxyXG4gICAgICAgICAgICB1bmRvVmFsdWUgPSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpLCAob3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyB8fCBvcHRzLmNsZWFySW5jb21wbGV0ZSkgJiYgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpID09PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikgJiYgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZVNldChcIlwiKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gZm9jdXNFdmVudChlKSB7XHJcbiAgICAgICAgICAgIHZhciBpbnB1dCA9IHRoaXMsIG5wdFZhbHVlID0gaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpO1xyXG4gICAgICAgICAgICBvcHRzLnNob3dNYXNrT25Gb2N1cyAmJiAoIW9wdHMuc2hvd01hc2tPbkhvdmVyIHx8IG9wdHMuc2hvd01hc2tPbkhvdmVyICYmIFwiXCIgPT09IG5wdFZhbHVlKSA/IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSAhPT0gZ2V0QnVmZmVyKCkuam9pbihcIlwiKSAmJiB3cml0ZUJ1ZmZlcihpbnB1dCwgZ2V0QnVmZmVyKCksIHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpKSA6IG1vdXNlRW50ZXIgPT09ICExICYmIGNhcmV0KGlucHV0LCBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKSksXHJcbiAgICAgICAgICAgIG9wdHMucG9zaXRpb25DYXJldE9uVGFiID09PSAhMCAmJiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGNhcmV0KGlucHV0LCBzZWVrTmV4dChnZXRMYXN0VmFsaWRQb3NpdGlvbigpKSk7XHJcbiAgICAgICAgICAgIH0sIDApLCB1bmRvVmFsdWUgPSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBtb3VzZWxlYXZlRXZlbnQoZSkge1xyXG4gICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzO1xyXG4gICAgICAgICAgICBpZiAobW91c2VFbnRlciA9ICExLCBvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCkuc2xpY2UoKSwgbnB0VmFsdWUgPSBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCk7XHJcbiAgICAgICAgICAgICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBpbnB1dCAmJiBucHRWYWx1ZSAhPT0gaW5wdXQuZ2V0QXR0cmlidXRlKFwicGxhY2Vob2xkZXJcIikgJiYgXCJcIiAhPT0gbnB0VmFsdWUgJiYgKC0xID09PSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpICYmIG5wdFZhbHVlID09PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikgPyBidWZmZXIgPSBbXSA6IGNsZWFyT3B0aW9uYWxUYWlsKGJ1ZmZlciksXHJcbiAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihpbnB1dCwgYnVmZmVyKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gY2xpY2tFdmVudChlKSB7XHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGRvUmFkaXhGb2N1cyhjbGlja1Bvcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdHMucmFkaXhGb2N1cyAmJiBcIlwiICE9PSBvcHRzLnJhZGl4UG9pbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdnBzID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICh2b2lkIDAgPT09IHZwc1tjbGlja1Bvc10gfHwgdnBzW2NsaWNrUG9zXS5pbnB1dCA9PT0gZ2V0UGxhY2Vob2xkZXIoY2xpY2tQb3MpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjbGlja1BvcyA8IHNlZWtOZXh0KC0xKSkgcmV0dXJuICEwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb3MgPSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBnZXRCdWZmZXIoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICgtMSAhPT0gcmFkaXhQb3MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHZwIGluIHZwcykgaWYgKHZwID4gcmFkaXhQb3MgJiYgdnBzW3ZwXS5pbnB1dCAhPT0gZ2V0UGxhY2Vob2xkZXIodnApKSByZXR1cm4gITE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gITA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gITE7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcclxuICAgICAgICAgICAgaWYgKGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IGlucHV0KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRDYXJldCA9IGNhcmV0KGlucHV0KTtcclxuICAgICAgICAgICAgICAgIGlmIChzZWxlY3RlZENhcmV0LmJlZ2luID09PSBzZWxlY3RlZENhcmV0LmVuZCkgaWYgKGRvUmFkaXhGb2N1cyhzZWxlY3RlZENhcmV0LmJlZ2luKSkgY2FyZXQoaW5wdXQsICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIGdldEJ1ZmZlcigpKSk7IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBjbGlja1Bvc2l0aW9uID0gc2VsZWN0ZWRDYXJldC5iZWdpbiwgbHZjbGlja1Bvc2l0aW9uID0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oY2xpY2tQb3NpdGlvbiksIGxhc3RQb3NpdGlvbiA9IHNlZWtOZXh0KGx2Y2xpY2tQb3NpdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgbGFzdFBvc2l0aW9uID4gY2xpY2tQb3NpdGlvbiA/IGNhcmV0KGlucHV0LCBpc01hc2soY2xpY2tQb3NpdGlvbikgfHwgaXNNYXNrKGNsaWNrUG9zaXRpb24gLSAxKSA/IGNsaWNrUG9zaXRpb24gOiBzZWVrTmV4dChjbGlja1Bvc2l0aW9uKSkgOiBjYXJldChpbnB1dCwgb3B0cy5udW1lcmljSW5wdXQgPyAwIDogbGFzdFBvc2l0aW9uKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBmdW5jdGlvbiBkYmxjbGlja0V2ZW50KGUpIHtcclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBjYXJldChpbnB1dCwgMCwgc2Vla05leHQoZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSkpO1xyXG4gICAgICAgICAgICB9LCAwKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gY3V0RXZlbnQoZSkge1xyXG4gICAgICAgICAgICB2YXIgaW5wdXQgPSB0aGlzLCAkaW5wdXQgPSAkKGlucHV0KSwgcG9zID0gY2FyZXQoaW5wdXQpLCBldiA9IGUub3JpZ2luYWxFdmVudCB8fCBlLCBjbGlwYm9hcmREYXRhID0gd2luZG93LmNsaXBib2FyZERhdGEgfHwgZXYuY2xpcGJvYXJkRGF0YSwgY2xpcERhdGEgPSBpc1JUTCA/IGdldEJ1ZmZlcigpLnNsaWNlKHBvcy5lbmQsIHBvcy5iZWdpbikgOiBnZXRCdWZmZXIoKS5zbGljZShwb3MuYmVnaW4sIHBvcy5lbmQpO1xyXG4gICAgICAgICAgICBjbGlwYm9hcmREYXRhLnNldERhdGEoXCJ0ZXh0XCIsIGlzUlRMID8gY2xpcERhdGEucmV2ZXJzZSgpLmpvaW4oXCJcIikgOiBjbGlwRGF0YS5qb2luKFwiXCIpKSxcclxuICAgICAgICAgICAgZG9jdW1lbnQuZXhlY0NvbW1hbmQgJiYgZG9jdW1lbnQuZXhlY0NvbW1hbmQoXCJjb3B5XCIpLCBoYW5kbGVSZW1vdmUoaW5wdXQsIElucHV0bWFzay5rZXlDb2RlLkRFTEVURSwgcG9zKSxcclxuICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpLCBnZXRNYXNrU2V0KCkucCwgZSwgdW5kb1ZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpKSxcclxuICAgICAgICAgICAgaW5wdXQuaW5wdXRtYXNrLl92YWx1ZUdldCgpID09PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikgJiYgJGlucHV0LnRyaWdnZXIoXCJjbGVhcmVkXCIpLFxyXG4gICAgICAgICAgICBvcHRzLnNob3dUb29sdGlwICYmIChpbnB1dC50aXRsZSA9IG9wdHMudG9vbHRpcCB8fCBnZXRNYXNrU2V0KCkubWFzayk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZ1bmN0aW9uIGJsdXJFdmVudChlKSB7XHJcbiAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpLCBpbnB1dCA9IHRoaXM7XHJcbiAgICAgICAgICAgIGlmIChpbnB1dC5pbnB1dG1hc2spIHtcclxuICAgICAgICAgICAgICAgIHZhciBucHRWYWx1ZSA9IGlucHV0LmlucHV0bWFzay5fdmFsdWVHZXQoKSwgYnVmZmVyID0gZ2V0QnVmZmVyKCkuc2xpY2UoKTtcclxuICAgICAgICAgICAgICAgIHVuZG9WYWx1ZSAhPT0gYnVmZmVyLmpvaW4oXCJcIikgJiYgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJjaGFuZ2VcIiksIHVuZG9WYWx1ZSA9IGJ1ZmZlci5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgfSwgMCksIFwiXCIgIT09IG5wdFZhbHVlICYmIChvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzICYmICgtMSA9PT0gZ2V0TGFzdFZhbGlkUG9zaXRpb24oKSAmJiBucHRWYWx1ZSA9PT0gZ2V0QnVmZmVyVGVtcGxhdGUoKS5qb2luKFwiXCIpID8gYnVmZmVyID0gW10gOiBjbGVhck9wdGlvbmFsVGFpbChidWZmZXIpKSxcclxuICAgICAgICAgICAgICAgIGlzQ29tcGxldGUoYnVmZmVyKSA9PT0gITEgJiYgKHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwiaW5jb21wbGV0ZVwiKTtcclxuICAgICAgICAgICAgICAgIH0sIDApLCBvcHRzLmNsZWFySW5jb21wbGV0ZSAmJiAocmVzZXRNYXNrU2V0KCksIGJ1ZmZlciA9IG9wdHMuY2xlYXJNYXNrT25Mb3N0Rm9jdXMgPyBbXSA6IGdldEJ1ZmZlclRlbXBsYXRlKCkuc2xpY2UoKSkpLFxyXG4gICAgICAgICAgICAgICAgd3JpdGVCdWZmZXIoaW5wdXQsIGJ1ZmZlciwgdm9pZCAwLCBlKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gbW91c2VlbnRlckV2ZW50KGUpIHtcclxuICAgICAgICAgICAgdmFyIGlucHV0ID0gdGhpcztcclxuICAgICAgICAgICAgbW91c2VFbnRlciA9ICEwLCBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBpbnB1dCAmJiBvcHRzLnNob3dNYXNrT25Ib3ZlciAmJiBpbnB1dC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkgIT09IGdldEJ1ZmZlcigpLmpvaW4oXCJcIikgJiYgd3JpdGVCdWZmZXIoaW5wdXQsIGdldEJ1ZmZlcigpKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZnVuY3Rpb24gbWFzayhlbGVtKSB7XHJcbiAgICAgICAgICAgIGlmIChlbCA9IGVsZW0sICRlbCA9ICQoZWwpLCBvcHRzLnNob3dUb29sdGlwICYmIChlbC50aXRsZSA9IG9wdHMudG9vbHRpcCB8fCBnZXRNYXNrU2V0KCkubWFzayksXHJcbiAgICAgICAgICAgIChcInJ0bFwiID09PSBlbC5kaXIgfHwgb3B0cy5yaWdodEFsaWduKSAmJiAoZWwuc3R5bGUudGV4dEFsaWduID0gXCJyaWdodFwiKSwgKFwicnRsXCIgPT09IGVsLmRpciB8fCBvcHRzLm51bWVyaWNJbnB1dCkgJiYgKGVsLmRpciA9IFwibHRyXCIsXHJcbiAgICAgICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShcImRpclwiKSwgZWwuaW5wdXRtYXNrLmlzUlRMID0gITAsIGlzUlRMID0gITApLCAkZWwub2ZmKFwiLmlucHV0bWFza1wiKSxcclxuICAgICAgICAgICAgcGF0Y2hWYWx1ZVByb3BlcnR5KGVsKSwgKFwiSU5QVVRcIiA9PT0gZWwudGFnTmFtZSAmJiBpc0lucHV0VHlwZVN1cHBvcnRlZChlbC5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSB8fCBlbC5pc0NvbnRlbnRFZGl0YWJsZSkgJiYgKCQoZWwuZm9ybSkub24oXCJzdWJtaXRcIiwgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgdW5kb1ZhbHVlICE9PSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpICYmICRlbC50cmlnZ2VyKFwiY2hhbmdlXCIpLCBvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzICYmIC0xID09PSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpICYmIGVsLmlucHV0bWFzay5fdmFsdWVHZXQgJiYgZWwuaW5wdXRtYXNrLl92YWx1ZUdldCgpID09PSBnZXRCdWZmZXJUZW1wbGF0ZSgpLmpvaW4oXCJcIikgJiYgZWwuaW5wdXRtYXNrLl92YWx1ZVNldChcIlwiKSxcclxuICAgICAgICAgICAgICAgIG9wdHMucmVtb3ZlTWFza09uU3VibWl0ICYmIChlbC5pbnB1dG1hc2suX3ZhbHVlU2V0KGVsLmlucHV0bWFzay51bm1hc2tlZHZhbHVlKCksICEwKSxcclxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHdyaXRlQnVmZmVyKGVsLCBnZXRCdWZmZXIoKSk7XHJcbiAgICAgICAgICAgIH0sIDApKTtcclxuICAgICAgICAgICAgfSkub24oXCJyZXNldFwiLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAkZWwudHJpZ2dlcihcInNldHZhbHVlLmlucHV0bWFza1wiKTtcclxuICAgICAgICAgICAgfSwgMCk7XHJcbiAgICAgICAgICAgIH0pLCAkZWwub24oXCJtb3VzZWVudGVyLmlucHV0bWFza1wiLCB3cmFwRXZlbnRSdWxlcihtb3VzZWVudGVyRXZlbnQpKS5vbihcImJsdXIuaW5wdXRtYXNrXCIsIHdyYXBFdmVudFJ1bGVyKGJsdXJFdmVudCkpLm9uKFwiZm9jdXMuaW5wdXRtYXNrXCIsIHdyYXBFdmVudFJ1bGVyKGZvY3VzRXZlbnQpKS5vbihcIm1vdXNlbGVhdmUuaW5wdXRtYXNrXCIsIHdyYXBFdmVudFJ1bGVyKG1vdXNlbGVhdmVFdmVudCkpLm9uKFwiY2xpY2suaW5wdXRtYXNrXCIsIHdyYXBFdmVudFJ1bGVyKGNsaWNrRXZlbnQpKS5vbihcImRibGNsaWNrLmlucHV0bWFza1wiLCB3cmFwRXZlbnRSdWxlcihkYmxjbGlja0V2ZW50KSkub24oUGFzdGVFdmVudFR5cGUgKyBcIi5pbnB1dG1hc2sgZHJhZ2Ryb3AuaW5wdXRtYXNrIGRyb3AuaW5wdXRtYXNrXCIsIHdyYXBFdmVudFJ1bGVyKHBhc3RlRXZlbnQpKS5vbihcImN1dC5pbnB1dG1hc2tcIiwgd3JhcEV2ZW50UnVsZXIoY3V0RXZlbnQpKS5vbihcImNvbXBsZXRlLmlucHV0bWFza1wiLCB3cmFwRXZlbnRSdWxlcihvcHRzLm9uY29tcGxldGUpKS5vbihcImluY29tcGxldGUuaW5wdXRtYXNrXCIsIHdyYXBFdmVudFJ1bGVyKG9wdHMub25pbmNvbXBsZXRlKSkub24oXCJjbGVhcmVkLmlucHV0bWFza1wiLCB3cmFwRXZlbnRSdWxlcihvcHRzLm9uY2xlYXJlZCkpLm9uKFwia2V5ZG93bi5pbnB1dG1hc2tcIiwgd3JhcEV2ZW50UnVsZXIoa2V5ZG93bkV2ZW50KSkub24oXCJrZXlwcmVzcy5pbnB1dG1hc2tcIiwgd3JhcEV2ZW50UnVsZXIoa2V5cHJlc3NFdmVudCkpLFxyXG4gICAgICAgICAgICBhbmRyb2lkZmlyZWZveCB8fCAkZWwub24oXCJjb21wb3NpdGlvbnN0YXJ0LmlucHV0bWFza1wiLCB3cmFwRXZlbnRSdWxlcihjb21wb3NpdGlvblN0YXJ0RXZlbnQpKS5vbihcImNvbXBvc2l0aW9udXBkYXRlLmlucHV0bWFza1wiLCB3cmFwRXZlbnRSdWxlcihjb21wb3NpdGlvblVwZGF0ZUV2ZW50KSkub24oXCJjb21wb3NpdGlvbmVuZC5pbnB1dG1hc2tcIiwgd3JhcEV2ZW50UnVsZXIoY29tcG9zaXRpb25FbmRFdmVudCkpLFxyXG4gICAgICAgICAgICBcInBhc3RlXCIgPT09IFBhc3RlRXZlbnRUeXBlICYmICRlbC5vbihcImlucHV0LmlucHV0bWFza1wiLCB3cmFwRXZlbnRSdWxlcihpbnB1dEZhbGxCYWNrRXZlbnQpKSxcclxuICAgICAgICAgICAgKGFuZHJvaWQgfHwgYW5kcm9pZGZpcmVmb3ggfHwgYW5kcm9pZGNocm9tZSB8fCBraW5kbGUpICYmICgkZWwub2ZmKFwiaW5wdXQuaW5wdXRtYXNrXCIpLFxyXG4gICAgICAgICAgICAkZWwub24oXCJpbnB1dC5pbnB1dG1hc2tcIiwgd3JhcEV2ZW50UnVsZXIobW9iaWxlSW5wdXRFdmVudCkpKSksICRlbC5vbihcInNldHZhbHVlLmlucHV0bWFza1wiLCB3cmFwRXZlbnRSdWxlcihzZXRWYWx1ZUV2ZW50KSksXHJcbiAgICAgICAgICAgIFwiXCIgIT09IGVsLmlucHV0bWFzay5fdmFsdWVHZXQoKSB8fCBvcHRzLmNsZWFyTWFza09uTG9zdEZvY3VzID09PSAhMSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGluaXRpYWxWYWx1ZSA9ICQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlTWFzaykgPyBvcHRzLm9uQmVmb3JlTWFzay5jYWxsKGVsLCBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KCksIG9wdHMpIHx8IGVsLmlucHV0bWFzay5fdmFsdWVHZXQoKSA6IGVsLmlucHV0bWFzay5fdmFsdWVHZXQoKTtcclxuICAgICAgICAgICAgICAgIGNoZWNrVmFsKGVsLCAhMCwgITEsIGluaXRpYWxWYWx1ZS5zcGxpdChcIlwiKSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgYnVmZmVyID0gZ2V0QnVmZmVyKCkuc2xpY2UoKTtcclxuICAgICAgICAgICAgICAgIHVuZG9WYWx1ZSA9IGJ1ZmZlci5qb2luKFwiXCIpLCBpc0NvbXBsZXRlKGJ1ZmZlcikgPT09ICExICYmIG9wdHMuY2xlYXJJbmNvbXBsZXRlICYmIHJlc2V0TWFza1NldCgpLFxyXG4gICAgICAgICAgICAgICAgb3B0cy5jbGVhck1hc2tPbkxvc3RGb2N1cyAmJiAoYnVmZmVyLmpvaW4oXCJcIikgPT09IGdldEJ1ZmZlclRlbXBsYXRlKCkuam9pbihcIlwiKSA/IGJ1ZmZlciA9IFtdIDogY2xlYXJPcHRpb25hbFRhaWwoYnVmZmVyKSksXHJcbiAgICAgICAgICAgICAgICB3cml0ZUJ1ZmZlcihlbCwgYnVmZmVyKSwgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gZWwgJiYgY2FyZXQoZWwsIHNlZWtOZXh0KGdldExhc3RWYWxpZFBvc2l0aW9uKCkpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgdW5kb1ZhbHVlLCBjb21wb3NpdGlvbkRhdGEsIGVsLCAkZWwsIG1heExlbmd0aCwgdmFsdWVCdWZmZXIsIGlzUlRMID0gITEsIHNraXBLZXlQcmVzc0V2ZW50ID0gITEsIHNraXBJbnB1dEV2ZW50ID0gITEsIGlnbm9yYWJsZSA9ICExLCBtb3VzZUVudGVyID0gITA7XHJcbiAgICAgICAgaWYgKHZvaWQgMCAhPT0gYWN0aW9uT2JqKSBzd2l0Y2ggKGFjdGlvbk9iai5hY3Rpb24pIHtcclxuICAgICAgICAgICAgY2FzZSBcImlzQ29tcGxldGVcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiBlbCA9IGFjdGlvbk9iai5lbCwgaXNDb21wbGV0ZShnZXRCdWZmZXIoKSk7XHJcblxyXG4gICAgICAgICAgICBjYXNlIFwidW5tYXNrZWR2YWx1ZVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGVsID0gYWN0aW9uT2JqLmVsLCB2b2lkIDAgIT09IGVsICYmIHZvaWQgMCAhPT0gZWwuaW5wdXRtYXNrID8gKG1hc2tzZXQgPSBlbC5pbnB1dG1hc2subWFza3NldCxcclxuICAgICAgICAgICAgICAgIG9wdHMgPSBlbC5pbnB1dG1hc2sub3B0cywgaXNSVEwgPSBlbC5pbnB1dG1hc2suaXNSVEwsIHZhbHVlQnVmZmVyID0gaXNSVEwgPyBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkuc3BsaXQoXCJcIikucmV2ZXJzZSgpLmpvaW4oXCJcIikgOiBlbC5pbnB1dG1hc2suX3ZhbHVlR2V0KCkpIDogdmFsdWVCdWZmZXIgPSBhY3Rpb25PYmoudmFsdWUsXHJcbiAgICAgICAgICAgICAgICBvcHRzLm51bWVyaWNJbnB1dCAmJiAoaXNSVEwgPSAhMCksIHZhbHVlQnVmZmVyID0gKCQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlTWFzaykgPyBvcHRzLm9uQmVmb3JlTWFzayh2YWx1ZUJ1ZmZlciwgb3B0cykgfHwgdmFsdWVCdWZmZXIgOiB2YWx1ZUJ1ZmZlcikuc3BsaXQoXCJcIiksXHJcbiAgICAgICAgICAgICAgICBjaGVja1ZhbCh2b2lkIDAsICExLCAhMSwgaXNSVEwgPyB2YWx1ZUJ1ZmZlci5yZXZlcnNlKCkgOiB2YWx1ZUJ1ZmZlciksICQuaXNGdW5jdGlvbihvcHRzLm9uQmVmb3JlV3JpdGUpICYmIG9wdHMub25CZWZvcmVXcml0ZSh2b2lkIDAsIGdldEJ1ZmZlcigpLCAwLCBvcHRzKSxcclxuICAgICAgICAgICAgICAgIHVubWFza2VkdmFsdWUoZWwpO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBcIm1hc2tcIjpcclxuICAgICAgICAgICAgICAgIGVsID0gYWN0aW9uT2JqLmVsLCBtYXNrc2V0ID0gZWwuaW5wdXRtYXNrLm1hc2tzZXQsIG9wdHMgPSBlbC5pbnB1dG1hc2sub3B0cywgaXNSVEwgPSBlbC5pbnB1dG1hc2suaXNSVEwsXHJcbiAgICAgICAgICAgICAgICB1bmRvVmFsdWUgPSBnZXRCdWZmZXIoKS5qb2luKFwiXCIpLCBtYXNrKGVsKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBcImZvcm1hdFwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMubnVtZXJpY0lucHV0ICYmIChpc1JUTCA9ICEwKSwgdmFsdWVCdWZmZXIgPSAoJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVNYXNrKSA/IG9wdHMub25CZWZvcmVNYXNrKGFjdGlvbk9iai52YWx1ZSwgb3B0cykgfHwgYWN0aW9uT2JqLnZhbHVlIDogYWN0aW9uT2JqLnZhbHVlKS5zcGxpdChcIlwiKSxcclxuICAgICAgICAgICAgICAgIGNoZWNrVmFsKHZvaWQgMCwgITEsICExLCBpc1JUTCA/IHZhbHVlQnVmZmVyLnJldmVyc2UoKSA6IHZhbHVlQnVmZmVyKSwgJC5pc0Z1bmN0aW9uKG9wdHMub25CZWZvcmVXcml0ZSkgJiYgb3B0cy5vbkJlZm9yZVdyaXRlKHZvaWQgMCwgZ2V0QnVmZmVyKCksIDAsIG9wdHMpLFxyXG4gICAgICAgICAgICAgICAgYWN0aW9uT2JqLm1ldGFkYXRhID8ge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBpc1JUTCA/IGdldEJ1ZmZlcigpLnNsaWNlKCkucmV2ZXJzZSgpLmpvaW4oXCJcIikgOiBnZXRCdWZmZXIoKS5qb2luKFwiXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiBtYXNrU2NvcGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpb246IFwiZ2V0bWV0YWRhdGFcIlxyXG4gICAgICAgICAgICAgICAgICAgIH0sIG1hc2tzZXQsIG9wdHMpXHJcbiAgICAgICAgICAgICAgICB9IDogaXNSVEwgPyBnZXRCdWZmZXIoKS5zbGljZSgpLnJldmVyc2UoKS5qb2luKFwiXCIpIDogZ2V0QnVmZmVyKCkuam9pbihcIlwiKTtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJpc1ZhbGlkXCI6XHJcbiAgICAgICAgICAgICAgICBvcHRzLm51bWVyaWNJbnB1dCAmJiAoaXNSVEwgPSAhMCksIHZhbHVlQnVmZmVyID0gYWN0aW9uT2JqLnZhbHVlLnNwbGl0KFwiXCIpLCBjaGVja1ZhbCh2b2lkIDAsICExLCAhMCwgaXNSVEwgPyB2YWx1ZUJ1ZmZlci5yZXZlcnNlKCkgOiB2YWx1ZUJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBidWZmZXIgPSBnZXRCdWZmZXIoKSwgcmwgPSBkZXRlcm1pbmVMYXN0UmVxdWlyZWRQb3NpdGlvbigpLCBsbWliID0gYnVmZmVyLmxlbmd0aCAtIDE7IGxtaWIgPiBybCAmJiAhaXNNYXNrKGxtaWIpIDsgbG1pYi0tKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBidWZmZXIuc3BsaWNlKHJsLCBsbWliICsgMSAtIHJsKSwgaXNDb21wbGV0ZShidWZmZXIpICYmIGFjdGlvbk9iai52YWx1ZSA9PT0gYnVmZmVyLmpvaW4oXCJcIik7XHJcblxyXG4gICAgICAgICAgICBjYXNlIFwiZ2V0ZW1wdHltYXNrXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZ2V0QnVmZmVyVGVtcGxhdGUoKTtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJyZW1vdmVcIjpcclxuICAgICAgICAgICAgICAgIGVsID0gYWN0aW9uT2JqLmVsLCAkZWwgPSAkKGVsKSwgbWFza3NldCA9IGVsLmlucHV0bWFzay5tYXNrc2V0LCBvcHRzID0gZWwuaW5wdXRtYXNrLm9wdHMsXHJcbiAgICAgICAgICAgICAgICBlbC5pbnB1dG1hc2suX3ZhbHVlU2V0KHVubWFza2VkdmFsdWUoZWwpKSwgJGVsLm9mZihcIi5pbnB1dG1hc2tcIik7XHJcbiAgICAgICAgICAgICAgICB2YXIgdmFsdWVQcm9wZXJ0eTtcclxuICAgICAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgJiYgKHZhbHVlUHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGVsLCBcInZhbHVlXCIpKSxcclxuICAgICAgICAgICAgICAgIHZhbHVlUHJvcGVydHkgJiYgdmFsdWVQcm9wZXJ0eS5nZXQgPyBlbC5pbnB1dG1hc2suX192YWx1ZUdldCAmJiBPYmplY3QuZGVmaW5lUHJvcGVydHkoZWwsIFwidmFsdWVcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIGdldDogZWwuaW5wdXRtYXNrLl9fdmFsdWVHZXQsXHJcbiAgICAgICAgICAgICAgICAgICAgc2V0OiBlbC5pbnB1dG1hc2suX192YWx1ZVNldFxyXG4gICAgICAgICAgICAgICAgfSkgOiBkb2N1bWVudC5fX2xvb2t1cEdldHRlcl9fICYmIGVsLl9fbG9va3VwR2V0dGVyX18oXCJ2YWx1ZVwiKSAmJiBlbC5pbnB1dG1hc2suX192YWx1ZUdldCAmJiAoZWwuX19kZWZpbmVHZXR0ZXJfXyhcInZhbHVlXCIsIGVsLmlucHV0bWFzay5fX3ZhbHVlR2V0KSxcclxuICAgICAgICAgICAgICAgIGVsLl9fZGVmaW5lU2V0dGVyX18oXCJ2YWx1ZVwiLCBlbC5pbnB1dG1hc2suX192YWx1ZVNldCkpLCBlbC5pbnB1dG1hc2sgPSB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJnZXRtZXRhZGF0YVwiOlxyXG4gICAgICAgICAgICAgICAgaWYgKCQuaXNBcnJheShtYXNrc2V0Lm1ldGFkYXRhKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGFsdGVybmF0aW9uLCBsdnAgPSBnZXRMYXN0VmFsaWRQb3NpdGlvbigpLCBmaXJzdEFsdCA9IGx2cDsgZmlyc3RBbHQgPj0gMDsgZmlyc3RBbHQtLSkgaWYgKGdldE1hc2tTZXQoKS52YWxpZFBvc2l0aW9uc1tmaXJzdEFsdF0gJiYgdm9pZCAwICE9PSBnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbZmlyc3RBbHRdLmFsdGVybmF0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsdGVybmF0aW9uID0gZ2V0TWFza1NldCgpLnZhbGlkUG9zaXRpb25zW2ZpcnN0QWx0XS5hbHRlcm5hdGlvbjtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgIT09IGFsdGVybmF0aW9uID8gbWFza3NldC5tZXRhZGF0YVtnZXRNYXNrU2V0KCkudmFsaWRQb3NpdGlvbnNbbHZwXS5sb2NhdG9yW2FsdGVybmF0aW9uXV0gOiBtYXNrc2V0Lm1ldGFkYXRhWzBdO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tzZXQubWV0YWRhdGE7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgSW5wdXRtYXNrLnByb3RvdHlwZSA9IHtcclxuICAgICAgICBkZWZhdWx0czoge1xyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJfXCIsXHJcbiAgICAgICAgICAgIG9wdGlvbmFsbWFya2VyOiB7XHJcbiAgICAgICAgICAgICAgICBzdGFydDogXCJbXCIsXHJcbiAgICAgICAgICAgICAgICBlbmQ6IFwiXVwiXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHF1YW50aWZpZXJtYXJrZXI6IHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0OiBcIntcIixcclxuICAgICAgICAgICAgICAgIGVuZDogXCJ9XCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZ3JvdXBtYXJrZXI6IHtcclxuICAgICAgICAgICAgICAgIHN0YXJ0OiBcIihcIixcclxuICAgICAgICAgICAgICAgIGVuZDogXCIpXCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgYWx0ZXJuYXRvcm1hcmtlcjogXCJ8XCIsXHJcbiAgICAgICAgICAgIGVzY2FwZUNoYXI6IFwiXFxcXFwiLFxyXG4gICAgICAgICAgICBtYXNrOiBudWxsLFxyXG4gICAgICAgICAgICBvbmNvbXBsZXRlOiAkLm5vb3AsXHJcbiAgICAgICAgICAgIG9uaW5jb21wbGV0ZTogJC5ub29wLFxyXG4gICAgICAgICAgICBvbmNsZWFyZWQ6ICQubm9vcCxcclxuICAgICAgICAgICAgcmVwZWF0OiAwLFxyXG4gICAgICAgICAgICBncmVlZHk6ICEwLFxyXG4gICAgICAgICAgICBhdXRvVW5tYXNrOiAhMSxcclxuICAgICAgICAgICAgcmVtb3ZlTWFza09uU3VibWl0OiAhMSxcclxuICAgICAgICAgICAgY2xlYXJNYXNrT25Mb3N0Rm9jdXM6ICEwLFxyXG4gICAgICAgICAgICBpbnNlcnRNb2RlOiAhMCxcclxuICAgICAgICAgICAgY2xlYXJJbmNvbXBsZXRlOiAhMSxcclxuICAgICAgICAgICAgYWxpYXNlczoge30sXHJcbiAgICAgICAgICAgIGFsaWFzOiBudWxsLFxyXG4gICAgICAgICAgICBvbktleURvd246ICQubm9vcCxcclxuICAgICAgICAgICAgb25CZWZvcmVNYXNrOiBudWxsLFxyXG4gICAgICAgICAgICBvbkJlZm9yZVBhc3RlOiBmdW5jdGlvbiAocGFzdGVkVmFsdWUsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiAkLmlzRnVuY3Rpb24ob3B0cy5vbkJlZm9yZU1hc2spID8gb3B0cy5vbkJlZm9yZU1hc2socGFzdGVkVmFsdWUsIG9wdHMpIDogcGFzdGVkVmFsdWU7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIG9uQmVmb3JlV3JpdGU6IG51bGwsXHJcbiAgICAgICAgICAgIG9uVW5NYXNrOiBudWxsLFxyXG4gICAgICAgICAgICBzaG93TWFza09uRm9jdXM6ICEwLFxyXG4gICAgICAgICAgICBzaG93TWFza09uSG92ZXI6ICEwLFxyXG4gICAgICAgICAgICBvbktleVZhbGlkYXRpb246ICQubm9vcCxcclxuICAgICAgICAgICAgc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlcjogXCIgXCIsXHJcbiAgICAgICAgICAgIHNob3dUb29sdGlwOiAhMSxcclxuICAgICAgICAgICAgdG9vbHRpcDogdm9pZCAwLFxyXG4gICAgICAgICAgICBudW1lcmljSW5wdXQ6ICExLFxyXG4gICAgICAgICAgICByaWdodEFsaWduOiAhMSxcclxuICAgICAgICAgICAgdW5kb09uRXNjYXBlOiAhMCxcclxuICAgICAgICAgICAgcmFkaXhQb2ludDogXCJcIixcclxuICAgICAgICAgICAgZ3JvdXBTZXBhcmF0b3I6IFwiXCIsXHJcbiAgICAgICAgICAgIHJhZGl4Rm9jdXM6ICExLFxyXG4gICAgICAgICAgICBub2p1bXBzOiAhMSxcclxuICAgICAgICAgICAgbm9qdW1wc1RocmVzaG9sZDogMCxcclxuICAgICAgICAgICAga2VlcFN0YXRpYzogbnVsbCxcclxuICAgICAgICAgICAgcG9zaXRpb25DYXJldE9uVGFiOiAhMSxcclxuICAgICAgICAgICAgdGFiVGhyb3VnaDogITEsXHJcbiAgICAgICAgICAgIHN1cHBvcnRzSW5wdXRUeXBlOiBbXSxcclxuICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIFwiOVwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTldXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvblN5bWJvbDogXCIqXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIltBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjVdXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5pdGlvblN5bWJvbDogXCIqXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBcIipcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC05QS1aYS16XFx1MDQxMC1cXHUwNDRmXFx1MDQwMVxcdTA0NTFcXHhjMC1cXHhmZlxceGI1XVwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGlnbm9yYWJsZXM6IFs4LCA5LCAxMywgMTksIDI3LCAzMywgMzQsIDM1LCAzNiwgMzcsIDM4LCAzOSwgNDAsIDQ1LCA0NiwgOTMsIDExMiwgMTEzLCAxMTQsIDExNSwgMTE2LCAxMTcsIDExOCwgMTE5LCAxMjAsIDEyMSwgMTIyLCAxMjNdLFxyXG4gICAgICAgICAgICBpc0NvbXBsZXRlOiBudWxsLFxyXG4gICAgICAgICAgICBjYW5DbGVhclBvc2l0aW9uOiAkLm5vb3AsXHJcbiAgICAgICAgICAgIHBvc3RWYWxpZGF0aW9uOiBudWxsXHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYXNrc0NhY2hlOiB7fSxcclxuICAgICAgICBtYXNrOiBmdW5jdGlvbiAoZWxlbXMpIHtcclxuICAgICAgICAgICAgdmFyIHRoYXQgPSB0aGlzO1xyXG4gICAgICAgICAgICByZXR1cm4gXCJzdHJpbmdcIiA9PSB0eXBlb2YgZWxlbXMgJiYgKGVsZW1zID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChlbGVtcykpLCBlbGVtcyA9IGVsZW1zLm5vZGVOYW1lID8gW2VsZW1zXSA6IGVsZW1zLFxyXG4gICAgICAgICAgICAkLmVhY2goZWxlbXMsIGZ1bmN0aW9uIChuZHgsIGVsKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgc2NvcGVkT3B0cyA9ICQuZXh0ZW5kKCEwLCB7fSwgdGhhdC5vcHRzKTtcclxuICAgICAgICAgICAgICAgIGltcG9ydEF0dHJpYnV0ZU9wdGlvbnMoZWwsIHNjb3BlZE9wdHMsICQuZXh0ZW5kKCEwLCB7fSwgdGhhdC51c2VyT3B0aW9ucykpO1xyXG4gICAgICAgICAgICAgICAgdmFyIG1hc2tzZXQgPSBnZW5lcmF0ZU1hc2tTZXQoc2NvcGVkT3B0cywgdGhhdC5ub01hc2tzQ2FjaGUpO1xyXG4gICAgICAgICAgICAgICAgdm9pZCAwICE9PSBtYXNrc2V0ICYmICh2b2lkIDAgIT09IGVsLmlucHV0bWFzayAmJiBlbC5pbnB1dG1hc2sucmVtb3ZlKCksIGVsLmlucHV0bWFzayA9IG5ldyBJbnB1dG1hc2soKSxcclxuICAgICAgICAgICAgICAgIGVsLmlucHV0bWFzay5vcHRzID0gc2NvcGVkT3B0cywgZWwuaW5wdXRtYXNrLm5vTWFza3NDYWNoZSA9IHRoYXQubm9NYXNrc0NhY2hlLCBlbC5pbnB1dG1hc2sudXNlck9wdGlvbnMgPSAkLmV4dGVuZCghMCwge30sIHRoYXQudXNlck9wdGlvbnMpLFxyXG4gICAgICAgICAgICAgICAgZWwuaW5wdXRtYXNrLmVsID0gZWwsIGVsLmlucHV0bWFzay5tYXNrc2V0ID0gbWFza3NldCwgZWwuaW5wdXRtYXNrLmlzUlRMID0gITEsICQuZGF0YShlbCwgXCJfaW5wdXRtYXNrX29wdHNcIiwgc2NvcGVkT3B0cyksXHJcbiAgICAgICAgICAgICAgICBtYXNrU2NvcGUoe1xyXG4gICAgICAgICAgICAgICAgICAgIGFjdGlvbjogXCJtYXNrXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZWw6IGVsXHJcbiAgICAgICAgICAgICAgICB9KSk7XHJcbiAgICAgICAgICAgIH0pLCBlbGVtcyA/IGVsZW1zWzBdLmlucHV0bWFzayB8fCB0aGlzIDogdGhpcztcclxuICAgICAgICB9LFxyXG4gICAgICAgIG9wdGlvbjogZnVuY3Rpb24gKG9wdGlvbnMpIHtcclxuICAgICAgICAgICAgcmV0dXJuIFwic3RyaW5nXCIgPT0gdHlwZW9mIG9wdGlvbnMgPyB0aGlzLm9wdHNbb3B0aW9uc10gOiBcIm9iamVjdFwiID09IHR5cGVvZiBvcHRpb25zID8gKCQuZXh0ZW5kKHRoaXMub3B0cywgb3B0aW9ucyksXHJcbiAgICAgICAgICAgICQuZXh0ZW5kKHRoaXMudXNlck9wdGlvbnMsIG9wdGlvbnMpLCB0aGlzLmVsICYmICh2b2lkIDAgIT09IG9wdGlvbnMubWFzayB8fCB2b2lkIDAgIT09IG9wdGlvbnMuYWxpYXMgPyB0aGlzLm1hc2sodGhpcy5lbCkgOiAoJC5kYXRhKHRoaXMuZWwsIFwiX2lucHV0bWFza19vcHRzXCIsIHRoaXMub3B0cyksXHJcbiAgICAgICAgICAgIG1hc2tTY29wZSh7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwibWFza1wiLFxyXG4gICAgICAgICAgICAgICAgZWw6IHRoaXMuZWxcclxuICAgICAgICAgICAgfSkpKSwgdGhpcykgOiB2b2lkIDA7XHJcbiAgICAgICAgfSxcclxuICAgICAgICB1bm1hc2tlZHZhbHVlOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1hc2tTY29wZSh7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwidW5tYXNrZWR2YWx1ZVwiLFxyXG4gICAgICAgICAgICAgICAgZWw6IHRoaXMuZWwsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVcclxuICAgICAgICAgICAgfSwgdGhpcy5lbCAmJiB0aGlzLmVsLmlucHV0bWFzayA/IHRoaXMuZWwuaW5wdXRtYXNrLm1hc2tzZXQgOiBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSksIHRoaXMub3B0cyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICByZW1vdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZWwgPyAobWFza1Njb3BlKHtcclxuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJyZW1vdmVcIixcclxuICAgICAgICAgICAgICAgIGVsOiB0aGlzLmVsXHJcbiAgICAgICAgICAgIH0pLCB0aGlzLmVsLmlucHV0bWFzayA9IHZvaWQgMCwgdGhpcy5lbCkgOiB2b2lkIDA7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXRlbXB0eW1hc2s6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1hc2tTY29wZSh7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwiZ2V0ZW1wdHltYXNrXCJcclxuICAgICAgICAgICAgfSwgdGhpcy5tYXNrc2V0IHx8IGdlbmVyYXRlTWFza1NldCh0aGlzLm9wdHMsIHRoaXMubm9NYXNrc0NhY2hlKSwgdGhpcy5vcHRzKTtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGhhc01hc2tlZFZhbHVlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5vcHRzLmF1dG9Vbm1hc2s7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpc0NvbXBsZXRlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBtYXNrU2NvcGUoe1xyXG4gICAgICAgICAgICAgICAgYWN0aW9uOiBcImlzQ29tcGxldGVcIixcclxuICAgICAgICAgICAgICAgIGVsOiB0aGlzLmVsXHJcbiAgICAgICAgICAgIH0sIHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSksIHRoaXMub3B0cyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBnZXRtZXRhZGF0YTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICByZXR1cm4gbWFza1Njb3BlKHtcclxuICAgICAgICAgICAgICAgIGFjdGlvbjogXCJnZXRtZXRhZGF0YVwiXHJcbiAgICAgICAgICAgIH0sIHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSksIHRoaXMub3B0cyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBpc1ZhbGlkOiBmdW5jdGlvbiAodmFsdWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1hc2tTY29wZSh7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwiaXNWYWxpZFwiLFxyXG4gICAgICAgICAgICAgICAgdmFsdWU6IHZhbHVlXHJcbiAgICAgICAgICAgIH0sIHRoaXMubWFza3NldCB8fCBnZW5lcmF0ZU1hc2tTZXQodGhpcy5vcHRzLCB0aGlzLm5vTWFza3NDYWNoZSksIHRoaXMub3B0cyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBmb3JtYXQ6IGZ1bmN0aW9uICh2YWx1ZSwgbWV0YWRhdGEpIHtcclxuICAgICAgICAgICAgcmV0dXJuIG1hc2tTY29wZSh7XHJcbiAgICAgICAgICAgICAgICBhY3Rpb246IFwiZm9ybWF0XCIsXHJcbiAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWUsXHJcbiAgICAgICAgICAgICAgICBtZXRhZGF0YTogbWV0YWRhdGFcclxuICAgICAgICAgICAgfSwgdGhpcy5tYXNrc2V0IHx8IGdlbmVyYXRlTWFza1NldCh0aGlzLm9wdHMsIHRoaXMubm9NYXNrc0NhY2hlKSwgdGhpcy5vcHRzKTtcclxuICAgICAgICB9XHJcbiAgICB9LCBJbnB1dG1hc2suZXh0ZW5kRGVmYXVsdHMgPSBmdW5jdGlvbiAob3B0aW9ucykge1xyXG4gICAgICAgICQuZXh0ZW5kKCEwLCBJbnB1dG1hc2sucHJvdG90eXBlLmRlZmF1bHRzLCBvcHRpb25zKTtcclxuICAgIH0sIElucHV0bWFzay5leHRlbmREZWZpbml0aW9ucyA9IGZ1bmN0aW9uIChkZWZpbml0aW9uKSB7XHJcbiAgICAgICAgJC5leHRlbmQoITAsIElucHV0bWFzay5wcm90b3R5cGUuZGVmYXVsdHMuZGVmaW5pdGlvbnMsIGRlZmluaXRpb24pO1xyXG4gICAgfSwgSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMgPSBmdW5jdGlvbiAoYWxpYXMpIHtcclxuICAgICAgICAkLmV4dGVuZCghMCwgSW5wdXRtYXNrLnByb3RvdHlwZS5kZWZhdWx0cy5hbGlhc2VzLCBhbGlhcyk7XHJcbiAgICB9LCBJbnB1dG1hc2suZm9ybWF0ID0gZnVuY3Rpb24gKHZhbHVlLCBvcHRpb25zLCBtZXRhZGF0YSkge1xyXG4gICAgICAgIHJldHVybiBJbnB1dG1hc2sob3B0aW9ucykuZm9ybWF0KHZhbHVlLCBtZXRhZGF0YSk7XHJcbiAgICB9LCBJbnB1dG1hc2sudW5tYXNrID0gZnVuY3Rpb24gKHZhbHVlLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIElucHV0bWFzayhvcHRpb25zKS51bm1hc2tlZHZhbHVlKHZhbHVlKTtcclxuICAgIH0sIElucHV0bWFzay5pc1ZhbGlkID0gZnVuY3Rpb24gKHZhbHVlLCBvcHRpb25zKSB7XHJcbiAgICAgICAgcmV0dXJuIElucHV0bWFzayhvcHRpb25zKS5pc1ZhbGlkKHZhbHVlKTtcclxuICAgIH0sIElucHV0bWFzay5yZW1vdmUgPSBmdW5jdGlvbiAoZWxlbXMpIHtcclxuICAgICAgICAkLmVhY2goZWxlbXMsIGZ1bmN0aW9uIChuZHgsIGVsKSB7XHJcbiAgICAgICAgICAgIGVsLmlucHV0bWFzayAmJiBlbC5pbnB1dG1hc2sucmVtb3ZlKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9LCBJbnB1dG1hc2suZXNjYXBlUmVnZXggPSBmdW5jdGlvbiAoc3RyKSB7XHJcbiAgICAgICAgdmFyIHNwZWNpYWxzID0gW1wiL1wiLCBcIi5cIiwgXCIqXCIsIFwiK1wiLCBcIj9cIiwgXCJ8XCIsIFwiKFwiLCBcIilcIiwgXCJbXCIsIFwiXVwiLCBcIntcIiwgXCJ9XCIsIFwiXFxcXFwiLCBcIiRcIiwgXCJeXCJdO1xyXG4gICAgICAgIHJldHVybiBzdHIucmVwbGFjZShuZXcgUmVnRXhwKFwiKFxcXFxcIiArIHNwZWNpYWxzLmpvaW4oXCJ8XFxcXFwiKSArIFwiKVwiLCBcImdpbVwiKSwgXCJcXFxcJDFcIik7XHJcbiAgICB9LCBJbnB1dG1hc2sua2V5Q29kZSA9IHtcclxuICAgICAgICBBTFQ6IDE4LFxyXG4gICAgICAgIEJBQ0tTUEFDRTogOCxcclxuICAgICAgICBDQVBTX0xPQ0s6IDIwLFxyXG4gICAgICAgIENPTU1BOiAxODgsXHJcbiAgICAgICAgQ09NTUFORDogOTEsXHJcbiAgICAgICAgQ09NTUFORF9MRUZUOiA5MSxcclxuICAgICAgICBDT01NQU5EX1JJR0hUOiA5MyxcclxuICAgICAgICBDT05UUk9MOiAxNyxcclxuICAgICAgICBERUxFVEU6IDQ2LFxyXG4gICAgICAgIERPV046IDQwLFxyXG4gICAgICAgIEVORDogMzUsXHJcbiAgICAgICAgRU5URVI6IDEzLFxyXG4gICAgICAgIEVTQ0FQRTogMjcsXHJcbiAgICAgICAgSE9NRTogMzYsXHJcbiAgICAgICAgSU5TRVJUOiA0NSxcclxuICAgICAgICBMRUZUOiAzNyxcclxuICAgICAgICBNRU5VOiA5MyxcclxuICAgICAgICBOVU1QQURfQUREOiAxMDcsXHJcbiAgICAgICAgTlVNUEFEX0RFQ0lNQUw6IDExMCxcclxuICAgICAgICBOVU1QQURfRElWSURFOiAxMTEsXHJcbiAgICAgICAgTlVNUEFEX0VOVEVSOiAxMDgsXHJcbiAgICAgICAgTlVNUEFEX01VTFRJUExZOiAxMDYsXHJcbiAgICAgICAgTlVNUEFEX1NVQlRSQUNUOiAxMDksXHJcbiAgICAgICAgUEFHRV9ET1dOOiAzNCxcclxuICAgICAgICBQQUdFX1VQOiAzMyxcclxuICAgICAgICBQRVJJT0Q6IDE5MCxcclxuICAgICAgICBSSUdIVDogMzksXHJcbiAgICAgICAgU0hJRlQ6IDE2LFxyXG4gICAgICAgIFNQQUNFOiAzMixcclxuICAgICAgICBUQUI6IDksXHJcbiAgICAgICAgVVA6IDM4LFxyXG4gICAgICAgIFdJTkRPV1M6IDkxXHJcbiAgICB9O1xyXG4gICAgdmFyIHVhID0gbmF2aWdhdG9yLnVzZXJBZ2VudCwgaXBob25lID0gbnVsbCAhPT0gdWEubWF0Y2gobmV3IFJlZ0V4cChcImlwaG9uZVwiLCBcImlcIikpLCBhbmRyb2lkID0gbnVsbCAhPT0gdWEubWF0Y2gobmV3IFJlZ0V4cChcImFuZHJvaWQuKnNhZmFyaS4qXCIsIFwiaVwiKSksIGFuZHJvaWRjaHJvbWUgPSBudWxsICE9PSB1YS5tYXRjaChuZXcgUmVnRXhwKFwiYW5kcm9pZC4qY2hyb21lLipcIiwgXCJpXCIpKSwgYW5kcm9pZGZpcmVmb3ggPSBudWxsICE9PSB1YS5tYXRjaChuZXcgUmVnRXhwKFwiYW5kcm9pZC4qZmlyZWZveC4qXCIsIFwiaVwiKSksIGtpbmRsZSA9IC9LaW5kbGUvaS50ZXN0KHVhKSB8fCAvU2lsay9pLnRlc3QodWEpIHx8IC9LRlRUL2kudGVzdCh1YSkgfHwgL0tGT1QvaS50ZXN0KHVhKSB8fCAvS0ZKV0EvaS50ZXN0KHVhKSB8fCAvS0ZKV0kvaS50ZXN0KHVhKSB8fCAvS0ZTT1dJL2kudGVzdCh1YSkgfHwgL0tGVEhXQS9pLnRlc3QodWEpIHx8IC9LRlRIV0kvaS50ZXN0KHVhKSB8fCAvS0ZBUFdBL2kudGVzdCh1YSkgfHwgL0tGQVBXSS9pLnRlc3QodWEpLCBQYXN0ZUV2ZW50VHlwZSA9IGlzSW5wdXRFdmVudFN1cHBvcnRlZChcInBhc3RlXCIpID8gXCJwYXN0ZVwiIDogaXNJbnB1dEV2ZW50U3VwcG9ydGVkKFwiaW5wdXRcIikgPyBcImlucHV0XCIgOiBcInByb3BlcnR5Y2hhbmdlXCI7XHJcbiAgICByZXR1cm4gd2luZG93LklucHV0bWFzayA9IElucHV0bWFzaywgSW5wdXRtYXNrO1xyXG59KGpRdWVyeSksIGZ1bmN0aW9uICgkLCBJbnB1dG1hc2spIHtcclxuICAgIHJldHVybiB2b2lkIDAgPT09ICQuZm4uaW5wdXRtYXNrICYmICgkLmZuLmlucHV0bWFzayA9IGZ1bmN0aW9uIChmbiwgb3B0aW9ucykge1xyXG4gICAgICAgIHZhciBucHRtYXNrLCBpbnB1dDtcclxuICAgICAgICBpZiAob3B0aW9ucyA9IG9wdGlvbnMgfHwge30sIFwic3RyaW5nXCIgPT0gdHlwZW9mIGZuKSBzd2l0Y2ggKGZuKSB7XHJcbiAgICAgICAgICAgIGNhc2UgXCJtYXNrXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbnB0bWFzayA9IG5ldyBJbnB1dG1hc2sob3B0aW9ucyksIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbnB0bWFzay5tYXNrKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBjYXNlIFwidW5tYXNrZWR2YWx1ZVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0ID0gdGhpcy5qcXVlcnkgJiYgdGhpcy5sZW5ndGggPiAwID8gdGhpc1swXSA6IHRoaXMsIGlucHV0LmlucHV0bWFzayA/IGlucHV0LmlucHV0bWFzay51bm1hc2tlZHZhbHVlKCkgOiAkKGlucHV0KS52YWwoKTtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJyZW1vdmVcIjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMuaW5wdXRtYXNrICYmIHRoaXMuaW5wdXRtYXNrLnJlbW92ZSgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBjYXNlIFwiZ2V0ZW1wdHltYXNrXCI6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5wdXQgPSB0aGlzLmpxdWVyeSAmJiB0aGlzLmxlbmd0aCA+IDAgPyB0aGlzWzBdIDogdGhpcywgaW5wdXQuaW5wdXRtYXNrID8gaW5wdXQuaW5wdXRtYXNrLmdldGVtcHR5bWFzaygpIDogXCJcIjtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJoYXNNYXNrZWRWYWx1ZVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0ID0gdGhpcy5qcXVlcnkgJiYgdGhpcy5sZW5ndGggPiAwID8gdGhpc1swXSA6IHRoaXMsIGlucHV0LmlucHV0bWFzayA/IGlucHV0LmlucHV0bWFzay5oYXNNYXNrZWRWYWx1ZSgpIDogITE7XHJcblxyXG4gICAgICAgICAgICBjYXNlIFwiaXNDb21wbGV0ZVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0ID0gdGhpcy5qcXVlcnkgJiYgdGhpcy5sZW5ndGggPiAwID8gdGhpc1swXSA6IHRoaXMsIGlucHV0LmlucHV0bWFzayA/IGlucHV0LmlucHV0bWFzay5pc0NvbXBsZXRlKCkgOiAhMDtcclxuXHJcbiAgICAgICAgICAgIGNhc2UgXCJnZXRtZXRhZGF0YVwiOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGlucHV0ID0gdGhpcy5qcXVlcnkgJiYgdGhpcy5sZW5ndGggPiAwID8gdGhpc1swXSA6IHRoaXMsIGlucHV0LmlucHV0bWFzayA/IGlucHV0LmlucHV0bWFzay5nZXRtZXRhZGF0YSgpIDogdm9pZCAwO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBcInNldHZhbHVlXCI6XHJcbiAgICAgICAgICAgICAgICBpbnB1dCA9IHRoaXMuanF1ZXJ5ICYmIHRoaXMubGVuZ3RoID4gMCA/IHRoaXNbMF0gOiB0aGlzLCAkKGlucHV0KS52YWwob3B0aW9ucyksXHJcbiAgICAgICAgICAgICAgICB2b2lkIDAgIT09IGlucHV0LmlucHV0bWFzayAmJiAkKGlucHV0KS50cmlnZ2VySGFuZGxlcihcInNldHZhbHVlLmlucHV0bWFza1wiKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgY2FzZSBcIm9wdGlvblwiOlxyXG4gICAgICAgICAgICAgICAgaWYgKFwic3RyaW5nXCIgIT0gdHlwZW9mIG9wdGlvbnMpIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2b2lkIDAgIT09IHRoaXMuaW5wdXRtYXNrID8gdGhpcy5pbnB1dG1hc2sub3B0aW9uKG9wdGlvbnMpIDogdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPSB0aGlzLmpxdWVyeSAmJiB0aGlzLmxlbmd0aCA+IDAgPyB0aGlzWzBdIDogdGhpcywgdm9pZCAwICE9PSBpbnB1dC5pbnB1dG1hc2spIHJldHVybiBpbnB1dC5pbnB1dG1hc2sub3B0aW9uKG9wdGlvbnMpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdGlvbnMuYWxpYXMgPSBmbiwgbnB0bWFzayA9IG5ldyBJbnB1dG1hc2sob3B0aW9ucyksIHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbnB0bWFzay5tYXNrKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKFwib2JqZWN0XCIgPT0gdHlwZW9mIGZuKSByZXR1cm4gbnB0bWFzayA9IG5ldyBJbnB1dG1hc2soZm4pLCB2b2lkIDAgPT09IGZuLm1hc2sgJiYgdm9pZCAwID09PSBmbi5hbGlhcyA/IHRoaXMuZWFjaChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdm9pZCAwICE9PSB0aGlzLmlucHV0bWFzayA/IHRoaXMuaW5wdXRtYXNrLm9wdGlvbihmbikgOiB2b2lkIG5wdG1hc2subWFzayh0aGlzKTtcclxuICAgICAgICAgICAgfSkgOiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgbnB0bWFzay5tYXNrKHRoaXMpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gZm4pIHJldHVybiB0aGlzLmVhY2goZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgbnB0bWFzayA9IG5ldyBJbnB1dG1hc2sob3B0aW9ucyksIG5wdG1hc2subWFzayh0aGlzKTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSksICQuZm4uaW5wdXRtYXNrO1xyXG59KGpRdWVyeSwgSW5wdXRtYXNrKSwgZnVuY3Rpb24gKCQsIElucHV0bWFzaykge1xyXG4gICAgcmV0dXJuIElucHV0bWFzay5leHRlbmREZWZpbml0aW9ucyh7XHJcbiAgICAgICAgaDoge1xyXG4gICAgICAgICAgICB2YWxpZGF0b3I6IFwiWzAxXVswLTldfDJbMC0zXVwiLFxyXG4gICAgICAgICAgICBjYXJkaW5hbGl0eTogMixcclxuICAgICAgICAgICAgcHJldmFsaWRhdG9yOiBbe1xyXG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTJdXCIsXHJcbiAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxyXG4gICAgICAgICAgICB9XVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgczoge1xyXG4gICAgICAgICAgICB2YWxpZGF0b3I6IFwiWzAtNV1bMC05XVwiLFxyXG4gICAgICAgICAgICBjYXJkaW5hbGl0eTogMixcclxuICAgICAgICAgICAgcHJldmFsaWRhdG9yOiBbe1xyXG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTVdXCIsXHJcbiAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxyXG4gICAgICAgICAgICB9XVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZDoge1xyXG4gICAgICAgICAgICB2YWxpZGF0b3I6IFwiMFsxLTldfFsxMl1bMC05XXwzWzAxXVwiLFxyXG4gICAgICAgICAgICBjYXJkaW5hbGl0eTogMixcclxuICAgICAgICAgICAgcHJldmFsaWRhdG9yOiBbe1xyXG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTNdXCIsXHJcbiAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxyXG4gICAgICAgICAgICB9XVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgbToge1xyXG4gICAgICAgICAgICB2YWxpZGF0b3I6IFwiMFsxLTldfDFbMDEyXVwiLFxyXG4gICAgICAgICAgICBjYXJkaW5hbGl0eTogMixcclxuICAgICAgICAgICAgcHJldmFsaWRhdG9yOiBbe1xyXG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswMV1cIixcclxuICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXHJcbiAgICAgICAgICAgIH1dXHJcbiAgICAgICAgfSxcclxuICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgIHZhbGlkYXRvcjogXCIoMTl8MjApXFxcXGR7Mn1cIixcclxuICAgICAgICAgICAgY2FyZGluYWxpdHk6IDQsXHJcbiAgICAgICAgICAgIHByZXZhbGlkYXRvcjogW3tcclxuICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMTJdXCIsXHJcbiAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxyXG4gICAgICAgICAgICB9LCB7XHJcbiAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiKDE5fDIwKVwiLFxyXG4gICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDJcclxuICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBcIigxOXwyMClcXFxcZFwiLFxyXG4gICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDNcclxuICAgICAgICAgICAgfV1cclxuICAgICAgICB9XHJcbiAgICB9KSwgSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMoe1xyXG4gICAgICAgIFwiZGQvbW0veXl5eVwiOiB7XHJcbiAgICAgICAgICAgIG1hc2s6IFwiMS8yL3lcIixcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiZGQvbW0veXl5eVwiLFxyXG4gICAgICAgICAgICByZWdleDoge1xyXG4gICAgICAgICAgICAgICAgdmFsMXByZTogbmV3IFJlZ0V4cChcIlswLTNdXCIpLFxyXG4gICAgICAgICAgICAgICAgdmFsMTogbmV3IFJlZ0V4cChcIjBbMS05XXxbMTJdWzAtOV18M1swMV1cIiksXHJcbiAgICAgICAgICAgICAgICB2YWwycHJlOiBmdW5jdGlvbiAoc2VwYXJhdG9yKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVzY2FwZWRTZXBhcmF0b3IgPSBJbnB1dG1hc2suZXNjYXBlUmVnZXguY2FsbCh0aGlzLCBzZXBhcmF0b3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgUmVnRXhwKFwiKCgwWzEtOV18WzEyXVswLTldfDNbMDFdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiWzAxXSlcIik7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdmFsMjogZnVuY3Rpb24gKHNlcGFyYXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlc2NhcGVkU2VwYXJhdG9yID0gSW5wdXRtYXNrLmVzY2FwZVJlZ2V4LmNhbGwodGhpcywgc2VwYXJhdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChcIigoMFsxLTldfFsxMl1bMC05XSlcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIigwWzEtOV18MVswMTJdKSl8KDMwXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIoMFsxMy05XXwxWzAxMl0pKXwoMzFcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIigwWzEzNTc4XXwxWzAyXSkpXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsZWFwZGF5OiBcIjI5LzAyL1wiLFxyXG4gICAgICAgICAgICBzZXBhcmF0b3I6IFwiL1wiLFxyXG4gICAgICAgICAgICB5ZWFycmFuZ2U6IHtcclxuICAgICAgICAgICAgICAgIG1pbnllYXI6IDE5MDAsXHJcbiAgICAgICAgICAgICAgICBtYXh5ZWFyOiAyMDk5XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGlzSW5ZZWFyUmFuZ2U6IGZ1bmN0aW9uIChjaHJzLCBtaW55ZWFyLCBtYXh5ZWFyKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoaXNOYU4oY2hycykpIHJldHVybiAhMTtcclxuICAgICAgICAgICAgICAgIHZhciBlbnRlcmVkeWVhciA9IHBhcnNlSW50KGNocnMuY29uY2F0KG1pbnllYXIudG9TdHJpbmcoKS5zbGljZShjaHJzLmxlbmd0aCkpKSwgZW50ZXJlZHllYXIyID0gcGFyc2VJbnQoY2hycy5jb25jYXQobWF4eWVhci50b1N0cmluZygpLnNsaWNlKGNocnMubGVuZ3RoKSkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIChpc05hTihlbnRlcmVkeWVhcikgPyAhMSA6IGVudGVyZWR5ZWFyID49IG1pbnllYXIgJiYgbWF4eWVhciA+PSBlbnRlcmVkeWVhcikgfHwgKGlzTmFOKGVudGVyZWR5ZWFyMikgPyAhMSA6IGVudGVyZWR5ZWFyMiA+PSBtaW55ZWFyICYmIG1heHllYXIgPj0gZW50ZXJlZHllYXIyKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGV0ZXJtaW5lYmFzZXllYXI6IGZ1bmN0aW9uIChtaW55ZWFyLCBtYXh5ZWFyLCBoaW50KSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgY3VycmVudHllYXIgPSBuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAobWlueWVhciA+IGN1cnJlbnR5ZWFyKSByZXR1cm4gbWlueWVhcjtcclxuICAgICAgICAgICAgICAgIGlmIChjdXJyZW50eWVhciA+IG1heHllYXIpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBtYXhZZWFyUHJlZml4ID0gbWF4eWVhci50b1N0cmluZygpLnNsaWNlKDAsIDIpLCBtYXhZZWFyUG9zdGZpeCA9IG1heHllYXIudG9TdHJpbmcoKS5zbGljZSgyLCA0KSA7IG1heFllYXJQcmVmaXggKyBoaW50ID4gbWF4eWVhcjspIG1heFllYXJQcmVmaXgtLTtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWF4eFllYXIgPSBtYXhZZWFyUHJlZml4ICsgbWF4WWVhclBvc3RmaXg7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG1pbnllYXIgPiBtYXh4WWVhciA/IG1pbnllYXIgOiBtYXh4WWVhcjtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjdXJyZW50eWVhcjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25LZXlEb3duOiBmdW5jdGlvbiAoZSwgYnVmZmVyLCBjYXJldFBvcywgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5jdHJsS2V5ICYmIGUua2V5Q29kZSA9PT0gSW5wdXRtYXNrLmtleUNvZGUuUklHSFQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC52YWwodG9kYXkuZ2V0RGF0ZSgpLnRvU3RyaW5nKCkgKyAodG9kYXkuZ2V0TW9udGgoKSArIDEpLnRvU3RyaW5nKCkgKyB0b2RheS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwic2V0dmFsdWUuaW5wdXRtYXNrXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBnZXRGcm9udFZhbHVlOiBmdW5jdGlvbiAobWFzaywgYnVmZmVyLCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBzdGFydCA9IDAsIGxlbmd0aCA9IDAsIGkgPSAwOyBpIDwgbWFzay5sZW5ndGggJiYgXCIyXCIgIT09IG1hc2suY2hhckF0KGkpIDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGRlZmluaXRpb24gPSBvcHRzLmRlZmluaXRpb25zW21hc2suY2hhckF0KGkpXTtcclxuICAgICAgICAgICAgICAgICAgICBkZWZpbml0aW9uID8gKHN0YXJ0ICs9IGxlbmd0aCwgbGVuZ3RoID0gZGVmaW5pdGlvbi5jYXJkaW5hbGl0eSkgOiBsZW5ndGgrKztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBidWZmZXIuam9pbihcIlwiKS5zdWJzdHIoc3RhcnQsIGxlbmd0aCk7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBcIjFcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gb3B0cy5yZWdleC52YWwxLnRlc3QoY2hycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpY3QgfHwgaXNWYWxpZCB8fCBjaHJzLmNoYXJBdCgxKSAhPT0gb3B0cy5zZXBhcmF0b3IgJiYgLTEgPT09IFwiLS4vXCIuaW5kZXhPZihjaHJzLmNoYXJBdCgxKSkgfHwgIShpc1ZhbGlkID0gb3B0cy5yZWdleC52YWwxLnRlc3QoXCIwXCIgKyBjaHJzLmNoYXJBdCgwKSkpID8gaXNWYWxpZCA6IChtYXNrc2V0LmJ1ZmZlcltwb3MgLSAxXSA9IFwiMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBwb3MgLSAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogcG9zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBjaHJzLmNoYXJBdCgwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAyLFxyXG4gICAgICAgICAgICAgICAgICAgIHByZXZhbGlkYXRvcjogW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBwY2hycyA9IGNocnM7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc05hTihtYXNrc2V0LmJ1ZmZlcltwb3MgKyAxXSkgfHwgKHBjaHJzICs9IG1hc2tzZXQuYnVmZmVyW3BvcyArIDFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gMSA9PT0gcGNocnMubGVuZ3RoID8gb3B0cy5yZWdleC52YWwxcHJlLnRlc3QocGNocnMpIDogb3B0cy5yZWdleC52YWwxLnRlc3QocGNocnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdHJpY3QgJiYgIWlzVmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCA9IG9wdHMucmVnZXgudmFsMS50ZXN0KGNocnMgKyBcIjBcIikpIHJldHVybiBtYXNrc2V0LmJ1ZmZlcltwb3NdID0gY2hycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrc2V0LmJ1ZmZlclsrK3Bvc10gPSBcIjBcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogXCIwXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkID0gb3B0cy5yZWdleC52YWwxLnRlc3QoXCIwXCIgKyBjaHJzKSkgcmV0dXJuIG1hc2tzZXQuYnVmZmVyW3Bvc10gPSBcIjBcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MrKywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNWYWxpZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDFcclxuICAgICAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIFwiMlwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGZyb250VmFsdWUgPSBvcHRzLmdldEZyb250VmFsdWUobWFza3NldC5tYXNrLCBtYXNrc2V0LmJ1ZmZlciwgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC0xICE9PSBmcm9udFZhbHVlLmluZGV4T2Yob3B0cy5wbGFjZWhvbGRlclswXSkgJiYgKGZyb250VmFsdWUgPSBcIjAxXCIgKyBvcHRzLnNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gb3B0cy5yZWdleC52YWwyKG9wdHMuc2VwYXJhdG9yKS50ZXN0KGZyb250VmFsdWUgKyBjaHJzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdHJpY3QgJiYgIWlzVmFsaWQgJiYgKGNocnMuY2hhckF0KDEpID09PSBvcHRzLnNlcGFyYXRvciB8fCAtMSAhPT0gXCItLi9cIi5pbmRleE9mKGNocnMuY2hhckF0KDEpKSkgJiYgKGlzVmFsaWQgPSBvcHRzLnJlZ2V4LnZhbDIob3B0cy5zZXBhcmF0b3IpLnRlc3QoZnJvbnRWYWx1ZSArIFwiMFwiICsgY2hycy5jaGFyQXQoMCkpKSkgcmV0dXJuIG1hc2tzZXQuYnVmZmVyW3BvcyAtIDFdID0gXCIwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhcnQ6IHBvcyAtIDEsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBwb3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvcyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IGNocnMuY2hhckF0KDApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm1hc2suaW5kZXhPZihcIjJcIikgPT09IG9wdHMubWFzay5sZW5ndGggLSAxICYmIGlzVmFsaWQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXlNb250aFZhbHVlID0gbWFza3NldC5idWZmZXIuam9pbihcIlwiKS5zdWJzdHIoNCwgNCkgKyBjaHJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGRheU1vbnRoVmFsdWUgIT09IG9wdHMubGVhcGRheSkgcmV0dXJuICEwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHllYXIgPSBwYXJzZUludChtYXNrc2V0LmJ1ZmZlci5qb2luKFwiXCIpLnN1YnN0cigwLCA0KSwgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHllYXIgJSA0ID09PSAwID8geWVhciAlIDEwMCA9PT0gMCA/IHllYXIgJSA0MDAgPT09IDAgPyAhMCA6ICExIDogITAgOiAhMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNWYWxpZDtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAyLFxyXG4gICAgICAgICAgICAgICAgICAgIHByZXZhbGlkYXRvcjogW3tcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzTmFOKG1hc2tzZXQuYnVmZmVyW3BvcyArIDFdKSB8fCAoY2hycyArPSBtYXNrc2V0LmJ1ZmZlcltwb3MgKyAxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZnJvbnRWYWx1ZSA9IG9wdHMuZ2V0RnJvbnRWYWx1ZShtYXNrc2V0Lm1hc2ssIG1hc2tzZXQuYnVmZmVyLCBvcHRzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC0xICE9PSBmcm9udFZhbHVlLmluZGV4T2Yob3B0cy5wbGFjZWhvbGRlclswXSkgJiYgKGZyb250VmFsdWUgPSBcIjAxXCIgKyBvcHRzLnNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IDEgPT09IGNocnMubGVuZ3RoID8gb3B0cy5yZWdleC52YWwycHJlKG9wdHMuc2VwYXJhdG9yKS50ZXN0KGZyb250VmFsdWUgKyBjaHJzKSA6IG9wdHMucmVnZXgudmFsMihvcHRzLnNlcGFyYXRvcikudGVzdChmcm9udFZhbHVlICsgY2hycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaWN0IHx8IGlzVmFsaWQgfHwgIShpc1ZhbGlkID0gb3B0cy5yZWdleC52YWwyKG9wdHMuc2VwYXJhdG9yKS50ZXN0KGZyb250VmFsdWUgKyBcIjBcIiArIGNocnMpKSA/IGlzVmFsaWQgOiAobWFza3NldC5idWZmZXJbcG9zXSA9IFwiMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zKyssIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3M6IHBvc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXHJcbiAgICAgICAgICAgICAgICAgICAgfV1cclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB5OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdHMuaXNJblllYXJSYW5nZShjaHJzLCBvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGRheU1vbnRoVmFsdWUgPSBtYXNrc2V0LmJ1ZmZlci5qb2luKFwiXCIpLnN1YnN0cigwLCA2KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXlNb250aFZhbHVlICE9PSBvcHRzLmxlYXBkYXkpIHJldHVybiAhMDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5ZWFyID0gcGFyc2VJbnQoY2hycywgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHllYXIgJSA0ID09PSAwID8geWVhciAlIDEwMCA9PT0gMCA/IHllYXIgJSA0MDAgPT09IDAgPyAhMCA6ICExIDogITAgOiAhMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gITE7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogNCxcclxuICAgICAgICAgICAgICAgICAgICBwcmV2YWxpZGF0b3I6IFt7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IG9wdHMuaXNJblllYXJSYW5nZShjaHJzLCBvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RyaWN0ICYmICFpc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHllYXJQcmVmaXggPSBvcHRzLmRldGVybWluZWJhc2V5ZWFyKG9wdHMueWVhcnJhbmdlLm1pbnllYXIsIG9wdHMueWVhcnJhbmdlLm1heHllYXIsIGNocnMgKyBcIjBcIikudG9TdHJpbmcoKS5zbGljZSgwLCAxKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCA9IG9wdHMuaXNJblllYXJSYW5nZSh5ZWFyUHJlZml4ICsgY2hycywgb3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhcikpIHJldHVybiBtYXNrc2V0LmJ1ZmZlcltwb3MrK10gPSB5ZWFyUHJlZml4LmNoYXJBdCgwKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeWVhclByZWZpeCA9IG9wdHMuZGV0ZXJtaW5lYmFzZXllYXIob3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhciwgY2hycyArIFwiMFwiKS50b1N0cmluZygpLnNsaWNlKDAsIDIpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSBvcHRzLmlzSW5ZZWFyUmFuZ2UoeWVhclByZWZpeCArIGNocnMsIG9wdHMueWVhcnJhbmdlLm1pbnllYXIsIG9wdHMueWVhcnJhbmdlLm1heHllYXIpKSByZXR1cm4gbWFza3NldC5idWZmZXJbcG9zKytdID0geWVhclByZWZpeC5jaGFyQXQoMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza3NldC5idWZmZXJbcG9zKytdID0geWVhclByZWZpeC5jaGFyQXQoMSksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIChjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBvcHRzLmlzSW5ZZWFyUmFuZ2UoY2hycywgb3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIXN0cmljdCAmJiAhaXNWYWxpZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB5ZWFyUHJlZml4ID0gb3B0cy5kZXRlcm1pbmViYXNleWVhcihvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyLCBjaHJzKS50b1N0cmluZygpLnNsaWNlKDAsIDIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkID0gb3B0cy5pc0luWWVhclJhbmdlKGNocnNbMF0gKyB5ZWFyUHJlZml4WzFdICsgY2hyc1sxXSwgb3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhcikpIHJldHVybiBtYXNrc2V0LmJ1ZmZlcltwb3MrK10gPSB5ZWFyUHJlZml4LmNoYXJBdCgxKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoeWVhclByZWZpeCA9IG9wdHMuZGV0ZXJtaW5lYmFzZXllYXIob3B0cy55ZWFycmFuZ2UubWlueWVhciwgb3B0cy55ZWFycmFuZ2UubWF4eWVhciwgY2hycykudG9TdHJpbmcoKS5zbGljZSgwLCAyKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvcHRzLmlzSW5ZZWFyUmFuZ2UoeWVhclByZWZpeCArIGNocnMsIG9wdHMueWVhcnJhbmdlLm1pbnllYXIsIG9wdHMueWVhcnJhbmdlLm1heHllYXIpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkYXlNb250aFZhbHVlID0gbWFza3NldC5idWZmZXIuam9pbihcIlwiKS5zdWJzdHIoMCwgNik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChkYXlNb250aFZhbHVlICE9PSBvcHRzLmxlYXBkYXkpIGlzVmFsaWQgPSAhMDsgZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgeWVhciA9IHBhcnNlSW50KGNocnMsIDEwKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzVmFsaWQgPSB5ZWFyICUgNCA9PT0gMCA/IHllYXIgJSAxMDAgPT09IDAgPyB5ZWFyICUgNDAwID09PSAwID8gITAgOiAhMSA6ICEwIDogITE7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaXNWYWxpZCA9ICExO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpc1ZhbGlkKSByZXR1cm4gbWFza3NldC5idWZmZXJbcG9zIC0gMV0gPSB5ZWFyUHJlZml4LmNoYXJBdCgwKSwgbWFza3NldC5idWZmZXJbcG9zKytdID0geWVhclByZWZpeC5jaGFyQXQoMSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFza3NldC5idWZmZXJbcG9zKytdID0gY2hycy5jaGFyQXQoMCksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBwb3MgLSAzLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBwb3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAyXHJcbiAgICAgICAgICAgICAgICAgICAgfSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIChjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMuaXNJblllYXJSYW5nZShjaHJzLCBvcHRzLnllYXJyYW5nZS5taW55ZWFyLCBvcHRzLnllYXJyYW5nZS5tYXh5ZWFyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDNcclxuICAgICAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBpbnNlcnRNb2RlOiAhMSxcclxuICAgICAgICAgICAgYXV0b1VubWFzazogITFcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwibW0vZGQveXl5eVwiOiB7XHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcIm1tL2RkL3l5eXlcIixcclxuICAgICAgICAgICAgYWxpYXM6IFwiZGQvbW0veXl5eVwiLFxyXG4gICAgICAgICAgICByZWdleDoge1xyXG4gICAgICAgICAgICAgICAgdmFsMnByZTogZnVuY3Rpb24gKHNlcGFyYXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlc2NhcGVkU2VwYXJhdG9yID0gSW5wdXRtYXNrLmVzY2FwZVJlZ2V4LmNhbGwodGhpcywgc2VwYXJhdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChcIigoMFsxMy05XXwxWzAxMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCJbMC0zXSl8KDAyXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCJbMC0yXSlcIik7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdmFsMjogZnVuY3Rpb24gKHNlcGFyYXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlc2NhcGVkU2VwYXJhdG9yID0gSW5wdXRtYXNrLmVzY2FwZVJlZ2V4LmNhbGwodGhpcywgc2VwYXJhdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChcIigoMFsxLTldfDFbMDEyXSlcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIigwWzEtOV18WzEyXVswLTldKSl8KCgwWzEzLTldfDFbMDEyXSlcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIjMwKXwoKDBbMTM1NzhdfDFbMDJdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiMzEpXCIpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHZhbDFwcmU6IG5ldyBSZWdFeHAoXCJbMDFdXCIpLFxyXG4gICAgICAgICAgICAgICAgdmFsMTogbmV3IFJlZ0V4cChcIjBbMS05XXwxWzAxMl1cIilcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgbGVhcGRheTogXCIwMi8yOS9cIixcclxuICAgICAgICAgICAgb25LZXlEb3duOiBmdW5jdGlvbiAoZSwgYnVmZmVyLCBjYXJldFBvcywgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5jdHJsS2V5ICYmIGUua2V5Q29kZSA9PT0gSW5wdXRtYXNrLmtleUNvZGUuUklHSFQpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgdG9kYXkgPSBuZXcgRGF0ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC52YWwoKHRvZGF5LmdldE1vbnRoKCkgKyAxKS50b1N0cmluZygpICsgdG9kYXkuZ2V0RGF0ZSgpLnRvU3RyaW5nKCkgKyB0b2RheS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCkpLFxyXG4gICAgICAgICAgICAgICAgICAgICRpbnB1dC50cmlnZ2VyKFwic2V0dmFsdWUuaW5wdXRtYXNrXCIpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBcInl5eXkvbW0vZGRcIjoge1xyXG4gICAgICAgICAgICBtYXNrOiBcInkvMS8yXCIsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcInl5eXkvbW0vZGRcIixcclxuICAgICAgICAgICAgYWxpYXM6IFwibW0vZGQveXl5eVwiLFxyXG4gICAgICAgICAgICBsZWFwZGF5OiBcIi8wMi8yOVwiLFxyXG4gICAgICAgICAgICBvbktleURvd246IGZ1bmN0aW9uIChlLCBidWZmZXIsIGNhcmV0UG9zLCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgJGlucHV0ID0gJCh0aGlzKTtcclxuICAgICAgICAgICAgICAgIGlmIChlLmN0cmxLZXkgJiYgZS5rZXlDb2RlID09PSBJbnB1dG1hc2sua2V5Q29kZS5SSUdIVCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB0b2RheSA9IG5ldyBEYXRlKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgJGlucHV0LnZhbCh0b2RheS5nZXRGdWxsWWVhcigpLnRvU3RyaW5nKCkgKyAodG9kYXkuZ2V0TW9udGgoKSArIDEpLnRvU3RyaW5nKCkgKyB0b2RheS5nZXREYXRlKCkudG9TdHJpbmcoKSksXHJcbiAgICAgICAgICAgICAgICAgICAgJGlucHV0LnRyaWdnZXIoXCJzZXR2YWx1ZS5pbnB1dG1hc2tcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZGQubW0ueXl5eVwiOiB7XHJcbiAgICAgICAgICAgIG1hc2s6IFwiMS4yLnlcIixcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiZGQubW0ueXl5eVwiLFxyXG4gICAgICAgICAgICBsZWFwZGF5OiBcIjI5LjAyLlwiLFxyXG4gICAgICAgICAgICBzZXBhcmF0b3I6IFwiLlwiLFxyXG4gICAgICAgICAgICBhbGlhczogXCJkZC9tbS95eXl5XCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiZGQtbW0teXl5eVwiOiB7XHJcbiAgICAgICAgICAgIG1hc2s6IFwiMS0yLXlcIixcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiZGQtbW0teXl5eVwiLFxyXG4gICAgICAgICAgICBsZWFwZGF5OiBcIjI5LTAyLVwiLFxyXG4gICAgICAgICAgICBzZXBhcmF0b3I6IFwiLVwiLFxyXG4gICAgICAgICAgICBhbGlhczogXCJkZC9tbS95eXl5XCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwibW0uZGQueXl5eVwiOiB7XHJcbiAgICAgICAgICAgIG1hc2s6IFwiMS4yLnlcIixcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwibW0uZGQueXl5eVwiLFxyXG4gICAgICAgICAgICBsZWFwZGF5OiBcIjAyLjI5LlwiLFxyXG4gICAgICAgICAgICBzZXBhcmF0b3I6IFwiLlwiLFxyXG4gICAgICAgICAgICBhbGlhczogXCJtbS9kZC95eXl5XCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwibW0tZGQteXl5eVwiOiB7XHJcbiAgICAgICAgICAgIG1hc2s6IFwiMS0yLXlcIixcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwibW0tZGQteXl5eVwiLFxyXG4gICAgICAgICAgICBsZWFwZGF5OiBcIjAyLTI5LVwiLFxyXG4gICAgICAgICAgICBzZXBhcmF0b3I6IFwiLVwiLFxyXG4gICAgICAgICAgICBhbGlhczogXCJtbS9kZC95eXl5XCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwieXl5eS5tbS5kZFwiOiB7XHJcbiAgICAgICAgICAgIG1hc2s6IFwieS4xLjJcIixcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwieXl5eS5tbS5kZFwiLFxyXG4gICAgICAgICAgICBsZWFwZGF5OiBcIi4wMi4yOVwiLFxyXG4gICAgICAgICAgICBzZXBhcmF0b3I6IFwiLlwiLFxyXG4gICAgICAgICAgICBhbGlhczogXCJ5eXl5L21tL2RkXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwieXl5eS1tbS1kZFwiOiB7XHJcbiAgICAgICAgICAgIG1hc2s6IFwieS0xLTJcIixcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwieXl5eS1tbS1kZFwiLFxyXG4gICAgICAgICAgICBsZWFwZGF5OiBcIi0wMi0yOVwiLFxyXG4gICAgICAgICAgICBzZXBhcmF0b3I6IFwiLVwiLFxyXG4gICAgICAgICAgICBhbGlhczogXCJ5eXl5L21tL2RkXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRhdGV0aW1lOiB7XHJcbiAgICAgICAgICAgIG1hc2s6IFwiMS8yL3kgaDpzXCIsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcImRkL21tL3l5eXkgaGg6bW1cIixcclxuICAgICAgICAgICAgYWxpYXM6IFwiZGQvbW0veXl5eVwiLFxyXG4gICAgICAgICAgICByZWdleDoge1xyXG4gICAgICAgICAgICAgICAgaHJzcHJlOiBuZXcgUmVnRXhwKFwiWzAxMl1cIiksXHJcbiAgICAgICAgICAgICAgICBocnMyNDogbmV3IFJlZ0V4cChcIjJbMC00XXwxWzMtOV1cIiksXHJcbiAgICAgICAgICAgICAgICBocnM6IG5ldyBSZWdFeHAoXCJbMDFdWzAtOV18MlswLTRdXCIpLFxyXG4gICAgICAgICAgICAgICAgYW1wbTogbmV3IFJlZ0V4cChcIl5bYXxwfEF8UF1bbXxNXVwiKSxcclxuICAgICAgICAgICAgICAgIG1zcHJlOiBuZXcgUmVnRXhwKFwiWzAtNV1cIiksXHJcbiAgICAgICAgICAgICAgICBtczogbmV3IFJlZ0V4cChcIlswLTVdWzAtOV1cIilcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgdGltZXNlcGFyYXRvcjogXCI6XCIsXHJcbiAgICAgICAgICAgIGhvdXJGb3JtYXQ6IFwiMjRcIixcclxuICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIGg6IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIChjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoXCIyNFwiID09PSBvcHRzLmhvdXJGb3JtYXQgJiYgMjQgPT09IHBhcnNlSW50KGNocnMsIDEwKSkgcmV0dXJuIG1hc2tzZXQuYnVmZmVyW3BvcyAtIDFdID0gXCIwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tzZXQuYnVmZmVyW3Bvc10gPSBcIjBcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXI6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogcG9zIC0gMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbmQ6IHBvc1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IFwiMFwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gb3B0cy5yZWdleC5ocnMudGVzdChjaHJzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFzdHJpY3QgJiYgIWlzVmFsaWQgJiYgKGNocnMuY2hhckF0KDEpID09PSBvcHRzLnRpbWVzZXBhcmF0b3IgfHwgLTEgIT09IFwiLS46XCIuaW5kZXhPZihjaHJzLmNoYXJBdCgxKSkpICYmIChpc1ZhbGlkID0gb3B0cy5yZWdleC5ocnMudGVzdChcIjBcIiArIGNocnMuY2hhckF0KDApKSkpIHJldHVybiBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAxXSA9IFwiMFwiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXNrc2V0LmJ1ZmZlcltwb3NdID0gY2hycy5jaGFyQXQoMCksIHBvcysrLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXJ0OiBwb3MgLSAyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogcG9zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBvcHRzLnRpbWVzZXBhcmF0b3JcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzVmFsaWQgJiYgXCIyNFwiICE9PSBvcHRzLmhvdXJGb3JtYXQgJiYgb3B0cy5yZWdleC5ocnMyNC50ZXN0KGNocnMpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdG1wID0gcGFyc2VJbnQoY2hycywgMTApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIDI0ID09PSB0bXAgPyAobWFza3NldC5idWZmZXJbcG9zICsgNV0gPSBcImFcIiwgbWFza3NldC5idWZmZXJbcG9zICsgNl0gPSBcIm1cIikgOiAobWFza3NldC5idWZmZXJbcG9zICsgNV0gPSBcInBcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tzZXQuYnVmZmVyW3BvcyArIDZdID0gXCJtXCIpLCB0bXAgLT0gMTIsIDEwID4gdG1wID8gKG1hc2tzZXQuYnVmZmVyW3Bvc10gPSB0bXAudG9TdHJpbmcoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hc2tzZXQuYnVmZmVyW3BvcyAtIDFdID0gXCIwXCIpIDogKG1hc2tzZXQuYnVmZmVyW3Bvc10gPSB0bXAudG9TdHJpbmcoKS5jaGFyQXQoMSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAxXSA9IHRtcC50b1N0cmluZygpLmNoYXJBdCgwKSksIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogcG9zIC0gMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZW5kOiBwb3MgKyA2XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBtYXNrc2V0LmJ1ZmZlcltwb3NdXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDIsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmFsaWRhdG9yOiBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIChjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBvcHRzLnJlZ2V4Lmhyc3ByZS50ZXN0KGNocnMpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0cmljdCB8fCBpc1ZhbGlkIHx8ICEoaXNWYWxpZCA9IG9wdHMucmVnZXguaHJzLnRlc3QoXCIwXCIgKyBjaHJzKSkgPyBpc1ZhbGlkIDogKG1hc2tzZXQuYnVmZmVyW3Bvc10gPSBcIjBcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvcysrLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxyXG4gICAgICAgICAgICAgICAgICAgIH1dXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgczoge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCJbMC01XVswLTldXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDIsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmFsaWRhdG9yOiBbe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIChjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBvcHRzLnJlZ2V4Lm1zcHJlLnRlc3QoY2hycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RyaWN0IHx8IGlzVmFsaWQgfHwgIShpc1ZhbGlkID0gb3B0cy5yZWdleC5tcy50ZXN0KFwiMFwiICsgY2hycykpID8gaXNWYWxpZCA6IChtYXNrc2V0LmJ1ZmZlcltwb3NdID0gXCIwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwb3MrKywge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDFcclxuICAgICAgICAgICAgICAgICAgICB9XVxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHQ6IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIChjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5yZWdleC5hbXBtLnRlc3QoY2hycyArIFwibVwiKTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNhc2luZzogXCJsb3dlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGluc2VydE1vZGU6ICExLFxyXG4gICAgICAgICAgICBhdXRvVW5tYXNrOiAhMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGF0ZXRpbWUxMjoge1xyXG4gICAgICAgICAgICBtYXNrOiBcIjEvMi95IGg6cyB0XFxcXG1cIixcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiZGQvbW0veXl5eSBoaDptbSB4bVwiLFxyXG4gICAgICAgICAgICBhbGlhczogXCJkYXRldGltZVwiLFxyXG4gICAgICAgICAgICBob3VyRm9ybWF0OiBcIjEyXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwibW0vZGQveXl5eSBoaDptbSB4bVwiOiB7XHJcbiAgICAgICAgICAgIG1hc2s6IFwiMS8yL3kgaDpzIHRcXFxcbVwiLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJtbS9kZC95eXl5IGhoOm1tIHhtXCIsXHJcbiAgICAgICAgICAgIGFsaWFzOiBcImRhdGV0aW1lMTJcIixcclxuICAgICAgICAgICAgcmVnZXg6IHtcclxuICAgICAgICAgICAgICAgIHZhbDJwcmU6IGZ1bmN0aW9uIChzZXBhcmF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXNjYXBlZFNlcGFyYXRvciA9IElucHV0bWFzay5lc2NhcGVSZWdleC5jYWxsKHRoaXMsIHNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoKDBbMTMtOV18MVswMTJdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiWzAtM10pfCgwMlwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiWzAtMl0pXCIpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHZhbDI6IGZ1bmN0aW9uIChzZXBhcmF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXNjYXBlZFNlcGFyYXRvciA9IElucHV0bWFzay5lc2NhcGVSZWdleC5jYWxsKHRoaXMsIHNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoKDBbMS05XXwxWzAxMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIoMFsxLTldfFsxMl1bMC05XSkpfCgoMFsxMy05XXwxWzAxMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCIzMCl8KCgwWzEzNTc4XXwxWzAyXSlcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIjMxKVwiKTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICB2YWwxcHJlOiBuZXcgUmVnRXhwKFwiWzAxXVwiKSxcclxuICAgICAgICAgICAgICAgIHZhbDE6IG5ldyBSZWdFeHAoXCIwWzEtOV18MVswMTJdXCIpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGxlYXBkYXk6IFwiMDIvMjkvXCIsXHJcbiAgICAgICAgICAgIG9uS2V5RG93bjogZnVuY3Rpb24gKGUsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgIHZhciAkaW5wdXQgPSAkKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgaWYgKGUuY3RybEtleSAmJiBlLmtleUNvZGUgPT09IElucHV0bWFzay5rZXlDb2RlLlJJR0hUKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHRvZGF5ID0gbmV3IERhdGUoKTtcclxuICAgICAgICAgICAgICAgICAgICAkaW5wdXQudmFsKCh0b2RheS5nZXRNb250aCgpICsgMSkudG9TdHJpbmcoKSArIHRvZGF5LmdldERhdGUoKS50b1N0cmluZygpICsgdG9kYXkuZ2V0RnVsbFllYXIoKS50b1N0cmluZygpKSxcclxuICAgICAgICAgICAgICAgICAgICAkaW5wdXQudHJpZ2dlcihcInNldHZhbHVlLmlucHV0bWFza1wiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJoaDptbSB0XCI6IHtcclxuICAgICAgICAgICAgbWFzazogXCJoOnMgdFxcXFxtXCIsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcImhoOm1tIHhtXCIsXHJcbiAgICAgICAgICAgIGFsaWFzOiBcImRhdGV0aW1lXCIsXHJcbiAgICAgICAgICAgIGhvdXJGb3JtYXQ6IFwiMTJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCJoOnMgdFwiOiB7XHJcbiAgICAgICAgICAgIG1hc2s6IFwiaDpzIHRcXFxcbVwiLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJoaDptbSB4bVwiLFxyXG4gICAgICAgICAgICBhbGlhczogXCJkYXRldGltZVwiLFxyXG4gICAgICAgICAgICBob3VyRm9ybWF0OiBcIjEyXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIFwiaGg6bW06c3NcIjoge1xyXG4gICAgICAgICAgICBtYXNrOiBcImg6czpzXCIsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcImhoOm1tOnNzXCIsXHJcbiAgICAgICAgICAgIGFsaWFzOiBcImRhdGV0aW1lXCIsXHJcbiAgICAgICAgICAgIGF1dG9Vbm1hc2s6ICExXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcImhoOm1tXCI6IHtcclxuICAgICAgICAgICAgbWFzazogXCJoOnNcIixcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiaGg6bW1cIixcclxuICAgICAgICAgICAgYWxpYXM6IFwiZGF0ZXRpbWVcIixcclxuICAgICAgICAgICAgYXV0b1VubWFzazogITFcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRhdGU6IHtcclxuICAgICAgICAgICAgYWxpYXM6IFwiZGQvbW0veXl5eVwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBcIm1tL3l5eXlcIjoge1xyXG4gICAgICAgICAgICBtYXNrOiBcIjEveVwiLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJtbS95eXl5XCIsXHJcbiAgICAgICAgICAgIGxlYXBkYXk6IFwiZG9ub3R1c2VcIixcclxuICAgICAgICAgICAgc2VwYXJhdG9yOiBcIi9cIixcclxuICAgICAgICAgICAgYWxpYXM6IFwibW0vZGQveXl5eVwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBzaGFtc2k6IHtcclxuICAgICAgICAgICAgcmVnZXg6IHtcclxuICAgICAgICAgICAgICAgIHZhbDJwcmU6IGZ1bmN0aW9uIChzZXBhcmF0b3IpIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgZXNjYXBlZFNlcGFyYXRvciA9IElucHV0bWFzay5lc2NhcGVSZWdleC5jYWxsKHRoaXMsIHNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXCIoKDBbMS05XXwxWzAxMl0pXCIgKyBlc2NhcGVkU2VwYXJhdG9yICsgXCJbMC0zXSlcIik7XHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgdmFsMjogZnVuY3Rpb24gKHNlcGFyYXRvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBlc2NhcGVkU2VwYXJhdG9yID0gSW5wdXRtYXNrLmVzY2FwZVJlZ2V4LmNhbGwodGhpcywgc2VwYXJhdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChcIigoMFsxLTldfDFbMDEyXSlcIiArIGVzY2FwZWRTZXBhcmF0b3IgKyBcIigwWzEtOV18WzEyXVswLTldKSl8KCgwWzEtOV18MVswMTJdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiMzApfCgoMFsxLTZdKVwiICsgZXNjYXBlZFNlcGFyYXRvciArIFwiMzEpXCIpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIHZhbDFwcmU6IG5ldyBSZWdFeHAoXCJbMDFdXCIpLFxyXG4gICAgICAgICAgICAgICAgdmFsMTogbmV3IFJlZ0V4cChcIjBbMS05XXwxWzAxMl1cIilcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgeWVhcnJhbmdlOiB7XHJcbiAgICAgICAgICAgICAgICBtaW55ZWFyOiAxMzAwLFxyXG4gICAgICAgICAgICAgICAgbWF4eWVhcjogMTQ5OVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBtYXNrOiBcInkvMS8yXCIsXHJcbiAgICAgICAgICAgIGxlYXBkYXk6IFwiLzEyLzMwXCIsXHJcbiAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBcInl5eXkvbW0vZGRcIixcclxuICAgICAgICAgICAgYWxpYXM6IFwibW0vZGQveXl5eVwiLFxyXG4gICAgICAgICAgICBjbGVhckluY29tcGxldGU6ICEwXHJcbiAgICAgICAgfVxyXG4gICAgfSksIElucHV0bWFzaztcclxufShqUXVlcnksIElucHV0bWFzayksIGZ1bmN0aW9uICgkLCBJbnB1dG1hc2spIHtcclxuICAgIHJldHVybiBJbnB1dG1hc2suZXh0ZW5kRGVmaW5pdGlvbnMoe1xyXG4gICAgICAgIEE6IHtcclxuICAgICAgICAgICAgdmFsaWRhdG9yOiBcIltBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjVdXCIsXHJcbiAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxLFxyXG4gICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCImXCI6IHtcclxuICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLVphLXpcXHUwNDEwLVxcdTA0NGZcXHUwNDAxXFx1MDQ1MVxceGMwLVxceGZmXFx4YjVdXCIsXHJcbiAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxLFxyXG4gICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgXCIjXCI6IHtcclxuICAgICAgICAgICAgdmFsaWRhdG9yOiBcIlswLTlBLUZhLWZdXCIsXHJcbiAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxLFxyXG4gICAgICAgICAgICBjYXNpbmc6IFwidXBwZXJcIlxyXG4gICAgICAgIH1cclxuICAgIH0pLCBJbnB1dG1hc2suZXh0ZW5kQWxpYXNlcyh7XHJcbiAgICAgICAgdXJsOiB7XHJcbiAgICAgICAgICAgIG1hc2s6IFwiaXJcIixcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiXCIsXHJcbiAgICAgICAgICAgIHNlcGFyYXRvcjogXCJcIixcclxuICAgICAgICAgICAgZGVmYXVsdFByZWZpeDogXCJodHRwOi8vXCIsXHJcbiAgICAgICAgICAgIHJlZ2V4OiB7XHJcbiAgICAgICAgICAgICAgICB1cmxwcmUxOiBuZXcgUmVnRXhwKFwiW2ZoXVwiKSxcclxuICAgICAgICAgICAgICAgIHVybHByZTI6IG5ldyBSZWdFeHAoXCIoZnR8aHQpXCIpLFxyXG4gICAgICAgICAgICAgICAgdXJscHJlMzogbmV3IFJlZ0V4cChcIihmdHB8aHR0KVwiKSxcclxuICAgICAgICAgICAgICAgIHVybHByZTQ6IG5ldyBSZWdFeHAoXCIoZnRwOnxodHRwfGZ0cHMpXCIpLFxyXG4gICAgICAgICAgICAgICAgdXJscHJlNTogbmV3IFJlZ0V4cChcIihmdHA6L3xmdHBzOnxodHRwOnxodHRwcylcIiksXHJcbiAgICAgICAgICAgICAgICB1cmxwcmU2OiBuZXcgUmVnRXhwKFwiKGZ0cDovL3xmdHBzOi98aHR0cDovfGh0dHBzOilcIiksXHJcbiAgICAgICAgICAgICAgICB1cmxwcmU3OiBuZXcgUmVnRXhwKFwiKGZ0cDovL3xmdHBzOi8vfGh0dHA6Ly98aHR0cHM6LylcIiksXHJcbiAgICAgICAgICAgICAgICB1cmxwcmU4OiBuZXcgUmVnRXhwKFwiKGZ0cDovL3xmdHBzOi8vfGh0dHA6Ly98aHR0cHM6Ly8pXCIpXHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBpOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICEwO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDgsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmFsaWRhdG9yOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHJlc3VsdCA9IFtdLCBwcmVmaXhMaW1pdCA9IDgsIGkgPSAwOyBwcmVmaXhMaW1pdCA+IGk7IGkrKykgcmVzdWx0W2ldID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGogPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIChjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAob3B0cy5yZWdleFtcInVybHByZVwiICsgKGogKyAxKV0pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBrLCB0bXAgPSBjaHJzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaiArIDEgLSBjaHJzLmxlbmd0aCA+IDAgJiYgKHRtcCA9IG1hc2tzZXQuYnVmZmVyLmpvaW4oXCJcIikuc3Vic3RyaW5nKDAsIGogKyAxIC0gY2hycy5sZW5ndGgpICsgXCJcIiArIHRtcCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9IG9wdHMucmVnZXhbXCJ1cmxwcmVcIiArIChqICsgMSldLnRlc3QodG1wKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICghc3RyaWN0ICYmICFpc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChwb3MgLT0gaiwgayA9IDA7IGsgPCBvcHRzLmRlZmF1bHRQcmVmaXgubGVuZ3RoOyBrKyspIG1hc2tzZXQuYnVmZmVyW3Bvc10gPSBvcHRzLmRlZmF1bHRQcmVmaXhba10sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zKys7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChrID0gMDsgayA8IHRtcC5sZW5ndGggLSAxOyBrKyspIG1hc2tzZXQuYnVmZmVyW3Bvc10gPSB0bXBba10sIHBvcysrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiBqXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSgpXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgcjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogXCIuXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDUwXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIGluc2VydE1vZGU6ICExLFxyXG4gICAgICAgICAgICBhdXRvVW5tYXNrOiAhMVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaXA6IHtcclxuICAgICAgICAgICAgbWFzazogXCJpW2lbaV1dLmlbaVtpXV0uaVtpW2ldXS5pW2lbaV1dXCIsXHJcbiAgICAgICAgICAgIGRlZmluaXRpb25zOiB7XHJcbiAgICAgICAgICAgICAgICBpOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBvcyAtIDEgPiAtMSAmJiBcIi5cIiAhPT0gbWFza3NldC5idWZmZXJbcG9zIC0gMV0gPyAoY2hycyA9IG1hc2tzZXQuYnVmZmVyW3BvcyAtIDFdICsgY2hycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2hycyA9IHBvcyAtIDIgPiAtMSAmJiBcIi5cIiAhPT0gbWFza3NldC5idWZmZXJbcG9zIC0gMl0gPyBtYXNrc2V0LmJ1ZmZlcltwb3MgLSAyXSArIGNocnMgOiBcIjBcIiArIGNocnMpIDogY2hycyA9IFwiMDBcIiArIGNocnMsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBSZWdFeHAoXCIyNVswLTVdfDJbMC00XVswLTldfFswMV1bMC05XVswLTldXCIpLnRlc3QoY2hycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvblVuTWFzazogZnVuY3Rpb24gKG1hc2tlZFZhbHVlLCB1bm1hc2tlZFZhbHVlLCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFza2VkVmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9LFxyXG4gICAgICAgIGVtYWlsOiB7XHJcbiAgICAgICAgICAgIG1hc2s6IFwiKnsxLDY0fVsuKnsxLDY0fV1bLip7MSw2NH1dWy4qezEsNjR9XUAqezEsNjR9Wy4qezIsNjR9XVsuKnsyLDZ9XVsuKnsxLDJ9XVwiLFxyXG4gICAgICAgICAgICBncmVlZHk6ICExLFxyXG4gICAgICAgICAgICBvbkJlZm9yZVBhc3RlOiBmdW5jdGlvbiAocGFzdGVkVmFsdWUsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwYXN0ZWRWYWx1ZSA9IHBhc3RlZFZhbHVlLnRvTG93ZXJDYXNlKCksIHBhc3RlZFZhbHVlLnJlcGxhY2UoXCJtYWlsdG86XCIsIFwiXCIpO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBkZWZpbml0aW9uczoge1xyXG4gICAgICAgICAgICAgICAgXCIqXCI6IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IFwiWzAtOUEtWmEteiEjJCUmJyorLz0/Xl9ge3x9fi1dXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzaW5nOiBcImxvd2VyXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25Vbk1hc2s6IGZ1bmN0aW9uIChtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG1hc2tlZFZhbHVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSxcclxuICAgICAgICBtYWM6IHtcclxuICAgICAgICAgICAgbWFzazogXCIjIzojIzojIzojIzojIzojI1wiXHJcbiAgICAgICAgfVxyXG4gICAgfSksIElucHV0bWFzaztcclxufShqUXVlcnksIElucHV0bWFzayksIGZ1bmN0aW9uICgkLCBJbnB1dG1hc2spIHtcclxuICAgIHJldHVybiBJbnB1dG1hc2suZXh0ZW5kQWxpYXNlcyh7XHJcbiAgICAgICAgbnVtZXJpYzoge1xyXG4gICAgICAgICAgICBtYXNrOiBmdW5jdGlvbiAob3B0cykge1xyXG4gICAgICAgICAgICAgICAgZnVuY3Rpb24gYXV0b0VzY2FwZSh0eHQpIHtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBlc2NhcGVkVHh0ID0gXCJcIiwgaSA9IDA7IGkgPCB0eHQubGVuZ3RoOyBpKyspIGVzY2FwZWRUeHQgKz0gb3B0cy5kZWZpbml0aW9uc1t0eHQuY2hhckF0KGkpXSA/IFwiXFxcXFwiICsgdHh0LmNoYXJBdChpKSA6IHR4dC5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVzY2FwZWRUeHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICBpZiAoMCAhPT0gb3B0cy5yZXBlYXQgJiYgaXNOYU4ob3B0cy5pbnRlZ2VyRGlnaXRzKSAmJiAob3B0cy5pbnRlZ2VyRGlnaXRzID0gb3B0cy5yZXBlYXQpLFxyXG4gICAgICAgICAgICAgICAgb3B0cy5yZXBlYXQgPSAwLCBvcHRzLmdyb3VwU2VwYXJhdG9yID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgKFwiLlwiID09PSBvcHRzLnJhZGl4UG9pbnQgPyBvcHRzLmdyb3VwU2VwYXJhdG9yID0gXCIsXCIgOiBcIixcIiA9PT0gb3B0cy5yYWRpeFBvaW50ID8gb3B0cy5ncm91cFNlcGFyYXRvciA9IFwiLlwiIDogb3B0cy5ncm91cFNlcGFyYXRvciA9IFwiXCIpLFxyXG4gICAgICAgICAgICAgICAgXCIgXCIgPT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IgJiYgKG9wdHMuc2tpcE9wdGlvbmFsUGFydENoYXJhY3RlciA9IHZvaWQgMCksIG9wdHMuYXV0b0dyb3VwID0gb3B0cy5hdXRvR3JvdXAgJiYgXCJcIiAhPT0gb3B0cy5ncm91cFNlcGFyYXRvcixcclxuICAgICAgICAgICAgICAgIG9wdHMuYXV0b0dyb3VwICYmIChcInN0cmluZ1wiID09IHR5cGVvZiBvcHRzLmdyb3VwU2l6ZSAmJiBpc0Zpbml0ZShvcHRzLmdyb3VwU2l6ZSkgJiYgKG9wdHMuZ3JvdXBTaXplID0gcGFyc2VJbnQob3B0cy5ncm91cFNpemUpKSxcclxuICAgICAgICAgICAgICAgIGlzRmluaXRlKG9wdHMuaW50ZWdlckRpZ2l0cykpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHNlcHMgPSBNYXRoLmZsb29yKG9wdHMuaW50ZWdlckRpZ2l0cyAvIG9wdHMuZ3JvdXBTaXplKSwgbW9kID0gb3B0cy5pbnRlZ2VyRGlnaXRzICUgb3B0cy5ncm91cFNpemU7XHJcbiAgICAgICAgICAgICAgICAgICAgb3B0cy5pbnRlZ2VyRGlnaXRzID0gcGFyc2VJbnQob3B0cy5pbnRlZ2VyRGlnaXRzKSArICgwID09PSBtb2QgPyBzZXBzIC0gMSA6IHNlcHMpLFxyXG4gICAgICAgICAgICAgICAgICAgIG9wdHMuaW50ZWdlckRpZ2l0cyA8IDEgJiYgKG9wdHMuaW50ZWdlckRpZ2l0cyA9IFwiKlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIG9wdHMucGxhY2Vob2xkZXIubGVuZ3RoID4gMSAmJiAob3B0cy5wbGFjZWhvbGRlciA9IG9wdHMucGxhY2Vob2xkZXIuY2hhckF0KDApKSxcclxuICAgICAgICAgICAgICAgIG9wdHMucmFkaXhGb2N1cyA9IG9wdHMucmFkaXhGb2N1cyAmJiBcIlwiICE9PSBvcHRzLnBsYWNlaG9sZGVyICYmIG9wdHMuaW50ZWdlck9wdGlvbmFsID09PSAhMCxcclxuICAgICAgICAgICAgICAgIG9wdHMuZGVmaW5pdGlvbnNbXCI7XCJdID0gb3B0cy5kZWZpbml0aW9uc1tcIn5cIl0sIG9wdHMuZGVmaW5pdGlvbnNbXCI7XCJdLmRlZmluaXRpb25TeW1ib2wgPSBcIn5cIixcclxuICAgICAgICAgICAgICAgIG9wdHMubnVtZXJpY0lucHV0ID09PSAhMCAmJiAob3B0cy5yYWRpeEZvY3VzID0gITEsIG9wdHMuZGlnaXRzT3B0aW9uYWwgPSAhMSwgaXNOYU4ob3B0cy5kaWdpdHMpICYmIChvcHRzLmRpZ2l0cyA9IDIpLFxyXG4gICAgICAgICAgICAgICAgb3B0cy5kZWNpbWFsUHJvdGVjdCA9ICExKTtcclxuICAgICAgICAgICAgICAgIHZhciBtYXNrID0gYXV0b0VzY2FwZShvcHRzLnByZWZpeCk7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbWFzayArPSBcIlsrXVwiLCBtYXNrICs9IG9wdHMuaW50ZWdlck9wdGlvbmFsID09PSAhMCA/IFwifnsxLFwiICsgb3B0cy5pbnRlZ2VyRGlnaXRzICsgXCJ9XCIgOiBcIn57XCIgKyBvcHRzLmludGVnZXJEaWdpdHMgKyBcIn1cIixcclxuICAgICAgICAgICAgICAgIHZvaWQgMCAhPT0gb3B0cy5kaWdpdHMgJiYgKGlzTmFOKG9wdHMuZGlnaXRzKSB8fCBwYXJzZUludChvcHRzLmRpZ2l0cykgPiAwKSAmJiAobWFzayArPSBvcHRzLmRpZ2l0c09wdGlvbmFsID8gXCJbXCIgKyAob3B0cy5kZWNpbWFsUHJvdGVjdCA/IFwiOlwiIDogb3B0cy5yYWRpeFBvaW50KSArIFwiO3sxLFwiICsgb3B0cy5kaWdpdHMgKyBcIn1dXCIgOiAob3B0cy5kZWNpbWFsUHJvdGVjdCA/IFwiOlwiIDogb3B0cy5yYWRpeFBvaW50KSArIFwiO3tcIiArIG9wdHMuZGlnaXRzICsgXCJ9XCIpLFxyXG4gICAgICAgICAgICAgICAgXCJcIiAhPT0gb3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrICYmIChtYXNrICs9IFwiWy1dXCIpLCBtYXNrICs9IGF1dG9Fc2NhcGUob3B0cy5zdWZmaXgpLFxyXG4gICAgICAgICAgICAgICAgb3B0cy5ncmVlZHkgPSAhMSwgbWFzaztcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiXCIsXHJcbiAgICAgICAgICAgIGdyZWVkeTogITEsXHJcbiAgICAgICAgICAgIGRpZ2l0czogXCIqXCIsXHJcbiAgICAgICAgICAgIGRpZ2l0c09wdGlvbmFsOiAhMCxcclxuICAgICAgICAgICAgcmFkaXhQb2ludDogXCIuXCIsXHJcbiAgICAgICAgICAgIHJhZGl4Rm9jdXM6ICEwLFxyXG4gICAgICAgICAgICBncm91cFNpemU6IDMsXHJcbiAgICAgICAgICAgIGdyb3VwU2VwYXJhdG9yOiBcIlwiLFxyXG4gICAgICAgICAgICBhdXRvR3JvdXA6ICExLFxyXG4gICAgICAgICAgICBhbGxvd1BsdXM6ICEwLFxyXG4gICAgICAgICAgICBhbGxvd01pbnVzOiAhMCxcclxuICAgICAgICAgICAgbmVnYXRpb25TeW1ib2w6IHtcclxuICAgICAgICAgICAgICAgIGZyb250OiBcIi1cIixcclxuICAgICAgICAgICAgICAgIGJhY2s6IFwiXCJcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaW50ZWdlckRpZ2l0czogXCIrXCIsXHJcbiAgICAgICAgICAgIGludGVnZXJPcHRpb25hbDogITAsXHJcbiAgICAgICAgICAgIHByZWZpeDogXCJcIixcclxuICAgICAgICAgICAgc3VmZml4OiBcIlwiLFxyXG4gICAgICAgICAgICByaWdodEFsaWduOiAhMCxcclxuICAgICAgICAgICAgZGVjaW1hbFByb3RlY3Q6ICEwLFxyXG4gICAgICAgICAgICBtaW46IG51bGwsXHJcbiAgICAgICAgICAgIG1heDogbnVsbCxcclxuICAgICAgICAgICAgc3RlcDogMSxcclxuICAgICAgICAgICAgaW5zZXJ0TW9kZTogITAsXHJcbiAgICAgICAgICAgIGF1dG9Vbm1hc2s6ICExLFxyXG4gICAgICAgICAgICB1bm1hc2tBc051bWJlcjogITEsXHJcbiAgICAgICAgICAgIHBvc3RGb3JtYXQ6IGZ1bmN0aW9uIChidWZmZXIsIHBvcywgcmVmb3JtYXRPbmx5LCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRzLm51bWVyaWNJbnB1dCA9PT0gITAgJiYgKGJ1ZmZlciA9IGJ1ZmZlci5yZXZlcnNlKCksIGlzRmluaXRlKHBvcykgJiYgKHBvcyA9IGJ1ZmZlci5qb2luKFwiXCIpLmxlbmd0aCAtIHBvcyAtIDEpKTtcclxuICAgICAgICAgICAgICAgIHZhciBpLCBsLCBzdWZmaXhTdHJpcHBlZCA9ICExO1xyXG4gICAgICAgICAgICAgICAgYnVmZmVyLmxlbmd0aCA+PSBvcHRzLnN1ZmZpeC5sZW5ndGggJiYgYnVmZmVyLmpvaW4oXCJcIikuaW5kZXhPZihvcHRzLnN1ZmZpeCkgPT09IGJ1ZmZlci5sZW5ndGggLSBvcHRzLnN1ZmZpeC5sZW5ndGggJiYgKGJ1ZmZlci5sZW5ndGggPSBidWZmZXIubGVuZ3RoIC0gb3B0cy5zdWZmaXgubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgc3VmZml4U3RyaXBwZWQgPSAhMCksIHBvcyA9IHBvcyA+PSBidWZmZXIubGVuZ3RoID8gYnVmZmVyLmxlbmd0aCAtIDEgOiBwb3MgPCBvcHRzLnByZWZpeC5sZW5ndGggPyBvcHRzLnByZWZpeC5sZW5ndGggOiBwb3M7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmVlZHNSZWZyZXNoID0gITEsIGNoYXJBdFBvcyA9IGJ1ZmZlcltwb3NdO1xyXG4gICAgICAgICAgICAgICAgaWYgKFwiXCIgPT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IgfHwgb3B0cy5udW1lcmljSW5wdXQgIT09ICEwICYmIC0xICE9PSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBidWZmZXIpICYmIHBvcyA+ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIGJ1ZmZlcikgfHwgbmV3IFJlZ0V4cChcIltcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSArIFwiK11cIikudGVzdChjaGFyQXRQb3MpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHN1ZmZpeFN0cmlwcGVkKSBmb3IgKGkgPSAwLCBsID0gb3B0cy5zdWZmaXgubGVuZ3RoOyBsID4gaTsgaSsrKSBidWZmZXIucHVzaChvcHRzLnN1ZmZpeC5jaGFyQXQoaSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHZhciBjYnVmID0gYnVmZmVyLnNsaWNlKCk7XHJcbiAgICAgICAgICAgICAgICBjaGFyQXRQb3MgPT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IgJiYgKGNidWYuc3BsaWNlKHBvcy0tLCAxKSwgY2hhckF0UG9zID0gY2J1Zltwb3NdKSxcclxuICAgICAgICAgICAgICAgIHJlZm9ybWF0T25seSA/IGNoYXJBdFBvcyAhPT0gb3B0cy5yYWRpeFBvaW50ICYmIChjYnVmW3Bvc10gPSBcIj9cIikgOiBjYnVmLnNwbGljZShwb3MsIDAsIFwiP1wiKTtcclxuICAgICAgICAgICAgICAgIHZhciBidWZWYWwgPSBjYnVmLmpvaW4oXCJcIiksIGJ1ZlZhbE9yaWdpbiA9IGJ1ZlZhbDtcclxuICAgICAgICAgICAgICAgIGlmIChidWZWYWwubGVuZ3RoID4gMCAmJiBvcHRzLmF1dG9Hcm91cCB8fCByZWZvcm1hdE9ubHkgJiYgLTEgIT09IGJ1ZlZhbC5pbmRleE9mKG9wdHMuZ3JvdXBTZXBhcmF0b3IpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGVzY2FwZWRHcm91cFNlcGFyYXRvciA9IElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKTtcclxuICAgICAgICAgICAgICAgICAgICBuZWVkc1JlZnJlc2ggPSAwID09PSBidWZWYWwuaW5kZXhPZihvcHRzLmdyb3VwU2VwYXJhdG9yKSwgYnVmVmFsID0gYnVmVmFsLnJlcGxhY2UobmV3IFJlZ0V4cChlc2NhcGVkR3JvdXBTZXBhcmF0b3IsIFwiZ1wiKSwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4U3BsaXQgPSBidWZWYWwuc3BsaXQob3B0cy5yYWRpeFBvaW50KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYnVmVmFsID0gXCJcIiA9PT0gb3B0cy5yYWRpeFBvaW50ID8gYnVmVmFsIDogcmFkaXhTcGxpdFswXSwgYnVmVmFsICE9PSBvcHRzLnByZWZpeCArIFwiPzBcIiAmJiBidWZWYWwubGVuZ3RoID49IG9wdHMuZ3JvdXBTaXplICsgb3B0cy5wcmVmaXgubGVuZ3RoKSBmb3IgKHZhciByZWcgPSBuZXcgUmVnRXhwKFwiKFstK10/W1xcXFxkP10rKShbXFxcXGQ/XXtcIiArIG9wdHMuZ3JvdXBTaXplICsgXCJ9KVwiKSA7IHJlZy50ZXN0KGJ1ZlZhbCkgOykgYnVmVmFsID0gYnVmVmFsLnJlcGxhY2UocmVnLCBcIiQxXCIgKyBvcHRzLmdyb3VwU2VwYXJhdG9yICsgXCIkMlwiKSxcclxuICAgICAgICAgICAgICAgICAgICBidWZWYWwgPSBidWZWYWwucmVwbGFjZShvcHRzLmdyb3VwU2VwYXJhdG9yICsgb3B0cy5ncm91cFNlcGFyYXRvciwgb3B0cy5ncm91cFNlcGFyYXRvcik7XHJcbiAgICAgICAgICAgICAgICAgICAgXCJcIiAhPT0gb3B0cy5yYWRpeFBvaW50ICYmIHJhZGl4U3BsaXQubGVuZ3RoID4gMSAmJiAoYnVmVmFsICs9IG9wdHMucmFkaXhQb2ludCArIHJhZGl4U3BsaXRbMV0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgZm9yIChuZWVkc1JlZnJlc2ggPSBidWZWYWxPcmlnaW4gIT09IGJ1ZlZhbCwgYnVmZmVyLmxlbmd0aCA9IGJ1ZlZhbC5sZW5ndGgsIGkgPSAwLFxyXG4gICAgICAgICAgICAgICAgbCA9IGJ1ZlZhbC5sZW5ndGg7IGwgPiBpOyBpKyspIGJ1ZmZlcltpXSA9IGJ1ZlZhbC5jaGFyQXQoaSk7XHJcbiAgICAgICAgICAgICAgICB2YXIgbmV3UG9zID0gJC5pbkFycmF5KFwiP1wiLCBidWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgaWYgKC0xID09PSBuZXdQb3MgJiYgY2hhckF0UG9zID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgKG5ld1BvcyA9ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIGJ1ZmZlcikpLFxyXG4gICAgICAgICAgICAgICAgcmVmb3JtYXRPbmx5ID8gYnVmZmVyW25ld1Bvc10gPSBjaGFyQXRQb3MgOiBidWZmZXIuc3BsaWNlKG5ld1BvcywgMSksICFuZWVkc1JlZnJlc2ggJiYgc3VmZml4U3RyaXBwZWQpIGZvciAoaSA9IDAsXHJcbiAgICAgICAgICAgICAgICBsID0gb3B0cy5zdWZmaXgubGVuZ3RoOyBsID4gaTsgaSsrKSBidWZmZXIucHVzaChvcHRzLnN1ZmZpeC5jaGFyQXQoaSkpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld1BvcyA9IG9wdHMubnVtZXJpY0lucHV0ICYmIGlzRmluaXRlKHBvcykgPyBidWZmZXIuam9pbihcIlwiKS5sZW5ndGggLSBuZXdQb3MgLSAxIDogbmV3UG9zLFxyXG4gICAgICAgICAgICAgICAgb3B0cy5udW1lcmljSW5wdXQgJiYgKGJ1ZmZlciA9IGJ1ZmZlci5yZXZlcnNlKCksICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIGJ1ZmZlcikgPCBuZXdQb3MgJiYgYnVmZmVyLmpvaW4oXCJcIikubGVuZ3RoIC0gb3B0cy5zdWZmaXgubGVuZ3RoICE9PSBuZXdQb3MgJiYgKG5ld1BvcyAtPSAxKSksXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgcG9zOiBuZXdQb3MsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXI6IG5lZWRzUmVmcmVzaCxcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXI6IGJ1ZmZlclxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25CZWZvcmVXcml0ZTogZnVuY3Rpb24gKGUsIGJ1ZmZlciwgY2FyZXRQb3MsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChlICYmIChcImJsdXJcIiA9PT0gZS50eXBlIHx8IFwiY2hlY2t2YWxcIiA9PT0gZS50eXBlKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBtYXNrZWRWYWx1ZSA9IGJ1ZmZlci5qb2luKFwiXCIpLCBwcm9jZXNzVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKG9wdHMucHJlZml4LCBcIlwiKTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2Uob3B0cy5zdWZmaXgsIFwiXCIpLCBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSwgXCJnXCIpLCBcIlwiKSxcclxuICAgICAgICAgICAgICAgICAgICBcIixcIiA9PT0gb3B0cy5yYWRpeFBvaW50ICYmIChwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5yYWRpeFBvaW50KSwgXCIuXCIpKSxcclxuICAgICAgICAgICAgICAgICAgICBpc0Zpbml0ZShwcm9jZXNzVmFsdWUpICYmIGlzRmluaXRlKG9wdHMubWluKSAmJiBwYXJzZUZsb2F0KHByb2Nlc3NWYWx1ZSkgPCBwYXJzZUZsb2F0KG9wdHMubWluKSkgcmV0dXJuICQuZXh0ZW5kKCEwLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyOiAhMCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYnVmZmVyOiAob3B0cy5wcmVmaXggKyBvcHRzLm1pbikuc3BsaXQoXCJcIilcclxuICAgICAgICAgICAgICAgICAgICB9LCBvcHRzLnBvc3RGb3JtYXQoKG9wdHMucHJlZml4ICsgb3B0cy5taW4pLnNwbGl0KFwiXCIpLCAwLCAhMCwgb3B0cykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRzLm51bWVyaWNJbnB1dCAhPT0gITApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcEJ1ZlNwbGl0ID0gXCJcIiAhPT0gb3B0cy5yYWRpeFBvaW50ID8gYnVmZmVyLmpvaW4oXCJcIikuc3BsaXQob3B0cy5yYWRpeFBvaW50KSA6IFtidWZmZXIuam9pbihcIlwiKV0sIG1hdGNoUnNsdCA9IHRtcEJ1ZlNwbGl0WzBdLm1hdGNoKG9wdHMucmVnZXguaW50ZWdlclBhcnQob3B0cykpLCBtYXRjaFJzbHREaWdpdHMgPSAyID09PSB0bXBCdWZTcGxpdC5sZW5ndGggPyB0bXBCdWZTcGxpdFsxXS5tYXRjaChvcHRzLnJlZ2V4LmludGVnZXJOUGFydChvcHRzKSkgOiB2b2lkIDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRjaFJzbHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoUnNsdFswXSAhPT0gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCArIFwiMFwiICYmIG1hdGNoUnNsdFswXSAhPT0gb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCAmJiBcIitcIiAhPT0gbWF0Y2hSc2x0WzBdIHx8IHZvaWQgMCAhPT0gbWF0Y2hSc2x0RGlnaXRzICYmICFtYXRjaFJzbHREaWdpdHNbMF0ubWF0Y2goL14wKyQvKSB8fCBidWZmZXIuc3BsaWNlKG1hdGNoUnNsdC5pbmRleCwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXhQb3NpdGlvbiA9ICQuaW5BcnJheShvcHRzLnJhZGl4UG9pbnQsIGJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoLTEgIT09IHJhZGl4UG9zaXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNGaW5pdGUob3B0cy5kaWdpdHMpICYmICFvcHRzLmRpZ2l0c09wdGlvbmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAxOyBpIDw9IG9wdHMuZGlnaXRzOyBpKyspICh2b2lkIDAgPT09IGJ1ZmZlcltyYWRpeFBvc2l0aW9uICsgaV0gfHwgYnVmZmVyW3JhZGl4UG9zaXRpb24gKyBpXSA9PT0gb3B0cy5wbGFjZWhvbGRlci5jaGFyQXQoMCkpICYmIChidWZmZXJbcmFkaXhQb3NpdGlvbiArIGldID0gXCIwXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaEZyb21CdWZmZXI6IG1hc2tlZFZhbHVlICE9PSBidWZmZXIuam9pbihcIlwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogYnVmZmVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyYWRpeFBvc2l0aW9uID09PSBidWZmZXIubGVuZ3RoIC0gb3B0cy5zdWZmaXgubGVuZ3RoIC0gMSkgcmV0dXJuIGJ1ZmZlci5zcGxpY2UocmFkaXhQb3NpdGlvbiwgMSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoRnJvbUJ1ZmZlcjogITAsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJ1ZmZlcjogYnVmZmVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmIChvcHRzLmF1dG9Hcm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciByc2x0ID0gb3B0cy5wb3N0Rm9ybWF0KGJ1ZmZlciwgb3B0cy5udW1lcmljSW5wdXQgPyBjYXJldFBvcyA6IGNhcmV0UG9zIC0gMSwgITAsIG9wdHMpO1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiByc2x0LmNhcmV0ID0gY2FyZXRQb3MgPD0gb3B0cy5wcmVmaXgubGVuZ3RoID8gcnNsdC5wb3MgOiByc2x0LnBvcyArIDEsIHJzbHQ7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHJlZ2V4OiB7XHJcbiAgICAgICAgICAgICAgICBpbnRlZ2VyUGFydDogZnVuY3Rpb24gKG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChcIltcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250KSArIFwiK10/XFxcXGQrXCIpO1xyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIGludGVnZXJOUGFydDogZnVuY3Rpb24gKG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChcIltcXFxcZFwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpICsgXCJdK1wiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc2lnbkhhbmRsZXI6IGZ1bmN0aW9uIChjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzdHJpY3QgJiYgb3B0cy5hbGxvd01pbnVzICYmIFwiLVwiID09PSBjaHJzIHx8IG9wdHMuYWxsb3dQbHVzICYmIFwiK1wiID09PSBjaHJzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoUnNsdCA9IG1hc2tzZXQuYnVmZmVyLmpvaW4oXCJcIikubWF0Y2gob3B0cy5yZWdleC5pbnRlZ2VyUGFydChvcHRzKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoUnNsdCAmJiBtYXRjaFJzbHRbMF0ubGVuZ3RoID4gMCkgcmV0dXJuIG1hc2tzZXQuYnVmZmVyW21hdGNoUnNsdC5pbmRleF0gPT09IChcIi1cIiA9PT0gY2hycyA/IFwiK1wiIDogb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCkgPyBcIi1cIiA9PT0gY2hycyA/IFwiXCIgIT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjayA/IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBtYXRjaFJzbHQuaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGM6IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZTogbWF0Y2hSc2x0LmluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogbWFza3NldC5idWZmZXIubGVuZ3RoIC0gb3B0cy5zdWZmaXgubGVuZ3RoIC0gMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IG9wdHMubmVnYXRpb25TeW1ib2wuYmFja1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfSA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBtYXRjaFJzbHQuaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGM6IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZTogbWF0Y2hSc2x0LmluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcG9zXHJcbiAgICAgICAgICAgICAgICAgICAgfSA6IFwiXCIgIT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjayA/IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBtYXRjaFJzbHQuaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGM6IFwiK1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmU6IFttYXRjaFJzbHQuaW5kZXgsIG1hc2tzZXQuYnVmZmVyLmxlbmd0aCAtIG9wdHMuc3VmZml4Lmxlbmd0aCAtIDFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcG9zXHJcbiAgICAgICAgICAgICAgICAgICAgfSA6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBtYXRjaFJzbHQuaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGM6IFwiK1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmU6IG1hdGNoUnNsdC5pbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IHBvc1xyXG4gICAgICAgICAgICAgICAgICAgIH0gOiBtYXNrc2V0LmJ1ZmZlclttYXRjaFJzbHQuaW5kZXhdID09PSAoXCItXCIgPT09IGNocnMgPyBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250IDogXCIrXCIpID8gXCItXCIgPT09IGNocnMgJiYgXCJcIiAhPT0gb3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrID8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmU6IFttYXRjaFJzbHQuaW5kZXgsIG1hc2tzZXQuYnVmZmVyLmxlbmd0aCAtIG9wdHMuc3VmZml4Lmxlbmd0aCAtIDFdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcG9zIC0gMVxyXG4gICAgICAgICAgICAgICAgICAgIH0gOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlbW92ZTogbWF0Y2hSc2x0LmluZGV4LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcG9zIC0gMVxyXG4gICAgICAgICAgICAgICAgICAgIH0gOiBcIi1cIiA9PT0gY2hycyA/IFwiXCIgIT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjayA/IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBtYXRjaFJzbHQuaW5kZXgsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGM6IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBwb3MgKyAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnNlcnQ6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogbWFza3NldC5idWZmZXIubGVuZ3RoIC0gb3B0cy5zdWZmaXgubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogb3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3M6IG1hdGNoUnNsdC5pbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYzogb3B0cy5uZWdhdGlvblN5bWJvbC5mcm9udCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IHBvcyArIDFcclxuICAgICAgICAgICAgICAgICAgICB9IDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3M6IG1hdGNoUnNsdC5pbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYzogY2hycyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IHBvcyArIDFcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICExO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICByYWRpeEhhbmRsZXI6IGZ1bmN0aW9uIChjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzdHJpY3QgJiYgKC0xICE9PSAkLmluQXJyYXkoY2hycywgW1wiLFwiLCBcIi5cIl0pICYmIChjaHJzID0gb3B0cy5yYWRpeFBvaW50KSxcclxuICAgICAgICAgICAgICAgIGNocnMgPT09IG9wdHMucmFkaXhQb2ludCAmJiB2b2lkIDAgIT09IG9wdHMuZGlnaXRzICYmIChpc05hTihvcHRzLmRpZ2l0cykgfHwgcGFyc2VJbnQob3B0cy5kaWdpdHMpID4gMCkpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJhZGl4UG9zID0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgbWFza3NldC5idWZmZXIpLCBpbnRlZ2VyVmFsdWUgPSBtYXNrc2V0LmJ1ZmZlci5qb2luKFwiXCIpLm1hdGNoKG9wdHMucmVnZXguaW50ZWdlclBhcnQob3B0cykpO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmICgtMSAhPT0gcmFkaXhQb3MgJiYgbWFza3NldC52YWxpZFBvc2l0aW9uc1tyYWRpeFBvc10pIHJldHVybiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3JhZGl4UG9zIC0gMV0gPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiByYWRpeFBvcyArIDFcclxuICAgICAgICAgICAgICAgICAgICB9IDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3M6IGludGVnZXJWYWx1ZS5pbmRleCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYzogaW50ZWdlclZhbHVlWzBdLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcmFkaXhQb3MgKyAxXHJcbiAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoIWludGVnZXJWYWx1ZSB8fCBcIjBcIiA9PT0gaW50ZWdlclZhbHVlWzBdICYmIGludGVnZXJWYWx1ZS5pbmRleCArIDEgIT09IHBvcykgcmV0dXJuIG1hc2tzZXQuYnVmZmVyW2ludGVnZXJWYWx1ZSA/IGludGVnZXJWYWx1ZS5pbmRleCA6IHBvc10gPSBcIjBcIixcclxuICAgICAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvczogKGludGVnZXJWYWx1ZSA/IGludGVnZXJWYWx1ZS5pbmRleCA6IHBvcykgKyAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjOiBvcHRzLnJhZGl4UG9pbnRcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICExO1xyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBsZWFkaW5nWmVyb0hhbmRsZXI6IGZ1bmN0aW9uIChjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKG9wdHMubnVtZXJpY0lucHV0ID09PSAhMCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChcIjBcIiA9PT0gbWFza3NldC5idWZmZXJbbWFza3NldC5idWZmZXIubGVuZ3RoIC0gb3B0cy5wcmVmaXgubGVuZ3RoIC0gMV0pIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZW1vdmU6IG1hc2tzZXQuYnVmZmVyLmxlbmd0aCAtIG9wdHMucHJlZml4Lmxlbmd0aCAtIDFcclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hSc2x0ID0gbWFza3NldC5idWZmZXIuam9pbihcIlwiKS5tYXRjaChvcHRzLnJlZ2V4LmludGVnZXJOUGFydChvcHRzKSksIHJhZGl4UG9zaXRpb24gPSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBtYXNrc2V0LmJ1ZmZlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoUnNsdCAmJiAhc3RyaWN0ICYmICgtMSA9PT0gcmFkaXhQb3NpdGlvbiB8fCByYWRpeFBvc2l0aW9uID49IHBvcykpIGlmICgwID09PSBtYXRjaFJzbHRbMF0uaW5kZXhPZihcIjBcIikpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zIDwgb3B0cy5wcmVmaXgubGVuZ3RoICYmIChwb3MgPSBtYXRjaFJzbHQuaW5kZXgpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgX3JhZGl4UG9zaXRpb24gPSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBtYXNrc2V0Ll9idWZmZXIpLCBkaWdpdHNNYXRjaCA9IG1hc2tzZXQuX2J1ZmZlciAmJiBtYXNrc2V0LmJ1ZmZlci5zbGljZShyYWRpeFBvc2l0aW9uKS5qb2luKFwiXCIpID09PSBtYXNrc2V0Ll9idWZmZXIuc2xpY2UoX3JhZGl4UG9zaXRpb24pLmpvaW4oXCJcIikgfHwgMCA9PT0gcGFyc2VJbnQobWFza3NldC5idWZmZXIuc2xpY2UocmFkaXhQb3NpdGlvbiArIDEpLmpvaW4oXCJcIikpLCBpbnRlZ2VyTWF0Y2ggPSBtYXNrc2V0Ll9idWZmZXIgJiYgbWFza3NldC5idWZmZXIuc2xpY2UobWF0Y2hSc2x0LmluZGV4LCByYWRpeFBvc2l0aW9uKS5qb2luKFwiXCIpID09PSBtYXNrc2V0Ll9idWZmZXIuc2xpY2Uob3B0cy5wcmVmaXgubGVuZ3RoLCBfcmFkaXhQb3NpdGlvbikuam9pbihcIlwiKSB8fCBcIjBcIiA9PT0gbWFza3NldC5idWZmZXIuc2xpY2UobWF0Y2hSc2x0LmluZGV4LCByYWRpeFBvc2l0aW9uKS5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoLTEgPT09IHJhZGl4UG9zaXRpb24gfHwgZGlnaXRzTWF0Y2ggJiYgaW50ZWdlck1hdGNoKSByZXR1cm4gbWFza3NldC5idWZmZXIuc3BsaWNlKG1hdGNoUnNsdC5pbmRleCwgMSksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHBvcyA9IHBvcyA+IG1hdGNoUnNsdC5pbmRleCA/IHBvcyAtIDEgOiBtYXRjaFJzbHQuaW5kZXgsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlOiBtYXRjaFJzbHQuaW5kZXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG1hdGNoUnNsdC5pbmRleCArIDEgPT09IHBvcyB8fCBcIjBcIiA9PT0gY2hycykgcmV0dXJuIG1hc2tzZXQuYnVmZmVyLnNwbGljZShtYXRjaFJzbHQuaW5kZXgsIDEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwb3MgPSBtYXRjaFJzbHQuaW5kZXgsIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlOiBtYXRjaFJzbHQuaW5kZXhcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKFwiMFwiID09PSBjaHJzICYmIHBvcyA8PSBtYXRjaFJzbHQuaW5kZXggJiYgbWF0Y2hSc2x0WzBdICE9PSBvcHRzLmdyb3VwU2VwYXJhdG9yKSByZXR1cm4gITE7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gITA7XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHBvc3RWYWxpZGF0aW9uOiBmdW5jdGlvbiAoYnVmZmVyLCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgaXNWYWxpZCA9ICEwLCBtYXNrZWRWYWx1ZSA9IGJ1ZmZlci5qb2luKFwiXCIpLCBwcm9jZXNzVmFsdWUgPSBtYXNrZWRWYWx1ZS5yZXBsYWNlKG9wdHMucHJlZml4LCBcIlwiKTtcclxuICAgICAgICAgICAgICAgIHJldHVybiBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShvcHRzLnN1ZmZpeCwgXCJcIiksIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG5ldyBSZWdFeHAoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMuZ3JvdXBTZXBhcmF0b3IpLCBcImdcIiksIFwiXCIpLFxyXG4gICAgICAgICAgICAgICAgXCIsXCIgPT09IG9wdHMucmFkaXhQb2ludCAmJiAocHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMucmFkaXhQb2ludCksIFwiLlwiKSksXHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKFwiXlwiICsgSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQpKSwgXCItXCIpLFxyXG4gICAgICAgICAgICAgICAgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrKSArIFwiJFwiKSwgXCJcIiksXHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQgPyBwcm9jZXNzVmFsdWUgKyBcIjBcIiA6IHByb2Nlc3NWYWx1ZSxcclxuICAgICAgICAgICAgICAgIGlzRmluaXRlKHByb2Nlc3NWYWx1ZSkgJiYgKG51bGwgIT09IG9wdHMubWF4ICYmIGlzRmluaXRlKG9wdHMubWF4KSAmJiAoaXNWYWxpZCA9IHBhcnNlRmxvYXQocHJvY2Vzc1ZhbHVlKSA8PSBwYXJzZUZsb2F0KG9wdHMubWF4KSksXHJcbiAgICAgICAgICAgICAgICBpc1ZhbGlkICYmIG51bGwgIT09IG9wdHMubWluICYmIGlzRmluaXRlKG9wdHMubWluKSAmJiAoMCA+PSBwcm9jZXNzVmFsdWUgfHwgcHJvY2Vzc1ZhbHVlLnRvU3RyaW5nKCkubGVuZ3RoID49IG9wdHMubWluLnRvU3RyaW5nKCkubGVuZ3RoKSAmJiAoaXNWYWxpZCA9IHBhcnNlRmxvYXQocHJvY2Vzc1ZhbHVlKSA+PSBwYXJzZUZsb2F0KG9wdHMubWluKSxcclxuICAgICAgICAgICAgICAgIGlzVmFsaWQgfHwgKGlzVmFsaWQgPSAkLmV4dGVuZCghMCwge1xyXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hGcm9tQnVmZmVyOiAhMCxcclxuICAgICAgICAgICAgICAgICAgICBidWZmZXI6IChvcHRzLnByZWZpeCArIG9wdHMubWluKS5zcGxpdChcIlwiKVxyXG4gICAgICAgICAgICAgICAgfSwgb3B0cy5wb3N0Rm9ybWF0KChvcHRzLnByZWZpeCArIG9wdHMubWluKS5zcGxpdChcIlwiKSwgMCwgITAsIG9wdHMpKSwgaXNWYWxpZC5yZWZyZXNoRnJvbUJ1ZmZlciA9ICEwKSkpLFxyXG4gICAgICAgICAgICAgICAgaXNWYWxpZDtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIFwiflwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBvcHRzLnNpZ25IYW5kbGVyKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkICYmIChpc1ZhbGlkID0gb3B0cy5yYWRpeEhhbmRsZXIoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAhaXNWYWxpZCAmJiAoaXNWYWxpZCA9IHN0cmljdCA/IG5ldyBSZWdFeHAoXCJbMC05XCIgKyBJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvcikgKyBcIl1cIikudGVzdChjaHJzKSA6IG5ldyBSZWdFeHAoXCJbMC05XVwiKS50ZXN0KGNocnMpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID09PSAhMCAmJiAoaXNWYWxpZCA9IG9wdHMubGVhZGluZ1plcm9IYW5kbGVyKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9PT0gITApKSkpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciByYWRpeFBvc2l0aW9uID0gJC5pbkFycmF5KG9wdHMucmFkaXhQb2ludCwgbWFza3NldC5idWZmZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZCA9IC0xICE9PSByYWRpeFBvc2l0aW9uICYmIG9wdHMuZGlnaXRzT3B0aW9uYWwgPT09ICExICYmIG9wdHMubnVtZXJpY0lucHV0ICE9PSAhMCAmJiBwb3MgPiByYWRpeFBvc2l0aW9uICYmICFzdHJpY3QgPyB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVtb3ZlOiBwb3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3NcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlzVmFsaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMSxcclxuICAgICAgICAgICAgICAgICAgICBwcmV2YWxpZGF0b3I6IG51bGxcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBcIitcIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gb3B0cy5zaWduSGFuZGxlcihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhaXNWYWxpZCAmJiAoc3RyaWN0ICYmIG9wdHMuYWxsb3dNaW51cyAmJiBjaHJzID09PSBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250IHx8IG9wdHMuYWxsb3dNaW51cyAmJiBcIi1cIiA9PT0gY2hycyB8fCBvcHRzLmFsbG93UGx1cyAmJiBcIitcIiA9PT0gY2hycykgJiYgKGlzVmFsaWQgPSBcIi1cIiA9PT0gY2hycyA/IFwiXCIgIT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjayA/IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogcG9zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogXCItXCIgPT09IGNocnMgPyBvcHRzLm5lZ2F0aW9uU3ltYm9sLmZyb250IDogXCIrXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXJldDogcG9zICsgMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc2VydDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBvczogbWFza3NldC5idWZmZXIubGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGM6IG9wdHMubmVnYXRpb25TeW1ib2wuYmFja1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IDoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcG9zOiBwb3MsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjOiBcIi1cIiA9PT0gY2hycyA/IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQgOiBcIitcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhcmV0OiBwb3MgKyAxXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gOiAhMCksIGlzVmFsaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICBjYXJkaW5hbGl0eTogMSxcclxuICAgICAgICAgICAgICAgICAgICBwcmV2YWxpZGF0b3I6IG51bGwsXHJcbiAgICAgICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiXCJcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICBcIi1cIjoge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhbGlkYXRvcjogZnVuY3Rpb24gKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBpc1ZhbGlkID0gb3B0cy5zaWduSGFuZGxlcihjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhaXNWYWxpZCAmJiBzdHJpY3QgJiYgb3B0cy5hbGxvd01pbnVzICYmIGNocnMgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuYmFjayAmJiAoaXNWYWxpZCA9ICEwKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaXNWYWxpZDtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxLFxyXG4gICAgICAgICAgICAgICAgICAgIHByZXZhbGlkYXRvcjogbnVsbCxcclxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogXCJcIlxyXG4gICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgIFwiOlwiOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFsaWRhdG9yOiBmdW5jdGlvbiAoY2hycywgbWFza3NldCwgcG9zLCBzdHJpY3QsIG9wdHMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSBvcHRzLnNpZ25IYW5kbGVyKGNocnMsIG1hc2tzZXQsIHBvcywgc3RyaWN0LCBvcHRzKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFpc1ZhbGlkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmFkaXggPSBcIltcIiArIElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnJhZGl4UG9pbnQpICsgXCIsXFxcXC5dXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpc1ZhbGlkID0gbmV3IFJlZ0V4cChyYWRpeCkudGVzdChjaHJzKSwgaXNWYWxpZCAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10gJiYgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdLm1hdGNoLnBsYWNlaG9sZGVyID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgKGlzVmFsaWQgPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FyZXQ6IHBvcyArIDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpc1ZhbGlkID8ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYzogb3B0cy5yYWRpeFBvaW50XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gOiBpc1ZhbGlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgY2FyZGluYWxpdHk6IDEsXHJcbiAgICAgICAgICAgICAgICAgICAgcHJldmFsaWRhdG9yOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgIHBsYWNlaG9sZGVyOiBmdW5jdGlvbiAob3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3B0cy5yYWRpeFBvaW50O1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25Vbk1hc2s6IGZ1bmN0aW9uIChtYXNrZWRWYWx1ZSwgdW5tYXNrZWRWYWx1ZSwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NWYWx1ZSA9IG1hc2tlZFZhbHVlLnJlcGxhY2Uob3B0cy5wcmVmaXgsIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKG9wdHMuc3VmZml4LCBcIlwiKSwgcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvciksIFwiZ1wiKSwgXCJcIiksXHJcbiAgICAgICAgICAgICAgICBvcHRzLnVubWFza0FzTnVtYmVyID8gKFwiXCIgIT09IG9wdHMucmFkaXhQb2ludCAmJiAtMSAhPT0gcHJvY2Vzc1ZhbHVlLmluZGV4T2Yob3B0cy5yYWRpeFBvaW50KSAmJiAocHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2UoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4LmNhbGwodGhpcywgb3B0cy5yYWRpeFBvaW50KSwgXCIuXCIpKSxcclxuICAgICAgICAgICAgICAgIE51bWJlcihwcm9jZXNzVmFsdWUpKSA6IHByb2Nlc3NWYWx1ZTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgaXNDb21wbGV0ZTogZnVuY3Rpb24gKGJ1ZmZlciwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgdmFyIG1hc2tlZFZhbHVlID0gYnVmZmVyLmpvaW4oXCJcIiksIGJ1ZkNsb25lID0gYnVmZmVyLnNsaWNlKCk7XHJcbiAgICAgICAgICAgICAgICBpZiAob3B0cy5wb3N0Rm9ybWF0KGJ1ZkNsb25lLCAwLCAhMCwgb3B0cyksIGJ1ZkNsb25lLmpvaW4oXCJcIikgIT09IG1hc2tlZFZhbHVlKSByZXR1cm4gITE7XHJcbiAgICAgICAgICAgICAgICB2YXIgcHJvY2Vzc1ZhbHVlID0gbWFza2VkVmFsdWUucmVwbGFjZShvcHRzLnByZWZpeCwgXCJcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gcHJvY2Vzc1ZhbHVlID0gcHJvY2Vzc1ZhbHVlLnJlcGxhY2Uob3B0cy5zdWZmaXgsIFwiXCIpLCBwcm9jZXNzVmFsdWUgPSBwcm9jZXNzVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSwgXCJnXCIpLCBcIlwiKSxcclxuICAgICAgICAgICAgICAgIFwiLFwiID09PSBvcHRzLnJhZGl4UG9pbnQgJiYgKHByb2Nlc3NWYWx1ZSA9IHByb2Nlc3NWYWx1ZS5yZXBsYWNlKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLnJhZGl4UG9pbnQpLCBcIi5cIikpLFxyXG4gICAgICAgICAgICAgICAgaXNGaW5pdGUocHJvY2Vzc1ZhbHVlKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25CZWZvcmVNYXNrOiBmdW5jdGlvbiAoaW5pdGlhbFZhbHVlLCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoXCJcIiAhPT0gb3B0cy5yYWRpeFBvaW50ICYmIGlzRmluaXRlKGluaXRpYWxWYWx1ZSkpIGluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZS50b1N0cmluZygpLnJlcGxhY2UoXCIuXCIsIG9wdHMucmFkaXhQb2ludCk7IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBrb21tYU1hdGNoZXMgPSBpbml0aWFsVmFsdWUubWF0Y2goLywvZyksIGRvdE1hdGNoZXMgPSBpbml0aWFsVmFsdWUubWF0Y2goL1xcLi9nKTtcclxuICAgICAgICAgICAgICAgICAgICBkb3RNYXRjaGVzICYmIGtvbW1hTWF0Y2hlcyA/IGRvdE1hdGNoZXMubGVuZ3RoID4ga29tbWFNYXRjaGVzLmxlbmd0aCA/IChpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUucmVwbGFjZSgvXFwuL2csIFwiXCIpLFxyXG4gICAgICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZS5yZXBsYWNlKFwiLFwiLCBvcHRzLnJhZGl4UG9pbnQpKSA6IGtvbW1hTWF0Y2hlcy5sZW5ndGggPiBkb3RNYXRjaGVzLmxlbmd0aCA/IChpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUucmVwbGFjZSgvLC9nLCBcIlwiKSxcclxuICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUucmVwbGFjZShcIi5cIiwgb3B0cy5yYWRpeFBvaW50KSkgOiBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUuaW5kZXhPZihcIi5cIikgPCBpbml0aWFsVmFsdWUuaW5kZXhPZihcIixcIikgPyBpbml0aWFsVmFsdWUucmVwbGFjZSgvXFwuL2csIFwiXCIpIDogaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnJlcGxhY2UoLywvZywgXCJcIikgOiBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSwgXCJnXCIpLCBcIlwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIGlmICgwID09PSBvcHRzLmRpZ2l0cyAmJiAoLTEgIT09IGluaXRpYWxWYWx1ZS5pbmRleE9mKFwiLlwiKSA/IGluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZS5zdWJzdHJpbmcoMCwgaW5pdGlhbFZhbHVlLmluZGV4T2YoXCIuXCIpKSA6IC0xICE9PSBpbml0aWFsVmFsdWUuaW5kZXhPZihcIixcIikgJiYgKGluaXRpYWxWYWx1ZSA9IGluaXRpYWxWYWx1ZS5zdWJzdHJpbmcoMCwgaW5pdGlhbFZhbHVlLmluZGV4T2YoXCIsXCIpKSkpLFxyXG4gICAgICAgICAgICAgICAgXCJcIiAhPT0gb3B0cy5yYWRpeFBvaW50ICYmIGlzRmluaXRlKG9wdHMuZGlnaXRzKSAmJiAtMSAhPT0gaW5pdGlhbFZhbHVlLmluZGV4T2Yob3B0cy5yYWRpeFBvaW50KSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciB2YWx1ZVBhcnRzID0gaW5pdGlhbFZhbHVlLnNwbGl0KG9wdHMucmFkaXhQb2ludCksIGRlY1BhcnQgPSB2YWx1ZVBhcnRzWzFdLm1hdGNoKG5ldyBSZWdFeHAoXCJcXFxcZCpcIikpWzBdO1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChwYXJzZUludChvcHRzLmRpZ2l0cykgPCBkZWNQYXJ0LnRvU3RyaW5nKCkubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBkaWdpdHNGYWN0b3IgPSBNYXRoLnBvdygxMCwgcGFyc2VJbnQob3B0cy5kaWdpdHMpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlID0gaW5pdGlhbFZhbHVlLnJlcGxhY2UoSW5wdXRtYXNrLmVzY2FwZVJlZ2V4KG9wdHMucmFkaXhQb2ludCksIFwiLlwiKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlID0gTWF0aC5yb3VuZChwYXJzZUZsb2F0KGluaXRpYWxWYWx1ZSkgKiBkaWdpdHNGYWN0b3IpIC8gZGlnaXRzRmFjdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWUgPSBpbml0aWFsVmFsdWUudG9TdHJpbmcoKS5yZXBsYWNlKFwiLlwiLCBvcHRzLnJhZGl4UG9pbnQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBpbml0aWFsVmFsdWUudG9TdHJpbmcoKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgY2FuQ2xlYXJQb3NpdGlvbjogZnVuY3Rpb24gKG1hc2tzZXQsIHBvc2l0aW9uLCBsdnAsIHN0cmljdCwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHBvc2l0aW9uSW5wdXQgPSBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc2l0aW9uXS5pbnB1dCwgY2FuQ2xlYXIgPSBwb3NpdGlvbklucHV0ICE9PSBvcHRzLnJhZGl4UG9pbnQgfHwgbnVsbCAhPT0gbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NpdGlvbl0ubWF0Y2guZm4gJiYgb3B0cy5kZWNpbWFsUHJvdGVjdCA9PT0gITEgfHwgaXNGaW5pdGUocG9zaXRpb25JbnB1dCkgfHwgcG9zaXRpb24gPT09IGx2cCB8fCBwb3NpdGlvbklucHV0ID09PSBvcHRzLmdyb3VwU2VwYXJhdG9yIHx8IHBvc2l0aW9uSW5wdXQgPT09IG9wdHMubmVnYXRpb25TeW1ib2wuZnJvbnQgfHwgcG9zaXRpb25JbnB1dCA9PT0gb3B0cy5uZWdhdGlvblN5bWJvbC5iYWNrO1xyXG4gICAgICAgICAgICAgICAgaWYgKGNhbkNsZWFyICYmIGlzRmluaXRlKHBvc2l0aW9uSW5wdXQpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIG1hdGNoUnNsdCwgcmFkaXhQb3MgPSAkLmluQXJyYXkob3B0cy5yYWRpeFBvaW50LCBtYXNrc2V0LmJ1ZmZlciksIHJhZGl4SW5qZWN0aW9uID0gITE7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHZvaWQgMCA9PT0gbWFza3NldC52YWxpZFBvc2l0aW9uc1tyYWRpeFBvc10gJiYgKG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcmFkaXhQb3NdID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dDogb3B0cy5yYWRpeFBvaW50XHJcbiAgICAgICAgICAgICAgICAgICAgfSwgcmFkaXhJbmplY3Rpb24gPSAhMCksICFzdHJpY3QgJiYgbWFza3NldC5idWZmZXIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2hSc2x0ID0gbWFza3NldC5idWZmZXIuam9pbihcIlwiKS5zdWJzdHIoMCwgcG9zaXRpb24pLm1hdGNoKG9wdHMucmVnZXguaW50ZWdlck5QYXJ0KG9wdHMpKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHBvcyA9IHBvc2l0aW9uICsgMSwgaXNOdWxsID0gbnVsbCA9PSBtYXRjaFJzbHQgfHwgMCA9PT0gcGFyc2VJbnQobWF0Y2hSc2x0WzBdLnJlcGxhY2UobmV3IFJlZ0V4cChJbnB1dG1hc2suZXNjYXBlUmVnZXgob3B0cy5ncm91cFNlcGFyYXRvciksIFwiZ1wiKSwgXCJcIikpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNOdWxsKSBmb3IgKDsgbWFza3NldC52YWxpZFBvc2l0aW9uc1twb3NdICYmIChtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc10uaW5wdXQgPT09IG9wdHMuZ3JvdXBTZXBhcmF0b3IgfHwgXCIwXCIgPT09IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXS5pbnB1dCkgOykgZGVsZXRlIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcG9zKys7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBidWZmZXIgPSBbXTtcclxuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciB2cCBpbiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zKSB2b2lkIDAgIT09IG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbdnBdLmlucHV0ICYmIGJ1ZmZlci5wdXNoKG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbdnBdLmlucHV0KTtcclxuICAgICAgICAgICAgICAgICAgICBpZiAocmFkaXhJbmplY3Rpb24gJiYgZGVsZXRlIG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcmFkaXhQb3NdLCByYWRpeFBvcyA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGJ1ZlZhbCA9IGJ1ZmZlci5qb2luKFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hSc2x0ID0gYnVmVmFsLm1hdGNoKG9wdHMucmVnZXguaW50ZWdlck5QYXJ0KG9wdHMpKSkgaWYgKHJhZGl4UG9zID49IHBvc2l0aW9uKSBpZiAoMCA9PT0gbWF0Y2hSc2x0WzBdLmluZGV4T2YoXCIwXCIpKSBjYW5DbGVhciA9IG1hdGNoUnNsdC5pbmRleCAhPT0gcG9zaXRpb24gfHwgXCIwXCIgPT09IG9wdHMucGxhY2Vob2xkZXI7IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGludFBhcnQgPSBwYXJzZUludChtYXRjaFJzbHRbMF0ucmVwbGFjZShuZXcgUmVnRXhwKElucHV0bWFzay5lc2NhcGVSZWdleChvcHRzLmdyb3VwU2VwYXJhdG9yKSwgXCJnXCIpLCBcIlwiKSksIHJhZGl4UGFydCA9IHBhcnNlSW50KGJ1ZlZhbC5zcGxpdChvcHRzLnJhZGl4UG9pbnQpWzFdKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIDEwID4gaW50UGFydCAmJiBtYXNrc2V0LnZhbGlkUG9zaXRpb25zW3Bvc2l0aW9uXSAmJiAoXCIwXCIgIT09IG9wdHMucGxhY2Vob2xkZXIgfHwgcmFkaXhQYXJ0ID4gMCkgJiYgKG1hc2tzZXQudmFsaWRQb3NpdGlvbnNbcG9zaXRpb25dLmlucHV0ID0gXCIwXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXNrc2V0LnAgPSBvcHRzLnByZWZpeC5sZW5ndGggKyAxLCBjYW5DbGVhciA9ICExKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIDAgPT09IG1hdGNoUnNsdFswXS5pbmRleE9mKFwiMFwiKSAmJiAzID09PSBidWZWYWwubGVuZ3RoICYmIChtYXNrc2V0LnZhbGlkUG9zaXRpb25zID0ge30sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbkNsZWFyID0gITEpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIHJldHVybiBjYW5DbGVhcjtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgb25LZXlEb3duOiBmdW5jdGlvbiAoZSwgYnVmZmVyLCBjYXJldFBvcywgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgdmFyICRpbnB1dCA9ICQodGhpcyk7XHJcbiAgICAgICAgICAgICAgICBpZiAoZS5jdHJsS2V5KSBzd2l0Y2ggKGUua2V5Q29kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGNhc2UgSW5wdXRtYXNrLmtleUNvZGUuVVA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICRpbnB1dC52YWwocGFyc2VGbG9hdCh0aGlzLmlucHV0bWFzay51bm1hc2tlZHZhbHVlKCkpICsgcGFyc2VJbnQob3B0cy5zdGVwKSksICRpbnB1dC50cmlnZ2VyKFwic2V0dmFsdWUuaW5wdXRtYXNrXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBJbnB1dG1hc2sua2V5Q29kZS5ET1dOOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAkaW5wdXQudmFsKHBhcnNlRmxvYXQodGhpcy5pbnB1dG1hc2sudW5tYXNrZWR2YWx1ZSgpKSAtIHBhcnNlSW50KG9wdHMuc3RlcCkpLCAkaW5wdXQudHJpZ2dlcihcInNldHZhbHVlLmlucHV0bWFza1wiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgY3VycmVuY3k6IHtcclxuICAgICAgICAgICAgcHJlZml4OiBcIiQgXCIsXHJcbiAgICAgICAgICAgIGdyb3VwU2VwYXJhdG9yOiBcIixcIixcclxuICAgICAgICAgICAgYWxpYXM6IFwibnVtZXJpY1wiLFxyXG4gICAgICAgICAgICBwbGFjZWhvbGRlcjogXCIwXCIsXHJcbiAgICAgICAgICAgIGF1dG9Hcm91cDogITAsXHJcbiAgICAgICAgICAgIGRpZ2l0czogMixcclxuICAgICAgICAgICAgZGlnaXRzT3B0aW9uYWw6ICExLFxyXG4gICAgICAgICAgICBjbGVhck1hc2tPbkxvc3RGb2N1czogITFcclxuICAgICAgICB9LFxyXG4gICAgICAgIGRlY2ltYWw6IHtcclxuICAgICAgICAgICAgYWxpYXM6IFwibnVtZXJpY1wiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBpbnRlZ2VyOiB7XHJcbiAgICAgICAgICAgIGFsaWFzOiBcIm51bWVyaWNcIixcclxuICAgICAgICAgICAgZGlnaXRzOiAwLFxyXG4gICAgICAgICAgICByYWRpeFBvaW50OiBcIlwiXHJcbiAgICAgICAgfSxcclxuICAgICAgICBwZXJjZW50YWdlOiB7XHJcbiAgICAgICAgICAgIGFsaWFzOiBcIm51bWVyaWNcIixcclxuICAgICAgICAgICAgZGlnaXRzOiAyLFxyXG4gICAgICAgICAgICByYWRpeFBvaW50OiBcIi5cIixcclxuICAgICAgICAgICAgcGxhY2Vob2xkZXI6IFwiMFwiLFxyXG4gICAgICAgICAgICBhdXRvR3JvdXA6ICExLFxyXG4gICAgICAgICAgICBtaW46IDAsXHJcbiAgICAgICAgICAgIG1heDogMTAwLFxyXG4gICAgICAgICAgICBzdWZmaXg6IFwiICVcIixcclxuICAgICAgICAgICAgYWxsb3dQbHVzOiAhMSxcclxuICAgICAgICAgICAgYWxsb3dNaW51czogITFcclxuICAgICAgICB9XHJcbiAgICB9KSwgSW5wdXRtYXNrO1xyXG59KGpRdWVyeSwgSW5wdXRtYXNrKSwgZnVuY3Rpb24gKCQsIElucHV0bWFzaykge1xyXG4gICAgcmV0dXJuIElucHV0bWFzay5leHRlbmRBbGlhc2VzKHtcclxuICAgICAgICBwaG9uZToge1xyXG4gICAgICAgICAgICB1cmw6IFwicGhvbmUtY29kZXMvcGhvbmUtY29kZXMuanNcIixcclxuICAgICAgICAgICAgY291bnRyeWNvZGU6IFwiXCIsXHJcbiAgICAgICAgICAgIG1hc2s6IGZ1bmN0aW9uIChvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICBvcHRzLmRlZmluaXRpb25zW1wiI1wiXSA9IG9wdHMuZGVmaW5pdGlvbnNbOV07XHJcbiAgICAgICAgICAgICAgICB2YXIgbWFza0xpc3QgPSBbXTtcclxuICAgICAgICAgICAgICAgIHJldHVybiAkLmFqYXgoe1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogb3B0cy51cmwsXHJcbiAgICAgICAgICAgICAgICAgICAgYXN5bmM6ICExLFxyXG4gICAgICAgICAgICAgICAgICAgIGRhdGFUeXBlOiBcImpzb25cIixcclxuICAgICAgICAgICAgICAgICAgICBzdWNjZXNzOiBmdW5jdGlvbiAocmVzcG9uc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWFza0xpc3QgPSByZXNwb25zZTtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGVycm9yOiBmdW5jdGlvbiAoeGhyLCBhamF4T3B0aW9ucywgdGhyb3duRXJyb3IpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQodGhyb3duRXJyb3IgKyBcIiAtIFwiICsgb3B0cy51cmwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pLCBtYXNrTGlzdCA9IG1hc2tMaXN0LnNvcnQoZnVuY3Rpb24gKGEsIGIpIHtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKGEubWFzayB8fCBhKSA8IChiLm1hc2sgfHwgYikgPyAtMSA6IDE7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAga2VlcFN0YXRpYzogITEsXHJcbiAgICAgICAgICAgIG5vanVtcHM6ICEwLFxyXG4gICAgICAgICAgICBub2p1bXBzVGhyZXNob2xkOiAxLFxyXG4gICAgICAgICAgICBvbkJlZm9yZU1hc2s6IGZ1bmN0aW9uICh2YWx1ZSwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgdmFyIHByb2Nlc3NlZFZhbHVlID0gdmFsdWUucmVwbGFjZSgvXjAvZywgXCJcIik7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gKHByb2Nlc3NlZFZhbHVlLmluZGV4T2Yob3B0cy5jb3VudHJ5Y29kZSkgPiAxIHx8IC0xID09PSBwcm9jZXNzZWRWYWx1ZS5pbmRleE9mKG9wdHMuY291bnRyeWNvZGUpKSAmJiAocHJvY2Vzc2VkVmFsdWUgPSBcIitcIiArIG9wdHMuY291bnRyeWNvZGUgKyBwcm9jZXNzZWRWYWx1ZSksXHJcbiAgICAgICAgICAgICAgICBwcm9jZXNzZWRWYWx1ZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgcGhvbmViZToge1xyXG4gICAgICAgICAgICBhbGlhczogXCJwaG9uZVwiLFxyXG4gICAgICAgICAgICB1cmw6IFwicGhvbmUtY29kZXMvcGhvbmUtYmUuanNcIixcclxuICAgICAgICAgICAgY291bnRyeWNvZGU6IFwiMzJcIixcclxuICAgICAgICAgICAgbm9qdW1wc1RocmVzaG9sZDogNFxyXG4gICAgICAgIH1cclxuICAgIH0pLCBJbnB1dG1hc2s7XHJcbn0oalF1ZXJ5LCBJbnB1dG1hc2spLCBmdW5jdGlvbiAoJCwgSW5wdXRtYXNrKSB7XHJcbiAgICByZXR1cm4gSW5wdXRtYXNrLmV4dGVuZEFsaWFzZXMoe1xyXG4gICAgICAgIFJlZ2V4OiB7XHJcbiAgICAgICAgICAgIG1hc2s6IFwiclwiLFxyXG4gICAgICAgICAgICBncmVlZHk6ICExLFxyXG4gICAgICAgICAgICByZXBlYXQ6IFwiKlwiLFxyXG4gICAgICAgICAgICByZWdleDogbnVsbCxcclxuICAgICAgICAgICAgcmVnZXhUb2tlbnM6IG51bGwsXHJcbiAgICAgICAgICAgIHRva2VuaXplcjogL1xcW1xcXj9dPyg/OlteXFxcXFxcXV0rfFxcXFxbXFxTXFxzXT8pKl0/fFxcXFwoPzowKD86WzAtM11bMC03XXswLDJ9fFs0LTddWzAtN10/KT98WzEtOV1bMC05XSp8eFswLTlBLUZhLWZdezJ9fHVbMC05QS1GYS1mXXs0fXxjW0EtWmEtel18W1xcU1xcc10/KXxcXCgoPzpcXD9bOj0hXT8pP3woPzpbPyorXXxcXHtbMC05XSsoPzosWzAtOV0qKT9cXH0pXFw/P3xbXi4/KiteJHtbKCl8XFxcXF0rfC4vZyxcclxuICAgICAgICAgICAgcXVhbnRpZmllckZpbHRlcjogL1swLTldK1teLF0vLFxyXG4gICAgICAgICAgICBpc0NvbXBsZXRlOiBmdW5jdGlvbiAoYnVmZmVyLCBvcHRzKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFJlZ0V4cChvcHRzLnJlZ2V4KS50ZXN0KGJ1ZmZlci5qb2luKFwiXCIpKTtcclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgZGVmaW5pdGlvbnM6IHtcclxuICAgICAgICAgICAgICAgIHI6IHtcclxuICAgICAgICAgICAgICAgICAgICB2YWxpZGF0b3I6IGZ1bmN0aW9uIChjaHJzLCBtYXNrc2V0LCBwb3MsIHN0cmljdCwgb3B0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiBSZWdleFRva2VuKGlzR3JvdXAsIGlzUXVhbnRpZmllcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRjaGVzID0gW10sIHRoaXMuaXNHcm91cCA9IGlzR3JvdXAgfHwgITEsIHRoaXMuaXNRdWFudGlmaWVyID0gaXNRdWFudGlmaWVyIHx8ICExLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5xdWFudGlmaWVyID0ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbjogMSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXg6IDFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHRoaXMucmVwZWF0ZXJQYXJ0ID0gdm9pZCAwO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ1bmN0aW9uIGFuYWx5c2VSZWdleCgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaCwgbSwgY3VycmVudFRva2VuID0gbmV3IFJlZ2V4VG9rZW4oKSwgb3Blbmdyb3VwcyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChvcHRzLnJlZ2V4VG9rZW5zID0gW107IG1hdGNoID0gb3B0cy50b2tlbml6ZXIuZXhlYyhvcHRzLnJlZ2V4KSA7KSBzd2l0Y2ggKG0gPSBtYXRjaFswXSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0uY2hhckF0KDApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIihcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3Blbmdyb3Vwcy5wdXNoKG5ldyBSZWdleFRva2VuKCEwKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwiKVwiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBncm91cFRva2VuID0gb3Blbmdyb3Vwcy5wb3AoKSwgb3Blbmdyb3Vwcy5sZW5ndGggPiAwID8gb3Blbmdyb3Vwc1tvcGVuZ3JvdXBzLmxlbmd0aCAtIDFdLm1hdGNoZXMucHVzaChncm91cFRva2VuKSA6IGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2goZ3JvdXBUb2tlbik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjYXNlIFwie1wiOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgXCIrXCI6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSBcIipcIjpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHF1YW50aWZpZXJUb2tlbiA9IG5ldyBSZWdleFRva2VuKCExLCAhMCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG0gPSBtLnJlcGxhY2UoL1t7fV0vZywgXCJcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtcSA9IG0uc3BsaXQoXCIsXCIpLCBtcTAgPSBpc05hTihtcVswXSkgPyBtcVswXSA6IHBhcnNlSW50KG1xWzBdKSwgbXExID0gMSA9PT0gbXEubGVuZ3RoID8gbXEwIDogaXNOYU4obXFbMV0pID8gbXFbMV0gOiBwYXJzZUludChtcVsxXSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChxdWFudGlmaWVyVG9rZW4ucXVhbnRpZmllciA9IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1pbjogbXEwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF4OiBtcTFcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgb3Blbmdyb3Vwcy5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbWF0Y2hlcyA9IG9wZW5ncm91cHNbb3Blbmdyb3Vwcy5sZW5ndGggLSAxXS5tYXRjaGVzO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWF0Y2ggPSBtYXRjaGVzLnBvcCgpLCBtYXRjaC5pc0dyb3VwIHx8IChncm91cFRva2VuID0gbmV3IFJlZ2V4VG9rZW4oITApLCBncm91cFRva2VuLm1hdGNoZXMucHVzaChtYXRjaCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXRjaCA9IGdyb3VwVG9rZW4pLCBtYXRjaGVzLnB1c2gobWF0Y2gpLCBtYXRjaGVzLnB1c2gocXVhbnRpZmllclRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIG1hdGNoID0gY3VycmVudFRva2VuLm1hdGNoZXMucG9wKCksIG1hdGNoLmlzR3JvdXAgfHwgKGdyb3VwVG9rZW4gPSBuZXcgUmVnZXhUb2tlbighMCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdyb3VwVG9rZW4ubWF0Y2hlcy5wdXNoKG1hdGNoKSwgbWF0Y2ggPSBncm91cFRva2VuKSwgY3VycmVudFRva2VuLm1hdGNoZXMucHVzaChtYXRjaCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN1cnJlbnRUb2tlbi5tYXRjaGVzLnB1c2gocXVhbnRpZmllclRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG9wZW5ncm91cHMubGVuZ3RoID4gMCA/IG9wZW5ncm91cHNbb3Blbmdyb3Vwcy5sZW5ndGggLSAxXS5tYXRjaGVzLnB1c2gobSkgOiBjdXJyZW50VG9rZW4ubWF0Y2hlcy5wdXNoKG0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY3VycmVudFRva2VuLm1hdGNoZXMubGVuZ3RoID4gMCAmJiBvcHRzLnJlZ2V4VG9rZW5zLnB1c2goY3VycmVudFRva2VuKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdW5jdGlvbiB2YWxpZGF0ZVJlZ2V4VG9rZW4odG9rZW4sIGZyb21Hcm91cCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGlzdmFsaWQgPSAhMTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyb21Hcm91cCAmJiAocmVnZXhQYXJ0ICs9IFwiKFwiLCBvcGVuR3JvdXBDb3VudCsrKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIG1uZHggPSAwOyBtbmR4IDwgdG9rZW4ubWF0Y2hlcy5sZW5ndGg7IG1uZHgrKykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBtYXRjaFRva2VuID0gdG9rZW4ubWF0Y2hlc1ttbmR4XTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobWF0Y2hUb2tlbi5pc0dyb3VwID09PSAhMCkgaXN2YWxpZCA9IHZhbGlkYXRlUmVnZXhUb2tlbihtYXRjaFRva2VuLCAhMCk7IGVsc2UgaWYgKG1hdGNoVG9rZW4uaXNRdWFudGlmaWVyID09PSAhMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgY3JybnRuZHggPSAkLmluQXJyYXkobWF0Y2hUb2tlbiwgdG9rZW4ubWF0Y2hlcyksIG1hdGNoR3JvdXAgPSB0b2tlbi5tYXRjaGVzW2Nycm50bmR4IC0gMV0sIHJlZ2V4UGFydEJhayA9IHJlZ2V4UGFydDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGlzTmFOKG1hdGNoVG9rZW4ucXVhbnRpZmllci5tYXgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKDsgbWF0Y2hUb2tlbi5yZXBlYXRlclBhcnQgJiYgbWF0Y2hUb2tlbi5yZXBlYXRlclBhcnQgIT09IHJlZ2V4UGFydCAmJiBtYXRjaFRva2VuLnJlcGVhdGVyUGFydC5sZW5ndGggPiByZWdleFBhcnQubGVuZ3RoICYmICEoaXN2YWxpZCA9IHZhbGlkYXRlUmVnZXhUb2tlbihtYXRjaEdyb3VwLCAhMCkpIDspO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaXN2YWxpZCA9IGlzdmFsaWQgfHwgdmFsaWRhdGVSZWdleFRva2VuKG1hdGNoR3JvdXAsICEwKSwgaXN2YWxpZCAmJiAobWF0Y2hUb2tlbi5yZXBlYXRlclBhcnQgPSByZWdleFBhcnQpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhQYXJ0ID0gcmVnZXhQYXJ0QmFrICsgbWF0Y2hUb2tlbi5xdWFudGlmaWVyLm1heDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwLCBxbSA9IG1hdGNoVG9rZW4ucXVhbnRpZmllci5tYXggLSAxOyBxbSA+IGkgJiYgIShpc3ZhbGlkID0gdmFsaWRhdGVSZWdleFRva2VuKG1hdGNoR3JvdXAsICEwKSkgOyBpKyspO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVnZXhQYXJ0ID0gcmVnZXhQYXJ0QmFrICsgXCJ7XCIgKyBtYXRjaFRva2VuLnF1YW50aWZpZXIubWluICsgXCIsXCIgKyBtYXRjaFRva2VuLnF1YW50aWZpZXIubWF4ICsgXCJ9XCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKHZvaWQgMCAhPT0gbWF0Y2hUb2tlbi5tYXRjaGVzKSBmb3IgKHZhciBrID0gMDsgayA8IG1hdGNoVG9rZW4ubGVuZ3RoICYmICEoaXN2YWxpZCA9IHZhbGlkYXRlUmVnZXhUb2tlbihtYXRjaFRva2VuW2tdLCBmcm9tR3JvdXApKSA7IGsrKyk7IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgdGVzdEV4cDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFwiW1wiID09IG1hdGNoVG9rZW4uY2hhckF0KDApKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0RXhwID0gcmVnZXhQYXJ0LCB0ZXN0RXhwICs9IG1hdGNoVG9rZW47XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgb3Blbkdyb3VwQ291bnQgPiBqOyBqKyspIHRlc3RFeHAgKz0gXCIpXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXhwID0gbmV3IFJlZ0V4cChcIl4oXCIgKyB0ZXN0RXhwICsgXCIpJFwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlzdmFsaWQgPSBleHAudGVzdChidWZmZXJTdHIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2UgZm9yICh2YXIgbCA9IDAsIHRsID0gbWF0Y2hUb2tlbi5sZW5ndGg7IHRsID4gbDsgbCsrKSBpZiAoXCJcXFxcXCIgIT09IG1hdGNoVG9rZW4uY2hhckF0KGwpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZXN0RXhwID0gcmVnZXhQYXJ0LCB0ZXN0RXhwICs9IG1hdGNoVG9rZW4uc3Vic3RyKDAsIGwgKyAxKSwgdGVzdEV4cCA9IHRlc3RFeHAucmVwbGFjZSgvXFx8JC8sIFwiXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaiA9IDA7IG9wZW5Hcm91cENvdW50ID4gajsgaisrKSB0ZXN0RXhwICs9IFwiKVwiO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV4cCA9IG5ldyBSZWdFeHAoXCJeKFwiICsgdGVzdEV4cCArIFwiKSRcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXN2YWxpZCA9IGV4cC50ZXN0KGJ1ZmZlclN0cikpIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZ2V4UGFydCArPSBtYXRjaFRva2VuO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXN2YWxpZCkgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZnJvbUdyb3VwICYmIChyZWdleFBhcnQgKz0gXCIpXCIsIG9wZW5Hcm91cENvdW50LS0pLCBpc3ZhbGlkO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBncm91cFRva2VuLCBjYnVmZmVyID0gbWFza3NldC5idWZmZXIuc2xpY2UoKSwgcmVnZXhQYXJ0ID0gXCJcIiwgaXNWYWxpZCA9ICExLCBvcGVuR3JvdXBDb3VudCA9IDA7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG51bGwgPT09IG9wdHMucmVnZXhUb2tlbnMgJiYgYW5hbHlzZVJlZ2V4KCksIGNidWZmZXIuc3BsaWNlKHBvcywgMCwgY2hycyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIGJ1ZmZlclN0ciA9IGNidWZmZXIuam9pbihcIlwiKSwgaSA9IDA7IGkgPCBvcHRzLnJlZ2V4VG9rZW5zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgcmVnZXhUb2tlbiA9IG9wdHMucmVnZXhUb2tlbnNbaV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXNWYWxpZCA9IHZhbGlkYXRlUmVnZXhUb2tlbihyZWdleFRva2VuLCByZWdleFRva2VuLmlzR3JvdXApKSBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaXNWYWxpZDtcclxuICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgIGNhcmRpbmFsaXR5OiAxXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9KSwgSW5wdXRtYXNrO1xyXG59KGpRdWVyeSwgSW5wdXRtYXNrKTtcclxuLyoganNoaW50IGlnbm9yZTplbmQgKi8iLCIoZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7IFxyXG4gICAgdmFyIGFwcCA9IGFuZ3VsYXIubW9kdWxlKCdhcHAnLFxyXG4gICAgICAgIFsnbmdSZXNvdXJjZScsICd1aS5yb3V0ZXInLCAnbmdDb29raWVzJywgJ3VpLm1hc2snLCAndWkuYm9vdHN0cmFwJywgJ2lzdGV2ZW4tbXVsdGktc2VsZWN0JywgJ25nSW5wdXRNb2RpZmllZCcsICd1aS52YWxpZGF0ZScsICdjZ0J1c3knLFxyXG4gICAgICAgICAgICAnYW5ndWxhci5maWx0ZXInLCAneGVkaXRhYmxlJywgJ2NoZWNrbGlzdC1tb2RlbCcsICduZ0ZpbGVVcGxvYWQnLCAnU1ROUmVzb3VyY2UnLCAndWkuYm9vdHN0cmFwLmRhdGV0aW1lcGlja2VyJywnbGVhZmxldC1kaXJlY3RpdmUnLCduZ0hhbmRzb250YWJsZScsXHJcbiAgICAgICAgICAgICdTVE5Db250cm9sbGVycycsICdMb2dJbk91dENvbnRyb2xsZXInLCAnTW9kYWxDb250cm9sbGVycycsICdTZXR0aW5nc0NvbnRyb2xsZXJzJywgJ1dpTS5TZXJ2aWNlcycsICdXaU0uRXZlbnQnLCAnd2ltX2FuZ3VsYXInLCAnYW5ndWxhclNwaW5uZXJzJ10pO1xyXG4gICAgYXBwLmNvbnN0YW50KCdTRVJWRVJfVVJMJywgJ2h0dHBzOi8vc3RuLndpbS51c2dzLmdvdi9TVE5TZXJ2aWNlcycpO1xyXG4gICAgLy9hcHAuY29uc3RhbnQoJ1NFUlZFUl9VUkwnLCAnaHR0cHM6Ly9zdG50ZXN0LndpbS51c2dzLmdvdi9TVE5TZXJ2aWNlczInKTtcclxuICAgIC8vYXBwLmNvbnN0YW50KCdTRVJWRVJfVVJMJywgJ2h0dHA6Ly9sb2NhbGhvc3QvU1ROU2VydmljZXMyJyk7XHJcbiAgICBcclxuICAgIGFwcC5ydW4oWyckcm9vdFNjb3BlJywgJyR1aWJNb2RhbFN0YWNrJywgJyRjb29raWVzJywgJyRzdGF0ZScsIGZ1bmN0aW9uICgkcm9vdFNjb3BlLCAkdWliTW9kYWxTdGFjaywgJGNvb2tpZXMsICRzdGF0ZSkge1xyXG4gICAgICAgICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VTdGFydCcsIGZ1bmN0aW9uIChldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcykge1xyXG4gICAgICAgICAgICBpZiAoKCRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gdW5kZWZpbmVkIHx8ICRjb29raWVzLmdldCgnU1ROQ3JlZHMnKSA9PT0gXCJcIikgJiYgdG9TdGF0ZS5hdXRoZW50aWNhdGUpIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUucmV0dXJuVG9TdGF0ZSA9IHRvU3RhdGUubmFtZTtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUucmV0dXJuVG9TdGF0ZVBhcmFtcyA9IHRvUGFyYW1zLmlkO1xyXG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgICRzdGF0ZS5nbygnZW50cnknKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcgPSB7IHNob3dMb2FkaW5nOiB0cnVlIH07XHJcbiAgICAgICAgICAgICAgICAvL2Nsb3NlIGFsbCBtb2RhbHMgd2hlbiBjaGFuZ2luZyBzdGF0ZXMgKHNpdGUgY3JlYXRlIG9wZW4sIHdhbnQgdG8gdXNlIGEgbmVhcmJ5IHNpdGUgb3IganVzdCBjaGFuZ2UgdGhlIHVybCB1cCB0b3AsIGNsb3NlIHRoZSBtb2RhbCB0b28pXHJcbiAgICAgICAgICAgICAgICAkdWliTW9kYWxTdGFjay5kaXNtaXNzQWxsKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKHRvU3RhdGUudXJsID09IFwiL1wiKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgLy9tYWtlIHVzZXJuYW1lIGZvY3VzXHJcbiAgICAgICAgICAgICAgICAgICAgJChcIiN1c2VyTmFtZUZvY3VzXCIpLmZvY3VzKCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZVN1Y2Nlc3MnLCBmdW5jdGlvbiAoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMsIGVycm9yKSB7XHJcbiAgICAgICAgICAgICRyb290U2NvcGUuc3RhdGVJc0xvYWRpbmcuc2hvd0xvYWRpbmcgPSBmYWxzZTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgJHJvb3RTY29wZS4kb24oJyRzdGF0ZUNoYW5nZUVycm9yJywgZnVuY3Rpb24gKGV2ZW50LCB0b1N0YXRlLCB0b1BhcmFtcywgZnJvbVN0YXRlLCBmcm9tUGFyYW1zLCBlcnJvcikgeyAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAkcm9vdFNjb3BlLnN0YXRlSXNMb2FkaW5nLnNob3dMb2FkaW5nID0gZmFsc2U7XHJcbiAgICAgICAgICAgIGFsZXJ0KFwiRXJyb3Igb2NjdXJyZWQ6IFN0YXR1c1wiICsgZXJyb3Iuc3RhdHVzICsgXCIsIFwiICsgZXJyb3Iuc3RhdHVzVGV4dCArIFwiLiBUaGUgZm9sbG93aW5nIHJlcXVlc3Qgd2FzIHVuc3VjY2Vzc2Z1bDogXCIgKyBlcnJvci5jb25maWcudXJsICsgXCIgUGxlYXNlIHJlZnJlc2ggYW5kIHRyeSBhZ2Fpbi5cIik7XHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgXHJcbiAgICB9XSk7XHJcbiAgICAvL2FwcC5jb25maWcoZnVuY3Rpb24gdGhhdCBkZWZpbmVzIHRoZSBjb25maWcgY29kZS4gJ3VpLnNlbGVjdCcsICduZ1Nhbml0aXplJywnJGxvY2F0aW9uUHJvdmlkZXInLCAkbG9jYXRpb25Qcm92aWRlclxyXG4gICAgYXBwLmNvbmZpZyhbJyRzdGF0ZVByb3ZpZGVyJywgJyR1cmxSb3V0ZXJQcm92aWRlcicsIFxyXG4gICAgICAgIGZ1bmN0aW9uICgkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XHJcbiAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAvL2lmIG5vIGFjdGl2ZSBzdGF0ZSwgZGlzcGxheSBzdGF0ZSBhc3NvY2lhdGVkIHdpdGggdGhpcyBmcmFnbWVudCBpZGVudGlmaWVyXHJcbiAgICAgICAgICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoXCIvXCIpO1xyXG5cclxuICAgICAgICAgICAgLy9odHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzE5NzIxMTI1L3Jlc29sdmUtaHR0cC1yZXF1ZXN0LWJlZm9yZS1ydW5uaW5nLWFwcC1hbmQtc3dpdGNoaW5nLXRvLWEtcm91dGUtb3Itc3RhdGVcclxuICAgICAgICAgICAgLy9odHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzIyNTM3MzExL2FuZ3VsYXItdWktcm91dGVyLWxvZ2luLWF1dGhlbnRpY2F0aW9uXHJcbiAgICAgICAgICAgICRzdGF0ZVByb3ZpZGVyXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gZW50cnlQb2ludFxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwiZW50cnlcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L21haW4vbWFpblZpZXcuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwibWFpbkN0cmxcIlxyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gZW50cnlQb2ludFxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBtYXBcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcIm1hcFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9NYXBcIixcclxuICAgICAgICAgICAgICAgICAgICAvL3RlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9tYXAvbWFwLmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICAvL2NvbnRyb2xsZXI6IFwiTWFwQ29udHJvbGxlclwiLFxyXG4gICAgICAgICAgICAgICAgICAgIC8vYXV0aGVudGljYXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHZpZXdzOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICcnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTWFwQ29udHJvbGxlcicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQvbWFwL21hcC5odG1sXCJcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ21hcEZpbHRlcnNAbWFwJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnQvbWFwL21hcEZpbHRlcnMuaHRtbCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTWFwRmlsdGVyc0NvbnRyb2xsZXInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHM6ICdTVEFURScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVMaXN0OiBmdW5jdGlvbiAocykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbnNUOiAnU0VOU09SX1RZUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbnNvclR5cGVzOiBmdW5jdGlvbiAoc2Vuc1QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNlbnNULmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbmV0d046ICdORVRXT1JLX05BTUUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldHdvcmtOYW1lczogZnVuY3Rpb24gKG5ldHdOKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXR3Ti5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vICd3aW1MZWdlbmRAbWFwJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnQvVmlld3MvTGVnZW5kL2xlZ2VuZC5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIGNvbnRyb2xsZXI6ICd3aW1MZWdlbmQnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdtYXBTaXRlSW5mb0BtYXAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudC9zaXRlL21hcFNpdGVJbmZvVmlldy5odG1sJywgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnTWFwU2l0ZUluZm9Db250cm9sbGVyJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWFwUGVha3NWaWV3QG1hcCc6IHt0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudC9wZWFrL21hcFBlYWtzVmlldy5odG1sJywgY29udHJvbGxlcjogJ01hcFBlYWtzQ29udHJvbGxlcid9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnbWFwU2Vuc29yUHJvcG9zZUBtYXAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudC9zZW5zb3IvbWFwU2Vuc29yUHJvcG9zZS5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBkdDogJ0RFUExPWU1FTlRfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWxsRGVwbG95VHlwZXM6IGZ1bmN0aW9uIChkdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZHQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL3NkOiAnU0VOU09SX0RFUExPWU1FTlQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxsU2Vuc0RlcHM6IGZ1bmN0aW9uIChzZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vICAgIHJldHVybiBzZC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvL31cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZDogJ1NFTlNPUl9UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhbGxTZW5zRGVwczogZnVuY3Rpb24gKHNkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ01hcFNlbnNvclByb3Bvc2VDb250cm9sbGVyJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBtYXBcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gYXBwcm92YWwgcGFnZVxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwiYXBwcm92YWxcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvQXBwcm92YWxcIixcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQvYXBwcm92YWwvYXBwcm92YWwuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwiYXBwcm92YWxDdHJsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgczogJ1NUQVRFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGVMaXN0OiBmdW5jdGlvbiAocykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGk6ICdJTlNUUlVNRU5UJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5zdHJ1bWVudExpc3Q6IGZ1bmN0aW9uIChpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Q6ICdTRU5TT1JfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFNlbnNvclR5cGVzOiBmdW5jdGlvbiAoc3QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHQ6ICdERVBMT1lNRU5UX1RZUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxEZXBUeXBlczogZnVuY3Rpb24gKGR0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZHQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIHNpdGVzU2VhcmNoIHBhZ2VcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInNpdGVTZWFyY2hcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvU2l0ZVNlYXJjaFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9zaXRlU2VhcmNoL3NpdGVTZWFyY2guaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwic2l0ZVNlYXJjaEN0cmxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzOiAnU1RBVEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGF0ZUxpc3Q6IGZ1bmN0aW9uIChzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2Vuc1Q6ICdTRU5TT1JfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbnNvclR5cGVzOiBmdW5jdGlvbiAoc2Vuc1QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZW5zVC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV0d046ICdORVRXT1JLX05BTUUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBuZXR3b3JrTmFtZXM6IGZ1bmN0aW9uIChuZXR3Tikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldHdOLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXBvcnRpbmdcclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXBvcnRpbmcgKGFic3RyYWN0KVxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwicmVwb3J0aW5nXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL1JlcG9ydGluZ1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIGFic3RyYWN0OiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9yZXBvcnRpbmcvcmVwb3J0aW5nLmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBcInJlcG9ydGluZ0N0cmxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZToge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBlOiAnRVZFTlQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxFdmVudHM6IGZ1bmN0aW9uIChlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGU6ICdTVEFURScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFN0YXRlczogZnVuY3Rpb24gKHN0YXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3RhdGUuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHI6ICdSRVBPUlQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxSZXBvcnRzOiBmdW5jdGlvbiAocikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHIuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV0OiAnRVZFTlRfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEV2ZW50VHlwZXM6IGZ1bmN0aW9uIChldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV0LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlczogJ0VWRU5UX1NUQVRVUycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEV2ZW50U3RhdHVzOiBmdW5jdGlvbiAoZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcy5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWc6ICdBR0VOQ1knLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxBZ2VuY2llczogZnVuY3Rpb24gKGFnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYWcuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lbWJlclJlcG9ydHM6IGZ1bmN0aW9uIChyLCAkY29va2llcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG1JRCA9ICRjb29raWVzLmdldCgnbUlEJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5nZXRNZW1iZXJSZXBvcnRzKHsgbWVtYmVySWQ6IG1JRCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gcmVwb3J0aW5nIChhYnN0cmFjdClcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVwb3J0aW5nLnJlcG9ydERhc2hcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlcG9ydGluZy5yZXBvcnREYXNoXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL0Rhc2hib2FyZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9yZXBvcnRpbmcvcmVwb3J0aW5nRGFzaGJvYXJkLmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBcInJlcG9ydGluZ0Rhc2hDdHJsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcjogJ1JFUE9SVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFJlcG9ydHNBZ2FpbjogZnVuY3Rpb24gKHIpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiByLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkvLyNlbmRyZWdpb24gcmVwb3J0aW5nLnJlcG9ydERhc2hcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVwb3J0aW5nLlN1Ym1pdFJlcG9ydFxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwicmVwb3J0aW5nLnN1Ym1pdFJlcG9ydFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9TdWJtaXRSZXBvcnRcIixcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQvcmVwb3J0aW5nL3N1Ym1pdFJlcG9ydC5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogXCJzdWJtaXRSZXBvcnRDdHJsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXBvcnRpbmcuU3VibWl0UmVwb3J0XHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIHJlcG9ydGluZy5HZW5lcmF0ZVJlcG9ydFxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwicmVwb3J0aW5nLmdlbmVyYXRlUmVwb3J0XCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL0dlbmVyYXRlUmVwb3J0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3JlcG9ydGluZy9nZW5lcmF0ZVJlcG9ydC5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgfSkvLyNlbmRyZWdpb24gcmVwb3J0aW5nLkdlbmVyYXRlUmVwb3J0XHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gcmVwb3J0aW5nXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIHNldHRpbmdzIFxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwic2V0dGluZ3NcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvU2V0dGluZ3NcIixcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQvc2V0dGluZ3Mvc2V0dGluZ3MuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwic2V0dGluZ3NDdHJsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHNldHRpbmdzXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIG1lbWJlcnNcclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBtZW1iZXJzIChhYnN0cmFjdClcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcIm1lbWJlcnNcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvTWVtYmVyc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHBhcmFtczogeyBpZDogbnVsbH0sXHJcbiAgICAgICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwiPGRpdiB1aS12aWV3PjwvZGl2PlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwibWVtYmVyQ3RybFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHI6ICdST0xFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsUm9sZXM6IGZ1bmN0aW9uIChyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gci5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYTogJ0FHRU5DWScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEFnZW5jaWVzOiBmdW5jdGlvbiAoYSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHVzZXJQcm9maWxlSWQ6IGZ1bmN0aW9uICgkc3RhdGVQYXJhbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc3RhdGVQYXJhbXMuaWQgIT09IHVuZGVmaW5lZCkgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzdGF0ZVBhcmFtcy5pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkvLyNlbmRyZWdpb24gbWVtYmVyc1xyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBtZW1iZXJzLk1lbWJlcnNMaXN0XHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJtZW1iZXJzLk1lbWJlcnNMaXN0XCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL01lbWJlcnNMaXN0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L21lbWJlci9tZW1iZXJzTGlzdC5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBtZW1iZXJzLk1lbWJlcnNMaXN0XHJcbiAgICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIG1lbWJlcnNcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gZXZlbnRzXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gZXZlbnRzXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJldmVudHNcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvRXZlbnRzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwiPGRpdiB1aS12aWV3PjwvZGl2PlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwiZXZlbnRDdHJsXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZTogJ0VWRU5UJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsRXZlbnRzOiBmdW5jdGlvbiAoZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGUuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGV0OiAnRVZFTlRfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEV2ZW50VHlwZXM6IGZ1bmN0aW9uIChldCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGV0LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBlczogJ0VWRU5UX1NUQVRVUycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEV2ZW50U3RhdHM6IGZ1bmN0aW9uIChlcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVzLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtOiAnTUVNQkVSJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsQ29vcmRNZW1iZXJzOiBmdW5jdGlvbiAobSwgJGh0dHAsICRjb29raWVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BY2NlcHQgPSAnYXBwbGljYXRpb24vanNvbic7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbS5nZXRSb2xlTWVtYmVycyh7IHJvbGVJZDogMSB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pLy8jZW5kcmVnaW9uIGV2ZW50c1xyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBldmVudHMuRXZlbnRzTGlzdFxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwiZXZlbnRzLkV2ZW50c0xpc3RcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvRXZlbnRzTGlzdFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9ldmVudC9ldmVudHNMaXN0Lmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWVcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gZXZlbnRzLkV2ZW50c0xpc3RcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gZXZlbnRzLkV2ZW50SW5mb2ZcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcImV2ZW50cy5FdmVudEluZm9cIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvZXZlbnRJbmZvLzppZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9ldmVudC9ldmVudEluZm8uaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwiZXZlbnRJbmZvQ3RybFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGU6ICdFVkVOVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNFdmVudDogZnVuY3Rpb24gKGUsICRzdGF0ZVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50SWQgPSAkc3RhdGVQYXJhbXMuaWQ7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZXZlbnRJZCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZS5xdWVyeShcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgeyBpZDogZXZlbnRJZCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pLy8jZW5kcmVnaW9uIGV2ZW50cy5FdmVudEluZm9cclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBldmVudHNcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVzb3VyY2VzXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVzb3VyY2VzXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJyZXNvdXJjZXNcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvUmVzb3VyY2VzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGU6IFwiPGRpdiB1aS12aWV3PjwvZGl2PlwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFwicmVzb3VyY2VzQ3RybFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlOiAnU1RBVEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxTdGF0ZXM6IGZ1bmN0aW9uIChzdGF0ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0YXRlLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhZzogJ0FHRU5DWScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEFnZW5jaWVzOiBmdW5jdGlvbiAoYWcpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhZy5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYzogJ0NPTlRBQ1RfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbENvbnRhY3RUeXBlczogZnVuY3Rpb24gKGMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkOiAnREVQTE9ZTUVOVF9QUklPUklUWScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbERlcGxveVByaW9yaXRpZXM6IGZ1bmN0aW9uIChkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXM6ICdFVkVOVF9TVEFUVVMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxFdmVudFN0YXRzOiBmdW5jdGlvbiAoZXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlcy5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgZXQ6ICdFVkVOVF9UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsRXZlbnRUeXBlczogZnVuY3Rpb24gKGV0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZXQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGZ0OiAnRklMRV9UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsRmlsZVR5cGVzOiBmdW5jdGlvbiAoZnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmdC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGNtOiAnSE9SSVpPTlRBTF9DT0xMX01FVEhPRFMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxIb3JDb2xsTWV0aG9kczogZnVuY3Rpb24gKGhjbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhjbS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGQ6ICdIT1JJWk9OVEFMX0RBVFVNJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsSG9yRGF0dW1zOiBmdW5jdGlvbiAoaGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoZC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHQ6ICdIT1VTSU5HX1RZUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxIb3VzZVR5cGVzOiBmdW5jdGlvbiAoaHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBodC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHE6ICdIV01fUVVBTElUWScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEhXTXF1YWxpdGllczogZnVuY3Rpb24gKGhxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaHEuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh3bVQ6ICdIV01fVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEhXTXR5cGVzOiBmdW5jdGlvbiAoaHdtVCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGh3bVQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGljYzogJ0lOU1RfQ09MTF9DT05ESVRJT04nLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxJbnN0Q29sbGVjdENvbmRpdGlvbnM6IGZ1bmN0aW9uIChpY2MpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBpY2MuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG06ICdNQVJLRVInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxNYXJrZXJzOiBmdW5jdGlvbiAobSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG0uZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5uOiAnTkVUV09SS19OQU1FJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsTmV0d29ya05hbWVzOiBmdW5jdGlvbiAobm4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBubi5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3BxOiAnT1BfUVVBTElUWScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbE9ialB0UXVhbGl0aWVzOiBmdW5jdGlvbiAob3BxKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gb3BxLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHQ6ICdPUF9UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsT2JqUHRUeXBlczogZnVuY3Rpb24gKG9wdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2I6ICdTRU5TT1JfQlJBTkQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxTZW5zb3JCcmFuZHM6IGZ1bmN0aW9uIChzYikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHNiLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkdDogJ0RFUExPWU1FTlRfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbERlcGxveW1lbnRUeXBlczogZnVuY3Rpb24gKGR0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZHQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNzdGF0OiAnU1RBVFVTX1RZUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxTdGF0dXNUeXBlczogZnVuY3Rpb24gKHNzdGF0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3N0YXQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0OiAnU0VOU09SX1RZUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxTZW5zb3JUeXBlczogZnVuY3Rpb24gKHN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3QuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG50OiAnTkVUV09SS19UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsTmV0d29ya1R5cGVzOiBmdW5jdGlvbiAobnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmNtOiAnVkVSVElDQUxfQ09MTF9NRVRIT0QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxWZXJ0aWNhbENvbGxNZXRob2RzOiBmdW5jdGlvbiAodmNtKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmNtLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZDogJ1ZFUlRJQ0FMX0RBVFVNJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsVmVydGljYWxEYXR1bXM6IGZ1bmN0aW9uICh2ZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZkLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSkvLyNlbmRyZWdpb24gcmVzb3VyY2VzXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0XHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJyZXNvdXJjZXMuUmVzb3VyY2VzTGlzdFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9SZXNvdXJjZXNMaXN0XCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9yZXNvdXJjZXNMaXN0Lmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWVcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3RcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gYWxsIGxvb2t1cCBodG1sc1xyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LmFnZW5jeVxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwicmVzb3VyY2VzLlJlc291cmNlc0xpc3QuYWdlbmN5XCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL0FnZW5jaWVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9hZ2VuY3kuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5hZ2VuY3lcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuQ29udGFjdFR5cGVcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkNvbnRhY3RUeXBlXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL0NvbnRhY3RUeXBlc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9yZXNvdXJjZXMvY29udGFjdFR5cGUuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5Db250YWN0VHlwZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5EZXBQcmlvcml0eVxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwicmVzb3VyY2VzLlJlc291cmNlc0xpc3QuRGVwUHJpb3JpdHlcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvRGVwbG95bWVudFByaW9yaXRpZXNcIixcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQvcmVzb3VyY2VzL2RlcGxveW1lbnRQcmlvcml0eS5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkRlcFByaW9yaXR5XHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkV2ZW50U3RhdHVzXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJyZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5FdmVudFN0YXR1c1wiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9FdmVudFN0YXR1c1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9yZXNvdXJjZXMvZXZlbnRTdGF0dXMuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5FdmVudFN0YXR1c1xyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5FdmVudFR5cGVcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkV2ZW50VHlwZVwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9FdmVudFR5cGVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9ldmVudFR5cGUuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5FdmVudFR5cGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuRmlsZVR5cGVcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkZpbGVUeXBlXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL0ZpbGVUeXBlc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9yZXNvdXJjZXMvZmlsZVR5cGUuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5GaWxlVHlwZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5Ib3JDb2xsTWV0aGRcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkhvckNvbGxNZXRoZFwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9Ib3Jpem9udGFsQ29sbE1ldGhvZHNcIixcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQvcmVzb3VyY2VzL2hvcml6b250YWxDb2xsZWN0aW9uTWV0aG9kLmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWVcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuSG9yQ29sbE1ldGhkXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkhvckRhdHVtXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJyZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5Ib3JEYXR1bVwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9Ib3Jpem9udGFsRGF0dW1zXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9ob3Jpem9udGFsRGF0dW0uaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5Ib3JEYXR1bVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5Ib3VzaW5nVHlwZVxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwicmVzb3VyY2VzLlJlc291cmNlc0xpc3QuSG91c2luZ1R5cGVcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvSG91c2luZ1R5cGVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9ob3VzaW5nVHlwZS5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkhvdXNpbmdUeXBlXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkhXTVF1YWxcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkhXTVF1YWxcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvSFdNUXVhbGl0aWVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9od21RdWFsaXR5Lmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWVcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuSFdNUXVhbFxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5IV01UeXBlXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJyZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5IV01UeXBlXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL0hXTVR5cGVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9od21UeXBlLmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWVcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuSFdNVHlwZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5JbnN0ckNvbGxDb25kaXRpb25cclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlc291cmNlcy5SZXNvdXJjZXNMaXN0Lkluc3RyQ29sbENvbmRpdGlvblwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9JbnN0ckNvbGxDb25kaXRpb25zXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9pbnN0cnVtZW50Q29sbGVjdGlvbkNvbmRpdGlvbi5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0Lkluc3RyQ29sbENvbmRpdGlvblxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5NYXJrZXJcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlc291cmNlcy5SZXNvdXJjZXNMaXN0Lk1hcmtlclwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9NYXJrZXJzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9tYXJrZXIuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5NYXJrZXJcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuTmV0d29ya05hbWVzXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJyZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5OZXR3b3JrTmFtZXNcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvTmV0d29ya05hbWVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9uZXR3b3JrTmFtZXMuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5OZXR3b3JrTmFtZXNcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuT1BxdWFsaXR5XHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJyZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5PUHF1YWxpdHlcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvT2JqUG9pbnRRdWFsaXRpZXNcIixcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQvcmVzb3VyY2VzL29iamVjdGl2ZVBvaW50UXVhbGl0eS5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0Lk9QcXVhbGl0eVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5PUFR5cGVcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlc291cmNlcy5SZXNvdXJjZXNMaXN0Lk9QVHlwZVwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9PYmpQb2ludFR5cGVcIixcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQvcmVzb3VyY2VzL29iamVjdGl2ZVBvaW50VHlwZS5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0Lk9QVHlwZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5TZW5zb3JCcmFuZFxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwicmVzb3VyY2VzLlJlc291cmNlc0xpc3QuU2Vuc29yQnJhbmRcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvU2Vuc29yQnJhbmRzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9zZW5zb3JCcmFuZC5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LlNlbnNvckJyYW5kXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkRlcFR5cGVcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlc291cmNlcy5SZXNvdXJjZXNMaXN0LlNlbkRlcFR5cGVcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvU2Vuc29yRGVwbG95bWVudFR5cGVzXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3Jlc291cmNlcy9kZXBsb3ltZW50VHlwZS5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LkRlcFR5cGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuU3RhdHVzVHlwZVxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwicmVzb3VyY2VzLlJlc291cmNlc0xpc3QuU3RhdHVzVHlwZVwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9TdGF0dXNUeXBlc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9yZXNvdXJjZXMvc3RhdHVzVHlwZS5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LlN0YXR1c1R5cGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuU2Vuc29yVHlwZVxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwicmVzb3VyY2VzLlJlc291cmNlc0xpc3QuU2Vuc29yVHlwZVwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9TZW5zb3JUeXBlc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9yZXNvdXJjZXMvc2Vuc29yVHlwZS5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlXHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LlNlbnNvclR5cGVcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuTmV0d29ya1R5cGVcclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInJlc291cmNlcy5SZXNvdXJjZXNMaXN0Lk5ldHdvcmtUeXBlXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL05ldHdvcmtUeXBlc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9yZXNvdXJjZXMvbmV0d29ya1R5cGUuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5OZXR3b3JrVHlwZVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiByZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5WZXJ0Q29sbE1ldGhvZFxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwicmVzb3VyY2VzLlJlc291cmNlc0xpc3QuVmVydENvbGxNZXRob2RcIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvVmVydGljYWxDb2xsTWV0aG9kc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9yZXNvdXJjZXMvdmVydGljYWxDb2xsZWN0aW9uTWV0aG9kLmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWVcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuVmVydENvbGxNZXRob2RcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gcmVzb3VyY2VzLlJlc291cmNlc0xpc3QuVmVydERhdHVtXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJyZXNvdXJjZXMuUmVzb3VyY2VzTGlzdC5WZXJ0RGF0dW1cIiwge1xyXG4gICAgICAgICAgICAgICAgICAgIHVybDogXCIvVmVydGljYWxEYXR1bXNcIixcclxuICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJjb21wb25lbnQvcmVzb3VyY2VzL3ZlcnRpY2FsRGF0dW0uaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZVxyXG4gICAgICAgICAgICAgICAgfSlcclxuICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHJlc291cmNlcy5SZXNvdXJjZXNMaXN0LlZlcnREYXR1bVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBhbGwgbG9va3VwIGh0bWxzXHJcbiAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gcmVzb3VyY2VzXHJcblxyXG4gICAgICAgICAgICAgICAgLy8jcmVnaW9uIGhpc3RvcmljSFdNIHVwbG9hZFxyXG4gICAgICAgICAgICAgICAgLnN0YXRlKFwiaGlzdG9yaWNIV01zXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL0V2ZW50cy86aWQvSGlzdG9yaWNIV01zXCIsXHJcbiAgICAgICAgICAgICAvLyAgICAgICBwYXJhbXM6e2lkOm51bGx9LFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9od20vaGlzdG9yaWMuaHRtbFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBcImhpc3RvcmljSFdNQ3RybFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgZTogJ0VWRU5UJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc0V2ZW50OiBmdW5jdGlvbiAoZSwgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHN0YXRlUGFyYW1zLmlkID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLnF1ZXJ5KHsgaWQ6ICRzdGF0ZVBhcmFtcy5pZCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGQ6ICdIT1JJWk9OVEFMX0RBVFVNJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgSERhdHVtczogZnVuY3Rpb24gKGhkKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoZC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGM6ICdIT1JJWk9OVEFMX0NPTExfTUVUSE9EUycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEhDb2xsZWN0TWV0aHM6IGZ1bmN0aW9uIChoYyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGMuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHM6ICdTVEFURScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFN0YXRlczogZnVuY3Rpb24gKHMpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGM6ICdDT1VOVElFUycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIENvdW50aWVzOiBmdW5jdGlvbiAoYyl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYy5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0OiAnT1BfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIE9QVHlwZXM6IGZ1bmN0aW9uIChvcHQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmQ6ICdWRVJUSUNBTF9EQVRVTScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFZEYXR1bXM6IGZ1bmN0aW9uICh2ZCl7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdmQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGh0OiAnSFdNX1RZUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBIVHlwZXM6IGZ1bmN0aW9uIChodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGh0LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBocXU6ICdIV01fUVVBTElUWScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIEhXTVF1YWxzOiBmdW5jdGlvbiAoaHF1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaHF1LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSlcclxuXHJcbiAgICAgICAgICAgICAgICAvLyNyZWdpb24gc2l0ZSAoYWJzdHJhY3QpXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJzaXRlXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL1NpdGUvOmlkXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYWJzdHJhY3Q6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgcGFyYW1zOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBudWxsLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsYXRpdHVkZToge3ZhbHVlOiBudWxsLCBzcXVhc2g6IHRydWV9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb25naXR1ZGU6IHt2YWx1ZTogbnVsbCwgc3F1YXNoOiB0cnVlfVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY29tcG9uZW50L3NpdGUvc2l0ZS5odG1sXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgYXV0aGVudGljYXRlOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRzdGF0ZVBhcmFtcycsIGZ1bmN0aW9uICgkc2NvcGUsICRzdGF0ZVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2l0ZUlEID0gJHN0YXRlUGFyYW1zLmlkO1xyXG4gICAgICAgICAgICAgICAgICAgIH1dLFxyXG4gICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8jcmVnaW9uIHNpdGUgc3R1ZmZcclxuICAgICAgICAgICAgICAgICAgICAgICAgczogJ1NJVEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzU2l0ZTogZnVuY3Rpb24gKHMsICRzdGF0ZVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5pZCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5xdWVyeSh7IGlkOiAkc3RhdGVQYXJhbXMuaWQgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxhdGxvbmc6IGZ1bmN0aW9uICgkc3RhdGVQYXJhbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc3RhdGVQYXJhbXMubGF0aXR1ZGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGF0bG9uZ2FycmF5ID0gWyRzdGF0ZVBhcmFtcy5sYXRpdHVkZSwgJHN0YXRlUGFyYW1zLmxvbmdpdHVkZV07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGxhdGxvbmdhcnJheTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1NpdGVOZXR3b3JrTmFtZXM6IGZ1bmN0aW9uIChzLCAkc3RhdGVQYXJhbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc3RhdGVQYXJhbXMuaWQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMuZ2V0U2l0ZU5ldHdvcmtOYW1lcyh7IGlkOiAkc3RhdGVQYXJhbXMuaWQgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNTaXRlTmV0d29ya1R5cGVzOiBmdW5jdGlvbiAocywgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHN0YXRlUGFyYW1zLmlkID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLmdldFNpdGVOZXR3b3JrVHlwZXMoeyBpZDogJHN0YXRlUGFyYW1zLmlkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzU2l0ZUhvdXNpbmdzOiBmdW5jdGlvbiAocywgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHN0YXRlUGFyYW1zLmlkID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLmdldFNpdGVIb3VzaW5ncyh7IGlkOiAkc3RhdGVQYXJhbXMuaWQgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXNTaXRlT1BzOiBmdW5jdGlvbiAocywgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHN0YXRlUGFyYW1zLmlkID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLmdldFNpdGVPUHMoeyBpZDogJHN0YXRlUGFyYW1zLmlkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzU2l0ZVNlbnNvcnM6IGZ1bmN0aW9uIChzLCAkc3RhdGVQYXJhbXMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICgkc3RhdGVQYXJhbXMuaWQgPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHMuZ2V0U2l0ZVNlbnNvcnMoeyBpZDogJHN0YXRlUGFyYW1zLmlkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzU2l0ZUhXTXM6IGZ1bmN0aW9uIChzLCAkc3RhdGVQYXJhbXMsICRodHRwLCAkY29va2llcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5pZCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkaHR0cC5kZWZhdWx0cy5oZWFkZXJzLmNvbW1vbi5BdXRob3JpemF0aW9uID0gJ0Jhc2ljICcgKyAkY29va2llcy5nZXQoJ1NUTkNyZWRzJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJGh0dHAuZGVmYXVsdHMuaGVhZGVycy5jb21tb24uQWNjZXB0ID0gJ2FwcGxpY2F0aW9uL2pzb24nO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLmdldFNpdGVIV01zKHsgaWQ6ICRzdGF0ZVBhcmFtcy5pZCB9KS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpc1NpdGVGaWxlczogZnVuY3Rpb24gKHMsICRzdGF0ZVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5pZCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcy5nZXRTaXRlRmlsZXMoeyBpZDogJHN0YXRlUGFyYW1zLmlkIH0pLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzU2l0ZVBlYWtzOiBmdW5jdGlvbiAocywgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHN0YXRlUGFyYW1zLmlkID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzLmdldFNpdGVQZWFrcyh7IGlkOiAkc3RhdGVQYXJhbXMuaWQgfSkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhkOiAnSE9SSVpPTlRBTF9EQVRVTScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEhvckRhdHVtczogZnVuY3Rpb24gKGhkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaGQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhjbTogJ0hPUklaT05UQUxfQ09MTF9NRVRIT0RTJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsSG9yQ29sbE1ldGhvZHM6IGZ1bmN0aW9uIChoY20pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoY20uZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0OiAnU1RBVEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxTdGF0ZXM6IGZ1bmN0aW9uIChzdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHN0LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBjOiAnQ09VTlRJRVMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxDb3VudGllczogZnVuY3Rpb24gKGMpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBjLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBodDogJ0hPVVNJTkdfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEhvdXNpbmdUeXBlczogZnVuY3Rpb24gKGh0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaHQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5uOiAnTkVUV09SS19OQU1FJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsTmV0d29ya05hbWVzOiBmdW5jdGlvbiAobm4pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBubi5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbnQ6ICdORVRXT1JLX1RZUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxOZXR3b3JrVHlwZXM6IGZ1bmN0aW9uIChudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG50LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkdDogJ0RFUExPWU1FTlRfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbERlcGxveVR5cGVzOiBmdW5jdGlvbiAoZHQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBkdC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy9zZDogJ1NFTlNPUl9ERVBMT1lNRU5UJywgLS0tLS0tLS0tLS0tLS0tLXJldHVybmVkIGluIHRoZSBiZWxvdyByZXF1ZXN0ICdhbGxTZW5zb3JUeXBlcycgZ3JvdXBlZCB0b2dldGhlclxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL2FsbFNlbnNEZXBzOiBmdW5jdGlvbiAoc2QpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgcmV0dXJuIHNkLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvL30sICAgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHA6ICdERVBMT1lNRU5UX1BSSU9SSVRZJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsRGVwbG95UHJpb3JpdGllczogZnVuY3Rpb24gKGRwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZHAuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBzaXRlIHN0dWZmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBvcCBzdHVmZiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHQ6ICdPUF9UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsT1BUeXBlczogZnVuY3Rpb24gKG9wdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmVydERhdHM6ICdWRVJUSUNBTF9EQVRVTScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFZlcnREYXR1bXM6IGZ1bmN0aW9uICh2ZXJ0RGF0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZlcnREYXRzLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0Q29sTWV0OiAnVkVSVElDQUxfQ09MTF9NRVRIT0QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxWZXJ0Q29sTWV0aG9kczogZnVuY3Rpb24gKHZlcnRDb2xNZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2ZXJ0Q29sTWV0LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcFF1YWw6ICdPUF9RVUFMSVRZJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsT1BRdWFsaXRpZXM6IGZ1bmN0aW9uIChvcFF1YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcFF1YWwuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBvcCBzdHVmZlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyNyZWdpb24gc2Vuc29yIHN0dWZmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGU6ICdFVkVOVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEV2ZW50czogZnVuY3Rpb24gKGUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBlLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzZW50OiAnU0VOU09SX1RZUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxTZW5zb3JUeXBlczogZnVuY3Rpb24gKHNlbnQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzZW50LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBzYjogJ1NFTlNPUl9CUkFORCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFNlbnNvckJyYW5kczogZnVuY3Rpb24gKHNiKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBzYi5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyNlbmRyZWdpb24gc2Vuc29yIHN0dWZmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBod20gc3R1ZmZcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHdtdDogJ0hXTV9UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsSFdNVHlwZXM6IGZ1bmN0aW9uIChod210KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaHdtdC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHE6ICdIV01fUVVBTElUWScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEhXTVF1YWxpdGllczogZnVuY3Rpb24gKGhxKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBocS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgbTogJ01BUktFUicsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbE1hcmtlcnM6IGZ1bmN0aW9uIChtKXtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBtLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIGh3bSBzdHVmZlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyNyZWdpb24gZmlsZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmdDogJ0ZJTEVfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEZpbGVUeXBlczogZnVuY3Rpb24oZnQpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZ0LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhOiAnQUdFTkNZJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsQWdlbmNpZXM6IGZ1bmN0aW9uKGEpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGEuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIGZpbGVcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIHNpdGUgKGFic3RyYWN0KVxyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBzaXRlLmluZm9cclxuICAgICAgICAgICAgICAgIC5zdGF0ZShcInNpdGUuZGFzaGJvYXJkXCIsIHtcclxuICAgICAgICAgICAgICAgICAgICB1cmw6IFwiL1NpdGVEYXNoYm9hcmRcIixcclxuICAgICAgICAgICAgICAgICAgICBhdXRoZW50aWNhdGU6IHRydWUsXHJcbiAgICAgICAgICAgICAgICAgICAgdmlld3M6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3NpdGVObyc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgJyRjb29raWVzJywgJ3RoaXNTaXRlJywgZnVuY3Rpb24gKCRzY29wZSwgJGNvb2tpZXMsIHRoaXNTaXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXNTaXRlICE9PSB1bmRlZmluZWQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS5TaXRlTm8gPSB0aGlzU2l0ZS5zaXRlX25vO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIHdhdGNoIGZvciB0aGUgc2Vzc2lvbiBldmVudCB0byBjaGFuZ2UgYW5kIHVwZGF0ZVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkgeyByZXR1cm4gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJyk7IH0sIGZ1bmN0aW9uIChuZXdWYWx1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUuc2Vzc2lvbkV2ZW50ID0gJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJykgIT09IG51bGwgJiYgJGNvb2tpZXMuZ2V0KCdTZXNzaW9uRXZlbnROYW1lJykgIT09IHVuZGVmaW5lZCA/ICRjb29raWVzLmdldCgnU2Vzc2lvbkV2ZW50TmFtZScpIDogXCJBbGwgRXZlbnRzXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlOiAnPGRpdj48aDIgc3R5bGU9XCJtYXJnaW4tdG9wOjBcIj5TaXRlIHt7U2l0ZU5vfX0gLSBGb3Ige3tzZXNzaW9uRXZlbnR9fTwvaDI+PC9kaXY+PGhyIC8+JyBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2FNYXAnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnc2l0ZU1hcEN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnQvc2l0ZS9zaXRlTWFwVmlldy5odG1sJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhU2l0ZTogZnVuY3Rpb24gKHRoaXNTaXRlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzU2l0ZSAhPT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1NpdGU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdhU2l0ZSc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdzaXRlQ3RybCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ2NvbXBvbmVudC9zaXRlL3NpdGVJbmZvVmlldy5odG1sJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnb3AnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAnb2JqZWN0aXZlUG9pbnRDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50L29iamVjdGl2ZVBvaW50L29iamVjdGl2ZVBvaW50TGlzdC5odG1sJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAnc2Vuc29yJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ3NlbnNvckN0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnQvc2Vuc29yL3NlbnNvckxpc3QuaHRtbCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ2h3bSc6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdod21DdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50L2h3bS9od21MaXN0Lmh0bWwnXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICdmaWxlJzoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udHJvbGxlcjogJ2ZpbGVDdHJsJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnY29tcG9uZW50L2ZpbGUvZmlsZUxpc3QuaHRtbCdcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgJ3BlYWsnOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiAncGVha0N0cmwnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGVtcGxhdGVVcmw6ICdjb21wb25lbnQvcGVhay9wZWFrTGlzdC5odG1sJ1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pLy8jZW5kcmVnaW9uIHNpdGUuaW5mb1xyXG5cclxuICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBRdWlja0hXTSBwYWdlXHJcbiAgICAgICAgICAgICAgICAuc3RhdGUoXCJxdWlja0NyZWF0ZVwiLCB7XHJcbiAgICAgICAgICAgICAgICAgICAgdXJsOiBcIi9RdWlja0NyZWF0ZS86aWRcIiwgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlVXJsOiBcImNvbXBvbmVudC9zaXRlL3F1aWNrQ3JlYXRlLmh0bWxcIixcclxuICAgICAgICAgICAgICAgICAgICBjb250cm9sbGVyOiBcInF1aWNrQ3JlYXRlQ3RybFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGF1dGhlbnRpY2F0ZTogdHJ1ZSxcclxuICAgICAgICAgICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoaWNoUXVpY2s6IGZ1bmN0aW9uICgkc3RhdGVQYXJhbXMpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICRzdGF0ZVBhcmFtcy5pZDtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8jcmVnaW9uIHNpdGUgc3R1ZmYgICAgICAgICAgICAgICAgICAgICAgICBcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGQ6ICdIT1JJWk9OVEFMX0RBVFVNJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsSG9yRGF0dW1zOiBmdW5jdGlvbiAoaGQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBoZC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaGNtOiAnSE9SSVpPTlRBTF9DT0xMX01FVEhPRFMnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxIb3JDb2xsTWV0aG9kczogZnVuY3Rpb24gKGhjbSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGhjbS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3Q6ICdTVEFURScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFN0YXRlczogZnVuY3Rpb24gKHN0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gc3QuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGM6ICdDT1VOVElFUycsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbENvdW50aWVzOiBmdW5jdGlvbiAoYykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGMuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sICAgICAgICAgICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBzaXRlIHN0dWZmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBvcCBzdHVmZiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHQ6ICdPUF9UWVBFJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsT1BUeXBlczogZnVuY3Rpb24gKG9wdCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9wdC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdmVydERhdHM6ICdWRVJUSUNBTF9EQVRVTScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFZlcnREYXR1bXM6IGZ1bmN0aW9uICh2ZXJ0RGF0cykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZlcnREYXRzLmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2ZXJ0Q29sTWV0OiAnVkVSVElDQUxfQ09MTF9NRVRIT0QnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxWZXJ0Q29sTWV0aG9kczogZnVuY3Rpb24gKHZlcnRDb2xNZXQpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2ZXJ0Q29sTWV0LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvcFF1YWw6ICdPUF9RVUFMSVRZJyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxsT1BRdWFsaXRpZXM6IGZ1bmN0aW9uIChvcFF1YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBvcFF1YWwuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvbiBvcCBzdHVmZiAgICAgICAgICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyNyZWdpb24gaHdtIHN0dWZmIChpZiBpZD0naHdtJ1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBod210OiAnSFdNX1RZUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxIV01UeXBlczogZnVuY3Rpb24gKGh3bXQsICRzdGF0ZVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5pZCA9PSAnSFdNJykgcmV0dXJuIGh3bXQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGhxOiAnSFdNX1FVQUxJVFknLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxIV01RdWFsaXRpZXM6IGZ1bmN0aW9uIChocSwgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHN0YXRlUGFyYW1zLmlkID09ICdIV00nKSByZXR1cm4gaHEuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG06ICdNQVJLRVInLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxNYXJrZXJzOiBmdW5jdGlvbiAobSwgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHN0YXRlUGFyYW1zLmlkID09ICdIV00nKSByZXR1cm4gbS5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIGh3bSBzdHVmZiAgXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vI3JlZ2lvbiBzZW5zb3Igc3R1ZmZcclxuICAgICAgICAgICAgICAgICAgICAgICAgZHQ6ICdERVBMT1lNRU5UX1RZUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxEZXBsb3lUeXBlczogZnVuY3Rpb24gKGR0KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZHQuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGU6ICdFVkVOVCcsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbEV2ZW50czogZnVuY3Rpb24gKGUsICRzdGF0ZVBhcmFtcykge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCRzdGF0ZVBhcmFtcy5pZCA9PSAnU2Vuc29yJykgcmV0dXJuIGUuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbnQ6ICdTRU5TT1JfVFlQRScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsbFNlbnNvclR5cGVzOiBmdW5jdGlvbiAoc2VudCwgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHN0YXRlUGFyYW1zLmlkID09ICdTZW5zb3InKSByZXR1cm4gc2VudC5nZXRBbGwoKS4kcHJvbWlzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgc2I6ICdTRU5TT1JfQlJBTkQnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxTZW5zb3JCcmFuZHM6IGZ1bmN0aW9uIChzYiwgJHN0YXRlUGFyYW1zKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoJHN0YXRlUGFyYW1zLmlkID09ICdTZW5zb3InKSByZXR1cm4gc2IuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vc2Q6ICdTRU5TT1JfREVQTE9ZTUVOVCcsIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tcmV0dXJuZWQgaW4gYWJvdmUgJ2FsbFNlbnNvclR5cGVzJyBncm91cGVkIHRvZ2V0aGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vYWxsU2Vuc0RlcHM6IGZ1bmN0aW9uIChzZCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAgICByZXR1cm4gc2QuZ2V0QWxsKCkuJHByb21pc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgaHQ6ICdIT1VTSU5HX1RZUEUnLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGxIb3VzaW5nVHlwZXM6IGZ1bmN0aW9uIChodCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGh0LmdldEFsbCgpLiRwcm9taXNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vI2VuZHJlZ2lvblxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgLy8jZW5kcmVnaW9uIFF1aWNrSFdNIHBhZ2VcclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIC8vdGhpcyBjYXVzZXMgaXNzdWVzIHdpdGggU3RhdHVzNDA0IE5vdCBmb3VuZCBvbiBjb21wb25lbnQvbWFpbi9tYWluVmlldy5odG1sXHJcbiAgICAgICAgICAgIC8vJGxvY2F0aW9uUHJvdmlkZXIuaHRtbDVNb2RlKHtcclxuICAgICAgICAgICAgLy8gICAgZW5hYmxlZDogdHJ1ZSxcclxuICAgICAgICAgICAgLy8gICAgcmVxdWlyZUJhc2U6IGZhbHNlXHJcbiAgICAgICAgICAgIC8vfSk7XHJcbiAgICAgICAgfVxyXG4gICAgXSk7XHJcbn0oKSk7XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
